name: HumanEval_143_words_in_sentence
language: php
results:
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // create an array of all the words in the sentence\n    $words = explode('\
    \ ', $sentence);\n    // prime number array\n    $prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    // create an array to hold prime number words\n    $prime_words\
    \ = [];\n    // loop through all the words in the sentence\n    foreach ($words\
    \ as $word) {\n        // get the length of the word\n        $length = strlen($word);\n\
    \        // check if the length of the word is a prime number\n        if (in_array($length,\
    \ $prime_numbers)) {\n            // add the word to the array of prime number\
    \ words\n            $prime_words[] = $word;\n        }\n    }\n    // return\
    \ the array of prime number words\n    return $prime_words;\n}\n$sentence = \"\
    This is a test\";\nprint_r(words_in_sentence($sentence));\necho PHP_EOL;\n$sentence\
    \ = \"lets go for swimming\";\nprint_r(words_in_sentence($sentence));\necho PHP_EOL;\n\
    $sentence = \"We have a big problem\";\nprint_r(words_in_sentence($sentence));\n\
    echo PHP_EOL;\n$sentence = \"We have a big problem to solve\";\nprint_r(words_in_sentence($sentence));\n\
    echo PHP_EOL;\n$sentence = \"We have a big problem to solve and it is a big one\"\
    ;\nprint_r(words_in_sentence($sentence));\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => is\n)\n\nArray\n(\n    [0] => go\n    [1] => for\n\
    )\n\nArray\n(\n    [0] => We\n    [1] => big\n    [2] => problem\n)\n\nArray\n\
    (\n    [0] => We\n    [1] => big\n    [2] => problem\n    [3] => to\n    [4] =>\
    \ solve\n)\n\nArray\n(\n    [0] => We\n    [1] => big\n    [2] => problem\n  \
    \  [3] => to\n    [4] => solve\n    [5] => and\n    [6] => it\n    [7] => is\n\
    \    [8] => big\n    [9] => one\n)\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp52z7x2so.php:56\nStack trace:\n#0 /tmp/tmp52z7x2so.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp52z7x2so.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n  \
    \  $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n}\n\
    \necho(words_in_sentence(\"This is a test\") . PHP_EOL);\necho(words_in_sentence(\"\
    lets go for swimming\") . PHP_EOL);\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxwk_75d.php:26\n\
    Stack trace:\n#0 /tmp/tmpwxwk_75d.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwxwk_75d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) $primes[]\
    \ = $word;\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6ftycxm0.php:21\nStack trace:\n#0 /tmp/tmp6ftycxm0.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6ftycxm0.php(31): candidate('This is a test')\n#2 /tmp/tmp6ftycxm0.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6ftycxm0.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $prime_sentence = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_sentence[] = $word;\n        }\n    }\n    return implode(' ', $prime_sentence);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpghqs_u49.php:20\nStack trace:\n#0 /tmp/tmpghqs_u49.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpghqs_u49.php(31): candidate('This is a test')\n#2 /tmp/tmpghqs_u49.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpghqs_u49.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_length_words = [];\n    $sentence_words = explode(' ', $sentence);\n\
    \    foreach ($sentence_words as $sentence_word) {\n        if (is_prime(strlen($sentence_word)))\
    \ {\n            $prime_length_words[] = $sentence_word;\n        }\n    }\n \
    \   return implode(' ', $prime_length_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpztvtjow6.php:20\nStack trace:\n#0 /tmp/tmpztvtjow6.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpztvtjow6.php(31): candidate('This is a test')\n#2 /tmp/tmpztvtjow6.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpztvtjow6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $arr = explode(\" \", $sentence);\n    $res = [];\n    foreach ($arr as $i\
    \ => $word) {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $res);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdw9mf2xu.php:20\nStack trace:\n#0 /tmp/tmpdw9mf2xu.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpdw9mf2xu.php(31): candidate('This is a test')\n#2 /tmp/tmpdw9mf2xu.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdw9mf2xu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) $result[] = $word;\n    }\n\
    \    return implode(' ', $result);\n}\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp62y653e1.php:20\nStack trace:\n#0 /tmp/tmp62y653e1.php(25): words_in_sentence(Array)\n\
    #1 /tmp/tmp62y653e1.php(29): candidate('This is a test')\n#2 /tmp/tmp62y653e1.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp62y653e1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = '';\n    $sentence_array = explode(' ', $sentence);\n    foreach\
    \ ($sentence_array as $word) {\n        if (check_if_prime(strlen($word))) {\n\
    \            $result .= $word . ' ';\n        }\n    }\n    return rtrim($result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_if_prime()\
    \ in /tmp/tmpc4h68hc3.php:20\nStack trace:\n#0 /tmp/tmpc4h68hc3.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpc4h68hc3.php(31): candidate('This is a test')\n#2 /tmp/tmpc4h68hc3.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc4h68hc3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // $sentence = 'lets go for swimming';\n    $sentence_words = explode(' ',\
    \ $sentence);\n    $prime_words = [];\n    for ($i = 0; $i < count($sentence_words);\
    \ $i++) {\n        if ( is_prime(strlen($sentence_words[$i])) ) {\n          \
    \  array_push($prime_words, $sentence_words[$i]);\n        }\n    }\n    return\
    \ $prime_words;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpunbrx41x.php:21\nStack trace:\n#0 /tmp/tmpunbrx41x.php(29): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpunbrx41x.php(33): candidate('This is a test')\n#2 /tmp/tmpunbrx41x.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpunbrx41x.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpumpmkg5g.php:20\nStack trace:\n#0 /tmp/tmpumpmkg5g.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpumpmkg5g.php(32): candidate('This is a test')\n#2 /tmp/tmpumpmkg5g.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpumpmkg5g.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = '';\n    $sentence = explode(' ', $sentence);\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result .=\
    \ $word . ' ';\n        }\n    }\n    return trim($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpppvx0uvt.php:20\nStack trace:\n#0 /tmp/tmpppvx0uvt.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpppvx0uvt.php(32): candidate('This is a test')\n#2 /tmp/tmpppvx0uvt.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpppvx0uvt.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $answer = [];\n    $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $str = explode(\"\
    \ \", $sentence);\n    foreach ($str as $w) {\n        if (in_array(strlen($w),\
    \ $prime_numbers)) {\n            $answer[] = $w;\n        }\n    }\n    return\
    \ implode(\" \", $answer);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpct6tzi_l.php:20\nStack trace:\n#0 /tmp/tmpct6tzi_l.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpct6tzi_l.php(31): candidate('This is a test')\n#2 /tmp/tmpct6tzi_l.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpct6tzi_l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_length_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_length_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_length_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpteq6cuu2.php:20\nStack trace:\n#0 /tmp/tmpteq6cuu2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpteq6cuu2.php(31): candidate('This is a test')\n#2 /tmp/tmpteq6cuu2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpteq6cuu2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2oxwhua6.php:23\n\
    Stack trace:\n#0 /tmp/tmp2oxwhua6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2oxwhua6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_array = explode(\" \", $sentence);\n    $primes = get_primes_array();\n\
    \    $output = [];\n    foreach ($sentence_array as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $output[] = $word;\n        }\n    }\n    return implode(\"\
    \ \", $output);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes_array()\
    \ in /tmp/tmp4u12ijm6.php:18\nStack trace:\n#0 /tmp/tmp4u12ijm6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4u12ijm6.php(32): candidate('This is a test')\n#2 /tmp/tmp4u12ijm6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4u12ijm6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $output = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $output[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $output);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx87t5gr9.php:20\nStack trace:\n#0 /tmp/tmpx87t5gr9.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpx87t5gr9.php(31): candidate('This is a test')\n#2 /tmp/tmpx87t5gr9.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx87t5gr9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output .= $word\
    \ . ' ';\n        }\n    }\n    return trim($output);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcm8v7bdn.php:20\nStack trace:\n#0 /tmp/tmpcm8v7bdn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpcm8v7bdn.php(32): candidate('This is a test')\n#2 /tmp/tmpcm8v7bdn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcm8v7bdn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsdn8nztm.php:20\nStack trace:\n#0 /tmp/tmpsdn8nztm.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpsdn8nztm.php(31): candidate('This is a test')\n#2 /tmp/tmpsdn8nztm.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsdn8nztm.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $return = '';\n    $sentence = explode(' ', $sentence);\n    $primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    foreach ($sentence as $key => $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $return .= $word . ' ';\n        }\n    }\n    return\
    \ rtrim($return);\n}\n\necho words_in_sentence('This is a test') . PHP_EOL; //\
    \ 'is'\necho words_in_sentence('lets go for swimming') . PHP_EOL; // 'go for'\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $sentence_arr\
    \ = explode(' ', $sentence);\n  $result = [];\n  foreach ($sentence_arr as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $result[] = $word;\n    }\n  }\n\
    \  return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpl64dp8bn.php:20\nStack trace:\n#0 /tmp/tmpl64dp8bn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpl64dp8bn.php(32): candidate('This is a test')\n#2 /tmp/tmpl64dp8bn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl64dp8bn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = prime_array(100);\n    $results\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $results[] = $word;\n        }\n    }\n    return implode('\
    \ ', $results);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_array()\
    \ in /tmp/tmpbetzn_ap.php:18\nStack trace:\n#0 /tmp/tmpbetzn_ap.php(29): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbetzn_ap.php(33): candidate('This is a test')\n#2 /tmp/tmpbetzn_ap.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbetzn_ap.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  //\
    \ preg_split function will split sentence using regular expression.\n  // A word\
    \ boundary is a boundary between a word and a non-word character.\n  // The meaning\
    \ of \"word\" depends on the regex engine's definition.\n  // PHP regex engine's\
    \ definition: a word character is an underscore or any character that is a letter\
    \ or digit.\n  // Therefore, \"\\b\" matches between these pairs of characters:\
    \ \"_\" and \"-\", \"-\"(in \"-9\") and \"9\", \"(\" and \"a\", \"a\" and \"Z\"\
    , \"Z\" and \"_\", etc.\n  // By default, preg_split function will return array\
    \ containing all the elements of the input string split by the delimiter.\n  //\
    \ The second argument in preg_split function is optional and you can use it to\
    \ limit the number of array elements.\n  // Therefore, in the first call to preg_split\
    \ function, we can split the sentence into words to get an array of words.\n \
    \ // In the second call to preg_split function, we can split the word into characters\
    \ using \"\\b\" as the delimiter.\n  // Then, we can filter the words that their\
    \ lengths are prime numbers,\n  // and return the filtered array as a string using\
    \ implode function.\n  return implode(' ', array_filter(preg_split('/\\b/', $sentence),\
    \ function($word) {\n    // The is_prime function will check if a given number\
    \ is a prime number or not.\n    return is_prime(strlen($word));\n  }));\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjyce55x1.php:30\nStack trace:\n#0 [internal function]: {closure}('')\n\
    #1 /tmp/tmpjyce55x1.php(31): array_filter(Array, Object(Closure))\n#2 /tmp/tmpjyce55x1.php(34):\
    \ words_in_sentence('This is a test')\n#3 /tmp/tmpjyce55x1.php(38): candidate('This\
    \ is a test')\n#4 /tmp/tmpjyce55x1.php(47): test()\n#5 {main}\n  thrown in /tmp/tmpjyce55x1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result  = '';\n    $words   = explode(' ', $sentence);\n    $primes  = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result .= ' ' . $word;\n        }\n    }\n    return\
    \ ltrim($result);\n}\n$sentence1 = 'This is a test';\necho words_in_sentence($sentence1)\
    \ . PHP_EOL;\n$sentence2 = 'lets go for swimming';\necho words_in_sentence($sentence2)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n  \
    \  $newWords = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $newWords[] = $word;\n        }\n    }\n    return\
    \ implode(' ', $newWords);\n}\necho words_in_sentence('This is a test') . PHP_EOL;\n\
    echo words_in_sentence('lets go for swimming') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $primes\
    \ = array_filter(\n    range(1, strlen($sentence)),\n    function($num) {\n  \
    \    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) {\n \
    \         return false;\n        }\n      }\n      return true;\n    }\n  );\n\
    \  $result = array_reduce(\n    explode(' ', $sentence),\n    function($acc, $word)\
    \ use ($primes) {\n      if (in_array(strlen($word), $primes)) {\n        array_push($acc,\
    \ $word);\n      }\n      return $acc;\n    },\n    []\n  );\n  return join('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7igq3l4.php:46\n\
    Stack trace:\n#0 /tmp/tmpx7igq3l4.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpx7igq3l4.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_words = [];\n    $words = explode(' ', $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxqly03w9.php:20\nStack trace:\n#0 /tmp/tmpxqly03w9.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxqly03w9.php(31): candidate('This is a test')\n#2 /tmp/tmpxqly03w9.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxqly03w9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpo2v6vnnx.php:20\nStack trace:\n#0 /tmp/tmpo2v6vnnx.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpo2v6vnnx.php(31): candidate('This is a test')\n#2 /tmp/tmpo2v6vnnx.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpo2v6vnnx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcdjo1a75.php:20\nStack trace:\n#0 /tmp/tmpcdjo1a75.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpcdjo1a75.php(32): candidate('This is a test')\n#2 /tmp/tmpcdjo1a75.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcdjo1a75.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  if ($sentence == NULL) {\n        return NULL;\n    }\n    $prime_numbers =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    $words = explode(\" \", $sentence);\n    $new_sentence\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $prime_numbers)) {\n            $new_sentence[] = $word;\n        }\n    }\n\
    \    if ($new_sentence == NULL) {\n        return NULL;\n    }\n    return implode(\"\
    \ \", $new_sentence);\n}\n\n$sentence = \"This is a test\";\necho(words_in_sentence($sentence));\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsputby7.php:46\n\
    Stack trace:\n#0 /tmp/tmpcsputby7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcsputby7.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5zf1t7_o.php:20\nStack trace:\n#0 /tmp/tmp5zf1t7_o.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp5zf1t7_o.php(32): candidate('This is a test')\n#2 /tmp/tmp5zf1t7_o.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5zf1t7_o.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_arr = explode(\" \", $sentence);\n    $new_sentence = [];\n    foreach\
    \ ($sentence_arr as $word) {\n        if (check_if_prime(strlen($word))) {\n \
    \           $new_sentence[] = $word;\n        }\n    }\n    return implode(\"\
    \ \", $new_sentence);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_if_prime()\
    \ in /tmp/tmp7p2ghpvh.php:20\nStack trace:\n#0 /tmp/tmp7p2ghpvh.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp7p2ghpvh.php(31): candidate('This is a test')\n#2 /tmp/tmp7p2ghpvh.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7p2ghpvh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result[] = $word;\n\
    \        } else {\n            $is_prime = true;\n            for ($i = 2; $i\
    \ < strlen($word); $i++) {\n                if (strlen($word) % $i == 0) {\n \
    \                   $is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if ($is_prime) {\n                $result[]\
    \ = $word;\n            }\n        }\n    }\n    return implode(' ', $result);\n\
    }\n\necho words_in_sentence('This is a test') . PHP_EOL;\necho words_in_sentence('lets\
    \ go for swimming') . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is a\ngo for\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphm7qa19v.php:45\n\
    Stack trace:\n#0 /tmp/tmphm7qa19v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphm7qa19v.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime_word($word)) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime_word()\
    \ in /tmp/tmp6l6dii3_.php:20\nStack trace:\n#0 /tmp/tmp6l6dii3_.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6l6dii3_.php(31): candidate('This is a test')\n#2 /tmp/tmp6l6dii3_.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6l6dii3_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbuppxxam.php:20\nStack trace:\n#0 /tmp/tmpbuppxxam.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbuppxxam.php(31): candidate('This is a test')\n#2 /tmp/tmpbuppxxam.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbuppxxam.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // split words\n    $words = explode(' ', $sentence);\n    // loop through\
    \ words\n    foreach ($words as $key => $word) {\n        // get word len\n  \
    \      $word_len = strlen($word);\n        // check if word len is prime\n   \
    \     if (!is_prime($word_len)) {\n            // unset word if not prime\n  \
    \          unset($words[$key]);\n        }\n    }\n    // join words\n    return\
    \ implode(' ', $words);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpvrjdwyvl.php:24\nStack trace:\n#0 /tmp/tmpvrjdwyvl.php(33): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpvrjdwyvl.php(37): candidate('This is a test')\n#2 /tmp/tmpvrjdwyvl.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpvrjdwyvl.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $word_length = strlen($word);\n\
    \        if (in_array($word_length, $prime_numbers)) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n$sentence\
    \ = \"This is a test\";\necho words_in_sentence($sentence).\"\\n\";\n$sentence\
    \ = \"lets go for swimming\";\necho words_in_sentence($sentence).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $words = explode(\" \", $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result .=\
    \ \" \".$word;\n        }\n    }\n    return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtas57ub.php:20\nStack trace:\n#0 /tmp/tmpwtas57ub.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtas57ub.php(31): candidate('This is a test')\n#2 /tmp/tmpwtas57ub.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtas57ub.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $answer = [];\n    $sentence = explode(' ', $sentence);\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $answer[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $answer);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp809kzy2c.php:20\nStack trace:\n#0 /tmp/tmp809kzy2c.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp809kzy2c.php(32): candidate('This is a test')\n#2 /tmp/tmp809kzy2c.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp809kzy2c.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            continue;\n       \
    \ }\n        if (is_prime(strlen($word))) {\n            $result .= ' ' . $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpipgpdxwg.php:23\nStack trace:\n#0 /tmp/tmpipgpdxwg.php(31): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpipgpdxwg.php(35): candidate('This is a test')\n#2 /tmp/tmpipgpdxwg.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpipgpdxwg.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $arr = explode(\" \", $sentence);\n    foreach ($arr as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result .= $word\
    \ . \" \";\n        }\n    }\n    return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphh5fip0y.php:20\nStack trace:\n#0 /tmp/tmphh5fip0y.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphh5fip0y.php(31): candidate('This is a test')\n#2 /tmp/tmphh5fip0y.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphh5fip0y.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/\\s+/', $sentence);\n    $prime_words = array_filter($words,\
    \ function($word) {\n        $word_length = strlen($word);\n        if ($word_length\
    \ <= 1) {\n            return false;\n        }\n        for ($i = 2; $i < $word_length;\
    \ $i++) {\n            if ($word_length % $i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    });\n    return implode('\
    \ ', $prime_words);\n}\necho words_in_sentence(\"This is a test\") . PHP_EOL;\n\
    echo words_in_sentence(\"lets go for swimming\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $is_prime = function($n) {\n        if ($n == 1) {\n            return false;\n\
    \        }\n        if ($n == 2) {\n            return true;\n        }\n    \
    \    if ($n % 2 == 0) {\n            return false;\n        }\n        for ($i\
    \ = 3; $i <= floor(sqrt($n)); $i += 2) {\n            if ($n % $i == 0) {\n  \
    \              return false;\n            }\n        }\n        return true;\n\
    \    };\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if ($is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\necho\
    \ words_in_sentence('This is a test') . PHP_EOL;\necho words_in_sentence('lets\
    \ go for swimming') . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $str = \"\";\n    $arr = explode(\" \", $sentence);\n    foreach ($arr as $val)\
    \ {\n        if (is_prime(strlen($val))) {\n            $str .= $val.\" \";\n\
    \        }\n    }\n    return rtrim($str);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp84fb9h16.php:20\nStack trace:\n#0 /tmp/tmp84fb9h16.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp84fb9h16.php(31): candidate('This is a test')\n#2 /tmp/tmp84fb9h16.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp84fb9h16.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \     $words_arr = explode(' ', $sentence);\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9_zq312d.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // first get a list of the words\n    $words = explode(' ', $sentence);\n \
    \   // loop over the words and check if the word is prime\n    $primes = [];\n\
    \    foreach ($words as $word) {\n        $length = strlen($word);\n        //\
    \ check if number is prime\n        $prime = false;\n        for ($i = 2; $i <\
    \ $length; $i++) {\n            if ($length % $i == 0) {\n                $prime\
    \ = true;\n                break;\n            }\n        }\n        if ($prime)\
    \ $primes[] = $word;\n    }\n    return implode(' ', $primes);\n}\necho words_in_sentence('This\
    \ is a test') . PHP_EOL;\necho words_in_sentence('lets go for swimming') . PHP_EOL;\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "This test\nlets swimming\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnle_xdka.php:42\nStack trace:\n#0 /tmp/tmpnle_xdka.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnle_xdka.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n  \
    \  $res = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $res[] = $word;\n        }\n    }\n    return implode('\
    \ ', $res);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // Create a new array and explode sentence by space\n    $words = explode('\
    \ ', $sentence);\n    // Create an empty array for primes\n    $primes = [];\n\
    \    // Create a new array for sentence\n    $new_sentence = [];\n    // For each\
    \ word in the sentence\n    foreach ($words as $word) {\n        // If the length\
    \ of the word is prime\n        if (is_prime(strlen($word))) {\n            //\
    \ Push the word to the array of primes\n            array_push($primes, $word);\n\
    \        }\n    }\n    // If there are no primes in the sentence\n    if (empty($primes))\
    \ {\n        // Return an empty string\n        return '';\n    }\n    // For\
    \ each prime in the array of primes\n    foreach ($primes as $prime) {\n     \
    \   // Push the prime to the new sentence\n        array_push($new_sentence, $prime);\n\
    \    }\n    // Implode the sentence by space\n    return implode(' ', $new_sentence);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxkdxhw13.php:26\nStack trace:\n#0 /tmp/tmpxkdxhw13.php(45): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxkdxhw13.php(49): candidate('This is a test')\n#2 /tmp/tmpxkdxhw13.php(58):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxkdxhw13.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = preg_replace('/[^A-Za-z ]/', '', $sentence);\n    $arr = explode('\
    \ ', $sentence);\n    $primes = [];\n    foreach ($arr as $s) {\n        if (is_prime(strlen($s)))\
    \ {\n            $primes[] = $s;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpppje2e9a.php:21\nStack trace:\n#0 /tmp/tmpppje2e9a.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpppje2e9a.php(32): candidate('This is a test')\n#2 /tmp/tmpppje2e9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpppje2e9a.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = prime_number_string();\n \
    \   $new_words = [];\n    foreach ($words as $word) {\n        if (strpos($primes,\
    \ strlen($word)) !== false) {\n            $new_words[] = $word;\n        }\n\
    \    }\n    return implode(' ', $new_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_number_string()\
    \ in /tmp/tmp1oxla_zt.php:18\nStack trace:\n#0 /tmp/tmp1oxla_zt.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1oxla_zt.php(32): candidate('This is a test')\n#2 /tmp/tmp1oxla_zt.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1oxla_zt.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdoq6r_4i.php:20\nStack trace:\n#0 /tmp/tmpdoq6r_4i.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpdoq6r_4i.php(32): candidate('This is a test')\n#2 /tmp/tmpdoq6r_4i.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdoq6r_4i.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_words = [];\n    $words = explode(' ', $sentence);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == 2 || strlen($word) == 3 || strlen($word)\
    \ == 5 || strlen($word) == 7) {\n            $prime_words[] = $word;\n       \
    \ }\n    }\n    return implode(' ', $prime_words);\n}\necho words_in_sentence('This\
    \ is a test') . PHP_EOL;\necho words_in_sentence('lets go for swimming') . PHP_EOL;\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $ary_sentence = explode(\" \", $sentence);\n    $ary_new_sentence = [];\n \
    \   foreach ($ary_sentence as $word) {\n        if (is_prime(strlen($word))) {\n\
    \            $ary_new_sentence[] = $word;\n        }\n    }\n    return implode(\"\
    \ \", $ary_new_sentence);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjlgqb96b.php:20\nStack trace:\n#0 /tmp/tmpjlgqb96b.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpjlgqb96b.php(31): candidate('This is a test')\n#2 /tmp/tmpjlgqb96b.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjlgqb96b.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  //parse the sentence and put into array\n    $sentence_array = explode(\" \"\
    , $sentence);\n    //create a new array for the results\n    $result_array = [];\n\
    \    //loop through sentence array\n    foreach ($sentence_array as $value) {\n\
    \        //if the length of the word is a prime number\n        if (is_prime(strlen($value)))\
    \ {\n            //add the word to the result array\n            $result_array[]\
    \ = $value;\n        }\n    }\n    //return the result array imploded by a space\n\
    \    return implode(\" \", $result_array);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpibe1x73q.php:24\nStack trace:\n#0 /tmp/tmpibe1x73q.php(33): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpibe1x73q.php(37): candidate('This is a test')\n#2 /tmp/tmpibe1x73q.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpibe1x73q.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // split the sentence into array of words\n    $words = explode(' ', $sentence);\n\
    \    // iterate the words array\n    foreach ($words as $k => $word) {\n     \
    \   // check if the word length is a prime number or not\n        if (!is_prime(strlen($word)))\
    \ {\n            // remove the word from the array\n            unset($words[$k]);\n\
    \        }\n    }\n    // join the new array into string\n    return implode('\
    \ ', $words);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpivbchmhz.php:22\nStack trace:\n#0 /tmp/tmpivbchmhz.php(31): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpivbchmhz.php(35): candidate('This is a test')\n#2 /tmp/tmpivbchmhz.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpivbchmhz.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $res = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n   \
    \     }\n    }\n    return implode(' ', $res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8q2cdlpq.php:20\nStack trace:\n#0 /tmp/tmp8q2cdlpq.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8q2cdlpq.php(32): candidate('This is a test')\n#2 /tmp/tmp8q2cdlpq.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8q2cdlpq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_array = explode(\" \", $sentence);\n    $new_sentence = \"\";\n \
    \   foreach ($sentence_array as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $new_sentence .= $word . \" \";\n        }\n    }\n    return\
    \ $new_sentence;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05ol9v90.php:20\nStack trace:\n#0 /tmp/tmp05ol9v90.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05ol9v90.php(32): candidate('This is a test')\n#2 /tmp/tmp05ol9v90.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05ol9v90.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // convert the sentence to an array of words\n    $words = explode(' ', $sentence);\n\
    \    // initialize the primes array\n    $primes = [];\n    // iterate over the\
    \ words\n    foreach ($words as $word) {\n        // convert the word to an array\
    \ of letters\n        $letters = str_split($word);\n        // if the word length\
    \ is a prime number\n        if (is_prime($letters)) {\n            // push it\
    \ to the primes array\n            array_push($primes, $word);\n        }\n  \
    \  }\n    // return the primes as a string\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxc2bzbfa.php:26\nStack trace:\n#0 /tmp/tmpxc2bzbfa.php(35): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxc2bzbfa.php(39): candidate('This is a test')\n#2 /tmp/tmpxc2bzbfa.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxc2bzbfa.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // your code here\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcgba3ec.php:25\n\
    Stack trace:\n#0 /tmp/tmplcgba3ec.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplcgba3ec.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpq0tac12e.php:20\nStack trace:\n#0 /tmp/tmpq0tac12e.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpq0tac12e.php(32): candidate('This is a test')\n#2 /tmp/tmpq0tac12e.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpq0tac12e.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $sentence\
    \ = explode(' ', $sentence);\n  $result = [];\n  foreach ($sentence as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $result[] = $word;\n    }\n  }\n\
    \  return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnlsddmu4.php:20\nStack trace:\n#0 /tmp/tmpnlsddmu4.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpnlsddmu4.php(32): candidate('This is a test')\n#2 /tmp/tmpnlsddmu4.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnlsddmu4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n\t\
    function is_prime($num) {\n\t\tfor ($i = 2; $i < sqrt($num); $i++) {\n\t\t\tif\
    \ ($num % $i == 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n\t$words = explode('\
    \ ', $sentence);\n\t$str = '';\n\tforeach ($words as $word) {\n\t\tif (is_prime(strlen($word)))\
    \ $str .= ' ' . $word;\n\t}\n\treturn $str;\n}\n\necho words_in_sentence('This\
    \ is a test'); // 'is'\necho words_in_sentence('lets go for swimming'); // 'go\
    \ for'\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: " This is a test\nFatal error: Cannot redeclare is_prime() (previously declared\
    \ in /tmp/tmp2ryiy9mq.php:17) in /tmp/tmp2ryiy9mq.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n\
    \    $new_sentence = array();\n    foreach ($words as $key => $word) {\n     \
    \   if (in_array(strlen($word), $prime_numbers)) {\n            $new_sentence[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $new_sentence);\n}\nprint_r(words_in_sentence('lets\
    \ go for swimming'));\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: go for
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words=explode(\"\
    \ \",$sentence);\n  $new_words=[];\n  foreach($words as $word) {\n    if(is_prime(strlen($word)))\n\
    \      $new_words[]=$word;\n  }\n  return implode(\" \",$new_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagrp26bz.php:20\nStack trace:\n#0 /tmp/tmpagrp26bz.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagrp26bz.php(30): candidate('This is a test')\n#2 /tmp/tmpagrp26bz.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagrp26bz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $arr = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbz50zkpr.php:20\nStack trace:\n#0 /tmp/tmpbz50zkpr.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbz50zkpr.php(31): candidate('This is a test')\n#2 /tmp/tmpbz50zkpr.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbz50zkpr.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return join(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnuv9f1a4.php:20\nStack trace:\n#0 /tmp/tmpnuv9f1a4.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnuv9f1a4.php(31): candidate('This is a test')\n#2 /tmp/tmpnuv9f1a4.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnuv9f1a4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (word_is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function word_is_prime()\
    \ in /tmp/tmpe8y64vus.php:20\nStack trace:\n#0 /tmp/tmpe8y64vus.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpe8y64vus.php(31): candidate('This is a test')\n#2 /tmp/tmpe8y64vus.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpe8y64vus.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $ans = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $ans[] = $word;\n   \
    \     }\n    }\n    return implode(' ', $ans);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz49eq7y0.php:20\nStack trace:\n#0 /tmp/tmpz49eq7y0.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz49eq7y0.php(31): candidate('This is a test')\n#2 /tmp/tmpz49eq7y0.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz49eq7y0.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // $words_in_sentence = [];\n    // $words = explode(' ', $sentence);\n   \
    \ // for ($i = 0; $i < count($words); $i++) {\n    //     if (strlen($words[$i])\
    \ == 1) {\n    //         continue;\n    //     }\n    //     $is_prime = true;\n\
    \    //     for ($j = 2; $j < strlen($words[$i]); $j++) {\n    //         if (strlen($words[$i])\
    \ % $j == 0) {\n    //             $is_prime = false;\n    //             break;\n\
    \    //         }\n    //     }\n    //     if ($is_prime) {\n    //         $words_in_sentence[]\
    \ = $words[$i];\n    //     }\n    // }\n    // return $words_in_sentence;\n \
    \   $words_in_sentence = [];\n    $words = explode(' ', $sentence);\n    for ($i\
    \ = 0; $i < count($words); $i++) {\n        if (strlen($words[$i]) == 1) {\n \
    \           continue;\n        }\n        $is_prime = true;\n        for ($j =\
    \ 2; $j < strlen($words[$i]); $j++) {\n            if (strlen($words[$i]) % $j\
    \ == 0) {\n                $is_prime = false;\n                break;\n      \
    \      }\n        }\n        if ($is_prime) {\n            $words_in_sentence[]\
    \ = $words[$i];\n        }\n    }\n    return $words_in_sentence;\n}\n$sentence\
    \ = \"This is a test\";\necho implode(' ', words_in_sentence($sentence));\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt76dfd29.php:61\n\
    Stack trace:\n#0 /tmp/tmpt76dfd29.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpt76dfd29.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpud1bqakf.php:20\nStack trace:\n#0 /tmp/tmpud1bqakf.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpud1bqakf.php(31): candidate('This is a test')\n#2 /tmp/tmpud1bqakf.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpud1bqakf.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_length_words = array();\n    $sentence_array = explode(\" \", $sentence);\n\
    \    foreach ($sentence_array as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $prime_length_words[] = $word;\n        }\n    }\n    return\
    \ implode(\" \", $prime_length_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmplmmie0hb.php:20\nStack trace:\n#0 /tmp/tmplmmie0hb.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmplmmie0hb.php(32): candidate('This is a test')\n#2 /tmp/tmplmmie0hb.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplmmie0hb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/(\\s+)/', $sentence, null, PREG_SPLIT_DELIM_CAPTURE);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return join('', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphnn3grst.php:20\nStack trace:\n#0 /tmp/tmphnn3grst.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphnn3grst.php(32): candidate('This is a test')\n#2 /tmp/tmphnn3grst.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphnn3grst.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(\" \", $sentence);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $nums)) {\n            $result[] = $word;\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\nprint_r(words_in_sentence(\"This is a test\"));\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: is
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $prime = is_prime(strlen($word));\n        if ($prime) $primes[]\
    \ = $word;\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpkqqnekdc.php:20\nStack trace:\n#0 /tmp/tmpkqqnekdc.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpkqqnekdc.php(30): candidate('This is a test')\n#2 /tmp/tmpkqqnekdc.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkqqnekdc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $arr = explode(\" \", $sentence);\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if(is_prime($arr[$i]))\n            $result\
    \ .= $arr[$i].\" \";\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6stu80eh.php:20\nStack trace:\n#0 /tmp/tmp6stu80eh.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6stu80eh.php(30): candidate('This is a test')\n#2 /tmp/tmp6stu80eh.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6stu80eh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \     $words = explode(' ', $sentence);\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz0gh5gyk.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $prime_words);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuvcler5j.php:20\nStack trace:\n#0 /tmp/tmpuvcler5j.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpuvcler5j.php(31): candidate('This is a test')\n#2 /tmp/tmpuvcler5j.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuvcler5j.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $tokens  = explode(' ', $sentence);\n    $primes  = array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n\
    \    $results = array();\n    foreach ($tokens as $token) {\n        $size = strlen($token);\n\
    \        if (in_array($size, $primes)) {\n            $results[] = $token;\n \
    \       }\n    }\n    return implode(' ', $results);\n}\n\n$sentence = 'This is\
    \ a test';\nvar_dump(words_in_sentence($sentence));\n$sentence = 'lets go for\
    \ swimming';\nvar_dump(words_in_sentence($sentence));\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(2) \"is\"\nstring(6) \"go for\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp3r2isfpi.php:20\nStack trace:\n#0 /tmp/tmp3r2isfpi.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp3r2isfpi.php(31): candidate('This is a test')\n#2 /tmp/tmp3r2isfpi.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3r2isfpi.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words=explode(\" \",$sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \",$result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx2p4oemi.php:20\nStack trace:\n#0 /tmp/tmpx2p4oemi.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx2p4oemi.php(31): candidate('This is a test')\n#2 /tmp/tmpx2p4oemi.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx2p4oemi.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpe5v7q094.php:20\nStack trace:\n#0 /tmp/tmpe5v7q094.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpe5v7q094.php(32): candidate('This is a test')\n#2 /tmp/tmpe5v7q094.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpe5v7q094.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    foreach ($words as $key => $word) {\n\
    \        if (!is_prime(strlen($word))) {\n            unset($words[$key]);\n \
    \       }\n    }\n    return implode(' ', $words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmiiuydt7.php:19\nStack trace:\n#0 /tmp/tmpmiiuydt7.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmiiuydt7.php(30): candidate('This is a test')\n#2 /tmp/tmpmiiuydt7.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmiiuydt7.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $primes = [];\n    foreach ($sentence\
    \ as $word) {\n        $length = strlen($word);\n        if ($length <= 1) continue;\n\
    \        $is_prime = true;\n        for ($i = 2; $i < $length; $i++) {\n     \
    \       if ($length % $i == 0) {\n                $is_prime = false;\n       \
    \         break;\n            }\n        }\n        if ($is_prime) $primes[] =\
    \ $word;\n    }\n    return implode(' ', $primes);\n}\n\n$sentence = 'This is\
    \ a test';\nprint words_in_sentence($sentence) . \"\\n\";\n$sentence = 'lets go\
    \ for swimming';\nprint words_in_sentence($sentence) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/\\s+/', $sentence);\n    foreach ($words as $k => $word)\
    \ {\n        if (!is_prime(strlen($word))) {\n            unset($words[$k]);\n\
    \        }\n    }\n    return implode(' ', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxs9dk_ov.php:19\nStack trace:\n#0 /tmp/tmpxs9dk_ov.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxs9dk_ov.php(31): candidate('This is a test')\n#2 /tmp/tmpxs9dk_ov.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxs9dk_ov.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // find prime numbers in the sentence\n    $str_arr = explode(\" \", $sentence);\n\
    \    $prime_numbers = [];\n    foreach ($str_arr as $key => $value) {\n      \
    \  if (is_prime($key)) {\n            $prime_numbers[] = $value;\n        }\n\
    \    }\n    $result = implode(\" \", $prime_numbers);\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpr5rvvxk0.php:21\nStack trace:\n#0 /tmp/tmpr5rvvxk0.php(30): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpr5rvvxk0.php(34): candidate('This is a test')\n#2 /tmp/tmpr5rvvxk0.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpr5rvvxk0.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpfv604bno.php:20\nStack trace:\n#0 /tmp/tmpfv604bno.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpfv604bno.php(31): candidate('This is a test')\n#2 /tmp/tmpfv604bno.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfv604bno.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \     $words_lengths = [];\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpekqn1m62.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = array(1, 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n\
    \    $res = '';\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $res .= $word . ' ';\n        }\n    }\n    return\
    \ trim($res);\n}\necho words_in_sentence('is This my code test') . PHP_EOL;\n\
    echo words_in_sentence('lets go for swimming') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is my\ngo for\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d25bsia.php:34\n\
    Stack trace:\n#0 /tmp/tmp2d25bsia.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2d25bsia.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $key => $word) {\n        $word_len = strlen($word);\n        if (in_array($word_len,\
    \ $primes)) {\n            unset($words[$key]);\n        } else {\n          \
    \  if (is_prime($word_len)) {\n                $primes[] = $word_len;\n      \
    \      } else {\n                unset($words[$key]);\n            }\n       \
    \ }\n    }\n    return implode(' ', $words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbkfgmwoq.php:24\nStack trace:\n#0 /tmp/tmpbkfgmwoq.php(34): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbkfgmwoq.php(38): candidate('This is a test')\n#2 /tmp/tmpbkfgmwoq.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbkfgmwoq.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if(is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4psk8gvi.php:20\nStack trace:\n#0 /tmp/tmp4psk8gvi.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4psk8gvi.php(32): candidate('This is a test')\n#2 /tmp/tmp4psk8gvi.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4psk8gvi.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // Build an array of prime numbers from 2 to the length of the longest word\
    \ in the sentence\n    $max_word_length = 0;\n    $words = explode(' ', $sentence);\n\
    \    foreach ($words as $word) {\n        $max_word_length = max($max_word_length,\
    \ strlen($word));\n    }\n    $primes = [2];\n    for ($i = 3; $i <= $max_word_length;\
    \ $i += 2) {\n        $is_prime = true;\n        foreach ($primes as $prime) {\n\
    \            if ($i % $prime == 0) {\n                $is_prime = false;\n   \
    \             break;\n            }\n        }\n        if ($is_prime) {\n   \
    \         $primes[] = $i;\n        }\n    }\n    // Go through each word in the\
    \ sentence and build a new string from\n    // any words that have a length that\
    \ is in the prime number array\n    $result = '';\n    foreach ($words as $word)\
    \ {\n        if (in_array(strlen($word), $primes)) {\n            $result .= $word\
    \ . ' ';\n        }\n    }\n    return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ic6rh3m.php:20\nStack trace:\n#0 /tmp/tmp4ic6rh3m.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4ic6rh3m.php(31): candidate('This is a test')\n#2 /tmp/tmp4ic6rh3m.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ic6rh3m.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $sentence = explode(' ', $sentence);\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) $result[] = $word;\n    }\n\
    \    return implode(' ', $result);\n}\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpi4658bug.php:20\nStack trace:\n#0 /tmp/tmpi4658bug.php(25): words_in_sentence(Array)\n\
    #1 /tmp/tmpi4658bug.php(29): candidate('This is a test')\n#2 /tmp/tmpi4658bug.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpi4658bug.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (primeLength($word)) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function primeLength()\
    \ in /tmp/tmpnxo7x3ei.php:20\nStack trace:\n#0 /tmp/tmpnxo7x3ei.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnxo7x3ei.php(32): candidate('This is a test')\n#2 /tmp/tmpnxo7x3ei.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnxo7x3ei.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  if (empty($sentence)) {\n        return '';\n    }\n    $sentence_array = explode('\
    \ ', $sentence);\n    $new_sentence = [];\n    $prime_numbers = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    foreach ($sentence_array as $key => $word) {\n        if (in_array(strlen($word),\
    \ $prime_numbers)) {\n            $new_sentence[] = $word;\n        }\n    }\n\
    \    return implode(' ', $new_sentence);\n}\n\n$sentence = 'This is a test';\n\
    echo words_in_sentence($sentence) . PHP_EOL;\n$sentence = 'lets go for swimming';\n\
    echo words_in_sentence($sentence) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n\t\
    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97];\n\t$words = explode(' ', $sentence);\n\t$new_words\
    \ = [];\n\tforeach ($words as $word) {\n\t\tif (in_array(strlen($word), $primes))\
    \ {\n\t\t\t$new_words[] = $word;\n\t\t}\n\t}\n\treturn implode(' ', $new_words);\n\
    }\necho words_in_sentence('This is a test') . PHP_EOL;\necho words_in_sentence('lets\
    \ go for swimming') . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $str_array = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($str_array as $word) {\n        if (is_prime(strlen($word))) {\n          \
    \  $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpfeyv8am6.php:20\nStack trace:\n#0 /tmp/tmpfeyv8am6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpfeyv8am6.php(32): candidate('This is a test')\n#2 /tmp/tmpfeyv8am6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfeyv8am6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  //\
    \ this is a test\n  $words = explode(' ', $sentence);\n  $prime_words = [];\n\
    \  foreach ($words as $word) {\n    $word_length = strlen($word);\n    if (is_prime($word_length))\
    \ {\n      $prime_words[] = $word;\n    }\n  }\n  return implode(' ', $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpueeqp078.php:22\nStack trace:\n#0 /tmp/tmpueeqp078.php(30): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpueeqp078.php(34): candidate('This is a test')\n#2 /tmp/tmpueeqp078.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpueeqp078.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsshqe52x.php:20\nStack trace:\n#0 /tmp/tmpsshqe52x.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpsshqe52x.php(32): candidate('This is a test')\n#2 /tmp/tmpsshqe52x.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsshqe52x.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $answer = [];\n    $array = explode(\" \", $sentence);\n    for ($i = 0; $i\
    \ < count($array); $i++) {\n        if (is_prime($array[$i])) {\n            array_push($answer,\
    \ $array[$i]);\n        }\n    }\n    return implode(\" \", $answer);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsaweqet3.php:20\nStack trace:\n#0 /tmp/tmpsaweqet3.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpsaweqet3.php(31): candidate('This is a test')\n#2 /tmp/tmpsaweqet3.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsaweqet3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \     $sentence_parts = explode(' ', $sentence);\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxp17qnxv.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode('\
    \ ', $sentence);\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $prime_numbers)) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ implode(' ', $result);\n}\n\necho words_in_sentence('This is a test') . \"\\\
    n\";\necho words_in_sentence('lets go for swimming') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $words = explode(\" \", $sentence);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == 1) continue;\n        if (is_prime(strlen($word)))\
    \ $result .= $word . \" \";\n    }\n    return trim($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpizrzj4n8.php:21\nStack trace:\n#0 /tmp/tmpizrzj4n8.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpizrzj4n8.php(31): candidate('This is a test')\n#2 /tmp/tmpizrzj4n8.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpizrzj4n8.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $words = explode(\" \", $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result .=\
    \ $word . \" \";\n        }\n    }\n    return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbdejsr68.php:20\nStack trace:\n#0 /tmp/tmpbdejsr68.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbdejsr68.php(31): candidate('This is a test')\n#2 /tmp/tmpbdejsr68.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbdejsr68.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result .= $word\
    \ . ' ';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp81meyalm.php:20\nStack trace:\n#0 /tmp/tmp81meyalm.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp81meyalm.php(32): candidate('This is a test')\n#2 /tmp/tmp81meyalm.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp81meyalm.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $results = [];\n    $words = explode(' ', $sentence);\n    foreach ($words\
    \ as $word) {\n        if(strlen($word) == 1) continue;\n        if(is_prime(strlen($word)))\
    \ $results[] = $word;\n    }\n    return implode(' ', $results);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpw7e47bje.php:21\nStack trace:\n#0 /tmp/tmpw7e47bje.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpw7e47bje.php(30): candidate('This is a test')\n#2 /tmp/tmpw7e47bje.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpw7e47bje.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  if ($sentence == null || strlen($sentence) == 0) {\n        return null;\n\
    \    }\n    $sentence = trim($sentence);\n    $words = explode(\" \", $sentence);\n\
    \    $result = [];\n    for ($i = 0; $i < count($words); $i++) {\n        if (is_prime(strlen($words[$i])))\
    \ {\n            array_push($result, $words[$i]);\n        }\n    }\n    return\
    \ implode(\" \", $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmfe051bz.php:24\nStack trace:\n#0 /tmp/tmpmfe051bz.php(31): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmfe051bz.php(35): candidate('This is a test')\n#2 /tmp/tmpmfe051bz.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmfe051bz.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2f3ej6in.php:20\nStack trace:\n#0 /tmp/tmp2f3ej6in.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmp2f3ej6in.php(31): candidate('This is a test')\n#2 /tmp/tmp2f3ej6in.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2f3ej6in.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $arr = explode(\" \", $sentence);\n    $out = \"\";\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if (is_prime($arr[$i])) {\n            $out .=\
    \ $arr[$i] . \" \";\n        }\n    }\n    return trim($out);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmplzx7flcv.php:20\nStack trace:\n#0 /tmp/tmplzx7flcv.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmplzx7flcv.php(31): candidate('This is a test')\n#2 /tmp/tmplzx7flcv.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplzx7flcv.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = trim($sentence);\n    $words = explode(' ', $sentence);\n    $prime_length_words\
    \ = array();\n    $lowest_prime_length = 101;\n\n    foreach ($words as $word)\
    \ {\n        $length = strlen($word);\n        if (is_prime($length)) {\n    \
    \        $prime_length_words[] = $word;\n            if ($length < $lowest_prime_length)\
    \ {\n                $lowest_prime_length = $length;\n            }\n        }\n\
    \    }\n\n    $last_prime_length_word = '';\n    foreach ($prime_length_words\
    \ as $word) {\n        if (strlen($word) == $lowest_prime_length) {\n        \
    \    $last_prime_length_word = $word;\n        }\n    }\n\n    $new_sentence =\
    \ implode(' ', $prime_length_words);\n    $new_sentence = str_replace($last_prime_length_word,\
    \ '', $new_sentence);\n    $new_sentence = trim($new_sentence);\n    $new_sentence\
    \ .= ' ' . $last_prime_length_word;\n\n    return $new_sentence;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzjmheagb.php:24\nStack trace:\n#0 /tmp/tmpzjmheagb.php(48): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzjmheagb.php(52): candidate('This is a test')\n#2 /tmp/tmpzjmheagb.php(61):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzjmheagb.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr as\
    \ $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n \
    \       }\n    }\n    return implode(\" \", $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpyueylqbt.php:20\nStack trace:\n#0 /tmp/tmpyueylqbt.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpyueylqbt.php(31): candidate('This is a test')\n#2 /tmp/tmpyueylqbt.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyueylqbt.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = preg_replace('/\\s+/', ' ', $sentence);\n    $sentence = trim($sentence);\n\
    \    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if ( is_prime_number($word) ) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime_number()\
    \ in /tmp/tmpmxezvl36.php:22\nStack trace:\n#0 /tmp/tmpmxezvl36.php(29): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmxezvl36.php(33): candidate('This is a test')\n#2 /tmp/tmpmxezvl36.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmxezvl36.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $a = explode(' ', $sentence);\n    $output = [];\n    foreach ($a as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpye59xwpw.php:20\nStack trace:\n#0 /tmp/tmpye59xwpw.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpye59xwpw.php(31): candidate('This is a test')\n#2 /tmp/tmpye59xwpw.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpye59xwpw.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // $sentence = preg_replace('/\\s+/', ' ', $sentence);\n    $sentence = explode('\
    \ ', $sentence);\n    foreach ($sentence as $key => $w) {\n        if (is_prime($w))\
    \ {\n            $r[] = $w;\n        }\n    }\n    return implode(' ', $r);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp3btha9sz.php:20\nStack trace:\n#0 /tmp/tmp3btha9sz.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmp3btha9sz.php(31): candidate('This is a test')\n#2 /tmp/tmp3btha9sz.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3btha9sz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6l605qn7.php:20\nStack trace:\n#0 /tmp/tmp6l605qn7.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6l605qn7.php(32): candidate('This is a test')\n#2 /tmp/tmp6l605qn7.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6l605qn7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnyfhy_0m.php:21\nStack trace:\n#0 /tmp/tmpnyfhy_0m.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnyfhy_0m.php(32): candidate('This is a test')\n#2 /tmp/tmpnyfhy_0m.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnyfhy_0m.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  if\
    \ (empty($sentence)) return $sentence;\n  $result = \"\";\n  $arr = explode(\"\
    \ \", $sentence);\n  for ($i = 0; $i < count($arr); $i++) {\n    if (is_prime(strlen($arr[$i])))\
    \ {\n      $result .= $arr[$i] . \" \";\n    }\n  }\n  return trim($result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjgsjn58i.php:21\nStack trace:\n#0 /tmp/tmpjgsjn58i.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpjgsjn58i.php(32): candidate('This is a test')\n#2 /tmp/tmpjgsjn58i.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjgsjn58i.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $len = strlen($word);\n        if (is_prime($len)) $primes[]\
    \ = $word;\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp44v1clx8.php:21\nStack trace:\n#0 /tmp/tmp44v1clx8.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp44v1clx8.php(30): candidate('This is a test')\n#2 /tmp/tmp44v1clx8.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp44v1clx8.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/ /', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpm2gncb_3.php:20\nStack trace:\n#0 /tmp/tmpm2gncb_3.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpm2gncb_3.php(31): candidate('This is a test')\n#2 /tmp/tmpm2gncb_3.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm2gncb_3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $output[] = $word;\n\
    \        } else {\n            if (is_prime(strlen($word))) {\n              \
    \  $output[] = $word;\n            }\n        }\n    }\n    return implode(' ',\
    \ $output);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpszkcde52.php:23\nStack trace:\n#0 /tmp/tmpszkcde52.php(32): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpszkcde52.php(36): candidate('This is a test')\n#2 /tmp/tmpszkcde52.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpszkcde52.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_arr = explode(\" \", $sentence);\n    $result = array();\n    foreach\
    \ ($sentence_arr as $key => $value) {\n        if (is_prime(strlen($value))) {\n\
    \            $result[] = $value;\n        }\n    }\n    return implode(\" \",\
    \ $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbnynf3mk.php:20\nStack trace:\n#0 /tmp/tmpbnynf3mk.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbnynf3mk.php(31): candidate('This is a test')\n#2 /tmp/tmpbnynf3mk.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbnynf3mk.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    $split = explode(' ', $sentence);\n  \
    \  $result = [];\n    foreach ($split as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence('This is a test');\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: is
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_arr = explode(\" \", $sentence);\n    $prime_arr = array();\n   \
    \ $sentence_length = count($sentence_arr);\n    for ($i = 0; $i < $sentence_length;\
    \ $i++) {\n        $current_word_length = strlen($sentence_arr[$i]);\n       \
    \ if (is_prime($current_word_length)) {\n            array_push($prime_arr, $sentence_arr[$i]);\n\
    \        }\n    }\n    $sentence_prime = implode(\" \", $prime_arr);\n    return\
    \ $sentence_prime;\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8qxigsje.php:22\nStack trace:\n#0 /tmp/tmp8qxigsje.php(30): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8qxigsje.php(34): candidate('This is a test')\n#2 /tmp/tmp8qxigsje.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8qxigsje.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $array_words = explode(\" \", $sentence);\n\
    \    $result = \"\";\n    foreach ($array_words as $word) {\n        if (in_array(strlen($word),\
    \ $prime_numbers)) {\n            $result .= $word . \" \";\n        }\n    }\n\
    \    return $result;\n}\necho words_in_sentence(\"This is a test\") . PHP_EOL;\n\
    echo words_in_sentence(\"lets go for swimming\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is \ngo for \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25zwnljk.php:34\n\
    Stack trace:\n#0 /tmp/tmp25zwnljk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp25zwnljk.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  //\
    \ I want to separate the words into an array,\n  // So that I can use the words\
    \ as array elements later\n  $sentence = explode(\" \", $sentence);\n  $new_sentence\
    \ = [];\n  // I want to know if a number is prime,\n  // So, I will use the function\
    \ is_prime()\n  function is_prime($number) {\n    // 1 is not a prime number\n\
    \    if ($number == 1) {\n      return false;\n    }\n    // 2 is a prime number\n\
    \    if ($number == 2) {\n      return true;\n    }\n    // All even numbers (except\
    \ 2) are not prime numbers\n    if ($number % 2 == 0) {\n      return false;\n\
    \    }\n    // Any number that is not divisible by 2,\n    // and that has a remainder\
    \ when dividing it by 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 or 53\
    \ is a prime number\n    $primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53];\n    foreach ($primes as $prime) {\n      if ($number % $prime\
    \ == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  //\
    \ Then I will use the function is_prime()\n  // to check if the word has a prime\
    \ number of letters,\n  // and if it does, I will append it to the new_sentence\
    \ array\n  foreach ($sentence as $word) {\n    if (is_prime(strlen($word))) {\n\
    \      array_push($new_sentence, $word);\n    }\n  }\n  // And lastly, I will\
    \ merge the words back into a sentence,\n  // and return it as a string\n  return\
    \ implode(\" \", $new_sentence);\n}\n\nprint_r(words_in_sentence(\"This is a test\"\
    ) . \"\\n\");\nprint_r(words_in_sentence(\"lets go for swimming\") . \"\\n\");\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\n\nFatal error: Cannot redeclare is_prime() (previously declared in\
    \ /tmp/tmpthggh1jx.php:23) in /tmp/tmpthggh1jx.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $sentence_arr = explode(' ', $sentence);\n    foreach ($sentence_arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppsrlg1jt.php:20\nStack trace:\n#0 /tmp/tmppsrlg1jt.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmppsrlg1jt.php(32): candidate('This is a test')\n#2 /tmp/tmppsrlg1jt.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppsrlg1jt.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    foreach ($words as $key => $word) {\n\
    \        if (!is_prime(strlen($word))) {\n            unset($words[$key]);\n \
    \       }\n    }\n    return implode(' ', $words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphvu62k4r.php:19\nStack trace:\n#0 /tmp/tmphvu62k4r.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphvu62k4r.php(30): candidate('This is a test')\n#2 /tmp/tmphvu62k4r.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphvu62k4r.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/[\\s]+/', $sentence);\n    $answer = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $answer[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $answer);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4e9k2jkd.php:20\nStack trace:\n#0 /tmp/tmp4e9k2jkd.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4e9k2jkd.php(32): candidate('This is a test')\n#2 /tmp/tmp4e9k2jkd.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4e9k2jkd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // convert words in sentence to an array by splitting them\n    $words = explode('\
    \ ', $sentence);\n    // filter out all non-prime length words\n    $prime_words\
    \ = array_filter($words, function($word) {\n        return is_prime_number(strlen($word));\n\
    \    });\n    // return words that have a prime length\n    return implode(' ',\
    \ $prime_words);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime_number()\
    \ in /tmp/tmpz8gq3txe.php:21\nStack trace:\n#0 [internal function]: {closure}('This')\n\
    #1 /tmp/tmpz8gq3txe.php(22): array_filter(Array, Object(Closure))\n#2 /tmp/tmpz8gq3txe.php(27):\
    \ words_in_sentence('This is a test')\n#3 /tmp/tmpz8gq3txe.php(31): candidate('This\
    \ is a test')\n#4 /tmp/tmpz8gq3txe.php(40): test()\n#5 {main}\n  thrown in /tmp/tmpz8gq3txe.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $new_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpni69u5yg.php:20\nStack trace:\n#0 /tmp/tmpni69u5yg.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpni69u5yg.php(32): candidate('This is a test')\n#2 /tmp/tmpni69u5yg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpni69u5yg.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprhtbcgry.php:20\nStack trace:\n#0 /tmp/tmprhtbcgry.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprhtbcgry.php(32): candidate('This is a test')\n#2 /tmp/tmprhtbcgry.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprhtbcgry.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $res = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n   \
    \     }\n    }\n    return implode(' ', $res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpd6mu_pcx.php:20\nStack trace:\n#0 /tmp/tmpd6mu_pcx.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpd6mu_pcx.php(32): candidate('This is a test')\n#2 /tmp/tmpd6mu_pcx.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd6mu_pcx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = \"\";\n    $words = explode(\" \", $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result .=\
    \ $word . \" \";\n        }\n    }\n    return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpaq10_p46.php:20\nStack trace:\n#0 /tmp/tmpaq10_p46.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpaq10_p46.php(31): candidate('This is a test')\n#2 /tmp/tmpaq10_p46.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpaq10_p46.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length === 1) {\n \
    \           $primes[] = $word;\n            continue;\n        }\n        $is_prime\
    \ = true;\n        for ($i = 2; $i < $length; $i++) {\n            if ($length\
    \ % $i === 0) {\n                $is_prime = false;\n                break;\n\
    \            }\n        }\n        if ($is_prime) {\n            $primes[] = $word;\n\
    \        }\n    }\n    return implode(' ', $primes);\n}\necho words_in_sentence('This\
    \ is a test'), \"\\n\";\necho words_in_sentence('lets go for swimming'), \"\\\
    n\";\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is a\ngo for\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeo_r3e3.php:45\n\
    Stack trace:\n#0 /tmp/tmpgeo_r3e3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgeo_r3e3.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx4bout_e.php:20\nStack trace:\n#0 /tmp/tmpx4bout_e.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx4bout_e.php(31): candidate('This is a test')\n#2 /tmp/tmpx4bout_e.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx4bout_e.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $len = strlen($sentence);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($sentence[$i] == ' ') {\n            $res[] = substr($sentence,\
    \ 0, $i);\n            $sentence = substr($sentence, $i + 1);\n            $i\
    \ = 0;\n            $len = strlen($sentence);\n        }\n    }\n    $res[] =\
    \ $sentence;\n    $len = count($res);\n    $res1 = [];\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $x = strlen($res[$i]);\n        $prime = true;\n    \
    \    for ($j = 2; $j < $x; $j++) {\n            if ($x % $j == 0) {\n        \
    \        $prime = false;\n                break;\n            }\n        }\n \
    \       if ($prime) {\n            $res1[] = $res[$i];\n        }\n    }\n   \
    \ return implode(' ', $res1);\n}\necho words_in_sentence(\"This is a test\") .\
    \ PHP_EOL;\necho words_in_sentence(\"lets go for swimming\") . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is a\ngo for\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnkax02o.php:52\n\
    Stack trace:\n#0 /tmp/tmpgnkax02o.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpgnkax02o.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    foreach ($sentence as $key => $word)\
    \ {\n        if (!is_prime($word)) {\n            unset($sentence[$key]);\n  \
    \      }\n    }\n    return implode(' ', $sentence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcvs9fnwx.php:19\nStack trace:\n#0 /tmp/tmpcvs9fnwx.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpcvs9fnwx.php(31): candidate('This is a test')\n#2 /tmp/tmpcvs9fnwx.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcvs9fnwx.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_length_words = [];\n    $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $words\
    \ = explode(' ', $sentence);\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $prime_numbers)) {\n            $prime_length_words[] = $word;\n        }\n\
    \    }\n    return implode(' ', $prime_length_words);\n}\necho words_in_sentence('This\
    \ is a test');\necho \"\\n\";\necho words_in_sentence('lets go for swimming');\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \ $sentence = \"lets go for swimming\";\n    $prime_length_words = [];\n    $word_length\
    \ = 0;\n    $sentence_array = explode(\" \", $sentence);\n    $sentence_word_count\
    \ = count($sentence_array);\n    // $sentence_word_count = 4;\n    $is_prime =\
    \ false;\n    $prime_number_array = [];\n    $prime_number_array_count = 0;\n\
    \    for ($a = 0; $a < $sentence_word_count; $a++) {\n        $word_length = strlen($sentence_array[$a]);\n\
    \        for ($i = 2; $i < $word_length - 1; $i++) {\n            if ($word_length\
    \ % $i == 0) {\n                $is_prime = false;\n                break;\n \
    \           } else {\n                $is_prime = true;\n            }\n     \
    \   }\n        if ($is_prime) {\n            $prime_length_words[$prime_number_array_count]\
    \ = $sentence_array[$a];\n            $prime_number_array_count++;\n        }\n\
    \    }\n    $prime_words_count = count($prime_length_words);\n    // $prime_words_count\
    \ = 2;\n    $prime_words_string = \"\";\n    for ($i = 0; $i < $prime_words_count;\
    \ $i++) {\n        $prime_words_string .= $prime_length_words[$i] . \" \";\n \
    \   }\n    // trim($prime_words_string);\n    // $prime_words_string = substr($prime_words_string,\
    \ 0, -1);\n    // $prime_words_string = str_replace(\" \", \"\", $prime_words_string);\n\
    \    return $prime_words_string;\n}\necho words_in_sentence(\"This is a test\"\
    );\necho \"<br>\";\necho words_in_sentence(\"lets go for swimming\");\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkht8j0wq.php:60\n\
    Stack trace:\n#0 /tmp/tmpkht8j0wq.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkht8j0wq.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $len_prime_words = [];\n    foreach\
    \ ($words as $word) {\n        $len = strlen($word);\n        if ($len > 1 &&\
    \ is_prime($len)) {\n            $len_prime_words[] = $word;\n        }\n    }\n\
    \    return implode(' ', $len_prime_words);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpludqw7yf.php:21\nStack trace:\n#0 /tmp/tmpludqw7yf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpludqw7yf.php(32): candidate('This is a test')\n#2 /tmp/tmpludqw7yf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpludqw7yf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  if (strlen($sentence) > 100) {\n        return null;\n    }\n    $arr_sentence\
    \ = explode(\" \", $sentence);\n    $prime_numbers = [\n        2,\n        3,\n\
    \        5,\n        7,\n        11,\n        13,\n        17,\n        19,\n\
    \        23,\n        29,\n        31,\n        37,\n        41,\n        43,\n\
    \        47,\n        53,\n        59,\n        61,\n        67,\n        71,\n\
    \        73,\n        79,\n        83,\n        89,\n        97,\n    ];\n   \
    \ $new_sentence = [];\n    for ($i = 0; $i < count($arr_sentence); $i++) {\n \
    \       if (in_array(strlen($arr_sentence[$i]), $prime_numbers)) {\n         \
    \   $new_sentence[] = $arr_sentence[$i];\n        }\n    }\n    return implode(\"\
    \ \", $new_sentence);\n}\necho words_in_sentence(\"This is a test\") . \"\\n\"\
    ;\necho words_in_sentence(\"lets go for swimming\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // Input: String $sentence\n    // Output: String\n    // Time: O(N) where\
    \ N is the number of characters in the sentence\n    // Space: O(N)\n    $words\
    \ = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpj34dvw28.php:24\nStack trace:\n#0 /tmp/tmpj34dvw28.php(31): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpj34dvw28.php(35): candidate('This is a test')\n#2 /tmp/tmpj34dvw28.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpj34dvw28.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $new_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $new_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $new_words);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbapssss.php:20\nStack trace:\n#0 /tmp/tmpzbapssss.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbapssss.php(31): candidate('This is a test')\n#2 /tmp/tmpzbapssss.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbapssss.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $res = [];\n    $sentence = explode(' ', $sentence);\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n\
    \        }\n    }\n    return implode(' ', $res);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptspi_ks7.php:20\nStack trace:\n#0 /tmp/tmptspi_ks7.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmptspi_ks7.php(31): candidate('This is a test')\n#2 /tmp/tmptspi_ks7.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptspi_ks7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    $words = explode(' ', $sentence);\n  \
    \  $result = '';\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result .= $word . ' ';\n        }\n    }\n    return\
    \ rtrim($result);\n}\n\n$sentence = 'This is a test';\necho words_in_sentence($sentence)\
    \ . PHP_EOL;\n$sentence = 'lets go for swimming';\necho words_in_sentence($sentence)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $sentence_array\
    \ = explode(\" \", $sentence);\n  $result = [];\n  foreach ($sentence_array as\
    \ $word) {\n    if (is_prime(strlen($word))) {\n      $result[] = $word;\n   \
    \ }\n  }\n  return implode(\" \", $result);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbhug0oo8.php:20\nStack trace:\n#0 /tmp/tmpbhug0oo8.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbhug0oo8.php(31): candidate('This is a test')\n#2 /tmp/tmpbhug0oo8.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbhug0oo8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp47waq6nc.php:21\nStack trace:\n#0 /tmp/tmp47waq6nc.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp47waq6nc.php(32): candidate('This is a test')\n#2 /tmp/tmp47waq6nc.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp47waq6nc.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // your code here...\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxexwtzr.php:24\n\
    Stack trace:\n#0 /tmp/tmpfxexwtzr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfxexwtzr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_lengths = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $prime_lengths[] = $word;\n        }\n    }\n    return implode('\
    \ ', $prime_lengths);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpa5132xd_.php:21\nStack trace:\n#0 /tmp/tmpa5132xd_.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpa5132xd_.php(32): candidate('This is a test')\n#2 /tmp/tmpa5132xd_.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa5132xd_.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_lengths = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $prime_lengths[] = $word;\n        }\n    }\n    return implode('\
    \ ', $prime_lengths);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdoybqbvn.php:21\nStack trace:\n#0 /tmp/tmpdoybqbvn.php(29): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpdoybqbvn.php(33): candidate('This is a test')\n#2 /tmp/tmpdoybqbvn.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdoybqbvn.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $new_sentence = '';\n  $sentence_length = count($words);\n\
    \  for ($i = 0; $i < $sentence_length; $i++) {\n    $new_sentence .= (is_prime($words[$i]))\
    \ ? $words[$i] . ' ' : '';\n  }\n  return trim($new_sentence);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmplmo3hugb.php:21\nStack trace:\n#0 /tmp/tmplmo3hugb.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmplmo3hugb.php(31): candidate('This is a test')\n#2 /tmp/tmplmo3hugb.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplmo3hugb.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/\\s+/', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp62e3iuts.php:20\nStack trace:\n#0 /tmp/tmp62e3iuts.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp62e3iuts.php(31): candidate('This is a test')\n#2 /tmp/tmp62e3iuts.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp62e3iuts.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \ \t$result = '';\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp707f_52n.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $result\
    \ = '';\n  $arr = explode(' ', $sentence);\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    if (is_prime(strlen($arr[$i]))) {\n      $result .= $arr[$i] . ' ';\n\
    \    }\n  }\n  return trim($result);\n}\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzeb96efd.php:20\nStack trace:\n#0 /tmp/tmpzeb96efd.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzeb96efd.php(31): candidate('This is a test')\n#2 /tmp/tmpzeb96efd.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzeb96efd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpda9u6orq.php:20\nStack trace:\n#0 /tmp/tmpda9u6orq.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpda9u6orq.php(31): candidate('This is a test')\n#2 /tmp/tmpda9u6orq.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpda9u6orq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8m0uxmwn.php:20\nStack trace:\n#0 /tmp/tmp8m0uxmwn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8m0uxmwn.php(32): candidate('This is a test')\n#2 /tmp/tmp8m0uxmwn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8m0uxmwn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmf08_69w.php:20\nStack trace:\n#0 /tmp/tmpmf08_69w.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmf08_69w.php(31): candidate('This is a test')\n#2 /tmp/tmpmf08_69w.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmf08_69w.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = preg_split('/\\s+/', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime_word($word))\n            $prime_words[]\
    \ = $word;\n    }\n    return implode(' ', $prime_words);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime_word()\
    \ in /tmp/tmpanlbubgy.php:20\nStack trace:\n#0 /tmp/tmpanlbubgy.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpanlbubgy.php(30): candidate('This is a test')\n#2 /tmp/tmpanlbubgy.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpanlbubgy.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n\t\
    $result = '';\n\t$sentence = preg_split('/ /', $sentence);\n\tforeach ($sentence\
    \ as $word) {\n\t\tif (strlen($word) > 1 && is_prime(strlen($word))) {\n\t\t\t\
    $result .= $word . ' ';\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxfo1w_me.php:20\nStack trace:\n#0 /tmp/tmpxfo1w_me.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpxfo1w_me.php(31): candidate('This is a test')\n#2 /tmp/tmpxfo1w_me.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxfo1w_me.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_lengths = get_prime_lengths();\n    $result = [];\n    $word_lengths\
    \ = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as $word)\
    \ {\n        $word_lengths[] = strlen($word);\n    }\n    foreach ($word_lengths\
    \ as $i => $word_length) {\n        if (in_array($word_length, $prime_lengths))\
    \ {\n            $result[] = $words[$i];\n        }\n    }\n    return implode('\
    \ ', $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_prime_lengths()\
    \ in /tmp/tmp7fmeylch.php:17\nStack trace:\n#0 /tmp/tmp7fmeylch.php(32): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp7fmeylch.php(36): candidate('This is a test')\n#2 /tmp/tmp7fmeylch.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7fmeylch.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $result = [];\n  foreach ($words as $word) {\n\
    \    if (is_prime(strlen($word))) {\n      $result[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpc_ilrxv2.php:20\nStack trace:\n#0 /tmp/tmpc_ilrxv2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpc_ilrxv2.php(31): candidate('This is a test')\n#2 /tmp/tmpc_ilrxv2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc_ilrxv2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdqebyre8.php:20\nStack trace:\n#0 /tmp/tmpdqebyre8.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpdqebyre8.php(31): candidate('This is a test')\n#2 /tmp/tmpdqebyre8.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdqebyre8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8yw22jq4.php:20\nStack trace:\n#0 /tmp/tmp8yw22jq4.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8yw22jq4.php(31): candidate('This is a test')\n#2 /tmp/tmp8yw22jq4.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8yw22jq4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // your code\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_kndaxt.php:24\n\
    Stack trace:\n#0 /tmp/tmpf_kndaxt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf_kndaxt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  if\
    \ ($sentence === '') {\n    return '';\n  }\n  $words = explode(' ', $sentence);\n\
    \  $prime_lengths = [];\n  foreach ($words as $word) {\n    $length = strlen($word);\n\
    \    if (is_prime($length)) {\n      $prime_lengths[] = $word;\n    }\n  }\n \
    \ return implode(' ', $prime_lengths);\n}\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbs6pimrm.php:24\nStack trace:\n#0 /tmp/tmpbs6pimrm.php(31): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpbs6pimrm.php(35): candidate('This is a test')\n#2 /tmp/tmpbs6pimrm.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbs6pimrm.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime_number(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime_number()\
    \ in /tmp/tmpdk2c9k0p.php:20\nStack trace:\n#0 /tmp/tmpdk2c9k0p.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpdk2c9k0p.php(31): candidate('This is a test')\n#2 /tmp/tmpdk2c9k0p.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdk2c9k0p.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_arr = explode(\" \", $sentence);\n    $sentence_arr = array_filter($sentence_arr,\
    \ function($str) {\n        return strlen($str) > 1;\n    });\n    $result = array_filter($sentence_arr,\
    \ function($str) {\n        return is_prime(strlen($str));\n    });\n    return\
    \ implode(\" \", $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpv9orq024.php:22\nStack trace:\n#0 [internal function]: {closure}('This')\n\
    #1 /tmp/tmpv9orq024.php(23): array_filter(Array, Object(Closure))\n#2 /tmp/tmpv9orq024.php(27):\
    \ words_in_sentence('This is a test')\n#3 /tmp/tmpv9orq024.php(31): candidate('This\
    \ is a test')\n#4 /tmp/tmpv9orq024.php(40): test()\n#5 {main}\n  thrown in /tmp/tmpv9orq024.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $result = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpccpc7rnz.php:20\nStack trace:\n#0 /tmp/tmpccpc7rnz.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpccpc7rnz.php(31): candidate('This is a test')\n#2 /tmp/tmpccpc7rnz.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpccpc7rnz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2ztzntuz.php:20\nStack trace:\n#0 /tmp/tmp2ztzntuz.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp2ztzntuz.php(32): candidate('This is a test')\n#2 /tmp/tmp2ztzntuz.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2ztzntuz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $result = [];\n  foreach ($words as $word) {\n\
    \    if (is_prime(strlen($word))) {\n      $result[] = $word;\n    }\n  }\n  return\
    \ implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzr3mz_24.php:20\nStack trace:\n#0 /tmp/tmpzr3mz_24.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzr3mz_24.php(32): candidate('This is a test')\n#2 /tmp/tmpzr3mz_24.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzr3mz_24.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_length_words = array();\n   \
    \ foreach ($words as $word) {\n        if (is_prime(strlen($word))) {\n      \
    \      $prime_length_words[] = $word;\n        }\n    }\n    return implode('\
    \ ', $prime_length_words);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpw3r95vca.php:20\nStack trace:\n#0 /tmp/tmpw3r95vca.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpw3r95vca.php(31): candidate('This is a test')\n#2 /tmp/tmpw3r95vca.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpw3r95vca.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $arr = explode(\" \", $sentence);\n    $res = \"\";\n    foreach ($arr as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $res .= $word . \" \"\
    ;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n \
    \   return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp3tmxz26q.php:20\nStack trace:\n#0 /tmp/tmp3tmxz26q.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp3tmxz26q.php(32): candidate('This is a test')\n#2 /tmp/tmp3tmxz26q.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3tmxz26q.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = get_primes(100);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes()\
    \ in /tmp/tmphgr39w7a.php:18\nStack trace:\n#0 /tmp/tmphgr39w7a.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphgr39w7a.php(32): candidate('This is a test')\n#2 /tmp/tmphgr39w7a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphgr39w7a.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $output = \"\";\n    $sentence_words = explode(\" \", $sentence);\n    $prime_num_lengths\
    \ = prime_num_lengths_in_sentence($sentence_words);\n    for ($i = 0; $i < count($sentence_words);\
    \ $i++) {\n        if (in_array(strlen($sentence_words[$i]), $prime_num_lengths))\
    \ {\n            $output .= $sentence_words[$i] . \" \";\n        }\n    }\n \
    \   return trim($output);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_num_lengths_in_sentence()\
    \ in /tmp/tmp6mnrvw0r.php:19\nStack trace:\n#0 /tmp/tmp6mnrvw0r.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6mnrvw0r.php(32): candidate('This is a test')\n#2 /tmp/tmp6mnrvw0r.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6mnrvw0r.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $output = [];\n    $sentence = str_split($sentence);\n    $word = \"\";\n \
    \   foreach ($sentence as $letter) {\n        if ($letter != \" \") {\n      \
    \      $word .= $letter;\n        } else {\n            $output[] = $word;\n \
    \           $word = \"\";\n        }\n    }\n    $output[] = $word;\n    $result\
    \ = [];\n    foreach ($output as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $result[] = $word;\n        }\n    }\n    return implode(\" \"\
    , $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4u0jq58m.php:31\nStack trace:\n#0 /tmp/tmp4u0jq58m.php(38): words_in_sentence(Array)\n\
    #1 /tmp/tmp4u0jq58m.php(42): candidate('This is a test')\n#2 /tmp/tmp4u0jq58m.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4u0jq58m.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $aSentence = explode(' ', $sentence);\n    $aRes = [];\n    foreach ($aSentence\
    \ as $sWord) {\n        if (is_prime(strlen($sWord))) {\n            $aRes[] =\
    \ $sWord;\n        }\n    }\n    return implode(' ', $aRes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxvdlfk3y.php:20\nStack trace:\n#0 /tmp/tmpxvdlfk3y.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpxvdlfk3y.php(31): candidate('This is a test')\n#2 /tmp/tmpxvdlfk3y.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxvdlfk3y.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptjomqx1_.php:20\nStack trace:\n#0 /tmp/tmptjomqx1_.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptjomqx1_.php(31): candidate('This is a test')\n#2 /tmp/tmptjomqx1_.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptjomqx1_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $words_length = [];\n    $prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach ($words as $word) {\n        $words_length[]\
    \ = strlen($word);\n    }\n    $final_result = [];\n    foreach ($words_length\
    \ as $value) {\n        if (in_array($value, $prime_numbers)) {\n            $final_result[]\
    \ = $value;\n        }\n    }\n    return $final_result;\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqei8sog8.php:36\n\
    Stack trace:\n#0 /tmp/tmpqei8sog8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqei8sog8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = array();\n  foreach ($words as\
    \ $word) {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n\
    \    }\n  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpa9mhb8hs.php:20\nStack trace:\n#0 /tmp/tmpa9mhb8hs.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpa9mhb8hs.php(32): candidate('This is a test')\n#2 /tmp/tmpa9mhb8hs.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa9mhb8hs.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  // Assume sentence only contains letters.\n    $words = explode(' ', $sentence);\n\
    \    $prime_words = [];\n    foreach ($words as $word) {\n        $word_length\
    \ = strlen($word);\n        if (is_prime($word_length)) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpq3453dsk.php:22\nStack trace:\n#0 /tmp/tmpq3453dsk.php(30): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpq3453dsk.php(34): candidate('This is a test')\n#2 /tmp/tmpq3453dsk.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpq3453dsk.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $array_sentence = explode(\" \", $sentence);\n    $result = array();\n    foreach\
    \ ($array_sentence as $value) {\n        if (is_prime(strlen($value))) {\n   \
    \         $result[] = $value;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp42s15kfz.php:20\nStack trace:\n#0 /tmp/tmp42s15kfz.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp42s15kfz.php(32): candidate('This is a test')\n#2 /tmp/tmp42s15kfz.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp42s15kfz.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_words = [];\n    $words = explode(' ', $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) $prime_words[] = $word;\n\
    \    }\n    return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphd0bukkv.php:20\nStack trace:\n#0 /tmp/tmphd0bukkv.php(26): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphd0bukkv.php(30): candidate('This is a test')\n#2 /tmp/tmphd0bukkv.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphd0bukkv.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  if ($sentence === '') return '';\n    $words = explode(' ', $sentence);\n \
    \   $res = '';\n    foreach ($words as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $res .= $word . ' ';\n        }\n    }\n    return trim($res);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmps0lewk5d.php:21\nStack trace:\n#0 /tmp/tmps0lewk5d.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmps0lewk5d.php(32): candidate('This is a test')\n#2 /tmp/tmps0lewk5d.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmps0lewk5d.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  //\
    \ map to store prime numbers for each possible length\n  $map = array_fill(0,\
    \ 100, false);\n  // list of all prime numbers less than 100\n  $primes = [\n\
    \    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97\n  ];\n  foreach ($primes as $prime) {\n    $map[$prime]\
    \ = true;\n  }\n  $words = explode(' ', $sentence);\n  // use a string to store\
    \ the required result\n  $result = '';\n  foreach ($words as $word) {\n    $len\
    \ = strlen($word);\n    if ($map[$len]) {\n      $result .= $word . ' ';\n   \
    \ }\n  }\n  return rtrim($result);\n}\n\n$sentence = 'This is a test';\nprint_r(words_in_sentence($sentence));\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: is
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n//\
    \     $result = array();\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu0xsaf3z.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $count = strlen($word);\n        $is_prime = true;\n     \
    \   for ($i = 2; $i < $count; $i++) {\n            if ($count % $i == 0) {\n \
    \               $is_prime = false;\n                break;\n            }\n  \
    \      }\n        if ($is_prime) {\n            $primes[] = $word;\n        }\n\
    \    }\n    return implode(' ', $primes);\n}\necho words_in_sentence('This is\
    \ a test') . PHP_EOL;\necho words_in_sentence('lets go for swimming') . PHP_EOL;\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is a\ngo for\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_q3vutp1.php:41\n\
    Stack trace:\n#0 /tmp/tmp_q3vutp1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_q3vutp1.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = array();\n    foreach\
    \ ($words as $word) {\n        if (prime_number(strlen($word))) {\n          \
    \  $prime_words[] = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime_number()\
    \ in /tmp/tmpa28y8ajj.php:20\nStack trace:\n#0 /tmp/tmpa28y8ajj.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpa28y8ajj.php(31): candidate('This is a test')\n#2 /tmp/tmpa28y8ajj.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa28y8ajj.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = sieve_of_eratosthenes(100);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sieve_of_eratosthenes()\
    \ in /tmp/tmp7jpl9mx4.php:18\nStack trace:\n#0 /tmp/tmp7jpl9mx4.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp7jpl9mx4.php(32): candidate('This is a test')\n#2 /tmp/tmp7jpl9mx4.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7jpl9mx4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $s = '';\n  foreach ($words as $word) {\n    if\
    \ (is_prime(strlen($word))) {\n      $s .= $word . ' ';\n    }\n  }\n  return\
    \ rtrim($s);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmplhq5axsc.php:20\nStack trace:\n#0 /tmp/tmplhq5axsc.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmplhq5axsc.php(32): candidate('This is a test')\n#2 /tmp/tmplhq5axsc.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplhq5axsc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ug3nshr.php:20\nStack trace:\n#0 /tmp/tmp4ug3nshr.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4ug3nshr.php(31): candidate('This is a test')\n#2 /tmp/tmp4ug3nshr.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ug3nshr.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_arr = explode(\" \", $sentence);\n    $prime_words = array();\n \
    \   foreach ($sentence_arr as $word) {\n        if (is_prime(strlen($word))) {\n\
    \            $prime_words[] = $word;\n        }\n    }\n    return $prime_words;\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzofrhevq.php:20\nStack trace:\n#0 /tmp/tmpzofrhevq.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzofrhevq.php(31): candidate('This is a test')\n#2 /tmp/tmpzofrhevq.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzofrhevq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  $words\
    \ = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words as $word)\
    \ {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n    }\n\
    \  }\n  return implode(' ', $prime_words);\n}\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcdn0ms3t.php:20\nStack trace:\n#0 /tmp/tmpcdn0ms3t.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpcdn0ms3t.php(31): candidate('This is a test')\n#2 /tmp/tmpcdn0ms3t.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcdn0ms3t.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    foreach ($words as $word) {\n      \
    \  $word_length = strlen($word);\n        if (is_prime($word_length)) {\n    \
    \        $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpyrdtxt5q.php:20\nStack trace:\n#0 /tmp/tmpyrdtxt5q.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpyrdtxt5q.php(32): candidate('This is a test')\n#2 /tmp/tmpyrdtxt5q.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyrdtxt5q.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n\t\
    $result = '';\n\t$sentence = explode(' ', $sentence);\n\tforeach ($sentence as\
    \ $word) {\n\t\tif (is_prime(strlen($word))) {\n\t\t\t$result .= $word . ' ';\n\
    \t\t}\n\t}\n\treturn trim($result);\n}\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprfifriy5.php:20\nStack trace:\n#0 /tmp/tmprfifriy5.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmprfifriy5.php(31): candidate('This is a test')\n#2 /tmp/tmprfifriy5.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprfifriy5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5b8hlesg.php:20\nStack trace:\n#0 /tmp/tmp5b8hlesg.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp5b8hlesg.php(31): candidate('This is a test')\n#2 /tmp/tmp5b8hlesg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5b8hlesg.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output .= ' '\
    \ . $word;\n        }\n    }\n    return trim($output);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpd6_1p6ed.php:20\nStack trace:\n#0 /tmp/tmpd6_1p6ed.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpd6_1p6ed.php(32): candidate('This is a test')\n#2 /tmp/tmpd6_1p6ed.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd6_1p6ed.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n\
    \    $result = array();\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence_array = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence_array as $word) {\n        if (is_prime(strlen($word))) {\n     \
    \       $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppn5aj2ks.php:20\nStack trace:\n#0 /tmp/tmppn5aj2ks.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmppn5aj2ks.php(31): candidate('This is a test')\n#2 /tmp/tmppn5aj2ks.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppn5aj2ks.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmposjwh0mo.php:20\nStack trace:\n#0 /tmp/tmposjwh0mo.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmposjwh0mo.php(32): candidate('This is a test')\n#2 /tmp/tmposjwh0mo.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmposjwh0mo.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
