name: HumanEval_59_largest_prime_factor
language: php
prompt: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a\
  \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
  // 2\nfunction largest_prime_factor($n) {\n"
tests: "function candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n\
    \            $i += 1;\n        } else {\n            $n = $n / $i;\n        }\n\
    \    }\n    return $n;\n}\n", "    // TODO\n}\n", "  $largest_factor = 1;\n  for\
    \ ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $largest_factor =\
    \ $i;\n      $n /= $i;\n      $i--;\n    }\n  }\n  return $largest_factor;\n}\n\
    \necho largest_prime_factor(600851475143);", "  $prime_factors = [];\n  $i = 2;\n\
    \  while ($n > 1) {\n    if ($n % $i == 0) {\n      $prime_factors[] = $i;\n \
    \     $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return max($prime_factors);\n\
    }\necho 'largest_prime_factor(13195) = ' . largest_prime_factor(13195) . PHP_EOL;\n\
    echo 'largest_prime_factor(2048) = ' . largest_prime_factor(2048) . PHP_EOL;\n\
    echo 'largest_prime_factor(600851475143) = ' . largest_prime_factor(600851475143)\
    \ . PHP_EOL;", "    for ($i = $n - 1; $i > 1; $i--) {\n        if ($n % $i ==\
    \ 0) {\n            if (is_prime($i)) {\n                return $i;\n        \
    \    }\n        }\n    }\n}\n", "  $p = 2;\n  while (true) {\n    if ($n % $p\
    \ == 0) {\n      $n /= $p;\n    } else {\n      $p += 1;\n    }\n    if ($n ==\
    \ 1) {\n      return $p;\n    }\n  }\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));", "    $p = 2;\n    while ($n > 1) {\n \
    \       while ($n % $p == 0) {\n            $n /= $p;\n        }\n        $p++;\n\
    \    }\n    return $p - 1;\n}\n", "    $factor = 1;\n    for ($i = 2; $i <= $n;\
    \ $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n            $factor\
    \ = $i;\n        }\n    }\n    return $factor;\n}\necho largest_prime_factor(13195).\"\
    \\n\";\necho largest_prime_factor(2048).\"\\n\";", "    $largest_prime_factor\
    \ = 1;\n    // Find all primes <= sqrt(n)\n    $primes = array(2);\n    for ($p\
    \ = 3; $p <= floor(sqrt($n)); $p += 2) {\n        $is_prime = true;\n        for\
    \ ($i = 0; $primes[$i] <= floor(sqrt($p)); $i++) {\n            if ($p % $primes[$i]\
    \ == 0) {\n                $is_prime = false;\n                break;\n      \
    \      }\n        }\n        if ($is_prime) {\n            $primes[] = $p;\n \
    \       }\n    }\n    // Divide n by primes until no primes remain\n    foreach\
    \ ($primes as $p) {\n        while ($n % $p == 0) {\n            $n /= $p;\n \
    \           $largest_prime_factor = $p;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(600851475143) . \"\\n\";", "    $prime_factors =\
    \ array();\n    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n \
    \           array_push($prime_factors, $i);\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return max($prime_factors);\n\
    }", "  $n = abs($n);\n  $new_number = $n;\n  $i = 2;\n  while ($i <= $new_number)\
    \ {\n    if ($new_number % $i == 0) {\n      $new_number = $new_number / $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $i;\n}\n", "    $lpf = 1;\n \
    \   $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $lpf = $divisor;\n            $n /= $divisor;\n        }\n      \
    \  $divisor++;\n    }\n    return $lpf;\n}\necho largest_prime_factor(600851475143);",
  "  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n\
    \ / $i);\n    }\n  }\n  return $n;\n}\n", "    $f = 2;\n    while($n > 1) {\n\
    \        if ($n % $f == 0) {\n            $n /= $f;\n        } else {\n      \
    \      $f++;\n        }\n    }\n    return $f;\n}\n\nlargest_prime_factor(600851475143);",
  "    for ($i = floor(sqrt($n)); $i > 1; $i--) {\n        if ($n % $i == 0) {\n \
    \           // Check if i is prime.\n            $j = 2;\n            while ($j\
    \ <= sqrt($i)) {\n                if ($i % $j == 0) {\n                    break;\n\
    \                }\n                $j++;\n            }\n            if ($j ==\
    \ floor(sqrt($i)) + 1) {\n                return $i;\n            }\n        }\n\
    \    }\n}\n\necho largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\
    \\n\";", "    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n  \
    \          $n /= $i;\n            $i--;\n        }\n    }\n    return $i;\n}\n\
    echo largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\\\
    n\";", "    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i) && $n % $i\
    \ == 0) {\n            return $i;\n        }\n    }\n}\n", "  // The smallest\
    \ prime number is 2, so we can start from there.\n  $i = 2;\n  while ($i < $n)\
    \ {\n    // If $n is divisible by $i, we have found a factor of $n.\n    if ($n\
    \ % $i == 0) {\n      // Divide $n by $i to remove it as a factor.\n      $n /=\
    \ $i;\n      // Reset $i to 2 so that it can check the new number.\n      $i =\
    \ 2;\n    } else {\n      // Otherwise, just increase $i by 1.\n      $i++;\n\
    \    }\n  }\n  // $i is now the largest prime factor of $n.\n  return $i;\n}\n",
  "    if ($n == 1) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ 2;\n    }\n    $largest = 0;\n    for ($i = 2; $i < $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $factor = true;\n            for ($j = 2; $j <\
    \ $i; $j++) {\n                if ($i % $j == 0) {\n                    $factor\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($factor) {\n                $largest = $i;\n            }\n    \
    \    }\n    }\n    return $largest;\n}\n\n$largest_prime_factor = largest_prime_factor(600851475143);\n\
    echo $largest_prime_factor . \"\\n\";\n", "    $prime = 2;\n    while ($n > $prime)\
    \ {\n        if ($n % $prime == 0) {\n            $n /= $prime;\n        } else\
    \ {\n            $prime++;\n        }\n    }\n    return $prime;\n}\n\nif ($argc\
    \ > 1) {\n    $n = $argv[1];\n    echo largest_prime_factor($n);\n}", "    $i\
    \ = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n\
    \        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n\
    \necho largest_prime_factor(13195) . PHP_EOL;\necho largest_prime_factor(2048)\
    \ . PHP_EOL;", "  if ($n % 2 == 0) {\n    return largest_prime_factor($n / 2);\n\
    \  }\n  $factors = array_filter(range(1, $n), function($i) use ($n) {\n    return\
    \ $n % $i == 0;\n  });\n  $primes = array_filter($factors, function($i) {\n  \
    \  return is_prime($i);\n  });\n  return max($primes);\n}\n", "  $counter = 2;\n\
    \  while ($counter * $counter <= $n) {\n    if ($n % $counter == 0) {\n      $n\
    \ /= $counter;\n    } else {\n      $counter++;\n    }\n  }\n  return $n;\n}\n\
    \necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $n;\n}", "    $m = 1;\n    while ($n % 2 == 0) {\n   \
    \     $m = 2;\n        $n = $n / 2;\n    }\n    for ($i = 3; $i < $n; $i += 2)\
    \ {\n        while ($n % $i == 0) {\n            $m = $i;\n            $n = $n\
    \ / $i;\n        }\n    }\n    if ($n > 2) {\n        $m = $n;\n    }\n    return\
    \ $m;\n}", "    $max = 0;\n    $p = 2;\n    while($n >= $p) {\n        if($n %\
    \ $p == 0) {\n            $max = $p;\n            $n /= $p;\n        } else {\n\
    \            $p++;\n        }\n    }\n    return $max;\n}\n", "  // Initialization\n\
    \  $factor = 2;\n  $largest_factor = 1;\n\n  // Loop over all factors between\
    \ 2 and n\n  while ($factor <= $n) {\n    if ($n % $factor == 0) {\n      $largest_factor\
    \ = $factor;\n      $n /= $factor;\n    } else {\n      $factor++;\n    }\n  }\n\
    \n  return $largest_factor;\n}", "    $largestPrimeFactor = 0;\n    $i = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $largestPrimeFactor = $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $largestPrimeFactor;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  // TODO: Fill this in!\n  return $n;\n}\n", "  $divisor = 2;\n\
    \  while ($n > 1) {\n    if ($n % $divisor == 0) {\n      $n /= $divisor;\n  \
    \  } else {\n      $divisor++;\n    }\n  }\n  return $divisor;\n}", "    $i =\
    \ 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }\n", "    $largest = 1;\n    for ($i = 2; $i < $n; $i++) {\n        if ($n %\
    \ $i == 0) {\n            if (is_prime($i)) {\n                $largest = $i;\n\
    \            }\n        }\n    }\n    return $largest;\n}\n", "    for ($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $i--;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  $factors = array();\n  for ($i = 2; $i < $n / 2; $i++) {\n \
    \   if ($n % $i == 0) {\n      $factors[] = $i;\n    }\n  }\n  $prime_factors\
    \ = array();\n  foreach ($factors as $f) {\n    $is_prime = true;\n    for ($i\
    \ = 2; $i < $f / 2; $i++) {\n      if ($f % $i == 0) {\n        $is_prime = false;\n\
    \        break;\n      }\n    }\n    if ($is_prime) {\n      $prime_factors[]\
    \ = $f;\n    }\n  }\n  return max($prime_factors);\n}\n\n$result = largest_prime_factor(600851475143);\n\
    var_dump($result);", "    $largest_factor = 1;\n    for ($factor = 2; $factor\
    \ < sqrt($n); $factor++) {\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n            // Reset n in case the prime factor is not prime.\n\
    \            $n = $n / $factor;\n        }\n    }\n    return $largest_factor;\n\
    }\n\necho largest_prime_factor(600851475143);", "    $divisor = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $divisor == 0) {\n            $n /= $divisor;\n\
    \        }\n        $divisor++;\n    }\n    return $divisor - 1;\n}\n", "  $prime_factors\
    \ = [];\n  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $prime_factors[]\
    \ = $i;\n    }\n  }\n  return end($prime_factors);\n}\n", "    $i = 2;\n    while\
    \ ($i < $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n      \
    \  } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);",
  "  $i = 2;\n  while($i * $i <= $n) {\n    if ($n % $i == 0) {\n      while ($n %\
    \ $i == 0) {\n        $n /= $i;\n      }\n    }\n    $i++;\n  }\n  if ($n > 1)\
    \ {\n    return $n;\n  }\n  return --$i;\n}\n\necho largest_prime_factor(2048)\
    \ . \"\\n\";\necho largest_prime_factor(13195) . \"\\n\";", "  // Write your code\
    \ here.\n}\n\n$__fp = fopen(\"php://stdin\", \"r\");\nfscanf($__fp, \"%d\", $_t_cases);\n\
    \nfor ($_t_i = 0; $_t_i < $_t_cases; $_t_i++) {\n  fscanf($__fp, \"%d\", $_n);\n\
    \  $_result = largest_prime_factor($_n);\n  echo $_result . \"\\n\";\n}", "  \
    \  $p = 2;\n    while ($n != 1) {\n        while ($n % $p == 0) {\n          \
    \  $n /= $p;\n        }\n        $p += 1;\n    }\n    return $p - 1;\n}\n\necho\
    \ largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\necho largest_prime_factor(600851475143);\necho \"\\n\";", "  $prime_factors\
    \ = array();\n  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n     \
    \ $prime_factors[] = $i;\n    }\n  }\n  return max($prime_factors);\n}\n\n$problems\
    \ = array(\n  array(\n    'largest_prime_factor',\n    array(13195),\n    29\n\
    \  ),\n  array(\n    'largest_prime_factor',\n    array(2048),\n    2\n  ),\n\
    );\n\ninclude 'solve.php';", "    $factors = [];\n    $prime_factors = [];\n \
    \   // find factors\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i ==\
    \ 0) {\n            $factors[] = $i;\n        }\n    }\n    // find primes\n \
    \   foreach ($factors as $factor) {\n        $prime = true;\n        for ($i =\
    \ 2; $i < $factor; $i++) {\n            if ($factor % $i == 0) {\n           \
    \     $prime = false;\n                break;\n            }\n        }\n    \
    \    if ($prime) {\n            $prime_factors[] = $factor;\n        }\n    }\n\
    \    return max($prime_factors);\n}\necho largest_prime_factor(600851475143);",
  "    $factors = array();\n    while ($n % 2 == 0) {\n        $factors[] = 2;\n \
    \       $n /= 2;\n    }\n    for ($p = 3; $p <= $n; $p += 2) {\n        while\
    \ ($n % $p == 0) {\n            $factors[] = $p;\n            $n /= $p;\n    \
    \    }\n    }\n    return max($factors);\n}\n", "    $i = 2;\n    while ($i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $lastFactor = $i;\n        \
    \    $n /= $i;\n            while ($n % $i == 0) {\n                $n /= $i;\n\
    \            }\n        }\n        $i += 1;\n    }\n    return $lastFactor;\n\
    }\n\necho largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\
    \\n\";\necho largest_prime_factor(600851475143).\"\\n\";", "    $i = 2;\n    $limit\
    \ = sqrt($n);\n    while ($i <= $limit) {\n        if ($n % $i == 0) {\n     \
    \       $n /= $i;\n            $limit = sqrt($n);\n        } else {\n        \
    \    $i++;\n        }\n    }\n    return $n;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";\n", "  for ($i = 2; $i <= $n / 2; $i++) {\n    if ($n % $i == 0)\
    \ {\n      return largest_prime_factor($n / $i);\n    }\n  }\n  return $n;\n}\n\
    echo(largest_prime_factor(13195).\"\\n\");\necho(largest_prime_factor(2048).\"\
    \\n\");", "  if ($n < 2) {\n    return $n;\n  }\n\n  for ($i = 2; $i <= $n; $i++)\
    \ {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n / $i);\n  \
    \  }\n  }\n}\n", "    $primes = array(2);\n    $m = $n;\n    while (1) {\n   \
    \     $isPrime = true;\n        for ($i = 0; $i < count($primes); $i++) {\n  \
    \          if ($m % $primes[$i] == 0) {\n                $isPrime = false;\n \
    \               break;\n            }\n        }\n        if ($isPrime) {\n  \
    \          if ($m == $n) {\n                return $m;\n            } else {\n\
    \                array_push($primes, $m);\n                $m = $n;\n        \
    \    }\n        } else {\n            $m = $m / $primes[$i];\n        }\n    }\n\
    }\necho \"print the largest prime factor of 600851475143\" . PHP_EOL;\necho largest_prime_factor(600851475143)\
    \ . PHP_EOL;", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $n;\n}\n\n$max = 600851475143;\n\n$t = microtime(true);\n\
    $n = largest_prime_factor($max);\n$t = microtime(true) - $t;\n\necho \"$n\\n\"\
    ;\necho \"$t sec\\n\";", "    // TODO\n}\n", "    $answer = 1;\n    $prime_factor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $prime_factor == 0) {\n       \
    \     $answer = $prime_factor;\n            $n /= $prime_factor;\n        } else\
    \ {\n            $prime_factor++;\n        }\n    }\n    return $answer;\n}\n\
    echo largest_prime_factor(13195);", "    $cur = 2;\n    while ($n > 1) {\n   \
    \     if ($n % $cur == 0) {\n            $n /= $cur;\n        } else {\n     \
    \       $cur++;\n        }\n    }\n    return $cur;\n}\n", "    $lastFactor =\
    \ 1;\n    if ($n % 2 == 0) {\n        $lastFactor = 2;\n        while ($n % 2\
    \ == 0) {\n            $n = $n / 2;\n        }\n    }\n    for ($factor = 3; $factor\
    \ * $factor <= $n; $factor += 2) {\n        if ($n % $factor == 0) {\n       \
    \     $lastFactor = $factor;\n            while ($n % $factor == 0) {\n      \
    \          $n = $n / $factor;\n            }\n        }\n    }\n    if ($n ==\
    \ 1) {\n        return $lastFactor;\n    } else {\n        return $n;\n    }\n\
    }\n\nprint largest_prime_factor(13195) . \"\\n\";\nprint largest_prime_factor(2048)\
    \ . \"\\n\";\nprint largest_prime_factor(600851475143) . \"\\n\";", "    if ($n\
    \ === 2) {\n        return 2;\n    }\n\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i === 0) {\n            $n /= $i;\n        } else {\n     \
    \       $i++;\n        }\n    }\n\n    return $i;\n}\n", "  $factor = 1;\n  while\
    \ ($n % 2 == 0) {\n    $factor = 2;\n    $n /= 2;\n  }\n  for ($x = 3; $x < sqrt($n);\
    \ $x += 2) {\n    while ($n % $x == 0) {\n      $factor = $x;\n      $n /= $x;\n\
    \    }\n  }\n  if ($n > 2) {\n    $factor = $n;\n  }\n  return $factor;\n}\n\n\
    echo largest_prime_factor(600851475143) . \"\\n\";", "    if (is_prime($n)) return\
    \ $n;\n    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n     \
    \       return largest_prime_factor($n / $i);\n        }\n        $i++;\n    }\n\
    }\n", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i += 1;\n        }\n  \
    \  }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);", "    $p\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $p == 0) {\n            $n /=\
    \ $p;\n        }\n        $p++;\n    }\n    return $p - 1;\n}", "    for ($i =\
    \ $n; $i > 1; $i--) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                return $i;\n            }\n        }\n    }\n}\n", "  $r\
    \ = 2;\n  while ($n > 1) {\n    if ($n % $r == 0) {\n      $n /= $r;\n    } else\
    \ {\n      $r++;\n    }\n  }\n  return $r;\n}\n", "  $factors = [];\n  // Find\
    \ factors of $n and save them in $factors.\n  // We only need to search up to\
    \ sqrt($n) because every factor\n  // of $n will have a partner that we can find\
    \ below sqrt($n).\n  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $factors[] = $i;\n    }\n  }\n  // Now $factors has all the factors of\
    \ $n, which are all the primes\n  // from 2 up to sqrt($n).\n  // Now search $factors\
    \ to find the largest prime factor.\n  $largest_prime_factor = 0;\n  foreach ($factors\
    \ as $factor) {\n    if (is_prime($factor)) {\n      $largest_prime_factor = $factor;\n\
    \    }\n  }\n  return $largest_prime_factor;\n}\n", "    // Brute force solution.\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $n\
    \ /= $i;\n            $i = 1;\n        }\n    }\n    return $n;\n}\necho \"The\
    \ largest prime factor of 13195 is \" . largest_prime_factor(13195) . \"\\n\"\
    ;\necho \"The largest prime factor of 2048 is \" . largest_prime_factor(2048)\
    \ . \"\\n\";\necho \"The largest prime factor of 600851475143 is \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  $i = 2;\n  while ($i < $n) {\n    if (is_prime($i) && $n % $i\
    \ == 0) {\n      return $i;\n    }\n    $i += 1;\n  }\n}\n", "  for ($i = 2; $i\
    \ < $n; $i++) {\n    if ($n % $i == 0) {\n      $isPrime = true;\n      for ($j\
    \ = 2; $j < $i; $j++) {\n        if ($i % $j == 0) {\n          $isPrime = false;\n\
    \          break;\n        }\n      }\n      if ($isPrime) {\n        return $i;\n\
    \      }\n    }\n  }\n}\necho largest_prime_factor(13195);\necho \"\\n\";\necho\
    \ largest_prime_factor(2048);\necho \"\\n\";", "    $prime_factors = [];\n   \
    \ for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $prime_factors[]\
    \ = $i;\n        }\n    }\n    return $prime_factors[count($prime_factors) - 1];\n\
    }\n", "    $largest_prime_factor = 1;\n    $factor = 2;\n    while ($n > 1) {\n\
    \        if ($n % $factor == 0) {\n            $largest_prime_factor = $factor;\n\
    \            $n /= $factor;\n        } else {\n            $factor++;\n      \
    \  }\n    }\n    return $largest_prime_factor;\n}\n\n$n = 13195;\n$start_time\
    \ = microtime(true);\n$ret = largest_prime_factor($n);\n$end_time = microtime(true);\n\
    $time_elapsed = $end_time - $start_time;\necho \"n = $n, largest prime factor\
    \ = $ret\\n\";\necho \"Time Elapsed: \" . $time_elapsed . \" seconds\\n\";\n\n\
    $n = 2048;\n$start_time = microtime(true);\n$ret = largest_prime_factor($n);\n\
    $end_time = microtime(true);\n$time_elapsed = $end_time - $start_time;\necho \"\
    n = $n, largest prime factor = $ret\\n\";\necho \"Time Elapsed: \" . $time_elapsed\
    \ . \" seconds\\n\";\n\n$n = 600851475143;\n$start_time = microtime(true);\n$ret\
    \ = largest_prime_factor($n);\n$end_time = microtime(true);\n$time_elapsed = $end_time\
    \ - $start_time;\necho \"n = $n, largest prime factor = $ret\\n\";\necho \"Time\
    \ Elapsed: \" . $time_elapsed . \" seconds\\n\";", "  $i = 2;\n  while ($i <=\
    \ $n) {\n    if (is_prime($i) && ($n % $i == 0)) {\n      $n = $n / $i;\n    }\
    \ else {\n      $i++;\n    }\n  }\n  return $i;\n}", "  for ($p = 2; $p <= sqrt($n);\
    \ $p++) {\n    while (bcmod($n, $p) == 0) $n = bcdiv($n, $p);\n  }\n  return $n;\n\
    }\n\n$n = isset($argv[1]) ? $argv[1] : \"13195\";\n$result = largest_prime_factor($n);\n\
    echo \"$result\\n\";", "    // fill here\n}", "  $r = $n;\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if (fmod($r, $i) == 0) {\n      $r = $r / $i;\n    \
    \  $p = $i;\n    }\n    $i++;\n  }\n  return max($p, $r);\n}\necho largest_prime_factor(13195)\
    \ . PHP_EOL;\necho largest_prime_factor(2048) . PHP_EOL;\necho largest_prime_factor(600851475143)\
    \ . PHP_EOL;", "  return -1;\n}\n", "  // factor out 2\n  $n = reduce_to_odd($n);\n\
    \  // factor out 3\n  $n = reduce_to_odd($n);\n  // factor out 5\n  $n = reduce_to_odd($n);\n\
    \  // factor out 7\n  $n = reduce_to_odd($n);\n  // factor out 11\n  $n = reduce_to_odd($n);\n\
    \  // and so on...\n  if ($n == 1) {\n    // we're done\n    return $n;\n  } else\
    \ {\n    // there's still a composite number, so try a higher prime number\n \
    \   // note: we haven't yet tried 13, so try it next\n    return largest_prime_factor($n);\n\
    \  }\n}", "    for ($i = 2; $i <= sqrt($n); $i++) {\n        while ($n % $i ==\
    \ 0) {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n", "    $i\
    \ = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n           \
    \ $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $n;\n}\n\necho largest_prime_factor(13195);\necho PHP_EOL;\necho largest_prime_factor(2048);\n\
    echo PHP_EOL;", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $n;\n}", "    $i = 2;\n    while ($i * $i <= $n) {\n \
    \       if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n       \
    \     $i += 1;\n        }\n    }\n    return $n;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\n\n$n = 600851475143;\necho\
    \ largest_prime_factor($n);\n", "    $primeFactors = [];\n    $p = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $p == 0) {\n            $primeFactors[] = $p;\n\
    \            $n /= $p;\n        }\n        $p++;\n    }\n    return max($primeFactors);\n\
    }\n\necho largest_prime_factor(600851475143);", "  $largest = 1;\n  while ($n\
    \ % 2 == 0) {\n    $largest = 2;\n    $n /= 2;\n  }\n  for ($i = 3; $i <= $n;\
    \ $i += 2) {\n    while ($n % $i == 0) {\n      $largest = $i;\n      $n /= $i;\n\
    \    }\n  }\n  return $largest;\n}\n\n$n = 13195;\necho largest_prime_factor($n)\
    \ . \"\\n\";\n$n = 2048;\necho largest_prime_factor($n) . \"\\n\";\n$n = 600851475143;\n\
    echo largest_prime_factor($n) . \"\\n\";", "  $prime_factors = array();\n  for\
    \ ($i = 2; $i <= sqrt($n); $i++) {\n    if (is_prime($i) && $n % $i == 0) {\n\
    \      $prime_factors[] = $i;\n    }\n  }\n  return max($prime_factors);\n}\n",
  "    // find the largest prime factor of $n\n    // first find all prime factors\
    \ of $n\n    // then return the max of the array\n    // if prime factor, then\
    \ it is not divisible by anything else in the array\n    // if not prime factor,\
    \ then it is divisible by something else in the array\n    // so we will filter\
    \ out the non prime factors\n    \n    // Find all factors of n\n    $factors\
    \ = find_factors($n);\n    $primes = array();\n    // filter out non prime factors\n\
    \    foreach ($factors as $factor) {\n        if (count(find_factors($factor))\
    \ == 2) {\n            $primes[] = $factor;\n        }\n    }\n    // find the\
    \ largest prime factor\n    return max($primes);\n}\n", "    $i = 2;\n    while($i\
    \ < $n) {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n\
    \ / $i);\n        }\n        $i++;\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo largest_prime_factor(2048);\n", "    $largest_factor = 0;\n    $max_factor\
    \ = sqrt($n);\n    for ($i = 2; $i <= $max_factor; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        \
    \    $max_factor = sqrt($n);\n        }\n    }\n    if ($n > 1) {\n        $largest_factor\
    \ = $n;\n    }\n    return $largest_factor;\n}\necho(largest_prime_factor(13195)\
    \ . PHP_EOL);\necho(largest_prime_factor(2048) . PHP_EOL);", "    // To start,\
    \ we will check if the number is a prime itself. If it is, we can return it.\n\
    \    if(is_prime($n)) {\n        return $n;\n    }\n    // Next, we start looping\
    \ from 2 to half the size of the number. We do not need to iterate\n    // through\
    \ all numbers up to n, as we are looking for factors. We only need to iterate\
    \ through\n    // the numbers below half of n.\n    for($i = 2; $i <= $n / 2;\
    \ $i++) {\n        // If $i is a factor of n and is prime, we can return it.\n\
    \        if($n % $i == 0 && is_prime($i)) {\n            return $i;\n        }\n\
    \    }\n}\n", "    // Your code here\n}\n", "  $p = 2;\n  while ($n > 1) {\n \
    \   while ($n % $p == 0) {\n      $n /= $p;\n    }\n    $p++;\n  }\n  return $p-1;\n\
    }", "    $divisor = 2;\n    $last_divisor = 1;\n    while ($n > 1) {\n       \
    \ while ($n % $divisor == 0) {\n            $last_divisor = $divisor;\n      \
    \      $n /= $divisor;\n        }\n        $divisor += 1;\n    }\n    return $last_divisor;\n\
    }\n", "    $prime_factors = array();\n    $primes = array();\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($prime_factors,\
    \ $i);\n            $n = $n / $i;\n            $i = 1;\n        }\n    }\n   \
    \ return max($prime_factors);\n}\n\nprint_r(largest_prime_factor(13195));\nprint_r(largest_prime_factor(2048));\n",
  "    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $n;\n}\n", "  $largest = 1;\n  // factor out 2s\n  while ($n % 2 == 0) {\n \
    \   $largest = 2;\n    $n /= 2;\n  }\n  // factor out primes\n  for ($i = 3; $i\
    \ <= sqrt($n); $i += 2) {\n    while ($n % $i == 0) {\n      $largest = $i;\n\
    \      $n /= $i;\n    }\n  }\n  // if n is a prime > 2, it's its own largest prime\
    \ factor\n  if ($n > 2) {\n    $largest = $n;\n  }\n  return $largest;\n}\necho\
    \ largest_prime_factor(600851475143);", "    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i) {\n            $i++;\n        } else {\n           \
    \ $n /= $i;\n        }\n    }\n    return $n;\n}\n\necho \"The answer is \" .\
    \ largest_prime_factor(600851475143) . \"\\n\";", "  $max_prime = 2;\n  $max_factor\
    \ = sqrt($n);\n  while ($max_prime <= $max_factor) {\n    if ($n % $max_prime\
    \ == 0) {\n      $n /= $max_prime;\n      $max_factor = sqrt($n);\n    } else\
    \ {\n      $max_prime++;\n    }\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    if (is_prime($n)) return $n;\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) return largest_prime_factor($n / $i);\n    }\n\
    }\n", "    $i = 2;\n    while($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}\n\n$n = 13195;\nprint_r(largest_prime_factor($n));", "    $largest_prime_factor\
    \ = 1;\n    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n   \
    \         $largest_prime_factor = $i;\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $largest_prime_factor;\n}", " \
    \   $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n   \
    \         $n /= $factor;\n        } else {\n            $factor++;\n        }\n\
    \    }\n    return $factor;\n}\n", "    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $divisor-1;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\nprint_r(largest_prime_factor(600851475143));",
  "  $factor = 2;\n  while ($n > 1) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n\
    \    } else {\n      $factor += 1;\n    }\n  }\n  return $factor;\n}\n\n$expected\
    \ = 29;\n$n = 13195;\n$output = largest_prime_factor($n);\nfwrite(STDOUT, 'Output:\
    \ ' . $output . PHP_EOL);\nfwrite(STDOUT, 'Expected: ' . $expected . PHP_EOL);\n\
    \n$expected = 2;\n$n = 2048;\n$output = largest_prime_factor($n);\nfwrite(STDOUT,\
    \ 'Output: ' . $output . PHP_EOL);\nfwrite(STDOUT, 'Expected: ' . $expected .\
    \ PHP_EOL);", "    $count = $n/2;\n    while ($count >= 2) {\n        if (is_prime($count)\
    \ && $n % $count == 0) {\n            return $count;\n        }\n        $count\
    \ -= 1;\n    }\n}\n", "    $factor = 2;\n    $lastFactor = 1;\n    while ($n >\
    \ 1) {\n        if ($n % $factor == 0) {\n            $lastFactor = $factor;\n\
    \            $n = $n / $factor;\n            while ($n % $factor == 0) {\n   \
    \             $n = $n / $factor;\n            }\n        }\n        $factor++;\n\
    \    }\n    return $lastFactor;\n}\n\nprint largest_prime_factor(13195);", " \
    \   $factor = 1;\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $factor = $i;\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return max($factor, $n);\n}", "    $current_largest_prime_factor\
    \ = 1;\n    for ($i = 2; $i <= $n / 2; $i++) {\n        if ($n % $i == 0) {\n\
    \            $current_largest_prime_factor = $i;\n            $n /= $i;\n    \
    \        $i--;\n        }\n    }\n    return $current_largest_prime_factor;\n\
    }\n\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho largest_prime_factor(600851475143);", "    $last_factor = 0;\n\
    \    $factor = 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n\
    \            $last_factor = $factor;\n            $n /= $factor;\n        }\n\
    \        $factor++;\n    }\n    return $last_factor;\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));", "    // find the largest divisor of $n\
    \ that is prime.\n    $d = 2;\n    while ($n % $d) {\n        $d += 1;\n    }\n\
    \    // if $d is $n, then $n is a prime, so the largest prime factor is $n itself.\n\
    \    // Otherwise, the largest prime factor of $n is the largest prime factor\
    \ of\n    // $n / $d.\n    return $d == $n ? $n : largest_prime_factor($n / $d);\n\
    }\n", "    $largest = 1;\n    // Go through all the factors from 2 to sqrt(n)\n\
    \    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n     \
    \       // If $i is a factor, see if it is prime.\n            $prime = true;\n\
    \            for ($j = 2; $j <= sqrt($i); $j++) {\n                if ($i % $j\
    \ == 0) {\n                    $prime = false;\n                    break;\n \
    \               }\n            }\n            if ($prime) {\n                //\
    \ A prime factor was found.\n                $largest = $i;\n            }\n \
    \       }\n    }\n    return $largest;\n}", "    // Your code here.\n}", "  $max_factor\
    \ = 0;\n  for ($factor = 2; $factor <= $n; $factor++) {\n    if ($n % $factor\
    \ == 0) {\n      // We found a factor of n. Since we are looking for the largest\
    \ factor,\n      // we should recursively check the largest factor of the quotient.\n\
    \      $max_factor = max($max_factor, largest_prime_factor($n / $factor));\n \
    \   }\n  }\n  return $max_factor;\n}\n\necho largest_prime_factor(600851475143);",
  "    // All primes are of the form 6k \xB1 1, with the exception of 2 and 3.\n \
    \   // Find a number of this form which is a factor of n.\n    for ($x = 6; $x\
    \ <= sqrt($n); $x += 6) {\n        if ($n % ($x - 1) == 0) {\n            // If\
    \ a factor is found, factor it out from n to see if it is prime.\n           \
    \ return largest_prime_factor($n / ($x - 1));\n        }\n        if ($n % ($x\
    \ + 1) == 0) {\n            return largest_prime_factor($n / ($x + 1));\n    \
    \    }\n    }\n    // If no factor of the form 6k \xB1 1 is found, n must be prime.\n\
    \    return $n;\n}\nprint_r(largest_prime_factor(600851475143));", "  $factor\
    \ = 2;\n  while ($n > 1) {\n    while ($n % $factor == 0) {\n      $n /= $factor;\n\
    \    }\n    $factor++;\n  }\n  return $factor - 1;\n}\nvar_dump(largest_prime_factor(2048));",
  "  $next = $n;\n  for ($i = 2; $i <= $n; $i++) {\n    while ($next % $i == 0) {\n\
    \      $next = $next / $i;\n    }\n  }\n  return $next;\n}\n\n$inputs = array(13195,\
    \ 2048);\nforeach ($inputs as $input) {\n  echo \"largest_prime_factor($input)\
    \ = \" . largest_prime_factor($input) . \"\\n\";\n}", "  $nextPrime = 2;\n  while\
    \ ($n != 1) {\n    if ($n % $nextPrime == 0) {\n      $n /= $nextPrime;\n    }\
    \ else {\n      $nextPrime++;\n    }\n  }\n  return $nextPrime;\n}\n", "  // write\
    \ your solution here...\n  $prime_factors = array();\n  for ($i = 2; $i <= $n;\
    \ $i++) {\n    if ($n % $i == 0) {\n      array_push($prime_factors, $i);\n  \
    \    $n = $n / $i;\n      // echo $n . \"\\n\";\n    }\n  }\n  return end($prime_factors);\n\
    }", "    $max = floor(sqrt($n));\n    $factors = [];\n    for ($i = 2; $i <= $max;\
    \ $i++) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n       \
    \ }\n    }\n    $max_factor = max($factors);\n    if ($max_factor == $n) {\n \
    \       return $n;\n    }\n    return largest_prime_factor($max_factor);\n}\n\n\
    echo largest_prime_factor(600851475143);", "    $found = false;\n    $primes =\
    \ get_primes(round(sqrt($n)));\n    while (!$found) {\n        $prime = array_pop($primes);\n\
    \        if ($n % $prime == 0) {\n            $found = true;\n        }\n    }\n\
    \    return $prime;\n}\n", "    $p = 2;\n    while ($n % $p != 0) {\n        $p++;\n\
    \    }\n    $q = $n / $p;\n    if ($q > $p) {\n        return largest_prime_factor($q);\n\
    \    } else {\n        return $p;\n    }\n}\n\necho \"largest_prime_factor(13195):\
    \ \" . largest_prime_factor(13195) . \"\\n\";\necho \"largest_prime_factor(2048):\
    \ \" . largest_prime_factor(2048) . \"\\n\";\necho \"largest_prime_factor(600851475143):\
    \ \" . largest_prime_factor(600851475143) . \"\\n\";\n", "    // fill in the function\n\
    }\n", "    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n      \
    \      $n /= $i;\n            $i--;\n        }\n    }\n    return $n;\n}\n", " \
    \   $i = 1;\n    $prime_factors = array();\n    while ($i <= sqrt($n)) {\n   \
    \     if ($n % $i == 0) {\n            $prime_factors[] = $i;\n            $prime_factors[]\
    \ = $n / $i;\n        }\n        $i++;\n    }\n    $max = 0;\n    foreach ($prime_factors\
    \ as $prime_factor) {\n        if (is_prime($prime_factor) && $prime_factor >\
    \ $max) {\n            $max = $prime_factor;\n        }\n    }\n    return $max;\n\
    }\n", "  // TODO\n}\n", "    $factor = 1;\n    $index = 2;\n    while ($index\
    \ * $index <= $n) {\n        if ($n % $index == 0) {\n            $factor = $index;\n\
    \            $n /= $index;\n        } else {\n            $index += 1;\n     \
    \   }\n    }\n    return $factor > $n ? $factor : $n;\n}", "  for ($f = 2; $f\
    \ <= $n; $f++) {\n    if (is_prime($f) && $n % $f == 0)\n      $prime = $f;\n\
    \  }\n  return $prime;\n}\n", "    $prime_factors = prime_factors($n);\n    return\
    \ max($prime_factors);\n}\n", "    $factor = 1;\n    $candidate = 2;\n    while\
    \ ($candidate <= $n / $factor) {\n        if ($n % $candidate == 0) {\n      \
    \      $factor = $candidate;\n            while ($n % $factor == 0) {\n      \
    \          $n /= $factor;\n            }\n        }\n        $candidate++;\n \
    \   }\n    return $factor;\n}\n", "    $last_factor = 1;\n    $i = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $last_factor = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $last_factor;\n}\n\n$largest_prime_factor = largest_prime_factor(600851475143);\n\
    echo \"$largest_prime_factor\\n\";\n", "    $factors = [];\n    $prime_factors\
    \ = [];\n    $largest_prime_factor = 2;\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n\
    \    foreach ($factors as $factor) {\n        $count = 0;\n        for ($i = 2;\
    \ $i <= $factor; $i++) {\n            if ($factor % $i == 0) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == 1) {\n        \
    \    $prime_factors[] = $factor;\n        }\n    }\n    if (count($prime_factors)\
    \ == 1) {\n        $largest_prime_factor = $prime_factors[0];\n    } else {\n\
    \        $largest_prime_factor = end($prime_factors);\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(2048);", "    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n$result = largest_prime_factor(600851475143);\n\
    echo \"The largest prime factor of 600851475143 is $result\";", "    $max_pf =\
    \ 1;\n    $i = 2;\n    while ($i <= $n) {\n        while ($n % $i == 0) {\n  \
    \          $max_pf = $i;\n            $n /= $i;\n        }\n        $i += 1;\n\
    \    }\n    return $max_pf;\n}\n\n$largest_prime_factor = largest_prime_factor(600851475143);\n\
    print $largest_prime_factor;\n", "    $cur = 2;\n    while ($n > 1) {\n      \
    \  if ($n % $cur == 0) {\n            $n /= $cur;\n        } else {\n        \
    \    $cur += 1;\n        }\n    }\n    return $cur;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    if ($n <= 1) {\n        throw new Exception(\"n must be greater\
    \ than 1\");\n    }\n    $factors = [];\n    $counter = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $counter == 0) {\n            $factors[] = $counter;\n \
    \           $n /= $counter;\n        } else {\n            $counter++;\n     \
    \   }\n    }\n    return end($factors);\n}\necho largest_prime_factor(13195) .\
    \ \"\\n\";", "    $prime_factors = array();\n    $factors = array();\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n        }\n    }\n    $factors = array_reverse($factors);\n    $prime_factors\
    \ = array_intersect($factors, get_prime_numbers($n));\n    return $prime_factors[0];\n\
    }\n", "    $result = null;\n    $factor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $factor == 0) {\n            $result = $factor;\n            $n /= $factor;\n\
    \        }\n        $factor++;\n    }\n    return $result;\n}\n", "    $factor\
    \ = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n    \
    \        $factor = $i;\n            $n /= $i;\n            $i = 1;\n        }\n\
    \    }\n    return $factor;\n}\n", "  $i = 2;\n  while ($i <= $n) {\n    if ($n\
    \ % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return\
    \ $i;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));",
  "  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  foreach ($factors as $factor) {\n    for ($i = 2; $i < $factor;\
    \ $i++) {\n      if ($factor % $i == 0) {\n        continue 2;\n      }\n    }\n\
    \    $primes[] = $factor;\n  }\n  return end($primes);\n}\n", "  $largest_prime_factor\
    \ = 0;\n  $d = 2;\n  while ($n > 1) {\n    while ($n % $d == 0) {\n      $largest_prime_factor\
    \ = $d;\n      $n /= $d;\n    }\n    $d += 1;\n    if ($d * $d > $n) {\n     \
    \ if ($n > 1) {\n        $largest_prime_factor = $n;\n      }\n      break;\n\
    \    }\n  }\n  return $largest_prime_factor;\n}\n", "    $max_factor = 1;\n  \
    \  for ($factor = 2; $factor < $n; $factor++) {\n        if ($n % $factor == 0)\
    \ {\n            $max_factor = $factor;\n            $n /= $factor;\n        }\n\
    \    }\n    return $max_factor;\n}\n\necho largest_prime_factor(13195);\necho\
    \ \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";", "  $largest = 1;\n\
    \  $divisor = 2;\n  while ($n > 1) {\n    while ($n % $divisor == 0) {\n     \
    \ $largest = $divisor;\n      $n /= $divisor;\n    }\n    $divisor++;\n  }\n \
    \ return $largest;\n}\n\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048)\
    \ . \"\\n\";", "  // n is even.\n  if ($n % 2 == 0) {\n    return 2;\n  }\n  //\
    \ Check for other even factors\n  for ($i = 3; $i < $n; $i += 2) {\n    if ($n\
    \ % $i == 0) {\n      // $i is a factor.\n      return largest_prime_factor($n\
    \ / $i);\n    }\n  }\n  // No other even factors.\n  return $n;\n}\nprint \"The\
    \ solution is \" . largest_prime_factor(600851475143) . \"\\n\";", "    $i = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n",
  "  $factors = prime_factors($n);\n  return array_pop($factors);\n}\n", "    $i =\
    \ 2;\n    while ($i <= $n) {\n        while ($n % $i == 0) {\n            $n /=\
    \ $i;\n        }\n        $i++;\n    }\n    return $i - 1;\n}\n\nfor ($i = 2;\
    \ $i < 10000; $i++) {\n    $p = largest_prime_factor($i);\n    if ($p == $i) {\n\
    \        echo \"$i\\n\";\n    }\n}\n", "  $factors = array();\n  $i = 2;\n  while\
    \ ($n > 1) {\n    if ($n % $i === 0) {\n      array_push($factors, $i);\n    \
    \  $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return end($factors);\n\
    }\n\necho 'The largest prime factor of 13195 is ' . largest_prime_factor(13195)\
    \ . \"\\n\";\necho 'The largest prime factor of 2048 is ' . largest_prime_factor(2048)\
    \ . \"\\n\";", "    $largest_prime_factor = 1;\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n            $largest_prime_factor\
    \ = $i;\n        }\n    }\n    return $largest_prime_factor;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\n\necho(largest_prime_factor(600851475143));",
  "  $array = array();\n  while ($n % 2 == 0) {\n    $array[] = 2;\n    $n = $n /\
    \ 2;\n  }\n  for ($i = 3; $i <= sqrt($n); $i = $i + 2) {\n    while ($n % $i ==\
    \ 0) {\n      $array[] = $i;\n      $n = $n / $i;\n    }\n  }\n  if ($n > 2) {\n\
    \    $array[] = $n;\n  }\n  return max($array);\n}\n\necho \"Largest prime factor\
    \ of 13195 is: \" . largest_prime_factor(13195) . \"\\n\";\necho \"Largest prime\
    \ factor of 2048 is: \" . largest_prime_factor(2048) . \"\\n\";\necho \"Largest\
    \ prime factor of 600851475143 is: \" . largest_prime_factor(600851475143) . \"\
    \\n\";", "  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n      $n /=\
    \ $i;\n    } else {\n      $i++;\n    }\n  }\n  return $i;\n}\n", "    $prime_factors\
    \ = prime_factors($n);\n    return max($prime_factors);\n}\n", "    $primes =\
    \ array(2);\n    $largest_prime = 2;\n    $largest_prime_factor = 2;\n    $factor\
    \ = 2;\n    while ($factor <= $n) {\n        while ($n % $factor == 0) {\n   \
    \         $n /= $factor;\n            $largest_prime_factor = $factor;\n     \
    \   }\n        if (is_prime($factor)) {\n            $largest_prime = $factor;\n\
    \            $primes[] = $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $largest_prime_factor;\n}\n", "    $largest = $n;\n    for ($i = 2; $i < $n;\
    \ $i++) {\n        if ($n % $i == 0) {\n            $largest = $i;\n         \
    \   $n = $n / $i;\n            $i = 1;\n        }\n    }\n    return $largest;\n\
    }\n\necho largest_prime_factor(600851475143);", "    $result = 1;\n    for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $result = $i;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $number = 1;\n    while ($n > 1) {\n        $number++;\n\
    \        if ($n % $number == 0) {\n            $n /= $number;\n        }\n   \
    \ }\n    return $number;\n}\n\n$start = microtime(true);\n$answer = largest_prime_factor(600851475143);\n\
    $end = microtime(true);\n\necho \"The answer is $answer\\n\";\necho \"Execution\
    \ time: \" . ($end - $start) . \"\\n\";", "  $result = 0;\n  $p = 2;\n  while\
    \ ($n > 1) {\n    while ($n % $p == 0) {\n      $result = $p;\n      $n /= $p;\n\
    \    }\n    $p++;\n  }\n  return $result;\n}\n", "    $i = 2;\n    while ($i *\
    \ $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n;\n}\n", "    $largest_prime_factor\
    \ = 2;\n    while ($n % $largest_prime_factor == 0) {\n        $n /= $largest_prime_factor;\n\
    \    }\n    while ($n > 1) {\n        $largest_prime_factor += 1;\n        while\
    \ ($n % $largest_prime_factor == 0) {\n            $n /= $largest_prime_factor;\n\
    \        }\n    }\n    return $largest_prime_factor;\n}\n", "    $factors = factor($n);\n\
    \    $primeFactors = [];\n    foreach ($factors as $f) {\n        if (is_prime($f))\
    \ {\n            $primeFactors[] = $f;\n        }\n    }\n    return max($primeFactors);\n\
    }\n", "    $largest_prime_factor = 2;\n    $count = 2;\n    while ($count * $count\
    \ <= $n) {\n        if ($n % $count == 0) {\n            $n /= $count;\n     \
    \       $largest_prime_factor = $count;\n        } else {\n            $count++;\n\
    \        }\n    }\n    if ($n > $largest_prime_factor) {\n        $largest_prime_factor\
    \ = $n;\n    }\n    return $largest_prime_factor;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $n;\n}\n\necho \"largest_prime_factor(13195) = \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"largest_prime_factor(2048) = \" . largest_prime_factor(2048)\
    \ . \"\\n\";", "  $factor = 2;\n  while ($n > 1) {\n    while ($n % $factor ==\
    \ 0) {\n      $n /= $factor;\n    }\n    $factor++;\n  }\n  return $factor - 1;\n\
    }\necho 'largest_prime_factor(13195): '.largest_prime_factor(13195);\necho PHP_EOL;\n\
    echo 'largest_prime_factor(2048): '.largest_prime_factor(2048);\necho PHP_EOL;\n",
  "    $i = 2;\n    $max_factor = 1;\n    while ($i <= $n) {\n        if (fmod($n,\
    \ $i) == 0) {\n            if (is_prime($i)) {\n                $max_factor =\
    \ $i;\n            }\n            $n = $n / $i;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $max_factor;\n}", "    // make a list of\
    \ factors\n    $factors = [];\n    for ($i = 2; $i < $n; $i++) {\n        if ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n    // filter\
    \ out the non-primes\n    $primes = array_filter($factors, function($x) {\n  \
    \      for ($i = 2; $i < $x; $i++) {\n            if ($x % $i == 0) {\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ });\n    return max($primes);\n}\n\necho largest_prime_factor(13195);\necho\
    \ \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";", "  $i = 2;\n  while\
    \ ($i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n     \
    \ $i++;\n    }\n  }\n  return $i;\n}\n", "  $result = 1;\n  $i = 2;\n  while ($i\
    \ <= $n) {\n    if ($n % $i == 0) {\n      $result = $i;\n      $n /= $i;\n  \
    \  } else {\n      $i++;\n    }\n  }\n  return $result;\n}\n", "  // TODO: Your\
    \ code here.\n}\n", "  // Return the largest prime factor of n.\n  $divisor =\
    \ 2;\n  while ($n > 1) {\n    if ($n % $divisor == 0) {\n      $n /= $divisor;\n\
    \    } else {\n      $divisor++;\n    }\n  }\n  return $divisor;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    if (is_prime($n)) return $n;\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) return largest_prime_factor($n / $i);\n    }\n\
    }\n", "  $answer = 1;\n  $i = 2;\n  $divisor = 2;\n  while($i < $n) {\n    if($i\
    \ % $divisor == 0) {\n      $i = $i + 1;\n      $divisor = 2;\n    } elseif($i\
    \ == $divisor + 1) {\n      $answer = $i;\n      $divisor = 2;\n      $i = $i\
    \ + 1;\n    } else {\n      $divisor = $divisor + 1;\n    }\n  }\n  return $answer;\n\
    }\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048)\
    \ . \"\\n\";", "  $i = 2;\n  while ($i * $i <= $n) {\n    if ($n % $i == 0) {\n\
    \      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\necho\
    \ largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048) . \"\
    \\n\";", "    $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor ==\
    \ 0) {\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return $factor;\n}\necho \"largest_prime_factor(13195)\
    \ == 29 ? \" .\n(largest_prime_factor(13195) == 29 ? \"true\" : \"false\") . \"\
    \\n\";\necho \"largest_prime_factor(2048) == 2 ? \" .\n(largest_prime_factor(2048)\
    \ == 2 ? \"true\" : \"false\") . \"\\n\";\n", "  $largest_prime_factor = 1;\n\
    \  $p = 2;\n  while ($n != 1) {\n    while (($n % $p) == 0) {\n      $largest_prime_factor\
    \ = $p;\n      $n /= $p;\n    }\n    $p++;\n  }\n  return $largest_prime_factor;\n\
    }\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));",
  "    if ($n == 1) {\n        return 1;\n    }\n\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n /\
    \ $i);\n        }\n    }\n\n    return $n;\n}\n", "    $divisor = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $divisor == 0) {\n            $n /= $divisor;\n\
    \        }\n        $divisor++;\n    }\n    return $divisor - 1;\n}\n", "    $result\
    \ = 2;\n    $bound = (int) sqrt($n);\n    for ($i = 2; $i <= $bound; $i++) {\n\
    \        if ($n % $i === 0) {\n            $result = $i;\n            $n /= $i;\n\
    \            $bound = (int) sqrt($n);\n            $i = 1;\n        }\n    }\n\
    \    return $result;\n}\n", "    for ($i = 2; $i < sqrt($n); $i++) {\n       \
    \ if ($n % $i == 0) {\n            return largest_prime_factor($n / $i);\n   \
    \     }\n    }\n    return $n;\n}\n", "  // TODO: Implement this.\n}\n", "   \
    \ $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n\
    }\n\necho largest_prime_factor(600851475143) . \"\\n\";", "  $factor = 1;\n  $prime\
    \ = 1;\n  $primes = array();\n  while ($factor <= $n) {\n    if ($n % $factor\
    \ == 0) {\n      $is_prime = true;\n      for ($i = 2; $i < $factor; $i++) {\n\
    \        if ($factor % $i == 0) {\n          $is_prime = false;\n          break;\n\
    \        }\n      }\n      if ($is_prime) {\n        $prime = $factor;\n     \
    \   $primes[] = $prime;\n      }\n    }\n    $factor++;\n  }\n  return $prime;\n\
    }\n", "  $largest_prime_factor = 1;\n  while($n % 2 == 0) {\n    $largest_prime_factor\
    \ = 2;\n    $n = $n / 2;\n  }\n  for($i = 3; $i <= sqrt($n); $i += 2) {\n    while($n\
    \ % $i == 0) {\n      $largest_prime_factor = $i;\n      $n = $n / $i;\n    }\n\
    \  }\n  if($n > 2) {\n    $largest_prime_factor = $n;\n  }\n  return $largest_prime_factor;\n\
    }\n\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    $primes = get_primes_to($n);\n    $n_divisors = array();\n\
    \    foreach ($primes as $prime) {\n        if ($n % $prime == 0) {\n        \
    \    $n_divisors[] = $prime;\n        }\n    }\n    return max($n_divisors);\n\
    }\n", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i += 1;\n        }\n  \
    \  }\n    return $n;\n}\n", "    for ($i = 2; $i <= $n; $i++) {\n        if ($n\
    \ % $i == 0) {\n            $n /= $i;\n            $i--;\n        }\n    }\n \
    \   return $i;\n}\n", "  $divisor = 2;\n  while ($n > 1) {\n    while ($n % $divisor\
    \ == 0) {\n      $n /= $divisor;\n    }\n    $divisor++;\n  }\n  return $divisor\
    \ - 1;\n}\n", "  for ($i = floor(sqrt($n)); $i > 1; $i--) {\n    if ($n % $i ==\
    \ 0) {\n      $factor = $n / $i;\n      if (is_prime($factor)) {\n        return\
    \ $factor;\n      }\n    }\n  }\n}\n", "    $test_num = 3;\n    while (true) {\n\
    \        if ($n % $test_num == 0) {\n            $n = $n / $test_num;\n      \
    \      if ($n == 1) {\n                return $test_num;\n            }\n    \
    \    } else {\n            $test_num += 2;\n        }\n    }\n}\n\necho largest_prime_factor(600851475143);",
  "    $n_sqrt = ceil(sqrt($n));\n    for ($i = $n_sqrt; $i > 1; $i--) {\n       \
    \ if ($n % $i == 0) {\n            if (is_prime($i)) {\n                return\
    \ $i;\n            }\n        }\n    }\n}\n", "    $max_prime = 2;\n    for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $max_prime = $i;\n            }\n        }\n    }\n    return\
    \ $max_prime;\n}\n", "    // Fill this in.\n    $lpf = 0;\n    $i = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $lpf = $i;\n        \
    \    $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $lpf;\n}\n\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048)\
    \ . \"\\n\";", "    $max = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $max = $i;\n            $n /= $i;\n          \
    \  $i = 1;\n        }\n    }\n    return $max;\n}\n\nfor ($i = 2; $i < 1000; $i++)\
    \ {\n    echo \"$i: \" . largest_prime_factor($i) . \"\\n\";\n}\n", "    // As\
    \ 2 is the smallest prime number, check if $n is divisible by 2\n    while ($n\
    \ % 2 == 0) {\n        $n /= 2;\n    }\n    // Now, $n must be odd number\n  \
    \  // So, we only need to check if $n is divisible by odd numbers less than square\
    \ root of $n\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        // Check if\
    \ $n is divisible by $i\n        while ($n % $i == 0) {\n            $n /= $i;\n\
    \        }\n    }\n    // By now, $n must be the largest prime factor\n    return\
    \ $n;\n}\necho largest_prime_factor(13195);", "    $largest_prime_factor = 1;\n\
    \    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n           \
    \ $n = $n / $i;\n            $largest_prime_factor = $i;\n        } else {\n \
    \           $i++;\n        }\n    }\n    return $largest_prime_factor;\n}\n",
  "    // Your code here.\n}\n", "  for ($i = floor(sqrt($n)); $i > 0; $i--) {\n \
    \   if ($n % $i == 0 && is_prime($i)) {\n      return $i;\n    }\n  }\n}\n", " \
    \   $factor = 1;\n    while ($n % 2 == 0) {\n        $factor = 2;\n        $n\
    \ /= 2;\n    }\n    $p = 3;\n    while ($n != 1) {\n        while ($n % $p ==\
    \ 0) {\n            $factor = $p;\n            $n /= $p;\n        }\n        $p\
    \ += 2;\n    }\n    return $factor;\n}\n", "    $prime_factors = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $divisor == 0) {\n            array_push($prime_factors,\
    \ $divisor);\n            $n /= $divisor;\n        } else {\n            $divisor++;\n\
    \        }\n    }\n    return end($prime_factors);\n}\n", "    if ($n < 2) {\n\
    \        return -1;\n    }\n    $sq = ceil(sqrt($n));\n    $divisor = 2;\n   \
    \ while ($divisor <= $sq) {\n        if ($n % $divisor == 0) {\n            return\
    \ max(largest_prime_factor($n / $divisor), largest_prime_factor($divisor));\n\
    \        }\n        $divisor++;\n    }\n    return $n;\n}\n\n$input = 600851475143;\n\
    $result = largest_prime_factor($input);\n\necho \"The largest prime factor of\
    \ $input is $result.\";", "    //https://stackoverflow.com/questions/16846871/prime-factorization-algorithm-in-php\n\
    \    $half = floor($n / 2);\n    for ($div = 2; $div <= $half; $div++) {\n   \
    \     if ($n % $div == 0) {\n            return max(largest_prime_factor($n /\
    \ $div), largest_prime_factor($div));\n        }\n    }\n    return $n;\n}\n\n\
    $n = 13195;\necho largest_prime_factor($n);", "  // TODO\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho \"All tests passed.\\n\";", "    $k = 1;\n    for ($i = 2; $i <\
    \ sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \        $k = $i;\n        }\n    }\n    return $k;\n}\n", "    // fill me in\n\
    }", "    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n        \
    \    return max(largest_prime_factor($n / $i), largest_prime_factor($i));\n  \
    \      }\n    }\n    return $n;\n}\n", "  $i = 2;\n  $larger = 0;\n  while ($i\
    \ * $i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n      $larger = $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return max($larger, $n);\n}\necho largest_prime_factor(13195);\n",
  "  $last_prime = 1;\n  $prime = 2;\n  while ($n > 1) {\n    while ($n % $prime ==\
    \ 0) {\n      $last_prime = $prime;\n      $n /= $prime;\n    }\n    $prime++;\n\
    \  }\n  return $last_prime;\n}\n\necho largest_prime_factor(13195) . PHP_EOL;\n\
    echo largest_prime_factor(2048) . PHP_EOL;"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
