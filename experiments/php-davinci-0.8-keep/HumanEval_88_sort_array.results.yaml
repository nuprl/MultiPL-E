name: HumanEval_88_sort_array
language: php
results:
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + end($array);\n    if ($sum\
    \ % 2 === 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nvar_dump(sort_array([]));\nvar_dump(sort_array([5]));\n\
    var_dump(sort_array([2, 4, 3, 0, 1, 5]));\nvar_dump(sort_array([2, 4, 3, 0, 1,\
    \ 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(1) {\n  [0]=>\n  int(5)\n}\narray(6) {\n  [0]=>\n\
    \  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n  [5]=>\n  int(5)\n}\narray(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n\
    \  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n\
    \  [6]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) return $array;\n    $length\
    \ = count($array);\n    $sum = $array[0] + $array[$length - 1];\n    if ($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $last_index = count($array) - 1;\n    if($last_index\
    \ < 0) return $array;\n    $odd_case = ($array[0] + $array[$last_index]) % 2 !=\
    \ 0;\n    return $odd_case ? sort_odd_case($array) : sort_even_case($array);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_even_case()\
    \ in /tmp/tmpc870m64n.php:16\nStack trace:\n#0 /tmp/tmpc870m64n.php(20): sort_array(Array)\n\
    #1 /tmp/tmpc870m64n.php(25): candidate(Array)\n#2 /tmp/tmpc870m64n.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc870m64n.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $array_sum = $array[0] + $array[count($array)\
    \ - 1];\n    if ($array_sum % 2 == 0) {\n        rsort($array);\n    } else {\n\
    \        sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) == 0) return $array;\n  $isOdd\
    \ = ($array[0] + $array[count($array) - 1]) % 2 == 1;\n  $compare = function($a,\
    \ $b) use ($isOdd) {\n    return $isOdd ? $a > $b : $a < $b;\n  };\n  usort($array,\
    \ $compare);\n  return $array;\n}\necho sort_array([2, 4, 3, 0, 1, 5, 6]);\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Array
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(empty($array)) {\n    return [];\n  }\n  $sum\
    \ = $array[0] + $array[count($array) - 1];\n  $ascending = $sum % 2 === 0;\n \
    \ if($ascending) {\n    sort($array);\n  } else {\n    rsort($array);\n  }\n \
    \ return $array;\n}\n\n$array = [2, 4, 3, 0, 1, 5];\necho 'Input: ' . implode(',\
    \ ', $array) . PHP_EOL;\n$array = sort_array($array);\necho 'Output: ' . implode(',\
    \ ', $array) . PHP_EOL;\n\n$array = [2, 4, 3, 0, 1, 5, 6];\necho 'Input: ' . implode(',\
    \ ', $array) . PHP_EOL;\n$array = sort_array($array);\necho 'Output: ' . implode(',\
    \ ', $array) . PHP_EOL;\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: 2, 4, 3, 0, 1, 5\nOutput: 5, 4, 3, 2, 1, 0\nInput: 2, 4, 3, 0, 1,\
    \ 5, 6\nOutput: 0, 1, 2, 3, 4, 5, 6\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpthzycemn.php:42\nStack trace:\n#0 /tmp/tmpthzycemn.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpthzycemn.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!$array) return $array;\n    $length =\
    \ count($array);\n    if ($length < 2) return $array;\n    if (($array[0] + $array[$length\
    \ - 1]) % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) <= 1) return $array;\n   \
    \ else if((($array[0] + $array[count($array) - 1]) % 2) === 0) arsort($array);\n\
    \    else asort($array);\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4z1p94v.php:26\n\
    Stack trace:\n#0 /tmp/tmpl4z1p94v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl4z1p94v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) {\n    return $array;\n\
    \  }\n  $result = [];\n  if (($array[0] + $array[count($array) - 1]) % 2 === 0)\
    \ {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  foreach ($array\
    \ as $key => $value) {\n    $result[] = $value;\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $array = array_reverse($array);\n  $arrLen =\
    \ count($array);\n  if ($arrLen % 2 == 0) {\n    return $array;\n  } else {\n\
    \    for ($i = 1; $i < $arrLen; $i += 2) {\n      $result[] = $array[$i];\n  \
    \    $result[] = $array[$i - 1];\n    }\n    if (isset($array[$arrLen - 1])) {\n\
    \      $result[] = $array[$arrLen - 1];\n    }\n    return $result;\n  }\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q21kw05.php:36\n\
    Stack trace:\n#0 /tmp/tmp2q21kw05.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2q21kw05.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $length = count($array);\n  if ($length === 0)\
    \ {\n    return [];\n  }\n  if ($length === 1) {\n    return $array;\n  }\n  $firstIndex\
    \ = array_shift($array);\n  $lastIndex = array_pop($array);\n  $sum = $firstIndex\
    \ + $lastIndex;\n  $orderedArray = $sum % 2 === 0 ? descendingOrder($array) :\
    \ ascendingOrder($array);\n  array_unshift($orderedArray, $firstIndex);\n  array_push($orderedArray,\
    \ $lastIndex);\n  return $orderedArray;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function ascendingOrder()\
    \ in /tmp/tmpudesezvw.php:23\nStack trace:\n#0 /tmp/tmpudesezvw.php(30): sort_array(Array)\n\
    #1 /tmp/tmpudesezvw.php(36): candidate(Array)\n#2 /tmp/tmpudesezvw.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpudesezvw.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!$array) {\n        return $array;\n  \
    \  }\n    $first_index = $array[0];\n    $last_index = end($array);\n    if ($first_index\
    \ + $last_index % 2 == 0) {\n        sort($array);\n    } else {\n        rsort($array);\n\
    \    }\n    return $array;\n}\n\n$array = [2, 4, 3, 0, 1, 5];\nprint_r(sort_array($array));\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0c7ojkv.php:36\n\
    Stack trace:\n#0 /tmp/tmp_0c7ojkv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_0c7ojkv.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // return $array;\n  $head = array_shift($array);\n\
    \  $tail = array_pop($array);\n  if (($head + $tail) % 2 == 0) {\n    rsort($array);\n\
    \  } else {\n    sort($array);\n  }\n  array_unshift($array, $head);\n  array_push($array,\
    \ $tail);\n  return $array;\n}\nprint_r(sort_array([]));\nprint_r(sort_array([5]));\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0,\
    \ 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => \n)\nArray\n(\n    [0] => 5\n    [1]\
    \ => \n)\nArray\n(\n    [0] => 2\n    [1] => 0\n    [2] => 1\n    [3] => 3\n \
    \   [4] => 4\n    [5] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] =>\
    \ 4\n    [3] => 3\n    [4] => 1\n    [5] => 0\n    [6] => 6\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpepplgjbk.php:34\nStack trace:\n\
    #0 /tmp/tmpepplgjbk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpepplgjbk.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (!$array) return [];\n\t$s = $array[0] + end($array);\n\
    \treturn $s % 2 ? rsort($array) : sort($array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppez9nio2.php:24\n\
    Stack trace:\n#0 /tmp/tmppez9nio2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppez9nio2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return $array;\n  }\n\
    \  $sorted_array = $array;\n  $first_last_sum = $array[0] + $array[count($array)\
    \ - 1];\n  if ($first_last_sum % 2 == 0) {\n    rsort($sorted_array);\n  } else\
    \ {\n    sort($sorted_array);\n  }\n  return $sorted_array;\n}\necho 'sort_array([])\
    \ => ';\nvar_dump(sort_array([]));\necho 'sort_array([5]) => ';\nvar_dump(sort_array([5]));\n\
    echo 'sort_array([2, 4, 3, 0, 1, 5]) => ';\nvar_dump(sort_array([2, 4, 3, 0, 1,\
    \ 5]));\necho 'sort_array([2, 4, 3, 0, 1, 5, 6]) => ';\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_array([]) => array(0) {\n}\nsort_array([5]) => array(1) {\n  [0]=>\n\
    \  int(5)\n}\nsort_array([2, 4, 3, 0, 1, 5]) => array(6) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n\
    \  [5]=>\n  int(5)\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]) => array(7) {\n  [0]=>\n\
    \  int(6)\n  [1]=>\n  int(5)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) < 2) return $array;\n   \
    \ $even = $odd = [];\n    foreach ($array as $key => $value) {\n        if ($key\
    \ % 2 === 0) $even[] = $value;\n        else $odd[] = $value;\n    }\n    rsort($even);\n\
    \    sort($odd);\n    foreach ($array as $key => $value) {\n        if ($key %\
    \ 2 === 0) $even[] = $value;\n        else $odd[] = $value;\n    }\n    foreach\
    \ ($array as $key => $value) {\n        if ($key % 2 === 0) $even[] = $value;\n\
    \        else $odd[] = $value;\n    }\n    foreach ($array as $key => $value)\
    \ {\n        if ($key % 2 === 0) $even[] = $value;\n        else $odd[] = $value;\n\
    \    }\n    foreach ($array as $key => $value) {\n        if ($key % 2 === 0)\
    \ $even[] = $value;\n        else $odd[] = $value;\n    }\n    foreach ($array\
    \ as $key => $value) {\n        if ($key % 2 === 0) $even[] = $value;\n      \
    \  else $odd[] = $value;\n    }\n    foreach ($array as $key => $value) {\n  \
    \      if ($key % 2 === 0) $even[] = $value;\n        else $odd[] = $value;\n\
    \    }\n    foreach ($array as $key => $value) {\n        if ($key % 2 === 0)\
    \ $even[] = $value;\n        else $odd[] = $value;\n    }\n    foreach ($array\
    \ as $key => $value) {\n        if ($key % 2 === 0) $even[] = $value;\n      \
    \  else $odd[] = $value;\n    }\n    foreach ($array as $key => $value) {\n  \
    \      if ($key % 2 === 0) $even[] = $value;\n        else $odd[] = $value;\n\
    \    }\n    foreach ($array as $key => $value) {\n        if ($key % 2 === 0)\
    \ $even[] = $value;\n        else $\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc_qic8r5.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $ind_sum = $array[0] + $array[count($array) -\
    \ 1];\n  if ($ind_sum % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n\
    \  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) return [];\n    if (count($array)\
    \ == 1) return $array;\n    if (array_sum($array) % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nkmdgve.php:30\n\
    Stack trace:\n#0 /tmp/tmp9nkmdgve.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9nkmdgve.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$count = count($array);\n\tif ($count == 0 ||\
    \ $count == 1) {\n\t\treturn $array;\n\t}\n\t$key_1 = $array[0];\n\t$key_2 = $array[$count\
    \ - 1];\n\tif (($key_1 + $key_2) % 2 == 0) {\n\t\tsort($array);\n\t} else {\n\t\
    \trsort($array);\n\t}\n\treturn $array;\n}\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bhcv2i1.php:33\n\
    Stack trace:\n#0 /tmp/tmp_bhcv2i1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_bhcv2i1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $result = [];\n  $start = 0;\n  $end = count($array)\
    \ - 1;\n  $odd = (($array[$start] + $array[$end]) % 2 === 1);\n  rsort($array);\n\
    \  for ($i = 0; $i < count($array); $i++) {\n    if ($odd) {\n      if ($array[$i]\
    \ % 2 === 1) {\n        $result[] = $array[$i];\n      }\n    } else {\n     \
    \ if ($array[$i] % 2 === 0) {\n        $result[] = $array[$i];\n      }\n    }\n\
    \  }\n  return $result;\n}\necho '<pre>'; print_r(sort_array([2, 4, 3, 0, 1, 5]));\
    \ echo '</pre>';\necho '<pre>'; print_r(sort_array([2, 4, 3, 0, 1, 5, 6])); echo\
    \ '</pre>';\necho '<pre>'; print_r(sort_array([])); echo '</pre>';\necho '<pre>';\
    \ print_r(sort_array([5])); echo '</pre>';\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 1\n)\n</pre><pre>Array\n\
    (\n    [0] => 6\n    [1] => 4\n    [2] => 2\n    [3] => 0\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnywtq63s.php:42\nStack trace:\n#0 /tmp/tmpnywtq63s.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnywtq63s.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $i = 0;\n    $len = count($array);\n    $left\
    \ = $array[0];\n    $right = $array[$len - 1];\n    $sum = $left + $right;\n \
    \   $type = $sum % 2 == 0 ? 'ASC' : 'DESC';\n    while ($i < $len) {\n       \
    \ $k = $i;\n        while ($k < $len) {\n            if ($type == 'ASC') {\n \
    \               if ($array[$i] > $array[$k]) {\n                    swap($array,\
    \ $i, $k);\n                }\n            } else {\n                if ($array[$i]\
    \ < $array[$k]) {\n                    swap($array, $i, $k);\n               \
    \ }\n            }\n            $k++;\n        }\n        $i++;\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function swap() in /tmp/tmp5lc5exxg.php:28\n\
    Stack trace:\n#0 /tmp/tmp5lc5exxg.php(39): sort_array(Array)\n#1 /tmp/tmp5lc5exxg.php(45):\
    \ candidate(Array)\n#2 /tmp/tmp5lc5exxg.php(52): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp5lc5exxg.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn [];\n\t}\n\t\
    if ($array[0] % 2 == 0 && $array[count($array) - 1] % 2 == 0) {\n\t\trsort($array);\n\
    \t} else {\n\t\tsort($array);\n\t}\n\treturn $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgjkiqzx.php:35\n\
    Stack trace:\n#0 /tmp/tmpmgjkiqzx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmgjkiqzx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sorted = [];\n    if (is_array($array) &&\
    \ count($array) > 0) {\n        if (($array[0] + $array[count($array) - 1]) %\
    \ 2 === 0) {\n            $sorted = $array;\n            sort($sorted);\n    \
    \        return array_reverse($sorted);\n        } else {\n            return\
    \ $array;\n        }\n    } else {\n        return $array;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwzpf_2g.php:34\n\
    Stack trace:\n#0 /tmp/tmplwzpf_2g.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplwzpf_2g.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) == 0) return [];\n    $new\
    \ = [];\n    for($i = 0; $i < count($array); $i++) {\n        $new[$i] = $array[$i];\n\
    \    }\n    if((($new[0] + $new[count($new) - 1]) % 2) != 0) {\n        sort($new);\n\
    \    } else {\n        rsort($new);\n    }\n    return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(count($array) == 0 || count($array) == 1)\
    \ {\n    return $array;\n  }\n  else {\n    $temp = $array[0] + $array[count($array)\
    \ - 1];\n    if($temp % 2 != 0) {\n      sort($array);\n    }\n    else {\n  \
    \    rsort($array);\n    }\n    return $array;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (sizeof($array) == 0) {\n    return [];\n\
    \  } else if (sizeof($array) == 1) {\n    return $array;\n  } else {\n    if (($array[0]\
    \ + $array[sizeof($array) - 1]) % 2 == 0) {\n      rsort($array);\n      return\
    \ $array;\n    } else {\n      sort($array);\n      return $array;\n    }\n  }\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) return [];\n  $sum = $array[0]\
    \ + end($array);\n  $order = ($sum % 2 === 0) ? SORT_DESC : SORT_ASC;\n  sort($array,\
    \ $order);\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys9chd7y.php:28\n\
    Stack trace:\n#0 /tmp/tmpys9chd7y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpys9chd7y.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if ($sum % 2 != 0) {\n        sort($array);\n    } else {\n        rsort($array);\n\
    \    }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $array1 = [];\n    $array2 = [];\n    for ($i\
    \ = 0; $i < count($array); $i++) {\n        if (($array[0] + $array[count($array)\
    \ - 1]) % 2 !== 0) {\n            $array1[] = $array[$i];\n        } else {\n\
    \            $array2[] = $array[$i];\n        }\n    }\n    if (count($array1)\
    \ !== 0) {\n        sort($array1);\n        return $array1;\n    } else {\n  \
    \      rsort($array2);\n        return $array2;\n    }\n}\n\nvar_dump(sort_array([]));\
    \ // => []\nvar_dump(sort_array([5])); // => [5]\nvar_dump(sort_array([2, 4, 3,\
    \ 0, 1, 5])); // => [0, 1, 2, 3, 4, 5]\nvar_dump(sort_array([2, 4, 3, 0, 1, 5,\
    \ 6])); // => [6, 5, 4, 3, 2, 1, 0]\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(1) {\n  [0]=>\n  int(5)\n}\narray(6) {\n  [0]=>\n\
    \  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n  [5]=>\n  int(5)\n}\narray(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n\
    \  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n\
    \  [6]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $copyArray = $array;\n  $firstValue = $array[0];\n\
    \  $lastValue = $array[count($array) - 1];\n  $sum = $firstValue + $lastValue;\n\
    \  if ($sum % 2 == 0) {\n    rsort($copyArray);\n  } else {\n    sort($copyArray);\n\
    \  }\n  return $copyArray;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) === 0) {\n        return\
    \ [];\n    }\n    if (count($array) === 1) {\n        return $array;\n    }\n\
    \    $count = count($array);\n    if (($array[0] + $array[$count - 1]) % 2 ===\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\necho '<pre>';\nprint_r(sort_array([]));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(sort_array([5]));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\necho '</pre>';\n\necho '<pre>';\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => 5\n)\n</pre><pre>Array\n\
    (\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n)\n</pre><pre>Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n   \
    \ [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(!empty($array)){\n      $oddEven = ($array[0]\
    \ + end($array)) % 2 == 0 ? \"even\" : \"odd\";\n      if($oddEven == \"even\"\
    ){\n        arsort($array);\n      } else {\n        asort($array);\n      }\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2x4084_.php:31\n\
    Stack trace:\n#0 /tmp/tmpp2x4084_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp2x4084_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    $sum % 2 === 0 ? rsort($array) : sort($array);\n    return $array;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    // Your code here\n    if (count($array) ==\
    \ 0) {\n        return [];\n    }\n    if (count($array) == 1) {\n        return\
    \ $array;\n    }\n    if (count($array) == 2) {\n        if (($array[0] + $array[1])\
    \ % 2 == 0) {\n            return array_reverse($array);\n        } else {\n \
    \           return $array;\n        }\n    }\n    if (($array[0] + $array[count($array)\
    \ - 1]) % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1zkwf44.php:44\n\
    Stack trace:\n#0 /tmp/tmpi1zkwf44.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi1zkwf44.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(empty($array)){\n        return $array;\n\
    \    }\n    if(count($array) === 1){\n        return $array;\n    }\n    $sumIndex\
    \ = $array[0] + $array[count($array) - 1];\n    if($sumIndex % 2 === 0){\n   \
    \     rsort($array);\n    }else{\n        sort($array);\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) < 2) {\n        return $array;\n\
    \    }\n    $even = array_sum($array) % 2 == 0;\n    $desc = $even ?  SORT_DESC\
    \ : SORT_ASC;\n    asort($array, $desc);\n    return $array;\n}\n\n$output = sort_array([2,\
    \ 4, 3, 0, 1, 5]);\nvar_dump($output);\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [3]=>\n  int(0)\n  [4]=>\n  int(1)\n  [0]=>\n  int(2)\n \
    \ [2]=>\n  int(3)\n  [1]=>\n  int(4)\n  [5]=>\n  int(5)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsgwjxn5i.php:31\nStack trace:\n#0 /tmp/tmpsgwjxn5i.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsgwjxn5i.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\n}\n\nprint_r(sort_array([]));\nprint_r(sort_array([5]));\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0,\
    \ 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmmjb8rt.php:25\n\
    Stack trace:\n#0 /tmp/tmpfmmjb8rt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfmmjb8rt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) == 0 || count($array) == 1)\
    \ {\n        return $array;\n    }\n\n    $condition = $array[0] + $array[count($array)\
    \ - 1];\n    if($condition % 2 == 0) {\n        rsort($array);\n    } else {\n\
    \        sort($array);\n    }\n\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $result = [];\n    $sort = ['asc', 'desc'];\n\
    \    $sum = array_sum([$array[0], end($array)]);\n    if ($sum % 2 == 0) {\n \
    \       $result = $array;\n        rsort($result);\n    } else {\n        $result\
    \ = $array;\n        sort($result);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn $array;\n\t\
    }\n\n\t$result = [];\n\t$odd = [];\n\t$even = [];\n\n\tforeach ($array as $item)\
    \ {\n\t\tif ($item % 2 === 0) {\n\t\t\t$even[] = $item;\n\t\t} else {\n\t\t\t\
    $odd[] = $item;\n\t\t}\n\t}\n\n\tif (($array[0] + $array[count($array) - 1]) %\
    \ 2 === 0) {\n\t\tsort($even);\n\t\t$result = array_merge($even, $odd);\n\t} else\
    \ {\n\t\tsort($odd);\n\t\t$result = array_merge($odd, $even);\n\t}\n\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgcxl3n7k.php:47\n\
    Stack trace:\n#0 /tmp/tmpgcxl3n7k.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgcxl3n7k.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $array_length = count($array);\n    if ($array_length\
    \ < 2) {\n        return $array;\n    }\n    $first_item = $array[0];\n    $last_item\
    \ = $array[$array_length - 1];\n    $array_sum = $first_item + $last_item;\n \
    \   if ($array_sum % 2 == 0) {\n        $sort_criteria = SORT_DESC;\n    } else\
    \ {\n        $sort_criteria = SORT_ASC;\n    }\n    array_multisort($array, $sort_criteria);\n\
    \    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $length = count($array);\n  if($length == 0)\
    \ {\n    return $array;\n  }\n  $first = $array[0];\n  $last = $array[$length\
    \ - 1];\n  $sum = $first + $last;\n  if($sum % 2 == 0) {\n    sort($array);\n\
    \  } else {\n    rsort($array);\n  }\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b4jl0ek.php:35\n\
    Stack trace:\n#0 /tmp/tmp_b4jl0ek.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_b4jl0ek.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return [];\n  }\n \
    \ if (count($array) === 1) {\n    return $array;\n  }\n  if ((($array[0] + $array[count($array)\
    \ - 1]) % 2) === 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n\
    \  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!is_array($array) || count($array) == 0)\
    \ {\n        return $array;\n    }\n    $first = $array[0];\n    $last = $array[count($array)\
    \ - 1];\n    $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamwgm8z6.php:20\n\
    Stack trace:\n#0 /tmp/tmpamwgm8z6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpamwgm8z6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $first = array_shift($array);\n  $last = array_pop($array);\n\
    \  $sorted = [];\n  if ($first + $last % 2 == 0) {\n    arsort($array);\n    foreach\
    \ ($array as $k => $v) {\n      array_push($sorted, $v);\n    }\n    array_unshift($sorted,\
    \ $first);\n    array_push($sorted, $last);\n  } else {\n    asort($array);\n\
    \    foreach ($array as $k => $v) {\n      array_push($sorted, $v);\n    }\n \
    \   array_unshift($sorted, $first);\n    array_push($sorted, $last);\n  }\n  return\
    \ $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76cpu26x.php:38\n\
    Stack trace:\n#0 /tmp/tmp76cpu26x.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp76cpu26x.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc3x_o8b.php:21\n\
    Stack trace:\n#0 /tmp/tmpsc3x_o8b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsc3x_o8b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $sorted = ($array[0] + end($array)) % 2 == 0 ? 'desc' : 'asc';\n \
    \   array_multisort($array, SORT_NUMERIC, $sorted);\n    return $array;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Argument #3 is expected to be an array or\
    \ a sort flag in /tmp/tmp3910977s.php on line 17\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3910977s.php:28\nStack trace:\n#0 /tmp/tmp3910977s.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3910977s.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) return [];\n    if (count($array)\
    \ === 1) return $array;\n    if ($array[0] + $array[count($array) - 1] % 2 ===\
    \ 0) sort($array);\n    else rsort($array);\n    return $array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm2b1e2r.php:27\n\
    Stack trace:\n#0 /tmp/tmpvm2b1e2r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvm2b1e2r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!$array) return [];\n    sort($array);\n\
    \    if (array_sum($array) % 2 == 0) {\n        $array = array_reverse($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ymsqvvf.php:29\n\
    Stack trace:\n#0 /tmp/tmp6ymsqvvf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6ymsqvvf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) == 0) {\n        return $array;\n\
    \    }\n    $odd = ($array[0] + $array[count($array) - 1]) % 2 == 1;\n    $sorted\
    \ = $array;\n    if($odd) {\n        rsort($sorted);\n    } else {\n        sort($sorted);\n\
    \    }\n    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpew4trfkc.php:32\n\
    Stack trace:\n#0 /tmp/tmpew4trfkc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpew4trfkc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $index = $array[0] + end($array);\n    return\
    \ ($index & 1) ? rsort($array) : sort($array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgtvhg8s.php:22\n\
    Stack trace:\n#0 /tmp/tmpmgtvhg8s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmgtvhg8s.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    $newArray = [];\n    if ($sum % 2 == 0) {\n        rsort($array);\n     \
    \   return $array;\n    } else {\n        sort($array);\n        return $array;\n\
    \    }\n    return $newArray;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(count($array) == 0 || count($array) == 1)\
    \ {\n    return $array;\n  }\n  if(($array[0] + $array[count($array) - 1]) % 2\
    \ == 0) {\n    return rsort($array);\n  } else {\n    return sort($array);\n \
    \ }\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0,\
    \ 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehbfhkxb.php:30\n\
    Stack trace:\n#0 /tmp/tmpehbfhkxb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpehbfhkxb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $isEven = true;\n    $result = array();\n \
    \   $count = count($array);\n    $first = array_shift($array);\n    $last = array_pop($array);\n\
    \    if(($first + $last) % 2 == 0) {\n        $isEven = true;\n    } else {\n\
    \        $isEven = false;\n    }\n    if(empty($array)) {\n        return $array;\n\
    \    }\n    if($count == 1) {\n        return $array;\n    }\n    while(count($array)\
    \ > 0) {\n        $first = array_shift($array);\n        $last = array_pop($array);\n\
    \        if($isEven) {\n            $result[] = $last;\n            $result[]\
    \ = $first;\n        } else {\n            $result[] = $first;\n            $result[]\
    \ = $last;\n        }\n    }\n    if($count % 2 != 0) {\n        $result[] = $first;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3h4340c.php:52\n\
    Stack trace:\n#0 /tmp/tmpx3h4340c.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpx3h4340c.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = $array[0] + $array[count($array) - 1];\n\
    \  if($sum % 2 == 0) {\n    rsort($array);\n  }\n  else {\n    sort($array);\n\
    \  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmg61mk7.php:20\n\
    Stack trace:\n#0 /tmp/tmpzmg61mk7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzmg61mk7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) return [];\n  if (count($array)\
    \ == 1) return $array;\n  $result = [];\n  $i = $array[0];\n  $j = $array[count($array)\
    \ - 1];\n  $sum = $i + $j;\n  if ( $sum % 2 == 0 ) sort($array);\n  else rsort($array);\n\
    \  return $array;\n}\necho var_dump(sort_array([5]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmph5qhl095.php:31\nStack trace:\n#0 /tmp/tmph5qhl095.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph5qhl095.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return $array;\n  }\n\
    \  $sum = $array[0] + $array[count($array) - 1];\n  if ($sum % 2 == 0) {\n   \
    \ rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n}\n\n\
    echo \"sort_array([]) => \";\nvar_dump(sort_array([]));\necho \"sort_array([5])\
    \ => \";\nvar_dump(sort_array([5]));\necho \"sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ \";\nvar_dump(sort_array([2, 4, 3, 0, 1, 5]));\necho \"sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]) => \";\nvar_dump(sort_array([2, 4, 3, 0, 1, 5, 6]));\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_array([]) => array(0) {\n}\nsort_array([5]) => array(1) {\n  [0]=>\n\
    \  int(5)\n}\nsort_array([2, 4, 3, 0, 1, 5]) => array(6) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n\
    \  [5]=>\n  int(5)\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]) => array(7) {\n  [0]=>\n\
    \  int(6)\n  [1]=>\n  int(5)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $beginning = reset($array);\n    $end = end($array);\n\
    \    $is_even = (array_sum([$beginning, $end]) % 2 === 0);\n    if ($is_even)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (sizeof($array) === 0) return [];\n  if (sizeof($array)\
    \ === 1) return $array;\n  $first = $array[0];\n  $last = $array[sizeof($array)\
    \ - 1];\n  if ($first + $last % 2 === 0) {\n    rsort($array);\n  } else {\n \
    \   sort($array);\n  }\n  return $array;\n}\n\necho sort_array([0]);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_n0pp5t5.php:34\n\
    Stack trace:\n#0 /tmp/tmp_n0pp5t5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_n0pp5t5.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif(count($array) == 0 || count($array) == 1)\
    \ return $array;\n\t$sum = $array[0] + $array[count($array) - 1];\n\t$sorted =\
    \ sort($array);\n\tif($sum % 2 == 0) {\n\t\treturn array_reverse($array);\n\t\
    } else {\n\t\treturn $array;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif(count($array) == 0) return $array;\n\tif(count($array)\
    \ == 1) return $array;\n\tif(($array[0] + $array[count($array) - 1]) % 2 == 0)\n\
    \t\trsort($array);\n\telse\n\t\tsort($array);\n\treturn $array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) == 0 || count($array) ==\
    \ 1) return $array;\n    $first = $array[0];\n    $last = $array[count($array)\
    \ - 1];\n    $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        sort($array);\n\
    \        return array_reverse($array);\n    } else {\n        sort($array);\n\
    \        return $array;\n    }\n}\necho '<pre>';\nprint_r(sort_array([]));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(sort_array([5]));\necho '</pre>';\necho '<pre>';\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\necho '</pre>';\necho '<pre>';\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => 5\n)\n</pre><pre>Array\n\
    (\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n)\n</pre><pre>Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n   \
    \ [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) === 0) {\n        return\
    \ [];\n    }\n    $result = [];\n    $sorted = false;\n    $arrayLength = count($array);\n\
    \    $i = 0;\n    $j = $arrayLength - 1;\n    while (!$sorted) {\n        if ($i\
    \ === $j) {\n            $result[] = $array[$i];\n            $sorted = true;\n\
    \        } else {\n            if (($array[$i] + $array[$j]) % 2 === 0) {\n  \
    \              $result[] = $array[$j];\n                $result[] = $array[$i];\n\
    \                $i++;\n                $j--;\n            } else {\n        \
    \        $result[] = $array[$i];\n                $result[] = $array[$j];\n  \
    \              $i++;\n                $j--;\n            }\n        }\n    }\n\
    \    return $result;\n}\n\nvar_dump(sort_array([])); // []\nvar_dump(sort_array([5]));\
    \ // [5]\nvar_dump(sort_array([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(1) {\n  [0]=>\n  int(5)\n}\n\nFatal error: Allowed\
    \ memory size of 134217728 bytes exhausted (tried to allocate 134217736 bytes)\
    \ in /tmp/tmpq0gx85np.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpat760_o8.php:22\n\
    Stack trace:\n#0 /tmp/tmpat760_o8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpat760_o8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $end = sizeof($array) - 1;\n    $start = 0;\n\
    \    $result = [];\n    while ($start < $end) {\n        if ($array[$start] %\
    \ 2 === 0 && $array[$end] % 2 === 0) {\n            $result[] = $array[$end];\n\
    \            $result[] = $array[$start];\n        } else if ($array[$start] %\
    \ 2 === 0 && $array[$end] % 2 !== 0) {\n            $result[] = $array[$start];\n\
    \            $result[] = $array[$end];\n        } else if ($array[$start] % 2\
    \ !== 0 && $array[$end] % 2 === 0) {\n            $result[] = $array[$end];\n\
    \            $result[] = $array[$start];\n        } else {\n            $result[]\
    \ = $array[$start];\n            $result[] = $array[$end];\n        }\n      \
    \  $start++;\n        $end--;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi6bujfz.php:41\n\
    Stack trace:\n#0 /tmp/tmppi6bujfz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppi6bujfz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)\
    \ - 1];\n    $sum = $first + $last;\n    $newArray = [];\n    if ($sum % 2 ===\
    \ 0) {\n        rsort($array);\n        return $array;\n    } else {\n       \
    \ sort($array);\n        return $array;\n    }\n}\necho implode(', ', sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 9, 8, 7, 6, 5, 4, 3, 2, 1
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif(count($array) === 0 || count($array) === 1)\
    \ {\n\t\treturn $array;\n\t}\n\t$sum = $array[0] + $array[count($array) - 1];\n\
    \t$result = [];\n\tif($sum % 2 === 0) {\n\t\t$array = array_reverse($array);\n\
    \t}\n\tforeach($array as $key => $value) {\n\t\tif($value % 2 === 0) {\n\t\t\t\
    $result[] = $value;\n\t\t\tunset($array[$key]);\n\t\t}\n\t}\n\tsort($result);\n\
    \tsort($array);\n\treturn array_merge($result, $array);\n}\n\n$result = sort_array([2,\
    \ 4, 3, 0, 1, 5]);\nprint_r($result);\necho \"\\n\";\n\n$result = sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]);\nprint_r($result);\necho \"\\n\";\n\n$result = sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nprint_r($result);\necho \"\\n\";\n\n$result =\
    \ sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10]);\nprint_r($result);\necho \"\\\
    n\";\n\n$result = sort_array([2, 2, 3, 4, 3, 2, 5, 2, 3, 3, 5, 2, 1, 2, 0, 6,\
    \ 2, 2, 1, 2, 0, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 0, 0, 1, 1, 2, 3, 1, 0, 1, 1, 0,\
    \ 0, 0, 1, 2, 3, 2, 3, 1, 1, 2, 3, 2, 3, 2, 3, 1, 1, 2, 3, 2, 3, 1, 1, 2, 3, 2,\
    \ 3, 2, 1, 0, 0, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 0, 1, 2, 3, 2, 3, 1, 1, 2, 3,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp314_9kuc.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (!$array) return $array;\n  $odd = ($array[0]\
    \ + $array[count($array) - 1]) % 2 == 1;\n  usort($array, function($a, $b) use\
    \ ($odd) {\n    if ($odd) return $a > $b;\n    return $a < $b;\n  });\n  return\
    \ $array;\n}\n\necho \"** sort_array()\\n\";\nassert(sort_array([]) == []);\n\
    assert(sort_array([5]) == [5]);\nassert(sort_array([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]);\nassert(sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2,\
    \ 1, 0]);\necho \"OK!\\n\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "** sort_array()\nOK!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    // Write your code here\n    $sum= array_sum(array_slice($array,\
    \ 0, 2));\n    if($sum%2==0){\n        rsort($array);\n    }\n    else{\n    \
    \    sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lnnufbi.php:30\n\
    Stack trace:\n#0 /tmp/tmp5lnnufbi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5lnnufbi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 === 0) {\n        sort($array);\n    } else {\n        rsort($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9z0764o.php:29\n\
    Stack trace:\n#0 /tmp/tmpv9z0764o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpv9z0764o.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    // TODO: implement sort_array\n    $odd = [];\n\
    \    $even = [];\n    foreach ($array as $key => $value) {\n        if (($key\
    \ + $value) % 2 == 0) {\n            $even[] = $value;\n        } else {\n   \
    \         $odd[] = $value;\n        }\n    }\n    sort($odd);\n    sort($even);\n\
    \    $result = [];\n    foreach ($array as $key => $value) {\n        if (($key\
    \ + $value) % 2 == 0) {\n            $result[] = array_pop($even);\n        }\
    \ else {\n            $result[] = array_pop($odd);\n        }\n    }\n    return\
    \ $result;\n}\n\n$result = sort_array([2, 4, 3, 0, 1, 5]);\nprint_r($result);\n\
    $result = sort_array([2, 4, 3, 0, 1, 5, 6]);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 1\n    [4]\
    \ => 0\n    [5] => 2\n)\nArray\n(\n    [0] => 6\n    [1] => 4\n    [2] => 3\n\
    \    [3] => 1\n    [4] => 0\n    [5] => 5\n    [6] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp51xmqkxr.php:47\nStack trace:\n#0 /tmp/tmp51xmqkxr.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp51xmqkxr.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif(is_array($array) && count($array) > 0) {\n\
    \t\tif(array_sum($array) % 2 === 0) {\n\t\t\tsort($array);\n\t\t} else {\n\t\t\
    \trsort($array);\n\t\t}\n\t}\n\treturn $array;\n}\n\necho \"<h2>Sort Array</h2>\"\
    ;\necho \"<h3>Test 1</h3>\";\necho \"Input: sort_array([]) => []<br>\";\necho\
    \ \"Your Output: \"; print_r(sort_array([])); echo \"<br>\";\necho \"Expected\
    \ Output: Array () <br>\";\necho \"<h3>Test 2</h3>\";\necho \"Input: sort_array([5])\
    \ => [5]<br>\";\necho \"Your Output: \"; print_r(sort_array([5])); echo \"<br>\"\
    ;\necho \"Expected Output: Array ( [0] => 5 ) <br>\";\necho \"<h3>Test 3</h3>\"\
    ;\necho \"Input: sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]<br>\";\n\
    echo \"Your Output: \"; print_r(sort_array([2, 4, 3, 0, 1, 5])); echo \"<br>\"\
    ;\necho \"Expected Output: Array ( [0] => 0 [1] => 1 [2] => 2 [3] => 3 [4] =>\
    \ 4 [5] => 5 ) <br>\";\necho \"<h3>Test 4</h3>\";\necho \"Input: sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]<br>\";\necho \"Your Output: \";\
    \ print_r(sort_array([2, 4, 3, 0, 1, 5, 6])); echo \"<br>\";\necho \"Expected\
    \ Output: Array ( [0] => 6 [1] => 5 [2] => 4 [3] => 3 [4] => 2 [5] => 1 [6] =>\
    \ 0 ) <br>\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h2>Sort Array</h2><h3>Test 1</h3>Input: sort_array([]) => []<br>Your Output:\
    \ Array\n(\n)\n<br>Expected Output: Array () <br><h3>Test 2</h3>Input: sort_array([5])\
    \ => [5]<br>Your Output: Array\n(\n    [0] => 5\n)\n<br>Expected Output: Array\
    \ ( [0] => 5 ) <br><h3>Test 3</h3>Input: sort_array([2, 4, 3, 0, 1, 5]) => [0,\
    \ 1, 2, 3, 4, 5]<br>Your Output: Array\n(\n    [0] => 5\n    [1] => 4\n    [2]\
    \ => 3\n    [3] => 2\n    [4] => 1\n    [5] => 0\n)\n<br>Expected Output: Array\
    \ ( [0] => 0 [1] => 1 [2] => 2 [3] => 3 [4] => 4 [5] => 5 ) <br><h3>Test 4</h3>Input:\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]<br>Your Output: Array\n\
    (\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5]\
    \ => 1\n    [6] => 0\n)\n<br>Expected Output: Array ( [0] => 6 [1] => 5 [2] =>\
    \ 4 [3] => 3 [4] => 2 [5] => 1 [6] => 0 ) <br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw7ziqw02.php:47\nStack trace:\n#0 /tmp/tmpw7ziqw02.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw7ziqw02.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(empty($array)){\n        return $array;\n\
    \    }\n    if(count($array) == 1){\n        return $array;\n    }\n    if(($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0){\n        sort($array);\n        return\
    \ $array;\n    }else{\n        rsort($array);\n        return $array;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt88rbs34.php:35\n\
    Stack trace:\n#0 /tmp/tmpt88rbs34.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt88rbs34.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $count = count($array);\n    if(!$count) return\
    \ [];\n    $front = $array[0];\n    $back = $array[$count - 1];\n    $isOdd =\
    \ $front + $back & 1;\n    if($isOdd) {\n        sort($array);\n    } else {\n\
    \        rsort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (sizeof($array) == 0) {\n    return $array;\n\
    \  }\n  if ($array[0] + $array[sizeof($array) - 1] % 2 == 0) {\n    return rsort($array);\n\
    \  } else {\n    return sort($array);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnh20y223.php:29\n\
    Stack trace:\n#0 /tmp/tmpnh20y223.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnh20y223.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$arr=[];\n\t$arr=$array;\n\t$sum=0;\n\t$i=0;\n\
    \t$j=0;\n\t$min;\n\t$temp;\n\t$size=sizeof($array);\n\t$size1=$size-1;\n\t$arr1=[];\n\
    \t$arr1=$array;\n\tif($size>1)\n\t{\n\t\t$sum=$array[0]+$array[$size1];\n\t\t\
    if($sum%2==0)\n\t\t{\n\t\t\twhile($i<$size)\n\t\t\t{\n\t\t\t\t$min=$i;\n\t\t\t\
    \t$j=$i+1;\n\t\t\t\twhile($j<$size)\n\t\t\t\t{\n\t\t\t\t\tif($arr[$j]>$arr[$min])\n\
    \t\t\t\t\t{\n\t\t\t\t\t\t$min=$j;\n\t\t\t\t\t}\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\
    \t\t\t$temp=$arr[$i];\n\t\t\t\t$arr[$i]=$arr[$min];\n\t\t\t\t$arr[$min]=$temp;\n\
    \t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile($i<$size)\n\t\t\t\
    {\n\t\t\t\t$min=$i;\n\t\t\t\t$j=$i+1;\n\t\t\t\twhile($j<$size)\n\t\t\t\t{\n\t\t\
    \t\t\tif($arr1[$j]<$arr1[$min])\n\t\t\t\t\t{\n\t\t\t\t\t\t$min=$j;\n\t\t\t\t\t\
    }\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t\t$temp=$arr1[$i];\n\t\t\t\t$arr1[$i]=$arr1[$min];\n\
    \t\t\t\t$arr1[$min]=$temp;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t}\n\tif($sum%2==0)\n\
    \t{\n\t\treturn\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3cd1nimj.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $result = [];\n  $firstIndexValue = array_shift($array);\n\
    \  $lastIndexValue = array_pop($array);\n  $sum = $firstIndexValue + $lastIndexValue;\n\
    \  for ($i = 0; $i < count($array); $i++) {\n    if ($sum % 2 === 0) {\n     \
    \ for ($j = 0; $j < count($array); $j++) {\n        $max = max($array);\n    \
    \    $min = min($array);\n        $result[] = $max;\n        array_splice($array,\
    \ array_search($max, $array), 1);\n        $result[] = $min;\n        array_splice($array,\
    \ array_search($min, $array), 1);\n      }\n    } else {\n      $result = $array;\n\
    \    }\n  }\n  return $result;\n}\n\nprint_r(sort_array([2, 4, 3, 0, 1, 5]));\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 3\n    [2] => 0\n    [3] => 1\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 0\n    [2] => 4\n    [3] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdvdxibib.php:42\nStack trace:\n#0 /tmp/tmpdvdxibib.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdvdxibib.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) < 2) return $array;\n   \
    \ $result = $array;\n    usort($result, function($a, $b) use($array) {\n     \
    \   if (is_odd($array[0], $array[count($array) - 1])) {\n            return $a\
    \ > $b;\n        } else {\n            return $a < $b;\n        }\n    });\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmph0npwime.php:16\n\
    Stack trace:\n#0 [internal function]: {closure}(2, 4)\n#1 /tmp/tmph0npwime.php(21):\
    \ usort(Array, Object(Closure))\n#2 /tmp/tmph0npwime.php(26): sort_array(Array)\n\
    #3 /tmp/tmph0npwime.php(32): candidate(Array)\n#4 /tmp/tmph0npwime.php(39): test()\n\
    #5 {main}\n  thrown in /tmp/tmph0npwime.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(sizeof($array) == 0) return $array;\n  \
    \  $first = $array[0];\n    $last = $array[sizeof($array) - 1];\n    $sum = $first\
    \ + $last;\n    if($sum % 2 == 0) {\n        arsort($array);\n    }\n    else\
    \ {\n        asort($array);\n    }\n    return $array;\n}\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5, 6]));\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 0\n    [4] => 1\n    [0] => 2\n    [2] => 3\n    [1]\
    \ => 4\n    [5] => 5\n)\nArray\n(\n    [6] => 6\n    [5] => 5\n    [1] => 4\n\
    \    [2] => 3\n    [0] => 2\n    [4] => 1\n    [3] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp2svuqxi.php:35\nStack trace:\n#0 /tmp/tmpp2svuqxi.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp2svuqxi.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // Write your code here...\n  $sum = $array[0]\
    \ + $array[count($array) - 1];\n  if($sum % 2 === 0) {\n    rsort($array);\n \
    \ } else {\n    sort($array);\n  }\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $even = $odd = [];\n  foreach ($array as $key\
    \ => $item) {\n    if ($key % 2 == 0) {\n      $even[] = $item;\n    } else {\n\
    \      $odd[] = $item;\n    }\n  }\n  sort($even);\n  rsort($odd);\n  foreach\
    \ ($array as $key => $item) {\n    if ($key % 2 == 0) {\n      $array[$key] =\
    \ array_shift($even);\n    } else {\n      $array[$key] = array_shift($odd);\n\
    \    }\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxzi50v4.php:39\n\
    Stack trace:\n#0 /tmp/tmpcxzi50v4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcxzi50v4.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(!empty($array)) {\n        $cnt = count($array);\n\
    \        $first = $array[0];\n        $last = $array[$cnt - 1];\n        $sum\
    \ = $first + $last;\n        if($sum % 2 != 0) {\n            return sort($array);\n\
    \        } else {\n            return rsort($array);\n        }\n    }\n    return\
    \ $array;\n}\n\nvar_dump(sort_array([2, 4, 3, 0, 1, 5]));\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\nbool(true)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptrj5ozup.php:35\nStack trace:\n#0 /tmp/tmptrj5ozup.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmptrj5ozup.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $arr = $array;\n  $odd = false;\n  if(($arr[0]\
    \ + $arr[count($arr) - 1]) % 2 == 1) {\n    $odd = true;\n  }\n  for($i = 0; $i\
    \ < count($arr); $i++) {\n    for($j = $i; $j < count($arr); $j++) {\n      if($odd)\
    \ {\n        if($arr[$i] > $arr[$j]) {\n          $temp = $arr[$i];\n        \
    \  $arr[$i] = $arr[$j];\n          $arr[$j] = $temp;\n        }\n      } else\
    \ {\n        if($arr[$i] < $arr[$j]) {\n          $temp = $arr[$i];\n        \
    \  $arr[$i] = $arr[$j];\n          $arr[$j] = $temp;\n        }\n      }\n   \
    \ }\n  }\n  return $arr;\n}\n\necho sort_array([2, 4, 3, 0, 1, 5, 6]);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Array
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + end($array);\n    if($sum\
    \ % 2 === 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\necho \"<pre>\";\nprint_r(sort_array([2, 4, 3, 0,\
    \ 1, 5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5, 6]));\necho \"</pre>\";\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 4\n    [5] => 5\n)\nArray\n(\n    [0] => 6\n    [1] => 5\n    [2]\
    \ => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(count($array) == 0) {\n    return [];\n  }\n\
    \  $start = $array[0];\n  $end = $array[count($array) - 1];\n  $sum = $start +\
    \ $end;\n  if ($sum % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n\
    \  }\n  return $array;\n}\n\necho \"Test 1: sort_array([]); expect : [] <br>\"\
    ;\necho \"Return : \". implode(',', sort_array([])). \"<br>\";\necho \"Test 2:\
    \ sort_array([5]); expect : [5] <br>\";\necho \"Return : \". implode(',', sort_array([5])).\
    \ \"<br>\";\necho \"Test 3: sort_array([2, 4, 3, 0, 1, 5]); expect : [0, 1, 2,\
    \ 3, 4, 5] <br>\";\necho \"Return : \". implode(',', sort_array([2, 4, 3, 0, 1,\
    \ 5])). \"<br>\";\necho \"Test 4: sort_array([2, 4, 3, 0, 1, 5, 6]); expect :\
    \ [6, 5, 4, 3, 2, 1, 0] <br>\";\necho \"Return : \". implode(',', sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])). \"<br>\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'Test 1: sort_array([]); expect : [] <br>Return : <br>Test 2: sort_array([5]);
    expect : [5] <br>Return : 5<br>Test 3: sort_array([2, 4, 3, 0, 1, 5]); expect
    : [0, 1, 2, 3, 4, 5] <br>Return : 0,1,2,3,4,5<br>Test 4: sort_array([2, 4, 3,
    0, 1, 5, 6]); expect : [6, 5, 4, 3, 2, 1, 0] <br>Return : 6,5,4,3,2,1,0<br>'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(empty($array)) return [];\n  $value1 = $array[0];\n\
    \  $value2 = $array[count($array)-1];\n  $sum = $value1 + $value2;\n  if($sum\
    \ % 2 == 0) {\n    sort($array);\n    return array_reverse($array);\n  } else\
    \ {\n    sort($array);\n    return $array;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpl7hs_i.php:21\n\
    Stack trace:\n#0 /tmp/tmpcpl7hs_i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcpl7hs_i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi62euynh.php:20\n\
    Stack trace:\n#0 /tmp/tmpi62euynh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpi62euynh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // TODO: implement this method\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssdfgex9.php:21\n\
    Stack trace:\n#0 /tmp/tmpssdfgex9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpssdfgex9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return [];\n\
    \    }\n    $first = reset($array);\n    $last = end($array);\n    $odd = ($first\
    \ + $last) % 2 == 1;\n    $sorted = $array;\n    sort($sorted);\n    if ($odd)\
    \ {\n        return $sorted;\n    }\n    return array_reverse($sorted);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) return $array;\n    if (sizeof($array)\
    \ == 1) return $array;\n    if (sizeof($array) % 2 == 0) {\n        sort($array);\n\
    \        return array_reverse($array);\n    } else {\n        sort($array);\n\
    \        return $array;\n    }\n}\n\n$example_tests = [\n    [[]],\n    [[5]],\n\
    \    [[2, 4, 3, 0, 1, 5]],\n    [[2, 4, 3, 0, 1, 5, 6]],\n];\n\nforeach ($example_tests\
    \ as $example_test) {\n    print_r(sort_array($example_test[0]));\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 5\n    [1]\
    \ => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n    [5] => 0\n)\nArray\n(\n\
    \    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n    [6] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0oxzjc9.php:41\n\
    Stack trace:\n#0 /tmp/tmpf0oxzjc9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpf0oxzjc9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(!count($array)) return $array;\n    $x =\
    \ $array[0];\n    $y = end($array);\n    if(($x + $y) % 2 === 0) {\n        rsort($array);\n\
    \    }\n    else {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $start = $array[0];\n    $end = $array[count($array)\
    \ - 1];\n    $sum = $start + $end;\n    if ($sum % 2 == 0) {\n        return sort_descending($array);\n\
    \    } else {\n        return sort_ascending($array);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_descending()\
    \ in /tmp/tmpie9ajuxj.php:17\nStack trace:\n#0 /tmp/tmpie9ajuxj.php(24): sort_array(Array)\n\
    #1 /tmp/tmpie9ajuxj.php(28): candidate(Array)\n#2 /tmp/tmpie9ajuxj.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpie9ajuxj.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(empty($array)) {\n        return [];\n \
    \   }\n    $length = count($array);\n    if($length === 1) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[$length - 1];\n    $sum =\
    \ $first + $last;\n    $result = [];\n    if($sum % 2 !== 0) {\n        $result\
    \ = array_merge(sort_array(array_slice($array, 0, $length - 1)), $last);\n   \
    \ } else {\n        $result = array_merge($first, sort_array(array_slice($array,\
    \ 1, $length - 1)));\n    }\n    return $result;\n}\n\necho 'test 1' . PHP_EOL;\n\
    var_dump(sort_array([2, 4, 3, 0, 1, 5]));\necho 'test 2' . PHP_EOL;\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\necho 'test 3' . PHP_EOL;\nvar_dump(sort_array([]));\n\
    echo 'test 4' . PHP_EOL;\nvar_dump(sort_array([5]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "test 1\n\nWarning: array_merge(): Expected parameter 2 to be an array,\
    \ int given in /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, int given in /tmp/tmpszein16b.php on line 27\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, int given in /tmp/tmpszein16b.php\
    \ on line 27\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpszein16b.php on line 25\n\
    NULL\ntest 2\n\nWarning: array_merge(): Expected parameter 2 to be an array, int\
    \ given in /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, null given in /tmp/tmpszein16b.php on line 25\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, int given in /tmp/tmpszein16b.php\
    \ on line 27\n\nWarning: array_merge(): Expected parameter 1 to be an array, null\
    \ given in /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, int given in /tmp/tmpszein16b.php on line 27\n\n\
    Warning: array_merge(): Expected parameter 1 to be an array, int given in /tmp/tmpszein16b.php\
    \ on line 27\nNULL\ntest 3\narray(0) {\n}\ntest 4\narray(1) {\n  [0]=>\n  int(5)\n\
    }\n\nWarning: array_merge(): Expected parameter 2 to be an array, int given in\
    \ /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, int given in /tmp/tmpszein16b.php on line 27\n\nWarning: array_merge():\
    \ Expected parameter 1 to be an array, int given in /tmp/tmpszein16b.php on line\
    \ 27\n\nWarning: array_merge(): Expected parameter 1 to be an array, null given\
    \ in /tmp/tmpszein16b.php on line 25\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, null given in /tmp/tmpszein16b.php on line 25\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpszein16b.php:47\nStack trace:\n\
    #0 /tmp/tmpszein16b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpszein16b.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) {\n    return $array;\n\
    \  }\n  $sort = $array[0] + $array[count($array) - 1];\n  if ($sort % 2 == 0)\
    \ {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n\
    }\necho sort_array([2, 4, 3, 0, 1, 5]).\"\\n\";\necho sort_array([2, 4, 3, 0,\
    \ 1, 5, 6]).\"\\n\";\necho sort_array([2, 4, 3, 0, 1, 5, 6, 1, 12, 7, 3, 4, 5,\
    \ 7, 8, 6, 5, 7, 34, 25, 4, 7, 8, 6, 57, 34, 23, 45, 76, 8, 7, 4, 3, 2, 4, 5,\
    \ 6, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7,\
    \ 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6,\
    \ 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7,\
    \ 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6,\
    \ 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7,\
    \ 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8, 6, 5,\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphykk5ug6.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) === 0) {\n        return [];\n\
    \    }\n    elseif(count($array) === 1) {\n        return $array;\n    }\n   \
    \ else {\n        $sum = $array[0] + $array[count($array) - 1];\n        if($sum\
    \ % 2 === 0) {\n            rsort($array);\n            return $array;\n     \
    \   }\n        else {\n            sort($array);\n            return $array;\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $arr = [];\n    $arr2 = [];\n    $even= [];\n\
    \    $odd = [];\n    $sum = array_sum($array);\n    foreach ($array as $value)\
    \ {\n        if($value % 2 == 0) {\n            $even[] = $value;\n        } else\
    \ {\n            $odd[] = $value;\n        }\n    }\n    if($sum % 2 == 0) {\n\
    \        rsort($even);\n        sort($odd);\n        $arr = array_merge($even,\
    \ $odd);\n    } else {\n        sort($even);\n        rsort($odd);\n        $arr\
    \ = array_merge($even, $odd);\n    }\n    return $arr;\n}\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 2\n    [2] => 4\n    [3] => 6\n    [4]\
    \ => 5\n    [5] => 3\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpi6w4dj8o.php:44\nStack trace:\n#0 /tmp/tmpi6w4dj8o.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6w4dj8o.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) return [];\n  $sum = $array[0]\
    \ + end($array);\n  if ($sum % 2 === 0) {\n    rsort($array);\n  } else {\n  \
    \  sort($array);\n  }\n  return $array;\n}\n\nprint_r(sort_array([]));\nprint_r(sort_array([5]));\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0,\
    \ 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\nArray\n(\n\
    \    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5]\
    \ => 1\n    [6] => 0\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return [];\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = $array[0] + $array[count($array) - 1];\n\
    \  if($sum % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n\
    \  return $array;\n}\nprint_r(sort_array([5, 3, 2, 8, 1, 4]));\necho \"\\n\";\n\
    print_r(sort_array([5, 3, 1, 8, 0]));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 8\n)\n\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2] => 3\n\
    \    [3] => 5\n    [4] => 8\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $asc = ($array[0] + end($array)) % 2 === 0;\n\
    \  return sort($array, $asc);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8omql02h.php:22\n\
    Stack trace:\n#0 /tmp/tmp8omql02h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8omql02h.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $first = reset($array);\n  $last = end($array);\n\
    \  $odd = ($first + $last) % 2;\n  if ($odd == 0) {\n    sort($array);\n  } else\
    \ {\n    rsort($array);\n  }\n  return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqrihwuv.php:30\n\
    Stack trace:\n#0 /tmp/tmpiqrihwuv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpiqrihwuv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $length = count($array);\n  if ($length == 0)\
    \ {\n    return [];\n  }\n  if ($length == 1) {\n    return $array;\n  }\n  if\
    \ (($array[0] + $array[$length - 1]) % 2 == 0) {\n    rsort($array);\n  } else\
    \ {\n    sort($array);\n  }\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return $array;\n  }\n\
    \  if ($array[0] + end($array) % 2 === 0) {\n    rsort($array);\n  } else {\n\
    \    sort($array);\n  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_uo4ceh.php:32\n\
    Stack trace:\n#0 /tmp/tmpc_uo4ceh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc_uo4ceh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) return [];\n    $len = count($array);\n\
    \    if ($len == 1) return $array;\n    if ($len == 2) {\n        if (($array[0]\
    \ + $array[1]) % 2 == 0) {\n            return [$array[1], $array[0]];\n     \
    \   } else {\n            return $array;\n        }\n    }\n    $sortArray = [];\n\
    \    $before = [];\n    $after = [];\n    if ($len % 2 == 0) {\n        $num =\
    \ $len / 2;\n    } else {\n        $num = ($len - 1) / 2;\n    }\n    for ($i\
    \ = 0; $i < $num; $i++) {\n        $before[] = $array[$i];\n    }\n    for ($i\
    \ = $num; $i < $len; $i++) {\n        $after[] = $array[$i];\n    }\n    rsort($before);\n\
    \    rsort($after);\n    for ($i = 0; $i < $num; $i++) {\n        $sortArray[]\
    \ = $before[$i];\n        $sortArray[] = $after[$i];\n    }\n    if ($len % 2\
    \ == 1) {\n        $sortArray[] = $before[$num];\n    }\n    return $sortArray;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_03rvy_.php:56\n\
    Stack trace:\n#0 /tmp/tmpa_03rvy_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpa_03rvy_.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) == 0) {\n        return [];\n\
    \    }\n    $indices = array_keys($array);\n    $order = ($indices[0] + $indices[count($indices)\
    \ - 1]) % 2 ? SORT_ASC : SORT_DESC;\n    asort($array, $order);\n    return $array;\n\
    }\n\necho \"sort_array([]) => []: \";\n$test = sort_array([]);\nforeach ($test\
    \ as $i) {\n    echo $i . \", \";\n}\necho \"\\n\";\n\necho \"sort_array([5])\
    \ => [5]: \";\n$test = sort_array([5]);\nforeach ($test as $i) {\n    echo $i\
    \ . \", \";\n}\necho \"\\n\";\n\necho \"sort_array([2, 4, 3, 0, 1, 5]) => [0,\
    \ 1, 2, 3, 4, 5]: \";\n$test = sort_array([2, 4, 3, 0, 1, 5]);\nforeach ($test\
    \ as $i) {\n    echo $i . \", \";\n}\necho \"\\n\";\n\necho \"sort_array([2, 4,\
    \ 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]: \";\n$test = sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]);\nforeach ($test as $i) {\n    echo $i . \", \";\n}\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_array([]) => []: \nsort_array([5]) => [5]: 5, \nsort_array([2, 4,\
    \ 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]: 0, 1, 2, 3, 4, 5, \nsort_array([2, 4, 3,\
    \ 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]: 0, 1, 2, 3, 4, 5, 6, \n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpl1beog8p.php:56\nStack trace:\n\
    #0 /tmp/tmpl1beog8p.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpl1beog8p.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (sum($array) % 2 != 0) {\n        sort($array);\n\
    \    } else {\n        rsort($array);\n    }\n    return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum() in /tmp/tmp4_1uv5g2.php:13\n\
    Stack trace:\n#0 /tmp/tmp4_1uv5g2.php(21): sort_array(Array)\n#1 /tmp/tmp4_1uv5g2.php(25):\
    \ candidate(Array)\n#2 /tmp/tmp4_1uv5g2.php(34): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp4_1uv5g2.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $firstEl = $array[0];\n  $lastEl = $array[count($array)\
    \ - 1];\n  $sort = ($firstEl + $lastEl) % 2 === 0 ? true : false;\n  if($sort){\n\
    \    for($i = 0; $i < count($array); $i++){\n      for($j = 0; $j < count($array)\
    \ - 1; $j++){\n        if($array[$j] < $array[$j + 1]){\n          $temp = $array[$j];\n\
    \          $array[$j] = $array[$j + 1];\n          $array[$j + 1] = $temp;\n \
    \       }\n      }\n    }\n  }\n  return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5p7cr29f.php:36\n\
    Stack trace:\n#0 /tmp/tmp5p7cr29f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5p7cr29f.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn [];\n\t}\n\t\
    // for ($i = 0; $i < count($array); $i++) {\n\t// \tfor ($j = 0; $j < count($array)\
    \ - 1; $j++) {\n\t// \t\tif ($array[$j] > $array[$j + 1]) {\n\t// \t\t\t$tmp =\
    \ $array[$j];\n\t// \t\t\t$array[$j] = $array[$j + 1];\n\t// \t\t\t$array[$j +\
    \ 1] = $tmp;\n\t// \t\t}\n\t// \t}\n\t// }\n\t// return $array;\n\t//\n\tif (array_sum($array)\
    \ % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t}\n\treturn\
    \ $array;\n}\n\necho implode(', ', sort_array([2, 4, 3, 0, 1, 5, 6])) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 1, 2, 3, 4, 5, 6\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpz52jxwb9.php:44\nStack trace:\n#0 /tmp/tmpz52jxwb9.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz52jxwb9.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $arrLen = count($array);\n    if($arrLen ==\
    \ 0 || $arrLen == 1) {\n        return $array;\n    }\n    $even = ($array[0]\
    \ + $array[$arrLen - 1]) % 2 == 0;\n    for($i = 0; $i < $arrLen; $i++) {\n  \
    \      for($j = $i; $j < $arrLen; $j++) {\n            if($even) {\n         \
    \       if($array[$i] < $array[$j]) {\n                    $temp = $array[$i];\n\
    \                    $array[$i] = $array[$j];\n                    $array[$j]\
    \ = $temp;\n                }\n            } else {\n                if($array[$i]\
    \ > $array[$j]) {\n                    $temp = $array[$i];\n                 \
    \   $array[$i] = $array[$j];\n                    $array[$j] = $temp;\n      \
    \          }\n            }\n        }\n    }\n    return $array;\n}\n\n$arr1\
    \ = [];\n$arr2 = [5];\n$arr3 = [2, 4, 3, 0, 1, 5];\n$arr4 = [2, 4, 3, 0, 1, 5,\
    \ 6];\nprint_r(sort_array($arr1));\nprint_r(sort_array($arr2));\nprint_r(sort_array($arr3));\n\
    print_r(sort_array($arr4));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\nArray\n(\n\
    \    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5]\
    \ => 1\n    [6] => 0\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $odd = $even = [];\n    $sum = array_sum([$array[0],\
    \ $array[count($array) - 1]]);\n    for ($i = 0; $i < count($array); $i++) {\n\
    \        if ($array[$i] % 2 === 0) {\n            $even[] = $array[$i];\n    \
    \    } else {\n            $odd[] = $array[$i];\n        }\n    }\n    $even =\
    \ count($even) > 0 ? $even : [0];\n    $odd = count($odd) > 0 ? $odd : [0];\n\
    \    sort($even);\n    sort($odd);\n    if ($sum % 2 === 0) {\n        $even =\
    \ array_reverse($even);\n        $odd = array_reverse($odd);\n    }\n    $result\
    \ = [];\n    $j = 0;\n    $k = 0;\n    for ($i = 0; $i < count($array); $i++)\
    \ {\n        if ($array[$i] % 2 === 0) {\n            $result[] = $even[$j];\n\
    \            $j++;\n        } else {\n            $result[] = $odd[$k];\n    \
    \        $k++;\n        }\n    }\n    return $result;\n}\necho json_encode(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[6,4,5,2,3,1,0]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq865alm7.php:52\n\
    Stack trace:\n#0 /tmp/tmpq865alm7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpq865alm7.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$sum = $array[0] + $array[count($array) - 1];\n\
    \tif ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t\
    }\n\treturn $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = $array[0] + $array[count($array) - 1];\n\
    \  if ($sum % 2 == 0) {\n    sort($array);\n    return array_reverse($array);\n\
    \  } else {\n    sort($array);\n    return $array;\n  }\n}\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 4\n    [5] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $len = count($array);\n    if ($len < 2) {\n\
    \        return $array;\n    }\n    $odd = $array[0] + $array[$len - 1] & 1;\n\
    \    $desc = $odd ? false : true;\n    if ($desc) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\necho var_export(sort_array([]),\
    \ true), \"\\n\";\necho var_export(sort_array([5]), true), \"\\n\";\necho var_export(sort_array([2,\
    \ 4, 3, 0, 1, 5]), true), \"\\n\";\necho var_export(sort_array([2, 4, 3, 0, 1,\
    \ 5, 6]), true), \"\\n\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n)\narray (\n  0 => 5,\n)\narray (\n  0 => 0,\n  1 => 1,\n  2 =>\
    \ 2,\n  3 => 3,\n  4 => 4,\n  5 => 5,\n)\narray (\n  0 => 6,\n  1 => 5,\n  2 =>\
    \ 4,\n  3 => 3,\n  4 => 2,\n  5 => 1,\n  6 => 0,\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $array_length = count($array);\n  $sum = $array[0]\
    \ + $array[$array_length - 1];\n  $answer = [];\n  if ($sum % 2 === 0) {\n   \
    \ rsort($array);\n    foreach ($array as $value) {\n      array_push($answer,\
    \ $value);\n    }\n  } else {\n    sort($array);\n    foreach ($array as $value)\
    \ {\n      array_push($answer, $value);\n    }\n  }\n  return $answer;\n}\n\n\
    print_r(sort_array([2, 4, 3, 0, 1, 5]));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 4\n    [5] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) return $array;\n  $output\
    \ = $array;\n  $sum = $array[0] + end($array);\n  $desc = false;\n  if ($sum %\
    \ 2 == 0) $desc = true;\n  for ($i = 0; $i < count($output); $i++) {\n    for\
    \ ($j = $i + 1; $j < count($output); $j++) {\n      if ($desc) {\n        if ($output[$i]\
    \ < $output[$j]) {\n          $hold = $output[$i];\n          $output[$i] = $output[$j];\n\
    \          $output[$j] = $hold;\n        }\n      } else {\n        if ($output[$i]\
    \ > $output[$j]) {\n          $hold = $output[$i];\n          $output[$i] = $output[$j];\n\
    \          $output[$j] = $hold;\n        }\n      }\n    }\n  }\n  return $output;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif ($array === []) {\n\t\treturn [];\n\t}\n\t\
    $total = array_sum($array);\n\tif ($total % 2 === 0) {\n\t\trsort($array);\n\t\
    } else {\n\t\tsort($array);\n\t}\n\treturn $array;\n}\n\n$sample_array = [2, 4,\
    \ 3, 0, 1, 5];\necho \"Given the array \", json_encode($sample_array), \", \"\
    ,\n\t\"the result is \", json_encode(sort_array($sample_array)), \".\\n\";\n\n\
    $sample_array = [2, 4, 3, 0, 1, 5, 6];\necho \"Given the array \", json_encode($sample_array),\
    \ \", \",\n\t\"the result is \", json_encode(sort_array($sample_array)), \".\\\
    n\";\n\n$sample_array = [];\necho \"Given the array \", json_encode($sample_array),\
    \ \", \",\n\t\"the result is \", json_encode(sort_array($sample_array)), \".\\\
    n\";\n\n$sample_array = [5];\necho \"Given the array \", json_encode($sample_array),\
    \ \", \",\n\t\"the result is \", json_encode(sort_array($sample_array)), \".\\\
    n\";\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Given the array [2,4,3,0,1,5], the result is [0,1,2,3,4,5].\nGiven the\
    \ array [2,4,3,0,1,5,6], the result is [0,1,2,3,4,5,6].\nGiven the array [], the\
    \ result is [].\nGiven the array [5], the result is [5].\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcfrf4xjg.php:48\nStack trace:\n#0 /tmp/tmpcfrf4xjg.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcfrf4xjg.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    $asc = $sum % 2 == 0 ? true : false;\n    for ($i = 0; $i < count($array);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($array); $j++) {\n           \
    \ if ($asc) {\n                if ($array[$i] > $array[$j]) {\n              \
    \      $tmp = $array[$i];\n                    $array[$i] = $array[$j];\n    \
    \                $array[$j] = $tmp;\n                }\n            } else {\n\
    \                if ($array[$i] < $array[$j]) {\n                    $tmp = $array[$i];\n\
    \                    $array[$i] = $array[$j];\n                    $array[$j]\
    \ = $tmp;\n                }\n            }\n        }\n    }\n    return $array;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7zc02tz.php:41\n\
    Stack trace:\n#0 /tmp/tmpg7zc02tz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpg7zc02tz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $newArr = [];\n  $odd = [];\n  $even = [];\n\
    \  $result = [];\n  if (count($array) == 0 || count($array) == 1) {\n    return\
    \ $array;\n  } else {\n    $odd[] = $array[0];\n    $even[] = $array[count($array)\
    \ - 1];\n    for ($i = 1; $i < count($array) - 1; $i++) {\n      if ($array[$i]\
    \ % 2 == 0) {\n        $even[] = $array[$i];\n      } else {\n        $odd[] =\
    \ $array[$i];\n      }\n    }\n    rsort($even);\n    sort($odd);\n    for ($i\
    \ = 0; $i < count($even); $i++) {\n      $result[] = $even[$i];\n    }\n    for\
    \ ($i = 0; $i < count($odd); $i++) {\n      $result[] = $odd[$i];\n    }\n   \
    \ return $result;\n  }\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4g9uhcw.php:48\n\
    Stack trace:\n#0 /tmp/tmpr4g9uhcw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr4g9uhcw.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $length = count($array);\n  $first = $array[0];\n\
    \  $last = $array[$length - 1];\n  $sum = $first + $last;\n  if ($sum % 2 ===\
    \ 0) {\n    $array = sort_descending($array);\n  } else {\n    $array = sort_ascending($array);\n\
    \  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_descending()\
    \ in /tmp/tmp2couo5vk.php:18\nStack trace:\n#0 /tmp/tmp2couo5vk.php(26): sort_array(Array)\n\
    #1 /tmp/tmp2couo5vk.php(30): candidate(Array)\n#2 /tmp/tmp2couo5vk.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2couo5vk.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // write your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gk3vkoc.php:21\n\
    Stack trace:\n#0 /tmp/tmp6gk3vkoc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6gk3vkoc.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = $array[0] + $array[count($array) - 1];\n\
    \  if($sum % 2 === 0) {\n    rsort($array);\n  } else {\n    sort($array);\n \
    \ }\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $count = count($array);\n  $index = $count -\
    \ 1;\n  if(($array[0] + $array[$index]) % 2 === 0) {\n    rsort($array);\n  }\
    \ else {\n    sort($array);\n  }\n  return $array;\n}\n\nprint_r(sort_array([]));\n\
    print_r(sort_array([5]));\nprint_r(sort_array([2, 4, 3, 0, 1, 5]));\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\nArray\n(\n\
    \    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5]\
    \ => 1\n    [6] => 0\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$first = $array[0];\n\t$last = $array[count($array)\
    \ - 1];\n\t$sum = $first + $last;\n\tif($sum % 2 == 0) {\n\t\trsort($array);\n\
    \t} else {\n\t\tsort($array);\n\t}\n\treturn $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    return count($array) > 0 ?\n        $array[0]\
    \ + $array[count($array) - 1] % 2 ?\n            sort($array) :\n            rsort($array)\
    \ :\n        $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzela9cn1.php:26\n\
    Stack trace:\n#0 /tmp/tmpzela9cn1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzela9cn1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $array_len = count($array);\n  if ($array_len\
    \ == 0 || $array_len == 1) {\n    return $array;\n  }\n  $sum = $array[0] + $array[$array_len\
    \ - 1];\n  if ($sum % 2 == 0) {\n    return rsort($array);\n  } else {\n    return\
    \ sort($array);\n  }\n}\n\necho 'sort_array([]) => ';\nprint_r(sort_array([]));\n\
    echo '<br/>';\necho 'sort_array([5]) => ';\nprint_r(sort_array([5]));\necho '<br/>';\n\
    echo 'sort_array([2, 4, 3, 0, 1, 5]) => ';\nprint_r(sort_array([2, 4, 3, 0, 1,\
    \ 5]));\necho '<br/>';\necho 'sort_array([2, 4, 3, 0, 1, 5, 6]) => ';\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_array([]) => Array\n(\n)\n<br/>sort_array([5]) => Array\n(\n    [0]\
    \ => 5\n)\n<br/>sort_array([2, 4, 3, 0, 1, 5]) => 1<br/>sort_array([2, 4, 3, 0,\
    \ 1, 5, 6]) => 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6wip5n0.php:43\n\
    Stack trace:\n#0 /tmp/tmpx6wip5n0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpx6wip5n0.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(is_array($array) == false || count($array)\
    \ == 0){\n        return array();\n    }\n\n    $head = $array[0];\n    $tail\
    \ = $array[count($array) - 1];\n    $total = $head + $tail;\n    if($total % 2\
    \ == 0){\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $count = count($array);\n    $first = $array[0];\n\
    \    $last = $array[$count - 1];\n    $sum = $first + $last;\n    if ($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $count = count($array);\n    $sum = $array[0]\
    \ + $array[$count - 1];\n    if ($sum % 2 === 0) {\n        rsort($array);\n \
    \   } else {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $even = array();\n  $odd = array();\n  foreach\
    \ ($array as $value) {\n    if ($value % 2 == 0) {\n      $even[] = $value;\n\
    \    } else {\n      $odd[] = $value;\n    }\n  }\n  sort($even);\n  sort($odd);\n\
    \  $even = array_reverse($even);\n  $temp = array_merge($even, $odd);\n  foreach\
    \ ($temp as $k => $v) {\n    $array[$k] = $v;\n  }\n  return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0kuxn7z.php:38\n\
    Stack trace:\n#0 /tmp/tmpe0kuxn7z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpe0kuxn7z.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn [];\n\t}\n\n\
    \t$array = sort_array_based_on_index_sum($array);\n\n\treturn sort_array_in_ascending_or_descending_order($array);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array_based_on_index_sum()\
    \ in /tmp/tmpvvr9eih5.php:17\nStack trace:\n#0 /tmp/tmpvvr9eih5.php(23): sort_array(Array)\n\
    #1 /tmp/tmpvvr9eih5.php(28): candidate(Array)\n#2 /tmp/tmpvvr9eih5.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvvr9eih5.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    //coding and coding..\n    if (!$array) return\
    \ [];\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\nvar_dump(sort_array([]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn [];\n\t}\n\t\
    $sum = $array[0] + end($array);\n\t$comparator = $sum % 2 == 0 ? function($a,\
    \ $b) {\n\t\treturn $a < $b;\n\t} : function($a, $b) {\n\t\treturn $a > $b;\n\t\
    };\n\tusort($array, $comparator);\n\treturn $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $length = count($array);\n  $start = $array[0];\n\
    \  $end = $array[$length - 1];\n  $total = $start + $end;\n  if ($total % 2 ==\
    \ 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $even = [];\n  $odd = [];\n  $result = [];\n\
    \  $temp = null;\n  if(count($array) === 0) {\n    return $array;\n  }\n  foreach($array\
    \ as $index => $value) {\n    if(($index === 0 || $index === count($array) - 1)\
    \ && $value % 2 == 0) {\n      $even[] = $value;\n    } else if(($index === 0\
    \ || $index === count($array) - 1) && $value % 2 == 1) {\n      $odd[] = $value;\n\
    \    } else if($value % 2 == 0) {\n      $even[] = $value;\n    } else {\n   \
    \   $odd[] = $value;\n    }\n  }\n  if(count($even) !== 0) {\n    for($i = 0;\
    \ $i < count($even); $i++) {\n      for($j = $i + 1; $j < count($even); $j++)\
    \ {\n        if($even[$i] > $even[$j]) {\n          $temp = $even[$i];\n     \
    \     $even[$i] = $even[$j];\n          $even[$j] = $temp;\n        }\n      }\n\
    \    }\n  }\n  if(count($odd) !== 0) {\n    for($i = 0; $i < count($odd); $i++)\
    \ {\n      for($j = $i + 1; $j < count($odd); $j++) {\n        if($odd[$i] < $odd[$j])\
    \ {\n          $temp = $odd[$i];\n          $odd[$i] = $odd[$j];\n          $odd[$j]\
    \ = $temp;\n        }\n      }\n    }\n  }\n  $index = 0;\n  for($i = 0; $i <\
    \ count($even); $i++) {\n    $result[$index] = $even[$i];\n    $index++;\n  }\n\
    \  for($i = 0; $i < count($odd); $i++) {\n    $result[$index] = $odd[$i];\n  \
    \  $index++;\n  }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpezu7mnzj.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $first_index = $array[0];\n    $last_index\
    \ = $array[count($array) - 1];\n    $index_sum = $first_index + $last_index;\n\
    \    $sorted_array = $array;\n    sort($sorted_array);\n    if ($index_sum % 2\
    \ == 0) {\n        return array_reverse($sorted_array);\n    } else {\n      \
    \  return $sorted_array;\n    }\n}\necho var_dump(sort_array([2, 4, 3, 0, 1, 5]));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(5)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) == 0) return [];\n  $array_first_element\
    \ = $array[0];\n  $array_last_element = end($array);\n  if ($array_first_element\
    \ + $array_last_element % 2 == 0) {\n    asort($array);\n  } else {\n    arsort($array);\n\
    \  }\n  return $array;\n}\n\n$array = [2, 4, 3, 0, 1, 5];\n$sort_array = sort_array($array);\n\
    var_dump($sort_array);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(6) {\n  [5]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n \
    \ [0]=>\n  int(2)\n  [4]=>\n  int(1)\n  [3]=>\n  int(0)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxlud9w2e.php:34\nStack trace:\n#0 /tmp/tmpxlud9w2e.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxlud9w2e.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $result = [];\n    for ($i = 0; $i < count($array);\
    \ $i++) {\n        $result[$i] = $array[$i];\n    }\n    $sum = $array[0] + $array[count($array)\
    \ - 1];\n    if ($sum % 2 === 0) {\n        $result = my_sort($result, 1);\n \
    \   } else {\n        $result = my_sort($result, 0);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function my_sort() in\
    \ /tmp/tmpw8_lkzm7.php:19\nStack trace:\n#0 /tmp/tmpw8_lkzm7.php(27): sort_array(Array)\n\
    #1 /tmp/tmpw8_lkzm7.php(31): candidate(Array)\n#2 /tmp/tmpw8_lkzm7.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw8_lkzm7.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $size = count($array);\n  $result = array();\n\
    \  $position = 0;\n  if ($size == 0) return $result;\n  if ($size == 1) return\
    \ $array;\n  if ($array[0] + $array[$size - 1] % 2 == 0) {\n    $temp = 0;\n \
    \   while ($temp < $size - 1) {\n      $min = min($array);\n      $result[$position]\
    \ = $min;\n      $key = array_search($min, $array);\n      unset($array[$key]);\n\
    \      $position++;\n      $temp++;\n    }\n    $result[$position] = max($array);\n\
    \  } else {\n    $temp = 0;\n    while ($temp < $size - 1) {\n      $max = max($array);\n\
    \      $result[$position] = $max;\n      $key = array_search($max, $array);\n\
    \      unset($array[$key]);\n      $position++;\n      $temp++;\n    }\n    $result[$position]\
    \ = min($array);\n  }\n  return $result;\n}\n\necho implode(\", \", sort_array([2,\
    \ 4, 3, 0, 1, 5])) . PHP_EOL;\necho implode(\", \", sort_array([2, 4, 3, 0, 1,\
    \ 5, 6])) . PHP_EOL;\necho implode(\", \", sort_array([2, 4, 3, 0, 1, 5, 6, 7]))\
    \ . PHP_EOL;\necho implode(\", \", sort_array([1, 3, 2, 8, 5, 4])) . PHP_EOL;\n\
    echo implode(\", \", sort_array([1, 3, 2, 8, 5, 4, 11])) . PHP_EOL;\necho implode(\"\
    , \", sort_array([1, 3, 2, -8, -5, 4, 11])) . PHP_EOL;\necho implode(\", \", sort_array([1,\
    \ 3, 2, 8, -5, 4, 11])) . PHP_EOL;\necho implode(\", \", sort_array([1, 3, 2,\
    \ 8, 5\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa7u7gwem.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $count = count($array);\n  if ($count < 2) return\
    \ $array;\n  $mid = ceil($count / 2);\n  $temp = array_splice($array, $mid, 1)[0];\n\
    \  $left = $right = [];\n  foreach ($array as $v) {\n    if ($v < $temp) $left[]\
    \ = $v;\n    else $right[] = $v;\n  }\n  $sum = $left[0] + $right[count($right)\
    \ - 1];\n  if ($sum % 2 == 0) $array = array_merge(sort_array($right), (array)$temp,\
    \ sort_array($left));\n  else $array = array_merge(sort_array($left), (array)$temp,\
    \ sort_array($right));\n  return $array;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfs4u18n0.php:35\n\
    Stack trace:\n#0 /tmp/tmpfs4u18n0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfs4u18n0.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!$array) return [];\n    $odd_even = array_sum($array)\
    \ % 2;\n    $odd_even ? rsort($array) : sort($array);\n    return $array;\n}\n\
    \necho print_r(sort_array([]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrrik1k7.php:27\n\
    Stack trace:\n#0 /tmp/tmplrrik1k7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplrrik1k7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sorted = [];\n  if (count($array) === 0) {\n\
    \    return $sorted;\n  }\n  if (count($array) === 1) {\n    return $array;\n\
    \  }\n  if (count($array) === 2) {\n    if ($array[0] > $array[1]) {\n      $sorted[]\
    \ = $array[1];\n      $sorted[] = $array[0];\n    } else {\n      $sorted[] =\
    \ $array[0];\n      $sorted[] = $array[1];\n    }\n    return $sorted;\n  }\n\
    \  if (count($array) === 3) {\n    if ($array[0] + $array[2] % 2 === 0) {\n  \
    \    if ($array[0] > $array[1]) {\n        $sorted[] = $array[1];\n        $sorted[]\
    \ = $array[0];\n      } else {\n        $sorted[] = $array[0];\n        $sorted[]\
    \ = $array[1];\n      }\n      if ($array[1] > $array[2]) {\n        $sorted[]\
    \ = $array[2];\n      } else {\n        $sorted[] = $array[1];\n        $sorted[]\
    \ = $array[2];\n      }\n    } else {\n      if ($array[0] > $array[1]) {\n  \
    \      $sorted[] = $array[0];\n        $sorted[] = $array[1];\n      } else {\n\
    \        $sorted[] = $array[1];\n        $sorted[] = $array[0];\n      }\n   \
    \   if ($array[1] > $array[2]) {\n        $sorted[] = $array[1];\n        $sorted[]\
    \ = $array[2];\n      } else {\n        $sorted[] = $array[2];\n      }\n    }\n\
    \    return $sorted;\n  }\n  if ($array[0] + $array[count($array) - 1] % 2 ===\
    \ 0) {\n    $ascending = true;\n  } else {\n    $ascending = false;\n  }\n  $ascending\
    \ = true;\n \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptby6k1t0.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dpx4zut.php:23\n\
    Stack trace:\n#0 /tmp/tmp8dpx4zut.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8dpx4zut.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $firstIndex = $array[0];\n    $lastIndex =\
    \ $array[count($array) - 1];\n    $sum = $firstIndex + $lastIndex;\n    if ($sum\
    \ % 2 == 0) {\n        sort($array);\n    } else {\n        rsort($array);\n \
    \   }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcaqtrig.php:31\n\
    Stack trace:\n#0 /tmp/tmpfcaqtrig.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfcaqtrig.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\necho json_encode(sort_array([1,2,3,4,5,6,7]))\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[7,6,5,4,3,2,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (!$array) {\n    return [];\n  }\n  $i = 0;\n\
    \  $j = count($array) - 1;\n  $sorted = [];\n  if ($array[$i] + $array[$j] % 2\
    \ === 0) {\n    while ($i <= $j) {\n      $sorted[] = $array[$j];\n      $sorted[]\
    \ = $array[$i];\n      $i++;\n      $j--;\n    }\n  } else {\n    while ($i <=\
    \ $j) {\n      $sorted[] = $array[$i];\n      $sorted[] = $array[$j];\n      $i++;\n\
    \      $j--;\n    }\n  }\n  return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnly7cb_2.php:42\n\
    Stack trace:\n#0 /tmp/tmpnly7cb_2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnly7cb_2.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) == 0 || count($array) == 1)\
    \ {\n    return $array;\n  }\n  $sum = $array[0] + $array[count($array) - 1];\n\
    \  if ($sum % 2) {\n    sort($array);\n  } else {\n    rsort($array);\n  }\n \
    \ return $array;\n}\necho implode(', ', sort_array([2, 4, 3, 0, 1, 5])) . \"\\\
    n\";\necho implode(', ', sort_array([2, 4, 3, 0, 1, 5, 6])) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0, 1, 2, 3, 4, 5\n6, 5, 4, 3, 2, 1, 0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) <= 1) return $array;\n   \
    \ $f = $array[0];\n    $l = $array[count($array) - 1];\n    if(($f + $l) % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) <= 1) {\n    return $array;\n\
    \  }\n  $comp = function($a, $b) {\n    if ($a === $b) {\n      return 0;\n  \
    \  }\n    return $a < $b ? -1 : 1;\n  };\n  $array = sort($array, $comp);\n  $len\
    \ = count($array);\n  if (($array[0] + $array[$len - 1]) % 2 === 0) {\n    $array\
    \ = array_reverse($array);\n  }\n  return $array;\n}\n\n$arr = [2, 4, 3, 0, 1,\
    \ 5, 6];\nvar_dump(sort_array($arr));\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 2 to be int, object given in /tmp/tmp6_hoau2o.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6_hoau2o.php on line 23\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, bool given in /tmp/tmp6_hoau2o.php on line\
    \ 25\nNULL\n\nWarning: sort() expects parameter 2 to be int, object given in /tmp/tmp6_hoau2o.php\
    \ on line 22\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6_hoau2o.php on line 23\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, bool given in /tmp/tmp6_hoau2o.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_hoau2o.php:39\n\
    Stack trace:\n#0 /tmp/tmp6_hoau2o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6_hoau2o.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if ($sum % 2 == 0) {\n        for ($i = 0; $i < count($array); $i++) {\n\
    \            for ($j = 0; $j < count($array) - 1; $j++) {\n                if\
    \ ($array[$j] < $array[$j + 1]) {\n                    $temp = $array[$j];\n \
    \                   $array[$j] = $array[$j + 1];\n                    $array[$j\
    \ + 1] = $temp;\n                }\n            }\n        }\n    } else {\n \
    \       for ($i = 0; $i < count($array); $i++) {\n            for ($j = 0; $j\
    \ < count($array) - 1; $j++) {\n                if ($array[$j] > $array[$j + 1])\
    \ {\n                    $temp = $array[$j];\n                    $array[$j] =\
    \ $array[$j + 1];\n                    $array[$j + 1] = $temp;\n             \
    \   }\n            }\n        }\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if(count($array) <= 1) {\n    return $array;\n\
    \  }\n  $isEven = ($array[0] + $array[count($array) - 1]) % 2 === 0;\n  if($isEven)\
    \ {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n\
    }\n\n$array = [2, 4, 3, 0, 1, 5];\necho 'before: ', implode(', ', $array), PHP_EOL;\n\
    echo 'after: ', implode(', ', sort_array($array)), PHP_EOL;\n\n$array = [2, 4,\
    \ 3, 0, 1, 5, 6];\necho 'before: ', implode(', ', $array), PHP_EOL;\necho 'after:\
    \ ', implode(', ', sort_array($array)), PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "before: 2, 4, 3, 0, 1, 5\nafter: 0, 1, 2, 3, 4, 5\nbefore: 2, 4, 3, 0,\
    \ 1, 5, 6\nafter: 6, 5, 4, 3, 2, 1, 0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $len = count($array);\n  $odd = ($array[0] +\
    \ $array[$len - 1]) % 2 == 1;\n  $sorted = false;\n  while (!$sorted) {\n    $sorted\
    \ = true;\n    for ($i = 0; $i < $len - 1; $i++) {\n      if (($odd && $array[$i]\
    \ > $array[$i + 1]) || (!$odd && $array[$i] < $array[$i + 1])) {\n        $temp\
    \ = $array[$i];\n        $array[$i] = $array[$i + 1];\n        $array[$i + 1]\
    \ = $temp;\n        $sorted = false;\n      }\n    }\n  }\n  return $array;\n\
    }\necho \"<pre> sort_array([])\\r\\n\";\nvar_dump(sort_array([])); // => []\n\
    echo \"</pre>\";\necho \"<pre> sort_array([5])\\r\\n\";\nvar_dump(sort_array([5]));\
    \ // => [5]\necho \"</pre>\";\necho \"<pre> sort_array([2, 4, 3, 0, 1, 5])\\r\\\
    n\";\nvar_dump(sort_array([2, 4, 3, 0, 1, 5])); // => [0, 1, 2, 3, 4, 5]\necho\
    \ \"</pre>\";\necho \"<pre> sort_array([2, 4, 3, 0, 1, 5, 6])\\r\\n\";\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])); // => [6, 5, 4, 3, 2, 1, 0]\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre> sort_array([])\narray(0) {\n}\n</pre><pre> sort_array([5])\narray(1)\
    \ {\n  [0]=>\n  int(5)\n}\n</pre><pre> sort_array([2, 4, 3, 0, 1, 5])\narray(6)\
    \ {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n\
    \  [4]=>\n  int(4)\n  [5]=>\n  int(5)\n}\n</pre><pre> sort_array([2, 4, 3, 0,\
    \ 1, 5, 6])\narray(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n  [2]=>\n  int(4)\n\
    \  [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(0)\n\
    }\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return [];\n\
    \    }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first +\
    \ $last;\n    if ($sum % 2 === 0) {\n        return array_reverse($array);\n \
    \   }\n    return $array;\n}\n\necho sort_array([2, 4, 3, 0, 1, 5]) . PHP_EOL;\n\
    echo sort_array([2, 4, 3, 0, 1, 5, 6]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1k9n7oa.php:34\n\
    Stack trace:\n#0 /tmp/tmpk1k9n7oa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk1k9n7oa.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) return $array;\n  if (($array[0]\
    \ + $array[count($array) - 1]) % 2 === 0) {\n    rsort($array);\n  } else {\n\
    \    sort($array);\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    ;\n  $odd = true;\n  $even = false;\n  $a = [];\n  $b = [];\n  if(count($array)\
    \ == 0) return $array;\n  if(count($array) == 1) return $array;\n  $count = count($array);\n\
    \  if(($array[0] + $array[$count-1]) % 2 == 0) {\n    $odd = false;\n    $even\
    \ = true;\n  }\n  if($odd) {\n    $result = asort($array);\n  }\n  if($even) {\n\
    \    $result = arsort($array);\n  }\n  return $array;\n}\n\n$array = [2,4,3,0,1,5];\n\
    $result = sort_array($array);\nprint_r($result);\n\n$array = [2,4,3,0,1,5,6];\n\
    $result = sort_array($array);\nprint_r($result);\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 0\n    [4] => 1\n    [0] => 2\n    [2] => 3\n    [1]\
    \ => 4\n    [5] => 5\n)\nArray\n(\n    [6] => 6\n    [5] => 5\n    [1] => 4\n\
    \    [2] => 3\n    [0] => 2\n    [4] => 1\n    [3] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaebxfo6c.php:51\nStack trace:\n#0 /tmp/tmpaebxfo6c.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaebxfo6c.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) == 0) return [];\n  $first\
    \ = $array[0];\n  $last = $array[count($array) - 1];\n  $sum = $first + $last;\n\
    \  if ($sum % 2 != 0) {\n    sort($array);\n  } else {\n    rsort($array);\n \
    \ }\n  return $array;\n}\n\necho sort_array([2, 4, 3, 0, 1, 5]) . \"\\n\";\necho\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    $order = ($sum % 2) ? 'asc' : 'desc';\n    usort($array, function($a, $b)\
    \ use ($order) {\n        if ($order == 'asc') {\n            return $a > $b;\n\
    \        } else {\n            return $a < $b;\n        }\n    });\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$first_index = array_shift($array);\n\t$last_index\
    \ = array_pop($array);\n\tif ($first_index + $last_index % 2) {\n\t\treturn $array;\n\
    \t} else {\n\t\treturn array_reverse($array);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajfnujzu.php:27\n\
    Stack trace:\n#0 /tmp/tmpajfnujzu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpajfnujzu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (empty($array)) {\n\t\treturn [];\n\t}\n\n\
    \t$firstIndex = $array[0];\n\t$lastIndex = end($array);\n\t$sum = $firstIndex\
    \ + $lastIndex;\n\n\tif ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\t\
    sort($array);\n\t}\n\n\treturn $array;\n}\n\n$tests = [\n\t[\n\t\t\"in\" => [],\n\
    \t\t\"out\" => []\n\t],\n\t[\n\t\t\"in\" => [5],\n\t\t\"out\" => [5]\n\t],\n\t\
    [\n\t\t\"in\" => [2, 4, 3, 0, 1, 5],\n\t\t\"out\" => [0, 1, 2, 3, 4, 5]\n\t],\n\
    \t[\n\t\t\"in\" => [2, 4, 3, 0, 1, 5, 6],\n\t\t\"out\" => [6, 5, 4, 3, 2, 1, 0]\n\
    \t],\n\t[\n\t\t\"in\" => [3, 4, 2, 6, 5, 1, 0],\n\t\t\"out\" => [6, 5, 4, 3, 2,\
    \ 1, 0]\n\t],\n\t[\n\t\t\"in\" => [1, 0, 6, 5, 4, 3, 2],\n\t\t\"out\" => [6, 5,\
    \ 4, 3, 2, 1, 0]\n\t],\n\t[\n\t\t\"in\" => [1, 0, 2, 3, 4, 5, 6],\n\t\t\"out\"\
    \ => [6, 5, 4, 3, 2, 1, 0]\n\t],\n\t[\n\t\t\"in\" => [3, 2, 4, 1, 0, 5, 6],\n\t\
    \t\"out\" => [6, 5, 4, 3, 2, 1, 0]\n\t],\n\t[\n\t\t\"in\" => [0, 1, 2, 3, 4, 5,\
    \ 6],\n\t\t\"out\" => [6, 5, 4, 3, 2, 1, 0]\n\t],\n\t[\n\t\t\"in\" => [6, 5, 4,\
    \ 3\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpelmscirw.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (!$array) {\n        return $array;\n  \
    \  }\n    $newArray = [];\n    if (($array[0] + $array[count($array) - 1]) % 2\
    \ == 0) {\n        $newArray = array_reverse($array);\n    } else {\n        $newArray\
    \ = $array;\n    }\n    return $newArray;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewt8e8yw.php:32\n\
    Stack trace:\n#0 /tmp/tmpewt8e8yw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpewt8e8yw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $count = count($array);\n    $sorted = [];\n\
    \    $odds = [];\n    $evens = [];\n    if (empty($array)) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[$count - 1];\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if ($array[$i] % 2) {\n            $odds[] = $array[$i];\n\
    \        } else {\n            $evens[] = $array[$i];\n        }\n    }\n    sort($odds);\n\
    \    sort($evens);\n    if ($sum % 2) {\n        return array_merge($odds, $evens);\n\
    \    } else {\n        return array_merge(array_reverse($evens), array_reverse($odds));\n\
    \    }\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8vr9qwn.php:43\n\
    Stack trace:\n#0 /tmp/tmpn8vr9qwn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpn8vr9qwn.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    // if first and last index value is odd\n \
    \   if (($array[0] + $array[count($array) - 1]) % 2 == 1) {\n        return rsort($array);\n\
    \    }\n    // if first and last index value is even\n    else {\n        return\
    \ sort($array);\n    }\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_9tlfyp.php:27\n\
    Stack trace:\n#0 /tmp/tmpl_9tlfyp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl_9tlfyp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $oddOrEven = array_sum(array_slice($array,\
    \ 0, 2)) % 2;\n    if ($oddOrEven == 0) {\n        sort($array);\n    } else {\n\
    \        rsort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovgbw9_4.php:29\n\
    Stack trace:\n#0 /tmp/tmpovgbw9_4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpovgbw9_4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return [];\n  }\n\n\
    \  $first_value = $array[0];\n  $last_value = $array[count($array) - 1];\n  $sum\
    \ = $first_value + $last_value;\n\n  if ($sum % 2 === 0) {\n    rsort($array);\n\
    \  } else {\n    sort($array);\n  }\n\n  return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    $isEven = $sum % 2 === 0;\n    $array = $isEven ? array_reverse($array) :\
    \ $array;\n    for ($i = 0; $i < count($array); $i++) {\n        for ($j = $i\
    \ + 1; $j < count($array); $j++) {\n            if ($array[$i] > $array[$j]) {\n\
    \                $aux = $array[$i];\n                $array[$i] = $array[$j];\n\
    \                $array[$j] = $aux;\n            }\n        }\n    }\n    return\
    \ $array;\n}\nprint_r(sort_array([]));\necho \"\\n\";\nprint_r(sort_array([5]));\n\
    echo \"\\n\";\nprint_r(sort_array([2, 4, 3, 0, 1, 5]));\necho \"\\n\";\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n    [0] => 5\n)\n\nArray\n(\n    [0] => 0\n  \
    \  [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\n\nArray\n\
    (\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n    [6] => 6\n)\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpnmymzncj.php:43\nStack trace:\n#0 /tmp/tmpnmymzncj.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnmymzncj.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) return $array;\n  $odd = $even\
    \ = [];\n  foreach ($array as $key => $val) {\n    if (($key + $val) % 2 == 0)\
    \ {\n      $even[] = $val;\n    } else {\n      $odd[] = $val;\n    }\n  }\n \
    \ sort($odd);\n  rsort($even);\n  $odd = array_reverse($odd);\n  foreach ($array\
    \ as $key => $val) {\n    if (($key + $val) % 2 == 0) {\n      $array[$key] =\
    \ array_pop($even);\n    } else {\n      $array[$key] = array_pop($odd);\n   \
    \ }\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nnym84h.php:41\n\
    Stack trace:\n#0 /tmp/tmp2nnym84h.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2nnym84h.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmbinm12.php:22\n\
    Stack trace:\n#0 /tmp/tmprmbinm12.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprmbinm12.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) {\n    return $array;\n\
    \  }\n\n  $firstIndex = $array[0];\n  $lastIndex = $array[count($array) - 1];\n\
    \  $sum = $firstIndex + $lastIndex;\n\n  $odd = $sum % 2 == 1;\n\n  for ($i =\
    \ 0; $i < count($array); $i++) {\n    for ($j = $i + 1; $j < count($array); $j++)\
    \ {\n      if ($odd) {\n        if ($array[$i] > $array[$j]) {\n          $temp\
    \ = $array[$i];\n          $array[$i] = $array[$j];\n          $array[$j] = $temp;\n\
    \        }\n      } else {\n        if ($array[$i] < $array[$j]) {\n         \
    \ $temp = $array[$i];\n          $array[$i] = $array[$j];\n          $array[$j]\
    \ = $temp;\n        }\n      }\n    }\n  }\n\n  return $array;\n}\n\nprint_r(sort_array([]));\
    \ // []\nprint_r(sort_array([5])); // [5]\nprint_r(sort_array([2, 4, 3, 0, 1,\
    \ 5])); // [0, 1, 2, 3, 4, 5]\nprint_r(sort_array([2, 4, 3, 0, 1, 5, 6])); //\
    \ [6, 5, 4, 3, 2, 1, 0]\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\nArray\n(\n\
    \    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5]\
    \ => 1\n    [6] => 0\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    // Your code here.\n    $sum = $array[0] +\
    \ $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        // odd\n     \
    \   return $array;\n    } else {\n        rsort($array);\n        return $array;\n\
    \    }\n}\n\n$a = [2, 4, 3, 0, 1, 5];\nprint_r(sort_array($a));\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4]\
    \ => 1\n    [5] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyo5gc93.php:34\n\
    Stack trace:\n#0 /tmp/tmpxyo5gc93.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxyo5gc93.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) < 2) {\n        return $array;\n\
    \    }\n    $first_value = $array[0];\n    $last_value = $array[count($array)\
    \ - 1];\n    $sum = $first_value + $last_value;\n    if($sum % 2 == 0) {\n   \
    \     rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\t$first = reset($array);\n\t$last = end($array);\n\
    \t$sum = $first + $last;\n\tif ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else\
    \ {\n\t\tsort($array);\n\t}\n\treturn $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $n = count($array);\n  $sum = $array[0] + $array[$n-1];\n\
    \  if ($sum % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n \
    \ }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(count($array) < 2){\n        return $array;\n\
    \    }\n    $res = [];\n    $left = 0;\n    $right = count($array) - 1;\n    $sum\
    \ = $array[$left] + $array[$right];\n    $isOdd = $sum % 2 != 0;\n    while($left\
    \ <= $right){\n        if($isOdd){\n            $res[] = $array[$right];\n   \
    \         $right--;\n        }else{\n            $res[] = $array[$left];\n   \
    \         $left++;\n        }\n    }\n    return $res;\n}\n$array = [2, 4, 3,\
    \ 0, 1, 5, 6];\n$res = sort_array($array);\nvar_dump($res);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(7) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(0)\n  [4]=>\n  int(1)\n  [5]=>\n  int(5)\n  [6]=>\n  int(6)\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmplicptq6n.php:42\nStack\
    \ trace:\n#0 /tmp/tmplicptq6n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplicptq6n.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (count($array) <= 1) {\n        return $array;\n\
    \    }\n    $last_index = count($array) - 1;\n    $first_last_index_sum = $array[0]\
    \ + $array[$last_index];\n    $reversed = $first_last_index_sum % 2 == 0;\n  \
    \  // sort all values except first and last value,\n    // as if first and last\
    \ value are not in the array\n    $sorted_array = sort_array(array_slice($array,\
    \ 1, $last_index - 1));\n    // insert first and last value in sorted array in\
    \ correct position\n    $first_value_in_position = false;\n    $last_value_in_position\
    \ = false;\n    $first_value_position = 0;\n    $last_value_position = $last_index\
    \ - 1;\n    for ($i = 0; $i < count($sorted_array); $i++) {\n        if ($reversed)\
    \ {\n            if ($sorted_array[$i] < $array[0] && !$first_value_in_position)\
    \ {\n                $first_value_position = $i;\n                $first_value_in_position\
    \ = true;\n            }\n            if ($sorted_array[$i] < $array[$last_index]\
    \ && !$last_value_in_position) {\n                $last_value_position = $i;\n\
    \                $last_value_in_position = true;\n            }\n        } else\
    \ {\n            if ($sorted_array[$i] > $array[0] && !$first_value_in_position)\
    \ {\n                $first_value_position = $i;\n                $first_value_in_position\
    \ = true;\n            }\n            if ($sorted_array[$i] > $array[$last_index]\
    \ && !$last_value_in_position) {\n                $last_value_position = $i;\n\
    \                $last_value_in_position = true;\n            }\n        }\n \
    \   }\n    $sorted_array = insert_value_in_position($sorted_array, $array[0],\
    \ $first_value_position\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6bjlsd3z.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(empty($array)) return $array;\n    if(!isset($array[1]))\
    \ return $array;\n    $sum = array_sum(array_slice($array,0,2));\n    $order =\
    \ $sum % 2 == 0 ? SORT_DESC : SORT_ASC;\n    return $order == SORT_DESC ? array_reverse($array)\
    \ : $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafu4a73y.php:27\n\
    Stack trace:\n#0 /tmp/tmpafu4a73y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpafu4a73y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wo8p7d9.php:20\n\
    Stack trace:\n#0 /tmp/tmp_wo8p7d9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_wo8p7d9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $first = $array[0];\n  $last = end($array);\n\
    \  if (($first + $last) % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n\
    \  }\n  return $array;\n}\necho implode(sort_array([2, 4, 3, 0, 1, 5, 6]), \"\
    ,\") . PHP_EOL;\necho implode(sort_array([2, 4, 3, 0, 1, 5]), \",\") . PHP_EOL;\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6,5,4,3,2,1,0\n0,1,2,3,4,5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return $array;\n\
    \    }\n    $firstItem = $array[0];\n    $lastItem = $array[count($array) - 1];\n\
    \    $isEven = ($firstItem + $lastItem) % 2 === 0;\n    if ($isEven) {\n     \
    \   rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = array_sum($array);\n  if($sum % 2 == 0)\
    \ {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n\
    }\n\nprint_r(sort_array([])); // []\nprint_r(sort_array([5])); // [5]\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nprint_r(sort_array([2, 4, 3, 0, 1,\
    \ 5, 6])); // [6, 5, 4, 3, 2, 1, 0]\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n)\nArray\n(\n\
    \    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n    [6] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphms2m77i.php:34\n\
    Stack trace:\n#0 /tmp/tmphms2m77i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphms2m77i.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $result_array = [];\n  $odd_count = 0;\n  $even_count\
    \ = 0;\n  if(array_sum($array) % 2 === 0) {\n    $small_array = $array;\n    $large_array\
    \ = $array;\n    rsort($large_array);\n    sort($small_array);\n    $array_sum\
    \ = array_sum($array);\n    foreach($array as $number) {\n      if($number % 2\
    \ !== 0) {\n        $result_array[] = $large_array[$odd_count];\n        $odd_count++;\n\
    \      } else {\n        $result_array[] = $small_array[$even_count];\n      \
    \  $even_count++;\n      }\n    }\n  } else {\n    $small_array = $array;\n  \
    \  $large_array = $array;\n    rsort($large_array);\n    sort($small_array);\n\
    \    $array_sum = array_sum($array);\n    foreach($array as $number) {\n     \
    \ if($number % 2 === 0) {\n        $result_array[] = $large_array[$even_count];\n\
    \        $even_count++;\n      } else {\n        $result_array[] = $small_array[$odd_count];\n\
    \        $odd_count++;\n      }\n    }\n  }\n  return $result_array;\n}\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 0\n    [3] => 3\n    [4]\
    \ => 1\n    [5] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5fnxdjz.php:57\n\
    Stack trace:\n#0 /tmp/tmpi5fnxdjz.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpi5fnxdjz.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $len = count($array);\n    if ($len <= 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n   \
    \ if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nvar_dump(sort_array([]));\nvar_dump(sort_array([5]));\n\
    var_dump(sort_array([2, 4, 3, 0, 1, 5]));\nvar_dump(sort_array([2, 4, 3, 0, 1,\
    \ 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(1) {\n  [0]=>\n  int(5)\n}\narray(6) {\n  [0]=>\n\
    \  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n  [5]=>\n  int(5)\n}\narray(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n\
    \  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n\
    \  [6]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return $array;\n\
    \    }\n    $array1 = $array;\n    $array2 = $array;\n    $sum = $array[0] + end($array);\n\
    \    if ($sum % 2 == 0) {\n        rsort($array1);\n        return $array1;\n\
    \    } else {\n        sort($array2);\n        return $array2;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(!$array) return $array;\n    $sum = $array[0]\
    \ + end($array);\n    usort($array, function($a, $b) use ($sum) {\n        if($sum\
    \ % 2 == 0) return $b <=> $a;\n        return $a <=> $b;\n    });\n    return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (array_sum($array) % 2 == 0) {\n    rsort($array);\n\
    \  } else {\n    sort($array);\n  }\n  return $array;\n}\n\necho '<pre>';\nvar_dump(sort_array([]));\n\
    var_dump(sort_array([5]));\nvar_dump(sort_array([2, 4, 3, 0, 1, 5]));\nvar_dump(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(0) {\n}\narray(1) {\n  [0]=>\n  int(5)\n}\narray(6) {\n  [0]=>\n\
    \  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n  [5]=>\n  int(5)\n}\narray(7) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n\
    \  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(5)\n\
    \  [6]=>\n  int(6)\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp5nidh6d9.php:35\nStack trace:\n#0 /tmp/tmp5nidh6d9.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5nidh6d9.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $sum = $array[0] + end($array);\n  if($sum %\
    \ 2 == 0) {\n    arsort($array);\n  } else {\n    asort($array);\n  }\n  return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0j5pd1f3.php:28\n\
    Stack trace:\n#0 /tmp/tmp0j5pd1f3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0j5pd1f3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(empty($array)) {\n        return $array;\n\
    \    }\n\n    $index = count($array) - 1;\n    $even = ($array[0] + $array[$index])\
    \ % 2 == 0;\n\n    for($i = 0; $i < $index; $i++) {\n        for($j = $i + 1;\
    \ $j <= $index; $j++) {\n            if($even && $array[$i] < $array[$j]) {\n\
    \                $temp = $array[$i];\n                $array[$i] = $array[$j];\n\
    \                $array[$j] = $temp;\n            } else if (!$even && $array[$i]\
    \ > $array[$j]) {\n                $temp = $array[$i];\n                $array[$i]\
    \ = $array[$j];\n                $array[$j] = $temp;\n            }\n        }\n\
    \    }\n\n    return $array;\n}\n\n$test = [2, 4, 3, 0, 1, 5];\necho '<pre>';\n\
    print_r(sort_array($test));\necho '</pre>';\n\n$test = [2, 4, 3, 0, 1, 5, 6];\n\
    echo '<pre>';\nprint_r(sort_array($test));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 4\n    [5] => 5\n)\n</pre><pre>Array\n(\n    [0] => 6\n    [1] =>\
    \ 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n\
    </pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if(sizeof($array) == 0 || sizeof($array) ==\
    \ 1) {\n        return $array;\n    }\n\n    $sum = $array[0] + $array[sizeof($array)\
    \ - 1];\n    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n     \
    \   sort($array);\n    }\n\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    if (empty($array)) {\n        return [];\n\
    \    }\n    $sum = array_sum($array);\n    if ($sum % 2) {\n        sort($array);\n\
    \    } else {\n        rsort($array);\n    }\n    return $array;\n}\nvar_dump(sort_array([5]));\n\
    var_dump(sort_array([2, 4, 3, 0, 1, 5]));\nvar_dump(sort_array([2, 4, 3, 0, 1,\
    \ 5, 6]));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  int(5)\n}\narray(6) {\n  [0]=>\n  int(0)\n  [1]=>\n\
    \  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n\
    \  int(5)\n}\narray(7) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(5)\n  [6]=>\n  int(6)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a2f5ydi.php:35\n\
    Stack trace:\n#0 /tmp/tmp5a2f5ydi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5a2f5ydi.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n\tif (count($array) === 0) return $array;\n\tif\
    \ ($array[0] % 2 !== 0 && $array[count($array) - 1] % 2 !== 0) {\n\t\tsort($array);\n\
    \t} else {\n\t\trsort($array);\n\t}\n\treturn $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjbgfvv2.php:29\n\
    Stack trace:\n#0 /tmp/tmpmjbgfvv2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmjbgfvv2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $result = [];\n    for ($i = 0; $i < count($array);\
    \ $i++) {\n        $result[$i] = $array[$i];\n    }\n    if (count($array) ==\
    \ 0) {\n        return $result;\n    }\n    if (count($array) == 1) {\n      \
    \  return $result;\n    }\n    if (($array[0] + $array[count($array) - 1]) % 2\
    \ != 0) {\n        $result = sort_array_asc($result);\n    } else {\n        $result\
    \ = sort_array_desc($result);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array_asc()\
    \ in /tmp/tmpv3a5nzgo.php:24\nStack trace:\n#0 /tmp/tmpv3a5nzgo.php(32): sort_array(Array)\n\
    #1 /tmp/tmpv3a5nzgo.php(38): candidate(Array)\n#2 /tmp/tmpv3a5nzgo.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv3a5nzgo.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (empty($array)) {\n    return [];\n  }\n \
    \ if (count($array) === 1) {\n    return $array;\n  }\n  $first = array_shift($array);\n\
    \  $last = array_pop($array);\n  $sum = $first + $last;\n  $odd = $sum % 2;\n\
    \  $newArray = [$first, $last];\n  $order = 'A';\n  if ($odd === 0) {\n    $order\
    \ = 'D';\n  }\n  return array_merge($newArray, sort_array($array), $order);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 3 to be an array, string given\
    \ in /tmp/tmpiw447262.php on line 28\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpiw447262.php on line 28\n\nWarning:\
    \ array_merge(): Expected parameter 2 to be an array, null given in /tmp/tmpiw447262.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw447262.php:38\n\
    Stack trace:\n#0 /tmp/tmpiw447262.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpiw447262.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) == 0 || count($array) == 1)\
    \ {\n    return $array;\n  }\n  $first = $array[0];\n  $last = $array[count($array)\
    \ - 1];\n  $sum = $first + $last;\n  if ($sum % 2 == 0) {\n    rsort($array);\n\
    \  } else {\n    sort($array);\n  }\n  return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $newArray = [];\n    $first = $array[0];\n\
    \    $last = end($array);\n    $sum = $first + $last;\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\nprint_r(sort_array([5, 3, 2, 8, 1, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 8\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $first_and_last_sum = $array[0] + end($array);\n\
    \  if($first_and_last_sum % 2 === 0) {\n    rsort($array);\n  } else {\n    sort($array);\n\
    \  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  if (count($array) < 2) return $array;\n  if (($array[0]\
    \ + $array[count($array) - 1]) % 2 === 0) {\n    rsort($array);\n  } else {\n\
    \    sort($array);\n  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $odd_count = 0;\n    $even_count = 0;\n   \
    \ $odd_array = [];\n    $even_array = [];\n    $new_array = [];\n    $sum = $array[0]\
    \ + end($array);\n    foreach ($array as $value) {\n        if ($value % 2 ===\
    \ 0) {\n            $even_array[] = $value;\n            $even_count++;\n    \
    \    } else {\n            $odd_array[] = $value;\n            $odd_count++;\n\
    \        }\n    }\n    if ($sum % 2 === 0) {\n        rsort($even_array);\n  \
    \      rsort($odd_array);\n    } else {\n        sort($even_array);\n        sort($odd_array);\n\
    \    }\n    for ($i = 0; $i < $even_count; $i++) {\n        $new_array[] = $even_array[$i];\n\
    \    }\n    for ($i = 0; $i < $odd_count; $i++) {\n        $new_array[] = $odd_array[$i];\n\
    \    }\n    return $new_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5q0kkvz.php:51\n\
    Stack trace:\n#0 /tmp/tmpj5q0kkvz.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpj5q0kkvz.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n  $start = $array[0];\n  $end = end($array);\n\
    \  $sum = $start + $end;\n  if($sum % 2 === 0) {\n    rsort($array);\n  } else\
    \ {\n    sort($array);\n  }\n  return $array;\n}\necho '<pre>';\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\necho '</pre>';\necho '<pre>';\nprint_r(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 4\n    [5] => 5\n)\n</pre><pre>Array\n(\n    [0] => 6\n    [1] =>\
    \ 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n\
    </pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array($array) {\n    $sum = $array[0] + end($array);\n    if ($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\n$cases = [\n    [],\n    [5],\n    [2, 4, 3, 0,\
    \ 1, 5],\n    [2, 4, 3, 0, 1, 5, 6],\n];\n\nforeach ($cases as $case) {\n    $result\
    \ = sort_array($case);\n    print implode(', ', $result) . PHP_EOL;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n5\n0, 1, 2, 3, 4, 5\n6, 5, 4, 3, 2, 1, 0\n"
  stderr: ''
  exit_code: 0
  status: OK
