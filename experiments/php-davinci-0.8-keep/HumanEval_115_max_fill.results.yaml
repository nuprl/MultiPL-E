name: HumanEval_115_max_fill
language: php
results:
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $result = 0;\n\
    \    $wells = count($grid);\n    $length = count($grid[0]);\n    $buckets = array_fill(0,\
    \ $wells, $capacity);\n    for ($well = 0; $well < $wells; $well++) {\n      \
    \  for ($unit = 0; $unit < $length; $unit++) {\n            if ($grid[$well][$unit]\
    \ === 1) {\n                $buckets[$well]--;\n                $result++;\n \
    \           }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnws1fit.php:50\n\
    Stack trace:\n#0 /tmp/tmppnws1fit.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppnws1fit.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (!is_array($grid)\
    \ || count($grid) < 1 || !is_array($grid[0]) || count($grid[0]) < 1) { return\
    \ -1; }\n    $grid_height = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    // fill the first row to capacity\n    $actions = 0;\n    for ($j=0; $j<$grid_width;\
    \ $j++) {\n        $actions += ($grid[0][$j] == 1) ? 1 : 0;\n    }\n    // fill\
    \ each additional row based on the row above it\n    for ($i=1; $i<$grid_height;\
    \ $i++) {\n        for ($j=0; $j<$grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $fill = min($capacity, $grid[$i-1][$j]);\n        \
    \        $grid[$i][$j] -= $fill;\n                $grid[$i-1][$j] -= $fill;\n\
    \                $actions += $fill;\n            }\n        }\n    }\n    return\
    \ $actions;\n}\n$test_arrays = [\n    [\n        'grid' => [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]],\n        'capacity' => 1,\n        'expected' => 6\n    ],\n   \
    \ [\n        'grid' => [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\n       \
    \ 'capacity' => 2,\n        'expected' => 5\n    ],\n    [\n        'grid' =>\
    \ [[0,0,0], [0,0,0]],\n        'capacity' => 5,\n        'expected' => 0\n   \
    \ ],\n    [\n        'grid' => [[0,0,0], [0,0,0]],\n        'capacity' => 1,\n\
    \        'expected' => 0\n    ],\n    [\n        'grid' => [[0,0,0], [0,0,0]],\n\
    \        'capacity\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp413drre3.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_max = array_fill(0,\
    \ count($grid), 0);\n    for ($i = 0; $i < count($grid); $i++) {\n        $row_max[$i]\
    \ = max($grid[$i]);\n    }\n    $max = 0;\n    for ($i = 0; $i < count($row_max);\
    \ $i++) {\n        $max = max($max, $row_max[$i]);\n    }\n    $result = $max\
    \ * count($grid);\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yst0usg.php:46\n\
    Stack trace:\n#0 /tmp/tmp3yst0usg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3yst0usg.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if ($capacity\
    \ == 0) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 0; $i < count($grid);\
    \ $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if\
    \ ($grid[$i][$j] > 0) {\n                $count++;\n                $grid[$i][$j]\
    \ -= $capacity;\n                $grid[$i][$j] = $grid[$i][$j] < 0 ? 0 : $grid[$i][$j];\n\
    \            }\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73kinptn.php:51\n\
    Stack trace:\n#0 /tmp/tmp73kinptn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp73kinptn.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $res = 0;\n\
    \    $wells = 0;\n    foreach ($grid as $row) {\n        $wells += max($row);\n\
    \    }\n    $res = floor($wells / $capacity);\n    if ($wells % $capacity) {\n\
    \        $res++;\n    }\n    return $res;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8mge_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmpt8mge_2s.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpt8mge_2s.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_per_column = $max_per_row = [];\n    for\
    \ ($r = 0; $r < $rows; $r++) {\n        $max_per_row[$r] = 0;\n        for ($c\
    \ = 0; $c < $cols; $c++) {\n            $max_per_row[$r] = max($max_per_row[$r],\
    \ $grid[$r][$c]);\n            $max_per_column[$c] = $max_per_column[$c] ?? 0;\n\
    \            $max_per_column[$c] = max($max_per_column[$c], $grid[$r][$c]);\n\
    \        }\n    }\n    $fill_count = 0;\n    for ($r = 0; $r < $rows; $r++) {\n\
    \        $fill_count += $max_per_row[$r];\n    }\n    for ($c = 0; $c < $cols;\
    \ $c++) {\n        $fill_count += $max_per_column[$c];\n    }\n    $fill_count\
    \ -= $capacity * $rows * $cols;\n    return $fill_count;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ll7ojiw.php:56\n\
    Stack trace:\n#0 /tmp/tmp5ll7ojiw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5ll7ojiw.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // itearte over\
    \ the rows, and put water into the wells\n    // increment a counter for every\
    \ time the bucket capacity is exceeded\n    $count = 0;\n    foreach ($grid as\
    \ $row) {\n        $row_count = 0;\n        foreach ($row as $well) {\n      \
    \      if ($well == 1) {\n                $row_count++;\n            }\n     \
    \       if ($row_count > $capacity) {\n                $count++;\n           \
    \     $row_count = 0;\n            }\n        }\n    }\n    return $count;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fzteopg.php:52\n\
    Stack trace:\n#0 /tmp/tmp2fzteopg.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2fzteopg.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // max fill\
    \ rate is 1\n    $count = 0;\n    $capacity_remaining = $capacity;\n    for ($i\
    \ = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            $capacity_remaining -= $grid[$i][$j];\n            if ($capacity_remaining\
    \ < 0) {\n                $count++;\n                $capacity_remaining = $capacity\
    \ - $grid[$i][$j];\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]],\
    \ 5) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkma1s400.php:52\n\
    Stack trace:\n#0 /tmp/tmpkma1s400.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkma1s400.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $fill = 0;\n\
    \    foreach ($grid as $i => $row) {\n        $fill += max(0, max($row) - $capacity);\n\
    \    }\n    return $fill;\n}\n\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54u9b22_.php:42\n\
    Stack trace:\n#0 /tmp/tmp54u9b22_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp54u9b22_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // fill each\
    \ well to the brim\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n\
    \    for ($r = 0; $r < $num_rows; $r++) {\n        for ($c = 0; $c < $num_cols;\
    \ $c++) {\n            if ($grid[$r][$c] > 0) {\n                $grid[$r][$c]\
    \ = $capacity;\n            }\n        }\n    }\n    // now we have to empty the\
    \ wells\n    // take off the top bucket from any well that is filled to the brim\n\
    \    // and pour it into the next well to the right, if that well has space for\
    \ it\n    // if the next well to the right is already filled to the brim, \n \
    \   // move to the next column, and so on\n    // if no wells have space, stop\n\
    \    $num_empties = 0;\n    for ($r = 0; $r < $num_rows; $r++) {\n        for\
    \ ($c = 0; $c < $num_cols; $c++) {\n            if ($grid[$r][$c] == $capacity)\
    \ {\n                $num_empties++;\n                $grid[$r][$c] = 0;\n   \
    \             $curr_row = $r;\n                $curr_col = $c;\n             \
    \   while ($curr_col < $num_cols) {\n                    if ($grid[$curr_row][$curr_col]\
    \ == $capacity) {\n                        $curr_col++;\n                    }\
    \ else {\n                        $grid[$curr_row][$curr_col]++;\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return $num_empties;\n}\necho max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2) . PHP_EOL;\necho max_\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsfme7081.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    for ($row =\
    \ 0; $row < count($grid); $row++) {\n        for ($col = 0; $col < count($grid[$row]);\
    \ $col++) {\n            if ($grid[$row][$col] == 1) {\n                $grid[$row][$col]\
    \ = $capacity;\n            }\n        }\n    }\n    return $grid;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i51_qgt.php:44\n\
    Stack trace:\n#0 /tmp/tmp0i51_qgt.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0i51_qgt.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $col_count =\
    \ count($grid[0]);\n    $row_count = count($grid);\n    $max_row_depth = array_fill(0,\
    \ $col_count, 0);\n    $max_depth = 0;\n    $bucket_drops = 0;\n    $drop_count\
    \ = 0;\n    $lowest_depth = $capacity;\n    $lowest_row = 0;\n    while($drop_count\
    \ < $row_count) {\n        $bucket_drops++;\n        $lowest_depth = $capacity;\n\
    \        for($row = 0; $row < $row_count; $row++) {\n            for($col = 0;\
    \ $col < $col_count; $col++) {\n                if($grid[$row][$col] == 1) {\n\
    \                    $max_row_depth[$col]++;\n                    if($max_row_depth[$col]\
    \ > $max_depth) {\n                        $max_depth = $max_row_depth[$col];\n\
    \                    }\n                    if($max_row_depth[$col] <= $lowest_depth)\
    \ {\n                        $lowest_depth = $max_row_depth[$col];\n         \
    \               $lowest_row = $row;\n                    }\n                }\n\
    \            }\n        }\n        $drop_count = 0;\n        for($row = 0; $row\
    \ < $row_count; $row++) {\n            if($max_row_depth[$row] == $lowest_depth)\
    \ {\n                $drop_count++;\n                $max_row_depth[$row] = 0;\n\
    \            }\n        }\n    }\n    return $bucket_drops;\n}\n$grid = [\n  \
    \  [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity = 1;\n$ret\
    \ = max_fill($grid, $bucket_capacity);\nvar_dump($ret);\n$grid = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpem84k_33.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $times = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($col = 0; $col\
    \ < $cols; $col++) {\n        $level = $capacity;\n        for ($row = 0; $row\
    \ < $rows; $row++) {\n            $level -= $grid[$row][$col];\n            if\
    \ ($level < 0) {\n                $times += abs($level);\n                $level\
    \ = 0;\n            }\n        }\n    }\n    return $times;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe00fy0e7.php:50\n\
    Stack trace:\n#0 /tmp/tmpe00fy0e7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpe00fy0e7.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $width = count($grid[0]);\n\
    \    $heigth = count($grid);\n    // Calculate the height of the water in the\
    \ row.\n    $max_h = array_fill(0, $width, 0);\n    for ($j = 0; $j < $width;\
    \ $j++) {\n        for ($i = 0; $i < $heigth; $i++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_h[$j] = $i;\n            }\n        }\n    }\n\
    \    // Return the min fill height.\n    $min_h = min($max_h);\n    return $capacity\
    \ * count(array_filter($max_h, function($x) use ($min_h) {\n        return $x\
    \ > $min_h;\n    }));\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\
    \ // 6\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); // 5\n\
    echo max_fill([[0,0,0], [0,0,0]], 5); // 0\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "060\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej6u75fa.php:55\n\
    Stack trace:\n#0 /tmp/tmpej6u75fa.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpej6u75fa.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // body of the\
    \ function\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uhfl8_w.php:37\n\
    Stack trace:\n#0 /tmp/tmp2uhfl8_w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2uhfl8_w.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $height = count($grid);\n\
    \    $width = count($grid[0]);\n    $max_units = 0;\n    for ($i=0; $i<$height;\
    \ $i++) {\n        for ($j=0; $j<$width; $j++) {\n            $max_units = max($max_units,\
    \ max($grid[$i][$j], $capacity - $grid[$i][$j]));\n        }\n    }\n    return\
    \ $max_units;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o_m9755.php:45\n\
    Stack trace:\n#0 /tmp/tmp4o_m9755.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4o_m9755.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $full_fill = 0;\n    for ($j = 0; $j < $m; $j++)\
    \ {\n        $fill = 0;\n        for ($i = 0; $i < $n; $i++) {\n            $fill\
    \ += $grid[$i][$j];\n            if ($fill > $capacity) {\n                return\
    \ -1;\n            }\n        }\n        $full_fill += $fill;\n    }\n    return\
    \ $full_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphil71_q2.php:50\n\
    Stack trace:\n#0 /tmp/tmphil71_q2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmphil71_q2.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // count all\
    \ wells that have water\n    $sum = 0;\n    for ($i = 0; $i < count($grid); $i++)\
    \ {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $sum++;\n            }\n        }\n    }\n    // if\
    \ all wells are empty\n    if ($sum === 0) {\n        return 0;\n    }\n    //\
    \ if we need to empty all wells, we need to lower the bucket once for each well\n\
    \    if ($sum === count($grid) * count($grid[0])) {\n        return count($grid);\n\
    \    }\n    // else, the number of lowers is the number of wells divided by the\
    \ bucket capacity,\n    // we need to ceil this number to account for the remaining\
    \ wells\n    return ceil($sum / $capacity);\n}\n$grid = [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity) . \"\\n\";\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9bam73_.php:65\n\
    Stack trace:\n#0 /tmp/tmpc9bam73_.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpc9bam73_.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // $N = number\
    \ of wells\n    // $M = capacity of buckets\n    // $Q = wells with 0 water\n\
    \    // $P = wells with 1 water\n    // $R = wells with M water\n    // $S = number\
    \ of times you need to lower the buckets\n    // $L = $S % $M\n    // result:\
    \ $S\n    // $S = ($Q*$M + $P + $R) / $M\n    // we know that: $S = $Q + $P/M\
    \ + $R\n    // => $S = $Q + $P/$M + $R\n\n    // we can use the map function here\
    \ to obtain Q, P and R\n    // the map function generates a new array consisting\
    \ of the returned values by the callable function\n    // we can use the number_format()\
    \ function to round up to the nearest integer\n    // we can use the array_sum()\
    \ function to add up all elements of an array\n    // https://www.php.net/manual/en/function.map.php\n\
    \    // https://www.php.net/manual/en/function.number-format.php\n    // https://www.php.net/manual/en/function.array-sum.php\n\
    \    // for example:\n    // $grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n\
    \    // $map = array_map(function($row) {\n    //     return array_sum($row);\n\
    \    // }, $grid);\n    // print_r($map);\n    // Array\n    // (\n    //    \
    \ [0] => 1\n    //     [1] => 1\n    //     [2] => 4\n    // )\n    // Q = $map.count(0)\
    \ = 0\n    // P = $map.count(1) = 2\n    // R = $map.count(4) = 1\n    // S =\
    \ ($Q * $M + $P + $R) / $M = (0 * 1 + 2 + 1) / 1 = 3\n    $map = array_map(function($row)\
    \ {\n        return array_sum($row);\n    }, $grid);\n    $Q\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvji7xq7p.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $well_level = array_fill(0, $n, 0);\n    $bucket_level = 0;\n    $pouring_time\
    \ = 0;\n    $time_to_empty_well = 0;\n    for ($well_idx = 0; $well_idx < $n;\
    \ $well_idx++) {\n        $time_to_empty_well = $well_level[$well_idx] / $capacity;\n\
    \        if ($time_to_empty_well > $pouring_time) {\n            $pouring_time\
    \ = $time_to_empty_well;\n        }\n        if ($well_level[$well_idx] > 0) {\n\
    \            $bucket_level += $capacity;\n            $pouring_time += 1;\n  \
    \      }\n        $bucket_level -= $grid[$well_idx];\n        $well_level[$well_idx]\
    \ = $bucket_level;\n        $bucket_level = 0;\n    }\n    return $pouring_time;\n\
    }\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$capacity = 1;\n\
    echo max_fill($grid, $capacity) . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n\
    \    [1,1,1,1],\n    [0,1,1,1]\n];\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [\n    [0,0,0],\n    [0,0,0]\n];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp2r6dbgie.php:44\n\
    Stack trace:\n#0 /tmp/tmp2r6dbgie.php(56): max_fill(Array, 1)\n#1 {main}\n  thrown\
    \ in /tmp/tmp2r6dbgie.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $ret = 0;\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        $ret += fill_row($grid[$i],\
    \ $capacity);\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n  \
    \  return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fill_row() in\
    \ /tmp/tmp_sm01pyh.php:32\nStack trace:\n#0 /tmp/tmp_sm01pyh.php(37): max_fill(Array,\
    \ 1)\n#1 /tmp/tmp_sm01pyh.php(41): candidate(Array, 1)\n#2 /tmp/tmp_sm01pyh.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp_sm01pyh.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = array_map(function($row)\
    \ { return max($row); }, $grid);\n    $fill = array_sum($max);\n    // minimum\
    \ number of movements to fill the largest well\n    $min_movements = ceil($fill\
    \ / $capacity);\n    return $min_movements;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4gr8xyt.php:41\n\
    Stack trace:\n#0 /tmp/tmpc4gr8xyt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc4gr8xyt.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  // edge case\n\
    \  if (count($grid) < 1) {\n    return 0;\n  }\n  // get length of wells\n  $well_length\
    \ = count($grid[0]);\n  // init fill count var\n  $fill_count = 0;\n  // init\
    \ wells filled var\n  $wells_filled = array_fill(0, $well_length, 0);\n  // loop\
    \ through wells\n  foreach ($grid as $well) {\n    // init well filled var\n \
    \   $well_filled = 0;\n    // loop through units in well\n    for ($i = 0; $i\
    \ < $well_length; $i++) {\n      // if unit filled and well not yet filled\n \
    \     if ($well[$i] === 1 && $well_filled < 1) {\n        // increment well filled\n\
    \        $well_filled = 1;\n        // increment fill count\n        $fill_count++;\n\
    \      }\n      // if well not yet filled\n      if ($wells_filled[$i] < 1) {\n\
    \        // if unit filled and well not yet filled\n        if ($well[$i] ===\
    \ 1 && $well_filled < 1) {\n          // increment well filled\n          $well_filled\
    \ = 1;\n          // increment fill count\n          $fill_count++;\n        }\n\
    \        // if unit filled\n        if ($well[$i] === 1) {\n          // increment\
    \ wells filled\n          $wells_filled[$i] = 1;\n        }\n      }\n    }\n\
    \  }\n  // return fill count\n  return $fill_count;\n}\n\n$grid1 = [\n  [0,0,1,0],\n\
    \  [0,1,0,0],\n  [1,1,1,1]\n];\n$bucket_capacity1 = 1;\necho max_fill($grid1,\
    \ $bucket_capacity1) . PHP_EOL;\n\n$grid2 = [\n  [0,0,1,1],\n  [0,0,0,0],\n  [1,1,1,1],\n\
    \  [0,1,1,1]\n];\n$bucket_capacity2 = 2;\necho max_fill($grid2, $\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4mnrgmxv.php on line 90\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\t$wells = count($grid);\n\
    \t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile($i < $wells) {\n\t\t$j = 0;\n\t\t\
    while($j < count($grid[$i])) {\n\t\t\tif($grid[$i][$j] == 1) {\n\t\t\t\t$count\
    \ += 1;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$k = 1;\n\t\t\t\twhile($k <= $capacity)\
    \ {\n\t\t\t\t\tif($i + $k < $wells) {\n\t\t\t\t\t\t$grid[$i + $k][$j] = 0;\n\t\
    \t\t\t\t}\n\t\t\t\t\t$k += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$j += 1;\n\t\t}\n\t\t\
    $i += 1;\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3ntu_up.php:59\n\
    Stack trace:\n#0 /tmp/tmpv3ntu_up.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpv3ntu_up.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // calculate\
    \ max fill per row\n    $max_fill = [];\n    foreach ($grid as $row) {\n     \
    \   $max_fill[] = $capacity - count(array_filter($row, function($v) { return $v\
    \ == 0; }));\n    }\n    // echo \"M: \" . implode(\",\", $max_fill) . \"\\n\"\
    ;\n    // create a list of wells with water level\n    $wells = [];\n    foreach\
    \ ($grid as $i => $row) {\n        $level = 0;\n        foreach ($row as $j =>\
    \ $water) {\n            if ($water == 1) {\n                $level++;\n     \
    \       } else {\n                if ($level > 0) {\n                    $wells[]\
    \ = [$i, $j - 1, $level];\n                    $level = 0;\n                }\n\
    \            }\n        }\n        if ($level > 0) {\n            $wells[] = [$i,\
    \ count($row) - 1, $level];\n        }\n    }\n    // echo \"W: \" . implode(\"\
    ,\", array_map(function($v) { return implode(\",\", $v); }, $wells)) . \"\\n\"\
    ;\n    // loop on the wells by row until all filled or no more water available\n\
    \    $water = 0;\n    while ($water > 0) {\n        $water = 0;\n        foreach\
    \ ($wells as $well) {\n            $row = $well[0];\n            $col = $well[1];\n\
    \            $level = $well[2];\n            if ($level > 0) {\n             \
    \   $fill = min($level, $max_fill[$row]);\n                $level -= $fill;\n\
    \                $max_fill[$row] -= $fill;\n                $water += $fill;\n\
    \            }\n        }\n    }\n    // compute total water\n    $total = 0;\n\
    \    foreach ($wells as $well) {\n        $total += $well[2];\n    }\n    return\
    \ $total;\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppsu5tz9f.php:86\n\
    Stack trace:\n#0 /tmp/tmppsu5tz9f.php(92): test()\n#1 {main}\n  thrown in /tmp/tmppsu5tz9f.php\
    \ on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $fill = $capacity;\n\
    \    $count = 0;\n    foreach ($grid as $row) {\n        $count += array_sum($row);\n\
    \        $fill = min($fill, $count);\n        $count -= $fill;\n    }\n    return\
    \ $fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjyi_pmu.php:44\n\
    Stack trace:\n#0 /tmp/tmpwjyi_pmu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwjyi_pmu.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max_fill_row($row,\
    \ $capacity));\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_fill_row()\
    \ in /tmp/tmppixhw6n8.php:32\nStack trace:\n#0 /tmp/tmppixhw6n8.php(37): max_fill(Array,\
    \ 1)\n#1 /tmp/tmppixhw6n8.php(41): candidate(Array, 1)\n#2 /tmp/tmppixhw6n8.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppixhw6n8.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $max_fill = 0;\n    for ($i=0; $i<$m; $i++) {\n\
    \        $well = array_fill(0, $n, 0);\n        $fill = 0;\n        for ($j=0;\
    \ $j<$n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $well[$j]++;\n\
    \                $fill++;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n        for ($j=0; $j<$n; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                for ($k=$j+1; $k<$n; $k++) {\n                    if ($grid[$i][$k]\
    \ == 1) {\n                        $fill -= min($well[$j], $capacity);\n     \
    \                   $fill += min($capacity, $well[$k]);\n                    \
    \    $well[$j] = 0;\n                        $well[$k]++;\n                  \
    \      $max_fill = max($max_fill, $fill);\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return $max_fill;\n}\necho max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "7\n8\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudctye22.php:67\n\
    Stack trace:\n#0 /tmp/tmpudctye22.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpudctye22.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // compute fill\
    \ count for each row\n    $max_fill = 0;\n    for ($i = 0; $i < count($grid);\
    \ $i++) {\n        $count = 0;\n        for ($j = 0; $j < count($grid[$i]); $j++)\
    \ {\n            if ($grid[$i][$j] === 1) {\n                $count++;\n     \
    \       }\n        }\n        $max_fill = max($max_fill, $count);\n    }\n   \
    \ // empty the wells\n    $empty_count = 0;\n    while ($max_fill > 0) {\n   \
    \     $max_fill -= $capacity;\n        $empty_count++;\n    }\n    return $empty_count;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0ju5tup.php:54\n\
    Stack trace:\n#0 /tmp/tmpo0ju5tup.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpo0ju5tup.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // calculate\
    \ maximum fill for each well\n    $max_fill = [];\n    foreach ($grid as $well)\
    \ {\n        $fill = 0;\n        foreach ($well as $level) {\n            if ($level\
    \ == 1) {\n                $fill++;\n            }\n        }\n        $max_fill[]\
    \ = $fill;\n    }\n    // sort wells by maximum fill\n    arsort($max_fill);\n\
    \    // calculate fill in each pass over the wells\n    $passes = 0;\n    $fill\
    \ = 0;\n    foreach ($max_fill as $well_id => $well_fill) {\n        $fill +=\
    \ $well_fill;\n        if ($fill >= $capacity) {\n            $passes++;\n   \
    \         $fill = 0;\n        }\n    }\n    return $passes;\n}\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity) . \"\
    \\n\";\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\n\
    echo max_fill($grid, $capacity) . \"\\n\";\n$grid = [[0,0,0], [0,0,0]];\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n3\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhd3l89q.php:69\n\
    Stack trace:\n#0 /tmp/tmpvhd3l89q.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpvhd3l89q.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $length = count($grid[0]);\n    $buckets = 0;\n    for ($i = 0; $i < $wells;\
    \ $i++) {\n        $buckets += floor(array_sum($grid[$i]) / $capacity);\n    }\n\
    \    return $buckets;\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\
    \ . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) .\
    \ PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcae8ta4e.php:46\n\
    Stack trace:\n#0 /tmp/tmpcae8ta4e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcae8ta4e.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $res = 0;\n    $max_ele = 0;\n    for ($i=0; $i<$m;\
    \ $i++) {\n        $max_ele = max($max_ele, $grid[$i][0]);\n    }\n    while ($max_ele\
    \ > 0) {\n        $ele = 0;\n        for ($i=0; $i<$m; $i++) {\n            $ele\
    \ += $grid[$i][0];\n            if ($ele > $capacity) {\n                break;\n\
    \            }\n        }\n        $left = $ele - $capacity;\n        if ($left\
    \ > 0) {\n            for ($i=0; $i<$m; $i++) {\n                $grid[$i][0]\
    \ -= $capacity;\n                if ($grid[$i][0] < 0) {\n                   \
    \ $grid[$i][0] = 0;\n                }\n            }\n        } else {\n    \
    \        for ($i=0; $i<$m; $i++) {\n                $grid[$i][0] = 0;\n      \
    \      }\n        }\n        $res++;\n        $max_ele = 0;\n        for ($i=0;\
    \ $i<$m; $i++) {\n            $max_ele = max($max_ele, $grid[$i][0]);\n      \
    \  }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehbrxmqx.php:71\n\
    Stack trace:\n#0 /tmp/tmpehbrxmqx.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpehbrxmqx.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_columns = count($grid[0]);\n    $max_fill = 0;\n   \
    \ for ($i=0; $i<$num_rows; $i++) {\n        $max_fill = max($max_fill, count_fill($grid,\
    \ $capacity, $i, $num_columns));\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_fill()\
    \ in /tmp/tmp7d_eop9b.php:34\nStack trace:\n#0 /tmp/tmp7d_eop9b.php(39): max_fill(Array,\
    \ 1)\n#1 /tmp/tmp7d_eop9b.php(43): candidate(Array, 1)\n#2 /tmp/tmp7d_eop9b.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7d_eop9b.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    for ($i = 0;\
    \ $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++)\
    \ {\n            $grid[$i][$j] = $grid[$i][$j] * $capacity;\n        }\n    }\n\
    \    return $grid;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmms9plw.php:42\n\
    Stack trace:\n#0 /tmp/tmpcmms9plw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcmms9plw.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $well_max = max($row);\n        $max_fill\
    \ += max($well_max, floor($capacity / count($row)));\n    }\n    return $max_fill;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1d_q_r1.php:42\n\
    Stack trace:\n#0 /tmp/tmpi1d_q_r1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi1d_q_r1.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $depth = array_fill(0, $rows, 0);\n    $total_fill\
    \ = 0;\n    while (TRUE) {\n        $fill = 0;\n        for ($i = 0; $i < $rows;\
    \ $i++) {\n            for ($j = 0; $j < $cols; $j++) {\n                if ($grid[$i][$j]\
    \ == 1) {\n                    $total_fill++;\n                    $grid[$i][$j]\
    \ = 0;\n                    $depth[$i]++;\n                    $fill++;\n    \
    \            }\n            }\n        }\n        if ($fill == 0) {\n        \
    \    break;\n        }\n        for ($i = 0; $i < $rows; $i++) {\n           \
    \ for ($j = 0; $j < $capacity; $j++) {\n                if ($depth[$i] > 0) {\n\
    \                    $depth[$i]--;\n                    $fill++;\n           \
    \     }\n            }\n        }\n    }\n    return $total_fill;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc42sokv6.php:66\n\
    Stack trace:\n#0 /tmp/tmpc42sokv6.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpc42sokv6.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // Your code\
    \ here\n}\n$grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$cap1 = 1;\necho max_fill($grid1,\
    \ $cap1) . PHP_EOL;\n$grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $cap2 = 2;\necho max_fill($grid2, $cap2) . PHP_EOL;\n$grid3 = [[0,0,0], [0,0,0]];\n\
    $cap3 = 5;\necho max_fill($grid3, $cap3) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2wz4wvb.php:46\n\
    Stack trace:\n#0 /tmp/tmpv2wz4wvb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv2wz4wvb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_fill = $capacity;\n    for ($i=0; $i<$rows;\
    \ $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ > 0) {\n                // if the well is non-empty, remove as much as we can\n\
    \                $fill = min($max_fill, $grid[$i][$j]);\n                $grid[$i][$j]\
    \ -= $fill;\n                $max_fill -= $fill;\n            }\n        }\n \
    \   }\n    return $capacity - $max_fill;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbvrmr2s.php:50\n\
    Stack trace:\n#0 /tmp/tmptbvrmr2s.php(57): test()\n#1 {main}\n  thrown in /tmp/tmptbvrmr2s.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $operations =\
    \ 0;\n  $n_rows = count($grid);\n  $n_cols = count($grid[0]);\n  for ($i=0; $i<$n_rows;\
    \ $i++) {\n    for ($j=0; $j<$n_cols; $j++) {\n      if ($grid[$i][$j] == 1) {\n\
    \        $operations += 1;\n        $grid[$i][$j] = $capacity;\n        continue;\n\
    \      }\n      if ($i == 0) {\n        continue;\n      }\n      $grid[$i][$j]\
    \ = $grid[$i-1][$j];\n      if ($grid[$i][$j] == $capacity) {\n        continue;\n\
    \      }\n      $operations += 1;\n      $grid[$i][$j] = $capacity;\n    }\n \
    \ }\n  return $operations;\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\
    \ . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\n11\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogh53ezl.php:61\n\
    Stack trace:\n#0 /tmp/tmpogh53ezl.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpogh53ezl.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $total_fill =\
    \ 0;\n  $bucket = 0;\n  for ($i = 0; $i < count($grid); $i++) {\n    for ($j =\
    \ 0; $j < count($grid[$i]); $j++) {\n      if ($grid[$i][$j] == 1) {\n       \
    \ $bucket += 1;\n      }\n    }\n    if ($bucket > $capacity) {\n      $total_fill\
    \ += $bucket - $capacity;\n    }\n    $bucket = 0;\n  }\n  return $total_fill;\n\
    }\n\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxjiz18j.php:51\n\
    Stack trace:\n#0 /tmp/tmpbxjiz18j.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbxjiz18j.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // Fill all\
    \ the wells that have one unit, and increment the number of drops\n    $drops\
    \ = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j <\
    \ count($grid[$i]); $j++) {\n            if ($grid[$i][$j] == 1) {\n         \
    \       $grid[$i][$j] = 0;\n                $drops++;\n            }\n       \
    \ }\n    }\n    // Fill all the wells that have two units, and increment the number\
    \ of drops\n    $drops += fill_two_units($grid, $capacity);\n    // Fill all the\
    \ wells that have three units, and increment the number of drops\n    $drops +=\
    \ fill_three_units($grid, $capacity);\n    // Fill all the wells that have four\
    \ units, and increment the number of drops\n    $drops += fill_four_units($grid,\
    \ $capacity);\n    return $drops;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fill_two_units()\
    \ in /tmp/tmpwozlr14m.php:41\nStack trace:\n#0 /tmp/tmpwozlr14m.php(49): max_fill(Array,\
    \ 1)\n#1 /tmp/tmpwozlr14m.php(53): candidate(Array, 1)\n#2 /tmp/tmpwozlr14m.php(60):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwozlr14m.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $sum = 0;\n\
    \    foreach ($grid as $row) {\n        $sum += array_sum($row);\n    }\n    if\
    \ ($sum <= $capacity) {\n        return 0;\n    }\n    $wells = count($grid[0]);\n\
    \    $cycles = $sum / $capacity;\n    $cycles = (int) $cycles;\n    $rest = $sum\
    \ % $capacity;\n    $lowering = ($wells - 1) * $cycles;\n    $height = $capacity;\n\
    \    while ($rest > 0) {\n        $height = min($height, $rest);\n        $rest\
    \ -= $height;\n        $lowering++;\n        $height--;\n    }\n    return $lowering;\n\
    }\n$grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$grid2 = [[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]];\n$grid3 = [[0,0,0], [0,0,0]];\n$grid4 = [[0,1], [1,0]];\n\
    $grid5 = [[0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0],\
    \ [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0],\
    \ [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0]];\n$grid6\
    \ = [[0,0,0,0\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgnzavswp.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $total_times\
    \ = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        $times = 0;\n   \
    \     for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $times++;\n            }\n        }\n        $total_times\
    \ += $times - ($times % $capacity);\n    }\n    return $total_times;\n}\n$grid1\
    \ = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity1 = 1;\n$grid2 = [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity2 = 2;\n$grid3 = [[0,0,0], [0,0,0]];\n\
    $capacity3 = 5;\necho max_fill($grid1, $capacity1) . PHP_EOL;\necho max_fill($grid2,\
    \ $capacity2) . PHP_EOL;\necho max_fill($grid3, $capacity3) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "6\n8\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mg8w8om.php:57\n\
    Stack trace:\n#0 /tmp/tmp9mg8w8om.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp9mg8w8om.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_fill = $capacity;\n    $count = 0;\n \
    \   $done = true;\n    for ($r = 0; $r < $rows; $r++) {\n        $done = true;\n\
    \        for ($c = 0; $c < $cols; $c++) {\n            if ($grid[$r][$c] > 0)\
    \ {\n                $done = false;\n                $grid[$r][$c] = $grid[$r][$c]\
    \ - 1;\n                $count = $count + 1;\n            }\n        }\n     \
    \   if ($done) {\n            break;\n        }\n    }\n    return [$grid, $count];\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv1we30f.php:55\n\
    Stack trace:\n#0 /tmp/tmpjv1we30f.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpjv1we30f.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $sum = 0;\n\
    \    foreach ($grid as $row) {\n        $row_sum = 0;\n        foreach ($row as\
    \ $cell) {\n            $row_sum += $cell;\n        }\n        $sum += $row_sum\
    \ / $capacity;\n    }\n    return $sum;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n4.5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpt37lpt.php:55\n\
    Stack trace:\n#0 /tmp/tmpqpt37lpt.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpqpt37lpt.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // transform\
    \ grid\n    $sum_heights = [];\n    $num_columns = count($grid[0]);\n    for ($column\
    \ = 0; $column < $num_columns; $column++) {\n        $sum_heights[$column] = 0;\n\
    \        foreach ($grid as $row) {\n            $sum_heights[$column] += $row[$column];\n\
    \        }\n    }\n    // count fills\n    $num_fills = 0;\n    $num_columns =\
    \ count($sum_heights);\n    for ($column = 0; $column < $num_columns; $column++)\
    \ {\n        $num_fills += floor($sum_heights[$column] / $capacity);\n    }\n\
    \    return $num_fills;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvfel_lx.php:52\n\
    Stack trace:\n#0 /tmp/tmpwvfel_lx.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwvfel_lx.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ -1;\n    foreach ($grid as $i => $row) {\n        $filled = $capacity;\n   \
    \     foreach ($row as $j => $cell) {\n            if ($cell === 0) {\n      \
    \          $filled = $capacity;\n            } else {\n                $filled--;\n\
    \                if ($filled < 0) {\n                    // print \"max_fill $i,\
    \ $j\\n\";\n                    $max_fill = max($max_fill, $i * count($row) +\
    \ $j);\n                    break;\n                }\n            }\n       \
    \ }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc76z9tk.php:53\n\
    Stack trace:\n#0 /tmp/tmpuc76z9tk.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuc76z9tk.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // keys are\
    \ wells, values are how much water is in each well\n    $wells = [];\n    // create\
    \ wells from grid\n    foreach ($grid as $row) {\n        for ($i = 0; $i < count($row);\
    \ $i++) {\n            if (!isset($wells[$i])) {\n                $wells[$i] =\
    \ 0;\n            }\n            $wells[$i] += $row[$i];\n        }\n    }\n \
    \   $times = 0;\n    while (!is_filled($wells)) {\n        // empty wells\n  \
    \      foreach ($wells as $well => $current_water) {\n            $to_fill = $capacity\
    \ - $current_water;\n            if ($to_fill > 0) {\n                $wells[$well]\
    \ = $capacity;\n            }\n        }\n        $times++;\n    }\n    return\
    \ $times;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_filled() in\
    \ /tmp/tmpnnh51y7v.php:42\nStack trace:\n#0 /tmp/tmpnnh51y7v.php(55): max_fill(Array,\
    \ 1)\n#1 /tmp/tmpnnh51y7v.php(59): candidate(Array, 1)\n#2 /tmp/tmpnnh51y7v.php(66):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnnh51y7v.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // create a\
    \ heap for the min height\n    $min_heap = new SplMaxHeap();\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min_height = null;\n    // get min height\n \
    \   for ($i=0; $i<$n; $i++) {\n        for ($j=0; $j<$m; $j++) {\n           \
    \ if ($grid[$i][$j] > 0) {\n                $min_height = $min_height ? min($min_height,\
    \ $grid[$i][$j]) : $grid[$i][$j];\n            }\n        }\n    }\n    // do\
    \ nothing if min height is zero\n    if ($min_height == 0) {\n        return 0;\n\
    \    }\n    // decrement all by min height\n    for ($i=0; $i<$n; $i++) {\n  \
    \      for ($j=0; $j<$m; $j++) {\n            if ($grid[$i][$j] > 0) {\n     \
    \           $grid[$i][$j] -= $min_height;\n            }\n        }\n    }\n \
    \   // keep increasing min height as long as it's still less than capacity\n \
    \   while ($min_height < $capacity) {\n        $non_zero_count = 0;\n        //\
    \ get row count with non zero wells\n        for ($i=0; $i<$n; $i++) {\n     \
    \       $has_non_zero = false;\n            for ($j=0; $j<$m; $j++) {\n      \
    \          if ($grid[$i][$j] > 0) {\n                    $has_non_zero = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ ($has_non_zero) {\n                $non_zero_count++;\n            }\n     \
    \   }\n        // if all rows have 0, you're done\n        if ($non_zero_count\
    \ == 0) {\n            break;\n        }\n        // add the rows with non-zero\
    \ wells to the heap\n        for ($i=0; $i<$n; $i++) {\n            $has_non_zero\
    \ = false;\n            for ($j\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1fcax_k8.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    foreach\
    \ ($grid as $row) {\n        $row_fill = 0;\n        for ($i = 0; $i < $col_count;\
    \ $i++) {\n            if ($row[$i] == 1) {\n                $row_fill++;\n  \
    \          } else {\n                $count += max(0, $row_fill - $capacity +\
    \ 1);\n                $row_fill = 0;\n            }\n        }\n        $count\
    \ += max(0, $row_fill - $capacity + 1);\n    }\n    return $count;\n}\n$grid =\
    \ [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$bucket_capacity = 1;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $bucket_capacity = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,0], [0,0,0]];\n$bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n6\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg_xd7nc.php:62\n\
    Stack trace:\n#0 /tmp/tmpjg_xd7nc.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpjg_xd7nc.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $maximum = 0;\n    for\
    \ ($i = 0; $i < $row_count; $i++) {\n        $sum = 0;\n        for ($j = 0; $j\
    \ < $col_count; $j++) {\n            $sum += $grid[$i][$j];\n        }\n     \
    \   $maximum = max($maximum, $sum);\n    }\n    $depth = 0;\n    while ($depth\
    \ < $maximum) {\n        $depth += $capacity;\n    }\n    return $depth;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3oxyafz.php:51\n\
    Stack trace:\n#0 /tmp/tmpq3oxyafz.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpq3oxyafz.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // your solution\
    \ here\n}\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$capacity\
    \ = 1;\nassert(max_fill($grid, $capacity) == 6);\n\n$grid = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$capacity = 2;\nassert(max_fill($grid,\
    \ $capacity) == 5);\n\n$grid = [\n    [0,0,0],\n    [0,0,0]\n];\n$capacity = 5;\n\
    assert(max_fill($grid, $capacity) == 0);\n\n$grid = [\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp_q0af98.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (count($grid)\
    \ === 0) {\n        return 0;\n    }\n    $width = count($grid[0]);\n    $well_count\
    \ = count($grid);\n    $max_so_far = -1;\n    $max_index = -1;\n    for ($i =\
    \ 0; $i < $well_count; $i++) {\n        $filled = 0;\n        for ($j = 0; $j\
    \ < $width; $j++) {\n            if ($grid[$i][$j] === 1) {\n                $filled++;\n\
    \            }\n        }\n        if ($filled > $max_so_far) {\n            $max_so_far\
    \ = $filled;\n            $max_index = $i;\n        }\n    }\n    if ($max_so_far\
    \ === 0) {\n        return 0;\n    }\n    $grid[$max_index] = array_fill(0, $width,\
    \ 0);\n    $count = $max_so_far;\n    if ($max_so_far < $capacity) {\n       \
    \ $count += max_fill($grid, $capacity - $max_so_far);\n    } else {\n        $count\
    \ += max_fill($grid, $capacity);\n    }\n    return $count;\n}\n$grid1 = [\n \
    \   [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$grid2 = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$grid3 = [\n    [0,0,0],\n\
    \    [0,0,0]\n];\necho max_fill($grid1, 1) . PHP_EOL;\necho max_fill($grid2, 2)\
    \ . PHP_EOL;\necho max_fill($grid3, 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n9\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfstjfg4t.php:85\n\
    Stack trace:\n#0 /tmp/tmpfstjfg4t.php(91): test()\n#1 {main}\n  thrown in /tmp/tmpfstjfg4t.php\
    \ on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $left_side =\
    \ $right_side = $grid;\n    for ($i = 1; $i < count($grid); $i++) {\n        $left_side[$i]\
    \ = [0];\n        for ($j = 1; $j < count($grid[$i]); $j++) {\n            $left_side[$i][$j]\
    \ = max($left_side[$i - 1][$j], $left_side[$i][$j - 1]) + $grid[$i][$j];\n   \
    \     }\n    }\n    for ($i = count($grid) - 2; $i >= 0; $i--) {\n        $right_side[$i]\
    \ = [0];\n        for ($j = count($grid[$i]) - 2; $j >= 0; $j--) {\n         \
    \   $right_side[$i][$j] = max($right_side[$i + 1][$j], $right_side[$i][$j + 1])\
    \ + $grid[$i][$j];\n        }\n    }\n    $max_fill = 0;\n    for ($i = 0; $i\
    \ < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n\
    \            $max_fill = max($max_fill, $left_side[$i][$j] + $right_side[$i][$j]\
    \ - $grid[$i][$j]);\n        }\n    }\n    return $max_fill / $capacity;\n}\n\
    $grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$bucket_capacity = 1;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $bucket_capacity = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,0], [0,0,0]];\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg_0tv0z.php:63\n\
    Stack trace:\n#0 /tmp/tmpyg_0tv0z.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpyg_0tv0z.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $remaining =\
    \ $capacity;\n    $count = 0;\n    foreach ($grid as $row) {\n        foreach\
    \ ($row as $cell) {\n            if ($cell) {\n                $remaining--;\n\
    \                if ($remaining === 0) {\n                    $count++;\n    \
    \                $remaining = $capacity;\n                }\n            }\n \
    \       }\n    }\n    if ($remaining !== $capacity) {\n        $count++;\n   \
    \ }\n    return $count;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lrby0zk.php:57\n\
    Stack trace:\n#0 /tmp/tmp3lrby0zk.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp3lrby0zk.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n}\necho max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1).\"\\n\"; // 6\necho max_fill([[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]], 2).\"\\n\"; // 5\necho max_fill([[0,0,0], [0,0,0]], 5).\"\
    \\n\"; // 0\necho max_fill([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprxki29qr.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $k = count($grid);\n\
    \    $n = count($grid[0]);\n    $max_fill = $k * $capacity;\n    for ($i=0; $i<$k;\
    \ $i++) {\n        for ($j=0; $j<$n; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $max_fill--;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptf49xvrz.php:47\n\
    Stack trace:\n#0 /tmp/tmptf49xvrz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptf49xvrz.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $water = 0;\n    for ($i = 0; $i < $rows; $i++)\
    \ {\n        for ($j = 0; $j < $cols; $j++) {\n            $water += $grid[$i][$j];\n\
    \        }\n    }\n    return ($water / $capacity) + ($water % $capacity != 0);\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitdmc7c7.php:46\n\
    Stack trace:\n#0 /tmp/tmpitdmc7c7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpitdmc7c7.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $count = 0;\n    for ($i=0; $i<$rows; $i++)\
    \ {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $count += $capacity;\n            }\n        }\n    }\n \
    \   return $count;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg05430j_.php:48\n\
    Stack trace:\n#0 /tmp/tmpg05430j_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpg05430j_.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $max_fill = 0;\n\
    \  foreach ($grid as $row) {\n    $max_fill = max($max_fill, max($row));\n  }\n\
    \  return min($max_fill, $capacity);\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6eq82im.php:41\n\
    Stack trace:\n#0 /tmp/tmp_6eq82im.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_6eq82im.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ [];\n    foreach ($grid as $row) {\n        foreach ($row as $col) {\n     \
    \       $max_fill[] = $col ? $capacity : 0;\n        }\n    }\n    return $max_fill;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k_7xonu.php:43\n\
    Stack trace:\n#0 /tmp/tmp4k_7xonu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4k_7xonu.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // the max in\
    \ the column\n    $max = 0;\n    // the number of times you add the max\n    $count\
    \ = 0;\n    // row length\n    $r = count($grid);\n    // column length\n    $c\
    \ = count($grid[0]);\n    for ($i=0; $i<$c; $i++) {\n        $max = 0;\n     \
    \   for ($j=0; $j<$r; $j++) {\n            $max = max($max, $grid[$j][$i]);\n\
    \        }\n        $count += (int) ceil($max / $capacity);\n    }\n    return\
    \ $count;\n}\n$grid1 = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n\
    $grid2 = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n\
    $grid3 = [\n    [0,0,0],\n    [0,0,0]\n];\necho max_fill($grid1, 1) . PHP_EOL;\n\
    echo max_fill($grid2, 2) . PHP_EOL;\necho max_fill($grid3, 5) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_btm6cqk.php:70\n\
    Stack trace:\n#0 /tmp/tmp_btm6cqk.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp_btm6cqk.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $total_cols\
    \ = count($grid[0]);\n    $total_rows = count($grid);\n    $max_fill = [];\n \
    \   for ($j = 0; $j < $total_cols; $j++) {\n        $total_units = 0;\n      \
    \  for ($i = 0; $i < $total_rows; $i++) {\n            $total_units += $grid[$i][$j];\n\
    \        }\n        $max_fill[] = $total_units;\n    }\n    return max($max_fill);\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7g2wbyr.php:47\n\
    Stack trace:\n#0 /tmp/tmpe7g2wbyr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpe7g2wbyr.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $n = count($grid);\n    $m = count($grid[0]);\n    for ($i=0; $i<$n;\
    \ $i++) {\n        $max_fill = max($max_fill, max($grid[$i]));\n    }\n    $max_fill\
    \ = min($max_fill, $capacity);\n    $fill = $max_fill - 1;\n    $buckets = array_fill(0,\
    \ $n, $fill);\n    $result = 0;\n    while ($max_fill > 0) {\n        $max_fill--;\n\
    \        $fill = min($fill, $max_fill);\n        $taken = array_fill(0, $n, $fill);\n\
    \        while ($fill >= 0) {\n            $fill--;\n            for ($i=0; $i<$n;\
    \ $i++) {\n                for ($j=0; $j<$m; $j++) {\n                    if ($grid[$i][$j]\
    \ > $taken[$i]) {\n                        $buckets[$i] = min($buckets[$i] + 1,\
    \ $capacity);\n                        if ($buckets[$i] == $capacity) {\n    \
    \                        $taken[$i]++;\n                        }\n          \
    \          }\n                }\n            }\n        }\n        $result +=\
    \ array_sum($buckets);\n    }\n    return $result;\n}\n$grid = [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]];\n$bucket_capacity = 1;\necho max_fill($grid, $bucket_capacity) .\
    \ PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$bucket_capacity\
    \ = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    $bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity) . PHP_E\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15mz27jb.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $height = count($grid);\n\
    \    $width = count($grid[0]);\n    $visited = [];\n    $graph = [];\n    for\
    \ ($i = 0; $i < $height; $i++) {\n        for ($j = 0; $j < $width; $j++) {\n\
    \            $visited[$i][$j] = false;\n            $graph[$i][$j] = [];\n   \
    \         if ($grid[$i][$j] === 0) {\n                $visited[$i][$j] = true;\n\
    \            }\n            if ($i > 0) {\n                if ($grid[$i - 1][$j]\
    \ === 1) {\n                    $graph[$i][$j][] = ($i - 1) . ',' . $j;\n    \
    \            }\n            }\n            if ($i < $height - 1) {\n         \
    \       if ($grid[$i + 1][$j] === 1) {\n                    $graph[$i][$j][] =\
    \ ($i + 1) . ',' . $j;\n                }\n            }\n            if ($j >\
    \ 0) {\n                if ($grid[$i][$j - 1] === 1) {\n                    $graph[$i][$j][]\
    \ = $i . ',' . ($j - 1);\n                }\n            }\n            if ($j\
    \ < $width - 1) {\n                if ($grid[$i][$j + 1] === 1) {\n          \
    \          $graph[$i][$j][] = $i . ',' . ($j + 1);\n                }\n      \
    \      }\n        }\n    }\n    $queue = [[$height - 1, $width - 1]];\n    $visited[$height\
    \ - 1][$width - 1] = true;\n    $distance = [];\n    $distance[$height - 1][$width\
    \ - 1] = 0;\n    while (!empty($queue)) {\n        $current = array_shift($queue);\n\
    \        $current_height = $current[0];\n        $current_width = $current[1];\n\
    \        foreach ($graph[$current_height][$current_width] as $neighbor) {\n  \
    \          $neighbor_height = (int\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_r16cnnb.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_columns\
    \ = count($grid[0]);\n    $num_rows = count($grid);\n    $ans = 0;\n    for ($row\
    \ = 0; $row < $num_rows; $row++) {\n        for ($col = 0; $col < $num_columns;\
    \ $col++) {\n            if ($grid[$row][$col] === 1) {\n                $ans++;\n\
    \                $min_water = $capacity;\n                for ($next_row = $row;\
    \ $next_row < $num_rows; $next_row++) {\n                    $next_well = $grid[$next_row][$col];\n\
    \                    if ($next_well === 0) {\n                        $min_water\
    \ = 0;\n                        break;\n                    }\n              \
    \      if ($next_well < $min_water) {\n                        $min_water = $next_well;\n\
    \                    }\n                }\n                for ($next_row = $row;\
    \ $next_row < $num_rows; $next_row++) {\n                    $next_well = $grid[$next_row][$col];\n\
    \                    if ($next_well > $min_water) {\n                        $grid[$next_row][$col]\
    \ = $min_water;\n                        $ans += $min_water;\n               \
    \     } else {\n                        $ans += $next_well;\n                \
    \    }\n                }\n            }\n        }\n    }\n    return $ans;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq3o0xqh.php:67\n\
    Stack trace:\n#0 /tmp/tmpxq3o0xqh.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpxq3o0xqh.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // 1. Empty\n\
    \    // 2. Fill\n    // 3. Overflow\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $empty_count = 0;\n    $fill_count = 0;\n    $overflow_count = 0;\n    for\
    \ ($r = 0; $r < $rows; $r++) {\n        $water = 0;\n        for ($c = 0; $c <\
    \ $cols; $c++) {\n            if ($grid[$r][$c] == 0) {\n                if ($water\
    \ == 0) {\n                    $empty_count++;\n                } else {\n   \
    \                 $fill_count++;\n                }\n            } else if ($grid[$r][$c]\
    \ == 1) {\n                $water++;\n                if ($water == $capacity)\
    \ {\n                    $overflow_count++;\n                    $water = 0;\n\
    \                }\n            }\n        }\n    }\n    return $empty_count +\
    \ $fill_count + $overflow_count;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkmjjqfi.php:63\n\
    Stack trace:\n#0 /tmp/tmpkkmjjqfi.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkkmjjqfi.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $grid_len =\
    \ count($grid);\n    $row_len = count($grid[0]);\n    $traverse_order = array_reverse(range(0,\
    \ $grid_len - 1));\n    $max_fill = 0;\n    foreach ($traverse_order as $row_index)\
    \ {\n        $water_level = 0;\n        $fill_count = 0;\n        for ($col_index\
    \ = 0; $col_index < $row_len; $col_index++) {\n            $water_level = min($water_level,\
    \ $grid[$row_index][$col_index]);\n            if ($water_level < $grid[$row_index][$col_index])\
    \ {\n                $water_level = $grid[$row_index][$col_index];\n         \
    \       $fill_count = 0;\n            }\n            if ($water_level) {\n   \
    \             $fill_count++;\n                if ($fill_count === $capacity) {\n\
    \                    $water_level--;\n                    $fill_count = 0;\n \
    \               }\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $water_level);\n    }\n    return $max_fill;\n}\n$grid1 = [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]];\n$grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$grid3\
    \ = [[0,0,0], [0,0,0]];\necho max_fill($grid1, 1) . PHP_EOL;\necho max_fill($grid2,\
    \ 2) . PHP_EOL;\necho max_fill($grid3, 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxn0ob49.php:66\n\
    Stack trace:\n#0 /tmp/tmpjxn0ob49.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjxn0ob49.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $steps = 0;\n    for ($c\
    \ = 0; $c < $num_cols; $c++) {\n        $current_state = $capacity;\n        for\
    \ ($r = 0; $r < $num_rows; $r++) {\n            $state = $grid[$r][$c];\n    \
    \        $current_state -= $state;\n            if ($current_state <= 0) {\n \
    \               $steps++;\n                $current_state = $capacity;\n     \
    \       }\n        }\n        $steps++;\n    }\n    return $steps;\n}\n$grid =\
    \ [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\necho max_fill($grid, 1) . PHP_EOL;\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\necho max_fill($grid, 2) . PHP_EOL;\n\
    $grid = [[0,0,0], [0,0,0]];\necho max_fill($grid, 5) . PHP_EOL;\n$grid = [[0,0,0],\
    \ [0,0,0]];\necho max_fill($grid, 1) . PHP_EOL;\n$grid = [[0,0,0,0], [0,0,0,0],\
    \ [0,0,0,0], [0,0,0,0]];\necho max_fill($grid, 1) . PHP_EOL;\n$grid = [[0,0,0,0],\
    \ [0,0,0,0], [0,0,0,0], [0,0,0,0]];\necho max_fill($grid, 5) . PHP_EOL;\n$grid\
    \ = [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]];\necho max_fill($grid, 2) . PHP_EOL;\n\
    $grid = [[0,0,0,\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcqhq9bku.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $well_count\
    \ = count($grid);\n    $well_length = count($grid[0]);\n    $tallest_well = 0;\n\
    \    $total_water = 0;\n    for ($i = 0; $i < $well_count; $i++) {\n        $row_water\
    \ = 0;\n        for ($j = 0; $j < $well_length; $j++) {\n            $row_water\
    \ += $grid[$i][$j];\n        }\n        $total_water += $row_water;\n        $tallest_well\
    \ = max($tallest_well, $row_water);\n    }\n    $extra_water = $total_water -\
    \ $tallest_well;\n    $tallest_well_cycles = floor($tallest_well / $capacity);\n\
    \    $extra_water_cycles = floor($extra_water / $capacity);\n    $remainder =\
    \ $tallest_well % $capacity;\n    if ($remainder > 0) {\n        return $tallest_well_cycles\
    \ + $extra_water_cycles + 1;\n    } else {\n        return $tallest_well_cycles\
    \ + $extra_water_cycles;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5qwtd_r.php:57\n\
    Stack trace:\n#0 /tmp/tmpb5qwtd_r.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpb5qwtd_r.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // examine columns\
    \ from left to right\n    // empty the first 1 until we cannot anymore\n    //\
    \ if we reached capacity, keep going to next column\n    // if we didn't, return\
    \ to previous column\n    // if we're out of columns, start over from the beginning\n\
    \    // increase water level by 1\n\n    $height = count($grid);\n    $width =\
    \ count($grid[0]);\n    $current_y = 0;\n    $current_x = 0;\n    $water_level\
    \ = 0;\n    $filled = 0;\n    $bucket = 0;\n    $pass = 0;\n    while ($filled\
    \ < $height) {\n        $bucket = 0;\n        while ($current_x < $width) {\n\
    \            // if it's a 1 and we haven't filled our bucket yet,\n          \
    \  // add it to the bucket.\n            if ($grid[$current_y][$current_x] ===\
    \ 1) {\n                $bucket++;\n                $filled++;\n            }\n\
    \            // if the bucket is full, move to the next column.\n            if\
    \ ($bucket === $capacity) {\n                $current_x++;\n                break;\n\
    \            }\n            // if we haven't filled our bucket,\n            //\
    \ and we have reached the end of the row,\n            // go back to the last\
    \ column we filled.\n            if ($current_x === $width - 1) {\n          \
    \      $current_x = $current_x - $bucket;\n                break;\n          \
    \  }\n            $current_x++;\n        }\n        // if we have filled all the\
    \ wells,\n        // increment the water level and start back at the beginning.\n\
    \        if ($filled === $height) {\n            $water_level++;\n           \
    \ $current_y = 0;\n            $current_x = 0;\n            $filled = 0;\n   \
    \         $pass++;\n        }\n        // otherwise, increment the row and start\
    \ back at the beginning.\n        else {\n            $current_y++;\n        \
    \    $current_x = 0;\n        }\n    }\n    return $water_level;\n}\n$grid1 =\
    \ [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9d731n2w.php on line 89\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $well_count\
    \ = count($grid);\n    $well_len = count($grid[0]);\n    $times = 0;\n    for\
    \ ($i = 0; $i < $well_count; $i++) {\n        $fill = $capacity;\n        for\
    \ ($j = 0; $j < $well_len; $j++) {\n            if ($grid[$i][$j] === 1) {\n \
    \               $fill--;\n                if ($fill === 0) {\n               \
    \     $times++;\n                    $fill = $capacity;\n                }\n \
    \           }\n        }\n        if ($fill !== $capacity) {\n            $times++;\n\
    \        }\n    }\n    return $times;\n}\n$wells = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $cap = 1;\necho max_fill($wells, $cap) . PHP_EOL;\n$wells = [[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]];\n$cap = 2;\necho max_fill($wells, $cap) . PHP_EOL;\n\
    $wells = [[0,0,0], [0,0,0]];\n$cap = 5;\necho max_fill($wells, $cap) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n5\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n\
    \    if ($max == 0) {\n        return 0;\n    }\n    $count = 0;\n    while (true)\
    \ {\n        if (empty($grid)) {\n            break;\n        }\n        if ($capacity\
    \ > 0) {\n            foreach ($grid as $i => $row) {\n                foreach\
    \ ($row as $j => $col) {\n                    if ($col != 0) {\n             \
    \           $grid[$i][$j] = max(0, $col - $capacity);\n                    }\n\
    \                }\n            }\n            $count++;\n        }\n        foreach\
    \ ($grid as $i => $row) {\n            if (empty($row)) {\n                unset($grid[$i]);\n\
    \            }\n        }\n    }\n    return $count;\n}\necho max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $result = 0;\n\
    \  $m = count($grid);\n  $n = count($grid[0]);\n  $grid = transpose($grid);\n\
    \  for ($i = 0; $i < $m; $i++) {\n    $start = 0;\n    $end = $n - 1;\n    for\
    \ ($j = 0; $j < $n; $j++) {\n      if ($grid[$i][$j] == 1) {\n        $start =\
    \ $j;\n        break;\n      }\n    }\n    for ($j = $n - 1; $j >= 0; $j--) {\n\
    \      if ($grid[$i][$j] == 1) {\n        $end = $j;\n        break;\n      }\n\
    \    }\n    $result += ($end - $start + 1);\n  }\n  return floor($result / $capacity);\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function transpose() in\
    \ /tmp/tmp91fqwm_s.php:33\nStack trace:\n#0 /tmp/tmp91fqwm_s.php(54): max_fill(Array,\
    \ 1)\n#1 /tmp/tmp91fqwm_s.php(58): candidate(Array, 1)\n#2 /tmp/tmp91fqwm_s.php(65):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp91fqwm_s.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $current_fill\
    \ = 0;\n    $water_level = 0;\n    $bucket_drops = 0;\n    foreach ($grid as $row)\
    \ {\n        foreach ($row as $column) {\n            if ($current_fill + $column\
    \ > $capacity) {\n                // The bucket is going to overflow, so drop\
    \ it\n                $bucket_drops++;\n                $current_fill = 0;\n \
    \           }\n            $current_fill += $column;\n        }\n        // The\
    \ bucket is going to overflow, so drop it\n        $bucket_drops++;\n        $current_fill\
    \ = 0;\n    }\n    return $bucket_drops;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $bucket_capacity = 1;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$bucket_capacity = 2;\necho\
    \ max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    $bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "6\n6\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi1sig6m.php:63\n\
    Stack trace:\n#0 /tmp/tmppi1sig6m.php(69): test()\n#1 {main}\n  thrown in /tmp/tmppi1sig6m.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $units = 0;\n        foreach ($row\
    \ as $col) {\n            $units += $col;\n        }\n        $max_fill = max($max_fill,\
    \ $units);\n    }\n    $operations = 0;\n    while ($max_fill > 0) {\n       \
    \ $operations++;\n        $max_fill -= $capacity;\n    }\n    return $operations;\n\
    }\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]],\
    \ 5) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3jxyahe.php:53\n\
    Stack trace:\n#0 /tmp/tmpt3jxyahe.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpt3jxyahe.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($i=0; $i<$row_count; $i++) {\n        for ($j=0; $j<$col_count; $j++) {\n \
    \           if ($grid[$i][$j] == 1) {\n                if ($i == 0) {\n      \
    \              $max_fill += $capacity;\n                } else {\n           \
    \         if ($grid[$i-1][$j] == 0) {\n                        $max_fill += $capacity;\n\
    \                    } else {\n                        $max_fill += $capacity\
    \ - $grid[$i-1][$j];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprszizwjw.php:55\n\
    Stack trace:\n#0 /tmp/tmprszizwjw.php(62): test()\n#1 {main}\n  thrown in /tmp/tmprszizwjw.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // convert to\
    \ 0, 1 matrix\n    $matrix = [];\n    foreach ($grid as $row) {\n        $matrix[]\
    \ = array_map(function($col) {\n            return $col === 1 ? 1 : 0;\n     \
    \   }, $row);\n    }\n    // loop over rows\n    $num_rows = count($matrix);\n\
    \    $num_cols = count($matrix[0]);\n    $current_fill = 0;\n    $row_pos = 0;\n\
    \    $water_bucket = 0;\n    $num_drops = 0;\n    // check if grid is empty\n\
    \    if (sum_row($matrix[0]) === 0) {\n        return 0;\n    }\n    while (true)\
    \ {\n        // get leftmost filled column\n        $leftmost_filled_col = -1;\n\
    \        foreach ($matrix[$row_pos] as $col_pos => $filled) {\n            if\
    \ ($filled) {\n                $leftmost_filled_col = $col_pos;\n            \
    \    break;\n            }\n        }\n        // check if current row is empty\n\
    \        if ($leftmost_filled_col === -1) {\n            // advance to next row\n\
    \            $row_pos++;\n            continue;\n        }\n        // fill bucket\n\
    \        $water_bucket += $capacity;\n        // drop water\n        $col_pos\
    \ = $leftmost_filled_col;\n        while ($water_bucket > 0) {\n            //\
    \ check if row is empty\n            if ($matrix[$row_pos][$col_pos] === 0) {\n\
    \                // advance to next row\n                $row_pos++;\n       \
    \         break;\n            }\n            // remove a unit of water\n     \
    \       $matrix[$row_pos][$col_pos]--;\n            $water_bucket--;\n       \
    \     $num_drops++;\n            // advance to next column\n            $col_pos++;\n\
    \            // check if on last column\n            if ($col_pos >= $num_cols)\
    \ {\n                // advance to next row\n                $row_pos++;\n   \
    \             break;\n            }\n        }\n        // check if on last row\n\
    \        if ($row_pos >=\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpep9y13q3.php on line 89\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $num_fill = 0;\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $water = 0;\n            for ($k=0; $k<$capacity; $k++) {\n        \
    \        if ($i-$k < 0) break;\n                $water += $grid[$i-$k][$j];\n\
    \            }\n            $num_fill += min($water, $capacity);\n        }\n\
    \    }\n    return $num_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpf73xo_.php:51\n\
    Stack trace:\n#0 /tmp/tmpmpf73xo_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpmpf73xo_.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $fill_count = 0;\n    for ($row = 0; $row <\
    \ $rows; $row++) {\n        for ($col = 0; $col < $cols; $col++) {\n         \
    \   if ($grid[$row][$col] == 1) {\n                $grid[$row][$col] = 0;\n  \
    \              for ($i = $row - 1; $i >= 0; $i--) {\n                    if ($grid[$i][$col]\
    \ == 1) {\n                        $grid[$i][$col] = 0;\n                    \
    \    $fill_count++;\n                    } else {\n                        break;\n\
    \                    }\n                }\n                for ($i = $row + 1;\
    \ $i < $rows; $i++) {\n                    if ($grid[$i][$col] == 1) {\n     \
    \                   $grid[$i][$col] = 0;\n                        $fill_count++;\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n                $fill_count++;\n            }\n \
    \       }\n    }\n    return $fill_count;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphrs_7mq.php:65\n\
    Stack trace:\n#0 /tmp/tmpphrs_7mq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpphrs_7mq.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n\
    \    return $max > $capacity ? 0 : $capacity - $max;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9e5388h6.php:41\n\
    Stack trace:\n#0 /tmp/tmp9e5388h6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9e5388h6.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        $fill = 0;\n        for ($j=0; $j<$num_cols;\
    \ $j++) {\n            $fill += $grid[$i][$j];\n            if ($fill > $capacity)\
    \ {\n                $fill = $capacity;\n            }\n        }\n        $max_fill\
    \ = max($max_fill, $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodwbcr1l.php:50\n\
    Stack trace:\n#0 /tmp/tmpodwbcr1l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpodwbcr1l.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\t$max_fill = 0;\n\
    \tforeach ($grid as $r) {\n\t\t$fill = 0;\n\t\tforeach ($r as $c) {\n\t\t\tif\
    \ ($c == 1) {\n\t\t\t\t$fill++;\n\t\t\t} else {\n\t\t\t\t$max_fill = max($max_fill,\
    \ $fill);\n\t\t\t\t$fill = 0;\n\t\t\t}\n\t\t}\n\t\t$max_fill = max($max_fill,\
    \ $fill);\n\t}\n\treturn floor($max_fill / $capacity);\n}\n\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity).\"\\\
    n\";\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\n\
    echo max_fill($grid, $capacity).\"\\n\";\n$grid = [[0,0,0], [0,0,0]];\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_v4thit.php:60\n\
    Stack trace:\n#0 /tmp/tmpd_v4thit.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpd_v4thit.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (sizeof($grid)\
    \ === 0) {\n        return 0;\n    }\n    $n_rows = sizeof($grid);\n    $n_cols\
    \ = sizeof($grid[0]);\n    $row_max = array_fill(0, $n_rows, -1);\n    $col_max\
    \ = array_fill(0, $n_cols, -1);\n    $max_fill = 0;\n    for ($row=0; $row<$n_rows;\
    \ $row++) {\n        for ($col=0; $col<$n_cols; $col++) {\n            if ($grid[$row][$col]\
    \ === 1) {\n                $row_max[$row] = $col;\n                $col_max[$col]\
    \ = $row;\n            }\n        }\n    }\n    for ($row=0; $row<$n_rows; $row++)\
    \ {\n        if ($row_max[$row] >= 0) {\n            $max_fill++;\n          \
    \  $max_fill += floor($row_max[$row] / $capacity);\n        }\n    }\n    for\
    \ ($col=0; $col<$n_cols; $col++) {\n        if ($col_max[$col] >= 0) {\n     \
    \       $max_fill++;\n            $max_fill += floor($col_max[$col] / $capacity);\n\
    \        }\n    }\n    return $max_fill;\n}\n$grid = array(\n    array(0,0,1,0),\n\
    \    array(0,1,0,0),\n    array(1,1,1,1)\n);\n$bucket_capacity = 1;\necho \"total\
    \ fills : \" . max_fill($grid, $bucket_capacity) . \"\\n\";\n$grid = array(\n\
    \    array(0,0,1,1),\n    array(0,0,0,0),\n    array(1,1,1,1),\n    array(0,1,1,1)\n\
    );\n$bucket_capacity = 2;\necho \"total fills : \" . max_fill($grid, $bucket_capacity)\
    \ . \"\\n\";\n$grid = array(\n\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprreh9t21.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // step 0: make\
    \ a list of wells that need to be filled\n    $need_to_fill = [];\n    foreach\
    \ ($grid as $row) {\n        foreach ($row as $index => $col) {\n            if\
    \ ($col == 1) {\n                $need_to_fill[] = $index;\n            }\n  \
    \      }\n    }\n    // step 1: fill the need_to_fill wells\n    $result = 0;\n\
    \    $count = count($need_to_fill);\n    for ($i = 0; $i < $count; $i++) {\n \
    \       $result += $capacity;\n        $need_to_fill[$i] -= $capacity;\n     \
    \   if ($need_to_fill[$i] <= 0) {\n            unset($need_to_fill[$i]);\n   \
    \     }\n    }\n    // step 2: distribute the water in the wells\n    if (count($need_to_fill)\
    \ > 0) {\n        $result += max_fill($grid, max($need_to_fill));\n    }\n   \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpm6_efq1u.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fills =\
    \ [];\n    for ($i = 0; $i < count($grid); $i++) {\n        $max_fills[$i] = 0;\n\
    \        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fills[$i]++;\n            }\n        }\n    }\n\
    \    $fills = 0;\n    for ($i = 0; $i < count($max_fills); $i++) {\n        $fills\
    \ += floor($max_fills[$i] / $capacity);\n        if ($max_fills[$i] % $capacity\
    \ > 0) {\n            $fills++;\n        }\n    }\n    return $fills;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxsm_6__.php:53\n\
    Stack trace:\n#0 /tmp/tmpzxsm_6__.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpzxsm_6__.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_max = array_fill(0,\
    \ count($grid), array_fill(0, count($grid[0]), 0));\n    for ($i = 0; $i < count($grid);\
    \ $i++) {\n        for ($j = 0; $j < count($grid[0]); $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $row_max[$i][$j] = $capacity;\n    \
    \        } else if ($j > 0) {\n                $row_max[$i][$j] = $row_max[$i][$j\
    \ - 1];\n            }\n        }\n    }\n    $row_max_pos = array_fill(0, count($grid),\
    \ array_fill(0, count($grid[0]), 0));\n    for ($i = 0; $i < count($grid); $i++)\
    \ {\n        for ($j = 0; $j < count($grid[0]); $j++) {\n            if ($row_max[$i][$j]\
    \ != 0) {\n                $row_max_pos[$i][$j] = $i;\n            } else if ($j\
    \ > 0) {\n                $row_max_pos[$i][$j] = $row_max_pos[$i][$j - 1];\n \
    \           }\n        }\n    }\n    $max_fill = 0;\n    for ($j = 0; $j < count($grid[0]);\
    \ $j++) {\n        $max_fill = max($max_fill, $row_max[$row_max_pos[0][$j]][$j]);\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y14r42j.php:61\n\
    Stack trace:\n#0 /tmp/tmp2y14r42j.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp2y14r42j.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (count($grid)\
    \ === 0) {\n        return 0;\n    }\n    $result = 0;\n    $num_rows = count($grid);\n\
    \    $num_cols = count($grid[0]);\n    $first_row = $grid[0];\n    $level = min($capacity,\
    \ array_sum($first_row));\n    for ($i=0; $i<$num_cols; $i++) {\n        $grid[0][$i]\
    \ -= $level;\n    }\n    $result += $level;\n    for ($i=1; $i<$num_rows; $i++)\
    \ {\n        $row = $grid[$i];\n        $level = 0;\n        for ($j=0; $j<$num_cols;\
    \ $j++) {\n            $curr = $row[$j];\n            if ($curr > 0) {\n     \
    \           $to_move = min($curr, $capacity - $level);\n                $result\
    \ += $to_move;\n                $level += $to_move;\n                $row[$j]\
    \ -= $to_move;\n            }\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgc6ksbo.php:62\n\
    Stack trace:\n#0 /tmp/tmppgc6ksbo.php(69): test()\n#1 {main}\n  thrown in /tmp/tmppgc6ksbo.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $grid_size =\
    \ count($grid);\n    $cell_size = count($grid[0]);\n    $max_fill = 0;\n    //\
    \ iterate over columns\n    for ($i=0; $i<$cell_size; $i++) {\n        $fill =\
    \ 0;\n        // iterate over rows\n        for ($j=0; $j<$grid_size; $j++) {\n\
    \            $fill += $grid[$j][$i];\n            if ($fill > $capacity) {\n \
    \               $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\n$grid = [\n    [0,0,1,0],\n\
    \    [0,1,0,0],\n    [1,1,1,1]\n];\nassert(max_fill($grid, 1) == 6);\n$grid =\
    \ [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\nassert(max_fill($grid,\
    \ 2) == 5);\n$grid = [\n    [0,0,0],\n    [0,0,0]\n];\nassert(max_fill($grid,\
    \ 5) == 0);\necho \"OK\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(max_fill($grid, 1) == 6) failed in /tmp/tmpw72kr5se.php\
    \ on line 52\n\nWarning: assert(): assert(max_fill($grid, 2) == 5) failed in /tmp/tmpw72kr5se.php\
    \ on line 59\nOK\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw72kr5se.php:71\n\
    Stack trace:\n#0 /tmp/tmpw72kr5se.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpw72kr5se.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_fill = 0;\n    for ($r = 0; $r < $rows;\
    \ $r++) {\n        for ($c = 0; $c < $cols; $c++) {\n            if ($grid[$r][$c]\
    \ === 1) {\n                $this_well = 1;\n                $r_start = $r;\n\
    \                $c_start = $c;\n                for ($r_next = $r+1; $r_next\
    \ < $rows; $r_next++) {\n                    if ($grid[$r_next][$c] === 1) {\n\
    \                        $this_well++;\n                    } else {\n       \
    \                 break;\n                    }\n                }\n         \
    \       for ($c_next = $c+1; $c_next < $cols; $c_next++) {\n                 \
    \   $this_column = 0;\n                    for ($r_inner = $r_start; $r_inner\
    \ < $r_next; $r_inner++) {\n                        if ($grid[$r_inner][$c_next]\
    \ === 1) {\n                            $this_column++;\n                    \
    \    } else {\n                            break;\n                        }\n\
    \                    }\n                    if ($this_column === $r_next - $r_start)\
    \ {\n                        $this_well += $this_column;\n                   \
    \ } else {\n                        break;\n                    }\n          \
    \      }\n                $max_fill = max($max_fill, $this_well);\n          \
    \  }\n        }\n    }\n    return ceil($max_fill / $capacity);\n}\n$grid = [\n\
    \    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity = 1;\necho\
    \ max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n  \
    \  [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$bucket_capacity = 2;\necho\
    \ max_fill($\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7mr95j5l.php on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_hylvvc.php:36\n\
    Stack trace:\n#0 /tmp/tmpq_hylvvc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq_hylvvc.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $visited = array_fill(0, $rows, array_fill(0,\
    \ $cols, 0));\n    $fill = 0;\n    // start with first row\n    for ($j=0; $j<$cols;\
    \ $j++) {\n        if ($grid[0][$j] === 1) {\n            $visited[0][$j] = 1;\n\
    \            $fill++;\n        }\n    }\n    for ($i=1; $i<$rows; $i++) {\n  \
    \      // fill from the previous row\n        for ($j=0; $j<$cols; $j++) {\n \
    \           if ($grid[$i][$j] === 1 && $visited[$i-1][$j] === 1) {\n         \
    \       $visited[$i][$j] = 1;\n                $fill++;\n            }\n     \
    \   }\n        // fill from both left and right\n        for ($j=0; $j<$cols;\
    \ $j++) {\n            if ($grid[$i][$j] === 1 && $j > 0 && $j < $cols-1 && $visited[$i][$j-1]\
    \ && $visited[$i][$j+1]) {\n                $visited[$i][$j] = 1;\n          \
    \      $fill++;\n            }\n        }\n        // fill from both above and\
    \ below\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j] ===\
    \ 1 && $visited[$i-1][$j] && $visited[$i+1][$j]) {\n                $visited[$i][$j]\
    \ = 1;\n                $fill++;\n            }\n        }\n    }\n    return\
    \ $fill;\n}\necho \"max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) = \" . max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1)\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm70qerzd.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $fill = $drops\
    \ = 0;\n    foreach ($grid as $row) {\n        foreach ($row as $cell) {\n   \
    \         $fill += $cell;\n            if ($fill == $capacity) {\n           \
    \     $drops++;\n                $fill = 0;\n            }\n        }\n    }\n\
    \    return $drops;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq5fcllv.php:48\n\
    Stack trace:\n#0 /tmp/tmplq5fcllv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplq5fcllv.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $max_water = 0;\n    for\
    \ ($i=0; $i<$row_count; $i++) {\n        for ($j=0; $j<$col_count; $j++) {\n \
    \           $max_water = max($max_water, $grid[$i][$j]);\n        }\n    }\n \
    \   $low = 0;\n    $high = $max_water;\n    while ($low < $high) {\n        $mid\
    \ = ($low + $high) / 2;\n        $fill_count = 0;\n        for ($i=0; $i<$row_count;\
    \ $i++) {\n            for ($j=0; $j<$col_count; $j++) {\n                $fill_count\
    \ += max(0, $grid[$i][$j] - $mid);\n            }\n        }\n        if ($fill_count\
    \ <= $capacity) {\n            $high = $mid;\n        } else {\n            $low\
    \ = $mid + 1;\n        }\n    }\n    $count = 0;\n    for ($i=0; $i<$row_count;\
    \ $i++) {\n        for ($j=0; $j<$col_count; $j++) {\n            $count += max(0,\
    \ $grid[$i][$j] - $low);\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeucyenn.php:67\n\
    Stack trace:\n#0 /tmp/tmpzeucyenn.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpzeucyenn.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $drops = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($j = 0; $j\
    \ < $cols; $j++) {\n        $filled = $capacity;\n        for ($i = 0; $i < $rows;\
    \ $i++) {\n            if ($grid[$i][$j] == 1) {\n                if ($filled\
    \ <= 0) {\n                    $drops++;\n                    $filled = $capacity;\n\
    \                }\n                $filled--;\n            }\n        }\n   \
    \ }\n    return $drops;\n}\n$grid1 = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n\
    ];\n$capacity1 = 1;\necho max_fill($grid1, $capacity1).\"\\n\";\n$grid2 = [\n\
    \    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$capacity2\
    \ = 2;\necho max_fill($grid2, $capacity2).\"\\n\";\n$grid3 = [\n    [0,0,0],\n\
    \    [0,0,0]\n];\n$capacity3 = 5;\necho max_fill($grid3, $capacity3).\"\\n\";\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtfj4q6d.php:73\n\
    Stack trace:\n#0 /tmp/tmpdtfj4q6d.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpdtfj4q6d.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $well_count = count($grid);\n    $row_len = count($grid[0]);\n    $col_count\
    \ = $row_len - 1;\n    while ($col_count >= 0) {\n        $water_in_col = 0;\n\
    \        $count_in_row = 0;\n        for ($i = 0; $i < $well_count; $i++) {\n\
    \            if ($grid[$i][$col_count] == 1) {\n                $count_in_row++;\n\
    \                $water_in_col += 1;\n            }\n        }\n        $no_water_in_col\
    \ = $well_count - $count_in_row;\n        $to_add = min($water_in_col, $no_water_in_col,\
    \ $capacity - $water_in_col, $capacity - $no_water_in_col);\n        if ($to_add\
    \ > 0) {\n            $count += $to_add;\n            $water_in_col += $to_add;\n\
    \            $no_water_in_col -= $to_add;\n            for ($i = 0; $i < $well_count;\
    \ $i++) {\n                if ($water_in_col > 0 && $grid[$i][$col_count] == 1)\
    \ {\n                    $grid[$i][$col_count] = 0;\n                    $water_in_col--;\n\
    \                } else if ($no_water_in_col > 0 && $grid[$i][$col_count] == 0)\
    \ {\n                    $grid[$i][$col_count] = 1;\n                    $no_water_in_col--;\n\
    \                }\n            }\n        }\n        $col_count--;\n    }\n \
    \   return $count;\n}\n$tests = [];\n$tests[] = [\n    'input' => [\n        'grid'\
    \ => [\n            [0,0,1,0],\n            [0,1,0,0],\n            [1,1,1,1]\n\
    \        ],\n        'bucket_capacity' => 1\n    ],\n    'output' => 6\n];\n$tests[]\
    \ = [\n\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp99j0k3uv.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $cols = count($grid[0]);\n\
    \    $rows = count($grid);\n    $max_rows = $rows;\n    $result = 0;\n    for\
    \ ($col = 0; $col < $cols; $col++) {\n        $total_fill = 0;\n        for ($row\
    \ = 0; $row < $rows; $row++) {\n            if ($grid[$row][$col] === 0) {\n \
    \               continue;\n            }\n            $row_max = $max_rows;\n\
    \            if ($row_max === $row) {\n                $row_max--;\n         \
    \   }\n            $total_fill += $row_max - $row;\n        }\n        $result\
    \ += ceil($total_fill / $capacity);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w_ks_oa.php:55\n\
    Stack trace:\n#0 /tmp/tmp6w_ks_oa.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp6w_ks_oa.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $len = count($grid);\n\
    \    $max = 0;\n    for ($i=0; $i<$len; $i++) {\n        $max = max($max, array_sum($grid[$i]));\n\
    \    }\n    $rows = array_fill(0, $len, $max);\n    $cols = array_fill(0, $len,\
    \ $max);\n    while (true) {\n        $sum = 0;\n        for ($i=0; $i<$len; $i++)\
    \ {\n            for ($j=0; $j<$len; $j++) {\n                $diff = $rows[$i]\
    \ + $cols[$j] - $grid[$i][$j];\n                if ($diff > 0) {\n           \
    \         $rows[$i] -= $diff;\n                    $cols[$j] -= $diff;\n     \
    \               $sum += $diff;\n                }\n            }\n        }\n\
    \        if ($sum == 0) break;\n    }\n    $ans = 0;\n    for ($i=0; $i<$len;\
    \ $i++) {\n        $ans += $rows[$i] + $cols[$i];\n    }\n    return $ans;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjz2s24c.php:62\n\
    Stack trace:\n#0 /tmp/tmpjjz2s24c.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpjjz2s24c.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $nrow = count($grid);\n\
    \    $ncol = count($grid[0]);\n    $n = max($nrow, $ncol);\n    $nbucket = 0;\n\
    \    for ($row = 0; $row < $nrow; $row++) {\n        for ($col = 0; $col < $ncol;\
    \ $col++) {\n            $nbucket += $grid[$row][$col];\n        }\n    }\n  \
    \  return max($nbucket, ($n * $capacity) - $nbucket);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavrx2qzy.php:47\n\
    Stack trace:\n#0 /tmp/tmpavrx2qzy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpavrx2qzy.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $ans = 0;\n\
    \    $N = count($grid);\n    $M = count($grid[0]);\n    foreach ($grid as $well)\
    \ {\n        $well_height = max($well);\n        $initial_height = min($well);\n\
    \        $bucket_max_fill = $capacity;\n        if ($initial_height > 0) {\n \
    \           $low_index = 0;\n            $high_index = $M-1;\n            for\
    \ ($i = 0; $i < $M; $i++) {\n                if ($well[$i] == $initial_height)\
    \ {\n                    $low_index = $i;\n                    break;\n      \
    \          }\n            }\n            for ($i = $M-1; $i >= 0; $i--) {\n  \
    \              if ($well[$i] == $initial_height) {\n                    $high_index\
    \ = $i;\n                    break;\n                }\n            }\n      \
    \      $bucket_max_fill -= $high_index - $low_index + 1;\n        }\n        $ans\
    \ += $bucket_max_fill;\n    }\n    return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9oovim5.php:63\n\
    Stack trace:\n#0 /tmp/tmpu9oovim5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpu9oovim5.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $x = count($grid);\n\
    \    $y = count($grid[0]);\n    $pool = 0;\n    $water = 0;\n    for ($i = 0;\
    \ $i < $x; $i++) {\n        for ($j = 0; $j < $y; $j++) {\n            $pool +=\
    \ $grid[$i][$j];\n        }\n    }\n    return ($pool * $capacity) - array_sum($grid);\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2gazqja.php:47\n\
    Stack trace:\n#0 /tmp/tmpk2gazqja.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk2gazqja.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $buckets = count($grid[0]);\n    $total_water = 0;\n    for ($w = 0; $w <\
    \ $wells; $w++) {\n        for ($b = 0; $b < $buckets; $b++) {\n            $total_water\
    \ += $grid[$w][$b];\n        }\n    }\n    $buckets_per_well = floor($total_water\
    \ / $capacity);\n    $total_cycles = $buckets_per_well * $wells;\n    $remaining_water\
    \ = $total_water - $buckets_per_well * $capacity;\n    $remaining_wells = 0;\n\
    \    for ($w = 0; $w < $wells; $w++) {\n        $remaining_water_in_well = 0;\n\
    \        for ($b = 0; $b < $buckets; $b++) {\n            $remaining_water_in_well\
    \ += $grid[$w][$b];\n        }\n        if ($remaining_water_in_well == $remaining_water)\
    \ {\n            $remaining_wells++;\n        }\n    }\n    $extra_cycles = floor($remaining_water\
    \ / $remaining_wells);\n    $total_cycles += $extra_cycles;\n    return $total_cycles;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmp9rs7te_r.php on line 51\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp9rs7te_r.php:60\nStack trace:\n\
    #0 /tmp/tmp9rs7te_r.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp9rs7te_r.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($r = 0; $r\
    \ < $rows; $r++) {\n        for ($c = 0; $c < $cols; $c++) {\n            if ($grid[$r][$c]\
    \ > 0) {\n                $grid[$r][$c] = 0;\n                $max = max($max,\
    \ 1 + max_fill($grid, $capacity - 1));\n                $grid[$r][$c] = 1;\n \
    \           }\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y5rbh7v.php:50\n\
    Stack trace:\n#0 /tmp/tmp4y5rbh7v.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4y5rbh7v.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    //\n    // Write\
    \ your code here.\n    //\n    $cnt = 0;\n    $map = [];\n    foreach ($grid as\
    \ $row) {\n        $map[] = [];\n        $i = 0;\n        foreach ($row as $cell)\
    \ {\n            $map[count($map) - 1][] = $i;\n            $i += $cell;\n   \
    \     }\n    }\n    foreach ($map as $row) {\n        $i = 0;\n        while ($i\
    \ < count($row)) {\n            $j = min($i + $capacity, count($row) - 1);\n \
    \           while ($j >= $i) {\n                if ($row[$j] - $row[$i] > 0) {\n\
    \                    $i = $j;\n                    $cnt++;\n                 \
    \   break;\n                }\n                $j--;\n            }\n        \
    \    $i++;\n        }\n    }\n    return $cnt;\n}\n$grid = [\n    [0,0,1,0],\n\
    \    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity = 1;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n  \
    \  [1,1,1,1],\n    [0,1,1,1]\n];\n$bucket_capacity = 2;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,0],\n    [0,0,0]\n];\n$bucket_capacity\
    \ = 5;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfnj4lhpw.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $height = count($grid);\n\
    \    $length = count($grid[0]);\n    $max = 0;\n    for ($i = 0; $i < $height;\
    \ $i++) {\n        $total = 0;\n        for ($j = 0; $j < $length; $j++) {\n \
    \           $total += $grid[$i][$j];\n        }\n        $max = max($max, $total);\n\
    \    }\n    return intval(ceil($max / $capacity));\n}\n\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6_7j_8s.php:48\n\
    Stack trace:\n#0 /tmp/tmpl6_7j_8s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpl6_7j_8s.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $r = count($grid);\n\
    \    $c = count($grid[0]);\n    $max_fill = 0;\n    for ($i=0; $i<$r; $i++) {\n\
    \        $fill = 0;\n        for ($j=0; $j<$c; $j++) {\n            $fill += $grid[$i][$j];\n\
    \            if ($fill === $capacity) {\n                $max_fill = max($max_fill,\
    \ $fill);\n                $fill = 0;\n            }\n        }\n        $max_fill\
    \ = max($max_fill, $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2sz4gid.php:51\n\
    Stack trace:\n#0 /tmp/tmpx2sz4gid.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpx2sz4gid.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $well_max =\
    \ 0;\n    $max_n_drops = 0;\n    foreach ($grid as $well) {\n        $well_max\
    \ = max($well_max, max($well));\n        $drops = array_reduce($well, function($total,\
    \ $drop) use ($capacity) {\n            return $total + floor($drop / $capacity);\n\
    \        }, 0);\n        $max_n_drops = max($max_n_drops, $drops);\n    }\n  \
    \  return max($well_max, $max_n_drops);\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif9zzos1.php:46\n\
    Stack trace:\n#0 /tmp/tmpif9zzos1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpif9zzos1.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $ans = 0;\n    for ($j = 0; $j < $m; $j++) {\n\
    \        $ans += max_fill_in_column($grid, $capacity, $j);\n    }\n    return\
    \ $ans;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_fill_in_column()\
    \ in /tmp/tmprns8qiyu.php:34\nStack trace:\n#0 /tmp/tmprns8qiyu.php(39): max_fill(Array,\
    \ 1)\n#1 /tmp/tmprns8qiyu.php(43): candidate(Array, 1)\n#2 /tmp/tmprns8qiyu.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprns8qiyu.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $well_count\
    \ = count($grid);\n    $well_width = count($grid[0]);\n    $fill_count = 0;\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < $well_count) {\n        if ($grid[$i][$j]\
    \ == 1) {\n            // fill bucket\n            $fill_count++;\n          \
    \  // empty bucket\n            $j++;\n            while ($j < $well_width) {\n\
    \                if ($grid[$i][$j] == 1) {\n                    $j++;\n      \
    \          } else {\n                    break;\n                }\n         \
    \   }\n        } else {\n            $i++;\n        }\n    }\n    return $fill_count;\n\
    }\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity\
    \ = 1;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$bucket_capacity = 2;\necho\
    \ max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [\n    [0,0,0],\n    [0,0,0]\n\
    ];\n$bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdl94q3nh.php:80\n\
    Stack trace:\n#0 /tmp/tmpdl94q3nh.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpdl94q3nh.php\
    \ on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $capacity--;\n          \
    \      if ($capacity == 0) {\n                    $count++;\n                \
    \    $capacity = $capacity + $j;\n                }\n            }\n        }\n\
    \        $capacity = $capacity + $j;\n    }\n    return $count;\n}\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\nprint max_fill($grid, $capacity) . PHP_EOL;\n\
    $grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\nprint max_fill($grid,\
    \ $capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\nprint max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7\n10\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg1ppl1h.php:61\n\
    Stack trace:\n#0 /tmp/tmprg1ppl1h.php(68): test()\n#1 {main}\n  thrown in /tmp/tmprg1ppl1h.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $num_rows = count($grid);\n\
    \  $num_cols = count($grid[0]);\n  $num_moves = 0;\n  for ($i = 0; $i < $num_rows;\
    \ $i++) {\n    // Find all consecutive 1s in this row\n    $left_idx = 0;\n  \
    \  $right_idx = $num_cols - 1;\n    while ($left_idx < $num_cols && $grid[$i][$left_idx]\
    \ == 0) {\n      $left_idx++;\n    }\n    while ($right_idx >= 0 && $grid[$i][$right_idx]\
    \ == 0) {\n      $right_idx--;\n    }\n    if ($left_idx > $right_idx) {\n   \
    \   // No wells to fill in this row\n      continue;\n    }\n    $num_buckets\
    \ = $right_idx - $left_idx + 1;\n    $num_moves += intdiv($num_buckets, $capacity);\n\
    \    if ($num_buckets % $capacity > 0) {\n      $num_moves++;\n    }\n  }\n  return\
    \ $num_moves;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\n\
    $test_case_number = 1;\necho \"TEST CASE #$test_case_number\\n\";\necho \"Input:\
    \ \";\necho json_encode($grid);\necho \" $capacity\\n\";\necho \"Output: \" .\
    \ max_fill($grid, $capacity) . \"\\n\";\n\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]];\n$capacity = 2;\n$test_case_number = 2;\necho \"TEST CASE #$test_case_number\\\
    n\";\necho \"Input: \";\necho json_encode($grid);\necho \" $capacity\\n\";\necho\
    \ \"Output: \" . max_fill($grid, $capacity) . \"\\n\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbw588j5j.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $num_rows = count($grid);\n\
    \  $num_cols = count($grid[0]);\n  $max_fill = 0;\n  for ($i = 0; $i < $num_rows;\
    \ $i++) {\n    $num_filled = 0;\n    for ($j = 0; $j < $num_cols; $j++) {\n  \
    \    if ($grid[$i][$j] == 1) {\n        $num_filled++;\n      }\n    }\n    $max_fill\
    \ = max($max_fill, min($num_filled, $capacity));\n  }\n  return $max_fill;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqpih8rt.php:49\n\
    Stack trace:\n#0 /tmp/tmplqpih8rt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplqpih8rt.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $total_drops\
    \ = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        $curr_level = 0;\n\
    \        for ($j = 0; $j < count($grid[$i]); $j++) {\n            $curr_level\
    \ += $grid[$i][$j];\n            if ($curr_level >= $capacity) {\n           \
    \     $total_drops += $curr_level - $capacity;\n                $curr_level =\
    \ $capacity;\n            }\n        }\n    }\n    return $total_drops;\n}\n$grid1\
    \ = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity1 = 1;\necho max_fill($grid1,\
    \ $capacity1) . PHP_EOL;\n$grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $capacity2 = 2;\necho max_fill($grid2, $capacity2) . PHP_EOL;\n$grid3 = [[0,0,0],\
    \ [0,0,0]];\n$capacity3 = 5;\necho max_fill($grid3, $capacity3) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "3\n3\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwwm8chq.php:57\n\
    Stack trace:\n#0 /tmp/tmprwwm8chq.php(64): test()\n#1 {main}\n  thrown in /tmp/tmprwwm8chq.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $well_length = count($grid[0]);\n    $max_fill = 0;\n    for ($i=0; $i<$wells;\
    \ $i++) {\n        $fill = 0;\n        for ($j=0; $j<$well_length; $j++) {\n \
    \           $fill += $grid[$i][$j];\n            if ($fill > $capacity) {\n  \
    \              $fill = $capacity;\n            }\n        }\n        $max_fill\
    \ = max($max_fill, $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxmp2fxb.php:50\n\
    Stack trace:\n#0 /tmp/tmpqxmp2fxb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqxmp2fxb.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // your code\
    \ goes here\n    $n_rows = count($grid);\n    $n_cols = count($grid[0]);\n   \
    \ $total_filled = 0;\n    for ($col = 0; $col < $n_cols; $col++) {\n        $total_filled\
    \ += fill_row($grid, $col, $capacity);\n    }\n    return $total_filled;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fill_row() in\
    \ /tmp/tmpsc51scoa.php:35\nStack trace:\n#0 /tmp/tmpsc51scoa.php(40): max_fill(Array,\
    \ 1)\n#1 /tmp/tmpsc51scoa.php(44): candidate(Array, 1)\n#2 /tmp/tmpsc51scoa.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsc51scoa.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $grid_height\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    $lowerings = 0;\n \
    \   $position = [0, 0];\n    while ($position[0] < $grid_height) {\n        $bucket\
    \ = 0;\n        while ($bucket < $capacity && $position[1] < $grid_width) {\n\
    \            $bucket += $grid[$position[0]][$position[1]];\n            $position[1]++;\n\
    \        }\n        $lowerings++;\n        $position[0]++;\n    }\n    return\
    \ $lowerings;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\n\
    $output = max_fill($grid, $capacity);\nprint_r($output);\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3vbh0tb.php:54\n\
    Stack trace:\n#0 /tmp/tmpq3vbh0tb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpq3vbh0tb.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $height = count($grid);\n\
    \    $width = count($grid[0]);\n    $water = 0;\n    for ($i = 0; $i < $height;\
    \ $i++) {\n        for ($j = 0; $j < $width; $j++) {\n            $water += $grid[$i][$j];\n\
    \        }\n    }\n    return ceil($water / $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_f6lg83.php:45\n\
    Stack trace:\n#0 /tmp/tmp3_f6lg83.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3_f6lg83.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1)\n    // max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2)\n    // max_fill([[0,0,0], [0,0,0]], 5)\n    // max_fill([[0,0,0],\
    \ [0,0,0]], 1)\n    // max_fill([[0,0,0], [0,0,0]], 2)\n    // max_fill([[0,0,0],\
    \ [0,0,0]], 3)\n    // max_fill([[0,0,0], [0,0,0]], 4)\n    $number_of_wells =\
    \ count($grid);\n    $max_fill = 0;\n    $max_fills = [];\n    $max_fills[0] =\
    \ 0;\n    $max_fills[1] = 0;\n    $next_max_fill = 0;\n    $next_max_fills = [];\n\
    \    $bucket_pos = [];\n    $bucket_pos[0] = $capacity - 1;\n    $bucket_pos[1]\
    \ = $capacity - 1;\n    for ($i = 0; $i < $number_of_wells; $i++) {\n        $max_fill\
    \ = 0;\n        $max_fills = $next_max_fills;\n        $next_max_fill = 0;\n \
    \       $next_max_fills = [];\n        $bucket_pos = [];\n        for ($j = 0;\
    \ $j < $capacity; $j++) {\n            $next_max_fills[$j] = 0;\n            $bucket_pos[$j]\
    \ = 0;\n        }\n        $next_max_fills[$capacity] = 0;\n        $bucket_pos[$capacity]\
    \ = $capacity - 1;\n        $bucket_pos_max = $capacity;\n        $bucket_pos_min\
    \ = 0;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx3aofjgg.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $well_len = count($grid[0]);\n    $total_water = 0;\n    for ($i=0; $i<$wells;\
    \ $i++) {\n        $row_water = 0;\n        for ($j=0; $j<$well_len; $j++) {\n\
    \            $row_water += $grid[$i][$j];\n        }\n        $total_water +=\
    \ $row_water > $capacity ? $capacity : $row_water;\n    }\n    return $total_water;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpooizow5b.php:47\n\
    Stack trace:\n#0 /tmp/tmpooizow5b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpooizow5b.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  $water = 0;\n\
    \  foreach ($grid as $row) {\n    $water += array_sum($row);\n  }\n  return ceil($water\
    \ / $capacity);\n}\n\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$bucket_capacity\
    \ = 1;\n$result = max_fill($grid, $bucket_capacity);\nprint_r($result);\necho\
    \ \"\\n\";\n\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$bucket_capacity\
    \ = 2;\n$result = max_fill($grid, $bucket_capacity);\nprint_r($result);\necho\
    \ \"\\n\";\n\n$grid = [[0,0,0], [0,0,0]];\n$bucket_capacity = 5;\n$result = max_fill($grid,\
    \ $bucket_capacity);\nprint_r($result);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt89l1o5g.php:59\n\
    Stack trace:\n#0 /tmp/tmpt89l1o5g.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpt89l1o5g.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // check the\
    \ input\n    if (empty($grid) || $capacity <= 0) {\n        return 0;\n    }\n\
    \    // get the number of wells and their length\n    $num_wells = count($grid);\n\
    \    $well_length = count($grid[0]);\n    // compute the number of times we need\
    \ to lower the buckets\n    $num_fillings = 0;\n    for ($col = 0; $col < $well_length;\
    \ $col++) {\n        // count the number of wells that are completely empty\n\
    \        $num_empty_wells = 0;\n        for ($row = 0; $row < $num_wells; $row++)\
    \ {\n            // check if the well is full or empty\n            if ($grid[$row][$col]\
    \ == 0) {\n                $num_empty_wells++;\n            }\n        }\n   \
    \     // compute the number of fillings needed in this column\n        $num_fillings\
    \ += max(0, $num_wells - $num_empty_wells - $capacity + 1);\n    }\n    // return\
    \ the computed result\n    return $num_fillings;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyomc7x36.php:63\n\
    Stack trace:\n#0 /tmp/tmpyomc7x36.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpyomc7x36.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // row-wise\n\
    \    $count = 0;\n    foreach ($grid as $row) {\n        $capacity = $capacity\
    \ - (array_sum($row) * $row[0]);\n        if ($capacity < 0) {\n            $count\
    \ += (1 + $capacity);\n            $capacity = 0;\n        }\n    }\n    return\
    \ $count;\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\n\
    echo max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . PHP_EOL;\necho\
    \ max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-2\n-1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb02apldj.php:49\n\
    Stack trace:\n#0 /tmp/tmpb02apldj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpb02apldj.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, count(array_filter($row,\
    \ function($x) {\n            return $x === 1;\n        })));\n    }\n    return\
    \ min($max_fill, $capacity);\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9a8e3ap.php:43\n\
    Stack trace:\n#0 /tmp/tmpa9a8e3ap.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa9a8e3ap.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $result = 0;\n\
    \    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n    for\
    \ ($i = 0; $i < $grid_length; $i++) {\n        $curr_fill = 0;\n        for ($j\
    \ = 0; $j < $grid_width; $j++) {\n            $curr_fill += $grid[$i][$j];\n \
    \           if ($curr_fill == $capacity) {\n                $result++;\n     \
    \           $curr_fill = 0;\n            }\n        }\n        if ($curr_fill\
    \ != 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\
    $grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity1 = 1;\necho max_fill($grid1,\
    \ $capacity1).\"\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $fill = $capacity;\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $fill--;\n \
    \           }\n        }\n        if ($fill <= 0) {\n            return $capacity;\n\
    \        }\n    }\n    return $fill;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2swtvjz.php:48\n\
    Stack trace:\n#0 /tmp/tmpy2swtvjz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpy2swtvjz.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $f = new SplFixedArray($m);\n    for ($i=0; $i<$m;\
    \ $i++) {\n        $f[$i] = new SplFixedArray($n);\n    }\n    $f[0][0] = $grid[0][0];\n\
    \    $max_fill = 0;\n    for ($i=0; $i<$m; $i++) {\n        for ($j=0; $j<$n;\
    \ $j++) {\n            if ($i == 0 && $j == 0) {\n                continue;\n\
    \            }\n            $f[$i][$j] = $grid[$i][$j];\n            if ($i ==\
    \ 0) {\n                $f[$i][$j] += $f[$i][$j-1];\n            } else if ($j\
    \ == 0) {\n                $f[$i][$j] += $f[$i-1][$j];\n            } else {\n\
    \                $f[$i][$j] += max($f[$i-1][$j], $f[$i][$j-1]);\n            }\n\
    \            $max_fill = max($max_fill, $f[$i][$j]);\n        }\n    }\n    $nb_buckets\
    \ = $max_fill / $capacity;\n    if ($max_fill % $capacity > 0) {\n        $nb_buckets++;\n\
    \    }\n    return $nb_buckets;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpza_7k_hu.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $locations = [];\n    for ($i = 0; $i < count($grid); $i++) {\n        for\
    \ ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $locations[] = [$i, $j];\n            }\n        }\n    }\n\
    \    for ($i = 0; $i < count($locations); $i++) {\n        $grid[$locations[$i][0]][$locations[$i][1]]\
    \ = 0;\n        $count += 1;\n        if ($i < count($locations) - 1) {\n    \
    \        if ($locations[$i][0] == $locations[$i + 1][0]) {\n                if\
    \ ($locations[$i][1] + 1 == $locations[$i + 1][1]) {\n                    $locations[$i\
    \ + 1][1] = $locations[$i][1];\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7rsmnco.php:58\n\
    Stack trace:\n#0 /tmp/tmpe7rsmnco.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpe7rsmnco.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n  //TODO\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3z707fj.php:37\n\
    Stack trace:\n#0 /tmp/tmpg3z707fj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg3z707fj.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ [];\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill[] = $fill;\n                $fill\
    \ = 0;\n            }\n        }\n        $max_fill[] = $fill;\n    }\n    return\
    \ max($max_fill);\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwopnkac0.php:50\n\
    Stack trace:\n#0 /tmp/tmpwopnkac0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwopnkac0.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // The time\
    \ complexity is O(C*N) where C is the bucket capacity\n    // and N is the length\
    \ of the wells.\n    // The space complexity is O(N).\n    $max_drops = 0;\n \
    \   for ($i=0; $i<count($grid); $i++) {\n        $max_drops += max_fill_row($grid[$i],\
    \ $capacity);\n    }\n    return $max_drops;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_fill_row()\
    \ in /tmp/tmphvnks7tx.php:35\nStack trace:\n#0 /tmp/tmphvnks7tx.php(40): max_fill(Array,\
    \ 1)\n#1 /tmp/tmphvnks7tx.php(44): candidate(Array, 1)\n#2 /tmp/tmphvnks7tx.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphvnks7tx.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $rows_count = array_fill(0, $rows, $capacity);\n\
    \    $cols_count = array_fill(0, $cols, $capacity);\n    $loops = 0;\n    while\
    \ (true) {\n        $rows_change = false;\n        $cols_change = false;\n   \
    \     for ($r = 0; $r < $rows; $r++) {\n            for ($c = 0; $c < $cols; $c++)\
    \ {\n                if ($grid[$r][$c] == 1) {\n                    if ($rows_count[$r]\
    \ == 0 && $cols_count[$c] == 0) {\n                        return -1;\n      \
    \              }\n                    if ($rows_count[$r] > 0) {\n           \
    \             $rows_count[$r]--;\n                        $rows_change = true;\n\
    \                    }\n                    if ($cols_count[$c] > 0) {\n     \
    \                   $cols_count[$c]--;\n                        $cols_change =\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        if (!$rows_change && !$cols_change) {\n            break;\n        }\n\
    \        $loops++;\n    }\n    return $loops;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1uyz6_oc.php:67\n\
    Stack trace:\n#0 /tmp/tmp1uyz6_oc.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp1uyz6_oc.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // idea: keep\
    \ filling the wells with \"capacity\" until the well is full, \n    // then move\
    \ to the next well.\n    // if the bucket capacity is 1, you're essentially doing\
    \ a \"fill-all\"\n    // operation.\n    // if the bucket capacity is 2, you're\
    \ doing a \"fill-all\" operation,\n    // and then another \"fill-all\" operation\
    \ on each well (they won't overflow).\n    // and so on...\n    $count = 0;\n\
    \    $max = count($grid);\n    $maxc = count($grid[0]);\n    for ($i=0; $i<$max;\
    \ $i++) {\n        for ($j=0; $j<$maxc; $j++) {\n            $count += floor($grid[$i][$j]\
    \ / $capacity);\n            $grid[$i][$j] = $grid[$i][$j] % $capacity;\n    \
    \    }\n    }\n    return $count;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    echo max_fill($grid, 1) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]];\necho max_fill($grid, 2) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    echo max_fill($grid, 5) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp6ek484.php:59\n\
    Stack trace:\n#0 /tmp/tmprp6ek484.php(66): test()\n#1 {main}\n  thrown in /tmp/tmprp6ek484.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $depth = $capacity\
    \ + 1;\n    $fill = 0;\n    foreach ($grid as $row) {\n        $fill += 1;\n \
    \       $fill += intval(max($row) / $depth);\n    }\n    return $fill;\n}\n$grid\
    \ = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$bucket_capacity = 1;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $bucket_capacity = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,0], [0,0,0]];\n$bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokb9agf8.php:52\n\
    Stack trace:\n#0 /tmp/tmpokb9agf8.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpokb9agf8.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $i = 0;\n  \
    \  $j = 0;\n    $remaining = $capacity;\n    $count = 0;\n    foreach ($grid as\
    \ $row) {\n        $j = 0;\n        foreach ($row as $cell) {\n            $remaining\
    \ = $capacity;\n            while ($remaining > 0) {\n                if ($grid[$i][$j]\
    \ === 1) {\n                    $grid[$i][$j] = 0;\n                    $remaining--;\n\
    \                }\n                $j++;\n            }\n            $count++;\n\
    \        }\n        $i++;\n    }\n    return $count;\n}\n$grid = [\n    [0,0,1,0],\n\
    \    [0,1,0,0],\n    [1,1,1,1]\n];\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n\
    ];\n$capacity = 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [\n  \
    \  [0,0,0],\n    [0,0,0]\n];\n$capacity = 5;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8abhu57q.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $fill = 0;\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            if ($grid[$i][$j] > 0) {\n                $fill += ceil($grid[$i][$j]\
    \ / $capacity);\n            }\n        }\n    }\n    return $fill;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdbo727c.php:45\n\
    Stack trace:\n#0 /tmp/tmpvdbo727c.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvdbo727c.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $s = sizeof($grid);\n\
    \    $m = sizeof($grid[0]);\n    $max = 0;\n    for ($i=0; $i<$s; $i++) {\n  \
    \      $row = $grid[$i];\n        for ($j=0; $j<$m; $j++) {\n            if ($row[$j]\
    \ == 1) {\n                $max += $capacity;\n            }\n        }\n    }\n\
    \    return $max;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi39xr2rz.php:49\n\
    Stack trace:\n#0 /tmp/tmpi39xr2rz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpi39xr2rz.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n// WRITE YOUR CODE\
    \ HERE\n    $n_rows = count($grid);\n    $n_cols = count($grid[0]);\n    $fill_count\
    \ = 0;\n    while(true) {\n        $row_count = -1;\n        for($r=0; $r<$n_rows;\
    \ $r++) {\n            $row_count = max($row_count, count(array_filter($grid[$r])));\n\
    \        }\n        if($row_count == 0) {\n            break;\n        }\n   \
    \     for($c=0; $c<$n_cols; $c++) {\n            for($r=0; $r<$n_rows; $r++) {\n\
    \                if($row_count == 0) {\n                    break;\n         \
    \       }\n                if($grid[$r][$c] == 1) {\n                    $grid[$r][$c]\
    \ = 0;\n                    $row_count--;\n                }\n            }\n\
    \            $fill_count++;\n        }\n    }\n    return $fill_count;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu53ozkl.php:62\n\
    Stack trace:\n#0 /tmp/tmpgu53ozkl.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpgu53ozkl.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $min_height\
    \ = 0;\n    $num_moves = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n   \
    \     for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $min_height++;\n            }\n        }\n    }\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n            if ($grid[$i][$j] === 1) {\n                $grid[$i][$j]\
    \ = $min_height;\n            }\n        }\n    }\n    while (1) {\n        $min_height\
    \ = PHP_INT_MAX;\n        for ($i = 0; $i < count($grid); $i++) {\n          \
    \  for ($j = 0; $j < count($grid[$i]); $j++) {\n                if ($grid[$i][$j]\
    \ > 0) {\n                    $min_height = min($min_height, $grid[$i][$j]);\n\
    \                }\n            }\n        }\n        if ($min_height === PHP_INT_MAX)\
    \ {\n            break;\n        }\n        $num_moves += $min_height;\n     \
    \   for ($i = 0; $i < count($grid); $i++) {\n            for ($j = 0; $j < count($grid[$i]);\
    \ $j++) {\n                if ($grid[$i][$j] > 0) {\n                    $grid[$i][$j]\
    \ -= $min_height;\n                }\n            }\n        }\n    }\n    return\
    \ $num_moves;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaumv0rc3.php:75\n\
    Stack trace:\n#0 /tmp/tmpaumv0rc3.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpaumv0rc3.php\
    \ on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $num_of_rounds = 0;\n \
    \   $bucket = $capacity;\n    for ($row = 0; $row < $num_rows; $row++) {\n   \
    \     for ($col = 0; $col < $num_cols; $col++) {\n            $delta = $grid[$row][$col]\
    \ - $bucket;\n            if ($delta < 0) {\n                $bucket = abs($delta);\n\
    \            } else if ($delta > 0) {\n                $bucket = $capacity - $delta;\n\
    \            } else {\n                $bucket = $capacity;\n            }\n \
    \           if ($bucket < $capacity) {\n                $num_of_rounds++;\n  \
    \          }\n        }\n    }\n    return $num_of_rounds;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q6dzrri.php:56\n\
    Stack trace:\n#0 /tmp/tmp5q6dzrri.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp5q6dzrri.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $l = count($grid);\n    $w = count($grid[0]);\n    for ($i=0; $i<$l;\
    \ $i++) {\n        for ($j=0; $j<$w; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $max_fill += $capacity;\n            }\n        }\n  \
    \  }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr83fmka9.php:48\n\
    Stack trace:\n#0 /tmp/tmpr83fmka9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr83fmka9.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $r = count($grid);\n\
    \    $c = count($grid[0]);\n    $buckets = 0;\n    for ($i=0; $i<$r; $i++) {\n\
    \        $fill = 0;\n        for ($j=0; $j<$c; $j++) {\n            $fill += $grid[$i][$j];\n\
    \            if ($fill >= $capacity) {\n                $buckets++;\n        \
    \        $fill = 0;\n            }\n        }\n        if ($fill > 0) {\n    \
    \        $buckets++;\n        }\n    }\n    return $buckets;\n}\necho max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n5\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $i) {\n            if ($i == 1) {\n                $fill += 1;\n        \
    \    } else {\n                $max_fill = max($max_fill, $fill);\n          \
    \      $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return intval(ceil($max_fill / $capacity));\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52qpxkte.php:50\n\
    Stack trace:\n#0 /tmp/tmp52qpxkte.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp52qpxkte.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $result = 0;\n    for ($row = 0; $row < $rows;\
    \ $row++) {\n        $max_fill = -1;\n        for ($col = 0; $col < $cols; $col++)\
    \ {\n            if ($grid[$row][$col] == 1) {\n                $max_fill = $col;\n\
    \            }\n        }\n        if ($max_fill != -1) {\n            $min_fill\
    \ = PHP_INT_MAX;\n            for ($col = $max_fill + 1; $col < $cols; $col++)\
    \ {\n                if ($grid[$row][$col] == 1) {\n                    $min_fill\
    \ = $col;\n                    break;\n                }\n            }\n    \
    \        if ($min_fill == PHP_INT_MAX) {\n                $result += $capacity;\n\
    \            } else {\n                $result += $capacity - ($min_fill - $max_fill\
    \ - 1);\n            }\n        }\n    }\n    return $result;\n}\n$grid = [\n\
    \    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity = 1;\necho\
    \ \"max_fill($bucket_capacity, grid) = \" . max_fill($grid, $bucket_capacity)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "max_fill(1, grid) = 3\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppofrzzuv.php:69\nStack trace:\n#0 /tmp/tmppofrzzuv.php(76): test()\n\
    #1 {main}\n  thrown in /tmp/tmppofrzzuv.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_buckets\
    \ = 0;\n    foreach ($grid as $row) {\n        $sum = 0;\n        for ($i = 0;\
    \ $i < sizeof($row); $i++) {\n            $sum += $row[$i];\n            if ($sum\
    \ == $capacity) {\n                $num_buckets++;\n                $sum = 0;\n\
    \            } else if ($sum > $capacity) {\n                $num_buckets++;\n\
    \                $sum = $row[$i];\n            }\n        }\n        if ($sum\
    \ > 0) {\n            $num_buckets++;\n        }\n    }\n    return $num_buckets;\n\
    }\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$bucket_capacity = 1;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $bucket_capacity = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,0], [0,0,0]];\n$bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $height = count($grid);\n    $width = count($grid[0]);\n    for ($row = 0;\
    \ $row < $height; $row++) {\n        for ($col = 0; $col < $width; $col++) {\n\
    \            $block = $grid[$row][$col];\n            if ($block) {\n        \
    \        $count++;\n                $grid[$row][$col] = 0;\n                $max_capacity\
    \ = $capacity;\n                while ($max_capacity && $row > 0) {\n        \
    \            $row--;\n                    $block = $grid[$row][$col];\n      \
    \              if ($block && $max_capacity >= $block) {\n                    \
    \    $max_capacity -= $block;\n                        $grid[$row][$col] = 0;\n\
    \                    } else if ($block) {\n                        $grid[$row][$col]\
    \ -= $max_capacity;\n                        $max_capacity = 0;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n$grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$grid2 = [[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]];\n$grid3 = [[0,0,0], [0,0,0]];\n$grid4 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpilnpzjyz.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $ans = 0;\n    for ($i=0; $i<$rows; $i++) {\n\
    \        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $ans++;\n                $grid[$i][$j] = 0;\n               \
    \ fill($grid, $i, $j, $capacity);\n            }\n        }\n    }\n    return\
    \ $ans;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fill() in /tmp/tmpgulhcxia.php:38\n\
    Stack trace:\n#0 /tmp/tmpgulhcxia.php(45): max_fill(Array, 1)\n#1 /tmp/tmpgulhcxia.php(49):\
    \ candidate(Array, 1)\n#2 /tmp/tmpgulhcxia.php(56): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpgulhcxia.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (!is_array($grid)\
    \ || count($grid) == 0) {\n        return 0;\n    }\n    $max = array_fill(0,\
    \ count($grid[0]), 0);\n    for ($j = 0; $j < count($grid[0]); $j++) {\n     \
    \   $max[$j] = $grid[0][$j];\n        for ($i = 1; $i < count($grid); $i++) {\n\
    \            $max[$j] = max($max[$j], $grid[$i][$j]);\n        }\n    }\n    $sum\
    \ = 0;\n    for ($j = 0; $j < count($grid[0]); $j++) {\n        $sum += $max[$j];\n\
    \    }\n    return (int)floor($sum / $capacity);\n}\n$grid = [\n    [0,0,1,0],\n\
    \    [0,1,0,0],\n    [1,1,1,1]\n];\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . \"\\n\";\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n\
    ];\n$capacity = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n$grid = [\n  \
    \  [0,0,0],\n    [0,0,0]\n];\n$capacity = 5;\necho max_fill($grid, $capacity)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5b93t8l.php:72\n\
    Stack trace:\n#0 /tmp/tmpn5b93t8l.php(79): test()\n#1 {main}\n  thrown in /tmp/tmpn5b93t8l.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // BEGIN (write\
    \ your solution here)\n    $wells_count = count($grid);\n    $units_count = count($grid[0]);\n\
    \    $num_buckets = 0;\n    $now_bucket = $capacity;\n    $now_row = 0;\n    $now_column\
    \ = 0;\n    while ($now_row <= $wells_count - 1) {\n        while ($now_column\
    \ <= $units_count - 1) {\n            if ($grid[$now_row][$now_column] == 1) {\n\
    \                $now_bucket--;\n                if ($now_bucket == 0) {\n   \
    \                 $num_buckets++;\n                    $now_bucket = $capacity;\n\
    \                }\n            }\n            $now_column++;\n        }\n   \
    \     $now_row++;\n        $now_column = 0;\n    }\n    return $num_buckets;\n\
    \    // END\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpev48aunx.php:60\n\
    Stack trace:\n#0 /tmp/tmpev48aunx.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpev48aunx.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // we go through\
    \ the grid and look for each 1.\n    // we fill the bucket and start lowering\
    \ it.\n    // we continue until the end of the row, and lower it all the way down.\n\
    \    // we do this for each row.\n    // return the number of times we lowered\
    \ the bucket.\n    $lowerings = 0;\n    for ($i = 0; $i < count($grid); $i++)\
    \ {\n        $water = 0;\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n\
    \            $water += $grid[$i][$j];\n            if ($water == $capacity) {\n\
    \                $lowerings++;\n                $water = 0;\n            }\n \
    \       }\n        if ($water > 0) {\n            $lowerings++;\n        }\n \
    \   }\n    return $lowerings;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $capacity = 1;\n$response = max_fill($grid, $capacity);\necho(\"$response == 6\\\
    n\");\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\n\
    $response = max_fill($grid, $capacity);\necho(\"$response == 5\\n\");\n$grid =\
    \ [[0,0,0], [0,0,0]];\n$capacity = 5;\n$response = max_fill($grid, $capacity);\n\
    echo(\"$response == 0\\n\");\n$grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmnlzjeox.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $s = 0;\n    for ($i=0; $i<$rows; $i++) {\n\
    \        for ($j=0; $j<$cols; $j++) {\n            $s += $grid[$i][$j];\n    \
    \    }\n    }\n    if ($s == 0) {\n        return 0;\n    }\n    if ($capacity\
    \ > $s) {\n        return 1;\n    }\n    $c = 1;\n    while ($s > 0) {\n     \
    \   for ($i=0; $i<$rows; $i++) {\n            for ($j=0; $j<$cols; $j++) {\n \
    \               if ($grid[$i][$j] > 0) {\n                    $grid[$i][$j] -=\
    \ 1;\n                    $s -= 1;\n                }\n            }\n       \
    \ }\n        $c += 1;\n    }\n    return $c;\n}\n$grid1 = [\n    [0,0,1,0],\n\
    \    [0,1,0,0],\n    [1,1,1,1]\n];\n$grid2 = [\n    [0,0,1,1],\n    [0,0,0,0],\n\
    \    [1,1,1,1],\n    [0,1,1,1]\n];\n$grid3 = [\n    [0,0,0],\n    [0,0,0]\n];\n\
    echo max_fill($grid1, 1) . PHP_EOL;\necho max_fill($grid2, 2) . PHP_EOL;\necho\
    \ max_fill($grid3, 5) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_0fpukx.php:81\n\
    Stack trace:\n#0 /tmp/tmpf_0fpukx.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpf_0fpukx.php\
    \ on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $times = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $col_max_fill =\
    \ $capacity;\n    for ($i=0; $i<$rows; $i++) {\n        $row_max_fill = 0;\n \
    \       for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j] === 1) {\n\
    \                $fill = min($row_max_fill, $col_max_fill);\n                $times\
    \ += $fill;\n                $row_max_fill = $capacity;\n                $col_max_fill\
    \ = $capacity;\n            } else {\n                $row_max_fill = max(0, $row_max_fill\
    \ - 1);\n                $col_max_fill = max(0, $col_max_fill - 1);\n        \
    \    }\n        }\n    }\n    return $times;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1jrnc9h.php:55\n\
    Stack trace:\n#0 /tmp/tmpl1jrnc9h.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpl1jrnc9h.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // write your\
    \ awesome code here\n    $fill_levels = array_fill(0, count($grid), 0);\n    $max_fill\
    \ = 0;\n    $total_water = 0;\n    foreach ($grid as $row_index => $row) {\n \
    \       foreach ($row as $col_index => $cell) {\n            if ($cell === 1)\
    \ {\n                $total_water++;\n                $fill_levels[$col_index]++;\n\
    \                $max_fill = max($max_fill, $fill_levels[$col_index]);\n     \
    \       }\n        }\n    }\n    $total_times = $max_fill - 1;\n    $empty_columns\
    \ = count($fill_levels) - count(array_filter($fill_levels));\n    $remaining_water\
    \ = $total_water - $max_fill * count($fill_levels);\n    return $total_times +\
    \ ceil($remaining_water / $capacity) + $empty_columns;\n}\n\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n\
    \n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho\
    \ max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = [[0,0,0], [0,0,0]];\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesau4nbm.php:65\n\
    Stack trace:\n#0 /tmp/tmpesau4nbm.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpesau4nbm.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $cols = count($grid[0]);\n\
    \    $rows = count($grid);\n    $n = $rows * $cols;\n    $max_fill = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $row = $i / $cols;\n        $col = $i % $cols;\n\
    \        if ($grid[$row][$col] == 1) {\n            // fill the current well,\
    \ and all wells to the right \n            $max_fill++;\n            for ($x =\
    \ $col + 1; $x < $cols; $x++) {\n                if ($grid[$row][$x] == 1) {\n\
    \                    $grid[$row][$x] = 0;\n                } else {\n        \
    \            break;\n                }\n            }\n            // can do more\
    \ things here, but the logic gets more complicated.\n            // Can fill the\
    \ wells in the rows below.\n            // Can fill some wells in the row above,\
    \ as long as they don't overflow.\n        }\n    }\n    return $max_fill;\n}\n\
    $grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\necho max_fill($grid,\
    \ 1) . PHP_EOL;\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n \
    \   [0,1,1,1]\n];\necho max_fill($grid, 2) . PHP_EOL;\n$grid = [\n    [0,0,0],\n\
    \    [0,0,0]\n];\necho max_fill($grid, 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n3\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mvx2qiq.php:77\n\
    Stack trace:\n#0 /tmp/tmp3mvx2qiq.php(84): test()\n#1 {main}\n  thrown in /tmp/tmp3mvx2qiq.php\
    \ on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return max($max_fill, 0);\n}\nfunction candidate(...$args) {\n   \
    \ return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xmpoy9s.php:41\n\
    Stack trace:\n#0 /tmp/tmp3xmpoy9s.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3xmpoy9s.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n\
    \    // all wells are full, lower once\n    if ($max == $capacity) {\n       \
    \ return $max;\n    }\n    // all wells are empty, no need to lower\n    if ($max\
    \ == 0) {\n        return 0;\n    }\n    // each row represents a single well\
    \ and has the same length\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    // dp[i][j] is the maximum amount of water we can collect using capacity\
    \ i\n    // buckets if we have j columns with j elements in each row\n    $dp\
    \ = array_fill(0, $capacity+1, array_fill(0, $cols+1, 0));\n    for ($i=1; $i<=$capacity;\
    \ $i++) {\n        for ($j=1; $j<=$cols; $j++) {\n            $dp[$i][$j] = max($dp[$i][$j-1],\
    \ $dp[$i-1][$j-1]);\n            // if you have more than j wells, skip\n    \
    \        if ($j > $rows) {\n                continue;\n            }\n       \
    \     // step1: fill bucket i\n            // step2: lower bucket i\n        \
    \    // step3: use bucket i to fill the j wells in this row\n            // if\
    \ the j wells in this row cannot be filled with\n            // bucket i, you\
    \ need to pour water out of this bucket\n            // and reset the amount of\
    \ water in the bucket to 0\n            // repeat until the j wells in this row\
    \ can be filled with\n            // bucket i (you can have a full bucket i or\
    \ an empty bucket i)\n            $amount = min($i, $max - $grid[$j-1][$j-1]);\n\
    \            $dp[$i][$j] = max($dp[$i][$j], $dp[$i-$amount][$j-1] + $amount);\n\
    \        }\n    }\n    return $dp[$capacity][$cols];\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtpy081s.php:74\n\
    Stack trace:\n#0 /tmp/tmpqtpy081s.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpqtpy081s.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $total_count = 0;\n  \
    \  for ($i=0; $i<$row_count; $i++) {\n        $total_count += array_sum($grid[$i]);\n\
    \    }\n    $result = 0;\n    while ($total_count > 0) {\n        $max_fill =\
    \ array();\n        for ($j=0; $j<$col_count; $j++) {\n            $max_fill[$j]\
    \ = 0;\n            for ($i=0; $i<$row_count; $i++) {\n                if ($grid[$i][$j]\
    \ > 0) {\n                    $max_fill[$j]++;\n                } else {\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  // find the column with the maximum value and remove the value from the grid\n\
    \        $max_fill_count = max($max_fill);\n        for ($j=0; $j<$col_count;\
    \ $j++) {\n            if ($max_fill[$j] == $max_fill_count) {\n             \
    \   $total_count -= $max_fill_count;\n                if ($max_fill_count > $capacity)\
    \ {\n                    $result += $capacity;\n                    for ($i=0;\
    \ $i<$row_count; $i++) {\n                        if ($grid[$i][$j] > 0) {\n \
    \                           $grid[$i][$j] = 0;\n                            $capacity--;\n\
    \                        }\n                        if ($capacity == 0) {\n  \
    \                          break;\n                        }\n               \
    \     }\n                } else {\n                    $result += $max_fill_count;\n\
    \                    for ($i=0; $i<$row_count; $i++) {\n                     \
    \   $grid[$i][$j] = 0;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return $result;\n}\necho max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfwozndpa.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $buckets = array_fill(0,\
    \ count($grid[0]), $capacity);\n    $max = 0;\n    $lowers = 0;\n    foreach ($grid\
    \ as $well) {\n        $drops = 0;\n        for ($i = 0; $i < count($well); $i++)\
    \ {\n            if ($well[$i] == 1) {\n                $buckets[$i]--;\n    \
    \            $drops++;\n            }\n        }\n        $max = max($max, $drops);\n\
    \        if ($drops > 0) {\n            $lowers++;\n        }\n    }\n    return\
    \ $lowers + array_sum($buckets);\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\
    \ . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95cm8_v1.php:56\n\
    Stack trace:\n#0 /tmp/tmp95cm8_v1.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp95cm8_v1.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // TODO\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19w9uf3b.php:37\n\
    Stack trace:\n#0 /tmp/tmp19w9uf3b.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp19w9uf3b.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $cnt = 0;\n    $visited = [];\n    $queue = [];\n\
    \    $dist = [];\n    $dist[0] = 0;\n    $queue[] = 0;\n    while (!empty($queue))\
    \ {\n        $node = array_shift($queue);\n        $i = $node / $m;\n        $j\
    \ = $node % $m;\n        $visited[$node] = true;\n        $cnt++;\n        //\
    \ right\n        if ($j + 1 < $m && $visited[$node + 1] !== true) {\n        \
    \    $new_state = $node + 1;\n            $dist[$new_state] = $dist[$node] + $grid[$i][$j\
    \ + 1];\n            $queue[] = $new_state;\n        }\n        // down\n    \
    \    if ($i + 1 < $n && $visited[$node + $m] !== true) {\n            $new_state\
    \ = $node + $m;\n            $dist[$new_state] = $dist[$node] + $grid[$i + 1][$j];\n\
    \            $queue[] = $new_state;\n        }\n    }\n    return $dist[$n * $m\
    \ - 1] / $capacity;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0],\
    \ [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n\
    $grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid, $capacity) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_sqmrph.php:73\n\
    Stack trace:\n#0 /tmp/tmpq_sqmrph.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpq_sqmrph.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // $grid contains\
    \ a row for each well\n    // $row contains a 1 for each unit of water\n    //\
    \ all buckets have the same capacity\n    // return the number of times needed\
    \ to lower the buckets\n    // test cases\n    // grid : [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    // grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output:\
    \ 5\n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n    // Output:\
    \ 0\n    // strategy:\n    // for each well\n    //   for each unit of water\n\
    \    //     increment count\n    //     decrement bucket capacity\n    //    \
    \ if bucket is empty\n    //       increment count\n    //       reset bucket\n\
    \    //   if bucket isn't empty\n    //     increment count\n    //     reset\
    \ bucket\n    // return count\n    $count = 0;\n    $length = count($grid);\n\
    \    $width = count($grid[0]);\n    foreach ($grid as $row) {\n        $bucket\
    \ = $capacity;\n        foreach ($row as $value) {\n            if ($value !=\
    \ 0) {\n                $count++;\n                $bucket--;\n              \
    \  if ($bucket == 0) {\n                    $count++;\n                    $bucket\
    \ = $capacity;\n                }\n            }\n        }\n        if ($bucket\
    \ != $capacity) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$bucket_capacity\
    \ = 1;\necho max_fill($grid, $bucket_capacity);\necho \"\\n\";\n$grid = [\n  \
    \  [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf4dku8og.php on line 89\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $height = count($grid);\n\
    \    $width = count($grid[0]);\n    $result = 0;\n    $steps = 0;\n    while (1)\
    \ {\n        $steps++;\n        $full_cells = 0;\n        for ($i = 0; $i < $height;\
    \ $i++) {\n            for ($j = 0; $j < $width; $j++) {\n                if ($grid[$i][$j]\
    \ == 1) {\n                    $full_cells++;\n                    $grid[$i][$j]\
    \ = 0;\n                }\n            }\n        }\n        $result += floor($full_cells\
    \ / $capacity);\n        if ($full_cells <= $capacity) {\n            break;\n\
    \        }\n    }\n    return $result;\n}\necho max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1);\necho PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2);\necho PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5);\necho\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwidrx2n.php:63\n\
    Stack trace:\n#0 /tmp/tmpdwidrx2n.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdwidrx2n.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // max_fill($grid,\
    \ $capacity) = max_fill(remove_water($grid, $capacity), $capacity) + $capacity\n\
    \    // max_fill($grid, $capacity) = capacity * (number of nonzero rows)\n   \
    \ // runtime: O(grid.length * grid[1].length)\n    // space: O(1)\n    $num_rows\
    \ = count($grid);\n    $num_cols = count($grid[0]);\n    $num_fill_cycles = 0;\n\
    \    for ($row=0; $row<$num_rows; $row++) {\n        for ($col=0; $col<$num_cols;\
    \ $col++) {\n            if ($grid[$row][$col] > 0) {\n                $num_fill_cycles\
    \ += $capacity;\n            }\n        }\n    }\n    return $num_fill_cycles;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bkpvepb.php:52\n\
    Stack trace:\n#0 /tmp/tmp5bkpvepb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5bkpvepb.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $depth = 0;\n\
    \    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for ($col\
    \ = 0; $col < $num_cols; $col++) {\n        $max_row = -1;\n        for ($row\
    \ = 0; $row < $num_rows; $row++) {\n            if ($grid[$row][$col] == 1) {\n\
    \                $max_row = $row;\n            }\n        }\n        $depth +=\
    \ $max_row + 1;\n    }\n    return intdiv($depth, $capacity) + 1;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2roipu2r.php:49\n\
    Stack trace:\n#0 /tmp/tmp2roipu2r.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2roipu2r.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // input validation\n\
    \    assert(is_array($grid));\n    assert(is_int($capacity));\n    assert($capacity\
    \ > 0);\n    foreach ($grid as $line) {\n        assert(is_array($line));\n  \
    \      foreach ($line as $cell) {\n            assert(is_int($cell));\n      \
    \      assert($cell == 0 || $cell == 1);\n        }\n    }\n    //\n    $result\
    \ = 0;\n    //\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n\
    \    //\n    while (true) {\n        $r = 0;\n        $c = 0;\n        $max_fill\
    \ = 0;\n        // find the maximum fill\n        for ($r = 0; $r < $num_rows;\
    \ $r++) {\n            for ($c = 0; $c < $num_cols; $c++) {\n                if\
    \ ($grid[$r][$c] == 1) {\n                    $min_capacity = min($num_rows -\
    \ $r, $num_cols - $c);\n                    $fill = min($min_capacity, $capacity);\n\
    \                    if ($fill > $max_fill) {\n                        $max_fill\
    \ = $fill;\n                    }\n                }\n            }\n        }\n\
    \        //\n        if ($max_fill == 0) {\n            // no more wells to fill\n\
    \            break;\n        }\n        //\n        $result++;\n        // fill\
    \ the wells with water\n        for ($r = 0; $r < $num_rows; $r++) {\n       \
    \     for ($c = 0; $c < $num_cols; $c++) {\n                if ($grid[$r][$c]\
    \ == 1) {\n                    $min_capacity = min($num_rows - $r, $num_cols -\
    \ $c);\n                    $fill = min($min_capacity, $capacity);\n         \
    \           if ($fill >= $max_fill) {\n                        $grid[$r][$c] =\
    \ 0;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    //\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpti54u64x.php:91\n\
    Stack trace:\n#0 /tmp/tmpti54u64x.php(98): test()\n#1 {main}\n  thrown in /tmp/tmpti54u64x.php\
    \ on line 91\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $fill_count = 0;\n   \
    \ for ($row = 0; $row < $row_count; $row++) {\n        for ($col = 0; $col < $col_count;\
    \ $col++) {\n            $fill_count += ($grid[$row][$col] === 0) ? 0 : $capacity;\n\
    \        }\n    }\n    return $fill_count;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1hnvfw5.php:46\n\
    Stack trace:\n#0 /tmp/tmpn1hnvfw5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpn1hnvfw5.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    $full_wells\
    \ = [];\n    // save the full wells in an array\n    for ($row = 0; $row < $num_rows;\
    \ $row++) {\n        for ($col = 0; $col < $num_cols; $col++) {\n            if\
    \ ($grid[$row][$col] == 1) {\n                $full_wells[] = [$row, $col];\n\
    \            }\n        }\n    }\n    $num_full_wells = count($full_wells);\n\
    \    // fill the full wells until we have none left\n    while ($num_full_wells\
    \ > 0) {\n        $num_full_wells = count($full_wells);\n        // fill the wells\
    \ from top to bottom, left to right\n        $fill = 0;\n        while ($fill\
    \ < $num_full_wells) {\n            $row = $full_wells[$fill][0];\n          \
    \  $col = $full_wells[$fill][1];\n            // fill with water\n           \
    \ $grid[$row][$col] = min($grid[$row][$col] + $capacity, 1);\n            // spill\
    \ to the left\n            if ($col > 0) {\n                $grid[$row][$col -\
    \ 1] = min($grid[$row][$col - 1] + 1, 1);\n            }\n            // spill\
    \ to the right\n            if ($col < $num_cols - 1) {\n                $grid[$row][$col\
    \ + 1] = min($grid[$row][$col + 1] + 1, 1);\n            }\n            // spill\
    \ down\n            if ($row < $num_rows - 1) {\n                $grid[$row +\
    \ 1][$col] = min($grid[$row + 1][$col] + 1, 1);\n            }\n            $fill++;\n\
    \        }\n        // find the full wells\n        $full_wells = [];\n      \
    \  for ($row = 0; $row < $num_rows; $row++) {\n            for ($col = 0; $col\
    \ < $num_\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplq75tg9x.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    $filled = 0;\n    $len_row = count($grid);\n    $len_col = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i=0; $i<$len_row; $i++) {\n \
    \       for ($j=0; $j<$len_col; $j++) {\n            if ($grid[$i][$j] === 1)\
    \ {\n                $filled += 1;\n                if ($max_row < $i) {\n   \
    \                 $max_row = $i;\n                }\n                if ($max_col\
    \ < $j) {\n                    $max_col = $j;\n                }\n           \
    \ }\n        }\n    }\n    $max_row = $max_row + 1;\n    $max_col = $max_col +\
    \ 1;\n    $matrix = [];\n    for ($i=0; $i<$max_row; $i++) {\n        $matrix[$i]\
    \ = [];\n        for ($j=0; $j<$max_col; $j++) {\n            $matrix[$i][$j]\
    \ = 0;\n        }\n    }\n    $pass = 0;\n    while ($filled > 0) {\n        $pass\
    \ += 1;\n        for ($i=0; $i<$max_row; $i++) {\n            for ($j=0; $j<$max_col;\
    \ $j++) {\n                if ($grid[$i][$j] === 1) {\n                    $matrix[$i][$j]\
    \ += 1;\n                    if ($matrix[$i][$j] > $capacity) {\n            \
    \            $filled -= 1;\n                        $grid[$i][$j] = 0;\n     \
    \                   $matrix[$i][$j] = 0;\n                        if ($i > 0)\
    \ {\n                            $grid[$i-1][$j] = 1;\n                      \
    \  }\n                        if ($j > 0) {\n                            $grid[$i][$j-1]\
    \ = 1;\n                        }\n                        if ($i < $max_row-1)\
    \ {\n                            $grid[$\nfunction candidate(...$args) {\n   \
    \ return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpniaxexhu.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = [];\n\
    \    foreach ($grid as $row) {\n        $row_wells = array_map(\n            function\
    \ ($el) {\n                return ($el) ? 1 : 0;\n            }, $row\n      \
    \  );\n        array_push($wells, $row_wells);\n    }\n    // echo PHP_EOL;\n\
    \    // echo var_export($wells, true);\n    // echo PHP_EOL;\n    $n = count($wells);\n\
    \    $m = count($wells[0]);\n    $max_fill = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $fill = 0;\n        for ($j = 0; $j < $m; $j++) {\n            $bucket\
    \ = $capacity;\n            for ($k = $i; $k < $n; $k++) {\n                $w\
    \ = $wells[$k][$j];\n                $bucket -= $w;\n                if ($bucket\
    \ < 0) {\n                    $fill++;\n                    $bucket = $capacity\
    \ - $w;\n                }\n            }\n        }\n        if ($fill > $max_fill)\
    \ {\n            $max_fill = $fill;\n        }\n    }\n    return $max_fill;\n\
    }\n$tests = [];\n$tests[] = [\n    'input' => [\n        'grid' => [\n       \
    \     [0,0,1,0],\n            [0,1,0,0],\n            [1,1,1,1]\n        ],\n\
    \        'bucket_capacity' => 1\n    ],\n    'output' => 6\n];\n$tests[] = [\n\
    \    'input' => [\n        'grid' => [\n            [0,0,1,1],\n            [0,0,0,0],\n\
    \            [1,1,1,1],\n            [0,1,1,1]\n        ],\n        'bucket_capacity'\
    \ => 2\n    ],\n    'output' => 5\n];\n$tests[] = [\n    'input' => [\n      \
    \  'grid' => [\n            [0,0,0],\n            [0,0\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi91aalwg.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $count = 0;\n\
    \    foreach ($grid as $row) {\n        $count += max(array_sum($row), $capacity);\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk04ezdsm.php:42\n\
    Stack trace:\n#0 /tmp/tmpk04ezdsm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpk04ezdsm.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (count($grid)\
    \ == 0) {\n        return 0;\n    }\n    $count = 0;\n    $max_fill = $capacity;\n\
    \    foreach ($grid as $row) {\n        $sum = 0;\n        foreach ($row as $value)\
    \ {\n            $sum += $value;\n        }\n        $count += $sum;\n       \
    \ $max_fill = max($max_fill, $sum);\n    }\n    return $count - ($max_fill - $capacity);\n\
    }\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n\
    $capacity = 2;\necho max_fill($grid, $capacity) . \"\\n\";\n$grid = [[0,0,0],\
    \ [0,0,0]];\n$capacity = 5;\necho max_fill($grid, $capacity) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "3\n7\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5y6scpd.php:59\n\
    Stack trace:\n#0 /tmp/tmpj5y6scpd.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpj5y6scpd.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    $buckets = [];\n    $used_buckets = 0;\n    $operations = 0;\n   \
    \ while ($max_fill > 0) {\n        foreach ($grid as $row) {\n            $buckets[]\
    \ = $max_fill;\n        }\n        foreach ($grid as $row) {\n            foreach\
    \ ($row as $cell) {\n                for ($i = 0; $i < $cell; $i++) {\n      \
    \              $used_buckets++;\n                    $buckets[$used_buckets] -=\
    \ $cell;\n                    if ($buckets[$used_buckets] == 0) {\n          \
    \              $buckets[$used_buckets] = $capacity;\n                    }\n \
    \               }\n            }\n        }\n        $max_fill = max($buckets);\n\
    \        $operations++;\n    }\n    return $operations;\n}\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n\
    $grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\t$times = 0;\n\t\
    for ($i = 0; $i < count($grid); $i++) {\n\t\t$sum = 0;\n\t\tfor ($j = 0; $j <\
    \ count($grid[$i]); $j++) {\n\t\t\t$sum += $grid[$i][$j];\n\t\t}\n\t\t$times +=\
    \ (int) ($sum / $capacity);\n\t\tif ($sum % $capacity) {\n\t\t\t$times++;\n\t\t\
    }\n\t}\n\treturn $times;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $well_count\
    \ = count($grid);\n    if ($well_count === 0) return 0;\n    $well_width = count($grid[0]);\n\
    \    $moves = 0;\n    $fill = [];\n    $empty = [];\n    while(count($fill) >\
    \ 0 || count($empty) > 0) {\n        if (count($fill) === 0) {\n            $fill[]\
    \ = array_shift($empty);\n        }\n        $pos = array_shift($fill);\n    \
    \    list($x, $y) = $pos;\n        $left = $x > 0 ? [$x - 1, $y] : null;\n   \
    \     $right = $x < $well_count - 1 ? [$x + 1, $y] : null;\n        $above = $y\
    \ > 0 ? [$x, $y - 1] : null;\n        $below = $y < $well_width - 1 ? [$x, $y\
    \ + 1] : null;\n        $adjacents = array_filter([$left, $right, $above, $below]);\n\
    \        foreach($adjacents as $adjacent) {\n            list($x, $y) = $adjacent;\n\
    \            if ($grid[$x][$y] > 0) {\n                $grid[$x][$y] -= $capacity;\n\
    \                if ($grid[$x][$y] === 0) {\n                    $empty[] = $adjacent;\n\
    \                }\n            }\n        }\n        $moves++;\n    }\n    return\
    \ $moves;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdjwntmf.php:65\n\
    Stack trace:\n#0 /tmp/tmpcdjwntmf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpcdjwntmf.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (empty($grid))\
    \ {\n        return 0;\n    }\n    $m = count($grid);\n    $n = count($grid[0]);\n\
    \    $result = 0;\n    for ($i=0; $i<$m; $i++) {\n        for ($j=0; $j<$n; $j++)\
    \ {\n            if ($grid[$i][$j] === 1) {\n                $result += $capacity;\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuz18i7e.php:51\n\
    Stack trace:\n#0 /tmp/tmpiuz18i7e.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpiuz18i7e.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $max_fill_row = 0;\n    $count = 0;\n    $times = 0;\n    foreach ($grid\
    \ as $row) {\n        $count += array_sum($row);\n        $max_fill_row = max($max_fill_row,\
    \ array_sum($row));\n    }\n    $times = (int)ceil($count / $capacity);\n    $max_fill\
    \ = (int)ceil($max_fill_row / $capacity);\n    return ($times > $max_fill) ? $times\
    \ : $max_fill;\n}\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n\
    ];\n$bucket_capacity = 1;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n\
    $grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n\
    $bucket_capacity = 2;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [\n    [0,0,0],\n    [0,0,0]\n];\n$bucket_capacity = 5;\necho max_fill($grid,\
    \ $bucket_capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzgbcpfm.php:72\n\
    Stack trace:\n#0 /tmp/tmptzgbcpfm.php(75): test()\n#1 {main}\n  thrown in /tmp/tmptzgbcpfm.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // the given\
    \ input is a 2d array, but we'll flatten it into a 1d array\n    $wells = array_reduce($grid,\
    \ 'array_merge', []);\n    $n = count($wells);\n    $m = 0;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $m += $wells[$i];\n    }\n    if ($m == 0) {\n   \
    \     return 0;\n    }\n    $result = 0;\n    $level = 0;\n    $cnt = 0;\n   \
    \ $start = 0;\n    $end = $n - 1;\n    while ($cnt < $m) {\n        $j = $start;\n\
    \        for ($i = $start; $i <= $end; $i++) {\n            $level += $wells[$i];\n\
    \            if ($level == $capacity) {\n                $cnt += $capacity;\n\
    \                $level = 0;\n                $j = $i;\n                break;\n\
    \            } else if ($level > $capacity) {\n                $cnt += $capacity;\n\
    \                $level = $level - $capacity;\n                $j = $i;\n    \
    \            break;\n            }\n        }\n        $result++;\n        $start\
    \ = $j + 1;\n    }\n    return $result;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $bucket_capacity = 1;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$bucket_capacity = 2;\necho\
    \ max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    $bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: b'6\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // check input\n\
    \    if (empty($grid) || empty($grid[0])) {\n        return 0;\n    }\n    //\
    \ check if the grid is full of water\n    $water_count = 0;\n    foreach ($grid\
    \ as $row) {\n        $water_count += array_sum($row);\n    }\n    if ($water_count\
    \ == 0) {\n        return 0;\n    }\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $fill_count = 0;\n    $cursor = 0;\n    // loop through\
    \ wells\n    while ($cursor < $row_count) {\n        // determine the units of\
    \ water to fill the bucket\n        $units = $capacity;\n        for ($i = $cursor;\
    \ $i < $row_count; $i++) {\n            if ($grid[$i][0] == 1) {\n           \
    \     $units--;\n            }\n            if ($units == 0) {\n             \
    \   break;\n            }\n        }\n        // move the bucket and dump the\
    \ water\n        $cursor = $i + 1;\n        $fill_count++;\n        // fill the\
    \ water\n        for ($i = 0; $i < $units; $i++) {\n            $col = 0;\n  \
    \          while ($col < $col_count && $grid[$cursor][$col] == 1) {\n        \
    \        $grid[$cursor][$col] = 0;\n                $col++;\n            }\n \
    \           $cursor++;\n        }\n    }\n    return $fill_count;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ymcfzik.php:78\n\
    Stack trace:\n#0 /tmp/tmp6ymcfzik.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp6ymcfzik.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $times = 0;\n\
    \    for ($i = 0; $i < count($grid); $i++) {\n        $sum = 0;\n        for ($j\
    \ = 0; $j < count($grid[$i]); $j++) {\n            $sum += $grid[$i][$j];\n  \
    \      }\n        if ($sum > 0) {\n            $times += max(1, floor($sum / $capacity));\n\
    \        }\n    }\n    return $times;\n}\nfunction candidate(...$args) {\n   \
    \ return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgisq1cw6.php:47\n\
    Stack trace:\n#0 /tmp/tmpgisq1cw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgisq1cw6.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, count_fill($row,\
    \ $capacity));\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_fill()\
    \ in /tmp/tmpfgznaf2q.php:32\nStack trace:\n#0 /tmp/tmpfgznaf2q.php(37): max_fill(Array,\
    \ 1)\n#1 /tmp/tmpfgznaf2q.php(41): candidate(Array, 1)\n#2 /tmp/tmpfgznaf2q.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpfgznaf2q.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $counter = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    while (true) {\n        $current_fill = 0;\n        $row_empty = [];\n  \
    \      $col_empty = [];\n        for ($i = 0; $i < $rows; $i++) {\n          \
    \  for ($j = 0; $j < $cols; $j++) {\n                if ($grid[$i][$j] > 0) {\n\
    \                    $current_fill += $grid[$i][$j];\n                    $grid[$i][$j]\
    \ = 0;\n                    $row_empty[$i] = false;\n                    $col_empty[$j]\
    \ = false;\n                }\n            }\n        }\n        $counter++;\n\
    \        if ($current_fill == 0) {\n            break;\n        }\n        if\
    \ ($current_fill < $capacity) {\n            $remaining = $capacity - $current_fill;\n\
    \            $current_fill = 0;\n            for ($i = 0; $i < $rows; $i++) {\n\
    \                if ($row_empty[$i] == false) {\n                    for ($j =\
    \ 0; $j < $cols; $j++) {\n                        if ($col_empty[$j] == false)\
    \ {\n                            if ($grid[$i][$j] > 0) {\n                  \
    \              $bucket = $remaining < $grid[$i][$j] ? $remaining : $grid[$i][$j];\n\
    \                                $grid[$i][$j] -= $bucket;\n                 \
    \               $remaining -= $bucket;\n                                $current_fill\
    \ += $bucket;\n                                if ($grid[$i][$j] == 0) {\n   \
    \                                 $row_empty[$i] = true;\n                   \
    \                 $col_empty[$j] = true;\n                                }\n\
    \                                if ($remaining == 0) {\n                    \
    \                break 2;\n                                }\n               \
    \             }\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        if ($current_fill > $max_fill) {\n\
    \            $max_fill\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph4ks5u54.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    // find max for every row\n    for ($i=0; $i<$m;\
    \ $i++) {\n        $row = $grid[$i];\n        $sum = 0;\n        $max = 0;\n \
    \       $start = 0;\n        $end = 0;\n        $pos = -1;\n        for ($j=0;\
    \ $j<$n; $j++) {\n            $el = $row[$j];\n            $sum += $el;\n    \
    \        $end = $j;\n            if ($sum > $max) {\n                $max = $sum;\n\
    \                $pos = $j;\n            }\n            // check capacity\n  \
    \          if ($sum > $capacity) {\n                $sum = 0;\n              \
    \  $j = $start - 1;\n                $start = $end = 0;\n            }\n     \
    \   }\n        // fill a bucket\n        if ($max > 0) {\n            $start =\
    \ $pos - $max + 1;\n            $end = $pos;\n            for ($k=$start; $k<=$end;\
    \ $k++) {\n                $grid[$i][$k] = 0;\n            }\n        }\n    }\n\
    \    return $grid;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = [];\n\
    \    foreach ($grid as $i => $row) {\n        $max[$i] = 0;\n        foreach ($row\
    \ as $j => $cell) {\n            if ($cell) {\n                $max[$i]++;\n \
    \           }\n        }\n    }\n    return max($max);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_j056wj.php:46\n\
    Stack trace:\n#0 /tmp/tmpf_j056wj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf_j056wj.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    // pool stores the number of buckets of water\
    \ to be emptied from each row\n    $pool = 0;\n    // num_rounds stores the number\
    \ of rounds to remove water from all wells\n    $num_rounds = 0;\n    $i = 0;\n\
    \    while ($i < $m) {\n        // Remove all buckets of water from current pool\
    \ and current row\n        $buckets_to_empty = max($grid[$i][0], $pool);\n   \
    \     // If there are multiple buckets of water, we need another round\n     \
    \   $num_rounds += floor($buckets_to_empty / $capacity);\n        // Add the current\
    \ row to the pool and move on to the next row\n        $pool = ($grid[$i][0] +\
    \ $pool) % $capacity;\n        $i++;\n    }\n    // Empty the remaining pool\n\
    \    $num_rounds += floor($pool / $capacity);\n    return $num_rounds;\n}\n$grid\
    \ = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    $capacity = 5;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,0],\
    \ [0,0,0]];\n$capacity = 0;\necho max_fill($grid, $capacity) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1\n0\n0\n\nWarning: Division by zero in /tmp/tmpnr1toaht.php on line 41\n\
    \nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpnr1toaht.php:43\n\
    Stack trace:\n#0 /tmp/tmpnr1toaht.php(61): max_fill(Array, 0)\n#1 {main}\n  thrown\
    \ in /tmp/tmpnr1toaht.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $column_count = count($grid[0]);\n    $fill_count = 0;\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        $fill_count += ($capacity\
    \ - $grid[$i][0]);\n        for ($j = 1; $j < $column_count; $j++) {\n       \
    \     $fill_count += ($capacity - ($grid[$i][$j] - $grid[$i][$j - 1]));\n    \
    \    }\n    }\n    return $fill_count;\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $bucket_capacity = 1;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$bucket_capacity = 2;\necho\
    \ max_fill($grid, $bucket_capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n\
    $bucket_capacity = 5;\necho max_fill($grid, $bucket_capacity) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "11\n29\n30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrm7q4o_.php:55\n\
    Stack trace:\n#0 /tmp/tmpgrm7q4o_.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpgrm7q4o_.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\t$result = 0;\n\
    \t$grid = array_map(function($well) use($capacity) {\n\t\t$count = 0;\n\t\tforeach\
    \ ($well as $water) {\n\t\t\tif ($water == 1) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\
    \t}\n\t\treturn floor($count / $capacity);\n\t}, $grid);\n\t$result = max($grid);\n\
    \treturn $result;\n}\necho max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\n\
    echo max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . PHP_EOL;\necho\
    \ max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppsexfxhc.php:51\n\
    Stack trace:\n#0 /tmp/tmppsexfxhc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmppsexfxhc.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $well_len = count($grid[0]);\n    $full_well = $capacity * $well_len;\n \
    \   $needed_buckets = [];\n    for ($i = 0; $i < $wells; $i++) {\n        $well_sum\
    \ = array_sum($grid[$i]);\n        if ($well_sum != $full_well) {\n          \
    \  $needed_buckets[] = $full_well - $well_sum;\n        }\n    }\n    return count($needed_buckets);\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t_g6iwa.php:47\n\
    Stack trace:\n#0 /tmp/tmp0t_g6iwa.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0t_g6iwa.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\t$num_rows = count($grid);\n\
    \t$num_cols = count($grid[0]);\n\t$fill_count = 0;\n\t// for each row\n\tfor ($row\
    \ = 0; $row < $num_rows; $row++) {\n\t\t// for each column\n\t\tfor ($col = 0;\
    \ $col < $num_cols; $col++) {\n\t\t\t// if there is water in the well\n\t\t\t\
    if ($grid[$row][$col] == 1) {\n\t\t\t\t// fill the bucket as much as we can\n\t\
    \t\t\t$fill_count += $capacity;\n\t\t\t\t// decrement water in each well\n\t\t\
    \t\tfor ($i = $row; $i < $num_rows; $i++) {\n\t\t\t\t\tfor ($j = $col; $j < $num_cols;\
    \ $j++) {\n\t\t\t\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t\t\t\t$grid[$i][$j]\
    \ = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $fill_count;\n\
    }\n$grid1 = [\n\t[0,0,1,0],\n\t[0,1,0,0],\n\t[1,1,1,1]\n];\n$capacity1 = 1;\n\
    echo max_fill($grid1, $capacity1) . \"\\n\";\n$grid2 = [\n\t[0,0,1,1],\n\t[0,0,0,0],\n\
    \t[1,1,1,1],\n\t[0,1,1,1]\n];\n$capacity2 = 2;\necho max_fill($grid2, $capacity2)\
    \ . \"\\n\";\n$grid3 = [\n\t[0,0,0],\n\t[0,0,0]\n];\n$capacity3 = 5;\necho max_fill($grid3,\
    \ $capacity3) . \"\\n\";\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinvqzdfj.php:80\n\
    Stack trace:\n#0 /tmp/tmpinvqzdfj.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpinvqzdfj.php\
    \ on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $count = 0;\n        foreach ($row as\
    \ $c) {\n            if ($c == 1) {\n                $count += 1;\n          \
    \  } else {\n                $max = max($max, $count);\n                $count\
    \ = 0;\n            }\n        }\n        $max = max($max, $count);\n    }\n \
    \   return min($max, $capacity);\n}\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu90ioixl.php:50\n\
    Stack trace:\n#0 /tmp/tmpu90ioixl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpu90ioixl.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $max_fill = $capacity;\n    for ($i=0; $i<$row_count; $i++)\
    \ {\n        $col_count = count($grid[$i]);\n        $count = 0;\n        for\
    \ ($j=0; $j<$col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $count++;\n            }\n        }\n        $fill = ceil($count /\
    \ $capacity);\n        if ($fill > $max_fill) {\n            $max_fill = $fill;\n\
    \        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n\
    \    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o9cp8te.php:52\n\
    Stack trace:\n#0 /tmp/tmp2o9cp8te.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2o9cp8te.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $buckets = 0;\n\
    \    foreach ($grid as $row) {\n        $row_sum = array_sum($row);\n        $buckets\
    \ += intdiv($row_sum, $capacity);\n        if ($row_sum % $capacity > 0) {\n \
    \           $buckets++;\n        }\n    }\n    return $buckets;\n}\necho max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1) . PHP_EOL;\necho max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2) . PHP_EOL;\necho max_fill([[0,0,0], [0,0,0]], 5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n5\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell === 1) {\n                $fill++;\n    \
    \        } else {\n                $max_fill = max($max_fill, $fill);\n      \
    \          $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz6s2u_r.php:50\n\
    Stack trace:\n#0 /tmp/tmpvz6s2u_r.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpvz6s2u_r.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $total_fill\
    \ = 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        $lowest_well\
    \ = 0;\n        for ($i = 0; $i < count($row); $i++) {\n            if ($row[$i]\
    \ == 1) {\n                $lowest_well = $i;\n                $fill = 1;\n  \
    \          } else if ($fill > 0) {\n                $fill++;\n            }\n\
    \            if ($fill > 0 && $fill == $capacity) {\n                $total_fill++;\n\
    \                $fill = 0;\n            }\n        }\n        $total_fill +=\
    \ intdiv($fill, $capacity);\n    }\n    return $total_fill;\n}\n$grid = [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]];\necho \"Total fill: \" . max_fill($grid, 1) . \"\\n\"\
    ;\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\necho \"Total fill: \"\
    \ . max_fill($grid, 2) . \"\\n\";\n$grid = [[0,0,0], [0,0,0]];\necho \"Total fill:\
    \ \" . max_fill($grid, 5) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Total fill: 6\nTotal fill: 0\nTotal fill: 0\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdi44zibg.php:62\nStack trace:\n#0 /tmp/tmpdi44zibg.php(68):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdi44zibg.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $total_rows = $total_cols\
    \ = 0;\n    for ($i = 0; $i < $num_rows; $i++) {\n        $total_rows += array_sum($grid[$i]);\n\
    \    }\n    for ($j = 0; $j < $num_cols; $j++) {\n        $total_cols += array_sum(array_column($grid,\
    \ $j));\n    }\n    $total_water = min($total_rows, $total_cols);\n    return\
    \ (int) ceil($total_water / $capacity);\n}\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n\
    $capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid = [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m675cez.php:60\n\
    Stack trace:\n#0 /tmp/tmp2m675cez.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2m675cez.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // edge cases\n\
    \    if (empty($grid)) {\n        return 0;\n    }\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    $total_water = 0;\n    for ($row = 0;\
    \ $row < $row_count; $row++) {\n        for ($col = 0; $col < $col_count; $col++)\
    \ {\n            $total_water += $grid[$row][$col];\n        }\n    }\n    $total_water\
    \ = ceil($total_water / $capacity);\n    return $total_water;\n}\n$grid1 = [\n\
    \    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$grid2 = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\n$grid3 = [\n    [0,0,0],\n\
    \    [0,0,0]\n];\necho max_fill($grid1, 1) . PHP_EOL;\necho max_fill($grid2, 2)\
    \ . PHP_EOL;\necho max_fill($grid3, 5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplw6wiu62.php:68\n\
    Stack trace:\n#0 /tmp/tmplw6wiu62.php(75): test()\n#1 {main}\n  thrown in /tmp/tmplw6wiu62.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    $max_fill = 0;\n    $num_runs = 0;\n    while ($max < $capacity) {\n    \
    \    // lower the bucket by 1\n        $max_fill -= 1;\n        // fill the first\
    \ bucket to capacity\n        $max_fill += $capacity;\n        // fill the wells\n\
    \        for ($i = 0; $i < count($grid); $i++) {\n            for ($j = 0; $j\
    \ < count($grid[$i]); $j++) {\n                $max_fill += $grid[$i][$j];\n \
    \           }\n        }\n        // get the max fill\n        $max = max($max,\
    \ $max_fill);\n        // reset the fill for the next run\n        $max_fill =\
    \ 0;\n        $num_runs += 1;\n    }\n    return $num_runs;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowadgywt.php:57\n\
    Stack trace:\n#0 /tmp/tmpowadgywt.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpowadgywt.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (empty($grid))\
    \ {\n        return 0;\n    }\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $total_units = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            $total_units += $grid[$i][$j];\n     \
    \   }\n    }\n    if ($total_units == 0) {\n        return 0;\n    }\n    return\
    \ ceil($total_units / $capacity);\n}\n$capacity = 2;\n$grid = [\n    [0,0,1,1],\n\
    \    [0,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1]\n];\nprint_r(max_fill($grid, $capacity));\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9lowrrv.php:59\n\
    Stack trace:\n#0 /tmp/tmpe9lowrrv.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpe9lowrrv.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $cnt = 0;\n\
    \    foreach ($grid as $well) {\n        $cnt += count(array_keys($well, 1)) /\
    \ $capacity;\n    }\n    return $cnt;\n}\nfunction candidate(...$args) {\n   \
    \ return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpir_0l679.php:42\n\
    Stack trace:\n#0 /tmp/tmpir_0l679.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpir_0l679.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($row = 0; $row < $row_count; $row++) {\n        for ($col = 0; $col < $col_count;\
    \ $col++) {\n            if ($grid[$row][$col] === 1) {\n                $max_fill\
    \ = max($max_fill, $row + 1);\n            }\n        }\n    }\n    return max($max_fill,\
    \ $capacity);\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsscibsn.php:47\n\
    Stack trace:\n#0 /tmp/tmpnsscibsn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnsscibsn.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    if (count($grid)\
    \ == 0) return 0;\n    $n_row = count($grid);\n    $n_col = count($grid[0]);\n\
    \    $bucket = $capacity;\n    $count = 0;\n    for ($row = 0; $row < $n_row;\
    \ $row++) {\n        for ($col = 0; $col < $n_col; $col++) {\n            if ($grid[$row][$col]\
    \ == 1) {\n                if ($bucket == 0) {\n                    $bucket =\
    \ $capacity;\n                    $count++;\n                }\n             \
    \   $bucket--;\n            }\n        }\n    }\n    return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2cnk_k1.php:53\n\
    Stack trace:\n#0 /tmp/tmpm2cnk_k1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpm2cnk_k1.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $c = count($grid);\n\
    \    $r = count($grid[0]);\n    $water = 0;\n    for ($i=0; $i<$c; $i++) {\n \
    \       for ($j=0; $j<$r; $j++) {\n            $water += $grid[$i][$j];\n    \
    \    }\n    }\n    $fills = ceil($water / $capacity);\n    echo $fills.\"\\n\"\
    ;\n}\n$grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n];\n$capacity\
    \ = 1;\nmax_fill($grid, $capacity);\n$grid = [\n    [0,0,1,1],\n    [0,0,0,0],\n\
    \    [1,1,1,1],\n    [0,1,1,1]\n];\n$capacity = 2;\nmax_fill($grid, $capacity);\n\
    $grid = [\n    [0,0,0],\n    [0,0,0]\n];\n$capacity = 5;\nmax_fill($grid, $capacity);\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n5\n0\n6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31ly6pee.php:67\n\
    Stack trace:\n#0 /tmp/tmp31ly6pee.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp31ly6pee.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
