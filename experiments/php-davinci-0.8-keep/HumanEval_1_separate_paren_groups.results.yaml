name: HumanEval_1_separate_paren_groups
language: php
results:
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $length = strlen($paren_string);\n  $counter = 0;\n  $temp\
    \ = '';\n  for ($i = 0; $i < $length; $i++) {\n    if ($paren_string[$i] == '(')\
    \ {\n      $counter++;\n      $temp .= $paren_string[$i];\n    } else if ($paren_string[$i]\
    \ == ')') {\n      $counter--;\n      $temp .= $paren_string[$i];\n    }\n   \
    \ if ($counter == 0 && $temp) {\n      $result[] = $temp;\n      $temp = '';\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n\n    $array = str_split($paren_string);\n\
    \    $store = array();\n    $temp = array();\n    $stack = array();\n    $i =\
    \ 0;\n    foreach ($array as $char) {\n        if ($char == '(') {\n         \
    \   array_push($stack, $char);\n            array_push($temp, $char);\n      \
    \  }\n        else if ($char == ')') {\n            if (empty($stack)) {\n   \
    \             return 'Syntax Error';\n            }\n            else {\n    \
    \            array_pop($stack);\n                array_push($temp, $char);\n \
    \           }\n        }\n        if (empty($stack)) {\n            $store[$i]\
    \ = implode('', $temp);\n            $temp = array();\n            $i++;\n   \
    \     }\n    }\n    if (!empty($stack)) {\n        return 'Syntax Error';\n  \
    \  }\n    return $store;\n}\n\necho \"<pre>\";\nvar_dump(separate_paren_groups('()'));\n\
    var_dump(separate_paren_groups('())'));\nvar_dump(separate_paren_groups('( )'));\n\
    var_dump(separate_paren_groups('( () )'));\nvar_dump(separate_paren_groups('()\
    \ ()'));\nvar_dump(separate_paren_groups('() () ( ( ( () ) ) )'));\nvar_dump(separate_paren_groups('()\
    \ () ( ( ( () ) ) ) ()'));\nvar_dump(separate_paren_groups('() () ( ( ( () ) )\
    \ ) () )'));\nvar_dump(separate_paren_groups('() () ( ( ( () ) ) ) () ) ('));\n\
    var_dump(separate_paren_groups('() () ( ( ( () ) ) ) () ) )'));\nvar_dump(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\necho \"</pre>\";\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(1) {\n  [0]=>\n  string(2) \"()\"\n}\nstring(12) \"Syntax Error\"\
    \narray(1) {\n  [0]=>\n  string(2) \"()\"\n}\narray(1) {\n  [0]=>\n  string(4)\
    \ \"(())\"\n}\narray(2) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(2) \"\
    ()\"\n}\narray(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(2) \"()\"\n\
    \  [2]=>\n  string(8) \"(((())))\"\n}\narray(4) {\n  [0]=>\n  string(2) \"()\"\
    \n  [1]=>\n  string(2) \"()\"\n  [2]=>\n  string(8) \"(((())))\"\n  [3]=>\n  string(2)\
    \ \"()\"\n}\nstring(12) \"Syntax Error\"\nstring(12) \"Syntax Error\"\nstring(12)\
    \ \"Syntax Error\"\narray(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4)\
    \ \"(())\"\n  [2]=>\n  string(6) \"(()())\"\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = preg_replace('/\\s+/', '', $paren_string);\n\t$open_parens =\
    \ 0;\n\t$paren_groups = [];\n\t$current_group = '';\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_parens++;\n\t\t\t\
    $current_group .= '(';\n\t\t} else {\n\t\t\t$open_parens--;\n\t\t\t$current_group\
    \ .= ')';\n\t\t}\n\t\tif ($open_parens == 0) {\n\t\t\t$paren_groups[] = $current_group;\n\
    \t\t\t$current_group = '';\n\t\t}\n\t}\n\treturn $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $open = false;\n  $groups = [];\n  $current_string = '';\n  $paren_string =\
    \ str_replace(' ', '', $paren_string);\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      if ($open) {\n        $current_string\
    \ .= '(';\n      }\n      $open = true;\n    } else if ($paren_string[$i] ===\
    \ ')') {\n      if ($open) {\n        $current_string .= ')';\n        if (strlen($current_string)\
    \ > 1) {\n          $groups[] = $current_string;\n          $current_string =\
    \ '';\n        }\n      }\n      $open = false;\n    }\n  }\n  return $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mfrh0uv.php:38\n\
    Stack trace:\n#0 /tmp/tmp5mfrh0uv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5mfrh0uv.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Set up a string to store the results in\n  $result = '';\n  // Turn the\
    \ string into an array\n  $array = str_split($paren_string);\n  // Set up a counter\n\
    \  $i = 0;\n  // Iterate through each character in the string\n  foreach ($array\
    \ as $index => $character) {\n    // Ignore spaces\n    if ($character === ' ')\
    \ {\n      continue;\n    }\n    // Keep track of open parenthesis\n    if ($character\
    \ === '(') {\n      $i++;\n    }\n    // Add to the result string if there are\
    \ more open parenthesis than closed\n    if ($i > 0) {\n      $result .= $character;\n\
    \    }\n    // Subtract from the counter every time we encounter a closed parenthesis\n\
    \    if ($character === ')') {\n      $i--;\n    }\n    // Remove the last character\
    \ in the string if the counter reaches 0\n    if ($i === 0) {\n      $result =\
    \ substr($result, 0, -1);\n      // Return the result string and start the process\
    \ over\n      yield $result;\n      $result = '';\n    }\n  }\n}\nforeach (separate_paren_groups('(\
    \ ) (( )) (( )( ))') as $result) {\n  echo $result;\n}\necho '<br>';\nforeach\
    \ (separate_paren_groups('( (( )) (( )) () ( ( ( ( ) ) ) ) )') as $result) {\n\
    \  echo $result;\n}\necho '<br>';\nforeach (separate_paren_groups(' ( ( ) ) (\
    \ ) (( )) (( )( ))') as $result) {\n  echo $result;\n}\necho '<br>';\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "((()(()()<br>((())(())()(((())))<br>(()((()(()()<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdattcu3y.php:59\nStack trace:\n#0 /tmp/tmpdattcu3y.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdattcu3y.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $groups = array();\n    $index = 0;\n    $start = -1;\n    $end = -1;\n \
    \   while($index < strlen($paren_string)) {\n        if ($paren_string[$index]\
    \ == \"(\") {\n            if ($start == -1) {\n                $start = $index;\n\
    \            }\n        } else if ($paren_string[$index] == \")\") {\n       \
    \     if ($start != -1) {\n                $end = $index;\n                $groups[]\
    \ = substr($paren_string, $start, $end - $start + 1);\n                $start\
    \ = -1;\n                $end = -1;\n            }\n        }\n        $index++;\n\
    \    }\n    return $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s7sj0m8.php:35\n\
    Stack trace:\n#0 /tmp/tmp6s7sj0m8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6s7sj0m8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$ret = array();\n\t$paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \t$len = strlen($paren_string);\n\t$start = -1;\n\t$ctr = 0;\n\tfor ($i = 0; $i\
    \ < $len; $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\tif ($ctr == 0) {\n\
    \t\t\t\t$start = $i;\n\t\t\t}\n\t\t\t$ctr++;\n\t\t} else if ($paren_string[$i]\
    \ == ')') {\n\t\t\t$ctr--;\n\t\t\tif ($ctr == 0) {\n\t\t\t\t$ret[] = substr($paren_string,\
    \ $start, $i-$start+1);\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/ /', '', $paren_string);\n    $result = [];\n\
    \    $paren_string_tmp = $paren_string;\n    $stack = [];\n    $index = 0;\n \
    \   $stack_count = 0;\n    while($index < strlen($paren_string)) {\n        if\
    \ ($paren_string[$index] == '(') {\n            $stack[] = $index;\n         \
    \   $stack_count++;\n        } else if ($paren_string[$index] == ')') {\n    \
    \        $stack_count--;\n            $stack_element = array_pop($stack);\n  \
    \          if ($stack_count == 0) {\n                $result[] = substr($paren_string_tmp,\
    \ $stack_element, $index - $stack_element + 1);\n                $paren_string_tmp\
    \ = substr($paren_string_tmp, $index + 1);\n                $index = 0;\n    \
    \        }\n        }\n        $index++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp73ge3u_s.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $stack = [];\n  $curr_group = '';\n  $prev_char = '';\n  $count\
    \ = 0;\n  foreach (str_split($paren_string) as $char) {\n    if ($char === '(')\
    \ {\n      $count++;\n      if ($prev_char === '(') {\n        $stack[] = $curr_group;\n\
    \        $curr_group = '';\n      }\n      $curr_group .= $char;\n    } elseif\
    \ ($char === ')') {\n      $count--;\n      $curr_group .= $char;\n      if ($count\
    \ === 0) {\n        if (count($stack) > 0) {\n          $prev_group = array_pop($stack);\n\
    \          $curr_group = $prev_group . $curr_group;\n        }\n        $result[]\
    \ = $curr_group;\n        $curr_group = '';\n      }\n    }\n    $prev_char =\
    \ $char;\n  }\n  return $result;\n}\n\nvar_dump(separate_paren_groups('( ) ((\
    \ )) (( )( ))'));\nvar_dump(separate_paren_groups('( )  (( ))   (( )( ))'));\n\
    var_dump(separate_paren_groups('( )  (( ))   (( )( ))()'));\nvar_dump(separate_paren_groups('(\
    \ )  (( ))   (( )( ))()(()(( ))'));\nvar_dump(separate_paren_groups('()(())((()))'));\n\
    var_dump(separate_paren_groups('()(())((()))('));\nvar_dump(separate_paren_groups('()(())((()))('));\n\
    var_dump(separate_paren_groups('((()())(()(()())))'));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n\
    \  [2]=>\n  string(6) \"(()())\"\n}\narray(3) {\n  [0]=>\n  string(2) \"()\"\n\
    \  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(6) \"(()())\"\n}\narray(4) {\n\
    \  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(6)\
    \ \"(()())\"\n  [3]=>\n  string(2) \"()\"\n}\narray(4) {\n  [0]=>\n  string(2)\
    \ \"()\"\n  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(6) \"(()())\"\n  [3]=>\n\
    \  string(2) \"()\"\n}\narray(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4)\
    \ \"(())\"\n  [2]=>\n  string(5) \"(()))\"\n}\narray(3) {\n  [0]=>\n  string(2)\
    \ \"()\"\n  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(5) \"(()))\"\n}\narray(3)\
    \ {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(5)\
    \ \"(()))\"\n}\narray(1) {\n  [0]=>\n  string(10) \"()(()())))\"\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpm4k5zce6.php:52\nStack trace:\n\
    #0 /tmp/tmpm4k5zce6.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpm4k5zce6.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$separated_groups = array();\n\t$current_group = \"\";\n\tfor ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n\t\t$current_char = $paren_string[$i];\n\t\t\
    if ($current_char == \"(\" || $current_char == \")\") {\n\t\t\t$current_group\
    \ .= $current_char;\n\t\t}\n\t\tif ($current_char == \")\" && count(str_split($current_group))\
    \ == 2) {\n\t\t\tarray_push($separated_groups, $current_group);\n\t\t\t$current_group\
    \ = \"\";\n\t\t}\n\t}\n\treturn $separated_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsuxiyap.php:29\n\
    Stack trace:\n#0 /tmp/tmpzsuxiyap.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzsuxiyap.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // To do!\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllcda348.php:17\n\
    Stack trace:\n#0 /tmp/tmpllcda348.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpllcda348.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_groups = array();\n\
    \t$open_paren_count = 0;\n\t$paren_group = '';\n\tforeach (str_split($paren_string)\
    \ as $char) {\n\t\tif ($char == '(') {\n\t\t\t$open_paren_count++;\n\t\t} elseif\
    \ ($char == ')') {\n\t\t\t$open_paren_count--;\n\t\t}\n\t\t$paren_group .= $char;\n\
    \t\tif ($open_paren_count == 0) {\n\t\t\t$paren_groups[] = $paren_group;\n\t\t\
    \t$paren_group = '';\n\t\t}\n\t}\n\treturn $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $stack = [];\n    $string = \"\";\n    $res = [];\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] === \"(\") {\n\
    \            $stack[] = $paren_string[$i];\n            $string .= $paren_string[$i];\n\
    \        } else if ($paren_string[$i] === \")\") {\n            array_pop($stack);\n\
    \            $string .= $paren_string[$i];\n            if (empty($stack)) {\n\
    \                $res[] = $string;\n                $string = \"\";\n        \
    \    }\n        }\n    }\n    return $res;\n}\necho \"separate_paren_groups('(\
    \ ) (( )) (( )( ))') = \";\nprint_r(separate_paren_groups('( ) (( )) (( )( ))'));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "separate_paren_groups('( ) (( )) (( )( ))') = Array\n(\n    [0] => ()\n\
    \    [1] => (())\n    [2] => (()())\n)\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $stack = [];\n  $groups = [];\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    $ch = $paren_string[$i];\n    if ($ch == '(') {\n      array_push($stack,\
    \ $ch);\n    } else if ($ch == ')') {\n      $temp = [];\n      while (!empty($stack)\
    \ && end($stack) != '(') {\n        array_push($temp, array_pop($stack));\n  \
    \    }\n      if (!empty($stack) && end($stack) == '(') {\n        array_pop($stack);\n\
    \      }\n      $temp = array_reverse($temp);\n      array_push($stack, implode('',\
    \ $temp));\n    }\n  }\n  $groups = array_reverse($stack);\n  return $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja7c_qxh.php:36\n\
    Stack trace:\n#0 /tmp/tmpja7c_qxh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpja7c_qxh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $parenthesis = str_split($paren_string);\n    $start = 0;\n    $end = 0;\n\
    \    $paren_arr = [];\n    foreach ($parenthesis as $key => $value) {\n      \
    \  if ($value == '(') {\n            $start = $key;\n        }\n        if ($value\
    \ == ')') {\n            $end = $key;\n            $paren_arr[] = implode('',\
    \ array_slice($parenthesis, $start, $end - $start + 1));\n        }\n    }\n \
    \   return $paren_arr;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpei3legy7.php:29\n\
    Stack trace:\n#0 /tmp/tmpei3legy7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpei3legy7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $sp = preg_split('/[)(]/', $paren_string);\n  $result = [];\n  foreach ($sp\
    \ as $item) {\n    if (strlen($item) > 0) {\n      $result[] = '(' . $item . ')';\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkbub19_.php:23\n\
    Stack trace:\n#0 /tmp/tmpfkbub19_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfkbub19_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $count = 0;\n  $result = [];\n  $temp = '';\n  $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n  $length = strlen($paren_string);\n  for ($i = 0;\
    \ $i < $length; $i++) {\n    if ($paren_string[$i] === '(') {\n      $count++;\n\
    \    } else {\n      $count--;\n    }\n    $temp .= $paren_string[$i];\n    if\
    \ ($count === 0) {\n      $result[] = $temp;\n      $temp = '';\n    }\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7illhm8h.php:16\n\
    Stack trace:\n#0 /tmp/tmp7illhm8h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7illhm8h.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $count = 0;\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n    \
    \    if ($paren_string[$i] == '(') {\n            $count++;\n        } else if\
    \ ($paren_string[$i] == ')') {\n            $count--;\n        }\n\n        if\
    \ ($count == 0) {\n            $result[] = substr($paren_string, 0, $i + 1);\n\
    \            $paren_string = substr($paren_string, $i + 1);\n            $i =\
    \ 0;\n        }\n    }\n    return $result;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']);\n\
    assert(separate_paren_groups('( ) (( )) ( ( )( ))') == ['()', '(())', '(())']);\n\
    assert(separate_paren_groups('( ) (( )') == []);\nassert(separate_paren_groups('(\
    \ ) (( )) (( )( )) ') == ['()', '(())', '(()())']);\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(separate_paren_groups('( ) (( )) (( )( ))')\
    \ == ['()', '(())', '(()())']) failed in /tmp/tmpf7zq9ncp.php on line 29\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $separated_groups\
    \ = [];\n    $paren_stack = [];\n    $open_paren = '(';\n    $close_paren = ')';\n\
    \    $new_group = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n\
    \        $char = $paren_string[$i];\n        if ($char === $open_paren) {\n  \
    \          array_push($paren_stack, $char);\n        } else if ($char === $close_paren)\
    \ {\n            array_pop($paren_stack);\n        }\n        $new_group .= $char;\n\
    \        if (!$paren_stack) {\n            array_push($separated_groups, $new_group);\n\
    \            $new_group = '';\n        }\n    }\n    return $separated_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // YOUR CODE HERE\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilfhgw5o.php:17\n\
    Stack trace:\n#0 /tmp/tmpilfhgw5o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpilfhgw5o.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$groups = array();\n\
    \tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i]\
    \ == '(') {\n\t\t\t$balanced = 1;\n\t\t\t$paren_group = \"\";\n\t\t\twhile ($balanced\
    \ > 0) {\n\t\t\t\t$i++;\n\t\t\t\tif ($paren_string[$i] == '(') {\n\t\t\t\t\t$balanced++;\n\
    \t\t\t\t} elseif ($paren_string[$i] == ')') {\n\t\t\t\t\t$balanced--;\n\t\t\t\t\
    }\n\t\t\t\t$paren_group .= $paren_string[$i];\n\t\t\t}\n\t\t\t$groups[] = $paren_group;\n\
    \t\t}\n\t}\n\treturn $groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7ui7kgd.php:35\n\
    Stack trace:\n#0 /tmp/tmpb7ui7kgd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpb7ui7kgd.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Write your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrvep3qs.php:16\n\
    Stack trace:\n#0 /tmp/tmpvrvep3qs.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvrvep3qs.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$results = array();\n\t$open_index = 0;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_index = $i;\n\t\t\
    } else if ($paren_string[$i] == ')') {\n\t\t\t$results[] = substr($paren_string,\
    \ $open_index, $i - $open_index + 1);\n\t\t}\n\t}\n\treturn $results;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1wg1c34.php:25\n\
    Stack trace:\n#0 /tmp/tmpu1wg1c34.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu1wg1c34.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/\\s/', '', $paren_string);\n\n    // your\
    \ code here\n}\n\nif (!debug_backtrace()) {\n    $paren_string = '( ) (( )) ((\
    \ )( ))';\n    var_dump(separate_paren_groups($paren_string));\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeudx8hnk.php:23\n\
    Stack trace:\n#0 /tmp/tmpeudx8hnk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeudx8hnk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    // echo \"paren_string = $paren_string\\n\";\n    $length = strlen($paren_string);\n\
    \    // echo \"length = $length\\n\";\n    $temp = \"\";\n    $parens = array();\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $temp .= $paren_string[$i];\n        } else {\n            $temp\
    \ .= $paren_string[$i];\n            $parens[] = $temp;\n            $temp = \"\
    \";\n        }\n    }\n    return $parens;\n}\n\n$paren_string = '( ) (( )) ((\
    \ )( ))';\n$parens = separate_paren_groups($paren_string);\nprint_r($parens);\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => (()\n    [2] => )\n    [3] => (()\n\
    \    [4] => ()\n    [5] => )\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpa4slf8lo.php:36\nStack trace:\n#0 /tmp/tmpa4slf8lo.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa4slf8lo.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_groups = [];\n    $paren_groups_elements = [];\n    $paren_groups_elements_index\
    \ = 0;\n    $paren_groups_elements_count = 0;\n    $paren_groups_count = 0;\n\
    \    $paren_groups_index = 0;\n    $paren_group_string = '';\n    $paren_groups_string\
    \ = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(' || $paren_string[$i] == ')') {\n            $paren_group_string .= $paren_string[$i];\n\
    \            $paren_groups_elements_count++;\n            if ($paren_groups_elements_count\
    \ == 2) {\n                $paren_groups_elements[$paren_groups_elements_index]\
    \ = $paren_group_string;\n                $paren_groups_elements_index++;\n  \
    \              $paren_groups_elements_count = 0;\n                $paren_group_string\
    \ = '';\n            }\n        }\n    }\n    $paren_groups_count = count($paren_groups_elements);\n\
    \    for ($i = 0; $i < $paren_groups_count; $i++) {\n        if ($paren_groups_elements[$i]\
    \ == '()') {\n            $paren_groups[$paren_groups_index] = $paren_groups_elements[$i];\n\
    \            $paren_groups_index++;\n        }\n    }\n    $paren_groups_count\
    \ = count($paren_groups);\n    for ($i = 0; $i < $paren_groups_count; $i++) {\n\
    \        $paren_groups_string .= $paren_groups[$i];\n    }\n    $paren_groups\
    \ = [];\n    $paren_groups_index = 0;\n    for ($i = 0; $i < strlen($paren_groups_string);\
    \ $i++) {\n        if ($paren_groups_string[$i] == '(' || $paren_groups_string[$i]\
    \ == ')') {\n            $paren_group_string .= $paren_groups_string[$\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd491i3w4.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $count = strlen($paren_string);\n    $balance = 0;\n    $i = 0;\n    $j =\
    \ 0;\n    while ($i < $count) {\n        $c = $paren_string[$i];\n        $balance\
    \ += $c == '(' ? 1 : -1;\n        if ($balance == 0) {\n            $result[]\
    \ = substr($paren_string, $j, $i - $j + 1);\n            $j = $i + 1;\n      \
    \  }\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // TODO Write code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kyoqjv7.php:16\n\
    Stack trace:\n#0 /tmp/tmp5kyoqjv7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp5kyoqjv7.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_list = [];\n\
    \    $curr_str = '';\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open_parens++;\n\
    \            $curr_str .= '(';\n        } else {\n            $open_parens--;\n\
    \            $curr_str .= ')';\n        }\n        if ($open_parens == 0) {\n\
    \            $paren_list[] = $curr_str;\n            $curr_str = '';\n       \
    \ }\n    }\n    return $paren_list;\n}\n\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $parens = str_split($paren_string);\n    $current_group = '';\n    $paren_groups\
    \ = [];\n    $open_parens = 0;\n    foreach ($parens as $paren) {\n        if\
    \ ($paren === '(') {\n            $open_parens++;\n            $current_group\
    \ .= $paren;\n        } elseif ($paren === ')') {\n            $open_parens--;\n\
    \            $current_group .= $paren;\n        }\n        if ($open_parens ===\
    \ 0) {\n            $paren_groups[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n$paren_groups = separate_paren_groups('(\
    \ ) (( )) (( )( ))');\nprint_r($paren_groups);\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => \n    [2] => (())\n    [3] => \n  \
    \  [4] => (()())\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21n4r3m_.php:35\n\
    Stack trace:\n#0 /tmp/tmp21n4r3m_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp21n4r3m_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $separated_string = array();\n    $stack = array();\n    $str_array = str_split($paren_string);\n\
    \    $stack_count = 0;\n    $push_count = 0;\n    foreach ($str_array as $k =>\
    \ $v) {\n        if ($v == '(') {\n            $stack_count++;\n            $stack[$stack_count][]\
    \ = $v;\n        } elseif ($v == ')') {\n            if ($stack_count != 0) {\n\
    \                $stack[$stack_count][] = $v;\n                $separated_string[$push_count]\
    \ = implode('', $stack[$stack_count]);\n                $push_count++;\n     \
    \           $stack_count--;\n            }\n        }\n    }\n    return $separated_string;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvtfqipg.php:35\n\
    Stack trace:\n#0 /tmp/tmpkvtfqipg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkvtfqipg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$list = array();\n\t$last_idx = -1;\n\t$len = strlen($paren_string);\n\t$open_paren_ct\
    \ = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\
    \t\t\t$open_paren_ct++;\n\t\t} else if ($paren_string[$i] == ')') {\n\t\t\t$open_paren_ct--;\n\
    \t\t}\n\t\tif ($open_paren_ct == 0) {\n\t\t\t$list[] = substr($paren_string, $last_idx\
    \ + 1, $i - $last_idx);\n\t\t\t$last_idx = $i;\n\t\t}\n\t}\n\treturn $list;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8gow1s9.php:32\n\
    Stack trace:\n#0 /tmp/tmpt8gow1s9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt8gow1s9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$result = [];\n\t$paren_string = str_replace(' ', '', $paren_string);\n\t$prev_index\
    \ = 0;\n\t$current_index = 0;\n\tfor ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$current_index++;\n\t\t} else\
    \ if ($paren_string[$i] == ')') {\n\t\t\t$current_index--;\n\t\t}\n\t\tif ($current_index\
    \ == 0) {\n\t\t\t$result[] = substr($paren_string, $prev_index, $i - $prev_index\
    \ + 1);\n\t\t\t$prev_index = $i + 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $reg = '/\\([^\\(\\)]*\\)/';\n    $result = [];\n    while (preg_match($reg,\
    \ $paren_string, $match)) {\n        array_push($result, $match[0]);\n       \
    \ $paren_string = preg_replace($reg, '', $paren_string, 1);\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwqqu43_.php:22\n\
    Stack trace:\n#0 /tmp/tmprwqqu43_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprwqqu43_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl79bic04.php:16\n\
    Stack trace:\n#0 /tmp/tmpl79bic04.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpl79bic04.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $arr = str_split($paren_string);\n  $answer = array();\n  $str = '';\n  $count\
    \ = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] === '(') {\n\
    \      $count++;\n      $str .= $arr[$i];\n    } else if ($arr[$i] === ')') {\n\
    \      $count--;\n      $str .= $arr[$i];\n    }\n    if ($count === 0 && $str\
    \ !== '') {\n      array_push($answer, $str);\n      $str = '';\n    }\n  }\n\
    \  return $answer;\n}\n\necho('separate_paren_groups test: ');\n$paren_string\
    \ = '( ( ( ) ) ) ( ( ) ( ) ) ( ( ) ( ) )';\n$arr = separate_paren_groups($paren_string);\n\
    var_dump($arr);\necho('<br>');\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "separate_paren_groups test: array(3) {\n  [0]=>\n  string(6) \"((()))\"\
    \n  [1]=>\n  string(6) \"(()())\"\n  [2]=>\n  string(6) \"(()())\"\n}\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n    $result = [];\n    $left = 0;\n    $right = 0;\n \
    \   $temp = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n      \
    \  if ($paren_string[$i] != ' ') {\n            $temp .= $paren_string[$i];\n\
    \            if ($paren_string[$i] == '(') {\n                $left++;\n     \
    \       } else {\n                $right++;\n            }\n            if ($left\
    \ == $right) {\n                $result[] = $temp;\n                $temp = '';\n\
    \                $left = 0;\n                $right = 0;\n            }\n    \
    \    }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$tokenized = explode(' ', $paren_string);\n\t$is_paren = function($str) {\n\t\
    \treturn $str === '(' || $str === ')';\n\t};\n\t$group = '';\n\t$groups = [];\n\
    \t$paren_stack = [];\n\tforeach ($tokenized as $token) {\n\t\tif ($is_paren($token))\
    \ {\n\t\t\t$group .= $token;\n\t\t\tif ($token === '(') {\n\t\t\t\tarray_push($paren_stack,\
    \ $token);\n\t\t\t} else {\n\t\t\t\tarray_pop($paren_stack);\n\t\t\t}\n\t\t\t\
    if (empty($paren_stack)) {\n\t\t\t\tarray_push($groups, $group);\n\t\t\t\t$group\
    \ = '';\n\t\t\t}\n\t\t}\n\t}\n\treturn $groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ru04q2h.php:38\n\
    Stack trace:\n#0 /tmp/tmp4ru04q2h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4ru04q2h.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // check if the paren string contains only ' ' and '()'\n    if (preg_match('/^[\
    \ ]*(\\([ ]*\\))[ ]*$/', $paren_string)) {\n        return true;\n    }\n    //\
    \ check if the paren string contains only '()'\n    if (preg_match('/^(\\([ ]*\\\
    ))[ ]*$/', $paren_string)) {\n        return false;\n    }\n    // check if the\
    \ paren string contains only ' '\n    if (preg_match('/^[ ]*$/', $paren_string))\
    \ {\n        return false;\n    }\n    // check if the paren string contains something\
    \ other than ' ' and '()'\n    if (preg_match('/[^ ]|[^()]/', $paren_string))\
    \ {\n        return false;\n    }\n    $array = array();\n    // get the open\
    \ paren count and close paren count\n    $open_paren_count = substr_count($paren_string,\
    \ '(');\n    $close_paren_count = substr_count($paren_string, ')');\n    // check\
    \ if the paren string contains '(' but not ')'\n    if ($open_paren_count != 0\
    \ && $close_paren_count == 0) {\n        return false;\n    }\n    // check if\
    \ the paren string contains ')' but not '('\n    if ($open_paren_count == 0 &&\
    \ $close_paren_count != 0) {\n        return false;\n    }\n    // check if the\
    \ paren string contains more open paren than close paren\n    if ($open_paren_count\
    \ > $close_paren_count) {\n        return false;\n    }\n    // check if the paren\
    \ string contains more close paren than open paren\n    if ($open_paren_count\
    \ < $close_paren_count) {\n        return false;\n    }\n    // check if the paren\
    \ string contains more open paren than close paren\n    if ($open_paren_count\
    \ > $close_paren_count) {\n        return false;\n    }\n    // remove all the\
    \ spaces\n    $paren_string = str_replace(' ', '', $\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajujzbgw.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open_paren = '(';\n    $close_paren = ')';\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $array_counter = 0;\n    $paren_string_array = array();\n\
    \    foreach ($paren_array as $key => $value) {\n        if ($value == $open_paren)\
    \ {\n            $paren_count++;\n        } elseif ($value == $close_paren) {\n\
    \            $paren_count--;\n        }\n        if ($paren_count == 0) {\n  \
    \          array_push($paren_string_array, implode(array_slice($paren_array, 0,\
    \ $key + 1)));\n            $paren_array = array_slice($paren_array, $key + 1);\n\
    \            $array_counter++;\n        }\n    }\n    return $paren_string_array;\n\
    }\nprint_r(separate_paren_groups('( ) (( )) (( )( ))'));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ( )\n    [1] =>  (( \n    [2] => )) (( )( \n    [3]\
    \ => ))\n    [4] => \n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7tenaml.php:35\n\
    Stack trace:\n#0 /tmp/tmp_7tenaml.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_7tenaml.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $output = [];\n    $paren_string = trim($paren_string);\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open = $i;\n            $close = 0;\n            for ($j = $i; $j\
    \ < strlen($paren_string); $j++) {\n                if ($paren_string[$j] == '(')\
    \ {\n                    $close++;\n                } else if ($paren_string[$j]\
    \ == ')') {\n                    $close--;\n                }\n              \
    \  if ($close == 0) {\n                    $close = $j;\n                    break;\n\
    \                }\n            }\n            $output[] = substr($paren_string,\
    \ $open, $close - $open + 1);\n            $i = $close;\n        }\n    }\n  \
    \  return $output;\n}\n\n$paren_string = '( ) (( )) (( )( ))';\n$output = separate_paren_groups($paren_string);\n\
    foreach ($output as $item) {\n    echo $item . '<br>';\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "( )<br>(( ))<br>(( )( ))<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpk8jrogy9.php:46\nStack trace:\n#0 /tmp/tmpk8jrogy9.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpk8jrogy9.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_array = explode(' ', str_replace(' ', '', $paren_string));\n  $open_count\
    \ = 0;\n  $curr_string = '';\n  $paren_groups = [];\n  foreach ($paren_array as\
    \ $paren) {\n    if ($paren === '(') {\n      $open_count++;\n      $curr_string\
    \ .= $paren;\n    } else if ($paren === ')') {\n      $open_count--;\n      $curr_string\
    \ .= $paren;\n      if ($open_count === 0) {\n        $paren_groups[] = $curr_string;\n\
    \        $curr_string = '';\n      }\n    }\n  }\n  return $paren_groups;\n}\n\
    \necho json_encode(separate_paren_groups('( ) (( )) (( )( ))'));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50cc0e5e.php:35\n\
    Stack trace:\n#0 /tmp/tmp50cc0e5e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp50cc0e5e.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $out = [];\n    $tmp = '';\n    $counter = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] === '(') {\n            $counter++;\n\
    \            $tmp .= '(';\n        } elseif ($paren_string[$i] === ')') {\n  \
    \          $counter--;\n            $tmp .= ')';\n        }\n        if ($counter\
    \ === 0 && $tmp !== '') {\n            $out[] = $tmp;\n            $tmp = '';\n\
    \        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$return = array();\n\t$current_paren_string = '';\n\t$paren_string = str_replace('\
    \ ', '', $paren_string);\n\t$paren_string_len = strlen($paren_string);\n\tfor\
    \ ($i = 0; $i < $paren_string_len; $i++) {\n\t\t$current_char = $paren_string[$i];\n\
    \t\tif ($current_char == '(') {\n\t\t\t$stack_len = count($stack);\n\t\t\t// echo\
    \ 'Pushing current char on to stack'.\"\\n\";\n\t\t\t$stack[] = $current_char;\n\
    \t\t\t// echo 'Stack length is '.$stack_len.\"\\n\";\n\t\t\t// echo 'String is\
    \ now: '.$current_paren_string.\"\\n\";\n\t\t\t// echo \"\\n\";\n\t\t} else if\
    \ ($current_char == ')') {\n\t\t\t// echo 'Popping current char off of stack'.\"\
    \\n\";\n\t\t\t$popped_char = array_pop($stack);\n\t\t\t$stack_len = count($stack);\n\
    \t\t\t// echo 'Stack length is '.$stack_len.\"\\n\";\n\t\t\t// echo 'String is\
    \ now: '.$current_paren_string.\"\\n\";\n\t\t\t// echo \"\\n\";\n\t\t\tif ($stack_len\
    \ == 0) {\n\t\t\t\t// echo 'Stack is empty'.\"\\n\";\n\t\t\t\t// echo 'Adding\
    \ '.$current_paren_string.' to return array'.\"\\n\";\n\t\t\t\t$return[] = $current_paren_string;\n\
    \t\t\t\t$current_paren_string = '';\n\t\t\t}\n\t\t}\n\t\t$current_paren_string\
    \ .= $current_char;\n\t}\n\treturn $return;\n}\n\n$paren_string = '( ) (( )) ((\
    \ )( ))';\n$return = separate_paren_groups($paren_string);\nvar_dump($return);\n\
    \n$paren_string = '( ( ( ( ) ) ) )';\n$return = separate_paren_groups($paren_string);\n\
    var_dump($return);\n\n$paren_string = '(  )\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1763vtct.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = preg_replace('/\\s+/', '', $paren_string);\n\t$paren_groups\
    \ = array();\n\t$start = 0;\n\t$length = strlen($paren_string);\n\t$open_count\
    \ = 0;\n\t$close_count = 0;\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$char =\
    \ $paren_string[$i];\n\t\tif ($char == '(') {\n\t\t\t$open_count++;\n\t\t} else\
    \ if ($char == ')') {\n\t\t\t$close_count++;\n\t\t}\n\t\tif ($open_count == $close_count)\
    \ {\n\t\t\tarray_push($paren_groups, substr($paren_string, $start, $i - $start\
    \ + 1));\n\t\t\t$start = $i + 1;\n\t\t\t$open_count = 0;\n\t\t\t$close_count =\
    \ 0;\n\t\t}\n\t}\n\treturn $paren_groups;\n}\n\nprint_r(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_groups = [];\n    // YOUR CODE HERE\n    $split_paren_groups = explode(')',\
    \ $paren_string);\n    $paren_groups = array_filter($split_paren_groups, function($group)\
    \ {\n        return strlen($group) > 0;\n    });\n    return $paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r1xhlf8.php:22\n\
    Stack trace:\n#0 /tmp/tmp9r1xhlf8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9r1xhlf8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $start = $end = 0;\n  $groups = [];\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $start = strpos($paren_string, '(');\n  while ($start >=\
    \ 0) {\n    $end = strpos($paren_string, ')', $start);\n    $groups[] = substr($paren_string,\
    \ $start, $end - $start + 1);\n    $start = strpos($paren_string, '(', $end);\n\
    \  }\n  return $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 4096 bytes) in /tmp/tmpvetbrgtk.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbffcy61.php:17\n\
    Stack trace:\n#0 /tmp/tmpxbffcy61.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxbffcy61.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $pos = 0;\n  $paren_groups\
    \ = [];\n  while (true) {\n    $open_pos = strpos($paren_string, '(', $pos);\n\
    \    if ($open_pos === false) {\n      break;\n    }\n    $close_pos = strpos($paren_string,\
    \ ')', $open_pos);\n    $group = substr($paren_string, $open_pos, $close_pos -\
    \ $open_pos + 1);\n    $paren_groups[] = $group;\n    $pos = $close_pos + 1;\n\
    \  }\n  return $paren_groups;\n}\n\n$test_cases = [\n  '()' => ['()'],\n  '(())'\
    \ => ['(())'],\n  '(()())' => ['(()())'],\n  '(( ))' => ['(( ))'],\n  '(( )) ((\
    \ ))' => ['(( ))', '(( ))'],\n  '(( )) (( (( )) ))' => ['(( ))', '(( (( )) ))'],\n\
    \  '(( )) (( )) (( ))' => ['(( ))', '(( ))', '(( ))'],\n  '(( )) (( (( )) )) ((\
    \ ))' => ['(( ))', '(( (( )) ))', '(( ))'],\n  '(( )) (( (( )) )) (( (( )) ))'\
    \ => ['(( ))', '(( (( )) ))', '(( (( )) ))'],\n  '(( )) (( )) (( )) (( ))' =>\
    \ ['(( ))', '(( ))', '(( ))', '(( ))'],\n  '(( )) (( )) (( )) (( )) (( ))' =>\
    \ ['(( ))', '(( ))', '(( ))', '(( ))', '(( ))'],\n  '(( )) (( )) (( )) (( )) ((\
    \ )) (( ))' => ['(( ))', '(( ))', '(( ))', '(( ))', '(( ))', '(( ))'],\n  '((\
    \ )) (( )) (( )) (( )) (( )) (( )) (( ))' => ['(( ))', '(( ))', '(( ))', '(( ))',\
    \ '(( ))', '(( ))', '(( ))'],\n  '(( )) (( )) (( )) (( )) (( )) ((\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdc59bjd3.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_group_strings = [];\n    $current_paren_group = '';\n    $left_paren_count\
    \ = 0;\n    $right_paren_count = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char === '(') {\n\
    \            $left_paren_count++;\n        } elseif ($char === ')') {\n      \
    \      $right_paren_count++;\n        }\n\n        if ($left_paren_count === $right_paren_count)\
    \ {\n            if ($left_paren_count > 0) {\n                $paren_group_strings[]\
    \ = $current_paren_group;\n                $current_paren_group = '';\n      \
    \          $left_paren_count = 0;\n                $right_paren_count = 0;\n \
    \           }\n        } else {\n            $current_paren_group .= $char;\n\
    \        }\n    }\n    return $paren_group_strings;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg9e5wf9.php:39\n\
    Stack trace:\n#0 /tmp/tmppg9e5wf9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppg9e5wf9.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $parens = str_split($paren_string);\n  $open_parens = 0;\n  $groups = [];\n\
    \  $group = '';\n  foreach ($parens as $char) {\n    if ($char === '(') {\n  \
    \    $open_parens++;\n      $group .= $char;\n    } elseif ($char === ')') {\n\
    \      $open_parens--;\n      $group .= $char;\n    }\n    if ($open_parens ===\
    \ 0) {\n      $groups[] = $group;\n      $group = '';\n    }\n  }\n  return $groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv6tv13w.php:33\n\
    Stack trace:\n#0 /tmp/tmpkv6tv13w.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkv6tv13w.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $arr = str_split($paren_string);\n    $start_paren_index = 0;\n    $end_paren_index\
    \ = 0;\n    $paren_groups = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] === \"(\") {\n            $start_paren_index = $i;\n   \
    \     }\n        if ($arr[$i] === \")\") {\n            $end_paren_index = $i;\n\
    \            $paren_groups[] = substr($paren_string, $start_paren_index, $end_paren_index\
    \ + 1 - $start_paren_index);\n        }\n    }\n    return $paren_groups;\n}\n\
    echo separate_paren_groups('( ) (( )) (( )( ))') . \"\\n\";\necho separate_paren_groups('((\
    \  (  ( () ())  )  ( ( ( ) () ) )  ))') . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5xyimxb.php:32\n\
    Stack trace:\n#0 /tmp/tmpb5xyimxb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb5xyimxb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd94ick8i.php:16\n\
    Stack trace:\n#0 /tmp/tmpd94ick8i.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpd94ick8i.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $matches = array();\n    preg_match_all('#\\([^()]*\\)#', $paren_string,\
    \ $matches);\n    return $matches[0];\n}\n\nfunction candidate(...$args) {\n \
    \   return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s1i1dxn.php:19\n\
    Stack trace:\n#0 /tmp/tmp6s1i1dxn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6s1i1dxn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_groups = array();\n    $current_group = '';\n    $open_paren_count\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_paren_count++;\n            $current_group .= '(';\n\
    \        } else if ($paren_string[$i] == ')') {\n            $open_paren_count--;\n\
    \            $current_group .= ')';\n        }\n        if ($open_paren_count\
    \ == 0) {\n            array_push($paren_groups, $current_group);\n          \
    \  $current_group = '';\n        }\n    }\n    return $paren_groups;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_59sr3be.php:32\n\
    Stack trace:\n#0 /tmp/tmp_59sr3be.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_59sr3be.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // HINT:\n    // Just as parenthesis may be nested, so can your loop!\n \
    \   // It can be useful to keep track of how many levels deep the parentheses\
    \ nesting is.\n    $counter = 0;\n    $paren_string = preg_replace('/\\s/', '',\
    \ $paren_string);\n    $out_arr = array();\n    $tmp_str = '';\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $counter++;\n            $tmp_str .= $paren_string[$i];\n   \
    \     } elseif ($paren_string[$i] == ')') {\n            $counter--;\n       \
    \     $tmp_str .= $paren_string[$i];\n            if ($counter == 0) {\n     \
    \           $out_arr[] = $tmp_str;\n                $tmp_str = '';\n         \
    \   }\n        }\n    }\n    return $out_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gp9rrjf.php:17\n\
    Stack trace:\n#0 /tmp/tmp1gp9rrjf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1gp9rrjf.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $stack = [];\n\
    \    $group_strings = [];\n    $current_group = '';\n    $last_char = '';\n  \
    \  $group_open = false;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n\
    \        $char = $paren_string[$i];\n        if ($char == '(') {\n           \
    \ if ($last_char == ')') {\n                $group_strings[] = $current_group;\n\
    \                $current_group = '';\n            }\n            array_push($stack,\
    \ $char);\n            $group_open = true;\n        } else if ($char == ')') {\n\
    \            array_pop($stack);\n            if (empty($stack)) {\n          \
    \      $group_open = false;\n            }\n        }\n        if ($group_open)\
    \ {\n            $current_group .= $char;\n        }\n        $last_char = $char;\n\
    \    }\n    if (!empty($current_group)) {\n        $group_strings[] = $current_group;\n\
    \    }\n    return $group_strings;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0idj5d5.php:46\n\
    Stack trace:\n#0 /tmp/tmpe0idj5d5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe0idj5d5.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8seb1qi.php:16\n\
    Stack trace:\n#0 /tmp/tmph8seb1qi.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph8seb1qi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Replace any spaces with an empty string.\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $separated_groups = [];\n  $working_group = '';\n\
    \  $current_nest_level = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    // For this to work the first thing we encounter should be a left paren\n\
    \    if (substr($paren_string, $i, 1) == '(') {\n      $current_nest_level +=\
    \ 1;\n      $working_group .= '(';\n    } elseif (substr($paren_string, $i, 1)\
    \ == ')') {\n      $current_nest_level -= 1;\n      $working_group .= ')';\n \
    \     if ($current_nest_level == 0) {\n        $separated_groups[] = $working_group;\n\
    \        $working_group = '';\n      }\n    }\n  }\n  return $separated_groups;\n\
    }\n\necho 'separate_paren_groups(\\'( ) (( )) (( )( ))\\') => ';\nprint_r(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\necho 'separate_paren_groups(\\'( )\\') => ';\nprint_r(separate_paren_groups('(\
    \ )'));\necho 'separate_paren_groups(\\'\\') => ';\nprint_r(separate_paren_groups(''));\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "separate_paren_groups('( ) (( )) (( )( ))') => Array\n(\n    [0] => ()\n\
    \    [1] => (())\n    [2] => (()())\n)\nseparate_paren_groups('( )') => Array\n\
    (\n    [0] => ()\n)\nseparate_paren_groups('') => Array\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $left = 0;\n  $right = 0;\n  $result = [];\n  $string = \"\";\n  for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] === \"(\"\
    ) {\n      $left++;\n    } else if ($paren_string[$i] === \")\") {\n      $right++;\n\
    \    }\n\n    if ($paren_string[$i] !== \" \") {\n      $string .= $paren_string[$i];\n\
    \    }\n\n    if ($left === $right) {\n      $result[] = $string;\n      $string\
    \ = \"\";\n      $left = 0;\n      $right = 0;\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr582jc5p.php:38\n\
    Stack trace:\n#0 /tmp/tmpr582jc5p.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr582jc5p.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_array = str_split($paren_string);\n    $open_paren_index = [];\n \
    \   $separated_groups = [];\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            array_push($open_paren_index,\
    \ $i);\n        } elseif ($paren_array[$i] == ')') {\n            $open_paren_index_count\
    \ = count($open_paren_index);\n            $open_paren_index_count_minus_one =\
    \ $open_paren_index_count - 1;\n            $separated_groups[] = $paren_string[$open_paren_index[$open_paren_index_count_minus_one]\
    \ . $i];\n            unset($open_paren_index[$open_paren_index_count_minus_one]);\n\
    \        }\n    }\n    return $separated_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fn71eis.php:30\n\
    Stack trace:\n#0 /tmp/tmp_fn71eis.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_fn71eis.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = explode(' ', $paren_string);\n  $paren_string = array_filter($paren_string);\n\
    \  $paren_group = array();\n  $output = array();\n  $i = 0;\n  foreach ($paren_string\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_group[$i] = '';\n    }\
    \ else if ($paren == ')') {\n      array_push($output, $paren_group[$i]);\n  \
    \    $i--;\n    } else {\n      $paren_group[$i] .= $paren;\n    }\n    $i++;\n\
    \  }\n  return $output;\n}\nprint_r(separate_paren_groups('( ) (( )) (( )( ))'));\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => \n    [2] => \n    [3] => \n    [4] =>\
    \ \n    [5] => \n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply0sromm.php:36\n\
    Stack trace:\n#0 /tmp/tmply0sromm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmply0sromm.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $output = [];\n  $current_group = '';\n  $opened = 0;\n  for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n    if ($char\
    \ == '(') {\n      $opened++;\n      $current_group .= $char;\n    } elseif ($char\
    \ == ')') {\n      $opened--;\n      $current_group .= $char;\n    }\n    if ($opened\
    \ == 0 && $current_group != '') {\n      $output[] = $current_group;\n      $current_group\
    \ = '';\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$result = array();\n\t// Your code here\n\t$paren_string = str_replace(' ',\
    \ '', $paren_string);\n\t$open_paren_count = 0;\n\t$open_paren_index = -1;\n\t\
    for ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] ==\
    \ '(') {\n\t\t\tif ($open_paren_count == 0) {\n\t\t\t\t$open_paren_index = $i;\n\
    \t\t\t}\n\t\t\t$open_paren_count++;\n\t\t} else if ($paren_string[$i] == ')')\
    \ {\n\t\t\t$open_paren_count--;\n\t\t\tif ($open_paren_count == 0) {\n\t\t\t\t\
    $result[] = substr($paren_string, $open_paren_index, $i - $open_paren_index +\
    \ 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $arr_of_paren_groups = array();\n    $prev_open_paren_idx = null;\n    $paren_open_idx\
    \ = null;\n    $paren_close_idx = null;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            if ($prev_open_paren_idx\
    \ == null) {\n                $prev_open_paren_idx = $i;\n            }\n    \
    \        $paren_open_idx = $i;\n        }\n        if ($paren_string[$i] == ')')\
    \ {\n            $paren_close_idx = $i;\n            $temp_paren_string = '';\n\
    \            for ($j = $prev_open_paren_idx; $j <= $paren_close_idx; $j++) {\n\
    \                $temp_paren_string .= $paren_string[$j];\n            }\n   \
    \         $arr_of_paren_groups[] = $temp_paren_string;\n            $prev_open_paren_idx\
    \ = $paren_open_idx + 1;\n        }\n    }\n    return $arr_of_paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncbo0ur.php:39\n\
    Stack trace:\n#0 /tmp/tmpvncbo0ur.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvncbo0ur.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open = 0;\n    $groups = [];\n    $cur_group = '';\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n     \
    \   if ($char == '(') {\n            $open++;\n            $cur_group .= $char;\n\
    \        } else if ($char == ')') {\n            $open--;\n            $cur_group\
    \ .= $char;\n        } else {\n            continue;\n        }\n        if ($open\
    \ == 0) {\n            $groups[] = $cur_group;\n            $cur_group = '';\n\
    \        }\n    }\n    return $groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $string = str_replace(' ', '', $paren_string);\n    $sep_str = [];\n    $start\
    \ = 0;\n    $end = 0;\n    $len = strlen($string);\n    $i = 0;\n    while ($i\
    \ < $len) {\n        if ($string[$i] == '(') {\n            $start = $i;\n   \
    \         $i++;\n            while ($i < $len) {\n                if ($string[$i]\
    \ == ')') {\n                    $end = $i;\n                    $sep_str[] =\
    \ substr($string, $start, $end - $start + 1);\n                    $i++;\n   \
    \                 break;\n                }\n                $i++;\n         \
    \   }\n        }\n        $i++;\n    }\n    return $sep_str;\n}\n\n$test_cases\
    \ = [\n    \"\",\n    \"    \",\n    \"()\",\n    \"()()\",\n    \" ( ) (() (\
    \ ()))\",\n    \"  (  )  (())  (  (  ))\",\n    \" ( ()) ( ( ) ) (( )) ((( )))\
    \   ( ( () ()) ))\",\n    \"  ((  ))   ( ( ()  (  )  )  ) )  )\"\n];\n\nforeach\
    \ ($test_cases as $test_case) {\n    $str = separate_paren_groups($test_case);\n\
    \    print_r($str);\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => ()\n)\n\nArray\n(\n\
    \    [0] => ()\n)\n\nArray\n(\n    [0] => ()\n    [1] => ()\n    [2] => ()\n)\n\
    \nArray\n(\n    [0] => ()\n    [1] => ()\n    [2] => (()\n)\n\nArray\n(\n    [0]\
    \ => (()\n    [1] => (()\n    [2] => (()\n    [3] => ((()\n    [4] => ((()\n)\n\
    \nArray\n(\n    [0] => (()\n    [1] => ((()\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp8jeaxbk.php:55\nStack trace:\n#0 /tmp/tmpp8jeaxbk.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp8jeaxbk.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $temp = '';\n    $open = 0;\n    $closed = 0;\n    $chars\
    \ = str_split($paren_string);\n    foreach ($chars as $char) {\n        if ($char\
    \ == '(') {\n            $open++;\n        } elseif ($char == ')') {\n       \
    \     $closed++;\n        }\n        $temp .= $char;\n        if ($open > 0 &&\
    \ $open == $closed) {\n            $result[] = $temp;\n            $temp = '';\n\
    \            $open = 0;\n            $closed = 0;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbhk1bxp.php:36\n\
    Stack trace:\n#0 /tmp/tmpfbhk1bxp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfbhk1bxp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk59sb6e.php:17\n\
    Stack trace:\n#0 /tmp/tmpjk59sb6e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjk59sb6e.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $holder = array();\n  $count = 0;\n  $start = 0;\n  $len = strlen($paren_string);\n\
    \  while ($count < $len) {\n    $ch = $paren_string[$count];\n    if ($ch == '(')\
    \ {\n      $start = $count;\n    } else if ($ch == ')') {\n      $holder[] = substr($paren_string,\
    \ $start, $count - $start + 1);\n    }\n    $count++;\n  }\n  return $holder;\n\
    }\n\n$paren_string = '( ) (( )) (( )( ))';\necho separate_paren_groups($paren_string);\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4j1_v4f.php:32\n\
    Stack trace:\n#0 /tmp/tmpu4j1_v4f.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu4j1_v4f.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $new_paren_string = str_replace(' ', '', $paren_string);\n    $paren_group_count\
    \ = substr_count($new_paren_string, '(');\n    $paren_groups = [];\n    $paren_group\
    \ = '';\n    $i = 0;\n    while($i < $paren_group_count) {\n        $new_group\
    \ = strstr($new_paren_string, '()', true);\n        $new_paren_string = substr(strstr($new_paren_string,\
    \ '()'), 2);\n        if(!empty($new_group)) {\n            $paren_group .= $new_group\
    \ . '()';\n        } else {\n            $paren_groups[] = $paren_group;\n   \
    \         $paren_group = '';\n            $i++;\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__r8bhj2.php:33\n\
    Stack trace:\n#0 /tmp/tmp__r8bhj2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp__r8bhj2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t// your code here\n\t$paren_string = str_replace(' ', '', $paren_string);\n\t\
    $open_paren = 0;\n\t$group = '';\n\t$result = [];\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_paren++;\n\t\t\t$group\
    \ .= $paren_string[$i];\n\t\t} else {\n\t\t\t$open_paren--;\n\t\t\t$group .= $paren_string[$i];\n\
    \t\t}\n\t\tif ($open_paren == 0) {\n\t\t\t$result[] = $group;\n\t\t\t$group =\
    \ '';\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open_paren = 0;\n    $open_paren_group = array();\n    $open_paren_group_index\
    \ = 0;\n    $result = array();\n    for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n        $char = $paren_string[$i];\n        if ($char === '(') {\n      \
    \      $open_paren++;\n            $open_paren_group[$open_paren_group_index]\
    \ = $open_paren;\n        } else if ($char === ')') {\n            if ($open_paren\
    \ === $open_paren_group[$open_paren_group_index]) {\n                $result[]\
    \ = str_repeat('(', $open_paren_group[$open_paren_group_index]) . str_repeat(')',\
    \ $open_paren_group[$open_paren_group_index]);\n                $open_paren_group_index++;\n\
    \            }\n            $open_paren--;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq23c6gtf.php:34\n\
    Stack trace:\n#0 /tmp/tmpq23c6gtf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq23c6gtf.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_groups = array();\n  $current_group = \"\";\n  $paren_stack = array();\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $chars = str_split($paren_string);\n\
    \  $chars_count = count($chars);\n  for ($i = 0; $i < $chars_count; $i++) {\n\
    \    if ($chars[$i] == \"(\") {\n      array_push($paren_stack, $chars[$i]);\n\
    \      $current_group .= $chars[$i];\n    } else if ($chars[$i] == \")\") {\n\
    \      if ($paren_stack == array()) {\n        return \"error\";\n      } else\
    \ {\n        array_pop($paren_stack);\n        $current_group .= $chars[$i];\n\
    \      }\n    }\n\n    if ($paren_stack == array()) {\n      array_push($paren_groups,\
    \ $current_group);\n      $current_group = \"\";\n    }\n  }\n  return $paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$results = array();\n\t$paren_string = trim($paren_string);\n\t$paren_string\
    \ = str_replace(' ', '', $paren_string);\n\t$start = 0;\n\t$open_count = 0;\n\t\
    $paren_string_len = strlen($paren_string);\n\tfor ($i = 0; $i < $paren_string_len;\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_count++;\n\t\t} else\
    \ if ($paren_string[$i] == ')') {\n\t\t\t$open_count--;\n\t\t}\n\t\tif ($open_count\
    \ == 0) {\n\t\t\tarray_push($results, substr($paren_string, $start, $i - $start\
    \ + 1));\n\t\t\t$start = $i + 1;\n\t\t}\n\t}\n\treturn $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $nested_list = [];\n\
    \  $parenthesis_count = 0;\n  $paren_list = str_split($paren_string);\n  $current_string\
    \ = '';\n  foreach ($paren_list as $paren) {\n    if ($paren == '(') {\n     \
    \ $parenthesis_count += 1;\n    } else {\n      $parenthesis_count -= 1;\n   \
    \ }\n    $current_string .= $paren;\n    if ($parenthesis_count == 0) {\n    \
    \  $nested_list[] = $current_string;\n      $current_string = '';\n    }\n  }\n\
    \  return $nested_list;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // handle empty string case\n    if ($paren_string == '') {\n        return\
    \ array();\n    }\n\n    // make sure that we only have parens and whitespace\
    \ in our string\n    if (!preg_match('/^[()\\s]+$/', $paren_string)) {\n     \
    \   return FALSE;\n    }\n\n    // remove whitespace\n    $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n\n    // the array we'll be building and returning\n\
    \    $paren_groups = array();\n\n    // keep track of what we're looking at\n\
    \    $current_group = '';\n    $current_depth = 0;\n\n    // loop through each\
    \ paren\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char =\
    \ $paren_string[$i];\n\n        if ($char == '(') {\n            // if it's an\
    \ open paren, increase the depth and append it to the current group\n        \
    \    $current_depth++;\n            $current_group .= $char;\n        } else {\n\
    \            // if it's a close paren, decrease the depth and append it to the\
    \ current group\n            $current_depth--;\n            $current_group .=\
    \ $char;\n\n            // if it's been closed, push it onto the groups array\
    \ and reset the current group\n            if ($current_depth == 0) {\n      \
    \          $paren_groups[] = $current_group;\n                $current_group =\
    \ '';\n            }\n        }\n    }\n\n    return $paren_groups;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // This is a placeholder. It will just return an empty array.\n  return [];\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5o24_50e.php:18\n\
    Stack trace:\n#0 /tmp/tmp5o24_50e.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5o24_50e.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  //use stack\n  $parens = str_split($paren_string);\n  $output = [];\n  $stack\
    \ = [];\n  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      array_push($stack,\
    \ $paren);\n    } elseif ($paren == ')') {\n      array_push($stack, $paren);\n\
    \      $current = $stack;\n      array_pop($stack);\n      array_pop($stack);\n\
    \      array_push($output, implode('', $current));\n    }\n  }\n  return $output;\n\
    }\necho 'test case 1: ' . implode(', ', separate_paren_groups('( ) (( )) (( )(\
    \ ))')) . PHP_EOL;\necho 'test case 2: ' . implode(', ', separate_paren_groups('(\
    \ ( ) ) (( ) )')) . PHP_EOL;\necho 'test case 3: ' . implode(', ', separate_paren_groups('((\
    \ ) )')) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "test case 1: (), ((), (), ((), ((), ()\ntest case 2: ((), (), ((), ()\n\
    test case 3: ((), ()\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv14qzmt.php:35\n\
    Stack trace:\n#0 /tmp/tmprv14qzmt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprv14qzmt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $groups = [];\n\n    $current_group = \"\";\n    $level = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === \"(\" || $char === \")\") {\n            $current_group\
    \ .= $char;\n            if ($char === \"(\") {\n                $level++;\n \
    \           } else {\n                $level--;\n            }\n            if\
    \ ($level === 0) {\n                $groups[] = $current_group;\n            \
    \    $current_group = \"\";\n            }\n        }\n    }\n\n    return $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $stack = [];\n    $start_index = -1;\n    $end_index =\
    \ -1;\n    $len = strlen($paren_string);\n    $i = 0;\n    while ($i < $len) {\n\
    \        if ($paren_string[$i] === '(') {\n            if ($start_index === -1)\
    \ {\n                $start_index = $i;\n            }\n            array_push($stack,\
    \ '(');\n        } else if ($paren_string[$i] === ')') {\n            array_pop($stack);\n\
    \            if (empty($stack)) {\n                $end_index = $i;\n        \
    \        $result[] = substr($paren_string, $start_index, $end_index-$start_index+1);\n\
    \                $start_index = -1;\n                $end_index = -1;\n      \
    \      }\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$test_inputs\
    \ = [\n    '()',\n    '(( ))',\n    '()()()',\n    '(( )( ))',\n    '((()()()))',\n\
    \    '(((((()))))))'\n];\n\nforeach ($test_inputs as $test_input) {\n    echo\
    \ 'Input: ' . $test_input . PHP_EOL;\n    echo 'Result: ' . print_r(separate_paren_groups($test_input),\
    \ true) . PHP_EOL;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Input: ()\nResult: Array\n(\n    [0] => ()\n)\n\nInput: (( ))\nResult:\
    \ Array\n(\n    [0] => (( ))\n)\n\nInput: ()()()\nResult: Array\n(\n    [0] =>\
    \ ()\n    [1] => ()\n    [2] => ()\n)\n\nInput: (( )( ))\nResult: Array\n(\n \
    \   [0] => (( )( ))\n)\n\nInput: ((()()()))\nResult: Array\n(\n    [0] => ((()()()))\n\
    )\n\nInput: (((((()))))))\nResult: Array\n(\n    [0] => (((((())))))\n    [1]\
    \ => )\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsziydbx.php:56\n\
    Stack trace:\n#0 /tmp/tmpcsziydbx.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcsziydbx.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpitnkf0.php:17\n\
    Stack trace:\n#0 /tmp/tmplpitnkf0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplpitnkf0.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $res = array();\n    $i = 0;\n    $j = 0;\n    $opening_paren = false;\n\
    \    $str_length = strlen($paren_string);\n    while ($i < $str_length) {\n  \
    \      if ($paren_string[$i] == '(') {\n            if (!$opening_paren) {\n \
    \               $j = $i;\n                $opening_paren = true;\n           \
    \ }\n        } else if ($paren_string[$i] == ')') {\n            if ($opening_paren)\
    \ {\n                $res[] = substr($paren_string, $j, $i - $j + 1);\n      \
    \          $opening_paren = false;\n            }\n        }\n        $i++;\n\
    \    }\n    return $res;\n}\n\n$input = '( ) (( )) (( )( ))';\n$res = separate_paren_groups($input);\n\
    echo '<pre>';\nprint_r($res);\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => ( )\n    [1] => (( )\n    [2] => (( )\n    [3]\
    \ => ( )\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp921i3y5o.php:41\n\
    Stack trace:\n#0 /tmp/tmp921i3y5o.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp921i3y5o.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here.\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6rpxk2l.php:17\n\
    Stack trace:\n#0 /tmp/tmpv6rpxk2l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv6rpxk2l.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $stack = [];\n    $parens = preg_split('//', $paren_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $groups = [];\n    $current_group = '';\n    foreach ($parens as $paren)\
    \ {\n        if ($paren === '(') {\n            $stack[] = $paren;\n         \
    \   $current_group .= $paren;\n        } elseif ($paren === ')') {\n         \
    \   array_pop($stack);\n            $current_group .= $paren;\n            if\
    \ (empty($stack)) {\n                $groups[] = $current_group;\n           \
    \     $current_group = '';\n            }\n        }\n    }\n    return $groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$paren_string =\
    \ preg_replace(\"/\\(\\)/\", \" \", $paren_string);\n\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$solved_array = array();\n\t$solved_array[0] = \"\";\n\
    \t$cur_idx = 0;\n\t$cur_paren_count = 0;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == \"(\") {\n\t\t\t$cur_paren_count++;\n\t\
    \t\t$solved_array[$cur_idx] .= $paren_string[$i];\n\t\t} elseif ($paren_string[$i]\
    \ == \")\") {\n\t\t\t$cur_paren_count--;\n\t\t\t$solved_array[$cur_idx] .= $paren_string[$i];\n\
    \t\t}\n\t\tif ($cur_paren_count == 0) {\n\t\t\t$cur_idx++;\n\t\t\t$solved_array[$cur_idx]\
    \ = \"\";\n\t\t}\n\t}\n\treturn $solved_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscikkbx5.php:37\n\
    Stack trace:\n#0 /tmp/tmpscikkbx5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpscikkbx5.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // TODO\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nnrxfbh.php:16\n\
    Stack trace:\n#0 /tmp/tmp4nnrxfbh.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4nnrxfbh.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // TODO: Complete this function\n    $stack = array();\n    $paren_string\
    \ = preg_replace('/\\s+/', '', $paren_string);\n    $stack[] = $paren_string[0];\n\
    \    $balance = 0;\n    $groups = array();\n    $group = '';\n    $len = strlen($paren_string);\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $stack[] = $paren_string[$i];\n            $balance++;\n        }\
    \ else {\n            array_pop($stack);\n            $balance--;\n        }\n\
    \        $group .= $paren_string[$i];\n        if ($balance == 0) {\n        \
    \    $groups[] = $group;\n            $group = '';\n        }\n    }\n    return\
    \ $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflowu5sj.php:39\n\
    Stack trace:\n#0 /tmp/tmpflowu5sj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpflowu5sj.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // TODO: Your code here\n    $paren_string = trim($paren_string);\n    $list\
    \ = [];\n    $cur = \"\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $cnt += 1;\n \
    \           $cur .= '(';\n        } else if ($paren_string[$i] == ')') {\n   \
    \         $cnt -= 1;\n            $cur .= ')';\n        }\n        if ($cnt ==\
    \ 0) {\n            array_push($list, $cur);\n            $cur = \"\";\n     \
    \   }\n    }\n    return $list;\n}\n\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplr9m1jbi.php:36\n\
    Stack trace:\n#0 /tmp/tmplr9m1jbi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplr9m1jbi.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $left = str_split(str_replace(' ', '', $paren_string));\n    $result = [];\n\
    \    $tmp = \"\";\n    $counter = 0;\n    for ($i = 0; $i < count($left); $i++)\
    \ {\n        if ($left[$i] == '(') {\n            $counter++;\n        } else\
    \ {\n            $counter--;\n        }\n        $tmp .= $left[$i];\n        if\
    \ ($counter == 0) {\n            $result[] = $tmp;\n            $tmp = \"\";\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $start = -1;\n  $paren_count = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $ch = $paren_string[$i];\n    if ($ch == '(') {\n      if ($paren_count\
    \ == 0) {\n        $start = $i;\n      }\n      $paren_count++;\n    } else if\
    \ ($ch == ')') {\n      $paren_count--;\n      if ($paren_count == 0) {\n    \
    \    $result[] = substr($paren_string, $start, $i - $start + 1);\n      }\n  \
    \  }\n  }\n  return $result;\n}\n\n$input = '( ) (( )) (( )( ))';\n$result = separate_paren_groups($input);\n\
    foreach ($result as $paren_group) {\n  echo $paren_group . PHP_EOL;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "( )\n(( ))\n(( )( ))\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmph793zq2n.php:42\nStack trace:\n#0 /tmp/tmph793zq2n.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmph793zq2n.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Initialize array to hold the results\n    $results = array();\n    //\
    \ Initialize array to hold the current string being built\n    $current_string\
    \ = array();\n    // Loop through the entire string\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        // Get the current character\n        $char = $paren_string[$i];\n\
    \        // If the character is a (, add it to the current string being built\n\
    \        if ($char == '(') {\n            array_push($current_string, $char);\n\
    \        }\n        // If the character is a ), add it to the current string being\
    \ built,\n        // then check if the stack is empty\n        else if ($char\
    \ == ')') {\n            array_push($current_string, $char);\n            // If\
    \ the stack is empty, then the string is ready to be added to the results\n  \
    \          if (empty($current_string)) {\n                // Add the current string\
    \ to the results, then reset the current string\n                array_push($results,\
    \ implode($current_string));\n                $current_string = array();\n   \
    \         }\n        }\n    }\n    // Return the results\n    return $results;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmponxcgjb8.php:41\n\
    Stack trace:\n#0 /tmp/tmponxcgjb8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmponxcgjb8.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dy72etr.php:17\n\
    Stack trace:\n#0 /tmp/tmp2dy72etr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2dy72etr.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $end = $i = 0;\n    $out = [];\n    for($j = 0; $j < strlen($paren_string);\
    \ $j++) {\n        if($paren_string[$j] == '(') {\n            $i++;\n       \
    \ } elseif($paren_string[$j] == ')') {\n            $i--;\n        }\n       \
    \ if($i == 0) {\n            $out[] = str_replace(' ', '', substr($paren_string,\
    \ $end, $j - $end + 1));\n            $end = $j + 1;\n        }\n    }\n    return\
    \ $out;\n}\n\nassert(separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())',\
    \ '(()())']);\nassert(separate_paren_groups('( )( )') == ['()', '()']);\nassert(separate_paren_groups('(())')\
    \ == ['(())']);\nassert(separate_paren_groups('(((())))') == ['(((())))']);\n\
    assert(separate_paren_groups('( ) (') == ['()']);\nassert(separate_paren_groups('(\
    \ ( ) ( ) )') == ['(())']);\nassert(separate_paren_groups('( ( ( (') == []);\n\
    assert(separate_paren_groups(') ) ) )') == []);\nassert(separate_paren_groups('(\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) )') == ['((((((((((((())))))))))))']);\n\
    assert(separate_paren_groups('( ) ( ( )( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpetfwk3d_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $groups = [];\n\
    \    $open_count = 0;\n    $open_pos = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open_count++;\n\
    \            if ($open_count == 1) {\n                $open_pos = $i;\n      \
    \      }\n        } else {\n            $open_count--;\n            if ($open_count\
    \ == 0) {\n                $groups[] = substr($paren_string, $open_pos, $i - $open_pos\
    \ + 1);\n            }\n        }\n    }\n    return $groups;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open_brace = \"(\";\n    $close_brace = \")\";\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n\n    $nested_arr = [];\n    $start_point = 0;\n\
    \    $end_point = 0;\n    $paren_count = 0;\n    $length = strlen($paren_string);\n\
    \n    while ($end_point < $length) {\n        $paren_count += $paren_string[$end_point]\
    \ == $open_brace ? 1 : 0;\n        $paren_count -= $paren_string[$end_point] ==\
    \ $close_brace ? 1 : 0;\n\n        if ($paren_count == 0) {\n            $end_point++;\n\
    \            $nested_arr[] = substr($paren_string, $start_point, $end_point -\
    \ $start_point);\n            $start_point = $end_point;\n        } else {\n \
    \           $end_point++;\n        }\n    }\n\n    return $nested_arr;\n}\n\n\
    $paren_string = \"() (( )) (( )( ))\";\n$paren_stringn\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpezrt9sp7.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n}\n\n$tests = array(\n    // Test cases here\n);\n\necho\
    \ \"Tests:\\n\";\nforeach ($tests as $t) {\n    $expected = $t[1];\n    $actual\
    \ = separate_paren_groups($t[0]);\n    echo 'separate_paren_groups(\"' . $t[0]\
    \ . '\") == \"' . $actual . '\"';\n    if ($expected == $actual) {\n        echo\
    \ \" OK\\n\";\n    } else {\n        echo \" FAIL\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Tests:\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp790azmu2.php:32\n\
    Stack trace:\n#0 /tmp/tmp790azmu2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp790azmu2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n    // break into individual characters\n    $parens =\
    \ str_split($paren_string);\n    // remove spaces\n    $parens = array_filter($parens,\
    \ function($v) {\n        return $v != ' ';\n    });\n    // group parens, in\
    \ order\n    $groups = [];\n    $group = [];\n    foreach ($parens as $paren)\
    \ {\n        if ($paren == '(') {\n            $group[] = $paren;\n        } else\
    \ {\n            $group[] = $paren;\n            $groups[] = $group;\n       \
    \     $group = [];\n        }\n    }\n    // remove nested parens\n    $groups\
    \ = array_filter($groups, function($group) {\n        $flat = array_reduce($group,\
    \ function($acc, $v) {\n            return $acc . $v;\n        });\n        return\
    \ strpos($flat, '()') === false;\n    });\n    // format for output\n    $groups\
    \ = array_map(function($group) {\n        return array_reduce($group, function($acc,\
    \ $v) {\n            return $acc . $v;\n        });\n    }, $groups);\n    return\
    \ $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi55jme5r.php:48\n\
    Stack trace:\n#0 /tmp/tmpi55jme5r.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi55jme5r.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $groups =\
    \ [];\n    $group = '';\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open_parens++;\n\
    \        } elseif ($paren_string[$i] == ')') {\n            $open_parens--;\n\
    \        }\n        $group .= $paren_string[$i];\n        if ($open_parens ==\
    \ 0) {\n            $groups[] = $group;\n            $group = '';\n        }\n\
    \    }\n    return $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // YOUR CODE HERE\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $groups = explode('\
    \ ', $paren_string);\n    $result = [];\n    foreach ($groups as $group) {\n \
    \       $count = 0;\n        $len = strlen($group);\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($group[$i] == '(') {\n                $count++;\n\
    \            } else {\n                $count--;\n            }\n            if\
    \ ($count < 0) {\n                break;\n            }\n        }\n        if\
    \ ($count == 0) {\n            $result[] = $group;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3asry55.php:39\n\
    Stack trace:\n#0 /tmp/tmpi3asry55.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi3asry55.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $open_parens = 0;\n  $single_parens = [];\n  $single_paren = '';\n  for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == '(')\
    \ {\n      $open_parens++;\n      $single_paren .= '(';\n    } else if ($paren_string[$i]\
    \ == ')') {\n      $open_parens--;\n      $single_paren .= ')';\n    }\n    if\
    \ ($open_parens == 0) {\n      array_push($single_parens, $single_paren);\n  \
    \    $single_paren = '';\n    }\n  }\n  return $single_parens;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0imoa62d.php:33\n\
    Stack trace:\n#0 /tmp/tmp0imoa62d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0imoa62d.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $parenthesis_groups = [];\n    $group = '';\n    $open_count = 0;\n    $string_array\
    \ = str_split($paren_string);\n    for ($i = 0; $i < count($string_array); $i++)\
    \ {\n        if ($string_array[$i] === '(') {\n            $open_count++;\n  \
    \          $group .= $string_array[$i];\n        } elseif ($string_array[$i] ===\
    \ ')') {\n            $open_count--;\n            $group .= $string_array[$i];\n\
    \        }\n        if ($open_count === 0 && $group !== '') {\n            array_push($parenthesis_groups,\
    \ $group);\n            $group = '';\n        }\n    }\n    return $parenthesis_groups;\n\
    }\n\n$paren_string = '( ) (( )) (( )( ))';\nprint_r(separate_paren_groups($paren_string));\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n\n    $paren_stack\
    \ = new Stack();\n    $paren_groups = [];\n    $curr_paren_group = '';\n\n   \
    \ for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ === '(') {\n            if ($paren_stack->isEmpty()) {\n                $curr_paren_group\
    \ = '';\n            }\n            $paren_stack->push('(');\n        }\n    \
    \    else if ($paren_string[$i] === ')') {\n            $paren_stack->pop();\n\
    \            if ($paren_stack->isEmpty()) {\n                $paren_groups[] =\
    \ $curr_paren_group;\n            }\n        }\n        else {\n            $curr_paren_group\
    \ .= $paren_string[$i];\n        }\n    }\n\n    return $paren_groups;\n}\n\n\
    echo '<h1>Test separate_paren_groups</h1>';\necho implode(', ', separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<h1>Test separate_paren_groups</h1>\nFatal error: Uncaught Error: Class\
    \ 'Stack' not found in /tmp/tmprjdl309x.php:11\nStack trace:\n#0 /tmp/tmprjdl309x.php(37):\
    \ separate_paren_groups('()(())(()())')\n#1 {main}\n  thrown in /tmp/tmprjdl309x.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $i = 0;\n    while ($i < strlen($paren_string))\
    \ {\n        $paren_groups[] = $paren_string[$i];\n        $i++;\n    }\n    return\
    \ $paren_groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcbyg245.php:24\n\
    Stack trace:\n#0 /tmp/tmpmcbyg245.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmcbyg245.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $list = array();\n\
    \    $s = 0;\n    $e = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n        if ($paren_string[$i] == '(') {\n            $s = $i;\n        }\n\
    \        if ($paren_string[$i] == ')') {\n            $e = $i;\n            $list[]\
    \ = substr($paren_string, $s, $e - $s + 1);\n        }\n    }\n    return $list;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfxtqs_f.php:29\n\
    Stack trace:\n#0 /tmp/tmpdfxtqs_f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdfxtqs_f.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t\n\t$paren_groups = [];\n\t$current_group = \"\";\n\t$paren_count = 0;\n\t\n\
    \tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t$char = $paren_string[$i];\n\
    \t\tif ($char == '(') {\n\t\t\t$paren_count++;\n\t\t\t$current_group .= $char;\n\
    \t\t} else if ($char == ')') {\n\t\t\t$paren_count--;\n\t\t\t$current_group .=\
    \ $char;\n\t\t}\n\t\t\n\t\tif ($paren_count == 0) {\n\t\t\t$paren_groups[] = $current_group;\n\
    \t\t\t$current_group = \"\";\n\t\t}\n\t}\n\t\n\treturn $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80d3htmj.php:38\n\
    Stack trace:\n#0 /tmp/tmp80d3htmj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp80d3htmj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Create an array of strings to be returned\n  $return_array = array();\n\
    \  // Create counter for open parenthesis\n  $open_paren_count = 0;\n  // Create\
    \ counter for closed parenthesis\n  $closed_paren_count = 0;\n  // Create the\
    \ current string\n  $current_string = '';\n  // Loop through the characters in\
    \ the input string\n  for ($char_index = 0; $char_index < strlen($paren_string);\
    \ $char_index++) {\n    // Get the current character\n    $current_char = $paren_string[$char_index];\n\
    \    // If the current character is an open parenthesis\n    if ($current_char\
    \ == '(') {\n      // Add one to the open paren count\n      $open_paren_count++;\n\
    \      // Add this parenthesis to the current string\n      $current_string .=\
    \ $current_char;\n    }\n    // If the current character is a closed parenthesis\n\
    \    else if ($current_char == ')') {\n      // Add one to the closed paren count\n\
    \      $closed_paren_count++;\n      // Add this parenthesis to the current string\n\
    \      $current_string .= $current_char;\n      // If the number of open and closed\
    \ parenthesis are equal\n      if ($open_paren_count == $closed_paren_count) {\n\
    \        // Add the current string to the return array\n        $return_array[]\
    \ = $current_string;\n        // Reset the current string\n        $current_string\
    \ = '';\n        // Reset the open paren count\n        $open_paren_count = 0;\n\
    \        // Reset the closed paren count\n        $closed_paren_count = 0;\n \
    \     }\n    }\n  }\n  // Return the array of strings\n  return $return_array;\n\
    }\n$paren_string = '( ) (( )) (( )( ))';\n$paren_groups = separate_paren_groups($paren_string);\n\
    print_r($paren_groups);\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/ /', '', $paren_string);\n    $match_parens\
    \ = preg_match_all('/\\([^()]*\\)/', $paren_string, $paren_groups);\n    $paren_groups\
    \ = $paren_groups[0];\n    for ($i = 0; $i < count($paren_groups); $i++) {\n \
    \       $paren_groups[$i] = preg_replace('/\\(|\\)/', '', $paren_groups[$i]);\n\
    \    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ny0jmk7.php:23\n\
    Stack trace:\n#0 /tmp/tmp5ny0jmk7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5ny0jmk7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array =\
    \ str_split($paren_string);\n    $open_parens = ['(', '['];\n    $close_parens\
    \ = [')', ']'];\n    $paren_groups = [];\n    $open_paren_stack = [];\n    $start_index\
    \ = 0;\n    $end_index = 0;\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if (in_array($paren_array[$i], $open_parens)) {\n            $open_paren_stack[]\
    \ = $paren_array[$i];\n            $start_index = $i;\n        } elseif (in_array($paren_array[$i],\
    \ $close_parens)) {\n            if ($open_paren_stack[count($open_paren_stack)\
    \ - 1] === $open_parens[array_search($paren_array[$i], $close_parens)]) {\n  \
    \              array_pop($open_paren_stack);\n                $end_index = $i;\n\
    \                if (count($open_paren_stack) === 0) {\n                    $paren_groups[]\
    \ = substr($paren_string, $start_index, $end_index - $start_index + 1);\n    \
    \            }\n            }\n        }\n    }\n    return $paren_groups;\n}\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8zdlm2r.php:39\n\
    Stack trace:\n#0 /tmp/tmpi8zdlm2r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi8zdlm2r.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n    $start = 0;\n    $end = 0;\n    $num_open = 0;\n \
    \   $num_close = 0;\n    $paren_groups = [];\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == \"(\") {\n            $num_open++;\n\
    \            if ($num_open == 1) {\n                $start = $i;\n           \
    \ }\n        } else if ($paren_string[$i] == \")\") {\n            $num_close++;\n\
    \            if ($num_close == $num_open) {\n                $end = $i;\n    \
    \            $paren_groups[] = substr($paren_string, $start, $end - $start + 1);\n\
    \                $num_open = 0;\n                $num_close = 0;\n           \
    \ }\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7itqp2xj.php:42\n\
    Stack trace:\n#0 /tmp/tmp7itqp2xj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7itqp2xj.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)\\(/', ') (', $paren_string);\n    $paren_groups = preg_split('/\\\
    s+/', $paren_string);\n    return $paren_groups;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0bhpxz6.php:19\n\
    Stack trace:\n#0 /tmp/tmpy0bhpxz6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy0bhpxz6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $separated_groups = [];\n    $index = 0;\n    $current_group = '';\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $index++;\n            $current_group .= $paren_string[$i];\n\
    \        } elseif ($paren_string[$i] == ')') {\n            $index--;\n      \
    \      $current_group .= $paren_string[$i];\n            if ($index == 0) {\n\
    \                $separated_groups[] = $current_group;\n                $current_group\
    \ = '';\n            }\n        }\n    }\n    return $separated_groups;\n}\n\n\
    var_dump(separate_paren_groups('( ) (( )) (( )( ))'));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n\
    \  [2]=>\n  string(6) \"(()())\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t// preg_match_all will match the contents of each group of parentheses.\n\t\
    preg_match_all('/\\(+[^()]*\\)/', $paren_string, $matches);\n\t$results = array();\n\
    \tforeach ($matches[0] as $match) {\n\t\t// Stripping the parentheses off each\
    \ match\n\t\t$results[] = preg_replace('/[()]/', '', $match);\n\t}\n\treturn $results;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3u4bc_6.php:23\n\
    Stack trace:\n#0 /tmp/tmpd3u4bc_6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd3u4bc_6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \tif (empty($paren_string)) {\n\t\treturn [];\n\t}\n\t\n\t$stack = new SplStack();\n\
    \t$separate_groups = [];\n\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$string_length = strlen($paren_string);\n\t\n\tfor ($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$paren = $paren_string[$i];\n\t\tif ($paren === '(') {\n\t\t\t\
    $stack->push($paren);\n\t\t} else {\n\t\t\t$stack->pop();\n\t\t\tif ($stack->isEmpty())\
    \ {\n\t\t\t\t$separate_groups[] = substr($paren_string, 0, $i + 1);\n\t\t\t\t\
    $paren_string = substr($paren_string, $i + 1);\n\t\t\t\t$i = 0;\n\t\t\t\t$string_length\
    \ = strlen($paren_string);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $separate_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught RuntimeException: Can't pop from an empty datastructure\
    \ in /tmp/tmp63ln6bvn.php:23\nStack trace:\n#0 /tmp/tmp63ln6bvn.php(23): SplDoublyLinkedList->pop()\n\
    #1 /tmp/tmp63ln6bvn.php(37): separate_paren_groups('()())')\n#2 /tmp/tmp63ln6bvn.php(41):\
    \ candidate('(()()) ((())) (...')\n#3 /tmp/tmp63ln6bvn.php(47): test()\n#4 {main}\n\
    \  thrown in /tmp/tmp63ln6bvn.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open_parens = 0;\n    $current_string = '';\n    $parsed_groups = [];\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char == '(') {\n            $open_parens++;\n            $current_string\
    \ .= $char;\n        } elseif ($char == ')') {\n            $open_parens--;\n\
    \            $current_string .= $char;\n            if ($open_parens == 0) {\n\
    \                $parsed_groups[] = $current_string;\n                $current_string\
    \ = '';\n            }\n        }\n    }\n    return $parsed_groups;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $start = 0;\n    $index = 0;\n    $open_cnt = 0;\n   \
    \ $len = strlen($paren_string);\n    for ($i = 0; $i < $len; $i++) {\n       \
    \ if ($paren_string[$i] == '(') {\n            $open_cnt++;\n        } else if\
    \ ($paren_string[$i] == ')') {\n            $open_cnt--;\n        }\n        if\
    \ ($open_cnt == 0) {\n            $index = $i;\n            $result[] = substr($paren_string,\
    \ $start, $index - $start + 1);\n            $start = $index + 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlpgcer5.php:34\n\
    Stack trace:\n#0 /tmp/tmpvlpgcer5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvlpgcer5.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // YOUR CODE HERE\n    $result = [];\n    $start = 0;\n    $end = 0;\n  \
    \  $len = strlen($paren_string);\n    $stack = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            array_push($stack,\
    \ $i);\n        } else if ($paren_string[$i] == ')') {\n            $top = array_pop($stack);\n\
    \            if (empty($stack)) {\n                $start = $top;\n          \
    \      $end = $i;\n                $result[] = substr($paren_string, $start, $end-$start+1);\n\
    \            }\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => ( )\n    [1] => (( ))\n    [2] => (( )( ))\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz8u5r2r.php:39\n\
    Stack trace:\n#0 /tmp/tmpsz8u5r2r.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsz8u5r2r.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $separated_paren_groups = [];\n    // your solution goes here\n    //\n \
    \   // $current_paren_group = \"\";\n    // $length = strlen($paren_string);\n\
    \    // $open_parens = 0;\n    // for ($i = 0; $i < $length; $i++) {\n    // \
    \    $char = $paren_string[$i];\n    //     if ($char === '(') {\n    //     \
    \    $open_parens++;\n    //     } else if ($char === ')') {\n    //         $open_parens--;\n\
    \    //     }\n    //     if ($open_parens === 0) {\n    //         array_push($separated_paren_groups,\
    \ $current_paren_group);\n    //         $current_paren_group = \"\";\n    //\
    \     } else {\n    //         $current_paren_group .= $char;\n    //     }\n\
    \    // }\n    //\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = rtrim($paren_string, ')');\n    $paren_string = ltrim($paren_string,\
    \ '(');\n    while (strlen($paren_string) > 0) {\n        $paren_group = \"\"\
    ;\n        $open_parens = 0;\n        $length = strlen($paren_string);\n     \
    \   for ($i = 0; $i < $length; $i++) {\n            $char = $paren_string[$i];\n\
    \            if ($char === '(') {\n                $open_parens++;\n         \
    \   } else if ($char === ')') {\n                $open_parens--;\n           \
    \ }\n            if ($open_parens === 0) {\n                array_push($separated_paren_groups,\
    \ $paren_group);\n                $paren_string = substr($paren_string, $i + 1);\n\
    \                break;\n            } else {\n                $paren_group .=\
    \ $char;\n            }\n        }\n    }\n    return $separated_paren_groups;\n\
    }\n\n$string = '( ) (( )) (( )( ))';\n$separated_paren_groups\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcoid0qlr.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    return [];\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp351m71qi.php:16\n\
    Stack trace:\n#0 /tmp/tmp351m71qi.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp351m71qi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $length = strlen($paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_arr = str_split($paren_string);\n  $paren_stack = [];\n  $start = 0;\n\
    \  $end = 0;\n  $paren_list = [];\n  for ($i = 0; $i < $length; $i++) {\n    if\
    \ ($paren_arr[$i] == '(') {\n      array_push($paren_stack, $i);\n    } else if\
    \ ($paren_arr[$i] == ')') {\n      if (count($paren_stack) == 0) {\n        echo\
    \ 'error: paren stack is empty';\n        exit;\n      }\n      $start = array_pop($paren_stack);\n\
    \      $end = $i;\n      $paren_list[] = implode('', array_slice($paren_arr, $start,\
    \ $end - $start + 1));\n    }\n  }\n  if (count($paren_stack) > 0) {\n    echo\
    \ 'error: paren stack has values';\n    exit;\n  }\n  return $paren_list;\n}\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay145xhx.php:41\n\
    Stack trace:\n#0 /tmp/tmpay145xhx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpay145xhx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $len = strlen($paren_string);\n  $groups = [];\n  $left = 0;\n  $right = 0;\n\
    \  $is_open = false;\n  $group = '';\n  for ($i = 0; $i < $len; $i++) {\n    $char\
    \ = $paren_string[$i];\n    if ($char == '(') {\n      $left++;\n      $is_open\
    \ = true;\n    } else if ($char == ')') {\n      $right++;\n    }\n    if ($left\
    \ == $right && $is_open) {\n      $groups[] = $group;\n      $group = '';\n  \
    \    $is_open = false;\n    } else {\n      $group .= $char;\n    }\n  }\n  return\
    \ $groups;\n}\n$input = '( () (()) (()()))';\n$output = separate_paren_groups($input);\n\
    var_dump($output);\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(16) \"( () (()) (()())\"\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp88u8xhpz.php:41\nStack trace:\n\
    #0 /tmp/tmp88u8xhpz.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp88u8xhpz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // To solve this problem I will simply loop through the string and grab the\
    \ next substring and then\n  // check to see if that substring is a valid parenthesis\
    \ group and add it to the array if it is.\n  $paren_array = [];\n  $str_len =\
    \ strlen($paren_string);\n  for ($i = 0; $i < $str_len; $i++) {\n    // We know\
    \ that we want to grab the substring from the current position through the length\
    \ of the\n    // string. The end of the substring depends on how many open parentheses\
    \ are in the string.\n    $open_paren_count = 0;\n    $open_paren_pos = $i;\n\
    \    for ($j = $i; $j < $str_len; $j++) {\n      // We can use the position to\
    \ see if we have the beginning of a parenthesis group\n      if ($paren_string[$j]\
    \ == '(') {\n        $open_paren_count++;\n        $open_paren_pos = $j;\n   \
    \   } else if ($paren_string[$j] == ')') {\n        $open_paren_count--;\n   \
    \   }\n      // Once we hit the end of the string or there are no open parenthesis\
    \ we know the current\n      // substr is a valid parenthesis group and we can\
    \ grab it.\n      if ($open_paren_count == 0 || $j == $str_len - 1) {\n      \
    \  $paren_array[] = substr($paren_string, $open_paren_pos, $j - $open_paren_pos\
    \ + 1);\n        $i = $j;\n        break;\n      }\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_5u4t1o.php:43\n\
    Stack trace:\n#0 /tmp/tmp6_5u4t1o.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6_5u4t1o.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  //\n  // Your code here\n  //\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmsm74qr.php:19\n\
    Stack trace:\n#0 /tmp/tmpfmsm74qr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfmsm74qr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $res = [];\n    $k = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n        if ($paren_string[$i] === '(') {\n            $res[$k] = '';\n  \
    \          $res[$k] .= $paren_string[$i];\n            for ($j = $i + 1; $j <\
    \ strlen($paren_string); $j++) {\n                if ($paren_string[$j] === '(')\
    \ {\n                    $res[$k] .= $paren_string[$j];\n                } else\
    \ if ($paren_string[$j] === ')') {\n                    $res[$k] .= $paren_string[$j];\n\
    \                    if (substr_count($res[$k], '(') === substr_count($res[$k],\
    \ ')')) {\n                        $k++;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5ubevsp.php:36\n\
    Stack trace:\n#0 /tmp/tmpm5ubevsp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm5ubevsp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $regex =\
    \ '~\\([^\\(\\)]*\\)~';\n    return preg_split($regex, $paren_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbazj9tdi.php:19\n\
    Stack trace:\n#0 /tmp/tmpbazj9tdi.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbazj9tdi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $result = [];\n  $start\
    \ = 0;\n  $count = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n  \
    \  if ($paren_string[$i] == '(') {\n      $count++;\n    } else {\n      $count--;\n\
    \    }\n    if ($count == 0) {\n      $result[] = substr($paren_string, $start,\
    \ $i - $start + 1);\n      $start = $i + 1;\n    }\n  }\n  return $result;\n}\n\
    \necho \"separate_paren_groups('( ) (( )) (( )( ))') = \";\nvar_dump(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "separate_paren_groups('( ) (( )) (( )( ))') = array(3) {\n  [0]=>\n  string(2)\
    \ \"()\"\n  [1]=>\n  string(4) \"(())\"\n  [2]=>\n  string(6) \"(()())\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$res_arr = array();\n\t$tmp_str = '';\n\t$str_len = strlen($paren_string);\n\
    \t$paren_stack = array();\n\tfor ($i = 0; $i < $str_len; $i++) {\n\t\t$tmp_char\
    \ = $paren_string[$i];\n\t\tif ($tmp_char == ' ') {\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif ($tmp_char == '(') {\n\t\t\tarray_push($paren_stack, $tmp_char);\n\t\t} else\
    \ if ($tmp_char == ')') {\n\t\t\tif (!$paren_stack) {\n\t\t\t\tarray_push($res_arr,\
    \ $tmp_str);\n\t\t\t\t$tmp_str = '';\n\t\t\t} else {\n\t\t\t\tarray_pop($paren_stack);\n\
    \t\t\t}\n\t\t}\n\t\t$tmp_str .= $tmp_char;\n\t}\n\tif ($tmp_str) {\n\t\tarray_push($res_arr,\
    \ $tmp_str);\n\t}\n\treturn $res_arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22h3sqc1.php:41\n\
    Stack trace:\n#0 /tmp/tmp22h3sqc1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp22h3sqc1.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$i = 0;\n\t$output = [];\n\t$total_paren = 0;\n\t$single_paren = '';\n\twhile($i\
    \ < strlen($paren_string)) {\n\t\tif($paren_string[$i] === '(') {\n\t\t\t$total_paren++;\n\
    \t\t\t$single_paren .= '(';\n\t\t} else if($paren_string[$i] === ')') {\n\t\t\t\
    $total_paren--;\n\t\t\t$single_paren .= ')';\n\t\t}\n\t\tif($total_paren === 0)\
    \ {\n\t\t\t$output[] = $single_paren;\n\t\t\t$single_paren = '';\n\t\t}\n\t\t\
    $i++;\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x9m4_z6.php:35\n\
    Stack trace:\n#0 /tmp/tmp2x9m4_z6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2x9m4_z6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Implementation goes here.\n    $result = array();\n    $stack = array();\n\
    \    $counter = 0;\n    $prev = \"\";\n    $temp_str = \"\";\n    $is_start =\
    \ true;\n    $len = strlen($paren_string);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $char = $paren_string[$i];\n        if ($char === \" \") continue;\n\
    \        if ($char === \"(\") {\n            if ($prev === \"\") {\n         \
    \       $is_start = false;\n            }\n            array_push($stack, \"(\"\
    );\n            $counter++;\n        } else {\n            array_pop($stack);\n\
    \            $counter--;\n            if ($prev === \"(\" || $prev === \"\") {\n\
    \                $temp_str .= $char;\n            }\n            if ($counter\
    \ === 0) {\n                $temp_str .= $char;\n                array_push($result,\
    \ $temp_str);\n                $temp_str = \"\";\n            }\n        }\n \
    \       $prev = $char;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbreoeeoo.php:48\n\
    Stack trace:\n#0 /tmp/tmpbreoeeoo.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbreoeeoo.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $start_pos = 0;\n    $paren_count = 0;\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $paren_count++;\n        } else if ($paren_string[$i] == ')')\
    \ {\n            $paren_count--;\n        }\n        if ($paren_count == 0) {\n\
    \            $result[] = substr($paren_string, $start_pos, $i - $start_pos + 1);\n\
    \            $start_pos = $i + 1;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ko82nas.php:31\n\
    Stack trace:\n#0 /tmp/tmp9ko82nas.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9ko82nas.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbetdc8ao.php:17\n\
    Stack trace:\n#0 /tmp/tmpbetdc8ao.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbetdc8ao.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // TODO\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q2vijoa.php:17\n\
    Stack trace:\n#0 /tmp/tmp7q2vijoa.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7q2vijoa.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $result = [];\n  $current_group\
    \ = '';\n  $count = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n \
    \   if ($paren_string[$i] == '(') {\n      $count++;\n    } else {\n      $count--;\n\
    \    }\n    $current_group .= $paren_string[$i];\n    if ($count == 0) {\n   \
    \   $result[] = $current_group;\n      $current_group = '';\n    }\n  }\n  return\
    \ $result;\n}\n\n$result = separate_paren_groups('( ) (( )) (( )( ))');\nprint_r($result);\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $list = array();\n    $open = 0;\n    $str = '';\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open++;\n   \
    \         $str .= '(';\n        } else if ($paren_string[$i] == ')') {\n     \
    \       $open--;\n            $str .= ')';\n        }\n        if ($open == 0)\
    \ {\n            array_push($list, $str);\n            $str = '';\n        }\n\
    \    }\n    return $list;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgci60ss.php:33\n\
    Stack trace:\n#0 /tmp/tmpkgci60ss.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkgci60ss.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Your code here\n  $size = strlen($paren_string);\n  $stack = array();\n\
    \  $open = 0;\n  $close = 0;\n  $results = array();\n  $start = 0;\n  $end = 0;\n\
    \  for ($i = 0; $i < $size; $i++) {\n    if ($paren_string[$i] == '(') {\n   \
    \   array_push($stack, $paren_string[$i]);\n      $open++;\n    } else if ($paren_string[$i]\
    \ == ')') {\n      array_pop($stack);\n      $close++;\n    }\n\n    if ($open\
    \ > 0 && count($stack) == 0) {\n      $end = $i;\n      $results[] = substr($paren_string,\
    \ $start, $end - $start + 1);\n      $open = 0;\n      $close = 0;\n      $start\
    \ = $i + 1;\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqknocms.php:42\n\
    Stack trace:\n#0 /tmp/tmpjqknocms.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjqknocms.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open_paren = 0;\n    $paren_set = [];\n    $current_paren = '';\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $open_paren++;\n            $current_paren\
    \ .= $char;\n        } elseif ($char === ')') {\n            $open_paren--;\n\
    \            $current_paren .= $char;\n        } elseif ($char === ' ') {\n  \
    \          if ($open_paren === 0) {\n                continue;\n            }\n\
    \        }\n        if ($open_paren === 0) {\n            array_push($paren_set,\
    \ $current_paren);\n            $current_paren = '';\n        }\n    }\n    return\
    \ $paren_set;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $parens = str_split($paren_string);\n  $len = count($parens);\n  $group = '';\n\
    \  $result = [];\n  $nested = false;\n  for ($i = 0; $i < $len; $i++) {\n    $c\
    \ = $parens[$i];\n    if ($c === '(') {\n      if ($nested) {\n        $group\
    \ .= $c;\n      } else {\n        $nested = true;\n      }\n    } else if ($c\
    \ === ')') {\n      if ($nested) {\n        $group .= $c;\n        $nested = false;\n\
    \        $result[] = $group;\n        $group = '';\n      }\n    } else if ($c\
    \ !== ' ') {\n      throw new Exception('Unallowed symbol');\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_swktjf2.php:41\n\
    Stack trace:\n#0 /tmp/tmp_swktjf2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_swktjf2.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_string = str_replace(')',\
    \ '', $paren_string);\n\t$paren_string = explode('(', $paren_string);\n\tforeach\
    \ ($paren_string as $k => $v) {\n\t\tif ($v == '') unset($paren_string[$k]);\n\
    \t}\n\treturn $paren_string;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0wh6vqs.php:22\n\
    Stack trace:\n#0 /tmp/tmpv0wh6vqs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpv0wh6vqs.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$paren_stack = [];\n\
    \t$paren_list = [];\n\t$open_paren_count = 0;\n\t$closed_paren_count = 0;\n\t\
    $counter = 0;\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i]\
    \ == \"(\") {\n\t\t\t$open_paren_count++;\n\t\t\t$paren_stack[$counter] = $paren_string[$i];\n\
    \t\t\t$counter++;\n\t\t} else if ($paren_string[$i] == \")\") {\n\t\t\t$closed_paren_count++;\n\
    \t\t\t$paren_stack[$counter] = $paren_string[$i];\n\t\t\t$counter++;\n\t\t}\n\t\
    \tif ($open_paren_count == $closed_paren_count) {\n\t\t\t$paren_list[] = implode(\"\
    \", $paren_stack);\n\t\t\t$open_paren_count = 0;\n\t\t\t$closed_paren_count =\
    \ 0;\n\t\t\t$counter = 0;\n\t\t\t$paren_stack = [];\n\t\t}\n\t}\n\treturn $paren_list;\n\
    }\n\necho \"should be: ('()', '(())', '(()())'): \";\nprint_r(separate_paren_groups('(\
    \ ) (( )) (( )( ))'));\n\necho \"should be: ()(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppsjigmpc.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $stack = new SplStack();\n    $open = 0;\n    $close = 0;\n    $start = 0;\n\
    \    $result = [];\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $stack->push($paren_string[$i]);\n            $open++;\n\
    \        } else {\n            $stack->pop();\n            $close++;\n       \
    \ }\n        if (empty($stack)) {\n            $result[] = substr($paren_string,\
    \ $start, $i - $start + 1);\n            $start = $i + 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk5wq31o.php:36\n\
    Stack trace:\n#0 /tmp/tmpkk5wq31o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkk5wq31o.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_groups = [];\n  $current_group = '';\n  $parenthesis_count = 0;\n  for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n    $current_char = $paren_string[$i];\n\
    \    if ($current_char !== ' ') {\n      $current_group .= $current_char;\n  \
    \    if ($current_char === '(') {\n        $parenthesis_count++;\n      } else\
    \ if ($current_char === ')') {\n        $parenthesis_count--;\n      }\n     \
    \ if ($parenthesis_count === 0) {\n        $paren_groups[] = $current_group;\n\
    \        $current_group = '';\n      }\n    }\n  }\n  return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $current_substring = '';\n  $current_paren_count = 0;\n  foreach\
    \ (str_split($paren_string) as $char) {\n    if ($char === ' ') {\n      continue;\n\
    \    } elseif ($char === '(') {\n      $current_paren_count++;\n      $current_substring\
    \ .= $char;\n    } elseif ($char === ')') {\n      $current_paren_count--;\n \
    \     $current_substring .= $char;\n      if ($current_paren_count === 0) {\n\
    \        $result[] = $current_substring;\n        $current_substring = '';\n \
    \     }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $output = [];\n    $length = strlen($paren_string);\n    $count = 0;\n  \
    \  $pointer = 0;\n    $current = '';\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $char = $paren_string[$i];\n        if ($char === '(') {\n          \
    \  $count++;\n        } elseif ($char === ')') {\n            $count--;\n    \
    \    }\n        $current .= $char;\n        if ($count === 0) {\n            $output[]\
    \ = $current;\n            $current = '';\n        }\n    }\n    return $output;\n\
    }\n\nvar_dump(separate_paren_groups('( ) (( )) (( )( ))'));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(3) \"( )\"\n  [1]=>\n  string(1) \" \"\n\
    \  [2]=>\n  string(5) \"(( ))\"\n  [3]=>\n  string(1) \" \"\n  [4]=>\n  string(8)\
    \ \"(( )( ))\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq6ifpkp.php:36\n\
    Stack trace:\n#0 /tmp/tmpkq6ifpkp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkq6ifpkp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_groups = [];\n  $current_group = '';\n  $paren_count = 0;\n  foreach\
    \ (str_split($paren_string) as $char) {\n    if ($char === ' ') {\n      continue;\n\
    \    } elseif ($char === '(') {\n      $paren_count++;\n      $current_group .=\
    \ $char;\n    } elseif ($char === ')') {\n      $paren_count--;\n      $current_group\
    \ .= $char;\n      if ($paren_count === 0) {\n        $paren_groups[] = $current_group;\n\
    \        $current_group = '';\n      }\n    }\n  }\n  return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppp0m7xm7.php:17\n\
    Stack trace:\n#0 /tmp/tmppp0m7xm7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppp0m7xm7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_array = [];\n\t$in_paren = false;\n\t$current_paren = '';\n\tfor ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n\t\t$current_char = $paren_string[$i];\n\
    \t\tif ($current_char === '(') {\n\t\t\tif ($in_paren) {\n\t\t\t\t$current_paren\
    \ .= $current_char;\n\t\t\t} else {\n\t\t\t\t$in_paren = true;\n\t\t\t\t$current_paren\
    \ = $current_char;\n\t\t\t}\n\t\t} elseif ($current_char === ')') {\n\t\t\tif\
    \ ($in_paren) {\n\t\t\t\t$current_paren .= $current_char;\n\t\t\t\t$paren_array[]\
    \ = $current_paren;\n\t\t\t\t$current_paren = '';\n\t\t\t\t$in_paren = false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d83e782.php:38\n\
    Stack trace:\n#0 /tmp/tmp_d83e782.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_d83e782.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qhews7x.php:16\n\
    Stack trace:\n#0 /tmp/tmp8qhews7x.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8qhews7x.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Example input:  '( ) (( )) (( )( ))'\n  // Example output: ['()', '(())',\
    \ '(()())']\n  $parens = str_split($paren_string);\n  $parens_out = [];\n  $i\
    \ = 0;\n  while ($i < count($parens)) {\n    $paren_partial = \"\";\n    while\
    \ ($parens[$i] !== \"(\" && $i < count($parens)) {\n      $i++;\n    }\n    while\
    \ ($parens[$i] !== \")\" && $i < count($parens)) {\n      $paren_partial .= $parens[$i];\n\
    \      $i++;\n    }\n    $paren_partial .= $parens[$i];\n    $parens_out[] = $paren_partial;\n\
    \    $i++;\n  }\n  return $parens_out;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvhyi95a.php:35\n\
    Stack trace:\n#0 /tmp/tmpxvhyi95a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxvhyi95a.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $level = 0;\n    $current_str = '';\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] === '(')\
    \ {\n            $level++;\n            $current_str .= '(';\n        } else if\
    \ ($paren_string[$i] === ')') {\n            $level--;\n            $current_str\
    \ .= ')';\n            if ($level === 0) {\n                $result[] = $current_str;\n\
    \                $current_str = '';\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(separate_paren_groups('( ) (( )) (( )( ))'));\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n\
    \  [2]=>\n  string(6) \"(()())\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $paren_count = 0;\n    $start_pos = 0;\n    $end_pos =\
    \ 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ == 1) {\n                $start_pos = $i;\n            }\n        } else if\
    \ ($char == ')') {\n            $paren_count--;\n            if ($paren_count\
    \ == 0) {\n                $end_pos = $i;\n                $result[] = substr($paren_string,\
    \ $start_pos, $end_pos - $start_pos + 1);\n            }\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6l185xx.php:39\n\
    Stack trace:\n#0 /tmp/tmpr6l185xx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr6l185xx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$result = array();\n\t$start_paren_index = 0;\n\t$last_paren_index = 0;\n\t\
    $start_bracket_index = 0;\n\t$last_bracket_index = 0;\n\t$start_brace_index =\
    \ 0;\n\t$last_brace_index = 0;\n\t$open_paren_count = 0;\n\t$open_bracket_count\
    \ = 0;\n\t$open_brace_count = 0;\n\tfor ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\tif ($open_paren_count == 0) {\n\
    \t\t\t\t$start_paren_index = $i;\n\t\t\t}\n\t\t\t$open_paren_count++;\n\t\t} else\
    \ if ($paren_string[$i] == ')') {\n\t\t\t$open_paren_count--;\n\t\t\tif ($open_paren_count\
    \ == 0) {\n\t\t\t\t$last_paren_index = $i;\n\t\t\t\t$paren_group = substr($paren_string,\
    \ $start_paren_index, $last_paren_index - $start_paren_index + 1);\n\t\t\t\tarray_push($result,\
    \ $paren_group);\n\t\t\t}\n\t\t} else if ($paren_string[$i] == '[') {\n\t\t\t\
    if ($open_bracket_count == 0) {\n\t\t\t\t$start_bracket_index = $i;\n\t\t\t}\n\
    \t\t\t$open_bracket_count++;\n\t\t} else if ($paren_string[$i] == ']') {\n\t\t\
    \t$open_bracket_count--;\n\t\t\tif ($open_bracket_count == 0) {\n\t\t\t\t$last_bracket_index\
    \ = $i;\n\t\t\t\t$bracket_group = substr($paren_string, $start_bracket_index,\
    \ $last_bracket_index - $start_bracket_index + 1);\n\t\t\t\tarray_push($result,\
    \ $bracket_group);\n\t\t\t}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hcy4yis.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $stack = new SplStack();\n    $array = str_split($paren_string);\n    $length\
    \ = count($array);\n    $result = array();\n    $temp = \"\";\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $char = $array[$i];\n        if ($char == '(')\
    \ {\n            if ($stack->isEmpty()) {\n                $temp = $char;\n  \
    \          } else {\n                $temp .= $char;\n            }\n        \
    \    $stack->push($char);\n        } else if ($char == ')') {\n            $stack->pop();\n\
    \            $temp .= $char;\n            if ($stack->isEmpty()) {\n         \
    \       array_push($result, $temp);\n                $temp = \"\";\n         \
    \   }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $result = [];\n\
    \    $cur_group = '';\n    $stack = new SplStack();\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $ch = $paren_string[$i];\n        if ($ch == '(') {\n     \
    \       $stack->push($ch);\n        } else {\n            $stack->pop();\n   \
    \     }\n        $cur_group .= $ch;\n        if ($stack->isEmpty()) {\n      \
    \      $result[] = $cur_group;\n            $cur_group = '';\n        }\n    }\n\
    \    return $result;\n}\n\necho json_encode(separate_paren_groups('( ) (( )) ((\
    \ )( ))')) . \"\\n\";\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[\"()\",\"(())\",\"(()())\"]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $return = [];\n    $stack = new SplStack();\n    $parentheses = str_split($paren_string);\n\
    \    foreach ($parentheses as $char) {\n        if ($char == \"(\") {\n      \
    \      $stack->push($char);\n        } else if ($char == \")\") {\n          \
    \  $stack->pop();\n            if ($stack->isEmpty()) {\n                array_push($return,\
    \ $paren_string);\n            }\n        }\n    }\n    return $return;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bcsuhau.php:29\n\
    Stack trace:\n#0 /tmp/tmp8bcsuhau.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8bcsuhau.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $re = \"/.*?\\((.*?)\\)/\";\n  preg_match_all($re, $paren_string, $matches);\n\
    \  print_r($matches);\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => (()\n       \
    \     [1] => ()\n            [2] => ) ((()\n            [3] => )) ()\n       \
    \     [4] =>  ((()\n            [5] => )()\n            [6] => ()\n        )\n\
    \n    [1] => Array\n        (\n            [0] => (\n            [1] => \n   \
    \         [2] => ((\n            [3] => \n            [4] => ((\n            [5]\
    \ => \n            [6] => \n        )\n\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpep9awmqh.php:18\nStack trace:\n#0 /tmp/tmpep9awmqh.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpep9awmqh.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $groups = [];\n    $current = '';\n    $braces = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $braces++;\n            $current .= '(';\n        } else if ($paren_string[$i]\
    \ == ')') {\n            $braces--;\n            $current .= ')';\n        }\n\
    \        if ($braces == 0 && $current != '') {\n            $groups[] = $current;\n\
    \            $current = '';\n        }\n    }\n    return $groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \treturn array_map(function($str) {\n\t\treturn preg_replace('/\\s/', '', $str);\n\
    \t}, explode(')(', $paren_string));\n}\n\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q5u3fhv.php:19\n\
    Stack trace:\n#0 /tmp/tmp6q5u3fhv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6q5u3fhv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $length = strlen($paren_string);\n  $inside = false;\n  $temp\
    \ = \"\";\n  for ($i = 0; $i < $length; $i++) {\n    if ($paren_string[$i] ===\
    \ \"(\") {\n      $inside = true;\n    } else if ($paren_string[$i] === \")\"\
    ) {\n      $inside = false;\n      array_push($result, $temp);\n      $temp =\
    \ \"\";\n    } else if ($inside) {\n      $temp .= $paren_string[$i];\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9awm4f38.php:32\n\
    Stack trace:\n#0 /tmp/tmp9awm4f38.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9awm4f38.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$stack = new SplStack();\n\t$groups = [];\n\t$current_group = '';\n\tfor ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] === '(')\
    \ {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\t$stack->push('(');\n\t\t\t} else\
    \ {\n\t\t\t\t$current_group .= '(';\n\t\t\t}\n\t\t} else if ($paren_string[$i]\
    \ === ')') {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\t// Invalid paren string\n\
    \t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t$current_group .= ')';\n\t\t\t\tif ($stack->count()\
    \ === 1) {\n\t\t\t\t\t$groups[] = $current_group;\n\t\t\t\t\t$current_group =\
    \ '';\n\t\t\t\t}\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpes90fkhx.php:41\n\
    Stack trace:\n#0 /tmp/tmpes90fkhx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpes90fkhx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpea57uztn.php:17\n\
    Stack trace:\n#0 /tmp/tmpea57uztn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpea57uztn.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1ukq2t2.php:17\n\
    Stack trace:\n#0 /tmp/tmpy1ukq2t2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpy1ukq2t2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $ans = [];\n    $open = 0;\n    $close = 0;\n    $str = '';\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $open++;\n            $str .= '(';\n        } else if ($paren_string[$i]\
    \ == ')') {\n            $close++;\n            $str .= ')';\n        }\n    \
    \    if ($open == $close) {\n            array_push($ans, $str);\n           \
    \ $open = 0;\n            $close = 0;\n            $str = '';\n        }\n   \
    \ }\n    return $ans;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeboa1rag.php:35\n\
    Stack trace:\n#0 /tmp/tmpeboa1rag.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpeboa1rag.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $groups = [];\n  $last_group_idx = 0;\n  $open_braces = 0;\n  for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == '(') {\n \
    \     $open_braces++;\n    } else if ($paren_string[$i] == ')') {\n      $open_braces--;\n\
    \      if ($open_braces == 0) {\n        $groups[] = substr($paren_string, $last_group_idx,\
    \ $i - $last_group_idx + 1);\n        $last_group_idx = $i + 1;\n      }\n   \
    \ }\n  }\n  return $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey1vq1fl.php:31\n\
    Stack trace:\n#0 /tmp/tmpey1vq1fl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpey1vq1fl.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $output = [];\n  $start = 0;\n  $end = 0;\n  $cnt = 0;\n  $in_paren = false;\n\
    \  $str_len = strlen($paren_string);\n  for ($i = 0; $i < $str_len; $i++) {\n\
    \    if ($paren_string[$i] === '(') {\n      if (!$in_paren) {\n        $start\
    \ = $i;\n        $in_paren = true;\n      }\n      $cnt++;\n    } else if ($paren_string[$i]\
    \ === ')') {\n      $cnt--;\n      if ($cnt === 0) {\n        $end = $i;\n   \
    \     $in_paren = false;\n        $output[] = substr($paren_string, $start, $end\
    \ - $start + 1);\n      }\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnajb9oz.php:41\n\
    Stack trace:\n#0 /tmp/tmpgnajb9oz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgnajb9oz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $matches = array();\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $count = 0;\n  $start = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    if ($paren_string[$i] == '(') {\n      $count++;\n    } else if ($paren_string[$i]\
    \ == ')') {\n      $count--;\n    }\n    if ($count == 0) {\n      $matches[]\
    \ = substr($paren_string, $start, $i - $start + 1);\n      $start = $i + 1;\n\
    \    }\n  }\n  return $matches;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $balance = 0;\n    $new_str = \"\";\n    $final_str = [];\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == \"\
    (\") {\n            $balance++;\n            $new_str .= $paren_string[$i];\n\
    \        } else if ($paren_string[$i] == \")\") {\n            $balance--;\n \
    \           $new_str .= $paren_string[$i];\n        }\n        if ($balance ==\
    \ 0 && $new_str != \"\") {\n            array_push($final_str, $new_str);\n  \
    \          $new_str = \"\";\n        }\n    }\n    return $final_str;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_group_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_group_string\
    \ = str_split($paren_group_string);\n  $paren_group_collection = array();\n  $paren_group\
    \ = '';\n  $paren_group_open = false;\n  foreach ($paren_group_string as $paren)\
    \ {\n    if ($paren == '(') {\n      $paren_group_open = true;\n    }\n    if\
    \ ($paren_group_open) {\n      $paren_group .= $paren;\n    }\n    if ($paren\
    \ == ')') {\n      $paren_group_open = false;\n      $paren_group_collection[]\
    \ = $paren_group;\n      $paren_group = '';\n    }\n  }\n  return $paren_group_collection;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yigtmpi.php:34\n\
    Stack trace:\n#0 /tmp/tmp5yigtmpi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5yigtmpi.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$groups = [];\n\t$group = '';\n\t$bal = 0;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$bal++;\n\t\t\t$group .=\
    \ '(';\n\t\t} else if ($paren_string[$i] == ')') {\n\t\t\t$bal--;\n\t\t\t$group\
    \ .= ')';\n\t\t}\n\t\tif ($bal == 0) {\n\t\t\tarray_push($groups, $group);\n\t\
    \t\t$group = '';\n\t\t}\n\t}\n\treturn $groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdedw9gvu.php:33\n\
    Stack trace:\n#0 /tmp/tmpdedw9gvu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdedw9gvu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$temp = '';\n\t$separated = [];\n\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i]\
    \ == '(') {\n\t\t\t$temp .= '(';\n\t\t} elseif ($paren_string[$i] == ')') {\n\t\
    \t\t$temp .= ')';\n\t\t\tarray_push($separated, $temp);\n\t\t\t$temp = '';\n\t\
    \t}\n\t}\n\treturn $separated;\n}\necho \"<h3>Separate Paren Groups</h3>\";\n\
    echo \"<pre>\";\nprint_r(separate_paren_groups('( ) (( )) (( )( ))'));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<h3>Separate Paren Groups</h3><pre>Array\n(\n    [0] => ()\n    [1] =>\
    \ (()\n    [2] => )\n    [3] => (()\n    [4] => ()\n    [5] => )\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0wm2ywr_.php:32\nStack\
    \ trace:\n#0 /tmp/tmp0wm2ywr_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0wm2ywr_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $groups = [];\n    $counter = 0;\n    $cur_group = '';\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $cur_char = $paren_string[$i];\n\
    \        if ($cur_char === '(') {\n            $counter++;\n            $cur_group\
    \ .= $cur_char;\n        } else if ($cur_char === ')') {\n            $counter--;\n\
    \            $cur_group .= $cur_char;\n        }\n        if ($counter === 0)\
    \ {\n            array_push($groups, $cur_group);\n            $cur_group = '';\n\
    \        }\n    }\n    return $groups;\n}\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmu_gc_fu.php:33\n\
    Stack trace:\n#0 /tmp/tmpmu_gc_fu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmu_gc_fu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t// code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigxbp5wd.php:16\n\
    Stack trace:\n#0 /tmp/tmpigxbp5wd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpigxbp5wd.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $parens = preg_split('/\\s+/', $paren_string);\n    $open_parens = array();\n\
    \    $closed_parens = array();\n    $open_parens_count = 0;\n    $closed_parens_count\
    \ = 0;\n    $groups = array();\n    for ($i = 0; $i < count($parens); $i++) {\n\
    \        if (preg_match('/\\(/', $parens[$i])) {\n            $open_parens[] =\
    \ $parens[$i];\n            $open_parens_count++;\n        }\n        if (preg_match('/\\\
    )/', $parens[$i])) {\n            $closed_parens[] = $parens[$i];\n          \
    \  $closed_parens_count++;\n        }\n        if ($open_parens_count == $closed_parens_count)\
    \ {\n            $group = implode('', $open_parens) . implode('', $closed_parens);\n\
    \            $groups[] = $group;\n            $open_parens = array();\n      \
    \      $closed_parens = array();\n            $open_parens_count = 0;\n      \
    \      $closed_parens_count = 0;\n        }\n    }\n    return $groups;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5zofg_d.php:41\n\
    Stack trace:\n#0 /tmp/tmpj5zofg_d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpj5zofg_d.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n\n  $output = [];\n \
    \ $current_group = '';\n  $paren_count = 0;\n\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $character = $paren_string[$i];\n\n    if ($character === '(')\
    \ {\n      $paren_count++;\n    } elseif ($character === ')') {\n      $paren_count--;\n\
    \    }\n\n    $current_group .= $character;\n\n    if ($paren_count === 0) {\n\
    \      $output[] = $current_group;\n      $current_group = '';\n    }\n  }\n\n\
    \  return $output;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // put your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_zm5o8t.php:16\n\
    Stack trace:\n#0 /tmp/tmpx_zm5o8t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpx_zm5o8t.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$groups = array();\n\t$str = '';\n\t$len = strlen($paren_string);\n\t$open_parens\
    \ = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\
    \t\t\t$open_parens++;\n\t\t\t$str .= '(';\n\t\t} else if ($paren_string[$i] ==\
    \ ')') {\n\t\t\t$open_parens--;\n\t\t\t$str .= ')';\n\t\t}\n\t\tif ($open_parens\
    \ == 0) {\n\t\t\t$groups[] = $str;\n\t\t\t$str = '';\n\t\t}\n\t}\n\treturn $groups;\n\
    }\n\necho json_encode(separate_paren_groups('( ) (( )) (( )( ))'));\necho json_encode(separate_paren_groups('a(b(c))(d)e'));\n\
    echo json_encode(separate_paren_groups('(((())))'));\necho json_encode(separate_paren_groups('(((())))s(s()s)'));\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[\"()\",\"\",\"(())\",\"\",\"(()())\"][\"\",\"(())\",\"()\",\"\"][\"(((())))\"\
    ][\"(((())))\",\"\",\"(())\"]\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp8194q2ze.php:38\nStack trace:\n#0 /tmp/tmp8194q2ze.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8194q2ze.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Your code here\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  // Define our current group\n  $current_group = '';\n  // And our output array\n\
    \  $output = [];\n  // Now split the input string into an array\n  $characters\
    \ = str_split($paren_string);\n  // Define an open flag and a level counter\n\
    \  $open = false;\n  $level = 0;\n  // Loop through the characters\n  foreach\
    \ ($characters as $char) {\n    // Add to the current group\n    $current_group\
    \ .= $char;\n    // If we get a '(' set the open flag to true\n    if ($char ===\
    \ '(') {\n      $open = true;\n      $level++;\n    }\n    // If we get a ')'\
    \ decrement the level counter\n    if ($char === ')') {\n      $level--;\n   \
    \ }\n    // If the level counter is zero\n    if ($level === 0) {\n      // set\
    \ the open flag to false\n      $open = false;\n      // Push the current group\
    \ to the output array\n      $output[] = $current_group;\n      // And reset the\
    \ current group\n      $current_group = '';\n    }\n  }\n  // Return the output\
    \ array\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // FIXME: Your code here...\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpm_zols.php:17\n\
    Stack trace:\n#0 /tmp/tmpdpm_zols.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdpm_zols.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $open = 0;\n    $close = 0;\n    $temp = '';\n    $result = [];\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char != ' ') {\n            if ($char == '(') {\n              \
    \  $open++;\n            } else {\n                $close++;\n            }\n\
    \            $temp .= $char;\n        }\n        if ($open == $close) {\n    \
    \        $result[] = $temp;\n            $temp = '';\n            $open = 0;\n\
    \            $close = 0;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnp5sl4e.php:37\n\
    Stack trace:\n#0 /tmp/tmpsnp5sl4e.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsnp5sl4e.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $currentGroup = '';\n  $openParens = 0;\n  $groups = [];\n  for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n    if ($paren_string[$i] === '(') {\n   \
    \   $openParens++;\n      $currentGroup .= '(';\n    } else if ($paren_string[$i]\
    \ === ')') {\n      $openParens--;\n      $currentGroup .= ')';\n    }\n\n   \
    \ if ($openParens === 0) {\n      $groups[] = $currentGroup;\n      $currentGroup\
    \ = '';\n    }\n  }\n\n  return $groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9eibug9a.php:35\n\
    Stack trace:\n#0 /tmp/tmp9eibug9a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9eibug9a.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $separated_strings = [];\n    // TODO: Your code here!\n    return $separated_strings;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_uqhn85.php:19\n\
    Stack trace:\n#0 /tmp/tmpa_uqhn85.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa_uqhn85.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $groups = [];\n    $current_group = \"\";\n    $current_level = 0;\n    $last_char\
    \ = \"\";\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char\
    \ = $paren_string[$i];\n        if ($char === \" \") {\n            continue;\n\
    \        }\n        if ($char === \"(\") {\n            $current_level++;\n  \
    \      } elseif ($char === \")\") {\n            $current_level--;\n        }\n\
    \        if ($current_level === 0 && $last_char === \")\") {\n            $groups[]\
    \ = $current_group;\n            $current_group = \"\";\n        } else {\n  \
    \          $current_group .= $char;\n        }\n        $last_char = $char;\n\
    \    }\n    return $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvx4cl73.php:39\n\
    Stack trace:\n#0 /tmp/tmpuvx4cl73.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuvx4cl73.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $start = 0;\n    $p_cnt = 0;\n    $len = strlen($paren_string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $p_cnt++;\n        } else if ($paren_string[$i] == ')') {\n     \
    \       $p_cnt--;\n        }\n\n        if ($p_cnt == 0) {\n            $result[]\
    \ = substr($paren_string, $start, $i - $start + 1);\n            $start = $i +\
    \ 1;\n        }\n    }\n    return $result;\n}\n\n$input = '( ) (( )) (( )( ))';\n\
    print_r(separate_paren_groups($input));\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ( )\n    [1] =>  \n    [2] => (( ))\n    [3] =>  \n\
    \    [4] => (( )( ))\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf190z6hl.php:35\n\
    Stack trace:\n#0 /tmp/tmpf190z6hl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf190z6hl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $output = [];\n  $temp_string = '';\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $open_braces++;\n    } elseif\
    \ ($paren_string[$i] == ')') {\n      $close_braces++;\n    }\n    if ($open_braces\
    \ == $close_braces) {\n      $output[] = $temp_string;\n      $temp_string = '';\n\
    \      $open_braces = 0;\n      $close_braces = 0;\n    } else {\n      $temp_string\
    \ .= $paren_string[$i];\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4xd9c6f.php:34\n\
    Stack trace:\n#0 /tmp/tmpo4xd9c6f.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo4xd9c6f.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $current = '';\n  $open = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char == '(') {\n      $open++;\n\
    \      $current .= $char;\n    } else if ($char == ')') {\n      $open--;\n  \
    \    $current .= $char;\n      if ($open == 0) {\n        $result[] = $current;\n\
    \        $current = '';\n      }\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_groups = [];\n\
    \t$paren_string_len = strlen($paren_string);\n\t$open_paren_count = 0;\n\t$i =\
    \ 0;\n\twhile ($i < $paren_string_len) {\n\t\tif ($paren_string[$i] === '(') {\n\
    \t\t\t$open_paren_count++;\n\t\t} else if ($paren_string[$i] === ')') {\n\t\t\t\
    $open_paren_count--;\n\t\t}\n\t\t$i++;\n\t\tif ($open_paren_count === 0) {\n\t\
    \t\t$paren_groups[] = substr($paren_string, 0, $i);\n\t\t\t$paren_string = substr($paren_string,\
    \ $i);\n\t\t\t$paren_string_len = strlen($paren_string);\n\t\t\t$i = 0;\n\t\t\
    }\n\t}\n\treturn $paren_groups;\n}\n\n$paren_groups = separate_paren_groups('(\
    \ ) (( )) (( )( ))');\nprint_r($paren_groups);\necho PHP_EOL;\n$paren_groups =\
    \ separate_paren_groups('( ( ) ) (( ) ) (( ) )');\nprint_r($paren_groups);\necho\
    \ PHP_EOL;\n$paren_groups = separate_paren_groups('( ) (( )(( )) )');\nprint_r($paren_groups);\n\
    echo PHP_EOL;\n$paren_groups = separate_paren_groups('( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoqu3sbb0.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $stack = [];\n    $group = '';\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current = $paren_string[$i];\n    \
    \    if (ctype_space($current)) {\n            continue;\n        }\n        if\
    \ ($current == '(') {\n            array_push($stack, '(');\n        } else {\n\
    \            array_pop($stack);\n        }\n        $group .= $current;\n    \
    \    if (empty($stack)) {\n            array_push($result, $group);\n        \
    \    $group = '';\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdi5pwhq.php:17\n\
    Stack trace:\n#0 /tmp/tmpfdi5pwhq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfdi5pwhq.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_groups = [];\n  $tmp_paren_group = '';\n  $pcount = 0;\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $pcount++;\n    } else if\
    \ ($paren_string[$i] == ')') {\n      $pcount--;\n    }\n    $tmp_paren_group\
    \ .= $paren_string[$i];\n    if ($pcount == 0) {\n      $paren_groups[] = $tmp_paren_group;\n\
    \      $tmp_paren_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $groups = explode(')', $paren_string);\n  $groups = array_filter($groups, function($value)\
    \ {\n    return !preg_match('/\\s/', $value);\n  });\n  $groups = array_map(function($value)\
    \ {\n    return '(' . $value;\n  }, $groups);\n  return $groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xq9p1_n.php:24\n\
    Stack trace:\n#0 /tmp/tmp0xq9p1_n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0xq9p1_n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t// TODO\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vx6et7p.php:17\n\
    Stack trace:\n#0 /tmp/tmp2vx6et7p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2vx6et7p.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $start = 0;\n    $count = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $count++;\n  \
    \      } else if ($paren_string[$i] == ')') {\n            $count--;\n       \
    \ }\n\n        if ($count == 0) {\n            $result[] = substr($paren_string,\
    \ $start, $i - $start + 1);\n            $start = $i + 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5jexcq7.php:32\n\
    Stack trace:\n#0 /tmp/tmp_5jexcq7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_5jexcq7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $parens = str_split($paren_string);\n  $open_parens = 0;\n  $close_parens =\
    \ 0;\n  $paren_groups = [];\n  $current_group = '';\n  foreach ($parens as $p)\
    \ {\n    if ($p == '(') {\n      $open_parens++;\n      $current_group .= $p;\n\
    \    } elseif ($p == ')') {\n      $close_parens++;\n      $current_group .= $p;\n\
    \    }\n    if ($open_parens == $close_parens) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n      $open_parens = 0;\n      $close_parens = 0;\n\
    \    }\n  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hpod6b6.php:37\n\
    Stack trace:\n#0 /tmp/tmp_hpod6b6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_hpod6b6.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_list = [];\n  $paren_count = [];\n  $group = \"\";\n  $paren_level =\
    \ 0;\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ == '(') {\n      $paren_level++;\n      $group .= $paren_string[$i];\n    }\
    \ elseif ($paren_string[$i] == ')') {\n      $paren_level--;\n      $group .=\
    \ $paren_string[$i];\n    }\n    if ($paren_level == 0) {\n      array_push($paren_list,\
    \ $group);\n      $group = \"\";\n    }\n  }\n  return $paren_list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrxrkjbp.php:34\n\
    Stack trace:\n#0 /tmp/tmpcrxrkjbp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcrxrkjbp.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp69fv8u2.php:17\n\
    Stack trace:\n#0 /tmp/tmpp69fv8u2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp69fv8u2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $n = strlen($paren_string);\n    $balance = 0;\n    $start\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $balance++;\n        } else if ($paren_string[$i] == ')') {\n\
    \            $balance--;\n        }\n        if ($balance == 0) {\n          \
    \  $result[] = substr($paren_string, $start, $i + 1 - $start);\n            $start\
    \ = $i + 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65fpz5yn.php:32\n\
    Stack trace:\n#0 /tmp/tmp65fpz5yn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp65fpz5yn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb46kgsn.php:17\n\
    Stack trace:\n#0 /tmp/tmpwb46kgsn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwb46kgsn.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $open_paren = '(';\n  $close_paren = ')';\n  $group_index = 0;\n  $paren_groups\
    \ = [];\n  $current_group = '';\n  $group_open = false;\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $open_paren_count = 0;\n  $close_paren_count = 0;\n\
    \  $paren_len = strlen($paren_string);\n  for ($i = 0; $i < $paren_len; $i++)\
    \ {\n    $paren = $paren_string[$i];\n    if ($paren === $open_paren) {\n    \
    \  $open_paren_count++;\n      $group_open = true;\n    } else if ($paren ===\
    \ $close_paren) {\n      $close_paren_count++;\n    }\n    if ($group_open ===\
    \ true) {\n      $current_group .= $paren;\n    }\n    if ($open_paren_count ===\
    \ $close_paren_count) {\n      $paren_groups[$group_index] = $current_group;\n\
    \      $current_group = '';\n      $group_index++;\n      $open_paren_count =\
    \ 0;\n      $close_paren_count = 0;\n      $group_open = false;\n    }\n  }\n\
    \  return $paren_groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  // YOUR CODE HERE\n}\n\n$paren_string = '( ) (( )) (( )( ))';\nvar_dump(separate_paren_groups($paren_string));\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6kzf5ch.php:19\n\
    Stack trace:\n#0 /tmp/tmpp6kzf5ch.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp6kzf5ch.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
