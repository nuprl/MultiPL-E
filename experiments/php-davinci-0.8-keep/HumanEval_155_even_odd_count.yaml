name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n// Given an integer. return a tuple that has the number of even and\
  \ odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123)\
  \ ==> (1, 2)\nfunction even_odd_count($num) {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$num = abs($num);\n\t$num = str_split($num);\n\t$tuple = array(0,\
    \ 0);\n\tfor ($i = 0; $i < count($num); $i++) {\n\t\tif ($num[$i] % 2 == 0) {\n\
    \t\t\t$tuple[0]++;\n\t\t} else {\n\t\t\t$tuple[1]++;\n\t\t}\n\t}\n\treturn $tuple;\n\
    }", "    if($num<0){\n        $num *= -1;\n    }\n    $c_even = 0;\n    $c_odd\
    \ = 0;\n    for($i=0;$i<strlen($num);$i++){\n        if($num[$i]%2==0){\n    \
    \        $c_even += 1;\n        }else{\n            $c_odd += 1;\n        }\n\
    \    }\n    return [$c_even,$c_odd];\n}\n", "    $even = 0;\n    $odd = 0;\n \
    \   $temp = abs($num);\n    $div = 10;\n    if ($temp % $div > 0) {\n        $even++;\n\
    \    } else {\n        $odd++;\n    }\n    for (; $temp / $div > 0; $div *= 10)\
    \ {\n        if ($temp % $div > 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "   \
    \ $even = 0;\n    $odd = 0;\n    $arr = str_split($num);\n    foreach ($arr as\
    \ $n) {\n        if ($n % 2 === 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "  $odd = 0;\n  $even = 0;\n  $num = abs($num);\n  $digits = str_split($num);\n\
    \  foreach ($digits as $digit) {\n    if ($digit % 2 == 0) {\n      $even += 1;\n\
    \    } else {\n      $odd += 1;\n    }\n  }\n  return array($even, $odd);\n}\n\
    echo even_odd_count(-12)[0];\necho even_odd_count(-12)[1];\necho even_odd_count(123)[0];\n\
    echo even_odd_count(123)[1];", "    $count = [0, 0];\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $count[0]++;\n        } else {\n            $count[1]++;\n\
    \        }\n        $num = (int)($num / 10);\n    }\n    return $count;\n}\n",
  "    $digits = [];\n    $evenCount = 0;\n    $oddCount = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digits[] = $num % 10;\n        $num = intval($num\
    \ / 10);\n    }\n    foreach ($digits as $digit) {\n        if ($digit % 2 ==\
    \ 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n\
    \        }\n    }\n    return [$evenCount, $oddCount];\n}\necho json_encode(even_odd_count(-12));",
  "    $arr = array();\n    $odd = 0;\n    $even = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    $arr[] = $even;\n    $arr[] =\
    \ $odd;\n    return $arr;\n}\nprint_r(even_odd_count(123) );\necho \"<br>\";\n\
    print_r(even_odd_count(-12) );\necho \"<br>\";\n", "    $num = str_split(abs($num));\n\
    \    $count = [0, 0];\n    foreach ($num as $digit) {\n        $count[$digit %\
    \ 2]++;\n    }\n    return $count;\n}\n", "    // $evens = 0;\n    // $odds =\
    \ 0;\n    // $num_string = (string)$num;\n    // for ($i = 0; $i < strlen($num_string);\
    \ $i++) {\n    //     if ($num_string[$i] % 2 == 0) {\n    //         $evens++;\n\
    \    //     } else {\n    //         $odds++;\n    //     }\n    // }\n    //\
    \ return array($evens, $odds);\n    return array((string)$num == 0 ? 0 : substr_count((string)$num,\
    \ '0') + substr_count((string)$num, '2') + substr_count((string)$num, '4') + substr_count((string)$num,\
    \ '6') + substr_count((string)$num, '8'), substr_count((string)$num, '1') + substr_count((string)$num,\
    \ '3') + substr_count((string)$num, '5') + substr_count((string)$num, '7') + substr_count((string)$num,\
    \ '9'));\n}\n", "  $counterEven = 0;\n  $counterOdd = 0;\n  $string = strval($num);\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] % 2 == 0) {\n\
    \      $counterEven++;\n    } else {\n      $counterOdd++;\n    }\n  }\n  return\
    \ array($counterEven, $counterOdd);\n}\n", "  $evenCount = 0;\n  $oddCount = 0;\n\
    \  $stringOfNum = strval($num);\n  $arrOfNum = str_split($stringOfNum);\n  foreach\
    \ ($arrOfNum as $index => $num) {\n    if ($num == '-') {\n      unset($arrOfNum[$index]);\n\
    \    }\n  }\n  foreach ($arrOfNum as $index => $num) {\n    if ($num % 2 == 0)\
    \ {\n      $evenCount++;\n    } else {\n      $oddCount++;\n    }\n  }\n  return\
    \ [$evenCount, $oddCount];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ===\
    \ 0) $even++;\n        else $odd++;\n        $num = floor($num / 10);\n    }\n\
    \    return [$even, $odd];\n}\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';",
  "    $isEven = true;\n    $even = 0;\n    $odd = 0;\n    while ($num != 0) {\n \
    \       if ($isEven) {\n            if ($num % 2 == 0) {\n                $even++;\n\
    \            }\n        } else {\n            if ($num % 2 != 0) {\n         \
    \       $odd++;\n            }\n        }\n        $num = floor($num / 10);\n\
    \        $isEven = !$isEven;\n    }\n    return array($even, $odd);\n}\n", " \
    \   $even = [];\n    $odd = [];\n    $digits = str_split($num);\n    foreach ($digits\
    \ as $n) {\n        if ($n % 2 === 0) {\n            $even[] = $n;\n        }\
    \ else {\n            $odd[] = $n;\n        }\n    }\n    return array(count($even),\
    \ count($odd));\n}\n\nvar_dump(even_odd_count(-12));\nvar_dump(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n  \
    \      if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $odd\
    \ = 0;\n    $even = 0;\n    $result = '';\n    $arr = str_split($num);\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n     \
    \       $even++;\n        } else {\n            $odd++;\n        }\n    }\n  \
    \  $result = \"({$even}, {$odd})\";\n    return $result;\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while($num > 0) {\n        $digit = $num % 10;\n        if($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\necho \"even_odd_count(-12) ==> (\" . even_odd_count(-12)[0] . \", \" . even_odd_count(-12)[1]\
    \ . \")\\n\";\necho \"even_odd_count(123) ==> (\" . even_odd_count(123)[0] . \"\
    , \" . even_odd_count(123)[1] . \")\\n\";", "    $neg = 1;\n    if ($num < 0)\
    \ {\n        $neg = -1;\n        $num *= -1;\n    }\n    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $dig = $num % 10;\n        if ($dig %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n        $num = (int)($num / 10);\n    }\n    if ($neg == -1) {\n    \
    \    $odd++;\n    }\n    return array($even, $odd);\n}\n", "  // Your code here\n\
    }", "    $even = 0;\n    $odd = 0;\n    while($num > 0) {\n        $digit = $num\
    \ % 10;\n        if($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n", "    $tup_even_odd = array(0, 0);\n    for ($i\
    \ = 0; $i < strlen($num); $i++) {\n        if ((int)$num[$i] % 2 == 0) {\n   \
    \         $tup_even_odd[0] += 1;\n        } else {\n            $tup_even_odd[1]\
    \ += 1;\n        }\n    }\n    return $tup_even_odd;\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "    $odd = 0;\n    $even = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $rem = $num % 10;\n        if ($rem % 2 == 0)\n\
    \            $even++;\n        else\n            $odd++;\n        $num = $num\
    \ / 10;\n    }\n    return array($even, $odd);\n}\n", "  $num = (string) $num;\n\
    \  $odd = 0;\n  $even = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if\
    \ ($num[$i] % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \  }\n  return array($even, $odd);\n}\n\necho 'even_odd_count(-12) => ';\necho\
    \ '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\necho 'even_odd_count(123)\
    \ => ';\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';\n", "  $even\
    \ = 0;\n  $odd = 0;\n  $str = $num;\n  $arr = str_split($str);\n  foreach ($arr\
    \ as $value) {\n    if ($value%2 == 0) {\n      $even++;\n    } else {\n     \
    \ $odd++;\n    }\n  }\n  return array($even, $odd);\n}", "    $even = $odd = 0;\n\
    \    $num = abs($num);\n    while ($num) {\n        if ($num % 2) {\n        \
    \    $odd++;\n        } else {\n            $even++;\n        }\n        $num\
    \ = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\necho \"<pre>even_odd_count(123):\\\
    n\";\nprint_r(even_odd_count(123));\necho \"</pre>\";\n", "    if($num < 0) $num\
    \ *= -1;\n    $str = (string)$num;\n    $even = 0;\n    $odd = 0;\n    $len =\
    \ strlen($str);\n    for($i = 0; $i < $len; $i++) {\n        if($str[$i]%2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return array($even, $odd);\n}\necho implode(\" \", even_odd_count(-12));\n\
    echo \"<br>\";\necho implode(\" \", even_odd_count(123));", "\t$even = 0;\n\t\
    $odd = 0;\n\tforeach (str_split($num) as $value) {\n\t\tif ($value % 2 === 0)\
    \ {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even,\
    \ $odd);\n}\n", "    $even_count = 0;\n    $odd_count = 0;\n    $num = $num .\
    \ \"\";\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (ord($num[$i])\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return array($even_count, $odd_count);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\n", "  $str = strval($num);\n  $even = 0;\n  $odd\
    \ = 0;\n  for ($i = 0; $i < strlen($str); $i++) {\n    if ($str[$i]%2 == 0) {\n\
    \      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return \"($even, $odd)\"\
    ;\n}\necho even_odd_count(-12).\"\\n\";\necho even_odd_count(123).\"\\n\";", "\t\
    $temp = array();\n\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\t$new_str =\
    \ strval($num);\n\tfor ($i = 0; $i < strlen($new_str); $i++) {\n\t\t$temp[$i]\
    \ = intval($new_str[$i]);\n\t\tif ($temp[$i] % 2 == 0) {\n\t\t\t$even += 1;\n\t\
    \t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\nprint_r(even_odd_count(-12)\
    \ . PHP_EOL);\nprint_r(even_odd_count(123) . PHP_EOL);\n", "    $even_count =\
    \ 0;\n    $odd_count = 0;\n    $new_num = abs($num);\n    while ($new_num > 0)\
    \ {\n        $remainder = $new_num % 10;\n        if ($remainder % 2 == 0) {\n\
    \            $even_count += 1;\n        } else {\n            $odd_count += 1;\n\
    \        }\n        $new_num = floor($new_num / 10);\n    }\n    return array($even_count,\
    \ $odd_count);\n}\n\necho \"Even and odd digit count for number -12 is: \";\n\
    print_r(even_odd_count(-12));\necho \"<br>\";\necho \"Even and odd digit count\
    \ for number 123 is: \";\nprint_r(even_odd_count(123));\necho \"<br>\";\necho\
    \ \"Even and odd digit count for number 1234 is: \";\nprint_r(even_odd_count(1234));\n\
    echo \"<br>\";\necho \"Even and odd digit count for number 0 is: \";\nprint_r(even_odd_count(0));\n\
    echo \"<br>\";\necho \"Even and odd digit count for number 939 is: \";\nprint_r(even_odd_count(939));",
  "    $result = ['even' => 0, 'odd' => 0];\n    if ($num < 0) {\n        $num = -$num;\n\
    \    }\n    $digits = str_split($num);\n    for ($i = 0; $i < count($digits);\
    \ $i++) {\n        if ($digits[$i] % 2 == 0) {\n            $result['even']++;\n\
    \        } else {\n            $result['odd']++;\n        }\n    }\n    return\
    \ array_values($result);\n}\n\necho \"Test #1: \" . (implode(\",\", even_odd_count(-12))\
    \ == implode(\",\", [1, 1]) ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test #2:\
    \ \" . (implode(\",\", even_odd_count(123)) == implode(\",\", [1, 2]) ? \"PASS\"\
    \ : \"FAIL\") . \"\\n\";\necho \"Test #3: \" . (implode(\",\", even_odd_count(1111))\
    \ == implode(\",\", [0, 4]) ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test #4:\
    \ \" . (implode(\",\", even_odd_count(22222)) == implode(\",\", [5, 0]) ? \"PASS\"\
    \ : \"FAIL\") . \"\\n\";\necho \"Test #5: \" . (implode(\",\", even_odd_count(3))\
    \ == implode(\",\", [0, 1]) ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test #6:\
    \ \" . (implode(\",\", even_odd_count(0)) == implode(\",\", [1, 0]) ? \"PASS\"\
    \ : \"FAIL\") . \"\\n\";\necho \"Test #7: \" . (implode(\",\", even_odd_count(1))\
    \ == implode(\",\", [0, 1]) ? \"PASS\" : \"FAIL\") . \"\\n\";\necho \"Test #8:\
    \ \" . (implode(\",\", even_odd_count(11)) == implode(\",\", [0, 2]) ? \"PASS\"\
    \ : \"FAIL\") . \"\\n\";\necho \"Test #9: \" . (", "    $even_count = 0;\n   \
    \ $odd_count = 0;\n    $number = abs($num);\n    $output = [];\n    while ($number\
    \ > 0) {\n        $remainder = $number % 10;\n        if ($remainder % 2 == 0)\
    \ {\n            $even_count += 1;\n        } else {\n            $odd_count +=\
    \ 1;\n        }\n        $number = floor($number / 10);\n    }\n    $output =\
    \ [$even_count, $odd_count];\n    return $output;\n}\n", "  // Write your code\
    \ here\n  $n = $num >= 0 ? $num : -$num;\n  $even = 0;\n  $odd = 0;\n  while ($n\
    \ >= 1) {\n    $digit = $n % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $n = $n / 10;\n  }\n  return array($even,\
    \ $odd);\n}\n", "  if($num < 0) {\n    $num = -1 * $num;\n  }\n  $odd = 0;\n \
    \ $even = 0;\n  $num_array = array_map('intval', str_split($num));\n  foreach($num_array\
    \ as $number) {\n    if($number % 2 == 0) {\n      $even++;\n    } else {\n  \
    \    $odd++;\n    }\n  }\n  return array($even, $odd);\n}\n\necho '<h3>even_odd_count(-12)\
    \ ==> (1, 1)</h3>';\nvar_dump(even_odd_count(-12));\necho '<h3>even_odd_count(123)\
    \ ==> (1, 2)</h3>';\nvar_dump(even_odd_count(123));\necho '<h3>even_odd_count(1133)\
    \ ==> (0, 3)</h3>';\nvar_dump(even_odd_count(1133));", "\t$even = 0;\n\t$odd =\
    \ 0;\n\twhile ($num > 0) {\n\t\t$lastDigit = $num % 10;\n\t\tif ($lastDigit %\
    \ 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t}\n\t\t$num\
    \ = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\necho \"<pre>\"\
    ;\necho even_odd_count(-12)[0] . \"\\n\";\necho even_odd_count(-12)[1] . \"\\\
    n\";\necho even_odd_count(123)[0] . \"\\n\";\necho even_odd_count(123)[1] . \"\
    \\n\";\necho \"</pre>\";", "  $r = [0, 0];\n  while($num) {\n    $r[0] += $num\
    \ % 2;\n    $num = (int)($num / 2);\n  }\n  $r[1] = 8 - $r[0];\n  return $r;\n\
    }\n\n$l = [-12, 123, 456, 5678, 2147483647];\nfor($i = 0; $i < count($l); $i++)\
    \ {\n  $t = even_odd_count($l[$i]);\n  echo \"$l[$i] => ($t[0], $t[1])\\n\";\n\
    }\n", "  $even = $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $num)\
    \ {\n    $num = abs($num);\n    $num % 2 === 0 ? $even++ : $odd++;\n  }\n  return\
    \ [$even, $odd];\n}\nprint_r(even_odd_count(-12));", "    $even_counter = 0;\n\
    \    $odd_counter = 0;\n    $final_result = [];\n    $num_array = [];\n    $num_array\
    \ = str_split(abs($num));\n    foreach ($num_array as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even_counter++;\n        } else {\n            $odd_counter++;\n\
    \        }\n    }\n    $final_result = array($even_counter, $odd_counter);\n \
    \   return $final_result;\n}\n$result = even_odd_count(-123);\nvar_dump($result);",
  "\t$evenCount = 0;\n\t$oddCount = 0;\n\t$stringNum = strval($num);\n\t$stringArray\
    \ = str_split($stringNum);\n\tif ($num < 0) {\n\t\tarray_shift($stringArray);\n\
    \t}\n\tforeach ($stringArray as $num) {\n\t\tif ($num % 2 == 0) {\n\t\t\t$evenCount++;\n\
    \t\t} else {\n\t\t\t$oddCount++;\n\t\t}\n\t}\n\treturn array($evenCount, $oddCount);\n\
    }\n", "\tif($num > 0) {\n\t\t$num_str = (string)$num;\n\t\t$even_count = substr_count($num_str,\
    \ '0') + substr_count($num_str, '2') + substr_count($num_str, '4') + substr_count($num_str,\
    \ '6') + substr_count($num_str, '8');\n\t\t$odd_count = substr_count($num_str,\
    \ '1') + substr_count($num_str, '3') + substr_count($num_str, '5') + substr_count($num_str,\
    \ '7') + substr_count($num_str, '9');\n\t} else {\n\t\t$num_str = (string)(-$num);\n\
    \t\t$even_count = substr_count($num_str, '0') + substr_count($num_str, '2') +\
    \ substr_count($num_str, '4') + substr_count($num_str, '6') + substr_count($num_str,\
    \ '8');\n\t\t$odd_count = substr_count($num_str, '1') + substr_count($num_str,\
    \ '3') + substr_count($num_str, '5') + substr_count($num_str, '7') + substr_count($num_str,\
    \ '9');\n\t}\n\treturn array($even_count, $odd_count);\n}\necho 'even_odd_count(-12)\
    \ is [1, 1]: ';\nprint_r(even_odd_count(-12));\necho '<br>';\necho 'even_odd_count(123)\
    \ is [1, 2]: ';\nprint_r(even_odd_count(123));\necho '<br>';", "    // your code\
    \ here\n}\n", "  $result = [0, 0];\n  $abs_num = abs($num);\n  while ($abs_num\
    \ >= 1) {\n    $current_num = $abs_num % 10;\n    if ($current_num % 2 === 0)\
    \ {\n      $result[0] += 1;\n    } else {\n      $result[1] += 1;\n    }\n   \
    \ $abs_num = (int)($abs_num / 10);\n  }\n  return $result;\n}\n", "    if ($num\
    \ == 0) {\n        return array(0,0);\n    }\n    $mod = $num % 10;\n    if ($mod\
    \ % 2 === 0) {\n        $even = 1;\n        $odd = 0;\n    } else {\n        $even\
    \ = 0;\n        $odd = 1;\n    }\n    return array_merge(even_odd_count($num /\
    \ 10), array($even, $odd));\n}\n\n$output = even_odd_count(-12);\nprint_r($output);",
  "    $evendigits = 0;\n    $odddigits = 0;\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $evendigits++;\n \
    \       } else {\n            $odddigits++;\n        }\n        $num = $num /\
    \ 10;\n    }\n    return [$evendigits, $odddigits];\n}\nprint_r(even_odd_count(-12));\n\
    echo \"<br/>\";\nprint_r(even_odd_count(123));", "    $divisor = $num < 0 ? -1\
    \ : 1;\n    $even_count = 0;\n    $odd_count = 0;\n    while ($num != 0) {\n \
    \       $remainder = $num % 10;\n        if ($remainder % 2 == 0) {\n        \
    \    $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even_count, $odd_count);\n\
    }\n\n$num = -12;\n$result = even_odd_count($num);\nprintf(\"even_odd_count(%d)\
    \ = %d, %d\\n\", $num, $result[0], $result[1]);\n$num = 123;\n$result = even_odd_count($num);\n\
    printf(\"even_odd_count(%d) = %d, %d\\n\", $num, $result[0], $result[1]);\n",
  "  $even = 0;\n  $odd = 0;\n  $num = (string) $num;\n  for ($i = 0; $i < strlen($num);\
    \ $i++) {\n    if ($num[$i] % 2 === 0) {\n      $even++;\n    } else {\n     \
    \ $odd++;\n    }\n  }\n  return [$even, $odd];\n}\n\nvar_dump(even_odd_count(-12)\
    \ ==> (1, 1));\nvar_dump(even_odd_count(123) ==> (1, 2));", "    $even_odd = [0,\
    \ 0];\n    $digits = [];\n    if ($num < 0) {\n        $num = $num * -1;\n   \
    \ }\n    while ($num > 0) {\n        $digits[] = $num % 10;\n        $num = (int)($num\
    \ / 10);\n    }\n    foreach ($digits as $digit) {\n        if ($digit % 2 ===\
    \ 0) {\n            $even_odd[0] += 1;\n        } else {\n            $even_odd[1]\
    \ += 1;\n        }\n    }\n    return $even_odd;\n}", "  $even = 0;\n  $odd =\
    \ 0;\n  if ($num < 0) {\n    $num = -$num;\n  }\n  $digits = str_split($num);\n\
    \  foreach ($digits as $digit) {\n    if ($digit % 2 === 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return array($even, $odd);\n}", "\t\
    $even = 0;\n\t$odd = 0;\n\t$temp_num = $num;\n\tif ($num < 0) {\n\t\t$temp_num\
    \ = $num * -1;\n\t}\n\twhile ($temp_num != 0) {\n\t\t$remainder = $temp_num %\
    \ 10;\n\t\tif ($remainder % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$temp_num = $temp_num / 10;\n\t}\n\treturn array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $arr = [];\n    if ($num < 0) {\n        $num\
    \ = -$num;\n    }\n    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i]\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    array_push($arr, $even, $odd);\n    return $arr;\n}\n",
  "    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 === 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\necho implode(', ', even_odd_count(-12))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(123)) . \"\\n\";\n", "\tif($num<0)\n\
    \t\t$num *= -1;\n\t$even_count = 0;\n\t$odd_count = 0;\n\twhile($num>0){\n\t\t\
    $digit = $num%10;\n\t\tif($digit%2==0)\n\t\t\t$even_count++;\n\t\telse\n\t\t\t\
    $odd_count++;\n\t\t$num = $num/10;\n\t}\n\t$arr = array($even_count, $odd_count);\n\
    \treturn $arr;\n}\n\nprint_r(even_odd_count(-12));\necho \"<br>\";\nprint_r(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i < strlen((string)$num); $i++)\
    \ {\n        if ((int)substr((string)$num, $i, 1) % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return \"($even,\
    \ $odd)\";\n}\necho even_odd_count(-12) . PHP_EOL;\necho even_odd_count(123) .\
    \ PHP_EOL;\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num != 0) {\n        $last = $num % 10;\n        if ($last % 2 == 0) $even++;\n\
    \        else $odd++;\n        $num = floor($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "  \n}\n", "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i <\
    \ strlen($num); $i++) {\n        if (ord($num[$i]) % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $arr = str_split(abs($num));\n    $count_even = array_reduce($arr,\
    \ function($a, $b) {\n        return $a + (($b % 2) == 0);\n    });\n    $count_odd\
    \ = count($arr) - $count_even;\n    return array($count_even, $count_odd);\n}\n\
    \necho \"<pre>even_odd_count(-12)\\r\\n\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>even_odd_count(123)\\r\\n\";\nprint_r(even_odd_count(123));\n\
    echo \"</pre>\";", "  $even = 0;\n  $odd = 0;\n  if ($num < 0) {\n    $num = $num\
    \ * -1;\n  }\n  for ($i = $num; $i > 0; $i = $i / 10) {\n    $number = $i % 10;\n\
    \    if ($number % 2 == 0) {\n      $even += 1;\n    } else {\n      $odd += 1;\n\
    \    }\n  }\n  return \"($even, $odd)\";\n}\n\necho even_odd_count(-12);\necho\
    \ \"\\n\";\necho even_odd_count(123);\necho \"\\n\";\necho even_odd_count(0);\n\
    echo \"\\n\";\necho even_odd_count(1);\necho \"\\n\";", "    if ($num < 0) {\n\
    \        $num = -$num;\n    }\n    $even = 0;\n    $odd = 0;\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\n$num = readline(\"\
    Enter a number: \");\nlist($even, $odd) = even_odd_count($num);\necho \"Even:\
    \ $even\\n\";\necho \"Odd: $odd\\n\";", "    $even = 0;\n    $odd = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n    \
    \        $even++;\n        } else {\n            $odd++;\n        }\n    }\n \
    \   $tuple = array($even, $odd);\n    return $tuple;\n}\n", "  $even = 0;\n  $odd\
    \ = 0;\n  for ($i = 0; $i < strlen((string)$num); $i++) {\n    if ((int)$num[$i]\
    \ % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return\
    \ array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $number = abs($num);\n\
    \    while ($number != 0) {\n        $digit = $number % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $number = floor($number / 10);\n    }\n    return [$even, $odd];\n\
    }\n\necho implode(', ', even_odd_count(-12)) . \"\\n\";\necho implode(', ', even_odd_count(123))\
    \ . \"\\n\";", "\t$num = (string) abs($num);\n\t$even = $odd = 0;\n\tfor ($i =\
    \ 0; $i < strlen($num); $i++) {\n\t\tif ((int) $num[$i] % 2 === 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn [$even, $odd];\n}\n\necho '<pre>';\n\
    print_r(even_odd_count(-12));\necho '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\n\
    echo '</pre>';", "\t$evens = 0;\n\t$odds = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$evens++;\n\
    \t\t} else {\n\t\t\t$odds++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn\
    \ array($evens, $odds);\n}\n", "    // Your code here\n    $num = abs($num);\n\
    \    $odds = 0;\n    $evens = 0;\n    for ($i = 0; $i < strlen((string)$num);\
    \ $i++) {\n        if ($num % 2 == 0) {\n            $evens++;\n        } else\
    \ {\n            $odds++;\n        }\n        $num = $num / 10;\n    }\n    return\
    \ array($evens, $odds);\n}\n", "\t$arr = str_split($num);\n\t$r1 = 0;\n\t$r2 =\
    \ 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] % 2 == 0) {\n\
    \t\t\t$r1 += 1;\n\t\t} else {\n\t\t\t$r2 += 1;\n\t\t}\n\t}\n\treturn array($r1,\
    \ $r2);\n}\n", "    $res = array(0, 0);\n    $str = (string)$num;\n    for ($i\
    \ = 0; $i < strlen($str); $i++) {\n        if ($str[$i] % 2 === 0) $res[0]++;\n\
    \        else $res[1]++;\n    }\n    return $res;\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(123456789));", "  $even\
    \ = 0;\n  $odd = 0;\n  $arr = str_split($num);\n  foreach ($arr as $number) {\n\
    \    if ($number % 2 === 0) {\n      $even += 1;\n    } else {\n      $odd +=\
    \ 1;\n    }\n  }\n  return [$even, $odd];\n}\n\necho even_odd_count(-12)[0] .\
    \ \" \" . even_odd_count(-12)[1] . \"\\n\";\necho even_odd_count(123)[0] . \"\
    \ \" . even_odd_count(123)[1] . \"\\n\";", "\t$arr = str_split($num);\n\t$odd\
    \ = 0;\n\t$even = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value % 2\
    \ != 0) {\n\t\t\t$odd++;\n\t\t} else {\n\t\t\t$even++;\n\t\t}\n\t}\n\treturn \"\
    ($even, $odd)\";\n}\necho even_odd_count(-12);\necho even_odd_count(123);\necho\
    \ \"\\n\";", "    $evenCount = 0;\n    $oddCount = 0;\n    while($num > 0) {\n\
    \        $digit = $num % 10;\n        if($digit % 2 == 0) {\n            $evenCount++;\n\
    \        } else {\n            $oddCount++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($evenCount, $oddCount);\n}\n\n$result = even_odd_count(-12);\n\
    print_r($result);", "  $even = 0;\n  $odd = 0;\n  while ($num != 0) {\n    $remainder\
    \ = $num % 10;\n    if ($remainder % 2 == 0) {\n      $even += 1;\n    } else\
    \ {\n      $odd += 1;\n    }\n    $num = ($num - $remainder) / 10;\n  }\n  return\
    \ array($even, $odd);\n}", "    // Compute the absolute value of the number\n\
    \    $num = abs($num);\n    // Convert the number to a string\n    $num = (string)$num;\n\
    \    // Find length of the string\n    $length = strlen($num);\n    // Set even\
    \ and odd count\n    $even = 0;\n    $odd = 0;\n    // Loop through all the digits\n\
    \    for ($i = 0; $i < $length; $i++) {\n        // If even\n        if ($num[$i]\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    // Create a tuple of even and odd count\n    $tuple = array($even,\
    \ $odd);\n    // Return the tuple\n    return $tuple;\n}", "  $even = $odd = 0;\n\
    \  $num = (string)$num;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i]\
    \ % 2 === 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return\
    \ [$even, $odd];\n}\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$odd_count = 0;\n\t$even_count = 0;\n\t$num = abs($num);\n\twhile($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even_count++;\n\t\t\
    } else {\n\t\t\t$odd_count++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even_count, $odd_count);\n}\n\n$even_odd_count = even_odd_count(-12);\n\
    echo 'even_odd_count(-12) ==> (' . $even_odd_count[0] . ', ' . $even_odd_count[1]\
    \ . ')<br />';\n\n$even_odd_count = even_odd_count(123);\necho 'even_odd_count(123)\
    \ ==> (' . $even_odd_count[0] . ', ' . $even_odd_count[1] . ')<br />';", "   \
    \ // $even = 0;\n    // $odd = 0;\n    // $n = $num < 0 ? abs($num) : $num;\n\
    \    // while ($n > 0) {\n    //     $digit = $n % 10;\n    //     if ($digit\
    \ % 2 == 0) $even++;\n    //     else $odd++;\n    //     $n = floor($n / 10);\n\
    \    // }\n    // return [$even, $odd];\n\n    $even = 0;\n    $odd = 0;\n   \
    \ $n = $num < 0 ? abs($num) : $num;\n    while ($n > 0) {\n        $digit = $n\
    \ % 10;\n        $even += $digit % 2 == 0 ? 1 : 0;\n        $odd += $digit % 2\
    \ == 1 ? 1 : 0;\n        $n = floor($n / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "  $array = str_split($num);\n  $newArray = [];\n  $result = [];\n  foreach\
    \ ($array as $key => $value) {\n    if ($value % 2 == 0) {\n      $newArray[$key]\
    \ = $value;\n    }\n  }\n  array_push($result, count($newArray));\n  array_push($result,\
    \ count($array) - count($newArray));\n  return $result;\n}\necho \"<pre>\";\n\
    print_r(even_odd_count(-12));\necho \"</pre>\";", "    $arr = str_split(abs($num));\n\
    \    $result = array_map(function($item) {\n        return $item % 2 == 0 ? \"\
    even\" : \"odd\";\n    }, $arr);\n    $res[\"even\"] = count(array_filter($result,\
    \ function($item) {\n        return $item == \"even\";\n    }));\n    $res[\"\
    odd\"] = count(array_filter($result, function($item) {\n        return $item ==\
    \ \"odd\";\n    }));\n    return $res;\n}", "    $count = 0;\n    $even = 0;\n\
    \    $odd = 0;\n    $f = true;\n    while ($num != 0) {\n        $count++;\n \
    \       $remainder = $num % 10;\n        if ($remainder % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = $num / 10;\n    }\n    return [$even, $odd];\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even_count = 0;\n    $odd_count = 0;\n    if($num < 0) {\n        $num\
    \ = $num * -1;\n    }\n    $num = strval($num);\n    for($i = 0; $i < strlen($num);\
    \ $i++) {\n        if(intval($num[$i]) % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    $result =\
    \ array($even_count, $odd_count);\n    return $result;\n}\n\n$num = -12;\n$result\
    \ = even_odd_count($num);\necho \"even_odd_count($num) ==> (\" . $result[0] .\
    \ \", \" . $result[1] . \")\\n\";\n\n$num = 123;\n$result = even_odd_count($num);\n\
    echo \"even_odd_count($num) ==> (\" . $result[0] . \", \" . $result[1] . \")\\\
    n\";", "    $arr = str_split($num);\n    $odd = 0;\n    $even = 0;\n    foreach\
    \ ($arr as $n) {\n        if ($n%2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n\
    \necho '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(even_odd_count(123));\necho '</pre>';\n", "\t$even = [];\n\t$odd = [];\n\
    \t$str = strval($num);\n\tif ($num < 0) {\n\t\t$str = substr($str, 1);\n\t}\n\t\
    for ($i = 0; $i < strlen($str); $i++) {\n\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\
    array_push($even, $str[$i]);\n\t\t} else {\n\t\t\tarray_push($odd, $str[$i]);\n\
    \t\t}\n\t}\n\treturn array(count($even), count($odd));\n}\necho even_odd_count(-12)\
    \ . \"<br>\";\necho even_odd_count(123) . \"<br>\";\n", "\t$a = $num * -1;\n\t\
    $even = array();\n\t$odd = array();\n\tif ($num < 0) {\n\t\t$num = $a;\n\t}\n\t\
    $a = str_split($num);\n\tfor ($i = 0; $i < count($a); $i++) {\n\t\tif ($a[$i]\
    \ % 2 == 0) {\n\t\t\tarray_push($even, $a[$i]);\n\t\t} else {\n\t\t\tarray_push($odd,\
    \ $a[$i]);\n\t\t}\n\t}\n\t$data = array(count($even), count($odd));\n\treturn\
    \ $data;\n}", "  $arr = str_split(abs($num));\n  $length = count($arr);\n  $even\
    \ = 0;\n  $odd = 0;\n  for ($i = 0; $i < $length; $i++) {\n    if ($arr[$i] %\
    \ 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return\
    \ [$even, $odd];\n}", "    $string = strval($num);\n    $even = 0;\n    $odd =\
    \ 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (is_numeric($string[$i]))\
    \ {\n            if ($string[$i] % 2 == 0) {\n                $even++;\n     \
    \       } else {\n                $odd++;\n            }\n        }\n    }\n \
    \   return array($even, $odd);\n}\n", "  $count = array(\n    \"even\" => 0,\n\
    \    \"odd\" => 0\n  );\n  while ($num) {\n    $last_digit = $num % 10;\n    if\
    \ ($last_digit % 2 == 0) {\n      $count[\"even\"]++;\n    } else {\n      $count[\"\
    odd\"]++;\n    }\n    $num = intval($num / 10);\n  }\n  return $count;\n}\n\n\
    $a = even_odd_count(-12);\necho '$a = even_odd_count(-12)' . \"\\n\";\nvar_dump($a);\n\
    \n$b = even_odd_count(123);\necho '$b = even_odd_count(123)' . \"\\n\";\nvar_dump($b);\n\
    \n$c = even_odd_count(123456789);\necho '$c = even_odd_count(123456789)' . \"\\\
    n\";\nvar_dump($c);\n", "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i <\
    \ strlen($num); $i++) {\n        if (strval($num)[$i] % 2 == 0) {\n          \
    \  $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ array($even, $odd);\n}", "  $num = abs($num);\n  $count = array(0, 0);\n  while\
    \ ($num > 0) {\n    $count[$num % 2]++;\n    $num = floor($num / 10);\n  }\n \
    \ return $count;\n}", "\t$even = 0;\n\t$odd = 0;\n\t$array = str_split($num);\n\
    \tfor ($i = 0; $i < count($array); $i++) {\n\t\tif ($array[$i] % 2 == 0) {\n\t\
    \t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n\
    }\n\n$test1 = even_odd_count(-12);\n$test2 = even_odd_count(123);\nprint_r($test1);\n\
    print_r($test2);", "    $num = abs($num);\n    $evens = 0;\n    $odds = 0;\n \
    \   while ($num > 0) {\n        $cur = $num % 10;\n        if ($cur % 2 == 0)\
    \ {\n            $evens++;\n        } else {\n            $odds++;\n        }\n\
    \        $num = intval($num / 10);\n    }\n    return [$evens, $odds];\n}\n",
  "  $even_count = 0;\n  $odd_count = 0;\n  $num = abs($num);\n  while ($num > 0)\
    \ {\n    $digit = $num % 10;\n    if ($digit % 2 == 0) {\n      $even_count++;\n\
    \    } else {\n      $odd_count++;\n    }\n    $num = floor($num / 10);\n  }\n\
    \  return [$even_count, $odd_count];\n}\n", "  $even = 0;\n  $odd = 0;\n  while\
    \ ($num > 0) {\n    $rem = $num % 10;\n    if ($rem % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $num = floor($num / 10);\n  }\n  return\
    \ array($even, $odd);\n}\n\necho \"return a tuple that has the number of even\
    \ and odd digits respectively.\\n\";\necho even_odd_count(-12) . \" ==> (1, 1)\\\
    n\";\necho even_odd_count(123) . \" ==> (1, 2)\\n\";\n", "  if (empty($num)) {\n\
    \    return $num;\n  }\n\n  $evens = 0;\n  $odds = 0;\n\n  while ($num > 0) {\n\
    \    $remainder = $num % 10;\n    if ($remainder % 2 === 0) {\n      $evens++;\n\
    \    } else {\n      $odds++;\n    }\n    $num = intval($num / 10);\n  }\n\n \
    \ return array($evens, $odds);\n}\n", "  if ($num == 0) return [0, 0];\n  $str\
    \ = (string)$num;\n  $even = substr_count($str, '2') + substr_count($str, '4')\
    \ + substr_count($str, '6') + substr_count($str, '8');\n  $odd = substr_count($str,\
    \ '1') + substr_count($str, '3') + substr_count($str, '5') + substr_count($str,\
    \ '7') + substr_count($str, '9');\n  return [$even, $odd];\n}\n", "    $even =\
    \ 0;\n    $odd = 0;\n    $revNum = strrev((string)$num);\n    for ($i = 0; $i\
    \ < strlen($revNum); $i++) {\n        if (is_numeric($revNum[$i])) {\n       \
    \     if ($revNum[$i] % 2 == 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    return \"($even,\
    \ $odd)\";\n}\n", "    $arr = [];\n    $count = 0;\n    $even = 0;\n    $odd =\
    \ 0;\n    while ($num >= 1) {\n        $arr[$count] = $num % 10;\n        $num\
    \ = floor($num / 10);\n        $count++;\n    }\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    $result = [$even, $odd];\n   \
    \ return $result;\n}", "\t$evenCount = 0;\n\t$oddCount = 0;\n\t$numArray = str_split($num);\n\
    \tforeach ($numArray as $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$evenCount++;\n\
    \t\t} else {\n\t\t\t$oddCount++;\n\t\t}\n\t}\n\treturn array($evenCount, $oddCount);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num != 0) {\n        $curr =\
    \ $num % 10;\n        if ($curr % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n\
    \    return array($even, $odd);\n}\n\necho \"even_odd_count(-12) = (1, 1): \"\
    ;\nprint_r(even_odd_count(-12));\necho \"<br />\";\necho \"even_odd_count(123)\
    \ = (1, 2): \";\nprint_r(even_odd_count(123));\necho \"<br />\";", "\t$even_count\
    \ = 0;\n\t$odd_count = 0;\n\t$str = strval($num);\n\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\tif ($str[$i] % 2 == 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\
    \t\t$odd_count++;\n\t\t}\n\t}\n\t$ret = [$even_count, $odd_count];\n\treturn $ret;\n\
    }\n\n$num = -12;\necho \"<pre>\";\nprint_r(even_odd_count($num));\necho \"</pre>\"\
    ;\n\n$num = -12;\necho \"<pre>\";\nprint_r(even_odd_count($num));\necho \"</pre>\"\
    ;\n", "   // Your code here\n   $result = array();\n   $digits = array_map('intval',\
    \ str_split($num));\n   foreach ($digits as $digit) {\n     if ($digit % 2 ==\
    \ 0) {\n       array_push($result, 'even');\n     } else {\n       array_push($result,\
    \ 'odd');\n     }\n   }\n   return [substr_count($result, 'even'), substr_count($result,\
    \ 'odd')];\n}\n\n$num = -12;\nprint_r(even_odd_count($num));", "  $even = 0;\n\
    \  $odd = 0;\n  while ($num != 0) {\n    $last_digit = $num % 10;\n    if ($last_digit\
    \ % 2 == 0) {\n      $even += 1;\n    } else {\n      $odd += 1;\n    }\n    $num\
    \ = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n$result = even_odd_count(-12);\n\
    echo \"$result[0] $result[1]\\n\";\n$result = even_odd_count(123);\necho \"$result[0]\
    \ $result[1]\\n\";", "    $intArray = str_split(abs($num));\n    $odd = 0;\n \
    \   $even = 0;\n    foreach ($intArray as $number) {\n        if ($number % 2\
    \ === 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "\t$even_count = 0;\n\
    \t$odd_count = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even_count += 1;\n\t\t} else {\n\t\
    \t\t$odd_count += 1;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even_count,\
    \ $odd_count);\n}\n", "    $odd = 0;\n    $even = 0;\n    while ($num >= 1) {\n\
    \        $div = $num % 10;\n        if ($div % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return array($even, $odd);\n}\necho json_encode(even_odd_count(-12));\n\
    echo '<br/>';\necho json_encode(even_odd_count(123));", "    $str = abs($num);\n\
    \    $odd = 0;\n    $even = 0;\n    while($str > 0) {\n        $str % 2 ? $odd++\
    \ : $even++;\n        $str = floor($str / 10);\n    }\n    return [$even, $odd];\n\
    }\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", "    $split\
    \ = str_split($num);\n    $even = 0;\n    $odd = 0;\n    foreach ($split as $val)\
    \ {\n        if ($val % 2 == 0) {\n            $even++;\n        } else {\n  \
    \          $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $res\
    \ = array(0, 0);\n    $num = abs($num);\n    while ($num > 0) {\n        $curr\
    \ = $num % 10;\n        if ($curr % 2 == 0) {\n            $res[0]++;\n      \
    \  } else {\n            $res[1]++;\n        }\n        $num = intval($num / 10);\n\
    \    }\n    return $res;\n}\necho \"even_odd_count(-12) ==> \";\nprint_r(even_odd_count(-12));\n\
    echo \"<br>\";\necho \"even_odd_count(123) ==> \";\nprint_r(even_odd_count(123));",
  "    $odd = 0;\n    $even = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 === 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n\necho \"even_odd_count(-12) ==>\
    \ \";\nvar_dump(even_odd_count(-12));\necho \"even_odd_count(123) ==> \";\nvar_dump(even_odd_count(123));",
  "    // your code here\n}\n", "    $even = 0;\n    $odd = 0;\n    for ($i = 0; $i\
    \ < strlen((string)$num); $i++) {\n        if ($num[$i] % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}\necho \"<pre>even_odd_count(-12)\\r\\n\";\nvar_dump(even_odd_count(-12));\n\
    echo \"</pre>\";\necho \"<pre>even_odd_count(123)\\r\\n\";\nvar_dump(even_odd_count(123));\n\
    echo \"</pre>\";", "    $num = (string) $num;\n    $even = 0;\n    $odd = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}", "  $str = strval($num);\n  $evenCount = 0;\n\
    \  $oddCount = 0;\n  for ($i = 0; $i < strlen($str); $i++) {\n    if ($str[$i]\
    \ % 2 == 0) {\n      $evenCount++;\n    } else {\n      $oddCount++;\n    }\n\
    \  }\n  return array($evenCount, $oddCount);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num_list = str_split($num);\n    for ($i = 0; $i < count($num_list);\
    \ $i++) {\n        if ($num_list[$i] % 2 == 0) {\n            $even += 1;\n  \
    \      } else {\n            $odd += 1;\n        }\n    }\n    return [$even,\
    \ $odd];\n}\necho implode(', ', even_odd_count(-12)) . \"\\n\";\necho implode(',\
    \ ', even_odd_count(123)) . \"\\n\";", "  $odd = 0;\n  $even = 0;\n  for ($i =\
    \ 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return \"($even, $odd)\";\n}\n\necho\
    \ even_odd_count(-12) . \"\\n\";\necho even_odd_count(123) . \"\\n\";", "    $even_count\
    \ = 0;\n    $odd_count = 0;\n    while ($num != 0) {\n        $number = $num %\
    \ 10;\n        if ($number % 2 == 0) {\n            $even_count++;\n        }\
    \ else {\n            $odd_count++;\n        }\n        $num = $num / 10;\n  \
    \  }\n    return [$even_count, $odd_count];\n}\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';",
  "  $evenCount = 0;\n  $oddCount = 0;\n  $digits = str_split(abs($num));\n  foreach\
    \ ($digits as $digit) {\n    if ($digit % 2 == 0) {\n      $evenCount++;\n   \
    \ } else {\n      $oddCount++;\n    }\n  }\n  return \"(\" . $evenCount . \",\
    \ \" . $oddCount . \")\";\n}\n\necho even_odd_count(-12) . PHP_EOL;\necho even_odd_count(123)\
    \ . PHP_EOL;\necho even_odd_count(999) . PHP_EOL;\n", "  $num = abs($num);\n \
    \ $num = str_split($num);\n  $even = 0;\n  $odd = 0;\n  foreach ($num as $value)\
    \ {\n    if ($value % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return array($even, $odd);\n}", "    $num_str = strval($num);\n\
    \    $even_count = 0;\n    $odd_count = 0;\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n        if ($num_str[$i] % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return array($even_count,\
    \ $odd_count);\n}\n", "   $result = [];\n   $num = abs($num);\n   $num = str_split($num);\n\
    \   $even = 0;\n   $odd = 0;\n   foreach ($num as $value) {\n      if ($value\
    \ % 2 == 0) {\n         $even += 1;\n      } else {\n         $odd += 1;\n   \
    \   }\n   }\n   array_push($result, $even, $odd);\n   return $result;\n}\necho\
    \ var_dump(even_odd_count(-12)). \"<br>\";\necho var_dump(even_odd_count(123)).\
    \ \"<br>\";", "  $arr = str_split(abs($num));\n  $even_num = 0;\n  $odd_num =\
    \ 0;\n  foreach ($arr as $digit) {\n    if ($digit % 2 == 0) {\n      $even_num++;\n\
    \    } else {\n      $odd_num++;\n    }\n  }\n  return [$even_num, $odd_num];\n\
    }\n", "    $arr = [];\n    $arr[0] = 0;\n    $arr[1] = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $arr[0]++;\n        }\n        else {\n            $arr[1]++;\n     \
    \   }\n    }\n    return $arr;\n}\n", "\t$num = abs($num);\n\t$odd = $even = 0;\n\
    \twhile ($num > 0) {\n\t\t$i = $num % 10;\n\t\tif ($i % 2 == 0) $even++;\n\t\t\
    else $odd++;\n\t\t$num = floor($num / 10);\n\t}\n\treturn [$even, $odd];\n}\n\
    echo implode(', ', even_odd_count(-12)) . PHP_EOL;\necho implode(', ', even_odd_count(123))\
    \ . PHP_EOL;\n", "  $result = ['even' => 0, 'odd' => 0];\n  if ($num < 0) {\n\
    \    $num = -$num;\n  }\n  while ($num) {\n    $digit = $num % 10;\n    if ($digit\
    \ % 2 == 0) {\n      $result['even']++;\n    } else {\n      $result['odd']++;\n\
    \    }\n    $num = (int)($num / 10);\n  }\n  return $result;\n}", "    $even =\
    \ 0;\n    $odd = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i]\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\n\n$answer = even_odd_count(123);\n\
    echo $answer[0].\"-\".$answer[1];\n\necho \"<br>\";\necho \"<br>\";\necho \"<br>\"\
    ;\necho \"<br>\";\n", "\n$countOdd = 0;\n$countEven = 0;\n$num = abs($num);\n\n\
    $numDigits = strlen($num);\n\n$numArray = str_split($num);\n", "    //your code\
    \ here\n}", "    $num_str = (string)$num;\n    $even = 0;\n    $odd = 0;\n   \
    \ for ($i = 0; $i < strlen($num_str); $i++) {\n        if ($num_str[$i] % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "\treturn [substr_count(abs($num), \"13579\"\
    ), substr_count(abs($num), \"02468\")];\n}\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "  $even = 0;\n  $odd = 0;\n  $num_array = str_split($num);\n  $length = count($num_array);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($num_array[$i] % 2 == 0) {\n  \
    \    $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n\
    }\necho \"[\" . even_odd_count(-12)[0] . \", \" . even_odd_count(-12)[1] . \"\
    ]<br>\";\n", "  $r = \"\";\n  if (is_int($num)) {\n    $abs = abs($num);\n   \
    \ $arr = str_split($abs);\n    $odd = 0;\n    $even = 0;\n    foreach ($arr as\
    \ $digit) {\n      if ($digit % 2 == 0) {\n        $even++;\n      } else {\n\
    \        $odd++;\n      }\n    }\n    $r = \"($even, $odd)\";\n  }\n  return $r;\n\
    }\n$answer = even_odd_count(-12);\necho \"even_odd_count(-12) ==> $answer <br/>\"\
    ;\n$answer = even_odd_count(123);\necho \"even_odd_count(123) ==> $answer <br/>\"\
    ;", "  $even = 0;\n  $odd = 0;\n  $num = abs($num);\n  while ($num > 0) {\n  \
    \  $remainder = $num % 10;\n    if ($remainder % 2 == 0) {\n      $even++;\n \
    \   } else {\n      $odd++;\n    }\n    $num = $num / 10;\n  }\n  return array($even,\
    \ $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$test = str_split(abs($num));\n\t$even = 0;\n\t$odd = 0;\n\tforeach ($test as\
    \ $value) {\n\t\tif($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t}\n\treturn array($even, $odd);\n}\n", "    $result = [0, 0];\n    $str\
    \ = (string)abs($num);\n    for ($i = 0; $i < strlen($str); $i++) {\n        $digit\
    \ = $str[$i];\n        if ($digit % 2 == 0) $result[0]++;\n        else $result[1]++;\n\
    \    }\n    return $result;\n}\necho even_odd_count(-12);\necho even_odd_count(123);",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = $num < 0 ? -$num : $num;\n\twhile ($num > 0)\
    \ {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t\
    } else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}", "\t$arr = str_split($num);\n\t$even = 0;\n\t$odd = 0;\n\tforeach\
    \ ($arr as $k => $v) {\n\t\tif (abs($v) % 2 == 0) {\n\t\t\t$even += 1;\n\t\t}\
    \ else {\n\t\t\t$odd += 1;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\necho\
    \ '<pre>';\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", " \
    \   $num = array_map('intval', str_split(abs($num)));\n    $even_count = 0;\n\
    \    $odd_count = 0;\n    foreach ($num as $int) {\n        if ($int % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}\n", "\t$even = 0;\n\
    \t$odd = 0;\n\t$numbers = str_split($num);\n\tforeach ($numbers as $number) {\n\
    \t\tif ($number % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t}\n\treturn \"($even, $odd)\";\n}\n", "  $even = $odd = 0;\n  if($num < 0)\
    \ $num *= -1;\n  while($num > 0) {\n    if($num % 2 == 0) $even++;\n    else $odd++;\n\
    \    $num /= 10;\n  }\n  return array($even, $odd);\n}\nprint_r(even_odd_count(-12));\n",
  "    $even = 0;\n    $odd = 0;\n    $stringNum = strval($num);\n    for ($i = 0;\
    \ $i < strlen($stringNum); $i++) {\n        if ($stringNum[$i] % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}\n", "  $result = ['even' => 0, 'odd' => 0];\n\
    \  $num = abs($num);\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit\
    \ % 2 == 0) {\n      $result['even']++;\n    } else {\n      $result['odd']++;\n\
    \    }\n    $num = intval($num / 10);\n  }\n  return $result;\n}", "    $arrNum\
    \ = str_split($num);\n    $evenCount = 0;\n    $oddCount = 0;\n    foreach ($arrNum\
    \ as $num) {\n        if ($num % 2 == 0) {\n            $evenCount++;\n      \
    \  } else {\n            $oddCount++;\n        }\n    }\n    return array($evenCount,\
    \ $oddCount);\n}\n", "\t$even = 0;\n\t$odd = 0;\n\t$digits = str_split($num);\n\
    \tfor ($i = 0; $i < count($digits); $i++) {\n\t\tif ($digits[$i] % 2 == 0) {\n\
    \t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn \"(\" . $even\
    \ . \", \" . $odd . \")\";\n}\necho even_odd_count(-12) . PHP_EOL;\necho even_odd_count(123)\
    \ . PHP_EOL;\n", "  $num = str_split($num);\n  $result = [0, 0];\n  foreach ($num\
    \ as $key => $value) {\n    $value % 2 == 0 ? $result[0]++ : $result[1]++;\n \
    \ }\n  return $result;\n}", "  $string = strval($num);\n  $array = str_split($string);\n\
    \  $even = 0;\n  $odd = 0;\n  foreach ($array as $value) {\n    if ($value % 2\
    \ == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return array($even,\
    \ $odd);\n}\n\necho \"even_odd_count(-12) should return (1, 1): \";\nvar_dump(even_odd_count(-12));\n\
    echo \"\\n\";\necho \"even_odd_count(123) should return (1, 2): \";\nvar_dump(even_odd_count(123));\n\
    echo \"\\n\";\necho \"even_odd_count(0) should return (1, 0): \";\nvar_dump(even_odd_count(0));\n\
    echo \"\\n\";\necho \"even_odd_count(2) should return (1, 0): \";\nvar_dump(even_odd_count(2));\n\
    echo \"\\n\";\necho \"even_odd_count(1) should return (0, 1): \";\nvar_dump(even_odd_count(1));\n\
    echo \"\\n\";\necho \"even_odd_count(13) should return (0, 1): \";\nvar_dump(even_odd_count(13));\n\
    echo \"\\n\";\necho \"even_odd_count(16) should return (2, 0): \";\nvar_dump(even_odd_count(16));\n\
    echo \"\\n\";\necho \"even_odd_count(150) should return (2, 1): \";\nvar_dump(even_odd_count(150));\n\
    echo \"\\n\";\necho \"even_odd_count(153) should return (0, 3): \";\nvar_dump(even_odd_count(153));\n\
    echo \"\\n\";", "    $even = 0;\n    $odd = 0;\n    $arr = str_split($num);\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}\n", "    $even_counter = 0;\n    $odd_counter\
    \ = 0;\n    $num_string = strval($num);\n    for ($i = 0; $i < strlen($num_string);\
    \ $i++) {\n        if ($num_string[$i] % 2 == 0) {\n            $even_counter++;\n\
    \        } else {\n            $odd_counter++;\n        }\n    }\n    return array($even_counter,\
    \ $odd_counter);\n}\n", "  $even_count = 0;\n  $odd_count = 0;\n  if ($num < 0)\
    \ {\n    $num = -$num;\n  }\n  $digit = 1;\n  while ($num >= $digit) {\n    $digit_last\
    \ = ($num / $digit) % 10;\n    if ($digit_last % 2 == 0) {\n      $even_count++;\n\
    \    } else {\n      $odd_count++;\n    }\n    $digit *= 10;\n  }\n  return array($even_count,\
    \ $odd_count);\n}\n\necho even_odd_count(-12)[0].\" \".even_odd_count(-12)[1].\"\
    \\n\";\necho even_odd_count(123)[0].\" \".even_odd_count(123)[1].\"\\n\";\n",
  "\t$even=0;\n\t$odd=0;\n\t$num=str_split($num);\n\tforeach ($num as $val) {\n\t\t\
    if ($val%2==0) {\n\t\t\t$even++;\n\t\t}\n\t\telse{\n\t\t\t$odd++;\n\t\t}\n\t}\n\
    \treturn array($even,$odd);\n}\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $str = (string)$num;\n    $str_len = strlen($str);\n\
    \    for ($i = 0; $i < $str_len; $i++) {\n        if ($str[$i] % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n", "\t$even = 0;\n\t$odd = 0;\n\tif($num < 0) {\n\
    \t\t$num = abs($num);\n\t}\n\twhile($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if($digit % 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\t\t\
    }\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n", "\t\
    $arr = array();\n\t$even = 0;\n\t$odd = 0;\n\t$num = str_split($num);\n\tforeach\
    \ ($num as $key => $value) {\n\t\tif($value % 2 == 0) {\n\t\t\t$even++;\n\t\t\
    } else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\tarray_push($arr, $even, $odd);\n\treturn\
    \ $arr;\n}\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n",
  "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num != 0) {\n\t\t$last_digit\
    \ = $num % 10;\n\t\tif ($last_digit % 2 == 0)\n\t\t\t$even++;\n\t\telse\n\t\t\t\
    $odd++;\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n",
  "    $result = [0, 0];\n    $num = abs($num);\n    if ($num < 10) {\n        if\
    \ ($num % 2 == 0) {\n            $result[0]++;\n        } else {\n           \
    \ $result[1]++;\n        }\n    } else {\n        while ($num > 0) {\n       \
    \     $d = $num % 10;\n            if ($d % 2 == 0) {\n                $result[0]++;\n\
    \            } else {\n                $result[1]++;\n            }\n        \
    \    $num = floor($num / 10);\n        }\n    }\n    return $result;\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $rem = $num % 10;\n        if ($rem % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $evenCount = 0;\n  \
    \  $oddCount = 0;\n    $numAbs = abs($num);\n    while ($numAbs > 0) {\n     \
    \   $digit = $numAbs % 10;\n        if ($digit % 2 == 0) {\n            $evenCount++;\n\
    \        } else {\n            $oddCount++;\n        }\n        $numAbs = floor($numAbs\
    \ / 10);\n    }\n    return array($evenCount, $oddCount);\n}", "    if ($num <\
    \ 0) {\n        $num = abs($num);\n    }\n    $arr = array_map('intval', str_split($num));\n\
    \    $even = 0;\n    $odd = 0;\n    foreach ($arr as $num) {\n        if ($num\
    \ % 2 === 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    $even = $odd = 0;\n\
    \    while ($num > 0) {\n        $last_digit = $num % 10;\n        if ($last_digit\
    \ % 2 == 0)\n            $even++;\n        else\n            $odd++;\n       \
    \ $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n", "\t$ans = [0, 0];\n\
    \twhile($num != 0) {\n\t\t$last_digit = $num % 10;\n\t\tif($last_digit % 2 ==\
    \ 0)\n\t\t\t$ans[0]++;\n\t\telse\n\t\t\t$ans[1]++;\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn $ans;\n}\n$ans = even_odd_count(-12);\necho \"[{$ans[0]}, {$ans[1]}]\"\
    ;\necho \"\\n\";", "    $a = str_split(abs($num));\n    $even = 0;\n    $odd =\
    \ 0;\n    foreach ($a as $value) {\n        if ($value % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ array($even, $odd);\n}", "  $ev = 0;\n  $od = 0;\n  $r = 0;\n  while ($num >\
    \ 0) {\n    $r = $num % 10;\n    if ($r % 2 == 0) {\n      $ev += 1;\n    } else\
    \ {\n      $od += 1;\n    }\n    $num = intval($num / 10);\n  }\n  return array($ev,\
    \ $od);\n}\n\n$arr = array(-12, 123, 1212, 13, 23111, 1, 5);\nforeach ($arr as\
    \ $num) {\n  print_r(even_odd_count($num) . PHP_EOL);\n}", "  // Your code here\n\
    \  \t$number = (string) $num;\n  \t$return = ['even' => 0, 'odd' => 0];\n  \t\
    $number = abs($number);\n  \t$count = 0;\n  \tfor ($i=0; $i < strlen($number);\
    \ $i++) { \n  \t\tif($count % 2 == 0){\n  \t\t\t$return['even']++;\n  \t\t}else{\n\
    \  \t\t\t$return['odd']++;\n  \t\t}\n  \t\t$count++;\n  \t}\n  \treturn $return;\n\
    }\n", "    $output = ['even' => 0, 'odd' => 0];\n    $num_string = strval($num);\n\
    \    for ($i = 0; $i < strlen($num_string); $i++) {\n        if ($num_string[$i]\
    \ % 2 == 0) {\n            $output['even']++;\n        } else {\n            $output['odd']++;\n\
    \        }\n    }\n    return array_values($output);\n}", "    $str = strval($num);\n\
    \    $len = strlen($str);\n    $evens = 0;\n    $odds = 0;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($str[$i] % 2 == 0) {\n            $evens++;\n \
    \       } else {\n            $odds++;\n        }\n    }\n    return array($evens,\
    \ $odds);\n}", "    // get the absolute value of the number\n    $num = abs($num);\n\
    \    // convert the number to a string\n    $str = strval($num);\n    // initialize\
    \ both even and odd counts to 0\n    $even = 0;\n    $odd = 0;\n    // iterate\
    \ through the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        //\
    \ if the number is even\n        if ($str[$i] % 2 == 0) {\n            // increase\
    \ the even count\n            $even++;\n        } else {\n            // otherwise,\
    \ increase the odd count\n            $odd++;\n        }\n    }\n    // return\
    \ the counts in a tuple\n    return array($even, $odd);\n}\n", "  $num = abs($num);\n\
    \  $even = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n  \
    \  if ($digit % 2 === 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \    $num = (int)($num / 10);\n  }\n  return [$even, $odd];\n}\n", "  $digits\
    \ = str_split(abs($num));\n  $even = array_filter($digits, function($digit) {\n\
    \    return $digit % 2 == 0;\n  });\n  $odd = array_filter($digits, function($digit)\
    \ {\n    return $digit % 2 != 0;\n  });\n  return array(count($even), count($odd));\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num != 0) {\n        $x = $num\
    \ % 10;\n        if ($x % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));\n\
    print_r(even_odd_count(0));\nprint_r(even_odd_count(33));\nprint_r(even_odd_count(100100100100));\n\
    print_r(even_odd_count(123123123123));", "    $num = abs($num);\n    $even = 0;\n\
    \    $odd = 0;\n    while ($num > 0) {\n        $remainder = $num % 10;\n    \
    \    if ($remainder % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = $num / 10;\n    }\n    return array($even,\
    \ $odd);\n}\necho \"In {-12}: \" . implode(\", \", even_odd_count(-12)) . \"\\\
    n\";\necho \"In {123}: \" . implode(\", \", even_odd_count(123)) . \"\\n\";\n\
    echo \"In {-123}: \" . implode(\", \", even_odd_count(-123)) . \"\\n\";", "\t\
    $count_odd = 0;\n\t$count_even = 0;\n\t$abs_num = abs($num);\n\t$abs_num_string\
    \ = strval($abs_num);\n\t$abs_num_length = strlen($abs_num_string);\n\tfor ($i\
    \ = 0; $i < $abs_num_length; $i++) {\n\t\t$current_digit = $abs_num_string[$i];\n\
    \t\tif ($current_digit % 2 == 0) {\n\t\t\t$count_even++;\n\t\t} else {\n\t\t\t\
    $count_odd++;\n\t\t}\n\t}\n\treturn array($count_even, $count_odd);\n}\n", "\t\
    if ($num < 0) {\n\t\t$num = abs($num);\n\t}\n\t$arr = str_split($num);\n\t$even\
    \ = 0;\n\t$odd = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value % 2\
    \ == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn \"\
    ($even, $odd)\";\n}\n\necho even_odd_count(-12).\"\\n\";\necho even_odd_count(123).\"\
    \\n\";", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\t$abs = $num;\n\twhile\
    \ ($num >= 1) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\necho json_encode(even_odd_count(-12));", "  $evenCount\
    \ = 0;\n  $oddCount = 0;\n  $numArr = str_split($num);\n  $numArr = array_map('intval',\
    \ $numArr);\n  foreach ($numArr as $num) {\n    if ($num % 2 == 0) {\n      $evenCount\
    \ += 1;\n    } else {\n      $oddCount += 1;\n    }\n  }\n  return \"($evenCount,\
    \ $oddCount)\";\n}", "  $count = strlen($num);\n  $odd = 0;\n  $even = 0;\n  for\
    \ ($i = 0; $i < $count; $i++) {\n    if ($num[$i] % 2 === 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return \"($even, $odd)\";\n}\necho\
    \ even_odd_count(-12) . PHP_EOL;\necho even_odd_count(123) . PHP_EOL;\necho even_odd_count(4)\
    \ . PHP_EOL;\necho even_odd_count(5) . PHP_EOL;\n", "  $num = abs($num);\n  $even\
    \ = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit\
    \ % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num =\
    \ intval($num / 10);\n  }\n  return [$even, $odd];\n}", "    $numbers = str_split($num);\n\
    \    $evens = 0;\n    $odds = 0;\n    foreach ($numbers as $number) {\n      \
    \  if ($number % 2 === 0) {\n            $evens++;\n        } else {\n       \
    \     $odds++;\n        }\n    }\n    return array($evens, $odds);\n}\necho implode(\"\
    , \", even_odd_count(-12)) . \"\\n\";\necho implode(\", \", even_odd_count(123))\
    \ . \"\\n\";", "    $oddCount = 0;\n    $evenCount = 0;\n    $nums = str_split(abs($num));\n\
    \    foreach ($nums as $number) {\n        if ($number % 2 == 0) {\n         \
    \   $evenCount++;\n        } else {\n            $oddCount++;\n        }\n   \
    \ }\n    return [$evenCount, $oddCount];\n}\n", "    $int = strval($num);\n  \
    \  $list = str_split($int);\n    $evenCount = 0;\n    $oddCount = 0;\n    foreach\
    \ ($list as $i){\n        if ($i % 2 == 0){\n            $evenCount++;\n     \
    \   } else {\n            $oddCount++;\n        }\n    }\n    return \"({$evenCount},\
    \ {$oddCount})\";\n}\n\necho(even_odd_count(-12));\necho(even_odd_count(123));",
  "\t$count = [0, 0];\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$n = $num %\
    \ 10;\n\t\tif ($n % 2 == 0) {\n\t\t\t$count[0]++;\n\t\t} else {\n\t\t\t$count[1]++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn $count;\n}", "    // 949 +\
    \ 1 = 950\n    // 949 + 1.5 = 950.5\n    // ceil(number) \n    // floor(number)\n\
    \    // number - 0.5\n    // round(number)\n    $num = abs($num);\n    $even =\
    \ 0;\n    $odd = 0;\n    while ($num > 0) {\n        $lastDigit = $num % 10;\n\
    \        if ($lastDigit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $x) {\n        if ($x % 2 == 0) {\n            $even +=\
    \ 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    return array($even,\
    \ $odd);\n}", "  $even = 0;\n  $odd = 0;\n  $num = abs($num);\n  while ($num >\
    \ 0) {\n    $digit = $num % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $num = floor($num / 10);\n  }\n  return\
    \ array($even, $odd);\n}\n", "    $num = str_split(abs($num));\n    $totalEven\
    \ = 0;\n    $totalOdd = 0;\n    foreach($num as $value) {\n        if($value %\
    \ 2 == 0) {\n            $totalEven++;\n        } else {\n            $totalOdd++;\n\
    \        }\n    }\n    return array($totalEven, $totalOdd);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));\nprint_r(even_odd_count(100100));", "  $even = 0;\n\
    \  $odd = 0;\n  $arr = str_split($num);\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    if (((int)$arr[$i]) % 2 == 0) {\n      $even++;\n    } else {\n     \
    \ $odd++;\n    }\n  }\n  return \"($even, $odd)\";\n}", "  $digits = str_split(abs($num));\n\
    \  $even = 0;\n  $odd = 0;\n  foreach ($digits as $digit) {\n    if ($digit %\
    \ 2 === 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return\
    \ [$even, $odd];\n}", "  // convert num to string\n  $num = strval($num);\n  //\
    \ count even numbers\n  $even = strlen(preg_replace('/[13579]/', '', $num));\n\
    \  // count odd numbers\n  $odd = strlen(preg_replace('/[02468]/', '', $num));\n\
    \  // return tuple\n  return array($even, $odd);\n}\nprint_r(even_odd_count(-12)\
    \ . PHP_EOL);\nprint_r(even_odd_count(123) . PHP_EOL);", "    $abs = abs($num);\n\
    \    $evens = substr_count($abs, '2') + substr_count($abs, '4') + substr_count($abs,\
    \ '6') + substr_count($abs, '8');\n    $odds = substr_count($abs, '1') + substr_count($abs,\
    \ '3') + substr_count($abs, '5') + substr_count($abs, '7') + substr_count($abs,\
    \ '9');\n    return array($evens, $odds);\n}", "    $odds = array();\n    $evens\
    \ = array();\n    $num_str = (string)$num;\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n        if ($num_str[$i] % 2 === 0) {\n            array_push($evens,\
    \ $num_str[$i]);\n        } else {\n            array_push($odds, $num_str[$i]);\n\
    \        }\n    }\n    return [count($evens), count($odds)];\n}\n\necho \"even_odd_count(-12)\
    \ ==> (\" . even_odd_count(-12)[0] . \", \" . even_odd_count(-12)[1] . \")\";\n\
    echo \"\\n\";\necho \"even_odd_count(123) ==> (\" . even_odd_count(123)[0] . \"\
    , \" . even_odd_count(123)[1] . \")\";\necho \"\\n\";\necho \"even_odd_count(23455)\
    \ ==> (\" . even_odd_count(23455)[0] . \", \" . even_odd_count(23455)[1] . \"\
    )\";\necho \"\\n\";\necho \"even_odd_count(10) ==> (\" . even_odd_count(10)[0]\
    \ . \", \" . even_odd_count(10)[1] . \")\";\necho \"\\n\";\necho \"even_odd_count(6)\
    \ ==> (\" . even_odd_count(6)[0] . \", \" . even_odd_count(6)[1] . \")\";\necho\
    \ \"\\n\";\necho \"even_odd_count(1) ==> (\" . even_odd_count(1)[0] . \", \" .\
    \ even_odd_count(1)[1] . \")\";\necho \"\\n\";\necho \"even_odd_count(0) ==> (\"\
    \ . even_odd_count(0)[0] . \", \" . even_odd_count(0)[1] . \")\";\necho \"\\n\"\
    ;\necho \"even_odd_count(101) ==> (\" . even_odd_count(101)[0] . \", \" . even_odd_count(101)[1]\
    \ . \")", "  $arr = str_split($num);\n  $even = 0;\n  $odd = 0;\n  foreach ($arr\
    \ as $a) {\n    if ($a % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return [$even, $odd];\n}\necho \"even_odd_count(-12) ==> (\" .\
    \ even_odd_count(-12)[0] . \", \" . even_odd_count(-12)[1] . \")<br>\";\necho\
    \ \"even_odd_count(123) ==> (\" . even_odd_count(123)[0] . \", \" . even_odd_count(123)[1]\
    \ . \")<br>\";\n", "  $even_count = 0;\n  $odd_count = 0;\n  $num = abs($num);\n\
    \  while ($num > 0) {\n    $last_digit = $num % 10;\n    if ($last_digit % 2 ==\
    \ 0) {\n      $even_count += 1;\n    } else {\n      $odd_count += 1;\n    }\n\
    \    $num = floor($num / 10);\n  }\n  return [$even_count, $odd_count];\n}\n",
  "\t$positive_num = abs($num);\n\t$integer_num = intval($positive_num);\n\t$convert_to_string\
    \ = strval($integer_num);\n\t$break_string_to_array = str_split($convert_to_string);\n\
    \t$odd_number = 0;\n\t$even_number = 0;\n\tforeach ($break_string_to_array as\
    \ $item) {\n\t\tif ($item % 2 == 0) {\n\t\t\t$even_number += 1;\n\t\t} else {\n\
    \t\t\t$odd_number += 1;\n\t\t}\n\t}\n\t$result = array($even_number, $odd_number);\n\
    \treturn $result;\n}\n\nprint_r(even_odd_count(-12));\necho \"\\n\";\nprint_r(even_odd_count(123));\n\
    echo \"\\n\";\n", "  $evenCount = 0;\n  $oddCount = 0;\n  $arr = str_split($num);\n\
    \  foreach ($arr as $value) {\n    if ($value % 2 == 0) {\n      $evenCount++;\n\
    \    } else {\n      $oddCount++;\n    }\n  }\n  return \"($evenCount, $oddCount)\"\
    ;\n}\n\necho even_odd_count(-12);\n", "    $even_count = 0;\n    $odd_count =\
    \ 0;\n    while ($num != 0) {\n        $remainder = $num % 10;\n        if ($remainder\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return $even_count .\
    \ ', ' . $odd_count;\n}\necho even_odd_count(-12) . '<br>';\necho even_odd_count(123)\
    \ . '<br>';\necho even_odd_count(545) . '<br>';\necho even_odd_count(2334) . '<br>';\n\
    echo even_odd_count(100) . '<br>';\necho even_odd_count(6532) . '<br>';", "  $arr\
    \ = str_split($num);\n  return [\n    array_reduce($arr, function($acc, $cur)\
    \ {\n      return $cur % 2 == 0 ? $acc + 1 : $acc;\n    }, 0),\n    array_reduce($arr,\
    \ function($acc, $cur) {\n      return $cur % 2 == 1 ? $acc + 1 : $acc;\n    },\
    \ 0)\n  ];\n}\n", "    $even = 0;\n    $odd = 0;\n    if ($num == 0) {\n     \
    \   $even = 1;\n    } elseif ($num > 0) {\n        $arr = str_split($num);\n \
    \       for ($i = 0; $i < count($arr); $i++) {\n            if ($arr[$i] % 2 ==\
    \ 0) {\n                $even++;\n            } else {\n                $odd++;\n\
    \            }\n        }\n    } else {\n        $arr = str_split(abs($num));\n\
    \        for ($i = 0; $i < count($arr); $i++) {\n            if ($arr[$i] % 2\
    \ == 0) {\n                $even++;\n            } else {\n                $odd++;\n\
    \            }\n        }\n    }\n    return array($even, $odd);\n}\nprint_r(even_odd_count(-12)\
    \ . PHP_EOL);\nprint_r(even_odd_count(123) . PHP_EOL);\nprint_r(even_odd_count(2)\
    \ . PHP_EOL);\nprint_r(even_odd_count(0) . PHP_EOL);\nprint_r(even_odd_count(100)\
    \ . PHP_EOL);\nprint_r(even_odd_count(-1) . PHP_EOL);\nprint_r(even_odd_count(201)\
    \ . PHP_EOL);\n", "\t// Enter code here\n\t$num = $num < 0 ? abs($num) : $num;\n\
    \t$str_num = (string)$num;\n\t$even_digits = 0;\n\t$odd_digits = 0;\n\tfor ($i\
    \ = 0; $i < strlen($str_num); $i++) {\n\t\tif ((int)$str_num[$i] % 2 == 0) {\n\
    \t\t\t$even_digits++;\n\t\t} else {\n\t\t\t$odd_digits++;\n\t\t}\n\t}\n\treturn\
    \ [$even_digits, $odd_digits];\n}\n", "  $tuple = [0, 0];\n  $arr = str_split($num);\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n    \
    \  $tuple[0]++;\n    } else {\n      $tuple[1]++;\n    }\n  }\n  return $tuple;\n\
    }\n", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\t\n\twhile ($num > 0)\
    \ {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0)\n\t\t\t$even++;\n\t\telse\n\
    \t\t\t$odd++;\n\t\t$num = floor($num / 10);\n\t}\n\t\n\treturn array($even, $odd);\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  $str = strval($num);\n  $len = strlen($str);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($str[$i] % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return array($even, $odd);\n}\necho\
    \ 'even_odd_count(123) ==> ';\nprint_r(even_odd_count(123));\necho '<br>';\necho\
    \ 'even_odd_count(-12) ==> ';\nprint_r(even_odd_count(-12));\necho '<br>';\necho\
    \ 'even_odd_count(1234) ==> ';\nprint_r(even_odd_count(1234));\necho '<br>';",
  "  $even = 0;\n  $odd = 0;\n  $abs = abs($num);\n  $digits = str_split($abs);\n\
    \  foreach ($digits as $digit) {\n    if ($digit % 2 == 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n}\n\nprint_r(even_odd_count(-12));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
