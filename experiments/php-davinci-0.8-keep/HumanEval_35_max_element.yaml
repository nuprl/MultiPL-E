name: HumanEval_35_max_element
language: php
prompt: "<?php\n// Return maximum element in the list.\n// >>> max_element([1, 2,\
  \ 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\n\
  function max_element($l) {\n"
tests: "function candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))\
  \ !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if (empty($l)) {\n        return null;\n    }\n    $max = $l[0];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "  $r = $l[0];\n\
    \  foreach ($l as $v) {\n    if ($v > $r) {\n      $r = $v;\n    }\n  }\n  return\
    \ $r;\n}\n", "    $maximum = null;\n    foreach ($l as $element) {\n        if\
    \ ($maximum === null) {\n            $maximum = $element;\n        } else {\n\
    \            if ($element > $maximum) {\n                $maximum = $element;\n\
    \            }\n        }\n    }\n    return $maximum;\n}\n", "  $max = $l[0];\n\
    \  foreach ($l as $e) {\n    if ($e > $max) {\n      $max = $e;\n    }\n  }\n\
    \  return $max;\n}\n", "    // TODO: find out the max element in the list.\n \
    \   // Hint: use while-loop.\n    $max_val = $l[0];\n    $i = 1;\n    while ($i<count($l))\
    \ {\n        if ($l[$i] > $max_val) {\n            $max_val = $l[$i];\n      \
    \  }\n        $i++;\n    }\n    return $max_val;\n}\n", "    if (empty($l)) {\n\
    \        return null;\n    } else {\n        return max($l);\n    }\n}\n", " \
    \   $max = $l[0];\n    foreach ($l as $item) {\n        if ($item > $max) {\n\
    \            $max = $item;\n        }\n    }\n    return $max;\n}\necho max_element([1,\
    \ 2, 3]) . \"\\n\";\necho max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ . \"\\n\";\n", "    if ($l) {\n        $m = max_element(tl($l));\n        return\
    \ hd($l) > $m ? hd($l) : $m;\n    }\n    return null;\n}\n", "    if (count($l)\
    \ == 0) {\n        return null;\n    }\n    $ret = $l[0];\n    for ($i = 1; $i\
    \ < count($l); $i++) {\n        if ($l[$i] > $ret) {\n            $ret = $l[$i];\n\
    \        }\n    }\n    return $ret;\n}", "    $maximum = $l[0];\n    for ($i =\
    \ 1; $i < count($l); $i++) {\n        if ($l[$i] > $maximum) {\n            $maximum\
    \ = $l[$i];\n        }\n    }\n    return $maximum;\n}\n$max_element = max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]);\necho $max_element;", "    $max = $l[0];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "  return max($l);\n\
    }\n", '}', "    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n    \
    \    if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return\
    \ $max;\n}\n", "    $max = 0;\n    foreach ($l as $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n\
    }\n\n$my_array = array(1, 2, 3);\necho max_element($my_array);\necho \"<br>\"\
    ;\n$my_array = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\necho max_element($my_array);\n\
    echo \"<br>\";", "  return head(sort($l));\n}\n", "\tif (empty($l)) {\n\t\treturn\
    \ NULL;\n\t}\n\telse {\n\t\t$max = $l[0];\n\t\tfor ($i = 1; $i < count($l); $i++)\
    \ {\n\t\t\tif ($l[$i] > $max) {\n\t\t\t\t$max = $l[$i];\n\t\t\t}\n\t\t}\n\t\t\
    return $max;\n\t}\n}\n", "    $c = null;\n    foreach ($l as $v) {\n        if\
    \ ($c == null || $v > $c) {\n            $c = $v;\n        }\n    }\n    return\
    \ $c;\n}\n", "    $acc = 0;\n    foreach ($l as $n) {\n        if ($n > $acc)\
    \ {\n            $acc = $n;\n        }\n    }\n    return $acc;\n}\n", "    $n\
    \ = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    $max = $l[0];\n\
    \    for ($i = 1; $i < $n; $i++) {\n        if ($l[$i] > $max) {\n           \
    \ $max = $l[$i];\n        }\n    }\n    return $max;\n}\n\nassert(123 == max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    if (empty($l)) return 0;\n \
    \   $max = $l[0];\n    foreach ($l as $v) {\n        if ($v > $max) $max = $v;\n\
    \    }\n    return $max;\n}\n", "  $len = count($l);\n  $max = $l[0];\n  for ($i\
    \ = 1; $i < $len; $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n  \
    \  }\n  }\n  return $max;\n}", "  if (count($l) == 0) {\n    return NULL;\n  }\n\
    \  $max = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $max)\
    \ {\n      $max = $l[$i];\n    }\n  }\n  return $max;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(max_element([1, 2, 3]) == 3);\nassert(max_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == 123);", "    $max = $l[0];\n    for ($i = 1; $i\
    \ < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "    $m = 0;\n    $i = 0;\n    while\
    \ ($i < count($l)) {\n        if ($l[$i] > $m) {\n            $m = $l[$i];\n \
    \       }\n        $i++;\n    }\n    return $m;\n}\n", "    return reduce(\n \
    \       function($a, $b) { return $a >= $b ? $a : $b; },\n        $l,\n      \
    \  head($l)\n    );\n}\n", "  if (count($l) == 0) {\n    return false;\n  }\n\
    \  $m = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $m) {\n\
    \      $m = $l[$i];\n    }\n  }\n  return $m;\n}\n", "  $m = $l[0];\n  foreach\
    \ ($l as $n) {\n    if ($n > $m) {\n      $m = $n;\n    }\n  }\n  return $m;\n\
    }\n", "  return array_reduce($l, function($v, $w) {\n    return $v > $w ? $v :\
    \ $w;\n  });\n}\n", "  return array_reduce($l, function($acc, $x) { return $x\
    \ > $acc ? $x : $acc; }, $l[0]);\n}\n", "    if (count($l) > 0) {\n        return\
    \ max($l);\n    } else {\n        return 0;\n    }\n}\n", "\t$max = $l[0];\n\t\
    for ($i = 1; $i < count($l); $i++) {\n\t\tif ($l[$i] > $max) {\n\t\t\t$max = $l[$i];\n\
    \t\t}\n\t}\n\treturn $max;\n}\n", "    // \n}\n", "    if ($l == []) {\n     \
    \   return NULL;\n    } else {\n        $head = array_shift($l);\n        $tail_max\
    \ = max_element($l);\n        if ($tail_max === NULL || $head > $tail_max) {\n\
    \            return $head;\n        } else {\n            return $tail_max;\n\
    \        }\n    }\n}\n", "    $l = array_unique($l);\n    sort($l);\n    return\
    \ $l[count($l) - 1];\n}\n", "\t// TODO\n}\n", "  return reduce(function($m, $e)\
    \ { return $m > $e ? $m : $e; }, $l);\n}\necho '<pre>';\nvar_dump(max_element([1,\
    \ 2, 3]));\nvar_dump(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\
    echo '</pre>';\n", "    $max = PHP_INT_MIN;\n    foreach ($l as $e) {\n      \
    \  if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n\
    }\n", "    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n\
    \            $max = $e;\n        }\n    }\n    return $max;\n}\n", "    return\
    \ max($l);\n}\n", "    $n = count($l);\n    $m = $l[0];\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        if ($l[$i] > $m) {\n            $m = $l[$i];\n        }\n\
    \    }\n    return $m;\n}\n", "    $max = NULL;\n    foreach ($l as $e) {\n  \
    \      if ($max == NULL || $e > $max) {\n            $max = $e;\n        }\n \
    \   }\n    return $max;\n}\n", "  return reduce_left($l, function($a, $b) {return\
    \ $a > $b ? $a : $b;});\n}\n", "    return max($l);\n}\n", "  $m = $l[0];\n  for\
    \ ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $m) $m = $l[$i];\n  }\n \
    \ return $m;\n}\n", "    $m = NULL;\n    foreach ($l as $i) {\n        if ($m\
    \ === NULL || $i > $m) {\n            $m = $i;\n        }\n    }\n    return $m;\n\
    }\n", "    // INSERT YOUR CODE HERE\n}\n", "    if (empty($l)) {\n        return\
    \ null;\n    } else {\n        $max = $l[0];\n        for ($i = 1; $i < count($l);\
    \ $i++) {\n            if ($l[$i] > $max) {\n                $max = $l[$i];\n\
    \            }\n        }\n        return $max;\n    }\n}\n", "    $max = $l[0];\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $max = $l[0];\n    for ($i = 1;\
    \ $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n\
    \        }\n    }\n    return $max;\n}\necho max_element([1, 2, 3]) . \"\\n\"\
    ;\necho max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) . \"\\n\";", "  \
    \  return count($l) ? max($l) : null;\n}\n", "\t// if list is empty return NULL\n\
    \tif (empty($l)) return NULL;\n\t// get first element as maximum\n\t$m = $l[0];\n\
    \t// iterate remaining elements\n\tfor ($i = 1; $i < count($l); $i++) {\n\t\t\
    // update maximum value if current one is bigger\n\t\tif ($l[$i] > $m) $m = $l[$i];\n\
    \t}\n\t// return maximum value\n\treturn $m;\n}", "    $max = $l[0];\n    foreach\
    \ ($l as $i) {\n        if ($i > $max) {\n            $max = $i;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = $l[0];\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = $l[0];\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = null;\n    foreach ($l as $n) {\n\
    \        if (is_null($max) || $n > $max) {\n            $max = $n;\n        }\n\
    \    }\n    return $max;\n}\n", "\t// Your code here\n}\n", "  $max = $l[0];\n\
    \  for ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max\
    \ = $l[$i];\n    }\n  }\n  return $max;\n}\n", "    $max = $l[0];\n    for ($i\
    \ = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max\
    \ = $l[$i];\n        }\n    }\n    return $max;\n}\n", "}\n", "    if (count($l)\
    \ === 0) {\n        return null;\n    }\n    $max = $l[0];\n    for ($i = 1; $i\
    \ < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "    $max = $l[0];\n    foreach ($l\
    \ as $element) {\n        if ($element > $max) {\n            $max = $element;\n\
    \        }\n    }\n    return $max;\n}\n", "    return $l[0];\n}\n", "    $max\
    \ = NULL;\n    $i = 0;\n    while ($i < count($l)) {\n        if ($l[$i] > $max)\
    \ {\n            $max = $l[$i];\n        }\n        $i = $i + 1;\n    }\n    return\
    \ $max;\n}\n", "    $max = null;\n    for ($i = 0; $i < count($l); $i++) {\n \
    \       if (is_null($max) || $l[$i] > $max) {\n            $max = $l[$i];\n  \
    \      }\n    }\n    return $max;\n}\necho max_element([1, 2, 3]) . \"\\n\";\n\
    echo max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) . \"\\n\";", "\t$max\
    \ = $l[0];\n\tfor ($i = 1; $i < count($l); $i++) {\n\t\tif ($l[$i] > $max) {\n\
    \t\t\t$max = $l[$i];\n\t\t}\n\t}\n\treturn $max;\n}\n", "  if ($l == null) return\
    \ null;\n  $first = first($l);\n  $rest = rest($l);\n  if ($rest == null) return\
    \ $first;\n  return max($first, max_element($rest));\n}\n", "  if (empty($l))\
    \ return NULL;\n  $max = $l[0];\n  foreach ($l as $v) {\n    if ($v > $max) $max\
    \ = $v;\n  }\n  return $max;\n}\n", "\t$max = 0;\n\tforeach ($l as $k) {\n\t\t\
    if ($k > $max) {\n\t\t\t$max = $k;\n\t\t}\n\t}\n\treturn $max;\n}\n", "  return\
    \ reduce('max', $l);\n}\n", "    $res = 0;\n    foreach ($l as $i) {\n       \
    \ if ($i > $res) $res = $i;\n    }\n    return $res;\n}\n", "    if (is_null($l))\
    \ {\n        return null;\n    } else {\n        $value = max_element($l->rest);\n\
    \        if ($value < $l->first) {\n            return $l->first;\n        } else\
    \ {\n            return $value;\n        }\n    }\n}\necho max_element(\n    cons(1,\n\
    \        cons(2,\n            cons(3,\n                null))));\necho max_element(\n\
    \    cons(5,\n        cons(3,\n            cons(-5,\n                cons(2,\n\
    \                    cons(-3,\n                        cons(3,\n             \
    \               cons(9,\n                                cons(0,\n           \
    \                         cons(123,\n                                        cons(1,\n\
    \                                            cons(-10,\n                     \
    \                           null))))))))))));\n", "    $max = 0;\n    foreach\
    \ ($l as $i) {\n        if ($i > $max) {\n            $max = $i;\n        }\n\
    \    }\n    return $max;\n}\n", "  $max = 0;\n  foreach ($l as $item) {\n    if\
    \ ($item > $max) {\n      $max = $item;\n    }\n  }\n  return $max;\n}\n", "}\n",
  "  if (empty($l)) {\n    return;\n  }\n  $a = array_shift($l);\n  foreach ($l as\
    \ $e) {\n    if ($e > $a) {\n      $a = $e;\n    }\n  }\n  return $a;\n}\n\n$l\
    \ = [1, 2, 3];\nprint max_element($l);\n\n$l = [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10];\nprint max_element($l);", "    $max = $l[0];\n    for ($i = 1; $i <\
    \ count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "\t$max = null;\n\tforeach ($l as $elt)\
    \ {\n\t\tif ($max === null || $elt > $max) {\n\t\t\t$max = $elt;\n\t\t}\n\t}\n\
    \treturn $max;\n}\n", "  $max = $l[0];\n  foreach ($l as $x) {\n    if ($x > $max)\
    \ {\n      $max = $x;\n    }\n  }\n  return $max;\n}\n", "  $max = 0;\n  for ($i\
    \ = 0; $i < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n\
    \    }\n  }\n  return $max;\n}\n", "    $max = 0;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = NULL;\n    foreach ($l as $e) {\n\
    \        if ($max === NULL) {\n            $max = $e;\n        } else if ($e >\
    \ $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n", " \
    \   if(empty($l)) {\n        return null;\n    }\n    $max = $l[0];\n    for($i\
    \ = 1; $i < count($l); $i++) {\n        if($l[$i] > $max) {\n            $max\
    \ = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    $max = $l[0];\n  \
    \  for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n      \
    \      $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    if ($l ==\
    \ []) {\n        return 0;\n    } else {\n        return max($l[0], max_element(array_slice($l,\
    \ 1)));\n    }\n}", "  $x = $l[0];\n  foreach ($l as $v) {\n    if ($v > $x) {\n\
    \      $x = $v;\n    }\n  }\n  return $x;\n}\n", "    $x = $l[0];\n    for ($i\
    \ = 1; $i < count($l); $i++) {\n        if ($l[$i] > $x) {\n            $x = $l[$i];\n\
    \        }\n    }\n    return $x;\n}\n", "    return array_reduce($l, function($a,\
    \ $b) {\n        return $a > $b ? $a : $b;\n    });\n}\n", "    if (sizeof($l)\
    \ == 0) {\n        return NULL;\n    } else {\n        $max = $l[0];\n       \
    \ foreach ($l as $item) {\n            if ($item > $max) {\n                $max\
    \ = $item;\n            }\n        }\n        return $max;\n    }\n}\n", "   \
    \ $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i]\
    \ > $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}",
  "    return array_reduce($l, function($a, $b) {\n        return max($a, $b);\n \
    \   });\n}", "    $m = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n    \
    \    if ($l[$i] > $m) {\n            $m = $l[$i];\n        }\n    }\n    return\
    \ $m;\n}", "    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n    \
    \    if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return\
    \ $max;\n}\n", "    $m = $l[0];\n    foreach ($l as $item) {\n        if ($item\
    \ > $m) {\n            $m = $item;\n        }\n    }\n    return $m;\n}\n", " \
    \ $max = 0;\n  foreach ($l as $element) {\n    if ($element > $max) {\n      $max\
    \ = $element;\n    }\n  }\n  return $max;\n}\n", "    return $l == array() ?\n\
    \           NULL :\n           max($l);\n}\n", "    return reduce(function($m,\
    \ $v) { return max($m, $v); }, $l);\n}\n", "  return php_reduce($l, function($p,\
    \ $c) { return $p > $c ? $p : $c; });\n}\n", "  return reduce(function($max, $i)\
    \ {\n    return $i > $max ? $i : $max;\n  }, $l);\n}\n", "}\n", "    // your code\
    \ here\n}\n", "    return max($l);\n}\n", "    $max = 0;\n    for ($i = 0; $i\
    \ < count($l); $i++) {\n        if ($l[$i] > $max)\n            $max = $l[$i];\n\
    \    }\n    return $max;\n}", "\t$mx = 0;\n\tforeach ($l as $e) {\n\t\tif ($e\
    \ > $mx) {\n\t\t\t$mx = $e;\n\t\t}\n\t}\n\treturn $mx;\n}\n", "\t$max = $l[0];\n\
    \tforeach ($l as $key => $value) {\n\t\tif ($max < $value) {\n\t\t\t$max = $value;\n\
    \t\t}\n\t}\n\treturn $max;\n}\n", "    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $max = $l[0];\n    foreach ($l as $x) {\n        if ($x > $max) {\n\
    \            $max = $x;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ NULL;\n    foreach ($l as $k => $v) {\n        if ($max === NULL) {\n      \
    \      $max = $v;\n        } else if ($v > $max) {\n            $max = $v;\n \
    \       }\n    }\n    return $max;\n}\n", "  $max = $l[0];\n  for ($i = 1; $i\
    \ < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n    }\n\
    \  }\n  return $max;\n}\n", "    $max = $l[0];\n    foreach ($l as $i) {\n   \
    \     if ($i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n\
    }\n", "    $max = 0;\n    foreach ($l as $key => $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n\
    }\n", "  if (is_null($l)) {\n    return -1000;\n  }\n  else {\n    return max($l->first,\
    \ max_element($l->rest));\n  }\n}", "    return array_reduce($l, function($res,\
    \ $e) {\n        return ($res === NULL) ? $e : max($res, $e);\n    });\n}\n",
  "\t$max = $l[0];\n\tfor ($i = 1; $i < count($l); $i++) {\n\t\tif ($l[$i] > $max)\
    \ {\n\t\t\t$max = $l[$i];\n\t\t}\n\t}\n\treturn $max;\n}\n", "  $max = 0;\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n\
    \    }\n  }\n  return $max;\n}\n", "    if(count($l) == 0) {\n        return NULL;\n\
    \    }\n    else {\n        $m = 0;\n        foreach($l as $i) {\n           \
    \ if($i > $m) {\n                $m = $i;\n            }\n        }\n        return\
    \ $m;\n    }\n}\n\n$arr1 = array(1, 2, 3);\n$arr2 = array(5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10);\n$res1 = max_element($arr1);\n$res2 = max_element($arr2);\n\
    print_r($res1);\nprint_r($res2);", "    $m = $l[0];\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $m) $m = $l[$i];\n    }\n    return $m;\n}\n",
  "  $m = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n    if ($l[$i] > $m) {\n\
    \      $m = $l[$i];\n    }\n  }\n  return $m;\n}\n", "    return null;\n}", " \
    \ if (count($l) === 0) {\n    return null;\n  } else if (count($l) === 1) {\n\
    \    return $l[0];\n  }\n  $m = max_element(array_slice($l, 1));\n  return $l[0]\
    \ > $m ? $l[0] : $m;\n}\n", "}\n", "    $max = $l[0];\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n\
    \    }\n    return $max;\n}\n", "\t// Your code goes here.\n}\n", "    if ($l\
    \ == NULL) {\n        return NULL;\n    }\n    $max = $l->value;\n    $rest =\
    \ $l->next;\n    while ($rest != NULL) {\n        if ($rest->value > $max) {\n\
    \            $max = $rest->value;\n        }\n        $rest = $rest->next;\n \
    \   }\n    return $max;\n}\n", "    if (count($l) == 0) {\n        return NULL;\n\
    \    }\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if\
    \ ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return\
    \ $max;\n}\n", "  $max = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n    if\
    \ ($l[$i] > $max) {\n      $max = $l[$i];\n    }\n  }\n  return $max;\n}\n\n$list\
    \ = array(1, 2, 3);\necho max_element($list) . \"\\n\";\n$list = array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10);\necho max_element($list) . \"\\n\";", "    $max\
    \ = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n            $max\
    \ = $e;\n        }\n    }\n    return $max;\n}\n", "    return foldl(function($x,\
    \ $y) { return max($x, $y); }, $l[0], $l);\n}\n", "\treturn max($l);\n}\n", " \
    \ if (count($l) == 0) {\n    return null;\n  } else {\n    $max = $l[0];\n   \
    \ foreach ($l as $x) {\n      if ($x > $max) {\n        $max = $x;\n      }\n\
    \    }\n    return $max;\n  }\n}\n", "    if (count($l) == 0) {\n        throw\
    \ new Exception(\"List should not be empty\");\n    }\n    $max = $l[0];\n   \
    \ for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n       \
    \     $max = $l[$i];\n        }\n    }\n    return $max;\n}", "    if (count($l)\
    \ == 0) {\n        return null;\n    }\n    else {\n        $max = $l[0];\n  \
    \      for ($i = 1; $i < count($l); $i++) {\n            if ($l[$i] > $max) {\n\
    \                $max = $l[$i];\n            }\n        }\n        return $max;\n\
    \    }\n}\n", "    if(count($l) === 0) {\n        return NULL;\n    }\n    $result\
    \ = $l[0];\n    for($i = 1; $i < count($l); $i++) {\n        if($l[$i] > $result)\
    \ {\n            $result = $l[$i];\n        }\n    }\n    return $result;\n}",
  "    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n       \
    \     $max = $e;\n        }\n    }\n    return $max;\n}\n", "\treturn $l;\n}\n",
  "  return foldr(function($a, $b) {\n    return $a > $b ? $a : $b;\n  }, 0, $l);\n\
    }\n", "    if ($l == array()) {\n        return 0;\n    } else {\n        $max\
    \ = $l[0];\n        for ($i = 1; $i < count($l); $i++) {\n            if ($l[$i]\
    \ > $max) {\n                $max = $l[$i];\n            }\n        }\n      \
    \  return $max;\n    }\n}\n", "    return $l[0];\n}\n", "    return max($l);\n\
    }\n", "    if (count($l) == 0) {\n        return 0;\n    } else {\n        $m\
    \ = $l[0];\n        foreach ($l as $i) {\n            if ($i > $m) {\n       \
    \         $m = $i;\n            }\n        }\n        return $m;\n    }\n}\n",
  "  if (count($l) == 0) {\n    return 0;\n  }\n  $max = $l[0];\n  foreach ($l as\
    \ $item) {\n    if ($item > $max) {\n      $max = $item;\n    }\n  }\n  return\
    \ $max;\n}\n$array_max = [1, 2, 3];\necho max_element($array_max);\n\n$array_max2\
    \ = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\necho max_element($array_max2);",
  "  $h = array_pop($l);\n  foreach ($l as $i) {\n    if ($i > $h) $h = $i;\n  }\n\
    \  return $h;\n}\n", "  $r = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n\
    \    if ($l[$i] > $r) {\n      $r = $l[$i];\n    }\n  }\n  return $r;\n}\n", " \
    \ $max = $l[0];\n  foreach ($l as $v) {\n    if ($v > $max) {\n      $max = $v;\n\
    \    }\n  }\n  return $max;\n}\n$l = array(1, 2, 3);\necho max_element($l) . \"\
    \\n\";\n$l = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\necho max_element($l)\
    \ . \"\\n\";\n", "    if ($l == null) {\n        return null;\n    }\n    $max\
    \ = max_element($l->cdr);\n    if ($max == null || $l->car > $max) {\n       \
    \ return $l->car;\n    }\n    return $max;\n}", "    $max = $l[0];\n    for ($i\
    \ = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max\
    \ = $l[$i];\n        }\n    }\n    return $max;\n}", "    $max = $l[0];\n    for\
    \ ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n           \
    \ $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "\t$e = $l[0];\n\t\
    foreach ($l as $c) {\n\t\tif ($c > $e) {\n\t\t\t$e = $c;\n\t\t}\n\t}\n\treturn\
    \ $e;\n}\n", "    return $l[count($l) - 1];\n}\n", "\t$max = $l[0];\n\t$length\
    \ = count($l);\n\tfor ($i = 1; $i < $length; $i++) {\n\t\tif ($l[$i] > $max) {\n\
    \t\t\t$max = $l[$i];\n\t\t}\n\t}\n\treturn $max;\n}\n", "    // TODO: Implement\
    \ this function.\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n\
    \        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n\
    \    return $max;\n}\n", "    if (empty($l)) return null;\n    $max = $l[0];\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "\tif (empty($l)) {\n\t\treturn null;\n\
    \t}\n\t$max = $l[0];\n\tforeach ($l as $n) {\n\t\tif ($n > $max) {\n\t\t\t$max\
    \ = $n;\n\t\t}\n\t}\n\treturn $max;\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return NULL;\n    }\n    $max = $l[0];\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n    \
    \    }\n    }\n    return $max;\n}\n", "  return reduce(function($a, $b) {\n \
    \   return $a > $b ? $a : $b;\n  }, $l);\n}\n", "    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n    $max = PHP_INT_MIN;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n\
    \    }\n    print($max);\n}", "    if (empty($l)) {\n        return NULL;\n  \
    \  } else if (count($l) == 1) {\n        return $l[0];\n    } else {\n       \
    \ $max = max_element(array_slice($l, 1));\n        return $l[0] > $max ? $l[0]\
    \ : $max;\n    }\n}\n", "  $x = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n\
    \    if ($l[$i] > $x) {\n      $x = $l[$i];\n    }\n  }\n  return $x;\n}\n", " \
    \ $n = count($l);\n  if ($n == 0) {\n    return null;\n  }\n  $r = $l[0];\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    if ($l[$i] > $r) {\n      $r = $l[$i];\n    }\n\
    \  }\n  return $r;\n}\n", "  if (empty($l)) {\n    throw new Exception('empty\
    \ list');\n  }\n  $max = $l[0];\n  for ($i = 1; $i < count($l); $i++) {\n    if\
    \ ($l[$i] > $max) {\n      $max = $l[$i];\n    }\n  }\n  return $max;\n}\n", " \
    \   $len = count($l);\n    $max = $l[0];\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n\
    \    return $max;\n}\n", "    if ($l == array()) {\n        return null;\n   \
    \ } else if (count($l) == 1) {\n        return $l[0];\n    } else {\n        $maxRest\
    \ = max_element(array_slice($l, 1));\n        if ($l[0] > $maxRest) {\n      \
    \      return $l[0];\n        } else {\n            return $maxRest;\n       \
    \ }\n    }\n}\n", "    if (count($l) == 0) {\n        return NULL;\n    }\n  \
    \  $max = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n       \
    \     $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max_value =\
    \ NULL;\n    foreach ($l as $value) {\n        if (!is_null($max_value)) {\n \
    \           if ($value > $max_value) {\n                $max_value = $value;\n\
    \            }\n        } else {\n            $max_value = $value;\n        }\n\
    \    }\n    return $max_value;\n}\n", "    $val = $l[0];\n    foreach ($l as $e)\
    \ {\n        if ($e > $val) {\n            $val = $e;\n        }\n    }\n    return\
    \ $val;\n}\n", "}\n", "    $max_element = $l[0];\n    for ($i = 1; $i < count($l);\
    \ $i++) {\n        if ($l[$i] > $max_element) {\n            $max_element = $l[$i];\n\
    \        }\n    }\n    return $max_element;\n}", "    $max = $l[0];\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) $max = $e;\n    }\n    return $max;\n}\n",
  "    $max = $l[0];\n    foreach ($l as $v) {\n        if ($v > $max) {\n       \
    \     $max = $v;\n        }\n    }\n    return $max;\n}", "    if (count($l) ==\
    \ 0) {\n        return null;\n    }\n    $m = $l[0];\n    foreach ($l as $e) {\n\
    \        if ($e > $m) {\n            $m = $e;\n        }\n    }\n    return $m;\n\
    }\n", "    $max = 0;\n    foreach ($l as $el) {\n        if ($el > $max) {\n \
    \           $max = $el;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max)\
    \ {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", " \
    \   $m = PHP_INT_MIN;\n    foreach ($l as $e) {\n        if ($e > $m) {\n    \
    \        $m = $e;\n        }\n    }\n    return $m;\n}\n", "    $len = count($l);\n\
    \    $max = $l[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($l[$i] >\
    \ $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}\n",
  "    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i]\
    \ > $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n\
    }\n$a = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\necho max_element($a);", "  if\
    \ (sizeof($l) == 0) {\n    return null;\n  } else if (sizeof($l) == 1) {\n   \
    \ return $l[0];\n  } else {\n    $m = max_element(array_slice($l, 1));\n    return\
    \ $l[0] > $m ? $l[0] : $m;\n  }\n}\n\n$l = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10];\necho \"Input: \" . implode(\", \", $l) . \"\\n\";\necho \"Output: \"\
    \ . max_element($l) . \"\\n\";", "\treturn max($l);\n}\n", "  $max = 0;\n  foreach\
    \ ($l as $e) {\n    if ($e > $max) {\n      $max = $e;\n    }\n  }\n  return $max;\n\
    }\n", "    if (sizeof($l) > 0) {\n        $max = $l[0];\n        for ($i = 1;\
    \ $i < sizeof($l); $i++) {\n            if ($l[$i] > $max) {\n               \
    \ $max = $l[$i];\n            }\n        }\n        return $max;\n    } else {\n\
    \        return null;\n    }\n}\n", "    if (empty($l)) {\n        return false;\n\
    \    }\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if\
    \ ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return\
    \ $max;\n}\n", "    $max = 0;\n    foreach ($l as $item) {\n        if ($item\
    \ > $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n}\n\
    echo max_element([1, 2, 3]);\necho max_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]);", "    if(count($l) === 0) {\n        return null;\n    }\n    $max\
    \ = $l[0];\n    foreach($l as $v) {\n        if($v > $max) {\n            $max\
    \ = $v;\n        }\n    }\n    return $max;\n}", "    $max = $l[0];\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "  $max = null;\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    if ($l[$i] > $max) {\n      $max = $l[$i];\n    }\n  }\n  return\
    \ $max;\n}\necho max_element([1, 2, 3]) . \"\\n\";\necho max_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10]) . \"\\n\";", "    $max = $l[0];\n    for ($i =\
    \ 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max =\
    \ $l[$i];\n        }\n    }\n    return $max;\n}\necho max_element([1, 2, 3]);\n\
    echo max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]);\n", "\t$max = $l[0];\n\
    \tfor ($i = 1; $i < count($l); $i++) {\n\t\tif ($l[$i] > $max) {\n\t\t\t$max =\
    \ $l[$i];\n\t\t}\n\t}\n\treturn $max;\n}\n", "    $max = $l[0];\n    for ($i =\
    \ 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max =\
    \ $l[$i];\n        }\n    }\n    return $max;\n}\n", "  return max($l);\n}\n",
  "  // This uses PHP's native max() function, but could be written from scratch.\n\
    \  return max($l);\n}\n", "    if (count($l) == 0) {\n        return NULL;\n \
    \   }\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if\
    \ ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return\
    \ $max;\n}", "    $m = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n    \
    \    if ($l[$i] > $m) $m = $l[$i];\n    }\n    return $m;\n}\n", "    $max = $l[0];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    // fill\
    \ in the missing code\n}\nprint_r(max_element([1, 2, 3]));\nprint_r(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  $acc = $l[0];\n  for ($i = 1;\
    \ $i < count($l); $i++) {\n    if ($l[$i] > $acc) {\n      $acc = $l[$i];\n  \
    \  }\n  }\n  return $acc;\n}\n", "    $m = -999999;\n    foreach ($l as $el) {\n\
    \        if ($el > $m) {\n            $m = $el;\n        }\n    }\n    return\
    \ $m;\n}", "    // START WRITING YOUR FUNCTION BODY HERE\n    $max = $l[0];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n    // END OF FUNCTION\
    \ BODY\n}\n", "  $max = 0;\n  foreach ($l as $x) {\n    if ($x > $max) {\n   \
    \   $max = $x;\n    }\n  }\n  return $max;\n}\n", "\t$x = $l[0];\n\tfor ($i =\
    \ 1; $i < count($l); $i++) {\n\t\tif ($l[$i] > $x) {\n\t\t\t$x = $l[$i];\n\t\t\
    }\n\t}\n\treturn $x;\n}\n\n$l = array(1, 2, 3);\nassert_options(ASSERT_BAIL, 1);\n\
    assert(max_element($l) == 3);\n$l = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\
    assert(max_element($l) == 123);\nprint(\"OK\\n\");", "    $max = $l[0];\n    for\
    \ ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n           \
    \ $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    $max = $l[0];\n\
    \    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n    \
    \        $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n\
    \            $max = $l[$i];\n        }\n    }\n    return $max;\n}\necho max_element([1,\
    \ 2, 3]);\necho \"\\n\";\necho max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
