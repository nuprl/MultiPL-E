name: HumanEval_139_special_factorial
language: php
prompt: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunction special_factorial($n) {\n"
tests: "function candidate(...$args) {\n    return special_factorial(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $result = $n;\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result\
    \ *= $i;\n    }\n    return $result;\n}", "  // This is your job. :)\n  $f = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $f *= $i;\n  }\n  return $f;\n}\n\necho\
    \ special_factorial(4);", "  $f=1;\n  for($i=$n;$i>0;$i--){\n    $f*=$i;\n  }\n\
    \  for($i=$n-1;$i>0;$i--){\n    $f*=$i;\n  }\n  for($i=$n-2;$i>0;$i--){\n    $f*=$i;\n\
    \  }\n  return $f;\n}\n", "    if ($n == 0) return 1;\n    $ret = 1;\n    while\
    \ ($n > 0) {\n        $ret *= factorial($n);\n        $n--;\n    }\n    return\
    \ $ret;\n}\n", "  if($n > 0) {\n    $fact = 1;\n    for($i = $n; $i > 0; $i--)\
    \ {\n      $fact *= $i;\n    }\n    for($i = $n - 1; $i > 0; $i--) {\n      $fact\
    \ *= $i;\n    }\n    for($i = $n - 2; $i > 0; $i--) {\n      $fact *= $i;\n  \
    \  }\n    return $fact;\n  }\n  return 0;\n}", "  if($n == 0) {\n    return 1;\n\
    \  }\n  $output = 1;\n  for($i = $n; $i > 0; $i--) {\n    $output *= $i;\n  }\n\
    \  return $output;\n}\n", "    if (is_int($n) and $n > 0) {\n        $numbers\
    \ = range(1, $n);\n        $factorials = array_map('factorial', $numbers);\n \
    \       return array_product($factorials);\n    }\n    return 0;\n}\n", "    $acum\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $acum *= factorial($i);\n\
    \    }\n    return $acum;\n}\n", "    $result = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $result *= factorial($i);\n    }\n    return $result;\n}\n",
  "    // Initialize the product to 1.\n    $product = 1;\n    // Write a for loop\
    \ that goes from n to 1.\n    for ($i = $n; $i > 0; $i--) {\n        // Update\
    \ the product by multiplying it by i.\n        $product *= $i;\n    }\n    //\
    \ Return the product.\n    return $product;\n}", "  $result = 1;\n  while ($n\
    \ >= 1) {\n    $result *= $n;\n    $n--;\n  }\n  return $result;\n}\n", "  $res\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $res *= $i;\n  }\n  for ($i = $n\
    \ - 1; $i > 0; $i--) {\n    $res *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--)\
    \ {\n    $res *= $i;\n  }\n  return $res;\n}", "    $factorial = function($number)\
    \ use (&$factorial) {\n        if ($number == 0) {\n            return 1;\n  \
    \      }\n        return $number * $factorial($number - 1);\n    };\n    return\
    \ $factorial($n) ** $n;\n}\n", "\t$sum = 1;\n\tfor ($i = 1; $i <= $n; $i++) {\n\
    \t\t$sum *= $i;\n\t}\n\treturn $sum;\n}\n", "  if ($n > 0) {\n    $factorial =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n      $factorial *= $i;\n    }\n    return\
    \ $factorial * special_factorial($n - 1);\n  } else {\n    return 1;\n  }\n}\n",
  "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n \
    \   }\n    return $result;\n}\n\nprint special_factorial(4);", "    $result =\
    \ $n;\n    while ($n-- > 1) {\n        $result *= $n;\n    }\n    return $result;\n\
    }\n\necho special_factorial(4);", "    $fact = 1;\n    while ($n > 0) {\n    \
    \    $fact *= $n--;\n    }\n    return $fact;\n}\n", "  $value = 1;\n  while ($n\
    \ > 0) {\n    $value *= $n;\n    $n--;\n  }\n  return $value;\n}\n\nassert(special_factorial(4)\
    \ == 288);\nassert(special_factorial(5) == 34560);", "    $specialFactorial =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $specialFactorial *= getFactorial($i);\n\
    \    }\n    return $specialFactorial;\n}\n", "\t$res = 1;\n\tfor ($i = 1; $i <=\
    \ $n; $i++) {\n\t\t$res *= $i;\n\t}\n\tfor ($i = $n-1; $i > 0; $i--) {\n\t\t$res\
    \ *= $i;\n\t}\n\treturn $res;\n}\n\necho special_factorial(4) . \"\\n\";", " \
    \   if ($n <= 0) return 1;\n    return $n * special_factorial($n - 1);\n}\n",
  "  return $n ? $n * special_factorial($n - 1) : 1;\n}\n", "    $solution = 1;\n\
    \    for ($i = 1; $i <= $n; $i++){\n        $solution *= $i;\n    }\n    for ($i\
    \ = 1; $i <= $n-1; $i++){\n        $solution *= $i;\n    }\n    for ($i = 1; $i\
    \ <= $n-2; $i++){\n        $solution *= $i;\n    }\n    return $solution;\n}\n\
    \necho special_factorial(4) . PHP_EOL;", "  \n}", "  if ($n == 0 || $n == 1) {\n\
    \    return 1;\n  }\n  $sum = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $sum *=\
    \ $i;\n  }\n  return $sum;\n}\n", "  $factorail = function($n) use (&$factorail)\
    \ {\n    if ($n == 1) {\n      return 1;\n    } else {\n      return $n * $factorail($n\
    \ - 1);\n    }\n  };\n  $result = 1;\n  while ($n > 0) {\n    $result *= $factorail($n);\n\
    \    $n--;\n  }\n  return $result;\n}\necho special_factorial(4);", "  $factorial\
    \ = function($n) use (&$factorial) {\n    if ($n === 0) {\n      return 1;\n \
    \   } else {\n      return $n * $factorial($n - 1);\n    }\n  };\n\n  $acc = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $acc *= $factorial($i);\n  }\n\n  return\
    \ $acc;\n}\n\necho special_factorial(4);", "\n}\n\necho special_factorial(4);\
    \ // should print 288\necho special_factorial(5); // should print 34560\necho\
    \ special_factorial(6); // should print 5913920", "  if($n <= 0) return 0;\n \
    \ return factorial($n) * special_factorial($n - 1);\n}\n", "  // your code here\n\
    }", "  $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n--;\n\
    \  }\n  return $factorial;\n}\n\nprint special_factorial(4) . \"\\n\";", "   \
    \ if ($n <= 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i =\
    \ $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial\
    \ * special_factorial($n - 1);\n}\n\necho special_factorial(4);", "  if($n < 0){\n\
    \    return null;\n  }\n\n  $result = 1;\n  for($i=1; $i<=$n; $i++){\n    $result\
    \ *= $i;\n  }\n\n  for($i=$n-1; $i>=1; $i--){\n    $result *= $i;\n  }\n\n  return\
    \ $result;\n}", "    $fac = 1;\n    for ($i=1; $i <= $n; $i++) {\n        $fac\
    \ *= $i;\n    }\n    for ($i=1; $i < $n; $i++) {\n        $fac *= $i;\n    }\n\
    \    return $fac;\n}\necho special_factorial(4) . PHP_EOL;", "\t$total = 1;\n\t\
    for ($i = $n; $i > 0; $i--) {\n\t\t$total *= $i;\n\t}\n\treturn $total;\n}", " \
    \ $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n--;\n  }\n  return\
    \ $factorial;\n}", "    // Write your code here...\n}\necho \"special_factorial(1)\
    \ = \" . special_factorial(1) . \"\\n\";\necho \"special_factorial(2) = \" . special_factorial(2)\
    \ . \"\\n\";\necho \"special_factorial(3) = \" . special_factorial(3) . \"\\n\"\
    ;\necho \"special_factorial(4) = \" . special_factorial(4) . \"\\n\";\necho \"\
    special_factorial(5) = \" . special_factorial(5) . \"\\n\";\necho \"special_factorial(7)\
    \ = \" . special_factorial(7) . \"\\n\";\necho \"special_factorial(9) = \" . special_factorial(9)\
    \ . \"\\n\";\necho \"special_factorial(12) = \" . special_factorial(12) . \"\\\
    n\";", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n\
    \  }\n  for ($i = $n-1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i =\
    \ $n-2; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n", " \
    \ if ($n <= 0) return 1;\n  return factorial($n) * special_factorial($n - 1);\n\
    }\n", "  if($n == 0) {\n    return 1;\n  }\n  $sum = 1;\n  for($i = $n; $i > 0;\
    \ $i--) {\n    $sum *= $i;\n  }\n  return $sum * special_factorial($n - 1);\n\
    }\necho special_factorial(4) . PHP_EOL;", "  $result = [];\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $result[] = $i;\n  }\n  return array_product($result);\n\
    }\n", "  // TODO: implement the function\n}", "    $result = 1;\n    for ($i =\
    \ $n; $i > 0; $i--) {\n        $result *= factorial($i);\n    }\n    return $result;\n\
    }\n", "    if ($n == 0) {\n        return 1;\n    } else {\n        return $n\
    \ * special_factorial($n - 1);\n    }\n}\n", "\t$total = 1;\n\t$factorial = 1;\n\
    \tfor ($i = $n; $i > 0; $i--) {\n\t\t$factorial *= $i;\n\t\t$total *= $factorial;\n\
    \t}\n\treturn $total;\n}", "    // Your code here\n}\n\necho special_factorial(3);",
  "    $i = $n;\n    $factorial = $n;\n    $finalFactorial = $n;\n    while ($i >\
    \ 1) {\n        $factorial = $factorial * ($i - 1);\n        $finalFactorial =\
    \ $finalFactorial * $factorial;\n        $i--;\n    }\n    return $finalFactorial;\n\
    }\necho special_factorial(4);", "    $result = 1;\n    for ($i = $n; $i > 0; $i--)\
    \ {\n        $result *= factorial($i);\n    }\n    return $result;\n}", "  $factorial\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n\necho special_factorial(4);", "    if ($n === 0) return 1;\n\
    \    return brazilian_factorial($n);\n}\n", "  $factorial = 1;\n  while ($n >\
    \ 0) {\n    $factorial *= factorial($n);\n    $n--;\n  }\n  return $factorial;\n\
    }\n", "  $fac = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $fac *= $i;\n  }\n  for\
    \ ($i=1; $i < $n; $i++) {\n    $fac *= $i;\n  }\n  return $fac;\n}\n", "    $fact\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    return\
    \ $fact;\n}\n\necho special_factorial(4);", "    $total = 1;\n    while ($n >\
    \ 0) {\n        $total *= $n;\n        $n--;\n    }\n    return $total;\n}\n",
  "    if ($n <= 0) {\n        throw new InvalidArgumentException(\"$n must be greater\
    \ than 0\");\n    }\n    $prod = 1;\n    for ($i = 1; $i <= $n; $i++) {\n    \
    \    $prod *= factorial($i);\n    }\n    return $prod;\n}", "  $total = 1;\n \
    \ for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  for ($i = $n - 1; $i\
    \ > 0; $i--) {\n    $total *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n\
    \    $total *= $i;\n  }\n  return $total;\n}\n\necho special_factorial(1) . \"\
    \\n\";\necho special_factorial(2) . \"\\n\";\necho special_factorial(3) . \"\\\
    n\";\necho special_factorial(4) . \"\\n\";\necho special_factorial(6) . \"\\n\"\
    ;\necho special_factorial(10) . \"\\n\";", "  $f = 1;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $f *= $i;\n  }\n  return $f;\n}\n", "  $f = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $f *= $i;\n  }\n  return $f * special_factorial($n -\
    \ 1);\n}\n", "    $prod = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $prod\
    \ *= factorial($i);\n    }\n    return $prod;\n}\n", "    if ($n == 0) {\n   \
    \     return 1;\n    }\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $result *= factorial($i);\n    }\n    return $result;\n}", "  $total\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total *= $i;\n  }\n  return $total;\n\
    }\n\n$n = 4;\necho special_factorial($n);", "    $total = 1;\n    for ($i = $n;\
    \ $i > 0; $i--) {\n        $total *= factorial($i);\n    }\n    return $total;\n\
    }\n", "  $factorial = function($n) use (&$factorial) {\n    if ($n == 0) {\n \
    \     return 1;\n    } else {\n      return $n * $factorial($n - 1);\n    }\n\
    \  };\n  $result = 1;\n  while ($n >= 1) {\n    $result *= $factorial($n);\n \
    \   $n--;\n  }\n  return $result;\n}\n\necho special_factorial(4) . PHP_EOL;",
  "    $n = (int)$n;\n    if ($n < 0) {\n        return 0;\n    }\n    $f = 1;\n \
    \   for ($i = $n; $i > 0; $i--) {\n        $f *= $i;\n    }\n    return $f;\n\
    }\n\nclass test {\n    function __construct($a, $e) {\n        $this->a = $a;\n\
    \        $this->e = $e;\n    }\n}\n\n$tests = [\n    new test(4, 288),\n    new\
    \ test(5, 34560),\n    new test(6, 112320),\n    new test(7, 4275200),\n    new\
    \ test(8, 229346560),\n    new test(9, 169869312000),\n    new test(10, 20143449408000),\n\
    \    new test(11, 2998186168614400),\n    new test(12, 617583542077699200),\n\
    \    new test(13, 1807856255212088320000),\n    new test(14, 666993726283744358400000),\n\
    \    new test(15, 3405165749600032061868800000),\n    new test(16, 23574716098655565574294732800000),\n\
    \    new test(17, 2375594899481677615444430206976000000),\n    new test(18, 3335944516104656711185353657651200000000),\n\
    \    new test(19, 6248216176313347956239898984224561459200000000),\n    new test(20,\
    \ 165664502781198841757534988145864688218777600000000),\n    new test(21, 6428368065975605939109638583332563649769195545600000000),\n\
    \    new test(22, 3324988809415894779797695774626133697383412986060800000000),\n\
    \    new test(23, 23464259328338001419041855748849409630017009025226342400000000),\n",
  "  $product = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $product *= factorial($i);\n\
    \  }\n  return $product;\n}\n", "  $array=[];\n  $result=1;\n  for($i=$n;$i>0;$i--){\n\
    \    $result*=$i;\n    $array[]=$result;\n  }\n  return array_product($array);\n\
    }\n\nvar_dump(special_factorial(4));", "  $result = 1;\n  for ($i = $n; $i > 0;\
    \ $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n    $result *= $i;\n  }\n\
    \  return $result;\n}", "  $array = [];\n  for ($i = $n; $i > 0; $i--) {\n   \
    \ $array[] = $i;\n  }\n  $factorial = array_product($array);\n  return $factorial;\n\
    }\nprint special_factorial(4);\nprint \"\\n\";\nprint special_factorial(5);\n\
    print \"\\n\";\nprint special_factorial(1);\nprint \"\\n\";\nprint special_factorial(0);\n\
    print \"\\n\";\nprint special_factorial(3);\nprint \"\\n\";\nprint special_factorial(2);\n\
    print \"\\n\";\nprint special_factorial(6);\nprint \"\\n\";\nprint special_factorial(7);\n\
    print \"\\n\";\nprint special_factorial(8);\nprint \"\\n\";", "  $factorial =\
    \ 1;\n  $aux_n = $n;\n  $i = 1;\n  while ($i <= $n) {\n    $factorial *= $aux_n;\n\
    \    $aux_n--;\n    $i++;\n  }\n  $i = 1;\n  while ($i < $n) {\n    $factorial\
    \ *= $i;\n    $i++;\n  }\n  return $factorial;\n}\necho special_factorial(6);\n\
    \ ?>", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "    // CODE HERE\n}\n", "  $factorials = [];\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $factorials[] = $i;\n  }\n  $factorial =\
    \ array_product($factorials);\n  return $factorial;\n}", "    $res = 1;\n    for\
    \ ($i=1; $i <= $n; $i++) {\n        $res *= $i;\n    }\n    for ($i=$n-1; $i >\
    \ 0; $i--) {\n        $res *= $i;\n    }\n    return $res;\n}", "    $fac = 1;\n\
    \    for ($i=1; $i<=$n; $i++) {\n        $fac *= $i;\n    }\n    return $fac;\n\
    }", "  $total = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $total *= $i;\n  }\n\
    \  return $total;\n}\n\necho special_factorial(4);", "  if ($n > 0) {\n    $total\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n      $total *= factorial($i);\n  \
    \  }\n    return $total;\n  }\n}\n", "  $counter = $n;\n  $result = 1;\n  while\
    \ ($counter > 0) {\n    $result *= $counter;\n    $counter--;\n  }\n  while ($n\
    \ > 1) {\n    $result *= $n - 1;\n    $n--;\n  }\n  return $result;\n}\n", " \
    \   $number = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $number *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $number *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $number *= $i;\n    }\n    return\
    \ $number;\n}\n", '  // return $n * ($n - 1) * ($n - 2) * ($n - 3) * ($n - 4)
    * ($n - 5) * ($n - 6) * ($n - 7) * ($n - 8) * ($n - 9) * ($n - 10) * ($n - 11)
    * ($n - 12) * ($n - 13) * ($n - 14) * ($n - 15) * ($n - 16) * ($n - 17) * ($n
    - 18) * ($n - 19) * ($n - 20) * ($n - 21) * ($n - 22) * ($n - 23) * ($n - 24)
    * ($n - 25) * ($n - 26) * ($n - 27) * ($n - 28) * ($n - 29) * ($n - 30) * ($n
    - 31) * ($n - 32) * ($n - 33) * ($n - 34) * ($n - 35) * ($n - 36) * ($n - 37)
    * ($n - 38) * ($n - 39) * ($n - 40) * ($n - 41) * ($n - 42) * ($n - 43) * ($n
    - 44) * ($n - 45) * ($n - 46) * ($n - 47) * ($n - 48) * ($n - 49) * ($n - 50)
    * ($n - 51) * ($n - 52) * ($n - 53) * ($n - 54) * ($n - 55) * ($n - 56) * ($n
    - 57) * ($n - 58) * ($n - 59) * ($n - 60) * ($n - 61) * ($n - 62) * ($n - 63)
    * ($n - 64) * ($n - 65) * ($n - 66) * ($n - 67) * ($n - 68) * ($n - 69) * ($n
    - 70) * ($n - 71) * ($n - 72) * ($n - 73) * ($n - 74) * ($n - 75) * ($n - 76)
    * ($n - 77) * ($n - 78) * ($n - 79) * ($n - 80) * ($n - 81) * ($n - 82) * ($n
    - 83) * ($n - 84) * ($', "  // Write your code here\n  $specialFactorial = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $specialFactorial *= factorial($i);\n  }\n\
    \  return $specialFactorial;\n}\n", "  $result = 1;\n  while ($n > 0) {\n    $result\
    \ *= factorial($n);\n    $n--;\n  }\n  return $result;\n}\n", "    $val = $n;\n\
    \    for ($i = $n - 1; $i > 0; $i--) {\n        $val *= $i;\n    }\n    return\
    \ $val;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial\
    \ *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  if ($n == 0) return 1;\n  return factorial($n)*special_factorial($n-1);\n\
    }\n", "    // YOUR CODE HERE\n    if ($n == 0) {\n        return 1;\n    } else\
    \ {\n        $result = $n;\n        for ($i = $n - 1; $i > 0; $i--) {\n      \
    \      $result *= $i;\n        }\n        return $result;\n    }\n}", "    if\
    \ ($n <= 0) {\n        return 0;\n    }\n    $result = 1;\n    for ($i = $n; $i\
    \ > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\n", "  $fact\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $fact *= $i;\n  }\n  return $fact;\n\
    }\necho special_factorial(6);", "  $total = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $total *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n    $total *=\
    \ $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n    $total *= $i;\n  }\n  return\
    \ $total;\n}\necho special_factorial(4);", "  $output = 1;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $output *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n\
    \    $output *= $i;\n  }\n  return $output;\n}\n", "  // Your code here\n}", "}\n",
  "  $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  $x = 1;\n  for ($i = $n; $i > 0; $i--) {\n \
    \   $x *= $i;\n  }\n  return $x;\n}\n\n$random_number = rand(1, 10);\necho \"\
    Random number is $random_number\\n\";\necho \"Factorial is: \" . special_factorial($random_number)\
    \ . \"\\n\";", "  $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result\
    \ *= factorial($i);\n  }\n  return $result;\n}\n", "\t$total = 1;\n\twhile($n\
    \ > 0) {\n\t\t$total *= factorial($n);\n\t\t$n--;\n\t}\n\treturn $total;\n}\n",
  "    $total = $n;\n    $x = $n;\n    for ($i=1; $i<$n; $i++) {\n        $x--;\n\
    \        $total = $total * $x;\n    }\n    return $total;\n}", "\n}\n\n$spefical_factorial\
    \ = special_factorial(4);\necho $spefical_factorial;", "    $result = $n;\n  \
    \  for ($i = $n-1; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\necho special_factorial(4);", "\n}\n", "  $factorial = 1;\n  $count\
    \ = 1;\n  for ($i=1; $i<=$n; $i++) {\n    $factorial *= $i;\n    $count *= $factorial;\n\
    \  }\n  return $count;\n}", "\t// Enter code here\n}", "    if ($n <= 0) {\n \
    \       return 1;\n    }\n    $result = 1;\n    while ($n > 0) {\n        $result\
    \ *= factorial($n);\n        $n--;\n    }\n    return $result;\n}\n", "  if ($n\
    \ < 0) {\n    return false;\n  }\n\n  if ($n == 0) {\n    return 1;\n  }\n\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \n  return $factorial;\n}\n\necho special_factorial(4) . \"\\n\";", "    // Write\
    \ your code here:\n}", "    $result = 1;\n    $factorial = 1;\n    for ($i = $n;\
    \ $i > 0; $i--) {\n        $factorial *= $i;\n        $result *= $factorial;\n\
    \    }\n    return $result;\n}", "  $result = $n;\n  for ($i = $n-1; $i > 0; $i--)\
    \ {\n    $result *= $i;\n  }\n  return $result;\n}\n\necho special_factorial(4);",
  "  $factor = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factor *= factorial($i);\n\
    \  }\n  return $factor;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\n", "    return ($n !=\
    \ 0) ? $n * special_factorial($n - 1) : 1;\n}", "  $factorial = [];\n  $total\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    array_push($factorial, $i);\n  }\n\
    \  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  $factorial = [];\n  for ($i = $n - 1; $i > 0; $i--) {\n    array_push($factorial,\
    \ $i);\n  }\n  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  $factorial = [];\n  for ($i = $n - 2; $i > 0; $i--) {\n    array_push($factorial,\
    \ $i);\n  }\n  for ($i = 0; $i < count($factorial); $i++) {\n    $total *= $factorial[$i];\n\
    \  }\n  return $total;\n}\n", "    $result = 1;\n    for ($i = $n; $i > 0; $i--)\
    \ {\n        $result *= $i;\n    }\n    return $result;\n}", "  $factorial = 1;\n\
    \  $factorial2 = 1;\n  $factorial3 = 1;\n  $i = 0;\n  while ($i < $n) {\n    $factorial\
    \ = $factorial * ($n - $i);\n    $i++;\n  }\n  $i = 0;\n  while ($i < ($n - 1))\
    \ {\n    $factorial2 = $factorial2 * ($n - 1 - $i);\n    $i++;\n  }\n  $i = 0;\n\
    \  while ($i < ($n - 2)) {\n    $factorial3 = $factorial3 * ($n - 2 - $i);\n \
    \   $i++;\n  }\n  return $factorial * $factorial2 * $factorial3;\n}\necho special_factorial(5);",
  "  $factorial=1;\n  $factorialArray=[];\n  while($n >= 1){\n    $factorial*=$n;\n\
    \    $factorialArray[]=$factorial;\n    $n--;\n  }\n  return array_product($factorialArray);\n\
    }", "  $x = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $x *= $i;\n  }\n  return $x;\n\
    }\n\n$tests = [\n  4 => 288,\n  0 => 1,\n  1 => 1,\n  2 => 2,\n  3 => 24,\n  5\
    \ => 14400,\n  6 => 518400,\n  7 => 6652800,\n  8 => 32432400,\n  9 => 544320000,\n\
    \  10 => 7408800000,\n  11 => 92897280000,\n  12 => 928972800000,\n  13 => 6645797760000,\n\
    \  14 => 32432400000000,\n  15 => 9853336000000000,\n  16 => 261534873600000000,\n\
    \  17 => 5244319232000000000,\n  18 => 8179213004800000000,\n  19 => 102116764672000000000,\n\
    \  20 => 1015599566684160000000,\n  21 => 738010580556800000000,\n  22 => 402253450240000000000,\n\
    \  23 => 1724637400819200000000,\n  24 => 6250278406400000000000,\n  25 => 18789718982400000000000,\n\
    \  26 => 48165896678400000000000,\n  27 => 103631945086720000000000,\n  28 =>\
    \ 193990990492160000000000,\n  29 => 319018744448000000000000,\n  30 => 454354044876800000000000,\n\
    \  31 => 581099505605120000000000,\n  32 => 656764177346560000000000,\n  33 =>\
    \ 664579776000000000000000,\n  34 => 6074083835750400000000000,\n  35 => 5114385699584100000000000,\n\
    \  36 => 3908549429760000000000000,\n  37 => 2796244882483200000000000,\n  38\
    \ => 17895697022617600000000000,\n  39 => 10555311626649600000000000,\n  40 =>\
    \ 56832900565248000000000000,\n  41 => 28140849593548800000000000", "  return\
    \ array_product(range(1, $n));\n}\n", "  if ($n == 0) {\n    return 1;\n  } else\
    \ {\n    return $n * special_factorial($n - 1);\n  }\n}\n\necho special_factorial(4);",
  "   $factorial = function($n) use (&$factorial) {\n        return $n < 2 ? 1 : $n\
    \ * $factorial($n - 1);\n    };\n    return array_product(array_map($factorial,\
    \ range(1, $n)));\n}", "  $result = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $result\
    \ *= factorial($i);\n  }\n  return $result;\n}\n", "    $factorial = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\nprint_r(special_factorial(4) . PHP_EOL);\n", "  $factorial = 1;\n  $value\
    \ = 1;\n  for ($i=1; $i <= $n; $i++) {\n    $factorial *= $i;\n    $value *= $factorial;\n\
    \  }\n  return $value;\n}\n", "  $result = factorial($n);\n  for ($i = $n-1; $i\
    \ > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n}\n", "\n\
    }\n", "\t// Convert the integer to a string.\n\t$s = $n.'<br>';\n\t// Get the\
    \ length of the string.\n\t$l = strlen($s);\n\t// Initialize the array.\n\t$a\
    \ = array();\n\t// Loop through the string.\n\tfor ($i = 0; $i < $l; $i++) {\n\
    \t\t// Multiply each digit of the string together.\n\t\t$a[$i] = $s[$i] * $s[$i].'<br>';\n\
    \t}\n\t// Return the answer.\n\treturn $a;\n}\n", "  if ($n <= 0) {\n    return\
    \ 0;\n  }\n\n  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n\n  return $factorial * special_factorial($n - 1);\n}\n", "  if\
    \ ($n == 0) {\n    return 1;\n  }\n  return brazilian_factorial($n);\n}\n", " \
    \   if ($n == 0) {\n        return 1;\n    }\n    $f = 1;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $f *= $i;\n    }\n    return $f * special_factorial($n\
    \ - 1);\n}\n", "    $factorial = function($n) use (&$factorial) {\n        if\
    \ ($n === 0) {\n            return 1;\n        }\n        return $n * $factorial($n\
    \ - 1);\n    };\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n       \
    \ $result *= $factorial($i);\n    }\n    return $result;\n}\n", "  // Make sure\
    \ n is an integer\n  if (gettype($n) !== 'integer') {\n    throw new Exception(\"\
    n is not an integer\");\n  }\n  // Make sure n is greater than zero\n  if ($n\
    \ <= 0) {\n    throw new Exception(\"n is not greater than zero\");\n  }\n  //\
    \ If n is 1, return 1\n  if ($n === 1) {\n    return 1;\n  }\n  // Recursively\
    \ call the function\n  return $n * special_factorial($n - 1);\n}\necho special_factorial(4);",
  "  if ($n <= 0) return;\n  $res = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $res\
    \ *= $i;\n  }\n  for ($i = $n - 1; $i > 0; $i--) {\n    $res *= $i;\n  }\n  return\
    \ $res;\n}", "  $factorials = [];\n  while ($n > 0) {\n    array_push($factorials,\
    \ $n);\n    $n--;\n  }\n  $product = 1;\n  foreach ($factorials as $factorial)\
    \ {\n    $product *= $factorial;\n  }\n  return $product;\n}\n", "    $product\
    \ = 1;\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n        $product *= $factorial;\n    }\n    return $product;\n}\n",
  '}', "    $result = factorial($n);\n    for ($i = 1; $i < $n; $i++) {\n        $result\
    \ *= factorial($n - $i);\n    }\n    return $result;\n}\n", "  if ($n == 0) return\
    \ 1;\n  $fac_n = 1;\n  $fac_previous = 1;\n  for ($i = $n; $i > 0; $i--) {\n \
    \   $fac_n *= $i;\n    $fac_previous *= $i - 1;\n  }\n  return $fac_n * $fac_previous;\n\
    }\n", "  $array = [];\n  for ($i=1; $i<=$n; $i++) {\n    array_push($array, $i);\n\
    \  }\n  $n_factorial = factorial(array_pop($array));\n  for ($i=0; $i<count($array);\
    \ $i++) {\n    $n_factorial *= factorial(array_pop($array));\n  }\n  return $n_factorial;\n\
    }", "\t$sum = 0;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$sum += factorial($i);\n\
    \t}\n\treturn $sum;\n}\n", "  if ($n == 0) {\n    return 1;\n  }\n  $factorial\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial * special_factorial($n - 1);\n}\n\necho special_factorial(4) . \"\
    \\n\";", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  if ($n < 0) return false;\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n", "    return $n > 0 ? $n * special_factorial($n - 1) : 1;\n}\n\necho special_factorial(4);",
  '}', "    if($n < 1) return;\n    $factorials = [];\n    for($i = $n; $i > 0; $i--)\
    \ {\n        $factorials[] = factorial($i);\n    }\n    return array_product($factorials);\n\
    }\n", "  if ($n == 0) {\n    return 1;\n  } else {\n    return $n * special_factorial($n\
    \ - 1);\n  }\n}\n", "  return factorial($n) * factorial($n - 1);\n}", "  if ($n\
    \ === 0) {\n    return 1;\n  }\n  return $n * special_factorial($n - 1);\n}\n\
    echo special_factorial(4);", "    $result = 1;\n    for ($i = $n; $i > 0; $i--)\
    \ {\n        $result *= $i;\n    }\n    return $result;\n}\n", "  $num = 1;\n\
    \  for ($i=1; $i <= $n; $i++) {\n    $num *= $i;\n  }\n  for ($i=$n; $i >= 1;\
    \ $i--) {\n    $num *= $i;\n  }\n  return $num;\n}\n\necho special_factorial(4)\
    \ . \"\\n\";", "    $res = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $res\
    \ *= $i;\n    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $res *= $i;\n\
    \    }\n    for ($i = $n - 2; $i > 0; $i--) {\n        $res *= $i;\n    }\n  \
    \  return $res;\n}", "    $output = 1;\n    for ($i = $n; $i > 0; $i--) {\n  \
    \      $output *= $i;\n    }\n    return $output;\n}", "  if (gettype($n) != 'integer')\
    \ {\n    throw new Exception('First argument must be an integer');\n  }\n  if\
    \ ($n < 0) {\n    throw new Exception('First argument must be non-negative');\n\
    \  }\n  if ($n == 0) {\n    return 1;\n  }\n  return $n * special_factorial($n\
    \ - 1);\n}\n\necho special_factorial(4);", "    if($n == 0) {\n        return\
    \ 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n", "    if($n <= 0)\
    \ {\n        return NULL;\n    }\n\n    $nums = range(1, $n);\n    $ret = 1;\n\
    \    foreach($nums as $num) {\n        $ret *= factorial($num);\n    }\n    return\
    \ $ret;\n}\n", "    if($n == 0) {\n        return 1;\n    }\n    else{\n     \
    \   return $n * special_factorial($n-1);\n    }\n}", "    $special_factorial =\
    \ 1;\n    $factorial = 1;\n    for ($i=1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n        $special_factorial *= $factorial;\n    }\n    return $special_factorial;\n\
    }", "  $numbers = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $numbers[] = $i;\n\
    \  }\n  return array_product($numbers);\n}\n\n$special_factorial = special_factorial(4);\n\
    var_dump($special_factorial);\n", "  $factorial = 1;\n  while ($n > 0) {\n   \
    \ $factorial *= $n;\n    $n--;\n  }\n  return $factorial;\n}\n", "    $total =\
    \ 1;\n    while ($n > 0) {\n        $total *= factorial($n);\n        $n--;\n\
    \    }\n    return $total;\n}\n", "    if($n <= 0) {\n        return false;\n\
    \    }\n    $total = 1;\n    while($n > 0) {\n        $total *= factorial($n);\n\
    \        $n--;\n    }\n    return $total;\n}\n", "    $factorial = 1;\n    $factorials\
    \ = array();\n    while ($n > 0) {\n        $factorials[] = $factorial;\n    \
    \    $factorial *= $n;\n        $n--;\n    }\n    foreach ($factorials as $f)\
    \ {\n        $factorial /= $f;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\n",
  "    $fac=1;\n    for($i=1;$i<=$n;$i++){\n        $fac=$fac*$i;\n    }\n    return\
    \ $fac;\n}\n\necho special_factorial(4);", "  $product = 1;\n  for ($i = $n; $i\
    \ > 0; $i--) {\n    $product *= $i;\n  }\n  $factorial = $product;\n  while ($n\
    \ > 1) {\n    $product = 1;\n    for ($i = $n - 1; $i > 0; $i--) {\n      $product\
    \ *= $i;\n    }\n    $factorial *= $product;\n    $n--;\n  }\n  return $factorial;\n\
    }\n\n$test_num = 4;\n$test_ret = special_factorial($test_num);\necho \"\\n==================\\\
    n\";\necho \"Testing special_factorial with $test_num\\n\";\necho \"==================\\\
    n\";\nif ($test_ret == 288) {\n  echo \"Success\\n\";\n} else {\n  echo \"Failure\\\
    n\";\n}\necho \"==================\\n\";\necho \"\\n\\n\";\n", "    $total = 1;\n\
    \    for ($i = $n; $i > 0; $i--) {\n        $total *= $i;\n    }\n    return $total;\n\
    }\necho special_factorial(4);", "    // We can use recursion to simplify this\
    \ problem\n    if ($n === 1) {\n        return 1;\n    }\n    // To get the special\
    \ factorial, we need to multiply\n    // by the number and the special factorial\
    \ of the\n    // number before it.\n    return $n * special_factorial($n - 1);\n\
    }", "  $factorial = 1;\n  while ($n > 0) {\n    $factorial *= $n;\n    $n -= 1;\n\
    \  }\n  return $factorial;\n}\n\nprint_r(special_factorial(4));", "  $total =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $total *= $i;\n  }\n  for ($i = 1;\
    \ $i < $n; $i++) {\n    $total *= $i;\n  }\n  return $total;\n}\n", "    return\
    \ array_product(range(1, $n)) * array_product(range(1, $n - 1));\n}\n\nprint special_factorial(4);\n\
    print '<br>';\nprint special_factorial(5);\nprint '<br>';\nprint special_factorial(6);\n\
    print '<br>';\nprint special_factorial(7);\nprint '<br>';\nprint special_factorial(8);\n\
    print '<br>';\nprint special_factorial(9);\nprint '<br>';\nprint special_factorial(10);\n\
    print '<br>';\nprint special_factorial(11);\nprint '<br>';\nprint special_factorial(12);\n\
    print '<br>';\nprint special_factorial(13);\nprint '<br>';\nprint special_factorial(14);\n\
    print '<br>';\nprint special_factorial(15);\nprint '<br>';\nprint special_factorial(16);\n\
    print '<br>';\nprint special_factorial(17);\nprint '<br>';\nprint special_factorial(18);\n\
    print '<br>';\nprint special_factorial(19);\nprint '<br>';\nprint special_factorial(20);\n\
    print '<br>';\nprint special_factorial(21);\nprint '<br>';\nprint special_factorial(22);\n\
    print '<br>';\nprint special_factorial(23);\nprint '<br>';\nprint special_factorial(24);\n\
    print '<br>';\nprint special_factorial(25);\nprint '<br>';\nprint special_factorial(26);\n\
    print '<br>';\nprint special_factorial(27);\nprint '<br>';\nprint special_factorial(28);\n\
    print '<br>';\nprint special_factorial(29);\nprint '<br>';\nprint special_factorial(30);\n\
    print '<br>';\nprint special_factorial(31);\nprint '<br>';\nprint special_factorial(32);\n\
    print '<br>';\nprint special_factorial(33);\nprint '<br>';\n", "    if ($n < 0)\
    \ {\n        throw new Exception(\"Invalid input: $n\");\n    }\n    if ($n <=\
    \ 1) {\n        return 1;\n    }\n\n    $result = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $result *= $i;\n    }\n    for ($i = $n - 1; $i > 0; $i--)\
    \ {\n        $result *= $i;\n    }\n    return $result;\n}\n", "   // Your code\
    \ here\n}", "\t$t = 1;\n\tfor ($i = $n; $i >= 1; $i--) {\n\t\t$t *= $i;\n\t}\n\
    \treturn $t;\n}\n", "  if($n == 0) return 1;\n  $r = 1;\n  for($i = $n; $i > 0;\
    \ $i--) {\n    $r *= $i;\n  }\n  return $r;\n}", "    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n    \
    \    $result *= factorial($i);\n    }\n    return $result;\n}\n", "    $result\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++){\n      $result *= $i;\n    }\n    for\
    \ ($i = 1; $i < $n; $i++){\n      $result *= $i;\n    }\n    return $result;\n\
    }\n$result = special_factorial(4);\necho \"special_factorial(4): {$result}\\n\"\
    ;\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *=\
    \ $i;\n  }\n  return $factorial * $factorial;\n}\n", "    $result = 1;\n    $factorial\
    \ = function($m) use (&$factorial, &$result) {\n        if ($m == 1) {\n     \
    \       return $result;\n        } else {\n            $result *= $m;\n      \
    \      return $factorial($m - 1);\n        }\n    };\n    return $factorial($n);\n\
    }\necho special_factorial(4);", "  $factorials = factorials(1, $n);\n  $product\
    \ = 1;\n  foreach ($factorials as $factorial) {\n    $product *= $factorial;\n\
    \  }\n  return $product;\n}\n", "    $fact = 1;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $fact *= $i;\n    }\n    return $fact;\n}\n$i = 1;\nwhile ($i <=\
    \ 10) {\n    echo \"special_factorial($i) = \" . special_factorial($i) . \"\\\
    n\";\n    $i++;\n}", "  $total = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $total\
    \ *= $i;\n  }\n  return $total;\n}\n", "  $result = 1;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $result *= factorial($i);\n  }\n  return $result;\n}\n", "  //\
    \ Write your code here.\n  // Remove the next line.\n  echo $n;\n}\n", "\t$ret\
    \ = 1;\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$ret *= factorial($i);\n\t}\n\treturn\
    \ $ret;\n}\n", "\t$total = 1;\n\t$len = $n;\n\twhile ($len > 0) {\n\t\t$total\
    \ *= $len;\n\t\t$len--;\n\t}\n\treturn $total;\n}\n", "\t$result = 1;\n\tfor ($i\
    \ = 1; $i <= $n; $i++){\n\t\t$result *= $i;\n\t}\n\tfor ($i = $n - 1; $i > 0;\
    \ $i--){\n\t\t$result *= $i;\n\t}\n\treturn $result;\n}\n\necho special_factorial(4);",
  "  $result = 1;\n  while ($n > 0) {\n    $result *= factorial($n);\n    $n--;\n\
    \  }\n  return $result;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}", "\n}\n\
    \n$test_cases = array(\n    array('input' => 2, 'expected' => 2),\n    array('input'\
    \ => 3, 'expected' => 12),\n    array('input' => 4, 'expected' => 288),\n    array('input'\
    \ => 5, 'expected' => 34560),\n    array('input' => 6, 'expected' => 24883200),\n\
    \    array('input' => 7, 'expected' => 10897286400),\n    array('input' => 8,\
    \ 'expected' => 3521614606208),\n    array('input' => 9, 'expected' => 10077696000000000),\n\
    \    array('input' => 10, 'expected' => 265252859812191058636308480000000),\n\
    \    array('input' => 11, 'expected' => 869043647444305967631298564798800022239435840000000000000),\n\
    \    array('input' => 12, 'expected' => 31409671556839028049692743242464231738856537726883840000000000000000000),\n\
    \    array('input' => 13, 'expected' => 1279592704167711312947775286937995512979236895440000000000000000000000000),\n\
    \    array('input' => 14, 'expected' => 62957311265590148656501071957846645201598008382750728029056000000000000000000000'),\n\
    \    array('input' => 15, 'expected' => 369198309699240436226027689582618476938646565000000000000000500000000000000000000000'),\n\
    \    array('input' => 16, 'expected' => 2490058275626842730194923289724183335793800095599200000000000000000000000000000000000'),\n\
    \    array('input' => 17, 'expected' => 190611151143371308734131901096518415239571295664516800000000000000000000000000000000000'),\n\
    \    array('input' => 18, 'expected' => 1650477261759077770489515457956858276527680594951680000000000000000000000000000000000000'),\n\
    \    array('input' => 19, 'expected' => 1606711", "  $result = 1;\n  while ($n\
    \ > 0) {\n    $result *= $n--;\n  }\n  return $result;\n}\n", "    if($n <= 0)\
    \ {\n        return null;\n    }\n    $array = range(1, $n);\n    $multi = 1;\n\
    \    foreach($array as $value) {\n        $multi *= $value;\n    }\n    return\
    \ $multi * special_factorial($n - 1);\n}\n", "  $r = 1;\n  for ($i = 1; $i <=\
    \ $n; $i++) {\n    $r *= factorial($i);\n  }\n  return $r;\n}\n", "\tif($n<1)\
    \ return;\n\tfor($i=1;$i<=$n;$i++){\n\t\t$n = $n*$i;\n\t}\n\treturn $n;\n}\n",
  "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  for ($i =\
    \ $n - 2; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}",
  "  $number = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $number *= $i;\n  }\n  return\
    \ $number;\n}\n\necho special_factorial(4);", "    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\necho special_factorial(4);", "  if ($n == 0) {\n    return 1;\n  }\n  return\
    \ $n * special_factorial($n - 1);\n}\n", "  if ($n == 0) {\n    return 1;\n  }\n\
    \  $factorial = $n;\n  for ($i = $n - 1; $i > 0; $i--) {\n    $factorial *= $i;\n\
    \  }\n  return $factorial;\n}", "  $factorial_array = array();\n  $result = 1;\n\
    \  if ($n == 0) {\n    return 1;\n  } else {\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n      $factorial_array[] = $i;\n    }\n    for ($i = 0; $i < count($factorial_array);\
    \ $i++) {\n      $result *= $factorial_array[$i];\n    }\n    return $result;\n\
    \  }\n}\n", "  \n}\n", "}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
