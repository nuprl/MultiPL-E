name: HumanEval_159_eat
language: php
results:
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($remaining +\
    \ $number >= $need){\n    return [$need, $remaining + $number - $need];\n  } else\
    \ {\n    return [$remaining + $number, 0];\n  }\n}\n\necho \"[11, 4] => \" . eat(5,\
    \ 6, 10) . \"<br>\";\necho \"[12, 1] => \" . eat(4, 8, 9) . \"<br>\";\necho \"\
    [11, 0] => \" . eat(1, 10, 10) . \"<br>\";\necho \"[7, 0] => \" . eat(2, 11, 5)\
    \ . \"<br>\";\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[11, 4] => Array<br>[12, 1] => Array<br>[11, 0] => Array<br>[7, 0] => Array<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjwt_d_qr.php:42\nStack\
    \ trace:\n#0 /tmp/tmpjwt_d_qr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjwt_d_qr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if(($number +\
    \ $need) > $remaining){\n        return [$remaining, 0];\n    }\n    return [$number\
    \ + $need, $remaining - ($number + $need)];\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf1zgrwc.php:35\n\
    Stack trace:\n#0 /tmp/tmpkf1zgrwc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkf1zgrwc.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $number = $number\
    \ + $need;\n  $remaining = $remaining - $need;\n  if ($remaining <= 0){\n    $remaining\
    \ = 0;\n  }\n  return [$number, $remaining];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtvifr_2.php:40\n\
    Stack trace:\n#0 /tmp/tmpdtvifr_2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdtvifr_2.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [$number\
    \ + $need < $remaining ? $number + $need : $number + $remaining, $remaining -\
    \ $need >= 0 ? $remaining - $need : 0];\n}\nfunction candidate(...$args) {\n \
    \   return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmge78bcq.php:32\n\
    Stack trace:\n#0 /tmp/tmpmge78bcq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmge78bcq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  \n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3tqi73z.php:32\n\
    Stack trace:\n#0 /tmp/tmpc3tqi73z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc3tqi73z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // save your code\
    \ here...\n  $i = $number;\n  $a = $remaining;\n  $eated = $i + $a;\n  if ($eated\
    \ < $need) {\n    $left = 0;\n  }\n  else {\n    $left = $eated - $need;\n  }\n\
    \  return [$eated, $left];\n}\n\n$case = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1,\
    \ 10, 10],\n  [2, 11, 5]\n];\n\n$result = [\n  [11, 4],\n  [12, 1],\n  [11, 0],\n\
    \  [7, 0]\n];\n\nfor ($i = 0; $i < count($case); $i++) {\n  if (eat($case[$i][0],\
    \ $case[$i][1], $case[$i][2]) == $result[$i])\n    echo \"OK \";\n  else\n   \
    \ echo \"Wrong\";\n  echo \"\\n\";\n}\n\necho \"\\n\";\n\necho eat(5, 6, 10)[0]\
    \ == 11 ? \"OK \" : \"Wrong\";\necho eat(5, 6, 10)[1] == 4 ? \"OK\" : \"Wrong\"\
    ;\necho \"\\n\";\n\necho eat(4, 8, 9)[0] == 12 ? \"OK \" : \"Wrong\";\necho eat(4,\
    \ 8, 9)[1] == 1 ? \"OK\" : \"Wrong\";\necho \"\\n\";\n\necho eat(1, 10, 10)[0]\
    \ == 11 ? \"OK \" : \"Wrong\";\necho eat(1, 10, 10)[1] == 0 ? \"OK\" : \"Wrong\"\
    ;\necho \"\\n\";\n\necho eat(2, 11, 5)[0] == 7 ? \"OK \" : \"Wrong\";\necho eat(2,\
    \ 11, 5)[1] == 0 ? \"OK\" : \"Wrong\";\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Wrong\nWrong\nWrong\nOK \n\nWrongWrong\nWrongWrong\nOK Wrong\nOK OK\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpyobl4035.php:82\nStack\
    \ trace:\n#0 /tmp/tmpyobl4035.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpyobl4035.php\
    \ on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [$number\
    \ + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4a34p0p.php:35\n\
    Stack trace:\n#0 /tmp/tmpg4a34p0p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpg4a34p0p.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $totalEaten =\
    \ $number + $need;\n    $totalRemaining = $remaining - $need;\n    if ($totalRemaining\
    \ < 0) {\n        $totalRemaining = 0;\n    }\n    return [$totalEaten, $totalRemaining];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe65j0pxf.php:40\n\
    Stack trace:\n#0 /tmp/tmpe65j0pxf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpe65j0pxf.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if(($number +\
    \ $need) <= $remaining){\n        return [$number + $need, $remaining - ($number\
    \ + $need)];\n    } else {\n        return [$number + $remaining, 0];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrdvb3ss.php:37\n\
    Stack trace:\n#0 /tmp/tmpsrdvb3ss.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsrdvb3ss.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ < $need - $number)\n        return [$remaining + $number, 0];\n    return [$need,\
    \ $remaining - ($need - $number)];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumrg13n5.php:34\n\
    Stack trace:\n#0 /tmp/tmpumrg13n5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpumrg13n5.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $answer[0] = $number\
    \ + $need;\n    $answer[1] = $remaining - $need;\n    if ($answer[1] < 0) {\n\
    \        $answer[0] += $answer[1];\n        $answer[1] = 0;\n    }\n    return\
    \ $answer;\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $result_one = $number\
    \ + $need;\n  $result_two = $remaining - $need;\n  if ($result_two < 0) {\n  \
    \  $result_two = 0;\n  }\n  return [$result_one, $result_two];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6coiji0.php:40\n\
    Stack trace:\n#0 /tmp/tmpd6coiji0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd6coiji0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$total, 0];\n  }\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsohssl3h.php:37\n\
    Stack trace:\n#0 /tmp/tmpsohssl3h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsohssl3h.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // echo $number\
    \ . ', ' . $need . ', ' . $remaining . PHP_EOL;\n  if ($remaining >= $need) {\n\
    \    return [$number + $need, $remaining - $need];\n  } else {\n    return [$number\
    \ + $remaining, 0];\n  }\n}\necho '<pre>';\nprint_r(eat(1, 10, 10));\necho '</pre>';\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 11\n    [1] => 0\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\treturn [$number+min($need,$remaining),max(0,$remaining-$need)];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $newNumber = $number\
    \ + $need;\n  $remainingCarrots = $remaining - $need;\n  if ($remainingCarrots\
    \ < 0) {\n    $remainingCarrots = 0;\n  }\n  return [$newNumber, $remainingCarrots];\n\
    }\necho implode(', ', eat(5, 6, 10)) . \"\\n\"; // 11, 4\necho implode(', ', eat(4,\
    \ 8, 9)) . \"\\n\"; // 12, 1\necho implode(', ', eat(1, 10, 10)) . \"\\n\"; //\
    \ 11, 0\necho implode(', ', eat(2, 11, 5)) . \"\\n\"; // 7, 0\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "11, 4\n12, 1\n11, 0\n13, 0\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfw7a4wwr.php:44\nStack trace:\n#0 /tmp/tmpfw7a4wwr.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfw7a4wwr.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    }\n\
    \    return [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $hunger = 0;\n\
    \    if($remaining == 0) {\n        return [$number + $remaining, $hunger];\n\
    \    }\n    if($remaining < $need) {\n        return [$number + $remaining, $hunger];\n\
    \    }\n    return [$number + $need, $remaining - $need];\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($need <= $remaining)\
    \ {\n    return [$number + $need, $remaining - $need];\n  } else {\n    return\
    \ [$number + $remaining, 0];\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $left = 0;\n    if ($total <= $remaining) {\n        $left = $remaining\
    \ - $total;\n    } else {\n        $left = 0;\n    }\n    return [$total, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhr54ksb.php:39\n\
    Stack trace:\n#0 /tmp/tmpnhr54ksb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnhr54ksb.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $eat = $number\
    \ + $need;\n    $left = 0;\n    if ($eat > $remaining) {\n        $left = $eat\
    \ - $remaining;\n        $eat = $remaining;\n    }\n    return [$eat, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2oxpdwm.php:38\n\
    Stack trace:\n#0 /tmp/tmpe2oxpdwm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe2oxpdwm.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\tif($remaining >=\
    \ $need) {\n\t\treturn [$number + $need, $remaining - $need];\n\t} else {\n\t\t\
    return [$number + $remaining, 0];\n\t}\n}\n\necho '<pre>';\nvar_dump(eat(5, 6,\
    \ 10));\necho '</pre>';\n\necho '<pre>';\nvar_dump(eat(4, 8, 9));\necho '</pre>';\n\
    \necho '<pre>';\nvar_dump(eat(1, 10, 10));\necho '</pre>';\n\necho '<pre>';\n\
    var_dump(eat(2, 11, 5));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(2) {\n  [0]=>\n  int(11)\n  [1]=>\n  int(4)\n}\n</pre><pre>array(2)\
    \ {\n  [0]=>\n  int(12)\n  [1]=>\n  int(1)\n}\n</pre><pre>array(2) {\n  [0]=>\n\
    \  int(11)\n  [1]=>\n  int(0)\n}\n</pre><pre>array(2) {\n  [0]=>\n  int(7)\n \
    \ [1]=>\n  int(0)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total = $total\
    \ + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // If the number\
    \ of remaining carrots is greater or equal to the needed number of carrots\n \
    \ if ($remaining >= $need) {\n    // the total number of eaten carrots will be\
    \ the sum of the initial eaten carrots and the needed carrots\n    $total = $number\
    \ + $need;\n    // the remaining carrots will be the stock minus the needed carrots\n\
    \    $remaining = $remaining - $need;\n    // If the number of remaining carrots\
    \ is less than the needed number of carrots\n  } else {\n    // the total number\
    \ of eaten carrots will be the sum of the initial eaten carrots and the stock\
    \ number of carrots\n    $total = $number + $remaining;\n    // there won't be\
    \ any carrots left\n    $remaining = 0;\n  }\n  // I'm returning the values, but\
    \ I should check if I can return them as an array\n  return [$total, $remaining];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // your code here\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m7lou2p.php:32\n\
    Stack trace:\n#0 /tmp/tmp7m7lou2p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7m7lou2p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $total\
    \ = $total + $left;\n        $left = 0;\n    }\n    return [$total, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $sum = $number +\
    \ $need;\n  if ($sum > $remaining) {\n    return [$remaining, 0];\n  }\n  return\
    \ [$sum, $remaining - $sum];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo8noj45.php:36\n\
    Stack trace:\n#0 /tmp/tmpbo8noj45.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbo8noj45.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$sum = $number +\
    \ $need;\n\tif ($sum < $remaining) {\n\t\treturn [$sum, $remaining - $sum];\n\t\
    } else {\n\t\treturn [$sum, 0];\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kxt9q2f.php:37\n\
    Stack trace:\n#0 /tmp/tmp9kxt9q2f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9kxt9q2f.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $eaten = $number\
    \ + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $eaten\
    \ = $eaten + $left;\n        $left = 0;\n    }\n    return [$eaten, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($number + $remaining\
    \ < $need) {\n    return [$number + $remaining, 0];\n  }\n  return [$number +\
    \ $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_z6o5v4.php:40\n\
    Stack trace:\n#0 /tmp/tmpa_z6o5v4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa_z6o5v4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $number += $need;\n\
    \    if ($number > $remaining) {\n        $number = $remaining;\n    }\n    return\
    \ [$number, $remaining - $number];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1138h8dn.php:36\n\
    Stack trace:\n#0 /tmp/tmp1138h8dn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1138h8dn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $left = $remaining\
    \ - $need;\n  if ($left >= 0) {\n    return [$number + $need, $left];\n  } else\
    \ {\n    return [$number + $remaining, 0];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eat = $number +\
    \ $need;\n  $left = $remaining - $need;\n  return $left < 0 ? [$eat + $left, 0]\
    \ : [$eat, $left];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($remaining < $need) {\n    $total\
    \ = $number + $remaining;\n    $left = 0;\n  }\n  return [$total, $left];\n}\n\
    echo \"<pre>\";\necho eat(5, 6, 10)[0]; // 11\necho \"<br>\";\necho eat(5, 6,\
    \ 10)[1]; // 4\necho \"<br>\";\necho eat(4, 8, 9)[0]; // 12\necho \"<br>\";\n\
    echo eat(4, 8, 9)[1]; // 1\necho \"<br>\";\necho eat(1, 10, 10)[0]; // 11\necho\
    \ \"<br>\";\necho eat(1, 10, 10)[1]; // 0\necho \"<br>\";\necho eat(2, 11, 5)[0];\
    \ // 7\necho \"<br>\";\necho eat(2, 11, 5)[1]; // 0\necho \"</pre>\";\n\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <pre>11<br>4<br>12<br>1<br>11<br>0<br>7<br>0</pre>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $remain = $remaining\
    \ - $need;\n  if ($remain < 0) {\n    $remain = 0;\n  }\n  return [$number + $need,\
    \ $remain];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4azlaxmh.php:39\n\
    Stack trace:\n#0 /tmp/tmp4azlaxmh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4azlaxmh.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return [$number\
    \ + $need < $remaining ? $number + $need : $number + $remaining, $number + $need\
    \ < $remaining ? $remaining - $need : 0];\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1p9dsf3.php:32\n\
    Stack trace:\n#0 /tmp/tmpq1p9dsf3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq1p9dsf3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($number + $remaining\
    \ >= $need) {\n    return [$need, $remaining - ($need - $number)];\n  }\n  return\
    \ [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpolsts6hd.php:35\n\
    Stack trace:\n#0 /tmp/tmpolsts6hd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpolsts6hd.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $sum = $number\
    \ + $need;\n    if ($sum > $remaining) {\n        return [$sum - $remaining, 0];\n\
    \    } else {\n        return [$sum, $remaining - $sum];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9avtbk_.php:37\n\
    Stack trace:\n#0 /tmp/tmpn9avtbk_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn9avtbk_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $num = $number\
    \ + $need;\n    $rem = $remaining - $need;\n    if ($rem < 0) {\n        $rem\
    \ = 0;\n    }\n    return [$num, $rem];\n}\nfunction candidate(...$args) {\n \
    \   return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkptqttd.php:40\n\
    Stack trace:\n#0 /tmp/tmpbkptqttd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbkptqttd.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ == 0) return [$number, $remaining];\n    $total = $number + $need;\n    if($total\
    \ > $remaining) {\n        $remaining = 0;\n    } else {\n        $remaining =\
    \ $remaining - $total;\n    }\n    return [$total, $remaining];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn17zqt1.php:39\n\
    Stack trace:\n#0 /tmp/tmpvn17zqt1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvn17zqt1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $remaining -=\
    \ $number;\n    if ($remaining <= 0) {\n        return [$need + $remaining, 0];\n\
    \    } else if ($remaining < $need) {\n        return [$need + $remaining, 0];\n\
    \    } else {\n        return [$need, $remaining - $need];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo92y07jt.php:39\n\
    Stack trace:\n#0 /tmp/tmpo92y07jt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo92y07jt.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eat = $number +\
    \ $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $eat = $remaining\
    \ + $number;\n    $left = 0;\n  }\n  return [$eat, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left <= 0) {\n    $total = $total\
    \ + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $meals = 0;\n\
    \    $meals = $number + $need;\n    $remaining = $remaining - $meals;\n    return\
    \ $remaining < 0 ? [$meals, $remaining * -1] : [$meals, $remaining];\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx4tma_e.php:35\n\
    Stack trace:\n#0 /tmp/tmpqx4tma_e.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqx4tma_e.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $list = [];\n  array_push($list,\
    \ $number);\n  array_push($list, $need);\n  array_push($list, $remaining);\n \
    \ $sum = array_sum($list);\n  $diff = array_diff($list, [$remaining]);\n  if ($sum\
    \ > $remaining) {\n    return [array_sum($diff), 0];\n  } else {\n    return [array_sum($diff),\
    \ $remaining - array_sum($diff)];\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jedfmr_.php:42\n\
    Stack trace:\n#0 /tmp/tmp1jedfmr_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1jedfmr_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return ($remaining\
    \ < $need) ? [$number + $remaining, 0] : [$number + $need, $remaining - $need];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $result = 0;\n\
    \    if ($number <= $need) {\n        $result = $number + $remaining;\n      \
    \  $remaining = $remaining - $result;\n    } elseif ($remaining > $number) {\n\
    \        $result = $number + $remaining;\n        $remaining = $remaining - $result;\n\
    \    } else {\n        $result = $number;\n        $remaining = 0;\n    }\n  \
    \  return [$result, $remaining];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphal7ovdw.php:43\n\
    Stack trace:\n#0 /tmp/tmphal7ovdw.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphal7ovdw.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$total = $number\
    \ + $need;\n\tif ($total > $remaining) {\n\t\t$total = $remaining + $number;\n\
    \t\t$remaining = 0;\n\t} else {\n\t\t$remaining = $remaining - $total;\n\t}\n\t\
    return [$total, $remaining];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0e71jst.php:39\n\
    Stack trace:\n#0 /tmp/tmpa0e71jst.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpa0e71jst.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining >=\
    \ $need) {\n    return [$number + $need, $remaining - $need];\n  } else {\n  \
    \  return [$number + $remaining, 0];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($remaining <\
    \ $need) {\n      return [$remaining+$number,0];\n  }\n  return [$number+$need,$remaining-$need];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($need > $remaining)\
    \ {\n    return [$number + $remaining, 0];\n  } else {\n    return [$number +\
    \ $need, $remaining - $need];\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ >= $need){\n        return [$number + $need, $remaining - $need];\n    }\n \
    \   return [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n   \
    \ return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $number2 = $number\
    \ + $need;\n  $remaining2 = $remaining - $need;\n  if ($remaining2 < 0) {\n  \
    \  $remaining2 = 0;\n  }\n  $array = array();\n  array_push($array, $number2,\
    \ $remaining2);\n  return $array;\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkz9x93kc.php:42\n\
    Stack trace:\n#0 /tmp/tmpkz9x93kc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkz9x93kc.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $e = $number + $need;\n\
    \  $r = $remaining - $need;\n  if ($r < 0) {\n    $r = 0;\n  }\n  return [$e,\
    \ $r];\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0adbmurz.php:41\n\
    Stack trace:\n#0 /tmp/tmp0adbmurz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0adbmurz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eaten = 0;\n  if($remaining\
    \ >= $need){\n    $eaten = $need;\n  } else {\n    $eaten = $remaining;\n  }\n\
    \  return [$number + $eaten, $remaining - $eaten];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $total\
    \ = $total + $left;\n        $left = 0;\n    }\n    return [$total, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($number + $remaining\
    \ < $need) {\n    return [$number + $remaining, 0];\n  } else {\n    return [$number\
    \ + $need, $remaining - $need];\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfjs4njo.php:41\n\
    Stack trace:\n#0 /tmp/tmpyfjs4njo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyfjs4njo.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return [min($number\
    \ + $remaining, $need), $remaining - min($number + $remaining, $need) + $number];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpit8xddle.php:32\n\
    Stack trace:\n#0 /tmp/tmpit8xddle.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpit8xddle.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining <\
    \ $need) {\n    return [$remaining + $number, 0];\n  } else {\n    return [$need\
    \ + $number, $remaining - $need];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $carrots = $number\
    \ + $remaining;\n  if ($carrots < $need) {\n    return [$carrots, 0];\n  } else\
    \ {\n    return [$need, $carrots - $need];\n  }\n}\necho implode(', ', eat(3,\
    \ 5, 6)) . \"\\n\";\necho implode(', ', eat(5, 6, 10)) . \"\\n\";\necho implode(',\
    \ ', eat(1, 10, 10)) . \"\\n\";\necho implode(', ', eat(2, 11, 5)) . \"\\n\";\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5, 4\n6, 9\n10, 1\n7, 0\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdup_4pg8.php:41\nStack trace:\n#0 /tmp/tmpdup_4pg8.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdup_4pg8.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [\n   \
    \     min($number + $remaining, $need),\n        max($remaining - ($need - $number),\
    \ 0)\n    ];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pfn16mb.php:35\n\
    Stack trace:\n#0 /tmp/tmp1pfn16mb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1pfn16mb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$result = array();\n\
    \tif ($remaining > $need){\n\t\tarray_push($result, $number + $need, $remaining\
    \ - $need);\n\t} elseif ($remaining <= $need){\n\t\tarray_push($result, $number\
    \ + $remaining, 0);\n\t}\n\treturn $result;\n}\nprint_r(eat(1, 10, 10));\nprint_r(eat(2,\
    \ 11, 5));\nprint_r(eat(4, 8, 9));\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 11\n    [1] => 0\n)\nArray\n(\n    [0] => 7\n    [1]\
    \ => 0\n)\nArray\n(\n    [0] => 12\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $totaleat = $number\
    \ + $need;\n    $remaining = $remaining - $need;\n    if ($totaleat > $remaining)\
    \ {\n        $totaleat = $remaining + $number;\n        $remaining = 0;\n    }\n\
    \    return array($totaleat, $remaining);\n}\n\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05amikv2.php:39\n\
    Stack trace:\n#0 /tmp/tmp05amikv2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp05amikv2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return [$number\
    \ + min($need, $remaining), max(0, $remaining - $need)];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $eaten = 0;\n\
    \    if ($need > $remaining) {\n        $eaten = $remaining;\n    } else {\n \
    \       $eaten = $need;\n    }\n    return [$number + $eaten, $remaining - $eaten];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return ( $number\
    \ + $need <= $remaining ) ? [ $number + $need, $remaining - $need ] : [ $remaining\
    \ + $number, 0 ];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn4j84jg.php:32\n\
    Stack trace:\n#0 /tmp/tmpkn4j84jg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkn4j84jg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\tif ($remaining <=\
    \ $need) {\n\t\treturn array($number + $remaining, 0);\n\t} else {\n\t\treturn\
    \ array($number + $need, $remaining - $need);\n\t}\n}\n\nvar_dump(eat(5, 6, 10));\n\
    var_dump(eat(4, 8, 9));\nvar_dump(eat(1, 10, 10));\nvar_dump(eat(2, 11, 5));\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(11)\n  [1]=>\n  int(4)\n}\narray(2) {\n  [0]=>\n\
    \  int(12)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n  int(11)\n  [1]=>\n  int(0)\n\
    }\narray(2) {\n  [0]=>\n  int(7)\n  [1]=>\n  int(0)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $remaining -=\
    \ $number;\n    if ($remaining >= $need) {\n        return [$number + $need, $remaining\
    \ - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzftx8qpw.php:37\n\
    Stack trace:\n#0 /tmp/tmpzftx8qpw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzftx8qpw.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return [$number\
    \ + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7w9xkhn.php:35\n\
    Stack trace:\n#0 /tmp/tmpe7w9xkhn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe7w9xkhn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total > $remaining) {\n    $total = $remaining + $number;\n\
    \    $remaining = 0;\n  } else {\n    $remaining = $remaining - $total;\n  }\n\
    \  return [$total, $remaining];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx45oboqf.php:39\n\
    Stack trace:\n#0 /tmp/tmpx45oboqf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx45oboqf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $needed = $number\
    \ + $need;\n    $leftOver = $remaining - $needed;\n    if ($leftOver >= 0) {\n\
    \      return [$needed, $leftOver];\n    } else {\n      return [$needed - abs($leftOver),\
    \ 0];\n    }\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lglovf3.php:39\n\
    Stack trace:\n#0 /tmp/tmp7lglovf3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7lglovf3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $left = $remaining - $need;\n    return ($total <= $remaining)\
    \ ? [$total, $left] : [$remaining, 0];\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxrjpjpr.php:34\n\
    Stack trace:\n#0 /tmp/tmpsxrjpjpr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsxrjpjpr.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    if ($total > $remaining) {\n        $total = $remaining + $number;\n\
    \        $remaining = 0;\n    } else {\n        $remaining = $remaining - $total;\n\
    \    }\n    return [$total, $remaining];\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy56q75ta.php:39\n\
    Stack trace:\n#0 /tmp/tmpy56q75ta.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy56q75ta.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $left = $need -\
    \ $number;\n  if ($left > $remaining) {\n    return [$number + $remaining, 0];\n\
    \  } else {\n    return [$number + $left, $remaining - $left];\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw6s551k.php:38\n\
    Stack trace:\n#0 /tmp/tmphw6s551k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphw6s551k.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  return array(\n\
    \    $number + $need > $remaining ? $remaining : $number + $need,\n    $number\
    \ + $need > $remaining ? 0 : $remaining - ($number + $need)\n  );\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipv9uhjx.php:35\n\
    Stack trace:\n#0 /tmp/tmpipv9uhjx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpipv9uhjx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $remain = $remaining - $need;\n    $result = [\n        $total,\n\
    \        $remain\n    ];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9ofh51a.php:42\n\
    Stack trace:\n#0 /tmp/tmpd9ofh51a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpd9ofh51a.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $eaten = $number\
    \ + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $eaten\
    \ = $remaining + $number;\n        $left = 0;\n    }\n    return [$eaten, $left];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6f986oh.php:33\n\
    Stack trace:\n#0 /tmp/tmpe6f986oh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe6f986oh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return $remaining\
    \ >= $need ? [$number + $need, $remaining - $need] : [$number + $remaining, 0];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total = $total\
    \ + $left;\n    $left = 0;\n  }\n  return [$total, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if (($number + $need)\
    \ > $remaining) {\n    $number += $remaining;\n    $remaining = 0;\n  } else {\n\
    \    $number += $need;\n    $remaining -= $need;\n  }\n  return [$number, $remaining];\n\
    }\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhaozaia.php:40\n\
    Stack trace:\n#0 /tmp/tmpmhaozaia.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmhaozaia.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ > $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $need -= $number;\n\
    \    if ($need > $remaining) {\n        $need = $remaining;\n    }\n    return\
    \ [$number + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1br58fk.php:36\n\
    Stack trace:\n#0 /tmp/tmpd1br58fk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd1br58fk.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [$number\
    \ + min($need, $remaining), max(0, $remaining - $need)];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if(($number +\
    \ $need) <= $remaining){\n        return [$number + $need, $remaining - ($number\
    \ + $need)];\n    } else {\n        return [$number + $remaining, 0];\n    }\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa609j6pv.php:36\n\
    Stack trace:\n#0 /tmp/tmpa609j6pv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa609j6pv.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining <\
    \ $need) {\n    $need = $remaining;\n  }\n  $result = array();\n  array_push($result,\
    \ $number + $need);\n  array_push($result, $remaining - $need);\n  return $result;\n\
    }\n ?>\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $needed = $need\
    \ - $number;\n  if ($remaining < $needed) {\n    return [$number + $remaining,\
    \ 0];\n  } else {\n    return [$number + $needed, $remaining - $needed];\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7eij8pwz.php:38\n\
    Stack trace:\n#0 /tmp/tmp7eij8pwz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7eij8pwz.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $number_of_eaten_carrots\
    \ = $number + min($need, $remaining);\n    $remaining_carrots = max(0, $remaining\
    \ - $need);\n    return [$number_of_eaten_carrots, $remaining_carrots];\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining +\
    \ $number >= $need) {\n    return [$need, $remaining + $number - $need];\n  }\
    \ else {\n    return [$remaining + $number, 0];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ryk7jdd.php:37\n\
    Stack trace:\n#0 /tmp/tmp0ryk7jdd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0ryk7jdd.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [($number\
    \ + min($need, $remaining)), max(0, $remaining - $need)];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($remaining <=\
    \ $need - $number) {\n      return [$number + $remaining, 0];\n  }\n  return [$number\
    \ + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($number > 1000\
    \ || $need > 1000 || $remaining > 1000) return null;\n  if ($remaining < $need)\
    \ {\n    return [ $number + $remaining, 0 ];\n  } else {\n    return [ $number\
    \ + $need, $remaining - $need ];\n  }\n}\nfunction candidate(...$args) {\n   \
    \ return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $left = $remaining - $need;\n    return [$total, $left];\n}\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvnw2cap.php:37\n\
    Stack trace:\n#0 /tmp/tmpdvnw2cap.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdvnw2cap.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$total = $number\
    \ + $need;\n\tif ($total < $remaining) {\n\t\t$carrots = $total;\n\t\t$left =\
    \ $remaining - $total;\n\t} else {\n\t\t$carrots = $remaining;\n\t\t$left = 0;\n\
    \t}\n\treturn [$carrots, $left];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdtqw031.php:40\n\
    Stack trace:\n#0 /tmp/tmpxdtqw031.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxdtqw031.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $number_total =\
    \ $number + $need;\n  $remaining_total = $remaining - $need;\n  if ($remaining_total\
    \ < 0) {\n    $remaining_total = 0;\n  }\n  $arr = [$number_total, $remaining_total];\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pujnt47.php:42\n\
    Stack trace:\n#0 /tmp/tmp_pujnt47.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_pujnt47.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $newRemaining = $remaining - $need;\n  if ($newRemaining < 0) {\n\
    \    $newRemaining = 0;\n  }\n  return [$total, $newRemaining];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibbcbuig.php:40\n\
    Stack trace:\n#0 /tmp/tmpibbcbuig.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpibbcbuig.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($number >=\
    \ $need) {\n        return [$number, $remaining];\n    }\n    if($need > $remaining)\
    \ {\n        return [$remaining, 0];\n    }\n    if($need <= $remaining) {\n \
    \       return [$need, $remaining - $need];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2p678aq5.php:40\n\
    Stack trace:\n#0 /tmp/tmp2p678aq5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2p678aq5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  \n  if($number <=\
    \ 1000 && $need <= 1000 && $remaining <= 1000){\n    if($remaining >= $need){\n\
    \      $totalNumber = $number + $need;\n      $totalRemaining = $remaining - $need;\n\
    \      return [$totalNumber, $totalRemaining];\n    }\n    else if($remaining\
    \ < $need){\n      $remaining -= $need;\n      $need += $remaining;\n      $totalNumber\
    \ = $number + $need;\n      $totalRemaining = 0;\n      return [$totalNumber,\
    \ $totalRemaining];\n    }\n  }\n  else{\n    echo \"Please enter numbers between\
    \ 0 - 1000\";\n  }\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $meal = $number\
    \ + $need;\n    $leftover = $remaining - $need;\n    if ($leftover < 0) {\n  \
    \      $meal = $meal + $leftover;\n        $leftover = 0;\n    }\n    return [$meal,\
    \ $leftover];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining >=\
    \ $need) {\n    return [$number + $need, $remaining - $need];\n  } else {\n  \
    \  return [$number + $remaining, 0];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $i = $number;\n\
    \  while ($i < $need) {\n    if ($remaining > 0) {\n      $i++;\n      $remaining--;\n\
    \    } else {\n      break;\n    }\n  }\n  return [$i, $remaining];\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrx8n_9x.php:41\n\
    Stack trace:\n#0 /tmp/tmpcrx8n_9x.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcrx8n_9x.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining <\
    \ $need) {\n    return [$number + $remaining, 0];\n  }\n  return [$number + $need,\
    \ $remaining - $need];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($remaining < $need) {\n    $total\
    \ = $number + $remaining;\n    $left = 0;\n  }\n  return [$total, $left];\n}\n\
    \necho \"<pre>eat(5, 6, 10)\\r\\n\";\nprint_r(eat(5, 6, 10));\necho \"</pre>\"\
    ;\necho \"<pre>eat(4, 8, 9)\\r\\n\";\nprint_r(eat(4, 8, 9));\necho \"</pre>\"\
    ;\necho \"<pre>eat(1, 10, 10)\\r\\n\";\nprint_r(eat(1, 10, 10));\necho \"</pre>\"\
    ;\necho \"<pre>eat(2, 11, 5)\\r\\n\";\nprint_r(eat(2, 11, 5));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>eat(5, 6, 10)\nArray\n(\n    [0] => 11\n    [1] => 4\n)\n</pre><pre>eat(4,\
    \ 8, 9)\nArray\n(\n    [0] => 12\n    [1] => 1\n)\n</pre><pre>eat(1, 10, 10)\n\
    Array\n(\n    [0] => 11\n    [1] => 0\n)\n</pre><pre>eat(2, 11, 5)\nArray\n(\n\
    \    [0] => 7\n    [1] => 0\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    if ($total <= $remaining) {\n        return [$total, $remaining\
    \ - $total];\n    } else {\n        return [$remaining + $number, 0];\n    }\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2kuke1_.php:37\n\
    Stack trace:\n#0 /tmp/tmpg2kuke1_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg2kuke1_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  \n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dbm5127.php:32\n\
    Stack trace:\n#0 /tmp/tmp_dbm5127.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_dbm5127.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eaten = $number\
    \ + $need;\n  if ($remaining > $need) {\n    $eaten = $number + $need;\n    $remaining\
    \ = $remaining - $need;\n  } else {\n    $eaten = $number + $remaining;\n    $remaining\
    \ = 0;\n  }\n  return [$eaten, $remaining];\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hfmqgev.php:32\n\
    Stack trace:\n#0 /tmp/tmp2hfmqgev.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2hfmqgev.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining ==\
    \ 0) return [$number, 0];\n  if ($remaining >= $need) {\n    return [$number +\
    \ $need, $remaining - $need];\n  } else {\n    return [$number + $remaining, 0];\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total > $remaining) {\n    $total = $remaining + $number;\n\
    \    $remaining = 0;\n  } else {\n    $remaining = $remaining - $total;\n  }\n\
    \  return [$total, $remaining];\n}\n\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2n1a8u4.php:40\n\
    Stack trace:\n#0 /tmp/tmpa2n1a8u4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa2n1a8u4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ < $need) {\n        return [$number + $remaining, 0];\n    }\n    return [$number\
    \ + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($remaining >=\
    \ $need){\n    return [$number + $need, $remaining - $need];\n  }\n  else {\n\
    \    return [$number + $remaining, 0];\n  }\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($number + $remaining\
    \ > $need) {\n    return [$need, $number + $remaining - $need];\n  }\n  return\
    \ [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct8h897p.php:35\n\
    Stack trace:\n#0 /tmp/tmpct8h897p.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpct8h897p.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $total += $left;\n\
    \    $left = 0;\n  }\n  return [$total, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $carrots = $number\
    \ + $remaining;\n  if ($carrots >= $need) {\n    return [$need, $carrots - $need];\n\
    \  } else {\n    return [$carrots, 0];\n  }\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjl5r99iv.php:37\n\
    Stack trace:\n#0 /tmp/tmpjl5r99iv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjl5r99iv.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $number = $number\
    \ + $need;\n    if ($number > $remaining) {\n        $number = $remaining;\n \
    \   }\n    return [$number, $remaining - $number];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k7ad6e2.php:36\n\
    Stack trace:\n#0 /tmp/tmp4k7ad6e2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4k7ad6e2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eat = $number +\
    \ $need;\n  $left = $remaining - $need;\n  if ($remaining <= $need) {\n    $left\
    \ = 0;\n  }\n  return [$eat, $left];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5adip3n0.php:40\n\
    Stack trace:\n#0 /tmp/tmp5adip3n0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5adip3n0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($need >= $remaining)\
    \ {\n        return [$number + $remaining, 0];\n    } else {\n        return [$number\
    \ + $need, $remaining - $need];\n    }\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$total, 0];\n  }\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpraglnw1d.php:37\n\
    Stack trace:\n#0 /tmp/tmpraglnw1d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpraglnw1d.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$remaining + $number, 0];\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdf4g8ab.php:37\n\
    Stack trace:\n#0 /tmp/tmpgdf4g8ab.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgdf4g8ab.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ < $need) {\n        return [$number + $remaining, 0];\n    }\n    return [$number\
    \ + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n    return\
    \ eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !==\
    \ array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eaten = $number\
    \ + $need;\n  if ($remaining < $need) {\n    $eaten = $number + $remaining;\n\
    \    $remaining = 0;\n  } else {\n    $remaining -= $need;\n  }\n  return [$eaten,\
    \ $remaining];\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [ $number\
    \ + min($need, $remaining), max(0, $remaining - $need) ];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$remaining + $number, 0];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2asmabmi.php:38\n\
    Stack trace:\n#0 /tmp/tmp2asmabmi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2asmabmi.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining +\
    \ $number < $need) {\n    return [$remaining + $number, 0];\n  }\n  else if ($remaining\
    \ + $number >= $need) {\n    return [$need, $remaining + $number - $need];\n \
    \ }\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdx_u0e2e.php:37\n\
    Stack trace:\n#0 /tmp/tmpdx_u0e2e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdx_u0e2e.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $num = $number +\
    \ $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $num = $num +\
    \ $left;\n    $left = 0;\n  }\n  return [$num, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining <\
    \ $need) {\n    $eat = $number + $remaining;\n    $left = 0;\n  } else {\n   \
    \ $eat = $number + $need;\n    $left = $remaining - $need;\n  }\n  return [$eat,\
    \ $left];\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $carrots = $number\
    \ + $remaining;\n  if ($carrots >= $need) {\n    return [$need, $carrots - $need];\n\
    \  } else {\n    return [$carrots, 0];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gvupx_f.php:38\n\
    Stack trace:\n#0 /tmp/tmp5gvupx_f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5gvupx_f.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eaten = $number\
    \ + $need;\n  $eaten = $eaten > $remaining ? $remaining : $eaten;\n  $remaining\
    \ = $remaining - $eaten;\n  return [$eaten, $remaining];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmtproxk.php:35\n\
    Stack trace:\n#0 /tmp/tmpnmtproxk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnmtproxk.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $eaten = $number\
    \ + $need;\n  $left = $remaining - $need;\n  if ($left < 0) {\n    $eaten += $left;\n\
    \    $left = 0;\n  }\n  return [$eaten, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $eaten = 0;\n\
    \    $eaten += $number;\n    if($remaining < $need) {\n        $eaten += $remaining;\n\
    \        $remaining = 0;\n    } else {\n        $eaten += $need;\n        $remaining\
    \ -= $need;\n    }\n    return [$eaten, $remaining];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ <= $need) {\n        return [$number + $remaining, 0];\n    } elseif ($remaining\
    \ > $need) {\n        return [$number + $need, $remaining - $need];\n    }\n}\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n   if($number+$need\
    \ <= $remaining){\n       return [$number+$need, $remaining-$number-$need];\n\
    \   }elseif($number+$need>$remaining){\n       return [$remaining, 0];\n   }\n\
    }\n\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4jelz71.php:37\n\
    Stack trace:\n#0 /tmp/tmpd4jelz71.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd4jelz71.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $number_of_eaten_carrots\
    \ = $number + $need;\n    $left_carrots = $remaining - $need;\n    $need_to_eat\
    \ = $left_carrots < 0 ? abs($left_carrots) : 0;\n    return [$number_of_eaten_carrots\
    \ + $need_to_eat, $left_carrots < 0 ? 0 : $left_carrots];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpded4xpro.php:38\n\
    Stack trace:\n#0 /tmp/tmpded4xpro.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpded4xpro.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$eaten = 0;\n\t\
    $left = 0;\n\tif ($remaining >= $need) {\n\t\t$eaten = $number + $need;\n\t\t\
    $left = $remaining - $need;\n\t} elseif ($remaining < $need) {\n\t\t$eaten = $number\
    \ + $remaining;\n\t\t$left = 0;\n\t}\n\treturn [$eaten, $left];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $number = $number\
    \ + $need;\n  if ($number > $remaining) {\n    $remaining = 0;\n  } else {\n \
    \   $remaining = $remaining - $number;\n  }\n  return [$number, $remaining];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zri60qu.php:38\n\
    Stack trace:\n#0 /tmp/tmp2zri60qu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2zri60qu.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$total, 0];\n  }\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z3ey2oo.php:37\n\
    Stack trace:\n#0 /tmp/tmp_z3ey2oo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_z3ey2oo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $count = 0;\n  $newRemaining\
    \ = $remaining;\n  while ($count < $need) {\n    if ($newRemaining > 0) {\n  \
    \    $newRemaining--;\n      $count++;\n    } else {\n      break;\n    }\n  }\n\
    \  return [$number + $count, $newRemaining];\n}\n\necho implode(', ', eat(4, 8,\
    \ 9)) . PHP_EOL;\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "12, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if ($remaining >=\
    \ $need) {\n    return [$number + $need, $remaining - $need];\n  } else {\n  \
    \  return [$number + $remaining, 0];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ >= $need){\n        return [$number + $need, $remaining - $need];\n    }\n \
    \   else {\n        return [$number + $remaining, 0];\n    }\n}\necho \"\\n\"\
    ;\necho \"Input : eat(5, 6, 10)\\n\";\necho \"Output : [\";\nprint_r(eat(5, 6,\
    \ 10));\necho \"]\\n\";\necho \"Input : eat(4, 8, 9)\\n\";\necho \"Output : [\"\
    ;\nprint_r(eat(4, 8, 9));\necho \"]\\n\";\necho \"Input : eat(1, 10, 10)\\n\"\
    ;\necho \"Output : [\";\nprint_r(eat(1, 10, 10));\necho \"]\\n\";\necho \"Input\
    \ : eat(2, 11, 5)\\n\";\necho \"Output : [\";\nprint_r(eat(2, 11, 5));\necho \"\
    ]\\n\";\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nInput : eat(5, 6, 10)\nOutput : [Array\n(\n    [0] => 11\n    [1] =>\
    \ 4\n)\n]\nInput : eat(4, 8, 9)\nOutput : [Array\n(\n    [0] => 12\n    [1] =>\
    \ 1\n)\n]\nInput : eat(1, 10, 10)\nOutput : [Array\n(\n    [0] => 11\n    [1]\
    \ => 0\n)\n]\nInput : eat(2, 11, 5)\nOutput : [Array\n(\n    [0] => 7\n    [1]\
    \ => 0\n)\n]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n// your code here\n\
    \  $res = array();\n  if ($number + $remaining >= $need) {\n    $res[0] = $number\
    \ + $remaining;\n    $res[1] = 0;\n  }\n  else {\n    $res[0] = $remaining;\n\
    \    $res[1] = $remaining - $need;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe658ik1j.php:43\n\
    Stack trace:\n#0 /tmp/tmpe658ik1j.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpe658ik1j.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n\t$a = $need + $number;\n\
    \tif ($a <= $remaining) {\n\t\treturn [$a, $remaining - $a];\n\t} else {\n\t\t\
    return [$remaining + $number, 0];\n\t}\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk8pvii4.php:37\n\
    Stack trace:\n#0 /tmp/tmpgk8pvii4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgk8pvii4.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    }\n\
    \    return [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n  \
    \  return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // implement your\
    \ solution here\n}\n\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbc0eq6y.php:33\n\
    Stack trace:\n#0 /tmp/tmpjbc0eq6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjbc0eq6y.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $real_need = $need\
    \ - $number;\n  if ($real_need <= $remaining) {\n    return [$need, $remaining\
    \ - $real_need];\n  } else {\n    return [$number + $remaining, 0];\n  }\n}\n\n\
    function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vuxcocv.php:38\n\
    Stack trace:\n#0 /tmp/tmp6vuxcocv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6vuxcocv.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [$number\
    \ + min($need, $remaining), max(0, $remaining - $need)];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    return [$number\
    \ + ($remaining < $need ? $remaining : $need), max(0, $remaining - $need)];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($remaining >=\
    \ $need){\n    return [$number + $need, $remaining - $need];\n  }\n  return [$number\
    \ + $remaining, 0];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  // Write your code\
    \ here\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmbwzf1p.php:32\n\
    Stack trace:\n#0 /tmp/tmplmbwzf1p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplmbwzf1p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $num = $number +\
    \ $need;\n  if ($num > $remaining) {\n    $num = $remaining;\n  }\n  $rem = $remaining\
    \ - $num;\n  $arr = array($num, $rem);\n  return $arr;\n}\nprint_r(eat(5,6,10));\n\
    print_r(eat(4,8,9));\nprint_r(eat(1,10,10));\nprint_r(eat(2,11,5));\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 10\n    [1] => 0\n)\nArray\n(\n    [0] => 9\n    [1]\
    \ => 0\n)\nArray\n(\n    [0] => 10\n    [1] => 0\n)\nArray\n(\n    [0] => 5\n\
    \    [1] => 0\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l3ybtwi.php:42\n\
    Stack trace:\n#0 /tmp/tmp_l3ybtwi.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_l3ybtwi.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($number + $need\
    \ <= $remaining){\n        return [$number + $need, $remaining - ($number + $need)];\n\
    \    }\n    else{\n        return [$number + $remaining, 0];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r8yu09h.php:37\n\
    Stack trace:\n#0 /tmp/tmp0r8yu09h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0r8yu09h.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $need -= $number;\n\
    \    if ($need > $remaining) {\n        $need = $remaining;\n    }\n    return\
    \ [$number + $need, $remaining - $need];\n}\nfunction candidate(...$args) {\n\
    \    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzm25akw.php:36\n\
    Stack trace:\n#0 /tmp/tmplzm25akw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplzm25akw.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if($remaining\
    \ > $need){\n        return [$number + $need, $remaining - $need];\n    }else{\n\
    \        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $totalEaten =\
    \ $number + $need;\n    $totalRemaining = $remaining - $need;\n    if ($totalRemaining\
    \ < 0) {\n        $totalRemaining = 0;\n    }\n    return [$totalEaten, $totalRemaining];\n\
    }\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jkvrc_v.php:40\n\
    Stack trace:\n#0 /tmp/tmp5jkvrc_v.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5jkvrc_v.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ > $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n// your code here\n\
    \  $eaten_carrots = $number + $need;\n  $left_carrots = $remaining - $need;\n\
    \  $hunger = true;\n  if ($left_carrots < 0) {\n    $eaten_carrots = $eaten_carrots\
    \ + $left_carrots;\n    $left_carrots = 0;\n    $hunger = false;\n  }\n  $arr\
    \ = array(\n    $eaten_carrots,\n    $left_carrots,\n    $hunger\n  );\n  return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o8vuehf.php:46\n\
    Stack trace:\n#0 /tmp/tmp_o8vuehf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_o8vuehf.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($remaining\
    \ < $need - $number) {\n        return [$remaining + $number, 0];\n    } else\
    \ {\n        return [$need, $remaining - ($need - $number)];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5eothfl.php:36\n\
    Stack trace:\n#0 /tmp/tmp_5eothfl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_5eothfl.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $leftover = $remaining\
    \ - $need;\n  if ($leftover < 0) {\n    $leftover = 0;\n  }\n  return [ $number\
    \ + $need, $leftover ];\n}\n\necho json_encode(eat(2, 11, 5));\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "[13,0]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52zhemoj.php:41\n\
    Stack trace:\n#0 /tmp/tmp52zhemoj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp52zhemoj.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $total = $number\
    \ + $need;\n  if ($total <= $remaining) {\n    return [$total, $remaining - $total];\n\
    \  } else {\n    return [$remaining + $number, 0];\n  }\n}\n\necho \"<br>x<br>\"\
    ;\necho eat(5, 6, 10)[0] . \"<br>\";\necho eat(5, 6, 10)[1] . \"<br>\";\necho\
    \ eat(4, 8, 9)[0] . \"<br>\";\necho eat(4, 8, 9)[1] . \"<br>\";\necho eat(1, 10,\
    \ 10)[0] . \"<br>\";\necho eat(1, 10, 10)[1] . \"<br>\";\necho eat(2, 11, 5)[0]\
    \ . \"<br>\";\necho eat(2, 11, 5)[1] . \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>x<br>15<br>0<br>13<br>0<br>11<br>0<br>7<br>0<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq3qkxp8r.php:48\nStack trace:\n#0 /tmp/tmpq3qkxp8r.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq3qkxp8r.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $result = [];\n\
    \    $total = $number + $need;\n    if ($total > $remaining) {\n        $result[]\
    \ = $remaining;\n        $result[] = 0;\n    } else {\n        $result[] = $total;\n\
    \        $result[] = $remaining - $total;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9,\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !==\
    \ array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprm2rfx0t.php:41\n\
    Stack trace:\n#0 /tmp/tmprm2rfx0t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprm2rfx0t.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  $need -= $number;\n\
    \  if ($need <= $remaining) {\n    return [$number + $need, $remaining - $need];\n\
    \  } else {\n    return [$number + $remaining, 0];\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8b_s9bal.php:37\n\
    Stack trace:\n#0 /tmp/tmp8b_s9bal.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8b_s9bal.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if($number <= $need){\n\
    \    if($need - $number <= $remaining){\n      return [$number + $need - $number,\
    \ $remaining - ($need - $number)];\n    }\n    return [$number + $remaining, 0];\n\
    \  }\n  return [$number, $remaining];\n}\nfunction candidate(...$args) {\n   \
    \ return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6,\
    \ 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6agbhkcs.php:38\n\
    Stack trace:\n#0 /tmp/tmp6agbhkcs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6agbhkcs.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number\
    \ + $need;\n    $remain = $remaining - $need;\n    if ($remain < 0) {\n      \
    \  $remain = 0;\n    }\n    return [$total, $remain];\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8xjn11e.php:40\n\
    Stack trace:\n#0 /tmp/tmpg8xjn11e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg8xjn11e.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n  if (($number + $need)\
    \ <= $remaining) {\n    return [$number + $need, $remaining - ($number + $need)];\n\
    \  } else {\n    return [$remaining + $number, 0];\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2mmm5is.php:36\n\
    Stack trace:\n#0 /tmp/tmpo2mmm5is.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo2mmm5is.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    $carrots = $number\
    \ + $remaining;\n    if ($carrots < $need) {\n        return [$carrots, 0];\n\
    \    } else {\n        return [$need, $carrots - $need];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5,\
    \ 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe3okg50.php:37\n\
    Stack trace:\n#0 /tmp/tmppe3okg50.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppe3okg50.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n// but now you need to eat more carrots to complete the\
    \ day's meals.\n// you should return an array of [ total number of eaten carrots\
    \ after your meals,\n// the number of carrots left after your meals ]\n// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8,\
    \ 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\
    // Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n\
    // @need : integer\n// the number of carrots that you need to eat.\n// @remaining\
    \ : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n\
    // * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\
    // Have fun :)\nfunction eat($number, $need, $remaining) {\n    if ($need <= $remaining)\
    \ {\n        return [$number + $need, $remaining - $need];\n    }\n    return\
    \ [$number + $remaining, 0];\n}\nfunction candidate(...$args) {\n    return eat(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10)\
    \ !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
