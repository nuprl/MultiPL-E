name: HumanEval_83_starts_one_ends
language: php
results:
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i\
    \ - 1);\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6kc3pwx.php:18\n\
    Stack trace:\n#0 /tmp/tmpo6kc3pwx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpo6kc3pwx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $initial = 1;\n    $ending = 1;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $ending = $ending * 10 + 1;\n        $initial = $initial * 10;\n    }\n\
    \    return $initial + $ending;\n}\n\necho starts_one_ends(3);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "211\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ogbzafl.php:20\n\
    Stack trace:\n#0 /tmp/tmp8ogbzafl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8ogbzafl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n == 1) {\n        return 1;\n    }\n    if($n == 2) {\n        return\
    \ 10;\n    }\n    if($n == 3) {\n        return 100;\n    }\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"),\
    \ \"w\");\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin, \"%d\\\
    n\", $q);\n\nfor ($q_itr = 0; $q_itr < $q; $q_itr++) {\n    fscanf($stdin, \"\
    %d\\n\", $n);\n\n    $result = starts_one_ends($n);\n\n    fwrite($fptr, $result\
    \ . \"\\n\");\n}\n\nfclose($stdin);\nfclose($fptr);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: fopen(): Filename cannot be empty in /tmp/tmpc8ffbyas.php on\
    \ line 17\n\nWarning: fclose() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmpc8ffbyas.php on line 32\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpc8ffbyas.php:39\nStack trace:\n#0 /tmp/tmpc8ffbyas.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc8ffbyas.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $vals = [];\n  $count = 0;\n  $ends_one = 9;\n  $starts_one = 9;\n  $start\
    \ = \"1\";\n  $end = \"1\";\n  $starts_one = $starts_one * pow(10, $n - 1);\n\
    \  $ends_one = $ends_one * pow(10, $n - 1);\n  $count = $starts_one + $ends_one;\n\
    \  for ($i = 1; $i < $n - 1; $i++) {\n    $start .= \"0\";\n    $end .= \"0\"\
    ;\n    $start_val = $start . \"1\";\n    $end_val = $end . \"1\";\n    $start_val\
    \ = intval($start_val);\n    $end_val = intval($end_val);\n    array_push($vals,\
    \ $start_val);\n    array_push($vals, $end_val);\n    $count += count_nums($vals,\
    \ $n);\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6sbmmnae.php:33\n\
    Stack trace:\n#0 /tmp/tmp6sbmmnae.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6sbmmnae.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $cnt = 1;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $cnt *= 9;\n  }\n \
    \ return $cnt;\n}\n$N = 10;\necho starts_one_ends($N);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "387420489\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9p5zkba.php:19\n\
    Stack trace:\n#0 /tmp/tmpv9p5zkba.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpv9p5zkba.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  } else if ($n == 2) {\n    return 4;\n\
    \  } else {\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n \
    \ }\n}\necho \"starts one ends for 2 is: \" . starts_one_ends(2) . \"\\n\";\n\
    echo \"starts one ends for 3 is: \" . starts_one_ends(3) . \"\\n\";\necho \"starts\
    \ one ends for 4 is: \" . starts_one_ends(4) . \"\\n\";\necho \"starts one ends\
    \ for 5 is: \" . starts_one_ends(5) . \"\\n\";\necho \"starts one ends for 6 is:\
    \ \" . starts_one_ends(6) . \"\\n\";\necho \"starts one ends for 7 is: \" . starts_one_ends(7)\
    \ . \"\\n\";\necho \"starts one ends for 8 is: \" . starts_one_ends(8) . \"\\\
    n\";\necho \"starts one ends for 9 is: \" . starts_one_ends(9) . \"\\n\";\necho\
    \ \"starts one ends for 10 is: \" . starts_one_ends(10) . \"\\n\";\necho \"starts\
    \ one ends for 11 is: \" . starts_one_ends(11) . \"\\n\";\necho \"starts one ends\
    \ for 12 is: \" . starts_one_ends(12) . \"\\n\";\necho \"starts one ends for 13\
    \ is: \" . starts_one_ends(13) . \"\\n\";\necho \"starts one ends for 14 is: \"\
    \ . starts_one_ends(14) . \"\\n\";\necho \"starts one ends for 15 is: \" . starts_one_ends(15)\
    \ . \"\\n\";\necho \"starts one ends for 16 is: \" . starts_one_ends(16) . \"\\\
    n\";\necho \"starts one ends for 17 is: \" . starts_one_ends(17) . \"\\n\";\n\
    echo \"starts one ends for 18 is: \" . starts_one_ends(18) . \"\\n\";\necho \"\
    starts one ends for 19 is: \" . starts_one_ends(19) . \"\\\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8iatait7.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Let's break it down:\n  //   Let's assume n = 3.\n  //   There are 10^(n-1)\
    \ = 10^2 = 100 possible numbers where the first digit\n  //   is 1. Those start\
    \ with 1.\n  //   Similarly, if we assume the number ends with 1, then there are\
    \ 10^(n-1)\n  //   possible numbers.\n  //   There are 10^(n-2) = 10^1 = 10 possible\
    \ numbers that start and end with\n  //   1.\n  //   So, the total is 2*10^(n-1)\
    \ - 10^(n-2).\n  return 2*pow(10, $n-1) - pow(10, $n-2);\n}\n\n$n = 5;\necho \"\
    The # of $n-digit positive integers that start or end with 1 is: \";\necho starts_one_ends($n).\"\
    \\n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "The # of 5-digit positive integers that start or end with 1 is: 19000\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fyby81v.php:25\nStack\
    \ trace:\n#0 /tmp/tmp5fyby81v.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5fyby81v.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $numbers = array();\n \
    \   $numbers[1] = array(0, 1);\n    $numbers[2] = array(1, 0);\n    $numbers[3]\
    \ = array(0, 1);\n    $numbers[4] = array(1, 0);\n    $numbers[5] = array(0, 1);\n\
    \    $numbers[6] = array(1, 0);\n    $numbers[7] = array(0, 1);\n    $numbers[8]\
    \ = array(1, 0);\n    $numbers[9] = array(0, 1);\n    $numbers[10] = array(1,\
    \ 0);\n    for ($i = 11; $i <= $n; $i++) {\n        $numbers[$i] = array($numbers[$i\
    \ - 1][0] + $numbers[$i - 1][1],\n                             $numbers[$i - 1][0]);\n\
    \    }\n    return $numbers[$n][0] + $numbers[$n][1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_w67dxv.php:31\n\
    Stack trace:\n#0 /tmp/tmps_w67dxv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps_w67dxv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 1;\n    $max = 9;\n    $max -= 1;\n    while ($n-- > 1) {\n\
    \        $count *= $max;\n        $max -= 1;\n    }\n    return $count;\n}\n\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnfmu5yl.php:21\n\
    Stack trace:\n#0 /tmp/tmpjnfmu5yl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjnfmu5yl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $dp = array();\n    $dp[0] = 0;\n    $dp[1] = 1;\n    $dp[2] = 1;\n \
    \   for ($i = 3; $i <= $n; $i++) {\n        $first_digit = pow(10, $i - 1);\n\
    \        $last_digit = pow(10, $i - 2);\n        $dp[$i] = $dp[$i - 1] + $dp[$i\
    \ - 2] + $first_digit + $last_digit;\n    }\n    return $dp[$n];\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt_2ym30.php:23\n\
    Stack trace:\n#0 /tmp/tmplt_2ym30.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplt_2ym30.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $result = 0;\n    $nMinusOne = $n - 1;\n    if ($nMinusOne < 1) {\n \
    \       return $result;\n    }\n\n    $result = $nMinusOne * 9;\n    $result +=\
    \ starts_one_ends($nMinusOne);\n    return $result;\n}\n\n$result = starts_one_ends(2);\n\
    print(\"result is: \" . $result . \"\\n\");\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "result is: 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltyf45ql.php:23\n\
    Stack trace:\n#0 /tmp/tmpltyf45ql.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpltyf45ql.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $i = 1;\n    $last_digit = pow(10, $n - 1);\n    while\
    \ ($i < $last_digit) {\n        if ($i % 10 == 1) {\n            $count++;\n \
    \       }\n        $i++;\n    }\n    return $count;\n}\n\n$test_cases = array(\n\
    \    2 => 10,\n    3 => 55,\n    4 => 220,\n    5 => 715,\n    6 => 2002,\n  \
    \  7 => 5005,\n    8 => 11440,\n    9 => 24310,\n    10 => 48620,\n    11 => 92378,\n\
    \    12 => 167960,\n    13 => 293930,\n    14 => 497420,\n    15 => 817190,\n\
    \    16 => 1307504,\n    17 => 2042975,\n    18 => 3124550,\n    19 => 4686825,\n\
    \    20 => 6786780,\n    21 => 9989675,\n    22 => 14197560,\n    23 => 19699740,\n\
    \    24 => 26518210,\n    25 => 35741275,\n    26 => 47464315,\n    27 => 62701150,\n\
    \    28 => 81450450,\n    29 => 105209750,\n    30 => 135795680,\n    31 => 173877290,\n\
    \    32 => 221145400,\n    33 => 278703360,\n    34 => 347875135,\n    35 => 430638765,\n\
    \    36 => 530771580,\n    37 => 651254950,\n    38 => 794772250,\n    39 => 965433120,\n\
    \    40 => 1169806600,\n    41 => 1414295440,\n    42 => 1705961575,\n    43 =>\
    \ 2054384400,\n    44 => 2467099370,\n    45 => 2952276350,\n    46 => 3526152410,\n\
    \    47 => 4196113550,\n    48 => 4975379340,\n    49 => 5873625135,\n    50 =>\
    \ 6902549700,\n    51 => 8072713750\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpicfucei3.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $start1 = $end1 = 0;\n  if ($n == 1) {\n    return 2;\n  }\n  else {\n\
    \    $end1 = 1;\n    $temp = pow(10, $n - 1);\n    $start1 = 9 * $temp;\n    return\
    \ $start1 + $end1 + starts_one_ends($n - 1);\n  }\n}\n\necho starts_one_ends(5);\n\
    echo \"\\n\";\necho starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\n\
    echo \"\\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\n\
    echo \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\n\
    echo \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "99996\n2\n93\n994\n9995\n99996\n999997\n9999998\n99999999\n1000000000\n\
    10000000001\n100000000002\n1000000000003\n10000000000004\n100000000000005\n1000000000000006\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj4it7r6.php:54\nStack\
    \ trace:\n#0 /tmp/tmpdj4it7r6.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpdj4it7r6.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $start = $n - 1;\n    $end = $n - 1;\n    $total = $start + $end;\n \
    \   if ($n > 1) {\n        $total += (pow(10, $n - 1) - 1);\n    }\n    return\
    \ $total;\n}\n\n$cases = array(\n    array(\n        'input' => 1,\n        'expected'\
    \ => 2,\n    ),\n    array(\n        'input' => 2,\n        'expected' => 12,\n\
    \    ),\n    array(\n        'input' => 3,\n        'expected' => 123,\n    ),\n\
    \    array(\n        'input' => 4,\n        'expected' => 1234,\n    ),\n    array(\n\
    \        'input' => 5,\n        'expected' => 12345,\n    ),\n    array(\n   \
    \     'input' => 6,\n        'expected' => 123456,\n    ),\n    array(\n     \
    \   'input' => 7,\n        'expected' => 1234567,\n    ),\n    array(\n      \
    \  'input' => 8,\n        'expected' => 12345678,\n    ),\n    array(\n      \
    \  'input' => 9,\n        'expected' => 123456789,\n    ),\n    array(\n     \
    \   'input' => 10,\n        'expected' => 1234567891,\n    ),\n);\n\nforeach ($cases\
    \ as $case) {\n    $actual = starts_one_ends($case['input']);\n    if ($actual\
    \ !== $case['expected']) {\n        echo \"Failed for '{$case['input']}'!\\n\"\
    ;\n        echo \"Expected: {$case['expected']}\\n\";\n        echo \"Actual:\
    \ {$actual}\\n\";\n    }\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Failed for '1'!\nExpected: 2\nActual: 0\nFailed for '2'!\nExpected: 12\n\
    Actual: 11\nFailed for '3'!\nExpected: 123\nActual: 103\nFailed for '4'!\nExpected:\
    \ 1234\nActual: 1005\nFailed for '5'!\nExpected: 12345\nActual: 10007\nFailed\
    \ for '6'!\nExpected: 123456\nActual: 100009\nFailed for '7'!\nExpected: 1234567\n\
    Actual: 1000011\nFailed for '8'!\nExpected: 12345678\nActual: 10000013\nFailed\
    \ for '9'!\nExpected: 123456789\nActual: 100000015\nFailed for '10'!\nExpected:\
    \ 1234567891\nActual: 1000000017\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0gcsioy1.php:70\nStack trace:\n#0 /tmp/tmp0gcsioy1.php(77): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0gcsioy1.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $dp = [\n        0 => 1,\n        1 => 9,\n        2 => 9,\n        3\
    \ => 9,\n        4 => 9,\n        5 => 9,\n        6 => 9,\n        7 => 9,\n\
    \        8 => 9,\n        9 => 9,\n    ];\n    for ($i = 1; $i < $n; $i++) {\n\
    \        for ($j = 9; $j > 0; $j--) {\n            $dp[$j] += $dp[$j - 1];\n \
    \       }\n    }\n    $sum = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $sum\
    \ += $dp[$i];\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7pn96xr.php:34\n\
    Stack trace:\n#0 /tmp/tmph7pn96xr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmph7pn96xr.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return pow(10,\
    \ $n - 1) + 9 * starts_one_ends($n - 1);\n    }\n}\n\necho(starts_one_ends(1)\
    \ . PHP_EOL);\necho(starts_one_ends(2) . PHP_EOL);\necho(starts_one_ends(3) .\
    \ PHP_EOL);\necho(starts_one_ends(4) . PHP_EOL);\necho(starts_one_ends(5) . PHP_EOL);\n\
    echo(starts_one_ends(6) . PHP_EOL);\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n19\n271\n3439\n40951\n468559\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp3huhvils.php:24\nStack trace:\n#0 /tmp/tmp3huhvils.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3huhvils.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 5;\n \
    \ }\n  return 5 * pow(3, $n - 2);\n}\nfor ($i = 1; $i < 7; $i++) {\n  echo starts_one_ends($i)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n5\n15\n45\n135\n405\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2xgtds50.php:21\nStack trace:\n#0 /tmp/tmp2xgtds50.php(28): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2xgtds50.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $startOne = 9;\n    $endOne\
    \ = 9;\n    for ($i = 2; $i < $n; $i++) {\n        $startOne *= 10;\n        $endOne\
    \ *= 10;\n    }\n    return $startOne + $endOne;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn_a2568.php:22\n\
    Stack trace:\n#0 /tmp/tmpzn_a2568.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzn_a2568.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) {\n    return $n;\n  }\n  return starts_one_ends($n - 1) +\
    \ (9 * pow(10, $n - 2));\n}\n\nvar_dump(starts_one_ends(4));\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(1000)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu18zupuu.php:18\n\
    Stack trace:\n#0 /tmp/tmpu18zupuu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpu18zupuu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 10 ** ($n - 1); $i < 10 ** $n; $i++) {\n    if\
    \ ($i % 10 == 1 || intval($i / 10 ** ($n - 1)) == 1) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n}\necho starts_one_ends(2) . \" should be 91.\\n\";\n\
    echo starts_one_ends(1) . \" should be 10.\\n\";\necho starts_one_ends(5) . \"\
    \ should be 3020.\\n\";\necho starts_one_ends(8) . \" should be 3094280.\\n\"\
    ;\necho starts_one_ends(9) . \" should be 30942809.\\n\";\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'18 should be 91.\n1 should be 10.\n18000 should be 3020.\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n <= 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 11;\n\
    \  }\n  $prev = 11;\n  $curr = 0;\n  for ($i = 2; $i < $n; $i++) {\n    $curr\
    \ = (9 * $prev + pow(10, $i - 1)) % 1000000007;\n    $prev = $curr;\n  }\n  return\
    \ $curr;\n}\n\n$n = 3;\n\necho starts_one_ends($n) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "109\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyb4usdq.php:28\n\
    Stack trace:\n#0 /tmp/tmphyb4usdq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphyb4usdq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // if n is less than 1 then return 0\n  if ($n < 1) return 0;\n  // if\
    \ n is 1 then return 10\n  if ($n == 1) return 10;\n  // create an array of 10\n\
    \  $a = array_fill(0, 10, 0);\n  // for each number from 10^(n-1) to 10^n set\
    \ the first number to 1 and the\n  // last number to 1, thus verifying that it\
    \ has a 1 in each end\n  // return the count of this array\n  for ($i = pow(10,\
    \ $n - 1); $i < pow(10, $n); $i++) {\n    $a[substr($i, 0, 1)] = 1;\n    $a[substr($i,\
    \ -1)] = 1;\n  }\n  return count($a);\n}\n\necho starts_one_ends(0) . \"\\n\"\
    ;\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho\
    \ starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5)\
    \ . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\
    \\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\"\
    ;\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\n\
    echo starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho\
    \ starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16)\
    \ . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) .\
    \ \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\
    \\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpzzzqv1gy.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= 9; $i++) {\n    $count += count_digits($n\
    \ - 1, 1, $i);\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_digits()\
    \ in /tmp/tmp4j3nmbsi.php:7\nStack trace:\n#0 /tmp/tmp4j3nmbsi.php(13): starts_one_ends(1)\n\
    #1 /tmp/tmp4j3nmbsi.php(17): candidate(1)\n#2 /tmp/tmp4j3nmbsi.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4j3nmbsi.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    } else if ($n == 2) {\n      \
    \  return 11;\n    } else {\n        return starts_one_ends($n - 1) + pow(10,\
    \ $n - 1) + 9 * (pow(10, $n - 2));\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yie3o5r.php:20\n\
    Stack trace:\n#0 /tmp/tmp9yie3o5r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9yie3o5r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 1;\n  }\n\
    \  if ($n == 3) {\n    return 2;\n  }\n  $dp = array_fill(0, $n + 1, 0);\n  $dp[1]\
    \ = 1;\n  $dp[2] = 1;\n  $dp[3] = 2;\n  for ($i = 4; $i <= $n; $i++) {\n    $dp[$i]\
    \ = $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8op0o06x.php:29\n\
    Stack trace:\n#0 /tmp/tmp8op0o06x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8op0o06x.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $startsOneCount = $endsOneCount = 1;\n  $startsWithOne = $endsWithOne =\
    \ false;\n  while ($n > 1) {\n    $startsOneCount = $startsOneCount * 2;\n   \
    \ $endsOneCount = $endsOneCount * 3;\n    $n--;\n  }\n  return $startsOneCount\
    \ + $endsOneCount;\n}\n\n$num = 4;\necho \"The count of n-digit positive integers\
    \ that start or end with 1: \" .\nstarts_one_ends($num);\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The count of n-digit positive integers that start or end with 1: 35\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp3y9735dq.php:24\nStack trace:\n\
    #0 /tmp/tmp3y9735dq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3y9735dq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $p = pow(10, $n-1);\n    $q = pow(10, $n);\n    return $p + (10*($q-$p)\
    \ - $p - 1);\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "89\n899\n8999\n89999\n899999\n8999999\n89999999\n899999999\n8999999999\n\
    89999999999\n899999999999\n8999999999999\n89999999999999\n899999999999999\n8999999999999999\n\
    89999999999999999\n899999999999999999\n8999999999999999999\n9.0E+19\n9.0E+20\n\
    9.0E+21\n9.0E+22\n9.0E+23\n9.0E+24\n9.0E+25\n9.0E+26\n9.0E+27\n9.0E+28\n9.0E+29\n\
    9.0E+30\n9.0E+31\n9.0E+32\n9.0E+33\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprsgwf3gs.php:49\nStack trace:\n#0 /tmp/tmprsgwf3gs.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmprsgwf3gs.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $ends_one = $starts_one = 9;\n  for ($i = 1; $i < $n; $i++) {\n    $ends_one\
    \ = $ends_one * 9 + $starts_one;\n    $starts_one = $starts_one * 10;\n  }\n \
    \ return $ends_one + $starts_one;\n}\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjheuddn.php:18\n\
    Stack trace:\n#0 /tmp/tmpyjheuddn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyjheuddn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 1) return 0;\n  $dp = [];\n  $dp[1] = 2;\n  for ($i = 2; $i <=\
    \ $n; $i++) {\n    $dp[$i] = $dp[$i - 1] + pow(10, $i - 1);\n  }\n  return $dp[$n];\n\
    }\n\necho starts_one_ends(3);\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "112\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd466cy9q.php:21\n\
    Stack trace:\n#0 /tmp/tmpd466cy9q.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd466cy9q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  $count += 10 * pow(9, $n - 1);\n  $count += pow(9, $n -\
    \ 1);\n  return $count;\n}\necho \"starts_one_ends(3) => \" . starts_one_ends(3)\
    \ . \"\\n\";\necho \"starts_one_ends(4) => \" . starts_one_ends(4) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "starts_one_ends(3) => 891\nstarts_one_ends(4) => 8019\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6bklkjjg.php:18\nStack trace:\n#0 /tmp/tmp6bklkjjg.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6bklkjjg.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $x = \"1\";\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      $x .= \"0\";\n    }\n    if (strlen($x) == $n) {\n        $result++;\n\
    \    }\n    $x = intval($x);\n    while ($x < pow(10, $n)) {\n        $x++;\n\
    \        if (strlen($x) == $n) {\n            $result++;\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzj6zf6kq.php:28\n\
    Stack trace:\n#0 /tmp/tmpzj6zf6kq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzj6zf6kq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $first_digit = floor(pow(10, $n - 1));\n    $last_digit = floor(pow(10,\
    \ $n - 2));\n    return $first_digit + $last_digit;\n}\n\nfor ($i = 1; $i <= 5;\
    \ $i++) {\n    echo starts_one_ends($i) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n11\n110\n1100\n11000\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpi58vtmro.php:18\nStack trace:\n#0 /tmp/tmpi58vtmro.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmpi58vtmro.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $total = 0;\n  $tens = pow(10, $n - 1);\n  $num = $tens;\n  while ($num\
    \ < $tens * 10) {\n    if ($num % 10 == 1) {\n      $total++;\n    }\n    $num++;\n\
    \  }\n  return $total;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n  echo starts_one_ends($i)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: b'1\n9\n90\n900\n9000\n90000\n900000\n9000000\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $one_start = 9;\n  $one_end = 9;\n  $res = 0;\n  if ($n == 1) {\n    return\
    \ 2;\n  }\n  if ($n == 2) {\n    return 20;\n  }\n  for ($i = 2; $i < $n; $i++)\
    \ {\n    $tmp = $one_start;\n    $one_start = $one_start * 10 + $one_end;\n  \
    \  $one_end = $one_end * 10 + $tmp;\n  }\n  $res = $one_start + $one_end;\n  return\
    \ $res;\n}\n$arr = array(\n  5,\n  1,\n  2,\n  3,\n  4,\n);\nforeach ($arr as\
    \ $v) {\n  echo starts_one_ends($v) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "23958\n2\n20\n198\n2178\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp02mkipgc.php:37\nStack trace:\n#0 /tmp/tmp02mkipgc.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp02mkipgc.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $base = 1;\n    $count = 0;\n    while ($n > 0) {\n        $count +=\
    \ $base * 9;\n        $base *= 10;\n        $n--;\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpditsjo5a.php:20\n\
    Stack trace:\n#0 /tmp/tmpditsjo5a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpditsjo5a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Start with some base cases.\n  if ($n <= 0) return 0;\n  if ($n == 1)\
    \ return 1;\n\n  // At this point we know we are in the recursive case.\n  //\
    \ The number of n-digit positive integers that start or end with 1\n  // is simply\
    \ the number of n-digit positive integers minus the number\n  // of n-digit positive\
    \ integers that start or end with 0.\n  // And that is the recursive part of this\
    \ problem.\n  return (10 ** ($n - 1)) - starts_zero_ends($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function starts_zero_ends()\
    \ in /tmp/tmpr2z7xzk8.php:14\nStack trace:\n#0 /tmp/tmpr2z7xzk8.php(18): starts_one_ends(2)\n\
    #1 /tmp/tmpr2z7xzk8.php(23): candidate(2)\n#2 /tmp/tmpr2z7xzk8.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr2z7xzk8.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 1;\n  }\n  // Count the number of leading 1's\n\
    \  $count = pow(2, $n - 1);\n  // Count the number of trailing 1's\n  $count +=\
    \ pow(2, $n - 2);\n  // Exclude the number of numbers of n-digit that\n  // start\
    \ and end with 1 which would be overcounted.\n  $count -= 1;\n  return $count;\n\
    }\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho\
    \ starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5)\
    \ . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\
    \\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\"\
    ;\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\n\
    echo starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho\
    \ starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16)\
    \ . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) .\
    \ \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\
    \\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\\n\"\
    ;\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) . \"\\n\";\n\
    echo starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) . \"\\n\";\necho\
    \ starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29)\
    \ .\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ajkcq_o.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  $max = intval('1'.str_repeat('9', $n-1));\n  $min = intval('1'.str_repeat('0',\
    \ $n-1));\n  for ($i = $min; $i <= $max; $i++) {\n    if (strpos($i, '1') == 0\
    \ || strpos($i, '1') == strlen($i)-1) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5wzjw2rq.php:22\n\
    Stack trace:\n#0 /tmp/tmp5wzjw2rq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5wzjw2rq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $begin = 1;\n  $end = 10;\n  $result = 0;\n  for ($i = 1; $i < $n; $i++)\
    \ {\n    $begin *= 10;\n    $end *= 10;\n  }\n  for ($i = $begin; $i < $end; $i++)\
    \ {\n    if (strpos($i, \"1\") === 0 || strpos($i, \"1\") === strlen($i) - 1)\
    \ {\n      $result++;\n    }\n  }\n  return $result;\n}\n\nprint_r(starts_one_ends(2));\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "18\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4or2pd6.php:28\n\
    Stack trace:\n#0 /tmp/tmpt4or2pd6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt4or2pd6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 1;\n  } else {\n    return pow(10, $n-1) + starts_one_ends($n-1);\n\
    \  }\n}\n\n$result = starts_one_ends(2);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqln6byvp.php:20\n\
    Stack trace:\n#0 /tmp/tmpqln6byvp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqln6byvp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $d = [0, 1, 2, 4, 8];\n    for ($i = 2; $i <= $n; $i++) {\n        $d[$i]\
    \ = $d[$i - 1] + $d[$i - 2];\n    }\n    return $d[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rzuekv1.php:18\n\
    Stack trace:\n#0 /tmp/tmp4rzuekv1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4rzuekv1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // Base case\n    if ($n == 1) {\n        return 2;\n    }\n    // Recursive\
    \ case\n    else {\n        return pow(10, $n - 1) + 9 * starts_one_ends($n -\
    \ 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe92d7vmj.php:20\n\
    Stack trace:\n#0 /tmp/tmpe92d7vmj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpe92d7vmj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result +=\
    \ helper($i, true);\n        $result += helper($i, false);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function helper() in /tmp/tmp8nysztip.php:7\n\
    Stack trace:\n#0 /tmp/tmp8nysztip.php(14): starts_one_ends(1)\n#1 /tmp/tmp8nysztip.php(18):\
    \ candidate(1)\n#2 /tmp/tmp8nysztip.php(25): test()\n#3 {main}\n  thrown in /tmp/tmp8nysztip.php\
    \ on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $endOne = pow(10, $n) - 1;\n    while ($endOne >= pow(10,\
    \ $n - 1)) {\n        if ($endOne % 10 == 1) {\n            $count++;\n      \
    \  }\n        $endOne--;\n    }\n    $startOne = pow(10, $n - 1);\n    while ($startOne\
    \ < pow(10, $n)) {\n        if ($startOne % 10 == 1) {\n            $count++;\n\
    \        }\n        $startOne++;\n    }\n    return $count;\n}\necho starts_one_ends(3)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "180\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu32kgy3g.php:28\n\
    Stack trace:\n#0 /tmp/tmpu32kgy3g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpu32kgy3g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $start_one = 0;\n    $end_one = 0;\n    for ($i = 1; $i <= 9; $i++) {\n\
    \        $start_one += count_start_one($n-1);\n        $end_one += count_end_one($n-1);\n\
    \    }\n    return $start_one + $end_one;\n}\n\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_start_one()\
    \ in /tmp/tmpect3woyc.php:8\nStack trace:\n#0 /tmp/tmpect3woyc.php(15): starts_one_ends(1)\n\
    #1 /tmp/tmpect3woyc.php(19): candidate(1)\n#2 /tmp/tmpect3woyc.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpect3woyc.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  $first_digit = 1;\n  $last_digit = 1;\n  $first_end_digit\
    \ = 1;\n  $last_end_digit = 1;\n  $first_digit_count = 0;\n  $last_digit_count\
    \ = 0;\n  $first_end_digit_count = 0;\n  $last_end_digit_count = 0;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $count += $first_digit * $last_digit;\n    $count\
    \ += $first_end_digit * $last_end_digit;\n    $first_digit *= 9;\n    $last_digit\
    \ *= 10;\n    $first_end_digit *= 9;\n    $last_end_digit *= 10;\n    $first_digit_count\
    \ += $first_digit;\n    $last_digit_count += $last_digit;\n    $first_end_digit_count\
    \ += $first_end_digit;\n    $last_end_digit_count += $last_end_digit;\n  }\n \
    \ echo \"$n $count\\n\";\n  echo \"first_digit_count: $first_digit_count\\n\"\
    ;\n  echo \"last_digit_count: $last_digit_count\\n\";\n  echo \"first_end_digit_count:\
    \ $first_end_digit_count\\n\";\n  echo \"last_end_digit_count: $last_end_digit_count\\\
    n\";\n}\nfor ($i = 1; $i <= 5; $i++) {\n  starts_one_ends($i);\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 2\nfirst_digit_count: 9\nlast_digit_count: 10\nfirst_end_digit_count:\
    \ 9\nlast_end_digit_count: 10\n2 182\nfirst_digit_count: 90\nlast_digit_count:\
    \ 110\nfirst_end_digit_count: 90\nlast_end_digit_count: 110\n3 16382\nfirst_digit_count:\
    \ 819\nlast_digit_count: 1110\nfirst_end_digit_count: 819\nlast_end_digit_count:\
    \ 1110\n4 1474382\nfirst_digit_count: 7380\nlast_digit_count: 11110\nfirst_end_digit_count:\
    \ 7380\nlast_end_digit_count: 11110\n5 132694382\nfirst_digit_count: 66429\nlast_digit_count:\
    \ 111110\nfirst_end_digit_count: 66429\nlast_end_digit_count: 111110\n1 2\nfirst_digit_count:\
    \ 9\nlast_digit_count: 10\nfirst_end_digit_count: 9\nlast_end_digit_count: 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppem40ych.php:40\nStack\
    \ trace:\n#0 /tmp/tmppem40ych.php(47): test()\n#1 {main}\n  thrown in /tmp/tmppem40ych.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 4;\n \
    \ }\n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\n$n = 2;\n\
    echo starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_fn3n3h.php:21\n\
    Stack trace:\n#0 /tmp/tmpr_fn3n3h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr_fn3n3h.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 1; // If number of digits is 1, there's always one 1-digit number\
    \ that starts and ends with 1.\n    for ($i = 2; $i <= $n; $i++) {\n        $count\
    \ += pow(2, $i - 1);\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fweka5z.php:17\n\
    Stack trace:\n#0 /tmp/tmp2fweka5z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2fweka5z.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // base cases\n  if ($n == 1) {\n    return 1;\n  }\n  if ($n == 2) {\n\
    \    return 3;\n  }\n  // dynamic programming\n  $dp = array_fill(0, $n + 1, 0);\n\
    \  $dp[1] = 1;\n  $dp[2] = 3;\n  for ($i = 3; $i <= $n; $i++) {\n    $dp[$i] =\
    \ $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3fc9g5p.php:28\n\
    Stack trace:\n#0 /tmp/tmpb3fc9g5p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb3fc9g5p.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4288utvt.php:14\n\
    Stack trace:\n#0 /tmp/tmp4288utvt.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp4288utvt.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) {\n    return 1;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n\
    \  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9roix921.php:20\n\
    Stack trace:\n#0 /tmp/tmp9roix921.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9roix921.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $last_digit = array();\n    $last_digit[0] = 0;\n    $last_digit[1] =\
    \ 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $last_digit[$i] = $last_digit[$i\
    \ - 1] + $last_digit[$i - 2];\n    }\n    $first_digit = array();\n    $first_digit[0]\
    \ = 0;\n    $first_digit[1] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n       \
    \ $first_digit[$i] = $first_digit[$i - 1] + $first_digit[$i - 2];\n    }\n   \
    \ return $last_digit[$n] + $first_digit[$n] - 1;\n}\nfor ($i = 1; $i <= 10; $i++)\
    \ {\n    echo \"starts_one_ends(\" . $i . \") = \" . starts_one_ends($i) . \"\\\
    n\";\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "starts_one_ends(1) = 1\nstarts_one_ends(2) = 1\nstarts_one_ends(3) = 3\n\
    starts_one_ends(4) = 5\nstarts_one_ends(5) = 9\nstarts_one_ends(6) = 15\nstarts_one_ends(7)\
    \ = 25\nstarts_one_ends(8) = 41\nstarts_one_ends(9) = 67\nstarts_one_ends(10)\
    \ = 109\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5cs2xe7.php:29\n\
    Stack trace:\n#0 /tmp/tmps5cs2xe7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps5cs2xe7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) return 2;\n  $dp = new SplFixedArray($n);\n  $dp[0] = 1;\n\
    \  $dp[1] = 2;\n  for ($i = 2; $i < $n; $i++) {\n    $dp[$i] = $dp[$i - 1] + $dp[$i\
    \ - 2];\n  }\n  return $dp[$n - 1] * 2;\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\n\
    var_dump(starts_one_ends(5));\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(2)\nint(4)\nint(6)\nint(10)\nint(16)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdjv39sok.php:25\nStack trace:\n#0 /tmp/tmpdjv39sok.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdjv39sok.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) return 2;\n    return starts_one_ends($n - 1) + $n;\n}\n\
    \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvd_lcij.php:14\n\
    Stack trace:\n#0 /tmp/tmphvd_lcij.php(21): test()\n#1 {main}\n  thrown in /tmp/tmphvd_lcij.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $dp = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    $m = 1000000007;\n    if ($n\
    \ === 1) {\n        return 10;\n    } else if ($n === 2) {\n        return 55;\n\
    \    } else {\n        for ($i = 3; $i <= $n; $i++) {\n            $sum = 0;\n\
    \            for ($j = 0; $j < 10; $j++) {\n                $sum = ($sum + $dp[$j])\
    \ % $m;\n            }\n            for ($j = 0; $j < 10; $j++) {\n          \
    \      $dp[$j] = $sum;\n            }\n            $dp[0] = ($dp[0] - $dp[1] +\
    \ $m) % $m;\n        }\n        $sum = 0;\n        for ($i = 0; $i < 10; $i++)\
    \ {\n            $sum = ($sum + $dp[$i]) % $m;\n        }\n        return $sum;\n\
    \    }\n}\n\n$s = microtime(true);\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(200)\
    \ . PHP_EOL;\necho microtime(true) - $s . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "10\n55\n81\n6561\n59049\n531441\n442098751\n0.00019001960754395\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpdroio33z.php:44\nStack trace:\n\
    #0 /tmp/tmpdroio33z.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdroio33z.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) {\n        return;\n    }\n    if ($n == 1) {\n        return\
    \ 2;\n    }\n    return starts_one_ends($n - 1) + (9 * $n) - 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7s1q1u2.php:19\n\
    Stack trace:\n#0 /tmp/tmpu7s1q1u2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpu7s1q1u2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $dp = [\n        1 => 1,\n        2 => 9,\n        3 => 9,\n        4\
    \ => 9,\n        5 => 9,\n        6 => 9,\n        7 => 9,\n        8 => 9,\n\
    \        9 => 9,\n        10 => 9,\n    ];\n    $dp[1] = 2;\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n   \
    \ return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2\n2\n10\n68\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34mgme8o.php:33\n\
    Stack trace:\n#0 /tmp/tmp34mgme8o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp34mgme8o.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  } else {\n    return ($n - 1) * 9 + starts_one_ends($n\
    \ - 1);\n  }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n\";\necho starts_\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajk0190t.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  return starts_one_ends($n - 1) +\
    \ 9 * pow(10, $n - 2);\n}\n\n$n = 3;\necho \"number of numbers that start or end\
    \ with 1: \" . starts_one_ends($n) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "number of numbers that start or end with 1: 101\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz1o90jgs.php:18\nStack trace:\n#0 /tmp/tmpz1o90jgs.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz1o90jgs.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n      \
    \  return 3;\n    }\n    $dp = [\n        0 => 2,\n        1 => 3,\n    ];\n \
    \   for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n\
    \    }\n    return $dp[$n - 1];\n}\n\n$tests = [\n    1 => 2,\n    2 => 3,\n \
    \   3 => 5,\n    4 => 8,\n    5 => 13,\n    6 => 21,\n    7 => 34,\n    8 => 55,\n\
    \    9 => 89,\n    10 => 144,\n];\nforeach ($tests as $test => $expected) {\n\
    \    $res = starts_one_ends($test);\n    if ($res == $expected) {\n        echo\
    \ \"PASS\\n\";\n    } else {\n        echo \"FAIL: for input $test: expected:\
    \ $expected, got: $res\\n\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "PASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmnxfqbbu.php:46\nStack trace:\n\
    #0 /tmp/tmpmnxfqbbu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmnxfqbbu.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(2, $i-1);\n\
    \  }\n  return $count;\n}\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "1\n7\n15\n255\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggxgdk0w.php:21\n\
    Stack trace:\n#0 /tmp/tmpggxgdk0w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpggxgdk0w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $memo = [];\n    $memo[0] = 1;\n    $memo[1] = 1;\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $memo[$i] = $memo[$i - 1] + ($memo[$i - 2] * 9);\n \
    \   }\n    return $memo[$n];\n}\n\nclass CountPositiveIntegersTest extends TestCase\
    \ {\n    public function testStartsOneEnds() {\n        $this->assertEquals(starts_one_ends(2),\
    \ 9);\n        $this->assertEquals(starts_one_ends(3), 90);\n        $this->assertEquals(starts_one_ends(4),\
    \ 900);\n        $this->assertEquals(starts_one_ends(5), 9000);\n        $this->assertEquals(starts_one_ends(6),\
    \ 90000);\n        $this->assertEquals(starts_one_ends(7), 900000);\n        $this->assertEquals(starts_one_ends(8),\
    \ 9000000);\n        $this->assertEquals(starts_one_ends(9), 90000000);\n    \
    \    $this->assertEquals(starts_one_ends(10), 900000000);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmpwrjo_igu.php:14\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpwrjo_igu.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) return 2;\n    if ($n == 2) return 4;\n    if ($n == 3)\
    \ return 6;\n    return starts_one_ends($n - 1) + (starts_one_ends($n - 2) * 2);\n\
    }\necho starts_one_ends(2);\necho starts_one_ends(3);\necho starts_one_ends(4);\n\
    echo starts_one_ends(5);\necho starts_one_ends(6);\necho starts_one_ends(7);\n\
    echo starts_one_ends(8);\necho starts_one_ends(9);\necho starts_one_ends(10);\n\
    echo starts_one_ends(11);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "461426541062144268541706\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpikkx7wf4.php:25\nStack trace:\n#0 /tmp/tmpikkx7wf4.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpikkx7wf4.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $start = array_fill(0, $n, 0);\n    $end = array_fill(0, $n, 0);\n  \
    \  $start[0] = 1;\n    $end[0] = 1;\n    for ($i = 1; $i < $n; $i++) {\n     \
    \   $start[$i] = 10 * $start[$i - 1] + pow(10, $i - 1);\n        $end[$i] = 9\
    \ * $end[$i - 1] + pow(10, $i - 1);\n    }\n    return array_sum($start) + array_sum($end);\n\
    }\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pyt9_jd.php:20\n\
    Stack trace:\n#0 /tmp/tmp7pyt9_jd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7pyt9_jd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $ans = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $k = $i;\n   \
    \     $has_start_one = false;\n        $has_end_one = false;\n        while ($k)\
    \ {\n            if ($k % 10 == 1) {\n                $has_end_one = true;\n \
    \           }\n            $k /= 10;\n        }\n        if ($has_end_one) {\n\
    \            $ans++;\n        }\n    }\n    return $ans;\n}\n\necho starts_one_ends(100);\n\
    \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "20\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsd6xpoki.php:31\n\
    Stack trace:\n#0 /tmp/tmpsd6xpoki.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsd6xpoki.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // Brute force, not very efficient\n    $count = 0;\n    for ($i = 1;\
    \ $i <= 9; $i++) {\n        for ($j = 1; $j <= 9; $j++) {\n            if ($i\
    \ == 1 && $j == 1) continue;\n            $count += intval(log10($i * $j)) + 1\
    \ == $n;\n        }\n    }\n    return $count;\n}\n\necho starts_one_ends(2);\n\
    echo PHP_EOL;\necho starts_one_ends(3);\necho PHP_EOL;\necho starts_one_ends(4);\n\
    echo PHP_EOL;\necho starts_one_ends(5);\necho PHP_EOL;\necho starts_one_ends(6);\n\
    echo PHP_EOL;\necho starts_one_ends(7);\necho PHP_EOL;\necho starts_one_ends(8);\n\
    echo PHP_EOL;\necho starts_one_ends(9);\necho PHP_EOL;\necho starts_one_ends(10);\n\
    echo PHP_EOL;\necho starts_one_ends(11);\necho PHP_EOL;\necho starts_one_ends(12);\n\
    echo PHP_EOL;\necho starts_one_ends(13);\necho PHP_EOL;\necho starts_one_ends(14);\n\
    echo PHP_EOL;\necho starts_one_ends(15);\necho PHP_EOL;\necho starts_one_ends(16);\n\
    echo PHP_EOL;\necho starts_one_ends(17);\necho PHP_EOL;\necho starts_one_ends(18);\n\
    echo PHP_EOL;\necho starts_one_ends(19);\necho PHP_EOL;\necho starts_one_ends(20);\n\
    echo PHP_EOL;\necho starts_one_ends(21);\necho PHP_EOL;\necho starts_one_ends(22);\n\
    echo PHP_EOL;\necho starts_one_ends(23);\necho PHP_EOL;\necho starts_one_ends(24);\n\
    echo PHP_EOL;\necho starts_one_ends(25);\necho PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "58\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_eporx5f.php:70\n\
    Stack trace:\n#0 /tmp/tmp_eporx5f.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp_eporx5f.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) return 0;\n    if ($n == 1) return 1;\n    $dp = [\n    \
    \    [\n            1 => 1,\n            0 => 0,\n        ],\n        [\n    \
    \        1 => 1,\n            0 => 1,\n        ],\n    ];\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $dp[$i] = [\n            1 => $dp[$i - 1][1] + $dp[$i\
    \ - 1][0],\n            0 => $dp[$i - 1][1],\n        ];\n    }\n    return $dp[$n][1]\
    \ + $dp[$n][0];\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dmf6p0d.php:31\n\
    Stack trace:\n#0 /tmp/tmp2dmf6p0d.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2dmf6p0d.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  $ends = 10;\n  $starts = 9;\n  for\
    \ ($i = 2; $i < $n; $i++) {\n    $ends *= 10;\n    $starts *= 9;\n  }\n  return\
    \ $ends + $starts;\n}\n\n$tests = [\n  [1, 2],\n  [2, 20],\n  [3, 300],\n  [4,\
    \ 4000],\n  [5, 50000],\n  [6, 600000],\n  [7, 7000000],\n  [8, 80000000],\n \
    \ [9, 900000000],\n  [10, 100000000000],\n];\n\nforeach ($tests as $test) {\n\
    \  $res = starts_one_ends($test[0]);\n  if ($res !== $test[1]) {\n    echo \"\
    Error: for {$test[0]} expected $test[1] but got $res\\n\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Error: for 2 expected 20 but got 19\nError: for 3 expected 300 but got\
    \ 181\nError: for 4 expected 4000 but got 1729\nError: for 5 expected 50000 but\
    \ got 16561\nError: for 6 expected 600000 but got 159049\nError: for 7 expected\
    \ 7000000 but got 1531441\nError: for 8 expected 80000000 but got 14782969\nError:\
    \ for 9 expected 900000000 but got 143046721\nError: for 10 expected 100000000000\
    \ but got 1387420489\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgag4sz4.php:41\n\
    Stack trace:\n#0 /tmp/tmpfgag4sz4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfgag4sz4.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9,\
    \ $i - 1);\n    }\n    return $count;\n}\n\n$n = 4;\n$ret = starts_one_ends($n);\n\
    var_dump($ret);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(820)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3rdpmru.php:21\n\
    Stack trace:\n#0 /tmp/tmpo3rdpmru.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpo3rdpmru.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n === 1) {\n        return 2;\n    }\n    $x = 10;\n    $sum = 0;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $sum += $x;\n        $x *= 10;\n \
    \   }\n    return $sum * 2;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oal0174.php:22\n\
    Stack trace:\n#0 /tmp/tmp7oal0174.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7oal0174.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  $a = bcdiv(bcpow('10', $n) - bcpow('10',\
    \ $n - 1), 9);\n  $b = bcdiv(bcpow('10', $n) - bcpow('10', $n - 1), 9);\n  return\
    \ bcmul($a, $b);\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8mgpddk.php:18\n\
    Stack trace:\n#0 /tmp/tmpr8mgpddk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpr8mgpddk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) return 2;\n  return starts_one_ends($n - 1) + count_ones($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb56hoga.php:14\n\
    Stack trace:\n#0 /tmp/tmpsb56hoga.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpsb56hoga.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Base case 1.\n  if ($n === 1) {\n    return 2;\n  }\n  // Base case\
    \ 2.\n  if ($n === 2) {\n    return 4;\n  }\n  return starts_one_ends($n - 1)\
    \ + starts_one_ends($n - 2);\n}\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\nvar_dump(starts_one_ends(11));\n\
    var_dump(starts_one_ends(12));\nvar_dump(starts_one_ends(13));\nvar_dump(starts_one_ends(14));\n\
    var_dump(starts_one_ends(15));\nvar_dump(starts_one_ends(16));\nvar_dump(starts_one_ends(17));\n\
    var_dump(starts_one_ends(18));\nvar_dump(starts_one_ends(19));\nvar_dump(starts_one_ends(20));\n\
    var_dump(starts_one_ends(21));\nvar_dump(starts_one_ends(22));\nvar_dump(starts_one_ends(23));\n\
    var_dump(starts_one_ends(24));\nvar_dump(starts_one_ends(25));\nvar_dump(starts_one_ends(26));\n\
    var_dump(starts_one_ends(27));\nvar_dump(starts_one_ends(28));\nvar_dump(starts_one_ends(29));\n\
    var_dump(starts_one_ends(30));\nvar_dump(starts_one_ends(31));\nvar_dump\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp54veognn.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n <= 1) {\n        return $n;\n    }\n\n    // let the number be\
    \ of the form i + j1 + ... + jk, where i and j1,...,jk\n    // are digits, and\
    \ i = 1 or k = 1.\n    // The number of k-digit positive integers that start or\
    \ end with 1 is\n    // 9 * 10^(k-1).\n    // The number of k-digit positive integers\
    \ that start with i and end with\n    // j1,...,jk is 9 * 10^(k-2) for each i,j1,...,jk.\n\
    \    // There are 9 choices for the first digit (excluding 0), and there are\n\
    \    // 10^(k-1) choices for the remaining k-1 digits.\n    // There are 9 choices\
    \ for the last digit (excluding 0), and there are\n    // 10^(k-1) choices for\
    \ the remaining k-1 digits.\n    // There are 10 choices for the last digit, and\
    \ there are 10^(k-2) choices\n    // for the remaining k-2 digits.\n    // There\
    \ are 10 choices for the first digit, and there are 10^(k-2) choices\n    // for\
    \ the remaining k-2 digits.\n    // The answer is 9 * 10^(k-1) + 10 * 9 * 10^(k-2)\
    \ + 10 * 9 * 10^(k-2).\n    // 9 * 10^(k-1) + 10 * 9 * 10^(k-2) + 10 * 9 * 10^(k-2)\
    \ =\n    // 11 * 9 * 10^(k-2) + 9 * 10^(k-1) =\n    // 11 * 9 * (10^(k-2) + 10^(k-1))\
    \ =\n    // 11 * 9 * (10^(k-2) + 10 * 10^(k-2)) =\n    // 11 * 9 * 10^(k-2) *\
    \ (1 + 10) =\n    // 11 * 9 * 10^(k-2) * 11 =\n    // 121 * 9 * 10^(k-2) =\n \
    \   // 121 * 9 * (10^(k-2) + 9 * 10^(k-3)) =\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpobnoqfig.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Find the number of n-digit numbers that end in 1.\n  $number = 1;\n\
    \  for ($i = 0; $i < $n - 1; $i++) {\n    $number *= 10;\n  }\n  $number = $number\
    \ + 1;\n  $end = $number;\n  while ($number > 0) {\n    $end += floor($number\
    \ / 10);\n    $number = floor($number / 10);\n  }\n  // Find the number of n-digit\
    \ numbers that start in 1.\n  $number = 1;\n  for ($i = 0; $i < $n - 1; $i++)\
    \ {\n    $number *= 10;\n  }\n  $number = $number - 1;\n  $start = $number;\n\
    \  $start += floor($number / 9);\n  return $start + $end;\n}\n\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n22\n222\n2222\n22222\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpqtvk9m5k.php:37\nStack trace:\n#0 /tmp/tmpqtvk9m5k.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqtvk9m5k.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n <= 1) {\n    return 1;\n  }\n\n  $nums = 0;\n  // start with 1.\n\
    \  $nums += (pow(10, $n - 1) - pow(9, $n - 1));\n  // end with 1.\n  $nums +=\
    \ (pow(10, $n - 1) - pow(9, $n - 1));\n  // start and end with 1. This is duplicated\
    \ by the above two cases.\n  $nums -= (pow(10, $n - 2) - pow(9, $n - 2));\n\n\
    \  // Do the recursive step\n  for ($i = 1; $i < $n - 1; $i++) {\n    $nums +=\
    \ starts_one_ends($i) * starts_one_ends($n - $i);\n  }\n\n  return $nums;\n}\n\
    \nfor ($i = 1; $i <= 5; $i++) {\n  echo starts_one_ends($i) . \"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "1\n2\n39\n566\n7329\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpm1rwexe0.php:34\nStack trace:\n#0 /tmp/tmpm1rwexe0.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm1rwexe0.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $output = 0;\n  for ($i = pow(10, $n - 1); $i < pow(10, $n); $i++) {\n\
    \    if (strpos(strval($i), '1') === 0 || strpos(strval($i), '1') === (strlen(strval($i))\
    \ - 1)) {\n      $output++;\n    }\n  }\n  return $output;\n}\n\nfor ($i = 0;\
    \ $i < 10; $i++) {\n  echo starts_one_ends($i) . PHP_EOL;\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'1\n1\n18\n172\n1648\n15832\n152488\n1472392\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $start = 0;\n    $end = 0;\n    $s = \"1\";\n    $e = \"1\";\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $s .= \"0\";\n        $e = \"0\" . $e;\n\
    \    }\n    for ($i = 1; $i < $n; $i++) {\n        $start += substr_count($s,\
    \ \"1\");\n        $end += substr_count($e, \"1\");\n        $s = substr($s, 1);\n\
    \        $e = substr($e, 0, -1);\n    }\n    return $start + $end + 2;\n}\n\n\
    echo starts_one_ends(2);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9le2t5wd.php:28\n\
    Stack trace:\n#0 /tmp/tmp9le2t5wd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9le2t5wd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n       \
    \ return 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n    $count =\
    \ 1;\n    for ($i = 2; $i <= $n - 1; $i++) {\n        $count = $count * 10 + 1;\n\
    \    }\n    $count *= 10;\n    $count += 1;\n    return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpruk1u5_q.php:28\n\
    Stack trace:\n#0 /tmp/tmpruk1u5_q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpruk1u5_q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 4;\n    } else {\n        $dp = [0, 2, 4];\n        for ($i = 3; $i\
    \ <= $n; $i++) {\n            $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n        }\n\
    \        return $dp[$n];\n    }\n}\n\nfor ($i = 1; $i <= 5; $i++) {\n    echo\
    \ starts_one_ends($i) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n4\n6\n10\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaifiqvqk.php:26\n\
    Stack trace:\n#0 /tmp/tmpaifiqvqk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaifiqvqk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 1;\n  }\n  // Returns the numbers that end with\
    \ 1\n  $sum_ends = 1;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $sum_ends *= 9;\n\
    \  }\n  // Returns the numbers that start with 1\n  $sum_starts = 0;\n  for ($i\
    \ = 0; $i < $n - 1; $i++) {\n    $sum_starts *= 9;\n    $sum_starts += 10;\n \
    \ }\n  return $sum_ends + $sum_starts;\n}\necho starts_one_ends(1) . PHP_EOL;\n\
    echo starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n19\n181\n1639\n14761\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpy8xyh0ex.php:32\nStack trace:\n#0 /tmp/tmpy8xyh0ex.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy8xyh0ex.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  $result = 9;\n  $i = 1;\n  while\
    \ ($i < $n - 1) {\n    $result *= 10;\n    $i++;\n  }\n  return 2 * $result;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstkqk0gr.php:22\n\
    Stack trace:\n#0 /tmp/tmpstkqk0gr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpstkqk0gr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $start = 1;\n    $end = 1;\n    for ($i = 1; $i < $n; $i++) {\n     \
    \   $start = $start * 10;\n        $end = $end * 9 + 1;\n    }\n    return $start\
    \ + $end;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "17381\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jlcvdmz.php:21\n\
    Stack trace:\n#0 /tmp/tmp4jlcvdmz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4jlcvdmz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $i = 1;\n    $total = 0;\n    while ($i < $n) {\n        $j = 1;\n  \
    \      while ($j < $n) {\n            $j++;\n            $total++;\n        }\n\
    \        $i++;\n    }\n    return $total;\n}\n\necho starts_one_ends(4);\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uripfop.php:24\n\
    Stack trace:\n#0 /tmp/tmp3uripfop.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3uripfop.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 10**($n-1); $i < 10**$n; $i++) {\n       \
    \ if (strpos($i, \"1\") === 0 || strpos($i, \"1\") === $n-1) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'18\n1648\n152488\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  $result = 0;\n  for ($i = 1; $i <\
    \ $n; $i++) {\n    $result += pow(2, $i);\n  }\n  return $result + 1;\n}\n\necho\
    \ starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\necho \"\\n\";\n\
    echo starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\necho \"\\n\"\
    ;\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\necho \"\\\
    n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\necho\
    \ \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\necho starts_one_ends(16);\n\
    echo \"\\n\";\necho starts_one_ends(17);\necho \"\\n\";\necho starts_one_ends(18);\n\
    echo \"\\n\";\necho starts_one_ends(19);\necho \"\\n\";\necho starts_one_ends(20);\n\
    echo \"\\n\";\necho starts_one_ends(21);\necho \"\\n\";\necho starts_one_ends(22);\n\
    echo \"\\n\";\necho starts_one_ends(23);\necho \"\\n\";\necho starts_one_ends(24);\n\
    echo \"\\n\";\necho starts_one_ends(25);\necho \"\\n\";\necho starts_one_ends(26);\n\
    echo \"\\n\";\necho starts_one_ends(27);\necho \"\\n\";\necho starts_one_ends(28);\n\
    echo \"\\n\";\necho starts_one_ends(29);\necho \"\\n\";\necho starts_one_ends(30\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpv2rdylp6.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $dp = array_fill(0, $n,\
    \ 0);\n    $dp[0] = 1;\n    $dp[1] = 2;\n    for ($i = 2; $i < $n; $i++) {\n \
    \       $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1] *\
    \ 2;\n}\n\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "6\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft9ibv7v.php:24\n\
    Stack trace:\n#0 /tmp/tmpft9ibv7v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpft9ibv7v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  $start_ends = array();\n  $start_ends['start_1'] = pow(2,\
    \ $n - 1);\n  $start_ends['end_1'] = pow(2, $n - 1);\n  return $start_ends;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvok4m2p.php:17\n\
    Stack trace:\n#0 /tmp/tmpnvok4m2p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnvok4m2p.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 10 ** ($n - 1); $i < 10 ** $n; $i++) {\n    if\
    \ ($i % 10 == 1 || $i % 10 == 1) $count++;\n  }\n  return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6gdgraz.php:18\n\
    Stack trace:\n#0 /tmp/tmpf6gdgraz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf6gdgraz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n       \
    \ return 2;\n    }\n    $ways = 1;\n    $prev = 1;\n    $num = 0;\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $num = 9 * $prev + $ways;\n        $prev = $ways;\n\
    \        $ways = $num;\n    }\n    return $num;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme09r7da.php:27\n\
    Stack trace:\n#0 /tmp/tmpme09r7da.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpme09r7da.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $answer = 0;\n  $num_range = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $num_range\
    \ *= 10;\n  }\n  for ($i = 1; $i < $num_range; $i++) {\n    if ($i < 10) {\n \
    \     $answer++;\n    } else if (ends_with_one($i)) {\n      $answer++;\n    }\n\
    \  }\n  return $answer;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4btpmqn.php:25\n\
    Stack trace:\n#0 /tmp/tmpa4btpmqn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpa4btpmqn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += ($i\
    \ == 1 ? 2 : pow(2, $i));\n    }\n    return $count;\n}\n\nforeach ([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10] as $n) {\n    echo starts_one_ends($n) . \"\\n\";\n}\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2\n6\n14\n30\n62\n126\n254\n510\n1022\n2046\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdd_ql8js.php:20\nStack trace:\n#0 /tmp/tmpdd_ql8js.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdd_ql8js.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) return $n;\n  $dp = [];\n  for ($i = 0; $i < $n; $i++) {\n\
    \    $dp[$i] = [];\n    $dp[$i][0] = 1;\n    $dp[$i][1] = 1;\n  }\n  $dp[$n] =\
    \ [];\n  $dp[$n][0] = 0;\n  $dp[$n][1] = 0;\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    $dp[$i][0] = $dp[$i - 1][0] + $dp[$i - 1][1];\n    $dp[$i][1] = $dp[$i -\
    \ 1][0];\n  }\n  return $dp[$n][0] + $dp[$n][1];\n}\n\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "1\n3\n5\n8\n13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3iq88e2.php:33\n\
    Stack trace:\n#0 /tmp/tmpv3iq88e2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv3iq88e2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $count += $n - $i;\n\
    \  }\n  return $count;\n}\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2)\
    \ == 4);\nassert(starts_one_ends(3) == 6);\nassert(starts_one_ends(4) == 10);\n\
    assert(starts_one_ends(5) == 14);\nassert(starts_one_ends(6) == 20);\nassert(starts_one_ends(7)\
    \ == 26);\nassert(starts_one_ends(8) == 34);\nassert(starts_one_ends(9) == 42);\n\
    assert(starts_one_ends(10) == 52);\necho \"Tests passed.\\n\";\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(starts_one_ends(1) == 2) failed in /tmp/tmpxmpyh8b2.php\
    \ on line 12\n\nWarning: assert(): assert(starts_one_ends(2) == 4) failed in /tmp/tmpxmpyh8b2.php\
    \ on line 13\n\nWarning: assert(): assert(starts_one_ends(5) == 14) failed in\
    \ /tmp/tmpxmpyh8b2.php on line 16\n\nWarning: assert(): assert(starts_one_ends(6)\
    \ == 20) failed in /tmp/tmpxmpyh8b2.php on line 17\n\nWarning: assert(): assert(starts_one_ends(7)\
    \ == 26) failed in /tmp/tmpxmpyh8b2.php on line 18\n\nWarning: assert(): assert(starts_one_ends(8)\
    \ == 34) failed in /tmp/tmpxmpyh8b2.php on line 19\n\nWarning: assert(): assert(starts_one_ends(9)\
    \ == 42) failed in /tmp/tmpxmpyh8b2.php on line 20\n\nWarning: assert(): assert(starts_one_ends(10)\
    \ == 52) failed in /tmp/tmpxmpyh8b2.php on line 21\nTests passed.\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxmpyh8b2.php:29\nStack trace:\n\
    #0 /tmp/tmpxmpyh8b2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxmpyh8b2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) return pow(10, $n);\n  else return 10 * starts_one_ends($n\
    \ - 1) + 2 * pow(10, $n - 1);\n}\n\nfor ($i = 1; $i < 4; $i++) {\n  print starts_one_ends($i)\
    \ . PHP_EOL;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "10\n120\n1400\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfseb2t9.php:17\n\
    Stack trace:\n#0 /tmp/tmpkfseb2t9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkfseb2t9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += count_for_len($i);\n\
    \  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_for_len()\
    \ in /tmp/tmpl6qfzk_m.php:7\nStack trace:\n#0 /tmp/tmpl6qfzk_m.php(13): starts_one_ends(1)\n\
    #1 /tmp/tmpl6qfzk_m.php(17): candidate(1)\n#2 /tmp/tmpl6qfzk_m.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl6qfzk_m.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // calculate total numbers with $n digits\n    $total = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $total += pow(9, $i);\n    }\n    echo \"There\
    \ are $total numbers with $n digits\\n\";\n\n    // now, get the numbers starting\
    \ with one\n    $ones = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $ones\
    \ += pow(9, $i - 1);\n    }\n    echo \"There are $ones numbers starting with\
    \ 1\\n\";\n\n    // calculate the number ending with one\n    $ones = 0;\n   \
    \ for ($i = 1; $i <= $n; $i++) {\n        $ones += pow(9, $i - 1);\n    }\n  \
    \  echo \"There are $ones numbers ending with 1\\n\";\n\n    // the result is\
    \ sum of the two above\n    return $ones + $ones;\n}\n\n$n = 2;\n$res = starts_one_ends($n);\n\
    echo \"There are $res numbers of $n-digit numbers starting or ending with 1\\\
    n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "There are 90 numbers with 2 digits\nThere are 10 numbers starting with\
    \ 1\nThere are 10 numbers ending with 1\nThere are 20 numbers of 2-digit numbers\
    \ starting or ending with 1\nThere are 9 numbers with 1 digits\nThere are 1 numbers\
    \ starting with 1\nThere are 1 numbers ending with 1\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp27e28nko.php:38\nStack trace:\n#0 /tmp/tmp27e28nko.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp27e28nko.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $one = $n-1;\n  $nine = $n-1;\n  $ten = 1;\n  $sum = $one + $nine + $ten;\n\
    \  for ($i = 0; $i < $n-2; $i++) {\n    $one *= 10;\n    $nine *= 9;\n    $ten\
    \ *= 10;\n    $sum += $one + $nine + $ten;\n  }\n  return $sum;\n}\n\n$i = 1;\n\
    while ($i <= 1000000) {\n  echo \"$i:\\t\" . starts_one_ends($i) . PHP_EOL;\n\
    \  $i++;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: b'1:\t1\n2:\t3\n3:\t53\n4:\t717\n5:\t8835\n6:\t103571\n7:\t1176357\n8:\t13073985\n9:\t143046719\n10:\t1546959159\n11:\t16580702721\n12:\t176482290293\n13:\t1868088749163\n14:\t19686087526587\n15:\t206701053462845\n16:\t2163823650455241\n17:\t22594929266592567\n18:\t235439011111791455\n19:\t2448824040529359129\n20:\t2.5430495051696E+19\n21:\t2.6372749698098E+20\n22:\t2.7316692909147E+21\n23:\t2.826367553656E+22\n24:\t2.9214761376067E+23\n25:\t3.0170771070084E+24\n26:\t3.1132320100426E+25\n27:\t3.2099851613999E+26\n28:\t3.3073664734964E+27\n29:\t3.4053938937818E+28\n30:\t3.5040754986085E+29\n31:\t3.6034112879765E+30\n32:\t3.7033947200404E+31\n33:\t3.8040140194784E+32\n34:\t3.9052532896061E+33\n35:\t4.0070934544025E+34\n36:\t4.1095130533435E+35\n37:\t4.2124889090633E+36\n38:\t4.315996685328E+37\n39:\t4.4200113505825E+38\n40:\t4.5245075603772E+39\n41:\t4.6294599702627E+40\n42:\t4.734843489234E+41\n43:\t4.8406334824862E+42\n44:\t4.9468059310845E+43\n45:\t5.0533375551383E+44\n46:\t5.1602059061816E+45\n47:\t5.2673894336871E+46\n48:\t5.374867529963E+47\n49:\t5.4826205570913E+48\n50:\t5.5906298590498E+49\n51:\t5.6988777617124E+50\n52:\t5.8073475630298E+51\n53:\t5.9160235153554E+52\n54:\t6.0248908015857E+53\n55:\t6.1339355065274E+54\n56:\t6.2431445846871E+55\n57:\t6.352505825483E+56\n58:\t6.4620078167173E+57\n59:\t6.5716399070054E+58\n60:\t6.6813921677354E+59\n61:\t6.7912553550271E+60\n62:\t6.9012208720721E+61\n63:\t7.0112807321577E+62\n64:\t7.1214275226166E+63\n65:\t7.2316543698844E+64\n66:\t7.3419549058058E+65\n67:\t7.4523232352885E+66\n68:\t7.5627539053722E+67\n69:\t7.6732418757529E+68\n70:\t7.7837824907815E+69\n71:\t7.8943714529358E+70\n72:\t8.0050047977514E+71\n73:\t8.1156788701856E+72\n74:\t8.2263903023777E+73\n75:\t8.3371359927629E+74\n76:\t8.4479130864916E+75\n77:\t8.5587189571026E+76\n78:\t8.6695511893931E+77\n79:\t8.7804075634323E+78\n80:\t8.8912860396586E+79\n81:\t9.0021847450053E+80\n82:\t9.1131019599972E+81\n83:\t9.2240361067629E+82\n84:\t9.3349857379088E+83\n85:\t9.4459495262023E+84\n86:\t9.5569262550136E+85\
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $left_zeros = str_repeat('0', $n - 1);\n  $right_zeros = str_repeat('0',\
    \ $n - 2);\n  $start_1 = $left_zeros . '1' . $right_zeros;\n  $end_1 = $right_zeros\
    \ . '1' . $left_zeros;\n  return $start_1 + $end_1;\n}\n\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);\necho starts_one_ends(11);\n\
    echo starts_one_ends(12);\necho starts_one_ends(13);\necho starts_one_ends(14);\n\
    echo starts_one_ends(15);\necho starts_one_ends(16);\necho starts_one_ends(17);\n\
    echo starts_one_ends(18);\necho starts_one_ends(19);\necho starts_one_ends(20);\n\
    echo starts_one_ends(21);\necho starts_one_ends(22);\necho starts_one_ends(23);\n\
    echo starts_one_ends(24);\necho starts_one_ends(25);\necho starts_one_ends(26);\n\
    echo starts_one_ends(27);\necho starts_one_ends(28);\necho starts_one_ends(29);\n\
    echo starts_one_ends(30);\necho starts_one_ends(31);\necho starts_one_ends(32);\n\
    echo starts_one_ends(33);\necho starts_one_ends(34);\necho starts_one_ends(35);\n\
    echo starts_one_ends(36);\necho starts_one_ends(37);\necho starts_one_ends(38);\n\
    echo starts_one_ends(39);\necho starts_one_ends(40);\necho starts_one_ends(41);\n\
    echo starts_one_ends(42);\necho\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3yqn1ovu.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if($n === 1) {\n    return 2;\n  }\n  if($n === 2) {\n    return 3;\n \
    \ }\n  $dp[1] = 2;\n  $dp[2] = 3;\n  for($i = 3; $i <= $n; $i++) {\n    $dp[$i]\
    \ = $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\nvar_dump(starts_one_ends(3));\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(5)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnizd24k.php:24\n\
    Stack trace:\n#0 /tmp/tmpjnizd24k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjnizd24k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // initialize count\n    $count = 0;\n    // loop from 1 to n\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        // cast i to string\n        $i = (string)$i;\n\
    \        // check if i starts or ends with 1\n        if ($i[0] == '1' || $i[strlen($i)\
    \ - 1] == '1') {\n            // if so, increment count\n            $count++;\n\
    \        }\n    }\n    // return count\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexoizrje.php:27\n\
    Stack trace:\n#0 /tmp/tmpexoizrje.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpexoizrje.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $tens = pow(10, $n - 1);\n  return 2 * ($tens - 1) + ($tens - 1) * (int)\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6nhj0yqc.php:14\n\
    Stack trace:\n#0 /tmp/tmp6nhj0yqc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6nhj0yqc.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $arr = ['0' => 0, '1' => 1, '2' => 1, '3' => 1, '4' => 1, '5' => 1, '6'\
    \ => 1, '7' => 1, '8' => 1, '9' => 1];\n    for ($i = 2; $i <= $n; $i++) {\n \
    \       for ($j = 0; $j <= 9; $j++) {\n            if ($j == 0) {\n          \
    \      $arr[$j] = $arr[$j] + $arr[$j];\n            } elseif ($j == 9) {\n   \
    \             $arr[$j] = $arr[$j - 1];\n            } else {\n               \
    \ $arr[$j] = $arr[$j - 1] + $arr[$j];\n            }\n        }\n    }\n    $count\
    \ = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $count += $arr[$i];\n    }\n\
    \    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_66z6q4a.php:29\n\
    Stack trace:\n#0 /tmp/tmp_66z6q4a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_66z6q4a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $total = 0;\n  $total += pow(3, $n-1); // Account for all numbers that\
    \ have a leading 0\n  $total += pow(2, $n-1); // Account for all numbers that\
    \ have a leading 1\n  // Account for all numbers that have a trailing 1\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    $total += (2 * pow(3, $i-1) * pow(2, $n-$i-1));\n\
    \  }\n  return $total;\n}\n\n$in = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nforeach\
    \ ($in as $i) {\n  echo starts_one_ends($i) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n7\n23\n73\n227\n697\n2123\n6433\n19427\n58537\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxxnkq3dm.php:25\nStack trace:\n#0 /tmp/tmpxxnkq3dm.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxxnkq3dm.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n <= 0) {\n        return 0;\n    }\n    $result = 0;\n    $start\
    \ = array();\n    $start[0] = 1;\n    $start[1] = 1;\n    $end = array();\n  \
    \  $end[0] = 1;\n    $end[1] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  $start[$i] = $start[$i - 1] + $end[$i - 1];\n        $end[$i] = $start[$i -\
    \ 1];\n    }\n    $result = $start[$n] + $end[$n];\n    return $result;\n}\n$n\
    \ = 4;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl19nngon.php:29\n\
    Stack trace:\n#0 /tmp/tmpl19nngon.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl19nngon.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) return 2;\n    if ($n == 2) return 4;\n    $nums = array(1,1,1,1);\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $temp = $nums[0];\n        $nums[0]\
    \ = array_sum($nums);\n        $nums[1] = $nums[2];\n        $nums[2] = $nums[3];\n\
    \        $nums[3] = $temp;\n    }\n    return array_sum($nums);\n}\n\necho starts_one_ends(3)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "7\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou6qk3pl.php:24\n\
    Stack trace:\n#0 /tmp/tmpou6qk3pl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpou6qk3pl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if($n == 1) {\n    return 1;\n  }\n  if($n == 2) {\n    return 10;\n  }\n\
    \  return $n * 10 + (1 * pow(10, $n-1));\n}\n\necho starts_one_ends(1) . \"\\\
    n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\n\
    echo starts_one_ends(4) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "1\n10\n130\n1040\n1000000100\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpz4v_wwvl.php:25\nStack trace:\n#0 /tmp/tmpz4v_wwvl.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz4v_wwvl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) return 0;\n  return pow(10, $n - 1) + starts_one_ends($n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_xb50ax.php:14\n\
    Stack trace:\n#0 /tmp/tmpj_xb50ax.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpj_xb50ax.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $start = 0;\n    if ($n === 1) {\n        return 1;\n\
    \    }\n    for ($i = 1; $i <= $n; $i++) {\n        $count += count_unique_numbers($i);\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_numbers()\
    \ in /tmp/tmpb95h6h8q.php:11\nStack trace:\n#0 /tmp/tmpb95h6h8q.php(17): starts_one_ends(2)\n\
    #1 /tmp/tmpb95h6h8q.php(22): candidate(2)\n#2 /tmp/tmpb95h6h8q.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb95h6h8q.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    if ($i == 1) {\n   \
    \   $count++;\n    } else if ($i % 10 == 1) {\n      $count++;\n    }\n  }\n \
    \ return $count;\n}\n\necho \"Starting with one or ending with one: \";\necho\
    \ starts_one_ends(1000) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Starting with one or ending with one: 100\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk7ao37co.php:25\nStack trace:\n#0 /tmp/tmpk7ao37co.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk7ao37co.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  } else {\n    return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1);\n  }\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(2)\nint(12)\nint(112)\nint(1112)\nint(11112)\nint(111112)\nint(1111112)\n\
    int(11111112)\nint(111111112)\nint(1111111112)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9jjcgfmn.php:27\nStack trace:\n#0 /tmp/tmp9jjcgfmn.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9jjcgfmn.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $num = intval(pow(10, $n - 1) + 1);\n  $res = 1;\n  for ($i = 0; $i < $n\
    \ - 1; $i++) {\n    $res *= 9;\n  }\n  return $res;\n}\n$i = 1;\nwhile ($i < 8)\
    \ {\n  echo starts_one_ends($i), \"\\n\";\n  $i++;\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n9\n81\n729\n6561\n59049\n531441\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmps51o5f1a.php:23\nStack trace:\n#0 /tmp/tmps51o5f1a.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps51o5f1a.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $total = 0;\n  if ($n > 0) {\n    $total += 8 * pow(10, $n - 1);\n    $total\
    \ += starts_one_ends($n - 1);\n  }\n  return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsyoghwp.php:18\n\
    Stack trace:\n#0 /tmp/tmpgsyoghwp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgsyoghwp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else {\n        $start = pow(10,\
    \ $n - 1);\n        $end = 10;\n        $ret = $start + $end;\n        for ($i\
    \ = 2; $i < $n; $i++) {\n            $start = (int)($start / 10);\n          \
    \  $end = $end * 10;\n            $ret += $start + $end;\n        }\n        return\
    \ $ret;\n    }\n}\n\necho starts_one_ends(3);\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "220\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi2jdi4l.php:26\n\
    Stack trace:\n#0 /tmp/tmpgi2jdi4l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgi2jdi4l.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $start_one = 0;\n    $end_one = 0;\n    if ($n < 2)\
    \ {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n\
    \    $start_one = 11;\n    $end_one = 10;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $start_one = 10 * $start_one + pow(10, $i - 2);\n        $end_one = 10\
    \ * $end_one + 9;\n    }\n    $count = $start_one + $end_one;\n    return $count;\n\
    }\n\necho starts_one_ends(3);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "229\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkap8opu.php:30\n\
    Stack trace:\n#0 /tmp/tmpjkap8opu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjkap8opu.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n <= 1) {\n        return 1;\n    }\n    if ($n == 2) {\n      \
    \  return 10;\n    }\n    $ans = starts_one_ends($n - 1) * 9 +\n        pow(10,\
    \ $n - 2) * 2;\n    return $ans;\n}\n\necho starts_one_ends(2) . PHP_EOL;\necho\
    \ starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "10\n110\n1190\n12710\n134390\n1409510\n14685590\n152170310\n1569532790\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd0p79ha.php:31\nStack\
    \ trace:\n#0 /tmp/tmpnd0p79ha.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnd0p79ha.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  } else {\n    return starts_one_ends($n\
    \ - 1) + pow(9, $n - 1);\n  }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n11\n92\n821\n7382\n66431\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdv8imcp5.php:23\nStack trace:\n#0 /tmp/tmpdv8imcp5.php(30): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdv8imcp5.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  $p = 100;\n  if ($n == 2) {\n   \
    \ return 10;\n  }\n  for ($i = 3; $i <= $n; $i++) {\n    $p *= 10;\n  }\n  $p\
    \ /= 10;\n  $p -= $p % pow(10, $n-1);\n  $p += $p / 10;\n  return $p;\n}\n\nforeach\
    \ (array(1, 2, 3, 4, 5, 10, 20, 100) as $n) {\n  echo starts_one_ends($n), \"\\\
    n\";\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n10\n110\n1100\n11000\n1100000000\n1.1E+19\n\nFatal error: Uncaught DivisionByZeroError:\
    \ Modulo by zero in /tmp/tmpkkzskriq.php:16\nStack trace:\n#0 /tmp/tmpkkzskriq.php(22):\
    \ starts_one_ends(100)\n#1 {main}\n  thrown in /tmp/tmpkkzskriq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n \
    \ }\n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8jzdc1t.php:19\n\
    Stack trace:\n#0 /tmp/tmpx8jzdc1t.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpx8jzdc1t.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else {\n        return pow(2,\
    \ $n - 1) + (9 * pow(2, $n - 2));\n    }\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\n\
    var_dump(starts_one_ends(5));\nvar_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\n\
    var_dump(starts_one_ends(8));\nvar_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(2)\nint(11)\nint(22)\nint(44)\nint(88)\nint(176)\nint(352)\nint(704)\n\
    int(1408)\nint(2816)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1g655qk1.php:27\n\
    Stack trace:\n#0 /tmp/tmp1g655qk1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1g655qk1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else {\n        $count = $n\
    \ * 2;\n        for ($i = 2; $i < $n; $i++) {\n            $count += pow(2, $i\
    \ - 1);\n        }\n        return $count;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuxda77d.php:21\n\
    Stack trace:\n#0 /tmp/tmphuxda77d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphuxda77d.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $maximum = pow(10, $n) - 1;\n    $minimum = pow(10,\
    \ $n - 1);\n    for ($i = $minimum; $i <= $maximum; $i++) {\n        if (substr($i,\
    \ 0, 1) == 1 || substr($i, -1) == 1) {\n            $count++;\n        }\n   \
    \ }\n    return $count;\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(4));\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(1)\nint(18)\nint(1800)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= 9; $i++) {\n    $count += dfs($n, $i);\n\
    \  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function dfs() in /tmp/tmpbvokl1_b.php:7\n\
    Stack trace:\n#0 /tmp/tmpbvokl1_b.php(13): starts_one_ends(1)\n#1 /tmp/tmpbvokl1_b.php(17):\
    \ candidate(1)\n#2 /tmp/tmpbvokl1_b.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpbvokl1_b.php\
    \ on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // Let f(n) be the number of n-digit positive integers that start or\
    \ end\n    // with 1. It is not too hard to see that if n is odd, then f(n) =\
    \ f(n-1).\n    // If n is even, then f(n) = f(n-1) - 1.\n    // The explanation\
    \ is as follows: a positive integer of n digits can either\n    // start with\
    \ 1 and end with a number that is not 1, or end with 1 and start\n    // with\
    \ a number that is not 1. f(n-1) accounts for the first case. As for\n    // the\
    \ second case, if we subtract the total number of integers of (n-1)\n    // digits\
    \ that end with 1, then the difference is the number of integers of\n    // (n-1)\
    \ digits that start with 1.\n    $dp = array(1,1);\n    $dp[] = count($dp);\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[] = $dp[$i-1] + ($i % 2 == 0\
    \ ? -1 : 0);\n    }\n    return $dp[$n];\n}\n\necho starts_one_ends(7) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqib2s4sp.php:29\n\
    Stack trace:\n#0 /tmp/tmpqib2s4sp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqib2s4sp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $arr = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1];\n  if ($n <= 1) {\n    return 1;\n\
    \  }\n  for ($i = 2; $i <= $n; $i++) {\n    $arr[$i] = 10 * $arr[$i - 1] - 9 *\
    \ $arr[$i - 2];\n  }\n  return $arr[$n];\n}\n\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi599zn67.php:21\n\
    Stack trace:\n#0 /tmp/tmpi599zn67.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpi599zn67.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n <= 1) return 0;\n    else if($n == 2) return 9;\n    else if($n\
    \ == 3) return 30;\n    else if($n == 4) return 90;\n    else if($n == 5) return\
    \ 270;\n    else if($n == 6) return 810;\n    else if($n == 7) return 2430;\n\
    \    else if($n == 8) return 7290;\n    else if($n == 9) return 21870;\n    else\
    \ if($n == 10) return 65610;\n    else if($n == 11) return 196830;\n    else if($n\
    \ == 12) return 590490;\n    else if($n == 13) return 1771470;\n    else if($n\
    \ == 14) return 5314410;\n    else if($n == 15) return 15943240;\n    else if($n\
    \ == 16) return 47829690;\n    else if($n == 17) return 143489110;\n    else if($n\
    \ == 18) return 430467260;\n    else if($n == 19) return 1291401630;\n    else\
    \ if($n == 20) return 3874204890;\n    else if($n == 21) return 11622614600;\n\
    \    else if($n == 22) return 34867844300;\n    else if($n == 23) return 104603532060;\n\
    \    else if($n == 24) return 313810596090;\n    else if($n == 25) return 941431788270;\n\
    \    else if($n == 26) return 2824295364800;\n    else if($n == 27) return 8472886094400;\n\
    \    else if($n == 28) return 25418658283200;\n    else if($n == 29) return 76255974849800;\n\
    \    else if($n == 30) return 228767924549600;\n    else if($n == 31) return 686303773648820;\n\
    \    else if($n == 32) return 2058911320946490;\n    else if($n == 33) return\
    \ 6176733962839600;\n    else if($n == 34) return 18530201888518580;\n    else\
    \ if($\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8mwkddvo.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $table = array_fill(0, $n, array_fill(0, 2, 0));\n    $table[0][0] =\
    \ 1;\n    $table[0][1] = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $table[$i][0]\
    \ = $table[$i - 1][0] + $table[$i - 1][1];\n        $table[$i][1] = $table[$i\
    \ - 1][0];\n    }\n    return $table[$n - 1][0] + $table[$n - 1][1];\n}\n\nforeach\
    \ (range(1, 6) as $n) {\n    echo \"Starts one ends for $n = \" . starts_one_ends($n)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "Starts one ends for 1 = 2\nStarts one ends for 2 = 3\nStarts one ends for\
    \ 3 = 5\nStarts one ends for 4 = 8\nStarts one ends for 5 = 13\nStarts one ends\
    \ for 6 = 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjzvwsru.php:23\n\
    Stack trace:\n#0 /tmp/tmptjzvwsru.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptjzvwsru.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) return 0;\n    if ($n == 1) return 2;\n    $a = 2;\n    $b\
    \ = 0;\n    $tmp = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $tmp = $a;\n\
    \        $a = $a + $b;\n        $b = $tmp;\n    }\n    return $a + $b;\n}\n\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d73bvkf.php:23\n\
    Stack trace:\n#0 /tmp/tmp1d73bvkf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1d73bvkf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) return 10;\n    if ($n == 2) return 200;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\nfor ($i = 1; $i <= 9; $i++) {\n    print_r(starts_one_ends($i));\n\
    \    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "10\n200\n210\n410\n620\n1030\n1650\n2680\n4330\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9rfwxyh5.php:19\nStack trace:\n#0 /tmp/tmp9rfwxyh5.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9rfwxyh5.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    for ($i = 1; $i < $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\necho starts_one_ends(5);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "12222\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmw1f0dl.php:21\n\
    Stack trace:\n#0 /tmp/tmprmw1f0dl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprmw1f0dl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if($n == 1) {\n    return 9;\n  }\n\n  if($n == 2) {\n    return 18;\n\
    \  }\n\n  $ans = starts_one_ends($n - 1) + starts_one_ends($n - 2);\n  return\
    \ $ans;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpwgiv6_.php:22\n\
    Stack trace:\n#0 /tmp/tmpnpwgiv6_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnpwgiv6_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 10 ** ($n - 1); $i < 10 ** $n; $i++) {\n    if\
    \ (strlen($i) == $n) {\n      if (strpos($i, \"1\") === 0 || strpos($i, \"1\"\
    ) === strlen($i) - 1) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2kad8ap.php:23\n\
    Stack trace:\n#0 /tmp/tmpg2kad8ap.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpg2kad8ap.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Time: O(n)\n  // Space: O(1)\n  // if n == 1, all single digit numbers\
    \ start with 1, hence the count is 9\n  if ($n == 1) {\n    return 9;\n  }\n\n\
    \  // all single digit numbers end with 1 hence 10\n  $ones = 10;\n  // all two\
    \ digit numbers starting with 1\n  $tens = 9;\n  // all two digit numbers ending\
    \ with 1\n  $end = 10;\n  for ($i = 2; $i <= $n; $i++) {\n    // the count of\
    \ numbers with length i = total count\n    // of numbers with length i-1 (11...1)\
    \ plus the count of numbers\n    // of length i-1 that ends with 1 and has one\
    \ less digit to allow\n    // to be at the beginning of i-length numbers.\n  \
    \  $count = $ones + $tens;\n    // all two digit numbers end with 1.\n    $tens\
    \ = $ones;\n    // all two digit numbers ending with 1\n    $ones = $count;\n\
    \  }\n  return $count;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n  echo \"count of\
    \ numbers of length $i: \" . starts_one_ends($i) . PHP_EOL;\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "count of numbers of length 1: 9\ncount of numbers of length 2: 19\ncount\
    \ of numbers of length 3: 29\ncount of numbers of length 4: 48\ncount of numbers\
    \ of length 5: 77\ncount of numbers of length 6: 125\ncount of numbers of length\
    \ 7: 202\ncount of numbers of length 8: 327\ncount of numbers of length 9: 529\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiwqvydh.php:40\nStack\
    \ trace:\n#0 /tmp/tmpxiwqvydh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxiwqvydh.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 3;\n    } else {\n        return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n    }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n3\n5\n8\n13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanlz__3s.php:24\n\
    Stack trace:\n#0 /tmp/tmpanlz__3s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpanlz__3s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $result = 0;\n    if ($n == 1) {\n        $result = 10;\n    } else {\n\
    \        // number of n-digit numbers that end with 1, need to keep track of\n\
    \        // number of zeros (1, 10, 100, 1000).\n        $zeros = 1;\n       \
    \ $ends_one = 0;\n        // number of n-digit numbers that start with 1, need\
    \ to keep track of\n        // number of 9s (9, 99, 999, 9999).\n        $nines\
    \ = 1;\n        $starts_one = 0;\n        // Start with n = 2 since we already\
    \ took care of 1-digit numbers.\n        for ($i = 2; $i <= $n; $i++) {\n    \
    \        // for each number that ends with 1, we can append a zero to make\n \
    \           // the number have n+1 digits.\n            $zeros = $ends_one;\n\
    \            // for each number that ends with 1, we can add a 2-9 to the end\
    \ of\n            // it to make the number have n+1 digits.\n            $ends_one\
    \ = $zeros + $ends_one + 9;\n            // for each number that starts with 1,\
    \ we can add a zero to the\n            // beginning of it to make the number\
    \ have n+1 digits.\n            $nines *= 10;\n            // for each number\
    \ that starts with 1, we can add a 0-8 to the\n            // beginning of it\
    \ to make the number have n+1 digits.\n            $starts_one = $nines + $starts_one\
    \ + 8;\n        }\n        $result = $starts_one + $ends_one;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvo0w1vr.php:42\n\
    Stack trace:\n#0 /tmp/tmpfvo0w1vr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfvo0w1vr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $total = 9;\n  $a = 9;\n  $b = 1;\n  for ($i = 2; $i <= $n; $i++) {\n \
    \   $total = $total * 10 - $a + $b;\n    $a = $a * 10;\n    $b = $b * 10;\n  }\n\
    \  return $total;\n}\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2)\
    \ == 12);\nassert(starts_one_ends(3) == 62);\nassert(starts_one_ends(4) == 302);\n\
    assert(starts_one_ends(5) == 1492);\nassert(starts_one_ends(6) == 7452);\nassert(starts_one_ends(7)\
    \ == 37212);\nassert(starts_one_ends(8) == 186052);\nassert(starts_one_ends(9)\
    \ == 932752);\nassert(starts_one_ends(10) == 4665852);\nassert(starts_one_ends(11)\
    \ == 23337152);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(starts_one_ends(1) == 2) failed in /tmp/tmp8v9fkzp7.php\
    \ on line 16\n\nWarning: assert(): assert(starts_one_ends(2) == 12) failed in\
    \ /tmp/tmp8v9fkzp7.php on line 17\n\nWarning: assert(): assert(starts_one_ends(3)\
    \ == 62) failed in /tmp/tmp8v9fkzp7.php on line 18\n\nWarning: assert(): assert(starts_one_ends(4)\
    \ == 302) failed in /tmp/tmp8v9fkzp7.php on line 19\n\nWarning: assert(): assert(starts_one_ends(5)\
    \ == 1492) failed in /tmp/tmp8v9fkzp7.php on line 20\n\nWarning: assert(): assert(starts_one_ends(6)\
    \ == 7452) failed in /tmp/tmp8v9fkzp7.php on line 21\n\nWarning: assert(): assert(starts_one_ends(7)\
    \ == 37212) failed in /tmp/tmp8v9fkzp7.php on line 22\n\nWarning: assert(): assert(starts_one_ends(8)\
    \ == 186052) failed in /tmp/tmp8v9fkzp7.php on line 23\n\nWarning: assert(): assert(starts_one_ends(9)\
    \ == 932752) failed in /tmp/tmp8v9fkzp7.php on line 24\n\nWarning: assert(): assert(starts_one_ends(10)\
    \ == 4665852) failed in /tmp/tmp8v9fkzp7.php on line 25\n\nWarning: assert():\
    \ assert(starts_one_ends(11) == 23337152) failed in /tmp/tmp8v9fkzp7.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8v9fkzp7.php:33\n\
    Stack trace:\n#0 /tmp/tmp8v9fkzp7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8v9fkzp7.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $dp = array_fill(0, $n,\
    \ 0);\n    $dp[0] = 1;\n    $dp[1] = 2;\n    for ($i = 2; $i < $n; $i++) {\n \
    \       $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1] *\
    \ 2;\n}\n\n$n = 1;\n$ret = starts_one_ends($n);\nvar_dump($ret);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(2)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjrf_z2r.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjrf_z2r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjrf_z2r.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $start = ($n - 1) * pow(9,\
    \ 2);\n    $end = (pow(10, $n) - 1) / 9;\n    return $start + $end;\n}\n\n$n =\
    \ 3;\necho starts_one_ends($n) . PHP_EOL;\nfunction candidate(...$args) {\n  \
    \  return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "273\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzegkl_vg.php:20\n\
    Stack trace:\n#0 /tmp/tmpzegkl_vg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzegkl_vg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n <= 0) return 0;\n  if ($n == 1) return 1;\n  return pow(10, $n -\
    \ 1) + starts_one_ends($n - 1);\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(10));\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(1)\nint(11)\nint(111)\nint(1111)\nint(11111)\nint(111111)\nint(1111111111)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl3tsda7.php:23\nStack\
    \ trace:\n#0 /tmp/tmpyl3tsda7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyl3tsda7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Find the number of base 10 numbers that start with 1. This is\n  //\
    \ easy, as it's just 9 * 10^(n-1).\n  $total = 9 * pow(10, $n - 1);\n\n  // The\
    \ end of the number can only be 1 if the digits in the middle\n  // are all 0.\n\
    \  $num_zeros = $n - 2;\n  if ($num_zeros == 0) {\n    return $total;\n  }\n\n\
    \  // For each number of zeros, we have 9 choices for the first digit,\n  // 10\
    \ choices for the last digit, and then 10^(num_zeros - 1)\n  // choices for the\
    \ digits in the middle.\n  for ($i = 1; $i <= $num_zeros; $i++) {\n    $total\
    \ += 9 * 10 * pow(10, $i - 1);\n  }\n\n  return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh03kxlq.php:31\n\
    Stack trace:\n#0 /tmp/tmpjh03kxlq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjh03kxlq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else {\n        return starts_one_ends($n\
    \ - 1) + 10 * pow(10, $n - 2);\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mprc0n2.php:17\n\
    Stack trace:\n#0 /tmp/tmp0mprc0n2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0mprc0n2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $f = [1, 1];\n    for ($i = 1; $i < $n; $i++) {\n        $f[$i + 1] =\
    \ $f[$i] + 9 * $f[$i - 1];\n    }\n    return $f[$n];\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "1\n10\n19\n109\n280\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpakg69cii.php:23\nStack trace:\n#0 /tmp/tmpakg69cii.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmpakg69cii.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) return 2;\n    if ($n == 2) return 3;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6mt1h33.php:15\n\
    Stack trace:\n#0 /tmp/tmpi6mt1h33.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpi6mt1h33.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n      \
    \  return 7;\n    }\n    $for_number = 0;\n    $for_start = 0;\n    $for_end =\
    \ 0;\n    $for_both = 0;\n    $for_zero = 0;\n    $for_max = 0;\n    $for_min\
    \ = 0;\n    if ($n == 3) {\n        $for_number = 6;\n        $for_start = 2;\n\
    \        $for_end = 4;\n        $for_both = 1;\n        $for_zero = 1;\n     \
    \   $for_max = 2;\n        $for_min = 1;\n    }\n    if ($n == 4) {\n        $for_number\
    \ = 35;\n        $for_start = 14;\n        $for_end = 21;\n        $for_both =\
    \ 6;\n        $for_zero = 6;\n        $for_max = 10;\n        $for_min = 4;\n\
    \    }\n    if ($n == 5) {\n        $for_number = 222;\n        $for_start = 86;\n\
    \        $for_end = 135;\n        $for_both = 51;\n        $for_zero = 51;\n \
    \       $for_max = 70;\n        $for_min = 30;\n    }\n    if ($n == 6) {\n  \
    \      $for_number = 1397;\n        $for_start = 552;\n        $for_end = 845;\n\
    \        $for_both = 351;\n        $for_zero = 351;\n        $for_max = 496;\n\
    \        $for_min = 192;\n    }\n    if ($n == 7) {\n        $for_number = 8855;\n\
    \        $for_start = 3404;\n        $for_end = 5451;\n        $for_both = 2251;\n\
    \        $for_zero = 2251;\n        $for_max = 3216;\n        $for_min = 1264;\n\
    \    }\n    $count = 0;\n    if ($n > 3) {\n        $count += $for_number;\n \
    \       $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpff4jvq05.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += 9 * pow(10,\
    \ $i - 1);\n  }\n  return $count;\n}\nvar_dump(starts_one_ends(1));\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(9)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_1i_e9x.php:17\n\
    Stack trace:\n#0 /tmp/tmph_1i_e9x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmph_1i_e9x.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n      \
    \  return 10;\n    }\n    $pow = pow(10, $n - 1);\n    $minus_one = pow(10, $n\
    \ - 2);\n    return $pow + 9 * $minus_one;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8abwbh1.php:21\n\
    Stack trace:\n#0 /tmp/tmpj8abwbh1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj8abwbh1.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n == 1) return 2;\n    if($n == 2) return 6;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3).\"\\n\";\necho\
    \ starts_one_ends(4).\"\\n\";\necho starts_one_ends(5).\"\\n\";\necho starts_one_ends(6).\"\
    \\n\";\necho starts_one_ends(7).\"\\n\";\necho starts_one_ends(8).\"\\n\";\necho\
    \ starts_one_ends(9).\"\\n\";\necho starts_one_ends(10).\"\\n\";\necho starts_one_ends(11).\"\
    \\n\";\necho starts_one_ends(12).\"\\n\";\necho starts_one_ends(13).\"\\n\";\n\
    echo starts_one_ends(14).\"\\n\";\necho starts_one_ends(15).\"\\n\";\necho starts_one_ends(16).\"\
    \\n\";\necho starts_one_ends(17).\"\\n\";\necho starts_one_ends(18).\"\\n\";\n\
    echo starts_one_ends(19).\"\\n\";\necho starts_one_ends(20).\"\\n\";\necho starts_one_ends(21).\"\
    \\n\";\necho starts_one_ends(22).\"\\n\";\necho starts_one_ends(23).\"\\n\";\n\
    echo starts_one_ends(24).\"\\n\";\necho starts_one_ends(25).\"\\n\";\necho starts_one_ends(26).\"\
    \\n\";\necho starts_one_ends(27).\"\\n\";\necho starts_one_ends(28).\"\\n\";\n\
    echo starts_one_ends(29).\"\\n\";\necho starts_one_ends(30).\"\\n\";\necho starts_one_ends(31).\"\
    \\n\";\necho starts_one_ends(32).\"\\n\";\necho starts_one_ends(33).\"\\n\";\n\
    echo starts_one_ends(34).\"\\n\";\necho starts_one_ends(35).\"\\n\";\necho starts_one_ends(36).\"\
    \\n\";\necho starts_one_ends(37).\"\\n\";\necho starts_one_ends(\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptj_7gufy.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  if ($n == 1) {\n    return 2;\n  }\n  for ($i = 1; $i <=\
    \ $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count * 2;\n}\n\n\
    assert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2) == 20);\nassert(starts_one_ends(3)\
    \ == 200);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(starts_one_ends(2) == 20) failed in /tmp/tmp94d7j785.php\
    \ on line 16\n\nWarning: assert(): assert(starts_one_ends(3) == 200) failed in\
    \ /tmp/tmp94d7j785.php on line 17\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp94d7j785.php:24\nStack trace:\n#0 /tmp/tmp94d7j785.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmp94d7j785.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // base case\n  if ($n == 1) return 2;\n\n  $tens = 10;\n  for ($i = 2;\
    \ $i < $n; $i++) $tens *= 10;\n\n  $ret = $tens + 9 * (1 + starts_one_ends($n\
    \ - 1));\n  return $ret;\n}\n\nfor ($i = 1; $i < 5; $i++) {\n  $result = starts_one_ends($i);\n\
    \  var_dump($result);\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "int(2)\nint(37)\nint(442)\nint(4987)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplq98xfk4.php:24\nStack trace:\n#0 /tmp/tmplq98xfk4.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplq98xfk4.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $length = 1;\n    $sum = 0;\n    $starts = 0;\n    $ends = 0;\n    $s\
    \ = 1;\n    $e = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $e = $e * 10;\n\
    \        $s = $s * 10;\n        $starts = $starts + $s;\n        $ends = $ends\
    \ + $e;\n        $sum = $sum + $starts + $ends;\n    }\n    return $sum;\n}\n\n\
    echo starts_one_ends(5);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "246900\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqo9jlnm.php:28\n\
    Stack trace:\n#0 /tmp/tmpjqo9jlnm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjqo9jlnm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 5;\n    } else {\n        $a = 1;\n        $b = 1;\n        $c = 2;\n\
    \        for ($i = 3; $i <= $n; $i++) {\n            $d = $a + $b + $c;\n    \
    \        $a = $b;\n            $b = $c;\n            $c = $d;\n        }\n   \
    \     return $d;\n    }\n}\n\necho starts_one_ends(5) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_5cc9nx.php:29\n\
    Stack trace:\n#0 /tmp/tmpk_5cc9nx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk_5cc9nx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $input = str_repeat('1', $n);\n  $max = 10**$n;\n  $count = 0;\n  for ($i\
    \ = 1; $i < $max; $i++) {\n    if (strpos($i, $input) === 0 || strpos($i, $input)\
    \ === strlen($i) - strlen($input)) {\n      $count++;\n    }\n  }\n  return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gjti7y.php:22\n\
    Stack trace:\n#0 /tmp/tmp63gjti7y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp63gjti7y.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // 1-digit positive integers that start with 1: 1\n    if ($n == 1) {\n\
    \        return 1;\n    }\n    // n-digit positive integers that start with 1:\
    \ 9*10^(n-2)\n    $starts = 9 * pow(10, $n - 2);\n    // n-digit positive integers\
    \ that end with 1: 10^(n-1)\n    $ends = pow(10, $n - 1);\n    return $starts\
    \ + $ends;\n}\necho starts_one_ends(3);\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "190\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpae2eqfx5.php:22\n\
    Stack trace:\n#0 /tmp/tmpae2eqfx5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpae2eqfx5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $sum += pow(10, $i);\n\
    \  }\n  return $sum * 2;\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpskbwehso.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) return 2;\n  $left_most = 10 ** ($n - 1);\n  $left_most_1\
    \ = $left_most + 1;\n  $right_most = pow(10, $n) - 1;\n  $right_most_1 = pow(10,\
    \ $n - 1) - 1;\n  return $left_most_1 + $right_most_1 + starts_one_ends($n - 1);\n\
    }\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2) == 12);\nassert(starts_one_ends(3)\
    \ == 132);\nassert(starts_one_ends(4) == 1332);\nassert(starts_one_ends(5) ==\
    \ 13332);\nassert(starts_one_ends(6) == 133332);\nassert(starts_one_ends(7) ==\
    \ 1333332);\nassert(starts_one_ends(8) == 13333332);\nassert(starts_one_ends(9)\
    \ == 133333332);\nassert(starts_one_ends(10) == 1333333332);\necho \"Tests passed\\\
    n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(starts_one_ends(2) == 12) failed in /tmp/tmpakccm_cs.php\
    \ on line 14\n\nWarning: assert(): assert(starts_one_ends(3) == 132) failed in\
    \ /tmp/tmpakccm_cs.php on line 15\n\nWarning: assert(): assert(starts_one_ends(4)\
    \ == 1332) failed in /tmp/tmpakccm_cs.php on line 16\n\nWarning: assert(): assert(starts_one_ends(5)\
    \ == 13332) failed in /tmp/tmpakccm_cs.php on line 17\n\nWarning: assert(): assert(starts_one_ends(6)\
    \ == 133332) failed in /tmp/tmpakccm_cs.php on line 18\n\nWarning: assert(): assert(starts_one_ends(7)\
    \ == 1333332) failed in /tmp/tmpakccm_cs.php on line 19\n\nWarning: assert():\
    \ assert(starts_one_ends(8) == 13333332) failed in /tmp/tmpakccm_cs.php on line\
    \ 20\n\nWarning: assert(): assert(starts_one_ends(9) == 133333332) failed in /tmp/tmpakccm_cs.php\
    \ on line 21\n\nWarning: assert(): assert(starts_one_ends(10) == 1333333332) failed\
    \ in /tmp/tmpakccm_cs.php on line 22\nTests passed\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpakccm_cs.php:29\nStack trace:\n#0 /tmp/tmpakccm_cs.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpakccm_cs.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 2) {\n    return 0;\n  }\n\n  if ($n == 2) {\n    return 10;\n\
    \  }\n\n  $count = pow(10, $n - 1);\n\n  for ($i = 2; $i < $n; $i++) {\n    $count\
    \ += pow(10, $i - 1) * (pow(10, $n - $i) - 1);\n  }\n\n  return $count;\n}\n\n\
    for ($i = 1; $i < 20; $i++) {\n  echo starts_one_ends($i) . PHP_EOL;\n}\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "0\n10\n190\n2890\n38890\n488890\n5888890\n68888890\n788888890\n8888888890\n\
    98888888890\n1088888888890\n11888888888890\n128888888888890\n1388888888888890\n\
    14888888888888890\n158888888888888890\n1688888888888888890\n1.7888888888889E+19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4htkmes.php:30\nStack\
    \ trace:\n#0 /tmp/tmpj4htkmes.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj4htkmes.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $num = 0;\n  $i = pow(10, $n - 1);\n  while ($i < pow(10, $n)) {\n    if\
    \ ($i % 10 == 1 || $i / pow(10, $n - 1) == 1) {\n      $num++;\n    }\n    $i++;\n\
    \  }\n  return $num;\n}\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'1\n10\n91\n901\n9001\n90001\n900001\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n === 1) {\n        return 1;\n    }\n\n    $left = $n - 1;\n  \
    \  $right = 1;\n    $sum = 1;\n    $res = 1;\n    $digits = \"123456789\";\n \
    \   $power = 10;\n    $end = substr($digits, 0, $n);\n    $start = substr($digits,\
    \ 0, $n - 1);\n\n    for ($i = 1; $i < $n; $i++) {\n        $sum = $sum * $left;\n\
    \        $res = $res + $sum;\n        $left--;\n    }\n\n    for ($i = $n - 1;\
    \ $i > 0; $i--) {\n        $sum = $sum * $right;\n        $res = $res + $sum;\n\
    \        $right++;\n    }\n\n    $res = $res + $sum;\n\n    $res = $res + (int)\
    \ substr($end, 0, -1);\n    $res = $res + (int) substr($start, 1);\n\n    return\
    \ $res;\n}\n\n$input = 5;\n$result = starts_one_ends($input);\necho $result;\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2901\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq9g30_x.php:47\n\
    Stack trace:\n#0 /tmp/tmpnq9g30_x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnq9g30_x.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // We choose whether the first digit is 1 and then count the number of\n\
    \    // legal numbers with the rest of the digits.\n    $count = 9 * pow(10, $n\
    \ - 1);\n    // We choose whether the last digit is 1 and then count the number\
    \ of\n    // legal numbers with the rest of the digits.\n    $count += 9 * pow(10,\
    \ $n - 1);\n    // We can't have both the first and last digits as 1, so we subtract\
    \ 1.\n    return $count - 1;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhc3n1vi.php:19\n\
    Stack trace:\n#0 /tmp/tmpnhc3n1vi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnhc3n1vi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $start = 9;\n  $ends = pow(10, $n - 1);\n  $res = $start + $ends;\n  return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dfhdm0t.php:15\n\
    Stack trace:\n#0 /tmp/tmp1dfhdm0t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1dfhdm0t.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Base case.\n  if ($n == 1) {\n    return 2;\n  }\n\n  // Recursive case.\n\
    \  return (10 * starts_one_ends($n - 1)) - pow(9, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gojkdey.php:19\n\
    Stack trace:\n#0 /tmp/tmp_gojkdey.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_gojkdey.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n < 1) {\n        return 0;\n    }\n    return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1) + 9 * pow(10, $n - 2);\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho\
    \ starts_one_ends(29\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnx03st1n.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n < 1) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n\
    \  $x = 0;\n  $min = 1;\n  $max = 1;\n  $i = 1;\n  while ($i++ < $n) {\n    $min\
    \ *= 10;\n    $max = $max * 10 + 1;\n  }\n  $x += $max - $min + 1;\n  // $x +=\
    \ pow(10, $n) - pow(10, $n - 1);\n  $x += starts_one_ends($n - 1);\n  return $x;\n\
    }\n\nvar_dump(starts_one_ends(3));\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(15)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfri4a8z6.php:32\n\
    Stack trace:\n#0 /tmp/tmpfri4a8z6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfri4a8z6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $pow = pow(10, $n - 1);\n    for ($i = $pow; $i < $pow\
    \ * 10; $i++) {\n        if ($i % 10 == 1 || $i % $pow == 1) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\necho starts_one_ends(6);\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "90000\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28x01by_.php:22\n\
    Stack trace:\n#0 /tmp/tmp28x01by_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp28x01by_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $prefixOne = 1;\n    $suffixOne = 1;\n    $nonOne = 0;\n    $all = 0;\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        $tmp = $all;\n        $all = $nonOne\
    \ + $prefixOne + $suffixOne;\n        $nonOne = $all - $prefixOne - $suffixOne;\n\
    \        $prefixOne = $tmp;\n        $suffixOne = $prefixOne;\n    }\n    return\
    \ $all;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2v2acfu.php:24\n\
    Stack trace:\n#0 /tmp/tmps2v2acfu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps2v2acfu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 9;\n \
    \ }\n  return 9 * pow(10, $n - 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8net9zys.php:19\n\
    Stack trace:\n#0 /tmp/tmp8net9zys.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8net9zys.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $total = 0;\n    $offset = 1;\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      $total += $offset;\n        $offset *= 10;\n    }\n    return $total *\
    \ 2;\n}\n\nforeach (range(1, 10) as $n) {\n    echo starts_one_ends($n) . PHP_EOL;\n\
    }\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n22\n222\n2222\n22222\n222222\n2222222\n22222222\n222222222\n2222222222\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9afli5d.php:22\nStack\
    \ trace:\n#0 /tmp/tmpy9afli5d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy9afli5d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6biluhf.php:18\n\
    Stack trace:\n#0 /tmp/tmpj6biluhf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj6biluhf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n      \
    \  return 10;\n    }\n    return 9 * pow(10, $n - 2);\n}\n\n$fp = fopen(\"php://stdin\"\
    , \"r\");\n\nfscanf($fp, \"%d\", $t);\n\nfor ($i = 0; $i < $t; $i++) {\n    fscanf($fp,\
    \ \"%d\", $n);\n    echo starts_one_ends($n) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03zw48_v.php:28\n\
    Stack trace:\n#0 /tmp/tmp03zw48_v.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp03zw48_v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $end = 9;\n    for ($i\
    \ = 1; $i < $n - 1; $i++) {\n        $end *= 10;\n    }\n    return $end * 2;\n\
    }\necho starts_one_ends(5) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "18000\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsn40ju_7.php:20\n\
    Stack trace:\n#0 /tmp/tmpsn40ju_7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsn40ju_7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // $count = 0;\n    // for ($num = 1; $num <= pow(10, $n); $num++) {\n\
    \    //     if (strpos($num, \"1\") === 0 || strpos($num, \"1\") === strlen($num)\
    \ - 1) {\n    //         $count++;\n    //     }\n    // }\n    // return $count;\n\
    \n    // $count = 0;\n    // for ($i = 1; $i <= 9; $i++) {\n    //     $count\
    \ += pow(10, $n - 1);\n    // }\n    // return $count * 2;\n\n    return pow(10,\
    \ $n - 1) * 9;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\necho\
    \ starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\necho\
    \ starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\necho\
    \ starts_one_ends(9);\necho starts_one_ends(10);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9909009000900009000009000000900000009000000009000000000\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp39y4hukb.php:37\nStack trace:\n#0 /tmp/tmp39y4hukb.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp39y4hukb.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    $p = pow(10, $n - 1);\n    for ($i = $p; $i < $p * 10;\
    \ $i++) {\n        if (strpos(strval($i), '1') == 0 ||\n            strpos(strval($i),\
    \ '1') == (strlen(strval($i)) - 1)) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'90\n820\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $a = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $a += count_digits($i);\n\
    \  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_digits()\
    \ in /tmp/tmpg7xp_42o.php:7\nStack trace:\n#0 /tmp/tmpg7xp_42o.php(13): starts_one_ends(1)\n\
    #1 /tmp/tmpg7xp_42o.php(17): candidate(1)\n#2 /tmp/tmpg7xp_42o.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg7xp_42o.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $answer = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $answer += 9 * pow(10,\
    \ $i - 1);\n  }\n  return $answer;\n}\necho starts_one_ends(3) . \"\\n\";\necho\
    \ starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(4)\
    \ . \"\\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\
    \\n\";\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\"\
    ;\necho starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho\
    \ starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13)\
    \ . \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) .\
    \ \"\\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\
    \\n\";\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\"\
    ;\necho starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\n\
    echo starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho\
    \ starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26)\
    \ . \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) .\
    \ \"\\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\
    \\n\";\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\"\
    ;\necho starts_one_ends(33) . \"\\\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg6sjsiim.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 3;\n    } else {\n        $start = starts_one_ends($n - 1);\n      \
    \  $end = starts_one_ends($n - 2);\n        return $start + $end;\n    }\n}\n\n\
    assert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2) == 3);\nassert(starts_one_ends(3)\
    \ == 5);\nassert(starts_one_ends(4) == 8);\nassert(starts_one_ends(5) == 13);\n\
    assert(starts_one_ends(6) == 21);\nassert(starts_one_ends(7) == 34);\nassert(starts_one_ends(8)\
    \ == 55);\nassert(starts_one_ends(9) == 89);\nassert(starts_one_ends(10) == 144);\n\
    \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadouedlq.php:32\n\
    Stack trace:\n#0 /tmp/tmpadouedlq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpadouedlq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    $dp = [1, 1];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + 1;\n    }\n    return\
    \ $dp[$n];\n}\n\nforeach (range(1, 10) as $n) {\n    echo sprintf(\"%2d: %d\\\
    n\", $n, starts_one_ends($n));\n}\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: " 1: 2\n 2: 2\n 3: 3\n 4: 4\n 5: 5\n 6: 6\n 7: 7\n 8: 8\n 9: 9\n10: 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1v7cbqvx.php:23\nStack\
    \ trace:\n#0 /tmp/tmp1v7cbqvx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1v7cbqvx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  return pow(2, $n - 1) + starts_one_ends($n\
    \ - 1);\n}\n\necho starts_one_ends(5);\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "32\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcjrcblf.php:17\n\
    Stack trace:\n#0 /tmp/tmphcjrcblf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphcjrcblf.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n == 1) {\n        return 2;\n    }\n    $result = 9 * (10 ** ($n\
    \ - 2));\n    return $result;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33cddp8v.php:16\n\
    Stack trace:\n#0 /tmp/tmp33cddp8v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp33cddp8v.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    // First we construct the base number\n    $base = '';\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $base .= '1';\n    }\n    $val = intval($base);\n\
    \    // Now we brute force to find all possibilities\n    $count = 0;\n    while\
    \ ($val >= pow(10, $n - 1)) {\n        if ($val % 10 == 1) {\n            $count++;\n\
    \        }\n        $val--;\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaflrmvxb.php:28\n\
    Stack trace:\n#0 /tmp/tmpaflrmvxb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaflrmvxb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $count = 0;\n  if ($n == 1) {\n    return 10;\n  }\n  for ($i = 10 ** ($n\
    \ - 1); $i < 10 ** $n; $i++) {\n    if (strpos($i, '1') === 0 || strpos($i, '1')\
    \ === strlen($i) - 1) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\n\
    $i = 1;\n$count = 0;\nwhile (true) {\n  $count += starts_one_ends($i);\n  if ($count\
    \ > 1000000) {\n    break;\n  }\n  $i++;\n}\necho $i;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rhlendp.php:32\n\
    Stack trace:\n#0 /tmp/tmp0rhlendp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0rhlendp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    return pow(10, $n - 1)\
    \ * 2;\n}\n\nvar_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(3));\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(20)\nint(2)\nint(200)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnzox1i7e.php:19\nStack trace:\n#0 /tmp/tmpnzox1i7e.php(26): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnzox1i7e.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) return 1;\n  return ends_one_ends($n - 1) + starts_one_ends($n\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function ends_one_ends()\
    \ in /tmp/tmpxqlc385w.php:6\nStack trace:\n#0 /tmp/tmpxqlc385w.php(10): starts_one_ends(2)\n\
    #1 /tmp/tmpxqlc385w.php(15): candidate(2)\n#2 /tmp/tmpxqlc385w.php(21): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxqlc385w.php on line 6\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9,\
    \ $i-1);\n    }\n    return $count;\n}\necho starts_one_ends(5);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7381\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3rj4s26.php:18\n\
    Stack trace:\n#0 /tmp/tmpg3rj4s26.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpg3rj4s26.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 4;\n    } else {\n        return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n    }\n}\necho starts_one_ends(3) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jb0ln62.php:19\n\
    Stack trace:\n#0 /tmp/tmp6jb0ln62.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6jb0ln62.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $total = 0;\n    $first_digit = 0;\n    $last_digit = 0;\n    $one_in_middle\
    \ = 0;\n    $num_digits = 0;\n    $min = pow(10, $n - 1);\n    $max = pow(10,\
    \ $n) - 1;\n    for ($i = $min; $i <= $max; $i++) {\n        $num_digits = digit_count($i);\n\
    \        $first_digit = get_first_digit($i);\n        $last_digit = get_last_digit($i);\n\
    \        $one_in_middle = contains_one($i);\n        if ($num_digits == $n) {\n\
    \            if ($first_digit == 1 || $last_digit == 1 || $one_in_middle) {\n\
    \                $total++;\n            }\n        }\n    }\n    return $total;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function digit_count()\
    \ in /tmp/tmpdtk96y7w.php:13\nStack trace:\n#0 /tmp/tmpdtk96y7w.php(27): starts_one_ends(1)\n\
    #1 /tmp/tmpdtk96y7w.php(31): candidate(1)\n#2 /tmp/tmpdtk96y7w.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdtk96y7w.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 1;\n    }\n    $nums = 1; //nums start\
    \ with 1\n    $nums += 9; //nums end with 1\n    $nums += 9 * pow(10, $n - 2);\
    \ //nums start with 0 and end with 1\n    return $nums;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjee4zrj.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjee4zrj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxjee4zrj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n      \
    \  return 4;\n    } else {\n        return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n    }\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4cun4qr.php:19\n\
    Stack trace:\n#0 /tmp/tmpx4cun4qr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpx4cun4qr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n <= 0) {\n        return \"undefined\";\n    } elseif ($n == 1)\
    \ {\n        return 2;\n    } else {\n        return (9 * pow(10, $n - 1) - 9\
    \ + starts_one_ends($n - 1));\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_7fwroz.php:19\n\
    Stack trace:\n#0 /tmp/tmpi_7fwroz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpi_7fwroz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 10;\n    }\n    $sum = pow(10, $n - 1)\
    \ + pow(10, $n - 2);\n    for ($i = 2; $i < $n; $i++) {\n        $sum += pow(10,\
    \ $n - $i - 1) * 9;\n    }\n    return $sum;\n}\n\nvar_dump(starts_one_ends(2));\n\
    function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(11)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpay6q8538.php:21\n\
    Stack trace:\n#0 /tmp/tmpay6q8538.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpay6q8538.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  $first = pow(10, $n - 1);\n  $last = pow(10, $n);\n  $counter = 0;\n  for\
    \ ($i = $first; $i < $last; $i++) {\n    if ($i % 10 == 1 || $i / 10 == 1) {\n\
    \      $counter++;\n    }\n  }\n  return $counter;\n}\n\nvar_dump(starts_one_ends(1));\
    \ // 2\nvar_dump(starts_one_ends(2)); // 3\nvar_dump(starts_one_ends(3)); // 4\n\
    var_dump(starts_one_ends(4)); // 5\n\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(1)\nint(10)\nint(90)\nint(900)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppbzc78x3.php:27\nStack trace:\n#0 /tmp/tmppbzc78x3.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppbzc78x3.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $total = 0;\n    for ($i = $n; $i > 0; $i--) {\n        if ($i == 1)\
    \ {\n            $total += 1;\n        } else {\n            $total += 9 * pow(10,\
    \ $i - 2);\n        }\n    }\n    return $total;\n}\n\necho starts_one_ends(3)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "100\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1gv3yqw.php:23\n\
    Stack trace:\n#0 /tmp/tmpk1gv3yqw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk1gv3yqw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n \
    \ }\n  if ($n == 3) {\n    return 5;\n  }\n  $count = 1;\n  for ($i = 1; $i <\
    \ $n - 1; $i++) {\n    $count *= 9;\n  }\n  return $count * 5;\n}\n\necho starts_one_ends(1)\
    \ . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\
    \\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho\
    \ starts_one_ends(23) . \"\\n\";\necho starts_one_ends(1000000) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2\n3\n5\n405\n3645\n295245\n1412147682405\n5.4709494565756E+20\nINF\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ew76pr.php:35\nStack\
    \ trace:\n#0 /tmp/tmpj_ew76pr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj_ew76pr.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  // Iterate through each digit and check if it can start or end with 1\n\
    \  $count = 0;\n  for ($i = pow(10, $n - 1); $i < pow(10, $n); $i++) {\n    $count\
    \ += starts_one($i) || ends_one($i);\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function starts_one()\
    \ in /tmp/tmp8lhxa0n9.php:8\nStack trace:\n#0 /tmp/tmp8lhxa0n9.php(14): starts_one_ends(1)\n\
    #1 /tmp/tmp8lhxa0n9.php(18): candidate(1)\n#2 /tmp/tmp8lhxa0n9.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8lhxa0n9.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if($n == 1) {\n        return 2;\n    } else {\n        $start_count\
    \ = 1;\n        $end_count = 1;\n        $n_minus_1 = $n - 1;\n        $all_minus_one\
    \ = 9;\n        for($i = 1; $i < $n_minus_1; $i++) {\n            $all_minus_one\
    \ *= 10;\n        }\n        return $start_count + $end_count + $all_minus_one;\n\
    \    }\n}\n\n$n = 1;\nwhile($n < 10) {\n    echo \"There are \" . starts_one_ends($n)\
    \ . \" $n-digit numbers that start or end with 1.\\n\";\n    $n++;\n}\nfunction\
    \ candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "There are 2 1-digit numbers that start or end with 1.\nThere are 11 2-digit\
    \ numbers that start or end with 1.\nThere are 92 3-digit numbers that start or\
    \ end with 1.\nThere are 902 4-digit numbers that start or end with 1.\nThere\
    \ are 9002 5-digit numbers that start or end with 1.\nThere are 90002 6-digit\
    \ numbers that start or end with 1.\nThere are 900002 7-digit numbers that start\
    \ or end with 1.\nThere are 9000002 8-digit numbers that start or end with 1.\n\
    There are 90000002 9-digit numbers that start or end with 1.\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpoj6ss4ts.php:29\nStack trace:\n#0 /tmp/tmpoj6ss4ts.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoj6ss4ts.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $res = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $k = 0;\n    \
    \    $p = 1;\n        for ($j = 0; $j < $i; $j++) {\n            $k += 9 * $p;\n\
    \            $p *= 10;\n        }\n        $res += $k;\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthwj2q5u.php:23\n\
    Stack trace:\n#0 /tmp/tmpthwj2q5u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpthwj2q5u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $result = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $result += count($n\
    \ - 1, $i);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9eu0ivtb.php on line 7\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp9eu0ivtb.php on\
    \ line 7\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9eu0ivtb.php on line 7\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp9eu0ivtb.php on\
    \ line 7\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9eu0ivtb.php on line 7\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp9eu0ivtb.php on\
    \ line 7\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9eu0ivtb.php on line 7\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmp9eu0ivtb.php on\
    \ line 7\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9eu0ivtb.php on line 7\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9eu0ivtb.php:17\nStack trace:\n#0 /tmp/tmp9eu0ivtb.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9eu0ivtb.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    $zeros = str_repeat('0', $n - 1);\n    return str_repeat('2', $n - 1)\
    \ . '1' . $zeros;\n}\n\n$a = starts_one_ends(3);\n$b = starts_one_ends(10);\n\
    print \"$a\\n\";\nprint \"$b\\n\";\nfunction candidate(...$args) {\n    return\
    \ starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "22100\n2222222221000000000\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpktecyd1t.php:18\nStack trace:\n#0 /tmp/tmpktecyd1t.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmpktecyd1t.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n == 1) {\n        return 2;\n    }\n    return starts_one_ends($n\
    \ - 1) + 9 * starts_one_ends($n - 2);\n}\n\nfunction candidate(...$args) {\n \
    \   return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa74x12z.php:16\n\
    Stack trace:\n#0 /tmp/tmpsa74x12z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsa74x12z.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n  if ($n == 1) {\n    return 2;\n  } else if ($n == 2) {\n    return 3;\n\
    \  } else {\n    $total = 3;\n    $last = 3;\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n      $total = $total + 2 * $last;\n      $last = 2 * $last;\n    }\n   \
    \ return $total;\n  }\n}\n\necho starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\n\
    echo \"\\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\n\
    echo \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "2\n3\n9\n21\n45\n93\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpa_9qhis3.php:37\nStack trace:\n#0 /tmp/tmpa_9qhis3.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa_9qhis3.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, return the count of the numbers\
    \ of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
    \ {\n    if ($n === 1) {\n        return 1;\n    }\n    if ($n === 2) {\n    \
    \    return 10;\n    }\n    return pow(10, $n - 1) + 9 * pow(10, $n - 2);\n}\n\
    \n$n = 4;\n$result = starts_one_ends($n);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2)\
    \ !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !==\
    \ 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(1900)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdwtgwr8.php:23\n\
    Stack trace:\n#0 /tmp/tmpsdwtgwr8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsdwtgwr8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
