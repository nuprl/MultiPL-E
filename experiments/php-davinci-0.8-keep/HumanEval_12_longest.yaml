name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return None in case the\
  \ input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n//\
  \ 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
  \ {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    // your code here\n    $result = null;\n    if (empty($strings))\
    \ {\n        return null;\n    }\n    foreach ($strings as $str) {\n        if\
    \ ($result == null) {\n            $result = $str;\n        } else {\n       \
    \     if (strlen($str) > strlen($result)) {\n                $result = $str;\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "  if (empty($strings))\
    \ {\n    return NULL;\n  }\n  $longest = $strings[0];\n  foreach ($strings as\
    \ $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest =\
    \ $string;\n    }\n  }\n  return $longest;\n}\n", "    if (empty($strings)) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "  $longest\
    \ = '';\n  foreach ($strings as $s) {\n    if (strlen($s) > strlen($longest))\
    \ {\n      $longest = $s;\n    }\n  }\n  return $longest;\n}\n", "    if (count($strings)\
    \ === 0) {\n        return \"None\";\n    }\n    $maxLength = 0;\n    $longestStr\
    \ = '';\n    foreach ($strings as $s) {\n        if (strlen($s) > $maxLength)\
    \ {\n            $maxLength = strlen($s);\n            $longestStr = $s;\n   \
    \     }\n    }\n    return $longestStr;\n}\n", "\t$longest = \"\";\n\tforeach\
    \ ($strings as $value) {\n\t\tif (strlen($value) > strlen($longest)) {\n\t\t\t\
    $longest = $value;\n\t\t}\n\t}\n\treturn $longest;\n}", "  if (empty($strings))\
    \ {\n    return;\n  }\n  $longest_str = $strings[0];\n  $longest_length = strlen($longest_str);\n\
    \  foreach ($strings as $str) {\n    if (strlen($str) > $longest_length) {\n \
    \     $longest_str = $str;\n      $longest_length = strlen($str);\n    }\n  }\n\
    \  return $longest_str;\n}", "  if (empty($strings)) return NULL;\n  $longest_length\
    \ = 0;\n  $longest_index = 0;\n  foreach ($strings as $index => $string) {\n \
    \   if (strlen($string) > $longest_length) {\n      $longest_length = strlen($string);\n\
    \      $longest_index = $index;\n    }\n  }\n  return $strings[$longest_index];\n\
    }\n", "    if (count($strings) == 0) {\n        return \"\";\n    }\n    $longest\
    \ = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i])\
    \ > strlen($longest)) {\n            $longest = $strings[$i];\n        }\n   \
    \ }\n    return $longest;\n}\n", "    // your code here\n    if (count($strings)\
    \ > 0) {\n        $max = $strings[0];\n        for ($i = 1; $i < count($strings);\
    \ $i++) {\n            if (strlen($strings[$i]) > strlen($max)) {\n          \
    \      $max = $strings[$i];\n            }\n        }\n        return $max;\n\
    \    }\n    return null;\n}\n", "  if (!$strings) {\n    return;\n  }\n  $longest\
    \ = $strings[0];\n  foreach ($strings as $string) {\n    if (strlen($string) >\
    \ strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return \"None\";\n    }\n    $longest\
    \ = array_reduce($strings, function($string1, $string2) {\n        return strlen($string1)\
    \ > strlen($string2) ? $string1 : $string2;\n    });\n    return $longest;\n}",
  "    // check to see if list is empty\n    if (count($strings) == 0) {\n       \
    \ echo \"Empty list.\\n\";\n        return;\n    }\n    // build list of strings\
    \ and lengths\n    $arr = array();\n    foreach ($strings as $i => $string) {\n\
    \        $arr[$i] = array('string' => $string, 'length' => strlen($string));\n\
    \    }\n    // sort list by string length\n    usort($arr, function($a, $b) {\n\
    \        return $a['length'] < $b['length'];\n    });\n    // return the first\
    \ one, which is the longest\n    echo $arr[0]['string'] . \"\\n\";\n}\n\n$strings\
    \ = array('a', 'bb', 'ccc');\nlongest($strings);\n$strings = array();\nlongest($strings);",
  "    $longest = NULL;\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $max = 0;\n    $result = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $max) {\n\
    \            $max = strlen($string);\n            $result = $string;\n       \
    \ }\n    }\n    return $result;\n}\n", "  $longest = \"\";\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest = null;\n  \
    \  $index = 0;\n    foreach ($strings as $string) {\n        if ($index === 0)\
    \ {\n            $longest = $string;\n        } elseif (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n        $index += 1;\n    }\n\
    \    return $longest;\n}\n", "    if (empty($strings)) {\n        return false;\n\
    \    }\n    $longest_string = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest_string)) {\n            $longest_string\
    \ = $string;\n        }\n    }\n    return $longest_string;\n}\n\necho \"The longest\
    \ string is: \".longest(['a', 'bb', 'ccc']);", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $str) {\n        if (strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}", "  $longest = \"\";\n \
    \ foreach ($strings as $string) {\n    if ($longest === \"\") {\n      $longest\
    \ = $string;\n    } elseif (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n", "    // Check if array is\
    \ empty\n    if(count($strings) == 0) {\n        return null;\n    }\n\n    //\
    \ Set the first array index as the longest string\n    $longestString = $strings[0];\n\
    \n    // Loop through the array to check if any other strings are longer\n   \
    \ foreach($strings as $string) {\n        if(strlen($string) > strlen($longestString))\
    \ {\n            $longestString = $string;\n        }\n    }\n\n    return $longestString;\n\
    }\n", "  if (empty($strings)) {\n    return NULL;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    if\
    \ (empty($strings)) return null;\n    return array_reduce($strings, function($longest,\
    \ $string) {\n        return strlen($string) > strlen($longest) ? $string : $longest;\n\
    \    });\n}\n", "  $longest = '';\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\necho longest(['a', 'bb', 'ccc']);", "    if (!is_array($strings)) {\n   \
    \     trigger_error('Input must be array', E_USER_ERROR);\n    }\n\n    $longest\
    \ = null;\n    $longestLength = 0;\n    foreach ($strings as $str) {\n       \
    \ if (strlen($str) > $longestLength) {\n            $longest = $str;\n       \
    \     $longestLength = strlen($str);\n        }\n    }\n\n    return $longest;\n\
    }\n", "\t$longest_length = 0;\n\t$longest_string = NULL;\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > $longest_length) {\n\t\t\t$longest_length\
    \ = strlen($string);\n\t\t\t$longest_string = $string;\n\t\t}\n\t}\n\treturn $longest_string;\n\
    }\n", "\tif (count($strings) == 0) return;\n\t$max = 0;\n\t$max_str = '';\n\t\
    foreach ($strings as $string) {\n\t\tif (strlen($string) > $max) {\n\t\t\t$max\
    \ = strlen($string);\n\t\t\t$max_str = $string;\n\t\t}\n\t}\n\treturn $max_str;\n\
    }\n", "    // Your solution here.\n}\n", "  $longest_string = '';\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest_string)) {\n      $longest_string\
    \ = $string;\n    }\n  }\n  return $longest_string;\n}", "    if (!$strings) {\n\
    \        return;\n    }\n    usort($strings, function($str1, $str2) {\n      \
    \  if (strlen($str1) < strlen($str2)) {\n            return 1;\n        } else\
    \ if (strlen($str1) > strlen($str2)) {\n            return -1;\n        } else\
    \ {\n            return 0;\n        }\n    });\n    return $strings[0];\n}\n",
  "    $longest = null;\n    $longest_length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $longest_length) {\n            $longest =\
    \ $string;\n            $longest_length = strlen($string);\n        }\n    }\n\
    \    return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);", "  // Your code\
    \ here.\n  return $strings;\n}", "    $longest = '';\n    foreach ($strings as\
    \ $str) {\n        if (strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}\n", "    $longest = NULL;\n\
    \    foreach ($strings as $string) {\n        if ($longest === NULL || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $lengths = array_map('strlen', $strings);\n \
    \   $longest = max($lengths);\n    $index = array_search($longest, $lengths);\n\
    \    return $strings[$index];\n}", "    if (!empty($strings)) {\n        $longest\
    \ = $strings[0];\n        foreach ($strings as $str) {\n            if (strlen($str)\
    \ > strlen($longest)) {\n                $longest = $str;\n            }\n   \
    \     }\n        return $longest;\n    }\n    return;\n}", "    $longest = array_pop($strings);\n\
    \    while($str = array_pop($strings)) {\n        if (strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n",
  "    if (!$strings) return;\n    $str_len = array_map('strlen', $strings);\n   \
    \ $max_len = max($str_len);\n    $pos = array_search($max_len, $str_len);\n  \
    \  return $strings[$pos];\n}", "    if (empty($strings)) {\n        return 'None';\n\
    \    }\n\n    $longestString = $strings[0];\n    $longestLength = strlen($longestString);\n\
    \n    foreach ($strings as $string) {\n        if (strlen($string) > $longestLength)\
    \ {\n            $longestString = $string;\n            $longestLength = strlen($string);\n\
    \        }\n    }\n\n    return $longestString;\n}\n", "  if (count($strings)\
    \ == 0) {\n    return NULL;\n  }\n  $longest = $strings[0];\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\nvar_dump(longest([]));\n\
    var_dump(longest(['a', 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));",
  "  if (empty($strings)) {\n    return \"None\";\n  }\n\n  $max = $strings[0];\n\
    \  $maxLength = strlen($max);\n\n  for ($i = 1; $i < count($strings); $i++) {\n\
    \    $str = $strings[$i];\n    $strLength = strlen($str);\n\n    if ($strLength\
    \ > $maxLength) {\n      $max = $str;\n      $maxLength = $strLength;\n    }\n\
    \  }\n\n  return $max;\n}\n", "\tif (count($strings) === 0) {\n\t\treturn null;\n\
    \t}\n\n\t$longest = $strings[0];\n\tfor ($i = 1; $i < count($strings); $i++) {\n\
    \t\tif (strlen($strings[$i]) > strlen($longest)) {\n\t\t\t$longest = $strings[$i];\n\
    \t\t}\n\t}\n\n\treturn $longest;\n}\n\nvar_dump(longest([]));\nvar_dump(longest(['a',\
    \ 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));", "\n}\n", "\t//check for\
    \ empty array\n\tif (count($strings) == 0) {\n\t\treturn NULL;\n\t}\n\t//sort\
    \ strings by length (longest first)\n\tusort($strings, function($a, $b) {\n\t\t\
    return strlen($b) - strlen($a);\n\t});\n\t//return first string\n\treturn $strings[0];\n\
    }\n", "    $result = null;\n    $len = 0;\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > $len) {\n            $result = $string;\n     \
    \       $len = strlen($string);\n        }\n    }\n    return $result;\n}\n\n\
    $listOfStrings = ['a', 'bb', 'ccc'];\necho longest($listOfStrings);", "  $max_length\
    \ = 0;\n  $longest_string = NULL;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > $max_length) {\n      $max_length = strlen($string);\n      $longest_string\
    \ = $string;\n    }\n  }\n  return $longest_string;\n}", "    if(count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longestStr = '';\n    foreach($strings\
    \ as $s) {\n        if(strlen($s) > strlen($longestStr)) {\n            $longestStr\
    \ = $s;\n        }\n    }\n    return $longestStr;\n}\n", "  if (count($strings)\
    \ === 0) {\n    return NULL;\n  }\n\n  $longest = \"\";\n  foreach ($strings as\
    \ $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest =\
    \ $string;\n    }\n  }\n  return $longest;\n}\n\necho longest(['a', 'bb', 'ccc'])\
    \ . \"\\n\";\necho longest(['a', 'bb', 'ccc', 'dddd', 'eeeee']) . \"\\n\";\necho\
    \ longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee']) . \"\\n\";\necho longest(['a',\
    \ 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff']) . \"\\n\";\necho longest(['a',\
    \ 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff', 'gggggggggggg']) . \"\\n\";\n\
    echo longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff', 'gggggggggggg',\
    \ 'hhhhhhhhhhhhhh']) . \"\\n\";\necho longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee',\
    \ 'ffffffffff', 'gggggggggggg', 'hhhhhhhhhhhhhh', 'iiiiiiiiiiiiiiii']) . \"\\\
    n\";\n", "\t$lstring = \"\";\n\t$llen = 0;\n\tforeach ($strings as $val) {\n\t\
    \tif (strlen($val) > $llen) {\n\t\t\t$lstring = $val;\n\t\t\t$llen = strlen($val);\n\
    \t\t}\n\t}\n\treturn $lstring;\n}\n\n$test = [\"\", \"a\", \"b\", \"c\", \"d\"\
    , \"ef\", \"g\", \"hi\", \"jkl\"];\necho longest($test);\n", "  $length = 0;\n\
    \  $longest = null;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > $length) {\n      $length = strlen($string);\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n", "  $longest = NULL;\n  foreach ($strings\
    \ as $string) {\n    if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $length\
    \ = 0;\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > $length) {\n            $length = strlen($string);\n    \
    \        $longest = $string;\n        }\n    }\n    return $longest;\n}\n\necho\
    \ longest([]);\necho '<br>';\necho longest(['a', 'b', 'c']);\necho '<br>';\necho\
    \ longest(['a', 'bb', 'ccc']);\necho '<br>';\n\necho \"===========================\"\
    ;\necho '<br>';\n", "    if (sizeof($strings) == 0) {\n        return null;\n\
    \    }\n\n    $longest = $strings[0];\n    for ($i = 1; $i < sizeof($strings);\
    \ $i++) {\n        if (strlen($strings[$i]) > strlen($longest)) {\n          \
    \  $longest = $strings[$i];\n        }\n    }\n\n    return $longest;\n}", " \
    \ if (empty($strings)) {\n    return null;\n  }\n\n  $result = null;\n  $max_length\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $max_length)\
    \ {\n      $max_length = strlen($string);\n      $result = $string;\n    }\n \
    \ }\n\n  return $result;\n}\n\n$input = ['a', 'bb', 'ccc'];\nvar_dump(longest($input));\n\
    \n$input = ['a', 'b', 'c'];\nvar_dump(longest($input));\n\n$input = [];\nvar_dump(longest($input));",
  "    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);", "  $l = 0;\n  $lo\
    \ = 0;\n  for ($i = 0; $i < count($strings); $i++) {\n    if (strlen($strings[$i])\
    \ > $l) {\n      $l = strlen($strings[$i]);\n      $lo = $i;\n    }\n  }\n  return\
    \ $strings[$lo];\n}", "  $longest = null;\n  $longestLength = 0;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > $longestLength) {\n      $longest =\
    \ $string;\n      $longestLength = strlen($string);\n    }\n  }\n  return $longest;\n\
    }\n", "  // TODO\n}\n", "\t$longest = \"\";\n\tforeach ($strings as $string) {\n\
    \t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t\
    }\n\t}\n\treturn $longest;\n}\n$strings = array(\"\", \"a\", \"aa\", \"aaa\");\n\
    echo longest($strings);", "    if(empty($strings)){\n        return NULL;\n  \
    \  }\n    $length = count($strings);\n    $longest = $strings[0];\n    for($i\
    \ = 1; $i < $length; $i++){\n        if(strlen($longest) < strlen($strings[$i])){\n\
    \            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n$strings = [];\necho longest($strings);\necho \"<br>\";\n$strings = ['a', 'b',\
    \ 'c'];\necho longest($strings);\necho \"<br>\";\n$strings = ['a', 'bb', 'ccc'];\n\
    echo longest($strings);\necho \"<br>\";", "  $longest = null;\n  $length = 0;\n\
    \  foreach ($strings as $string) {\n    if ($length < strlen($string)) {\n   \
    \   $longest = $string;\n      $length = strlen($string);\n    }\n  }\n  return\
    \ $longest;\n}\n\nvar_dump(longest([]));\nvar_dump(longest(['a', 'b', 'c']));\n\
    var_dump(longest(['a', 'bb', 'ccc']));", "\tif (empty($strings)) {\n\t\treturn\
    \ NULL;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\
    \tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\
    \t}\n\treturn $longest;\n}\n\necho longest([]);\necho \"\\n\";\necho longest(['a',\
    \ 'b', 'c']);\necho \"\\n\";\necho longest(['a', 'bb', 'ccc']);\necho \"\\n\"\
    ;\n", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$lengths = array_map('strlen',\
    \ $strings);\n\t$max = max($lengths);\n\t$maxIndex = array_search($max, $lengths);\n\
    \treturn $strings[$maxIndex];\n}\necho longest(['a', 'bb', 'ccc']);", "    if\
    \ (count($strings) === 0) {\n        return NULL;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }", "  // Write your code here\n}", "    // If nothing to work with, return null\
    \ (per the assignment's description)\n    if (count($strings) < 1) return null;\n\
    \n    // Prepare the output variable with the first string\n    $longest = $strings[0];\n\
    \n    // Loop through the strings to compare against the current \"longest\"\n\
    \    foreach ($strings as $string) {\n        // If the current string is longer\
    \ than the currently longest, update\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    // Return the longest\
    \ string\n    return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);", "  if\
    \ (count($strings) == 0) {\n    return null;\n  }\n  $result = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($result))\
    \ {\n      $result = $string;\n    }\n  }\n  return $result;\n}\necho longest([\"\
    a\", \"bb\", \"ccc\"]);", "    if (count($strings) === 0) {\n        return 'None';\n\
    \    }\n    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nvar_dump(longest([]));\nvar_dump(longest(['a', 'b',\
    \ 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));", "\tif (empty($strings)) {\n\
    \t\treturn NULL;\n\t}\n\t$longest = NULL;\n\tforeach ($strings as $string) {\n\
    \t\tif (is_null($longest) || strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\necho longest(['a', 'bb', 'ccc']);",
  "  $longest = NULL;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n", "  if (count($strings) < 1) {\n    return null;\n  }\n\n  $max = strlen($strings[0]);\n\
    \  $i = 0;\n  $res = $strings[0];\n  while ($i < count($strings)) {\n    if (strlen($strings[$i])\
    \ > $max) {\n      $max = strlen($strings[$i]);\n      $res = $strings[$i];\n\
    \    }\n    $i++;\n  }\n  return $res;\n}", "    if (count($strings) === 0) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "\tif (empty($strings))\
    \ {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\t$longest_length = strlen($longest);\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > $longest_length)\
    \ {\n\t\t\t$longest = $string;\n\t\t\t$longest_length = strlen($longest);\n\t\t\
    }\n\t}\n\treturn $longest;\n}\n", "  if (empty($strings)) {\n    return null;\n\
    \  }\n\n  $longest = null;\n  foreach ($strings as $string) {\n    if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n\n  return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);", " \
    \   if (count($strings) == 0) {\n        return null;\n    }\n\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n\necho longest([]);\necho '<br>';\necho longest(['a',\
    \ 'b', 'c']);\necho '<br>';\necho longest(['a', 'bb', 'ccc']);\necho '<br>';\n\
    echo longest(['a', 'bb', 'ccc', 'ddddd']);\necho '<br>';\necho longest(['a', 'bb',\
    \ 'ccc', 'ddddd', 'eeeeeee']);\necho '<br>';\n", "  // YOUR CODE HERE\n}\n", " \
    \   $longestString = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longestString)) {\n            $longestString = $string;\n       \
    \ }\n    }\n    return $longestString;\n}\n\n$emptyArray = [];\n$filledArray =\
    \ [\"a\", \"bb\", \"ccc\"];\n\nvar_dump(longest($emptyArray));\nvar_dump(longest($filledArray));",
  "  $longestString = NULL;\n  $longestStringLength = 0;\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > $longestStringLength) {\n      $longestString =\
    \ $string;\n      $longestStringLength = strlen($string);\n    }\n  }\n  return\
    \ $longestString;\n}", "    if (empty($strings)) {\n        return null;\n   \
    \ }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n      \
    \  if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longestStr = NULL;\n    $longestLen\
    \ = 0;\n    foreach ($strings as $str) {\n        if (strlen($str) > $longestLen)\
    \ {\n            $longestStr = $str;\n            $longestLen = strlen($str);\n\
    \        }\n    }\n    return $longestStr;\n}\n", "\t$result = \"\";\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($result)) {\n\t\t\t\
    $result = $string;\n\t\t}\n\t}\n\treturn $result;\n}\n", "\t$longest = null;\n\
    \tforeach ($strings as $string) {\n\t\tif (is_null($longest) || strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest_length\
    \ = 0;\n    $longest_string = '';\n    foreach ($strings as $str) {\n        if\
    \ (strlen($str) > $longest_length) {\n            $longest_length = strlen($str);\n\
    \            $longest_string = $str;\n        }\n    }\n    return $longest_string;\n\
    }\n", "    if (count($strings) == 0) {\n        return NULL;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $str) {\n        if (strlen($str) >\
    \ strlen($longest)) {\n            $longest = $str;\n        }\n    }\n    return\
    \ $longest;\n}", "    if (empty($strings)) {\n        return null;\n    }\n\n\
    \    $longest = $strings[0];\n    $max_length = strlen($longest);\n\n    for ($i\
    \ = 1; $i < count($strings); $i++) {\n        $length = strlen($strings[$i]);\n\
    \        if ($length > $max_length) {\n            $longest = $strings[$i];\n\
    \            $max_length = $length;\n        }\n    }\n\n    return $longest;\n\
    }\n\necho longest([]);\necho longest(['a', 'b', 'c']);\necho longest(['a', 'bb',\
    \ 'ccc']);", "\tif(count($strings) <= 0) {\n\t\treturn \"\";\n\t}\n\t$maxLength\
    \ = 0;\n\t$indexOfMaxLength = 0;\n\tforeach($strings as $index => $string) {\n\
    \t\tif(strlen($string) > $maxLength) {\n\t\t\t$maxLength = strlen($string);\n\t\
    \t\t$indexOfMaxLength = $index;\n\t\t}\n\t}\n\treturn $strings[$indexOfMaxLength];\n\
    }\n\nvar_dump(longest(['a', 'bb', 'ccc']));\nvar_dump(longest(['a', 'b', 'c']));\n\
    var_dump(longest([]));", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t\
    }\n\tif (count($strings) == 1) {\n\t\treturn $strings[0];\n\t}\n\t$longest = $strings[0];\n\
    \tfor ($i = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest))\
    \ {\n\t\t\t$longest = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n", "\t\
    if (empty($strings)) {\n\t\treturn null;\n\t}\n\n\t$longestString = $strings[0];\n\
    \t$longestLength = strlen($longestString);\n\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > $longestLength) {\n\t\t\t$longestString = $string;\n\
    \t\t\t$longestLength = strlen($longestString);\n\t\t}\n\t}\n\n\treturn $longestString;\n\
    }\n", "    $longest_string = null;\n    $len = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $len) {\n            $longest_string = $string;\n\
    \            $len = strlen($string);\n        }\n    }\n    return $longest_string;\n\
    }\n\necho \"\\n\" . longest(['a', 'bb', 'ccc']) . \"\\n\";\necho \"\\n\" . longest(['aa',\
    \ 'bb', 'ccc']) . \"\\n\";\necho \"\\n\" . longest(['aaaaa', 'bb', 'ccc']) . \"\
    \\n\";\necho \"\\n\" . longest(['aaaaa', 'bbbbbbbb', 'ccc']) . \"\\n\";\n", " \
    \   if (count($strings) === 0) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $str) {\n        if (strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n",
  "    $lengths = array_map('strlen', $strings);\n    return empty($lengths) ? null\
    \ : $strings[array_search(max($lengths), $lengths)];\n}\n$tests = [\n    ['input'\
    \ => [], 'expected' => null],\n    ['input' => ['a', 'b', 'c'], 'expected' =>\
    \ 'a'],\n    ['input' => ['a', 'bb', 'ccc'], 'expected' => 'ccc'],\n];\nforeach\
    \ ($tests as $test) {\n    $output = longest($test['input']);\n    if ($output\
    \ === $test['expected']) {\n        echo \"<span style='color: green;'>Correct</span><br>\"\
    ;\n    } else {\n        echo \"<span style='color: red;'>Incorrect</span><br>\"\
    ;\n    }\n}", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$lengths = array_map('strlen',\
    \ $strings);\n\t$longest = $strings[array_search(max($lengths), $lengths)];\n\t\
    return $longest;\n}\n", "    $longest = '';\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest_string\
    \ = \"\";\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ strlen($longest_string)) {\n            $longest_string = $string;\n       \
    \ }\n    }\n    return $longest_string;\n}\n", "    $longest = '';\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\
    echo longest(['a', 'bb', 'ccc']);\n\necho \"<br />\";\n", "  if (count($strings)\
    \ == 0) {\n    return NULL;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i\
    \ < count($strings); $i++) {\n    if (strlen($strings[$i]) > strlen($longest))\
    \ {\n      $longest = $strings[$i];\n    }\n  }\n  return $longest;\n}\necho longest([]);\n\
    echo longest(['a', 'b', 'c']);\necho longest(['a', 'bb', 'ccc']);\n", "  // ...\n\
    }\n", "\tif(count($strings) < 1) {\n\t\techo \"none\";\n\t}\n\telse {\n\t\t$len\
    \ = strlen($strings[0]);\n\t\t$longest = $strings[0];\n\t\tfor($i = 1; $i < count($strings);\
    \ $i++) {\n\t\t\tif(strlen($strings[$i]) > $len) {\n\t\t\t\t$len = strlen($strings[$i]);\n\
    \t\t\t\t$longest = $strings[$i];\n\t\t\t}\n\t\t}\n\t\techo $longest;\n\t}\n}\n",
  "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$max = $strings[0];\n\t\
    foreach ($strings as $str) {\n\t\tif (strlen($str) > strlen($max)) {\n\t\t\t$max\
    \ = $str;\n\t\t}\n\t}\n\treturn $max;\n}\n", "\t$max = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($max == null || strlen($string) > strlen($max)) {\n\t\
    \t\t$max = $string;\n\t\t}\n\t}\n\treturn $max;\n}\n", "    if (empty($strings))\
    \ {\n        return;\n    }\n    $longest_string = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest_string)) {\n  \
    \          $longest_string = $string;\n        }\n    }\n    return $longest_string;\n\
    }\n", "    $len = count($strings);\n    if ($len == 0) {\n        return NULL;\n\
    \    }\n    else {\n        $longest = $strings[0];\n        for ($i = 1; $i <\
    \ $len; $i++) {\n            if (strlen($strings[$i]) > strlen($longest)) {\n\
    \                $longest = $strings[$i];\n            }\n        }\n        return\
    \ $longest;\n    }\n}\n", "    // YOUR CODE HERE\n    if(!$strings){\n       \
    \ return null;\n    }\n\n    $longest_string_len = strlen($strings[0]);\n    $longest_string\
    \ = $strings[0];\n\n    foreach($strings as $str){\n        if(strlen($str) >\
    \ $longest_string_len){\n            $longest_string_len = strlen($str);\n   \
    \         $longest_string = $str;\n        }\n    }\n\n    return $longest_string;\n\
    }\n", "\tif(count($strings) === 0) {\n\t\treturn NULL;\n\t}\n\t$l = $strings[0];\n\
    \tforeach($strings as $s) {\n\t\tif(strlen($s) > strlen($l)) {\n\t\t\t$l = $s;\n\
    \t\t}\n\t}\n\treturn $l;\n}", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $result = $strings[0];\n    $length = strlen($result);\n    foreach\
    \ ($strings as $str) {\n        if (strlen($str) > $length) {\n            $result\
    \ = $str;\n            $length = strlen($str);\n        }\n    }\n    return $result;\n\
    }\n", "    $longest = null;\n    $longestLength = 0;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = strlen($string);\n        }\n    }\n\
    \    return $longest;\n}\n", "    if (count($strings) === 0) {\n        return\
    \ NULL;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "\t$length = 0;\n\t\
    $longest = NULL;\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) >\
    \ $length) {\n\t\t\t$length = strlen($string);\n\t\t\t$longest = $string;\n\t\t\
    }\n\t}\n\treturn $longest;\n}\n\necho longest(array(\"b\", \"bb\", \"bbb\"));\n",
  "  if(empty($strings)) return null;\n  $longest = '';\n  foreach($strings as $string)\
    \ {\n    if(strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n", "    $max = NULL;\n    foreach ($strings\
    \ as $str) {\n        if ($max === NULL || strlen($str) > strlen($max)) {\n  \
    \          $max = $str;\n        }\n    }\n    return $max;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_pop($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    $len = 0;\n    $longest = '';\n    foreach ($strings as $str) {\n        if\
    \ (strlen($str) > $len) {\n            $len = strlen($str);\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}\n", "    if (count($strings)\
    \ === 0) {\n        return null;\n    }\n\n    $longest_string = $strings[0];\n\
    \    $longest_string_length = strlen($longest_string);\n\n    for ($i = 1; $i\
    \ < count($strings); $i++) {\n        $current_string = $strings[$i];\n      \
    \  $current_string_length = strlen($current_string);\n\n        if ($current_string_length\
    \ > $longest_string_length) {\n            $longest_string = $current_string;\n\
    \            $longest_string_length = $current_string_length;\n        }\n   \
    \ }\n\n    return $longest_string;\n}\n", "    if (empty($strings)) {\n      \
    \  return NULL;\n    }\n    $longest = '';\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if(!$strings) return\
    \ false;\n    return array_reduce($strings, function($a, $b) {\n        return\
    \ strlen($a) > strlen($b) ? $a : $b;\n    });\n}\necho longest(['b', 'a', 'bb',\
    \ 'ccc']);", "    $longestString = '';\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > strlen($longestString)) {\n            $longestString\
    \ = $string;\n        }\n    }\n    return $longestString;\n}\necho longest(['a',\
    \ 'bb', 'ccc']) . PHP_EOL;", "    $longest = NULL;\n    $longest_len = 0;\n  \
    \  foreach ($strings as $str) {\n        $len = strlen($str);\n        if ($len\
    \ > $longest_len) {\n            $longest = $str;\n            $longest_len =\
    \ $len;\n        }\n    }\n    return $longest;\n}\n", "    $longest = '';\n \
    \   foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $max_length = -1;\n    $longest_string = NULL;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $max_length) {\n            $max_length\
    \ = strlen($string);\n            $longest_string = $string;\n        }\n    }\n\
    \    return $longest_string;\n}\n\n$strings = array('a', 'bb', 'ccc');\necho longest($strings);\n",
  "\tif(empty($strings)) {\n\t\treturn NULL;\n\t}\n\t$longest_string = $strings[0];\n\
    \tforeach($strings as $string) {\n\t\tif(strlen($string) > strlen($longest_string))\
    \ {\n\t\t\t$longest_string = $string;\n\t\t}\n\t}\n\treturn $longest_string;\n\
    }\n", "    $longestString = NULL;\n    $longestStringLength = 0;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $longestStringLength)\
    \ {\n            $longestString = $string;\n            $longestStringLength =\
    \ strlen($string);\n        }\n    }\n    return $longestString;\n}", "\t$longest\
    \ = null;\n\t$longest_length = 0;\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > $longest_length) {\n\t\t\t$longest = $string;\n\t\t\t$longest_length = strlen($string);\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n", "    if (count($strings) == 0) return NULL;\n\
    \    $max_length = -1;\n    $longest_string = NULL;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $max_length) {\n            $max_length\
    \ = strlen($string);\n            $longest_string = $string;\n        }\n    }\n\
    \    return $longest_string;\n}\n\necho longest(array());\necho longest(array('a',\
    \ 'b', 'c'));\necho longest(array('a', 'bb', 'ccc'));\n", "  if (empty($strings))\
    \ return null;\n  $longest = $strings[0];\n  foreach ($strings as $str) {\n  \
    \  if (strlen($str) > strlen($longest)) {\n      $longest = $str;\n    }\n  }\n\
    \  return $longest;\n}\n", "\tif (count($strings) === 0) {\n\t\treturn null;\n\
    \t}\n\t$longest = $strings[0];\n\tfor ($i = 1; $i < count($strings); $i++) {\n\
    \t\tif (strlen($strings[$i]) > strlen($longest)) {\n\t\t\t$longest = $strings[$i];\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n", "  if (empty($strings)) {\n    return null;\n\
    \  }\n  $longest = $strings[0];\n  foreach ($strings as $str) {\n    if (strlen($str)\
    \ > strlen($longest)) {\n      $longest = $str;\n    }\n  }\n  return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ '';\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longestString\
    \ = $strings[0];\n\tfor ($i = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i])\
    \ > strlen($longestString)) {\n\t\t\t$longestString = $strings[$i];\n\t\t}\n\t\
    }\n\treturn $longestString;\n}\n", "  if (count($strings) == 0) {\n    return\
    \ \"None\";\n  }\n\n  $res = $strings[0];\n  for ($i = 1; $i < count($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($res)) {\n      $res = $strings[$i];\n\
    \    }\n  }\n  return $res;\n}\n", "    $longestString = '';\n    foreach ($strings\
    \ as $string) {\n        if ($string > $longestString) {\n            $longestString\
    \ = $string;\n        }\n    }\n    return $longestString;\n}", "  $longest =\
    \ '';\n  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest\
    \ = 0;\n    $longest_string = NULL;\n    foreach ($strings as $str) {\n      \
    \  if (strlen($str) > $longest) {\n            $longest = strlen($str);\n    \
    \        $longest_string = $str;\n        }\n    }\n    return $longest_string;\n\
    }", "    $longest = NULL;\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\necho longest([]);\necho longest(['a',\
    \ 'b', 'c']);\necho longest(['a', 'bb', 'ccc']);", "  $longest = null;\n  foreach\
    \ ($strings as $i => $string) {\n    if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\nprint longest(array());\nprint longest(array('a', 'b', 'c'));\nprint longest(array('a',\
    \ 'bb', 'ccc'));", "    if(empty($strings)) {\n        return \"No longest string,\
    \ empty array\";\n    }\n    $longest = $strings[0];\n    foreach($strings as\
    \ $str) {\n        if(strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}\n\n$arr = [\"a\", \"bb\"\
    , \"ccc\"];\necho longest($arr);", "  if (!is_array($strings)) {\n    return \"\
    Invalid input.  Must be an array\";\n  }\n  $longestString = $strings[0];\n  for\
    \ ($i = 1; $i < count($strings); $i++) {\n    if (strlen($strings[$i]) > strlen($longestString))\
    \ {\n      $longestString = $strings[$i];\n    }\n  }\n  return $longestString;\n\
    }\n$test = array('a', 'bb', 'ccc');\necho longest($test);", "\t$longest = NULL;\n\
    \t$longest_len = 0;\n\tforeach ($strings as $string) {\n\t\t$len = strlen($string);\n\
    \t\tif ($len > $longest_len) {\n\t\t\t$longest = $string;\n\t\t\t$longest_len\
    \ = $len;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "    if (empty($strings)) {\n\
    \        return null;\n    }\n    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (empty($longest) || strlen($string) > strlen($longest)) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    echo longest(['a', 'bb', 'ccc']);", "  $longest = \"\";\n  foreach ($strings as\
    \ $string) {\n    if ($longest == \"\" || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "\tif(empty($strings)){\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach($strings as $value){\n\
    \t\tif(strlen($value) > strlen($longest)){\n\t\t\t$longest = $value;\n\t\t}\n\t\
    }\n\treturn $longest;\n}\n\n$strings = ['a', 'bb', 'ccc'];\necho longest($strings);\n",
  "  $res = \"\";\n  foreach ($strings as $string) {\n    if (strlen($string) > strlen($res))\
    \ {\n      $res = $string;\n    }\n  }\n  return $res;\n}\n\nprint(longest([\"\
    a\", \"bb\", \"ccc\"]));\n", "\t$max = 0;\n\t$max_index = 0;\n\tforeach ($strings\
    \ as $index => $string) {\n\t\tif (strlen($string) > $max) {\n\t\t\t$max = strlen($string);\n\
    \t\t\t$max_index = $index;\n\t\t}\n\t}\n\treturn $strings[$max_index];\n}\n",
  "    // your code here\n}", "    $longest = null;\n    $longest_length = -1;\n \
    \   foreach ($strings as $string) {\n        $length = strlen($string);\n    \
    \    if ($length > $longest_length) {\n            $longest = $string;\n     \
    \       $longest_length = $length;\n        }\n    }\n    return $longest;\n}\n\
    \necho longest(['aaaaaaaaaaaa', 'ab', 'a', 'bb']);", "  if(!count($strings)){\n\
    \    return null;\n  }\n  $longest = $strings[0];\n  foreach($strings as $string){\n\
    \    if(strlen($string) > strlen($longest)){\n      $longest = $string;\n    }\n\
    \  }\n  return $longest;\n}", "    if (!$strings) {\n        return null;\n  \
    \  }\n\n    $longest = $strings[0];\n    $length = strlen($longest);\n\n    for\
    \ ($i = 1; $i < count($strings); $i++) {\n        $curLength = strlen($strings[$i]);\n\
    \        if ($curLength > $length) {\n            $longest = $strings[$i];\n \
    \           $length = $curLength;\n        }\n    }\n\n    return $longest;\n\
    }\n", "    $length = 0;\n    $index = 0;\n    for ($i = 0; $i < count($strings);\
    \ $i++) {\n        if (strlen($strings[$i]) > $length) {\n            $length\
    \ = strlen($strings[$i]);\n            $index = $i;\n        }\n    }\n    return\
    \ $length != 0 ? $strings[$index] : null;\n}\n", "\tif (empty($strings)) {\n\t\
    \treturn NULL;\n\t}\n\t$lens = array_map('strlen', $strings);\n\t$maxlen = max($lens);\n\
    \t$pos = array_search($maxlen, $lens);\n\treturn $strings[$pos];\n}\n\n$test =\
    \ longest(['a', 'bb', 'ccc']);\nvar_dump($test);", "    $longest = \"\";\n   \
    \ foreach ($strings as $str) {\n        if (strlen($str) > strlen($longest)) {\n\
    \            $longest = $str;\n        }\n    }\n    return $longest;\n}\n", "\t\
    return array_reduce($strings, function($carry, $item) {\n\t\treturn (strlen($carry)\
    \ > strlen($item)) ? $carry : $item;\n\t});\n}\n", "\tif(count($strings) == 0)\
    \ {\n\t\treturn NULL;\n\t}\n\n\t$longest = '';\n\tforeach($strings as $string)\
    \ {\n\t\tif(strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\n\treturn $longest;\n}\n", "    $result = null;\n    foreach ($strings\
    \ as $string) {\n        if ($result === null || strlen($string) > strlen($result))\
    \ {\n            $result = $string;\n        }\n    }\n    return $result;\n}\n",
  "\tif (empty($strings)) {\n\t\treturn '';\n\t}\n\t$longest = '';\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n$strings = [];\n$strings2 =\
    \ ['a', 'b', 'c'];\n$strings3 = ['a', 'bb', 'ccc'];\nvar_dump(longest($strings));\n\
    var_dump(longest($strings2));\nvar_dump(longest($strings3));", "    if (empty($strings))\
    \ {\n        return \"None\";\n    }\n    $max_str = \"\";\n    $max_len = 0;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $max_len)\
    \ {\n            $max_str = $string;\n            $max_len = strlen($string);\n\
    \        }\n    }\n    return $max_str;\n}\n", "    if(empty($strings)) {\n  \
    \      return null;\n    }\n    $longest = '';\n    foreach($strings as $string)\
    \ {\n        if(strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (count($strings)\
    \ === 0) {\n        return null;\n    }\n    $current = $strings[0];\n    for\
    \ ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($current))\
    \ {\n            $current = $strings[$i];\n        }\n    }\n    return $current;\n\
    }\n\nvar_dump(longest([]));\nvar_dump(longest(['a', 'b', 'c']));\nvar_dump(longest(['a',\
    \ 'bb', 'ccc']));", "    if (empty($strings)) {\n        return null;\n    }\n\
    \n    $currentLongest = $strings[0];\n    $longestLength = strlen($currentLongest);\n\
    \n    for ($i = 1; $i < count($strings); $i++) {\n        $currentLength = strlen($strings[$i]);\n\
    \        if ($currentLength > $longestLength) {\n            $currentLongest =\
    \ $strings[$i];\n            $longestLength = $currentLength;\n        }\n   \
    \ }\n\n    return $currentLongest;\n}\n", "    $longest = NULL;\n    foreach ($strings\
    \ as $string) {\n        if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "\t$max_len = 0;\n\t$max_str = null;\n\tforeach ($strings as $str) {\n\t\
    \tif (strlen($str) > $max_len) {\n\t\t\t$max_len = strlen($str);\n\t\t\t$max_str\
    \ = $str;\n\t\t}\n\t}\n\treturn $max_str;\n}\n\necho longest([]);\necho \"\\n\"\
    ;\necho longest(['a', 'b', 'c']);\necho \"\\n\";\necho longest(['a', 'bb', 'ccc']);\n\
    echo \"\\n\";\n", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\n\t$longest\
    \ = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) >\
    \ strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\n\treturn $longest;\n\
    }\n\n$strings = [];\nvar_dump(longest($strings));\n$strings = ['a', 'b', 'c'];\n\
    var_dump(longest($strings));\n$strings = ['a', 'bb', 'ccc'];\nvar_dump(longest($strings));",
  "  if (empty($strings)) {\n    return 'None';\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}", "\t$lengths\
    \ = array_map('strlen', $strings);\n\tif (count($lengths) == 0) {\n\t\treturn\
    \ \"\";\n\t} else {\n\t\treturn $strings[array_search(max($lengths), $lengths)];\n\
    \t}\n}\n", "  if (count($strings) == 0) {\n    return NULL;\n  }\n  $indexOfLongest\
    \ = 0;\n  $len = strlen($strings[0]);\n  foreach ($strings as $i => $str) {\n\
    \    if (strlen($str) > $len) {\n      $indexOfLongest = $i;\n      $len = strlen($str);\n\
    \    }\n  }\n  return $strings[$indexOfLongest];\n}\necho longest([]); // null\n\
    echo longest(['a', 'b', 'c']); // 'a'\necho longest(['a', 'bb', 'ccc']); // 'ccc'\n\
    \necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\n", "    if(sizeof($strings)\
    \ == 0) {\n        return \"\";\n    }\n    $len = -1;\n    $longest = NULL;\n\
    \    foreach($strings as $str) {\n        if(strlen($str) > $len) {\n        \
    \    $len = strlen($str);\n            $longest = $str;\n        }\n    }\n  \
    \  return $longest;\n}", "  $longest = \"\";\n  foreach ($strings as $s) {\n \
    \   if (strlen($s) > strlen($longest)) {\n      $longest = $s;\n    }\n  }\n \
    \ return $longest;\n}\n\n$strings = ['a', 'bb', 'ccc'];\nvar_dump(longest($strings));\n\
    $strings = [];\nvar_dump(longest($strings));", "    if(count($strings) === 0)\
    \ {\n        return null;\n    }\n    $longest = \"\";\n    foreach($strings as\
    \ $string) {\n        if(strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\nprint(\"Longest: \" .\
    \ longest([\"a\", \"bb\", \"ccc\"]) . \"\\n\");", "    if (count($strings) ==\
    \ 0) {\n        return null;\n    }\n    $max = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($max)) {\n            $max\
    \ = $string;\n        }\n    }\n    return $max;\n}\n", "    $longest = NULL;\n\
    \    foreach ($strings as $string) {\n        if ($longest === NULL || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $count = count($strings);\n    if ($count ==\
    \ 0) {\n        return \"None\";\n    }\n    $result = $strings[0];\n    $result_length\
    \ = strlen($result);\n    for ($i = 1; $i < $count; $i++) {\n        $string =\
    \ $strings[$i];\n        $string_length = strlen($string);\n        if ($string_length\
    \ > $result_length) {\n            $result = $string;\n            $result_length\
    \ = $string_length;\n        }\n    }\n    return $result;\n}\n", "  $longest\
    \ = NULL;\n  foreach ($strings as $string) {\n    if ($longest === NULL || strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
