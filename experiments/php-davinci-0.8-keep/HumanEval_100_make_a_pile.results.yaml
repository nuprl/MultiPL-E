name: HumanEval_100_make_a_pile
language: php
results:
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $r = array();\n  $r[] = $n;\n  while($n > 1) {\n    if($n % 2) {\n      $n\
    \ = $n - 1;\n    } else {\n      $n = $n - 2;\n    }\n    $r[] = $n;\n  }\n  return\
    \ $r;\n}\nassert(make_a_pile(3) == array(3, 5, 7));\nassert(make_a_pile(4) ==\
    \ array(4, 6, 8, 10));\nassert(make_a_pile(5) == array(5, 7, 9, 11, 13));\nassert(make_a_pile(6)\
    \ == array(6, 8, 10, 12, 14, 16));\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(make_a_pile(3) == [3, 5, 7]) failed in /tmp/tmpam5mi_pf.php\
    \ on line 25\n\nWarning: assert(): assert(make_a_pile(4) == [4, 6, 8, 10]) failed\
    \ in /tmp/tmpam5mi_pf.php on line 26\n\nWarning: assert(): assert(make_a_pile(5)\
    \ == [5, 7, 9, 11, 13]) failed in /tmp/tmpam5mi_pf.php on line 27\n\nWarning:\
    \ assert(): assert(make_a_pile(6) == [6, 8, 10, 12, 14, 16]) failed in /tmp/tmpam5mi_pf.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpam5mi_pf.php:35\n\
    Stack trace:\n#0 /tmp/tmpam5mi_pf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpam5mi_pf.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  // Base case\n  if ($n == 1) return [1];\n  // Recursive case\n  $pile = make_a_pile($n\
    \ - 1);\n  array_push($pile, $pile[$n - 2] + ($n % 2 == 0 ? 2 : 1));\n  return\
    \ $pile;\n}\n\necho \"make_a_pile(3): \";\necho var_dump(make_a_pile(3));\n\n\
    echo \"make_a_pile(4): \";\necho var_dump(make_a_pile(4));\n\necho \"make_a_pile(5):\
    \ \";\necho var_dump(make_a_pile(5));\n\necho \"make_a_pile(6): \";\necho var_dump(make_a_pile(6));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "make_a_pile(3): array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(4)\n}\nmake_a_pile(4): array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n  [3]=>\n  int(6)\n}\nmake_a_pile(5): array(5) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n  [3]=>\n  int(6)\n  [4]=>\n\
    \  int(7)\n}\nmake_a_pile(6): array(6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n  [3]=>\n  int(6)\n  [4]=>\n  int(7)\n  [5]=>\n  int(9)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgoooi6_.php:38\n\
    Stack trace:\n#0 /tmp/tmprgoooi6_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprgoooi6_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hr2zg7u.php:29\n\
    Stack trace:\n#0 /tmp/tmp8hr2zg7u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8hr2zg7u.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n -= 1;\n\
    \    } else {\n      $n -= 2;\n    }\n    $pile[] = $n;\n  }\n  return $pile;\n\
    }\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r(make_a_pile(33));\nprint_r(make_a_pile(34));\nprint_r(make_a_pile(35));\n\
    print_r(make_a_pile(36));\nprint_r(make_a_pile(37));\nprint_r(make_a_pile(38));\n\
    print_r(make_a_pile(39));\nprint_\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy7hgkzox.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $numbers = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $numbers[] = $n * 2\
    \ - 1;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1k7fvn9.php:30\n\
    Stack trace:\n#0 /tmp/tmpl1k7fvn9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpl1k7fvn9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 0) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    array_push($result,\
    \ $n);\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(4));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 1\n    [2] => 0\n)\nArray\n(\n    [0]\
    \ => 12\n    [1] => 6\n    [2] => 3\n    [3] => 1\n    [4] => 0\n)\nArray\n(\n\
    \    [0] => 10\n    [1] => 5\n    [2] => 2\n    [3] => 1\n    [4] => 0\n)\nArray\n\
    (\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp64cdfkb.php:34\nStack trace:\n#0 /tmp/tmpp64cdfkb.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp64cdfkb.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $array = [$n];\n  while ($n > 0) {\n    if ($n % 2 == 0) {\n      $n += 1;\n\
    \    } else {\n      $n += 2;\n    }\n    $array[] = $n;\n  }\n  return $array;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpsozjqmf9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $level = 0;\n    $stack = [];\n    for ($i = $n; $i > 0; $i--) {\n      \
    \  $stack[$level] = $n;\n        $n = $level%2 ? $n + 2 : $n + 1;\n        $level++;\n\
    \    }\n    return $stack;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06_bd7me.php:28\n\
    Stack trace:\n#0 /tmp/tmp06_bd7me.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp06_bd7me.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = 3 * $n + 1;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpkn_2r5t4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  if ($n === 1) {\n    return $result;\n  }\n\n  if ($n %\
    \ 2 === 0) {\n    $result[] = $n + 2;\n  } else {\n    $result[] = $n + 1;\n \
    \ }\n\n  while (end($result) > 1) {\n    if (end($result) % 2 === 0) {\n     \
    \ $result[] = end($result) - 2;\n    } else {\n      $result[] = end($result)\
    \ - 1;\n    }\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3f2ohgf.php:40\n\
    Stack trace:\n#0 /tmp/tmpj3f2ohgf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpj3f2ohgf.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    while ($n > 0) {\n        $pile[] = $n;\n        $n = $n\
    \ % 2 ? $n + 2 : $n + 1;\n    }\n    return $pile;\n}\n\n$tests = [];\n$tests[]\
    \ = ['input' => 3, 'expected' => [3, 5, 7]];\n$tests[] = ['input' => 4, 'expected'\
    \ => [4, 6, 8, 10]];\n\nforeach ($tests as $index => $test) {\n    $result = make_a_pile($test['input']);\n\
    \    if ($test['expected'] !== $result) {\n        echo 'Test ', $index, ' Failed',\
    \ PHP_EOL;\n        echo 'Input: ', $test['input'], PHP_EOL;\n        echo 'Expected:\
    \ ', json_encode($test['expected']), PHP_EOL;\n        echo 'Result: ', json_encode($result),\
    \ PHP_EOL;\n    }\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpgdz6csje.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [$n];\n    $i = 1;\n    while ($n > 0) {\n        $n -= $i;\n    \
    \    if ($n > 0) {\n            $res[] = $n;\n        }\n        $i += 2;\n  \
    \  }\n    return $res;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7r3_2tq.php:29\n\
    Stack trace:\n#0 /tmp/tmpu7r3_2tq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu7r3_2tq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$stones = [];\n\t$stones[0] = $n;\n\t$stones[1] = $n + ($n%2 === 0 ? 2 : 1);\n\
    \t$stones[2] = $n + ($n%2 === 0 ? 3 : 2);\n\treturn $stones;\n}\nprint_r(make_a_pile(3));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6a4px8_l.php:26\nStack trace:\n#0 /tmp/tmp6a4px8_l.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6a4px8_l.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  if ($n <= 0) {\n    return $result;\n  }\n  $result[0] = $n;\n\
    \  while ($n > 0) {\n    if ($n % 2) {\n      $n = $n + 2;\n    } else {\n   \
    \   $n = $n + 1;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\necho\
    \ json_encode(make_a_pile(3)) . \"\\n\";\n\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpb3v2k8cu.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n & 1) ? $n + 2 : $n + 1;\n \
    \   $pile[] = $n;\n  }\n  return $pile;\n}\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp3s17rspw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = array();\n    $stones[] = $n;\n    while ($n > 1) {\n        $n\
    \ = ($n % 2 == 0) ? $n / 2 : ($n - 1) / 2;\n        $stones[] = $n;\n    }\n \
    \   $stones = array_reverse($stones);\n    return $stones;\n}\necho var_export(make_a_pile(3),\
    \ true) . \"\\n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n  0 => 1,\n  1 => 3,\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpclr0sf8w.php:28\nStack trace:\n#0 /tmp/tmpclr0sf8w.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpclr0sf8w.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $i = 1;\n  while($n > 0) {\n    $result[] = $n;\n    $n =\
    \ ($n % 2 == 0) ? $n + $i : $n + $i + 1;\n    $i += 2;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp4x66gkqc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [$n];\n    $level = 1;\n    while ($level < $n) {\n        $next_level\
    \ = $stones[$level - 1] % 2 == 0 ? $stones[$level - 1] + 2 : $stones[$level -\
    \ 1] + 1;\n        $stones[] = $next_level;\n        $level++;\n    }\n    return\
    \ $stones;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_22spzj.php:27\n\
    Stack trace:\n#0 /tmp/tmp3_22spzj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3_22spzj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [$n];\n    for ($i = 0; $i < $n - 1; $i++) {\n        $last = end($res);\n\
    \        if ($last % 2 == 0) {\n            $last++;\n        } else {\n     \
    \       $last += 2;\n        }\n        $res[] = $last;\n    }\n    return $res;\n\
    }\n\necho \" <br>\";\nprint_r(make_a_pile(3));\necho \" <br>\";\nprint_r(make_a_pile(7));\n\
    echo \" <br>\";\nprint_r(make_a_pile(1));\necho \" <br>\";\nprint_r(make_a_pile(2));\n\
    echo \" <br>\";\nprint_r(make_a_pile(5));\necho \" <br>\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: " <br>Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\n <br>Array\n\
    (\n    [0] => 7\n    [1] => 9\n    [2] => 11\n    [3] => 13\n    [4] => 15\n \
    \   [5] => 17\n    [6] => 19\n)\n <br>Array\n(\n    [0] => 1\n)\n <br>Array\n\
    (\n    [0] => 2\n    [1] => 3\n)\n <br>Array\n(\n    [0] => 5\n    [1] => 7\n\
    \    [2] => 9\n    [3] => 11\n    [4] => 13\n)\n <br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy1qwm2ds.php:43\nStack trace:\n#0 /tmp/tmpy1qwm2ds.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy1qwm2ds.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $level = 1;\n  $stones = $n;\n  $res = [];\n  while ($stones > 0) {\n    $res[]\
    \ = $stones;\n    $level += 1;\n    $stones -= $level;\n  }\n  return $res;\n\
    }\n\n$m = 3;\n$expected = [3, 5, 7];\n$result = make_a_pile($m);\necho \"$m\"\
    \ . PHP_EOL;\nprint_r($result);\necho PHP_EOL;\nprint_r($expected);\necho PHP_EOL;\n\
    echo PHP_EOL;\n\n$m = 5;\n$expected = [5, 9, 13, 17];\n$result = make_a_pile($m);\n\
    echo \"$m\" . PHP_EOL;\nprint_r($result);\necho PHP_EOL;\nprint_r($expected);\n\
    echo PHP_EOL;\necho PHP_EOL;\n\n$m = 8;\n$expected = [8, 10, 12, 14, 16, 18, 20];\n\
    $result = make_a_pile($m);\necho \"$m\" . PHP_EOL;\nprint_r($result);\necho PHP_EOL;\n\
    print_r($expected);\necho PHP_EOL;\necho PHP_EOL;\n\n$m = 10;\n$expected = [10,\
    \ 12, 14, 16, 18, 20, 22, 24];\n$result = make_a_pile($m);\necho \"$m\" . PHP_EOL;\n\
    print_r($result);\necho PHP_EOL;\nprint_r($expected);\necho PHP_EOL;\necho PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\nArray\n(\n    [0] => 3\n    [1] => 1\n)\n\nArray\n(\n    [0] => 3\n\
    \    [1] => 5\n    [2] => 7\n)\n\n\n5\nArray\n(\n    [0] => 5\n    [1] => 3\n\
    )\n\nArray\n(\n    [0] => 5\n    [1] => 9\n    [2] => 13\n    [3] => 17\n)\n\n\
    \n8\nArray\n(\n    [0] => 8\n    [1] => 6\n    [2] => 3\n)\n\nArray\n(\n    [0]\
    \ => 8\n    [1] => 10\n    [2] => 12\n    [3] => 14\n    [4] => 16\n    [5] =>\
    \ 18\n    [6] => 20\n)\n\n\n10\nArray\n(\n    [0] => 10\n    [1] => 8\n    [2]\
    \ => 5\n    [3] => 1\n)\n\nArray\n(\n    [0] => 10\n    [1] => 12\n    [2] =>\
    \ 14\n    [3] => 16\n    [4] => 18\n    [5] => 20\n    [6] => 22\n    [7] => 24\n\
    )\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1jgq4c3.php:69\n\
    Stack trace:\n#0 /tmp/tmpy1jgq4c3.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpy1jgq4c3.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    for ($i = 0; $i < $n - 1; $i++) {\n        $last = end($pile);\n\
    \        if ($last % 2 == 0) {\n            $pile[] = $last + 2;\n        } else\
    \ {\n            $pile[] = $last + 1;\n        }\n    }\n    return $pile;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcbln0fk.php:30\n\
    Stack trace:\n#0 /tmp/tmpjcbln0fk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjcbln0fk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 ===\
    \ 0) {\n            $stones[] = $i + 1;\n        } else {\n            $stones[]\
    \ = $i + 2;\n        }\n    }\n    return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyy_vlrv.php:29\n\
    Stack trace:\n#0 /tmp/tmpkyy_vlrv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkyy_vlrv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [];\n    for ($i = 0; $i < $n; $i++) {\n        $stones[] = $n;\n\
    \        if ($n % 2 == 0) $n += 2;\n        else $n += 1;\n    }\n    return $stones;\n\
    }\necho '<pre>';\nvar_dump(make_a_pile(3));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp67hlxh5c.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  while ($n > 0) {\n    $result[] = $n;\n    $n = ($n % 2) ?\
    \ $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\n$cases = [\n  [[3], [3, 5, 7]],\n\
    \  [[4], [4, 6, 8, 10]],\n  [[5], [5, 7, 9, 11, 13]],\n  [[6], [6, 8, 10, 12,\
    \ 14, 16]],\n  [[7], [7, 9, 11, 13, 15, 17, 19]],\n  [[8], [8, 10, 12, 14, 16,\
    \ 18, 20, 22]],\n  [[9], [9, 11, 13, 15, 17, 19, 21, 23, 25]],\n  [[10], [10,\
    \ 12, 14, 16, 18, 20, 22, 24, 26, 28]],\n  [[11], [11, 13, 15, 17, 19, 21, 23,\
    \ 25, 27, 29, 31]],\n  [[12], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]],\n\
    \  [[13], [13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]],\n  [[14], [14,\
    \ 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]],\n  [[15], [15, 17, 19,\
    \ 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]],\n  [[16], [16, 18, 20, 22,\
    \ 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]],\n  [[17], [17, 19, 21, 23,\
    \ 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]],\n  [[18], [18, 20, 22,\
    \ 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]],\n \nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt7jqj7nq.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 0) {\n    if ($n % 2 === 0) {\n      $n += 1;\n\
    \    } else {\n      $n += 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp1tltwok_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [];\n\tfor ($i = $n; $i > 0; $i--) {\n\t\t$result[] = $n;\n\t\t$n\
    \ = ($n % 2 === 0) ? $n + 2 : $n + 1;\n\t}\n\treturn $result;\n}\n$test1 = make_a_pile(3);\n\
    echo implode(\", \", $test1) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 4, 6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbren744_.php:27\n\
    Stack trace:\n#0 /tmp/tmpbren744_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbren744_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % 2 ===\
    \ 0) {\n            $n++;\n        } else {\n            $n += 2;\n        }\n\
    \        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpn_91b8g1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  for ($i = 1; $i < $n; $i++) {\n    $pile[] = $pile[$i - 1]\
    \ + (1 + ($i % 2) * 2);\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_4usf7o.php:25\n\
    Stack trace:\n#0 /tmp/tmph_4usf7o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmph_4usf7o.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n < 0) {\n        return false;\n    }\n    $newArr = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $newArr[] = ($i + 1) * 2 + $n - 1;\n    }\n \
    \   return $newArr;\n}\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 6\n    [2] => 8\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpi4313g_n.php:30\nStack trace:\n\
    #0 /tmp/tmpi4313g_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpi4313g_n.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  $n_new = $n;\n  while ($n_new > 1) {\n    if ($n_new % 2 ==\
    \ 0) {\n      $n_new = $n_new / 2;\n    } else {\n      $n_new = $n_new * 3 +\
    \ 1;\n    }\n    array_push($pile, $n_new);\n  }\n  return $pile;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon6cppc5.php:30\n\
    Stack trace:\n#0 /tmp/tmpon6cppc5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpon6cppc5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [$n];\n    $current_level = $n;\n    while ($current_level > 1) {\n\
    \        if ($current_level % 2 === 0) {\n            $next_level = $current_level\
    \ - 1;\n        } else {\n            $next_level = $current_level + 1;\n    \
    \    }\n        $res[] = $next_level;\n        $current_level = $next_level;\n\
    \    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmptrwr594o.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    $stones = $n;\n    for ($i = 1; $i < $n; $i++) {\n \
    \       if ($stones % 2 == 0) {\n            $stones++;\n        } else {\n  \
    \          $stones--;\n        }\n        $result[] = $stones;\n    }\n    return\
    \ $result;\n}\n\n$n = 5;\nprint_r(make_a_pile($n));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 5\n    [3] => 4\n    [4]\
    \ => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41czpuhr.php:33\n\
    Stack trace:\n#0 /tmp/tmp41czpuhr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp41czpuhr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $level = [];\n  $level[] = $n;\n  for ($i = 1; $i < $n; $i++) {\n    if ($level[$i\
    \ - 1] % 2 == 0) {\n      $level[] = $level[$i - 1] + 2;\n    } else {\n     \
    \ $level[] = $level[$i - 1] + 1;\n    }\n  }\n  return $level;\n}\necho json_encode(make_a_pile(3));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[3,4,6]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdve8wajx.php:30\n\
    Stack trace:\n#0 /tmp/tmpdve8wajx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdve8wajx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    if ($i == 0) {\n      $result[]\
    \ = $n;\n    } else {\n      $result[] = $result[$i - 1] + ($i % 2 == 0 ? 2 :\
    \ 1);\n    }\n  }\n  return $result;\n}\necho '<pre>make_a_pile(3)</pre>';\nvar_dump(make_a_pile(3));\n\
    \necho '<pre>make_a_pile(4)</pre>';\nvar_dump(make_a_pile(4));\n\necho '<pre>make_a_pile(1)</pre>';\n\
    var_dump(make_a_pile(1));\n\necho '<pre>make_a_pile(10)</pre>';\nvar_dump(make_a_pile(10));\n\
    \necho '<pre>make_a_pile(11)</pre>';\nvar_dump(make_a_pile(11));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>make_a_pile(3)</pre>array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n\
    \  [2]=>\n  int(6)\n}\n<pre>make_a_pile(4)</pre>array(4) {\n  [0]=>\n  int(4)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n  [3]=>\n  int(8)\n}\n<pre>make_a_pile(1)</pre>array(1)\
    \ {\n  [0]=>\n  int(1)\n}\n<pre>make_a_pile(10)</pre>array(10) {\n  [0]=>\n  int(10)\n\
    \  [1]=>\n  int(11)\n  [2]=>\n  int(13)\n  [3]=>\n  int(14)\n  [4]=>\n  int(16)\n\
    \  [5]=>\n  int(17)\n  [6]=>\n  int(19)\n  [7]=>\n  int(20)\n  [8]=>\n  int(22)\n\
    \  [9]=>\n  int(23)\n}\n<pre>make_a_pile(11)</pre>array(11) {\n  [0]=>\n  int(11)\n\
    \  [1]=>\n  int(12)\n  [2]=>\n  int(14)\n  [3]=>\n  int(15)\n  [4]=>\n  int(17)\n\
    \  [5]=>\n  int(18)\n  [6]=>\n  int(20)\n  [7]=>\n  int(21)\n  [8]=>\n  int(23)\n\
    \  [9]=>\n  int(24)\n  [10]=>\n  int(26)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpks5ij1_y.php:42\nStack trace:\n#0 /tmp/tmpks5ij1_y.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpks5ij1_y.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$arr = [$n];\n\tif ($n % 2 == 0) {\n\t\tfor ($i = 0; $i < $n - 1; $i++) {\n\t\
    \t\t$arr[] = $arr[$i] + 2;\n\t\t}\n\t} else {\n\t\tfor ($i = 0; $i < $n - 1; $i++)\
    \ {\n\t\t\t$arr[] = $arr[$i] + 1;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhzz26ub.php:31\n\
    Stack trace:\n#0 /tmp/tmpbhzz26ub.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbhzz26ub.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [];\n  for ($i = 0; $i < $n; $i++) {\n    $levels[] = $n;\n    $n\
    \ += $n % 2 ? 2 : 1;\n  }\n  return $levels;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp9ucvpei9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $arr = [$n];\n    while($n > 0) {\n        $n = $n % 2 === 0 ? $n - 1 : $n\
    \ - 2;\n        array_push($arr, $n);\n    }\n    array_pop($arr);\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_i45m68.php:26\n\
    Stack trace:\n#0 /tmp/tmpq_i45m68.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq_i45m68.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n        $pile[] = $n;\n    }\n    return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmphw2vs08t.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    if($n == 1) {\n        $result[] = 1;\n    } else {\n\
    \        $result[] = $n;\n        $next = ($n % 2 == 0) ? $n + 2 : $n + 1;\n \
    \       while($next > 0) {\n            $result[] = $next;\n            $next\
    \ = ($next % 2 == 0) ? $next + 2 : $next + 1;\n        }\n    }\n    return $result;\n\
    }\necho '<pre>';\nprint_r(make_a_pile(1));\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(6));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n)\n\nFatal error: Allowed memory size of 134217728\
    \ bytes exhausted (tried to allocate 134217736 bytes) in /tmp/tmpc0v1b2ql.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 0; $i < $n - 1; $i++) {\n        $result[]\
    \ = ($result[$i] % 2 == 0) ? $result[$i] + 2 : $result[$i] + 1;\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 6\n)\nArray\n(\n    [0]\
    \ => 6\n    [1] => 8\n    [2] => 10\n    [3] => 12\n    [4] => 14\n    [5] =>\
    \ 16\n)\nArray\n(\n    [0] => 7\n    [1] => 8\n    [2] => 10\n    [3] => 12\n\
    \    [4] => 14\n    [5] => 16\n    [6] => 18\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpq2oonyul.php:27\nStack trace:\n#0 /tmp/tmpq2oonyul.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq2oonyul.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$stones = [$n];\n\t$next = $n % 2 == 0 ? $n + 2 : $n + 1;\n\twhile ($next <=\
    \ $n) {\n\t\t$stones[] = $next;\n\t\t$next = $next % 2 == 0 ? $next + 2 : $next\
    \ + 1;\n\t}\n\treturn $stones;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(1));\nprint_r(make_a_pile(10));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n)\nArray\n(\n    [0] => 7\n)\nArray\n(\n    [0]\
    \ => 1\n)\nArray\n(\n    [0] => 10\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpafmvsoqk.php:31\nStack trace:\n#0 /tmp/tmpafmvsoqk.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpafmvsoqk.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdknmizs.php:20\n\
    Stack trace:\n#0 /tmp/tmpzdknmizs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzdknmizs.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 === 0) {\n      \
    \      $n--;\n        } else {\n            $n++;\n        }\n        $pile[]\
    \ = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpez8zwc_o.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$pile = [];\n\twhile ($n >= 1) {\n\t\t$pile[] = $n;\n\t\t$n = ($n % 2) ? $n\
    \ + 2 : $n + 1;\n\t}\n\treturn $pile;\n}\n\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp0bdd_csg.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $i = 0;\n    while ($n > 0) {\n        $result[$i] = $n;\n\
    \        $n = ($n % 2 === 0) ? $n / 2 : ($n + 1) / 2;\n        $i++;\n    }\n\
    \    return $result;\n}\n\necho implode(', ', make_a_pile(3)), PHP_EOL;\necho\
    \ implode(', ', make_a_pile(5)), PHP_EOL;\necho implode(', ', make_a_pile(8)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(10)), PHP_EOL;\necho implode(', ',\
    \ make_a_pile(1)), PHP_EOL;\necho implode(', ', make_a_pile(0)), PHP_EOL;\necho\
    \ implode(', ', make_a_pile(6)), PHP_EOL;\necho implode(', ', make_a_pile(7)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(2)), PHP_EOL;\necho implode(', ', make_a_pile(4)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(9)), PHP_EOL;\necho implode(', ', make_a_pile(11)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(12)), PHP_EOL;\necho implode(', ',\
    \ make_a_pile(16)), PHP_EOL;\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpysqr0cz9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $stones[] = $n;\n    }\n    return $stones;\n}\nprint_r(make_a_pile(5));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpi9_fss26.php:26\nStack\
    \ trace:\n#0 /tmp/tmpi9_fss26.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi9_fss26.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $arr = [$n];\n  $i = 0;\n  while ($arr[$i] > 1) {\n    if ($arr[$i] % 2 ===\
    \ 0) {\n      $arr[] = $arr[$i] - 1;\n    } else {\n      $arr[] = $arr[$i] -\
    \ 2;\n    }\n    $i++;\n  }\n  return $arr;\n}\n\necho \"make_a_pile(3):\\n\"\
    ;\nvar_dump(make_a_pile(3));\necho \"make_a_pile(6):\\n\";\nvar_dump(make_a_pile(6));\n\
    echo \"make_a_pile(16):\\n\";\nvar_dump(make_a_pile(16));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "make_a_pile(3):\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(1)\n}\n\
    make_a_pile(6):\narray(4) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n  [2]=>\n \
    \ int(3)\n  [3]=>\n  int(1)\n}\nmake_a_pile(16):\narray(9) {\n  [0]=>\n  int(16)\n\
    \  [1]=>\n  int(15)\n  [2]=>\n  int(13)\n  [3]=>\n  int(11)\n  [4]=>\n  int(9)\n\
    \  [5]=>\n  int(7)\n  [6]=>\n  int(5)\n  [7]=>\n  int(3)\n  [8]=>\n  int(1)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwz2xgbl.php:37\n\
    Stack trace:\n#0 /tmp/tmpbwz2xgbl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbwz2xgbl.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [];\n  $levels[] = $n;\n  for ($i = 1; $i < $n; $i++) {\n    $levels[]\
    \ = $n + (2 * $i);\n  }\n  return $levels;\n}\n$levels = make_a_pile(3);\necho\
    \ implode(', ', $levels) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 5, 7\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $result[] = ($n & 1) ? ($n\
    \ - 1) : ($n + 1);\n        $n = $n - 2;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbo01q7h.php:26\n\
    Stack trace:\n#0 /tmp/tmppbo01q7h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppbo01q7h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    // Your code here...\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsn7uf1sn.php:20\n\
    Stack trace:\n#0 /tmp/tmpsn7uf1sn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsn7uf1sn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  $num_stones = $n;\n  for ($i = 0; $i < $n - 1; $i++) {\n\
    \    if ($num_stones % 2 === 0) {\n      $num_stones++;\n    } else {\n      $num_stones\
    \ += 2;\n    }\n    $result[] = $num_stones;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0sgjvh7.php:32\n\
    Stack trace:\n#0 /tmp/tmp_0sgjvh7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_0sgjvh7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % 2 ==\
    \ 0) {\n            $result[] = $result[$i - 1] + 2;\n        } else {\n     \
    \       $result[] = $result[$i - 1] + 1;\n        }\n    }\n    return $result;\n\
    }\n$output = make_a_pile(3);\nprint_r($output);\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdqh8xw8u.php:30\nStack trace:\n#0 /tmp/tmpdqh8xw8u.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdqh8xw8u.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n != 1) {\n    if ($n % 2 == 0) {\n      $n--;\n\
    \    } else {\n      $n++;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpatrb1zwa.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $result[] = $n -= ($n % 2\
    \ === 0) ? 2 : 1;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr7p6xn8.php:24\n\
    Stack trace:\n#0 /tmp/tmpyr7p6xn8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyr7p6xn8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if($n == 1) return [1];\n  $result = [$n];\n  $last = $n;\n  while($last >\
    \ 1) {\n    if($last % 2) {\n      $result[] = $last - 1;\n      $last = $last\
    \ - 1;\n    } else {\n      $result[] = $last - 2;\n      $last = $last - 2;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg6sft22.php:32\n\
    Stack trace:\n#0 /tmp/tmpyg6sft22.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyg6sft22.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    if ($n == 1) {\n        $result[] = 1;\n    } else {\n\
    \        $result[] = $n;\n        for ($i = $n; $i > 1; $i--) {\n            if\
    \ ($i % 2 == 0) {\n                $result[] = $i - 1;\n            } else {\n\
    \                $result[] = $i + 1;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpduza7rpy.php:33\n\
    Stack trace:\n#0 /tmp/tmpduza7rpy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpduza7rpy.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $output = [$n];\n    $i = 0;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $output[] = $n;\n    }\n    return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemgcc6wy.php:30\n\
    Stack trace:\n#0 /tmp/tmpemgcc6wy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpemgcc6wy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $num_stone = [$n];\n  $num_stone[] = ($n % 2 == 0) ? $n + 2 : $n + 1;\n  $num_stone[]\
    \ = ($n % 2 == 0) ? $n + 3 : $n + 2;\n  return $num_stone;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qyc98g0.php:23\n\
    Stack trace:\n#0 /tmp/tmp6qyc98g0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6qyc98g0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n == 1) return [1];\n  $a = make_a_pile($n - 1);\n  $a[] = (int)($n %\
    \ 2 == 0 ? $a[$n - 2] + 2 : $a[$n - 2] + 1);\n  return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpochqox9r.php:24\n\
    Stack trace:\n#0 /tmp/tmpochqox9r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpochqox9r.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(18));\nprint_r(make_a_pile(30));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)\nArray\n(\n    [0] => 7\n\
    \    [1] => 4\n    [2] => 2\n    [3] => 1\n)\nArray\n(\n    [0] => 8\n    [1]\
    \ => 4\n    [2] => 2\n    [3] => 1\n)\nArray\n(\n    [0] => 18\n    [1] => 9\n\
    \    [2] => 5\n    [3] => 3\n    [4] => 2\n    [5] => 1\n)\nArray\n(\n    [0]\
    \ => 30\n    [1] => 15\n    [2] => 8\n    [3] => 4\n    [4] => 2\n    [5] => 1\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws91vk8a.php:36\n\
    Stack trace:\n#0 /tmp/tmpws91vk8a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpws91vk8a.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = ($n % 2) ? $n\
    \ + 2 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpv3y_r_fn.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n === 1) {\n    return [1];\n  }\n\n  $level = [];\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $level[] = $n;\n    $n = $n % 2 === 0 ? $n + 2 : $n + 1;\n\
    \  }\n\n  return $level;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpw4gs924m.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n != 1) {\n        if ($n % 2) {\n         \
    \   $n = $n + 2;\n        } else {\n            $n = $n + 1;\n        }\n    \
    \    $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpdqevvn9h.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n\
    \ += ($n % 2) ? 2 : 1;\n  }\n  return $result;\n}\n\necho implode(\", \", make_a_pile(3));\n\
    echo \"\\n\";\necho implode(\", \", make_a_pile(5));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmprk5gfc4m.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) {\n        return FALSE;\n    }\n    $result = [$n];\n    while\
    \ ($n > 1) {\n        $n -= ($n % 2) ? 2 : 1;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2n9g8b78.php:28\n\
    Stack trace:\n#0 /tmp/tmp2n9g8b78.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2n9g8b78.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    // Good luck!\n    $levels = [];\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     $levels[] = $n;\n        if ($n % 2 === 0) {\n            $n += 2;\n   \
    \     } else {\n            $n += 1;\n        }\n    }\n    return $levels;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp6tcgyxwa.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$arr = [];\n\t$arr[] = $n;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($arr[$i\
    \ - 1] % 2 == 0) {\n\t\t\t$arr[] = $arr[$i - 1] + 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + 1;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigrs2hbt.php:30\n\
    Stack trace:\n#0 /tmp/tmpigrs2hbt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpigrs2hbt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n !== 1) {\n        if ($n % 2 === 0) {\n  \
    \          $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n  \
    \      }\n        $result[] = $n;\n    }\n    return $result;\n}\necho implode(',\
    \ ', make_a_pile(4));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4, 2, 1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtn9hy4b.php:30\n\
    Stack trace:\n#0 /tmp/tmphtn9hy4b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphtn9hy4b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$stones = [$n];\n\t$next = is_odd($n) ? $n + 2 : $n + 1;\n\twhile ($next <=\
    \ $n) {\n\t\t$stones[] = $next;\n\t\t$next = is_odd($next) ? $next + 2 : $next\
    \ + 1;\n\t}\n\treturn $stones;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_odd() in /tmp/tmp_a5802j_.php:14\n\
    Stack trace:\n#0 /tmp/tmp_a5802j_.php(22): make_a_pile(3)\n#1 /tmp/tmp_a5802j_.php(26):\
    \ candidate(3)\n#2 /tmp/tmp_a5802j_.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp_a5802j_.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + ($i *\
    \ 2);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) {\n        return [];\n    }\n    $result = [$n];\n    while\
    \ ($n > 1) {\n        $n = ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(make_a_pile(1));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(2));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(4));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(5));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(make_a_pile(6));\necho '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(7));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(8));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(make_a_pile(9));\necho '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(10));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(11));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(make_a_pile(12));\necho '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(13));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(make_a_pile(14));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(make_a_pile(15));\necho '</\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo96jrg8r.php on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n == 1) {\n        return [1];\n    }\n\n    $result = [$n];\n    $current\
    \ = $n;\n    $next = 0;\n\n    while (1) {\n        if ($current % 2 === 0) {\n\
    \            $next = $current + 2;\n        } else {\n            $next = $current\
    \ + 1;\n        }\n\n        if ($next > $n) {\n            break;\n        }\n\
    \n        $result[] = $next;\n        $current = $next;\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kv5b5w2.php:44\n\
    Stack trace:\n#0 /tmp/tmp9kv5b5w2.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9kv5b5w2.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n < 1) {\n        return [];\n    }\n\n    $result = [$n];\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $result[] = ($n + $i) % 2 === 0 ? $n + $i\
    \ + 1 : $n + $i;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_womxvq.php:30\n\
    Stack trace:\n#0 /tmp/tmpb_womxvq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb_womxvq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n     \
    \       $n += 1;\n        } else {\n            $n += 2;\n        }\n        array_push($result,\
    \ $n);\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpq80916sl.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n < 0) {\n        return FALSE;\n    }\n    $result = [];\n    $num\
    \ = $n;\n    while ($num > 0) {\n        $result[] = $num;\n        if ($num %\
    \ 2 == 0) {\n            $num -= 1;\n        } else {\n            $num -= 2;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplch70j_4.php:34\n\
    Stack trace:\n#0 /tmp/tmplch70j_4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplch70j_4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$pile = [$n];\n\twhile ($n > 1) {\n\t\t$n = $n % 2 == 0 ? $n - 1 : $n + 1;\n\
    \t\t$pile[] = $n;\n\t}\n\treturn $pile;\n}\necho implode(', ', make_a_pile(3))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(11)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp97diqfx5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $a = array();\n    while ($n > 0) {\n        $a[] = $n;\n        $n = $n\
    \ % 2 ? $n + 2 : $n + 1;\n    }\n    return $a;\n}\necho '<pre>';\nvar_dump(make_a_pile(3));\n\
    var_dump(make_a_pile(4));\nvar_dump(make_a_pile(5));\nvar_dump(make_a_pile(8));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmppvhhvyju.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [];\n  for ($i = 0; $i < $n; $i++) {\n    if ($i == 0) {\n      $pile[]\
    \ = $n;\n    } else {\n      $pile[] = ($pile[$i - 1] % 2 == 0) ? $pile[$i - 1]\
    \ + 2 : $pile[$i - 1] + 1;\n    }\n  }\n  return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_gw31eb.php:28\n\
    Stack trace:\n#0 /tmp/tmpf_gw31eb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf_gw31eb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    // your code here\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1c3zf5m.php:20\n\
    Stack trace:\n#0 /tmp/tmpw1c3zf5m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw1c3zf5m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 0) {\n    if ($n % 2 === 0) {\n      $n = $n /\
    \ 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    array_push($pile, $n);\n\
    \  }\n  return $pile;\n}\necho implode(', ', make_a_pile(3));\necho \"\\n\";\n\
    echo implode(', ', make_a_pile(10));\necho \"\\n\";\necho implode(', ', make_a_pile(7));\n\
    echo \"\\n\";\necho implode(', ', make_a_pile(2));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 1, 0\n10, 5, 2, 1, 0\n7, 3, 1, 0\n2, 1, 0\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxw35c14m.php:37\nStack trace:\n#0 /tmp/tmpxw35c14m.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxw35c14m.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $array = [$n];\n  $flag = $n % 2;\n  while ($n > 0) {\n    $n = ($flag == 0)\
    \ ? $n + 1 : $n + 2;\n    $flag = 1 - $flag;\n    $array[] = $n;\n  }\n  return\
    \ $array;\n}\necho implode(', ', make_a_pile(3)), \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp4_f0spe1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $output = [];\n  while($n > 0) {\n    $output[] = $n;\n    $n = ($n % 2) ?\
    \ $n + 2 : $n + 1;\n  }\n  return $output;\n}\necho '<pre>';\nvar_dump(make_a_pile(3));\n\
    var_dump(make_a_pile(2));\nvar_dump(make_a_pile(4));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpo_29awa6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stone_levels = [];\n  for ($i = 1; $i <= $n; $i++) {\n    $stone_levels[]\
    \ = $i + $n;\n  }\n  return $stone_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3glucez0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3glucez0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3glucez0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stone_count = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i ==\
    \ 0) {\n            $stone_count[] = $n;\n        } else {\n            $stone_count[]\
    \ = ($n % 2 == 0) ? $stone_count[$i - 1] + 2 : $stone_count[$i - 1] + 1;\n   \
    \     }\n    }\n    return $stone_count;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 6\n    [2] => 8\n    [3] => 10\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpc6r1gxfq.php:30\nStack trace:\n#0 /tmp/tmpc6r1gxfq.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc6r1gxfq.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $output = [];\n  for ($i = 0; $i < $n; $i++) {\n    $output[] = $n + ($i*2);\n\
    \  }\n  return $output;\n}\necho \"make_a_pile(3) -> \";\nprint_r(make_a_pile(3));\n\
    echo \"\\n\";\necho \"make_a_pile(4) -> \";\nprint_r(make_a_pile(4));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "make_a_pile(3) -> Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n\
    )\n\nmake_a_pile(4) -> Array\n(\n    [0] => 4\n    [1] => 6\n    [2] => 8\n  \
    \  [3] => 10\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    $level = 1;\n    while ($n > 0) {\n        $level++;\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = (3 * $n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\n\n$tests = [\n    [\n        'input' => [1],\n       \
    \ 'expected' => [1]\n    ],\n    [\n        'input' => [5],\n        'expected'\
    \ => [5, 8, 13, 21, 34]\n    ],\n    [\n        'input' => [20],\n        'expected'\
    \ => [20, 30, 45, 68, 102, 153, 230, 345, 518, 777, 1156, 1735, 2603, 3905, 5858,\
    \ 8787, 13181, 19727, 29591, 44387]\n    ],\n    [\n        'input' => [3],\n\
    \        'expected' => [3, 5, 7]\n    ],\n    [\n        'input' => [23],\n  \
    \      'expected' => [23, 35, 53, 80, 121, 182, 273, 410, 616, 925, 1388, 2083,\
    \ 3125, 4688, 7032, 10548, 15823, 23735, 35603, 534\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa9vr0z3c.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $i = 0;\n    while ($n > 0) {\n        $result[$i] = $n;\n\
    \        $n -= $i % 2 ? 2 : 1;\n        $i++;\n    }\n    return $result;\n}\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75ni2vto.php:27\n\
    Stack trace:\n#0 /tmp/tmp75ni2vto.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp75ni2vto.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [$n];\n    if ($n % 2 == 0) {\n        $stones[] = $n + 2;\n  \
    \  } else {\n        $stones[] = $n + 1;\n    }\n    while (end($stones) < $n\
    \ * 2) {\n        if (end($stones) % 2 == 0) {\n            $stones[] = end($stones)\
    \ + 2;\n        } else {\n            $stones[] = end($stones) + 1;\n        }\n\
    \    }\n    return $stones;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3q61sye.php:33\n\
    Stack trace:\n#0 /tmp/tmpn3q61sye.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn3q61sye.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n \
    \           $arr[] = $n;\n        } else {\n            $arr[] = $arr[$i - 1]\
    \ + (2 * $i);\n        }\n    }\n    return $arr;\n}\n\necho make_a_pile(3);\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp271rm93j.php:30\n\
    Stack trace:\n#0 /tmp/tmp271rm93j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp271rm93j.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [$n];\n  while ($n > 1) {\n    if ($n % 2 === 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $levels[] = $n * 2\
    \ - 1;\n  }\n  return $levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtrqljue.php:30\n\
    Stack trace:\n#0 /tmp/tmphtrqljue.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphtrqljue.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        if ($result[$i\
    \ - 1] % 2 === 0) {\n            $result[] = $result[$i - 1] + 2;\n        } else\
    \ {\n            $result[] = $result[$i - 1] + 1;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(4));\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 6\n    [2] => 8\n    [3] => 10\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjxhdafs1.php:29\nStack\
    \ trace:\n#0 /tmp/tmpjxhdafs1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjxhdafs1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $n = intval($n);\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $result[] = $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpxii52hkc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [];\n    $stones[0] = $n;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($stones[$i - 1] % 2 == 0) {\n            $stones[$i] = $stones[$i\
    \ - 1] + 1;\n        } else {\n            $stones[$i] = $stones[$i - 1] + 2;\n\
    \        }\n    }\n    return $stones;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm52s03_k.php:31\n\
    Stack trace:\n#0 /tmp/tmpm52s03_k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm52s03_k.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2 == 0) ? $n -\
    \ 1 : $n - 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n$result\
    \ = make_a_pile(3);\n$expected = [3, 5, 7];\nif ($result !== $expected) {\n  \
    \  echo \"FAILED\\n\";\n    echo \"Result: \";\n    var_dump($result);\n    echo\
    \ \"Expected: \";\n    var_dump($expected);\n} else {\n    echo \"PASSED\\n\"\
    ;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "FAILED\nResult: array(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(1)\n}\nExpected:\
    \ array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpc5scflqc.php:37\nStack trace:\n\
    #0 /tmp/tmpc5scflqc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc5scflqc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    while ($n > 0) {\n        $pile[] = $n;\n        $n += $n\
    \ % 2 ? 2 : 1;\n    }\n    return $pile;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpuijg1kbw.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 0; $i < $n - 1; $i++) {\n        $result[]\
    \ = $result[$i] + ($result[$i] % 2 == 0 ? 2 : 1);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb828q7w.php:25\n\
    Stack trace:\n#0 /tmp/tmpgb828q7w.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgb828q7w.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  for ($i = 1; $i < $n; $i++) {\n    $result[] = $result[$i\
    \ - 1] + ($n % 2 === 0 ? 2 : 1);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bgzii9p.php:25\n\
    Stack trace:\n#0 /tmp/tmp4bgzii9p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4bgzii9p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [$n];\n    $curr = $n;\n    while ($curr > 1) {\n        if ($curr\
    \ % 2 == 0) {\n            $curr /= 2;\n        } else {\n            $curr =\
    \ ($curr + 1) / 2;\n        }\n        $res[] = $curr;\n    }\n    return $res;\n\
    }\n\n$a = make_a_pile(0);\nvar_dump($a);\n\n$a = make_a_pile(3);\nvar_dump($a);\n\
    \n$a = make_a_pile(4);\nvar_dump($a);\n\n$a = make_a_pile(5);\nvar_dump($a);\n\
    \n$a = make_a_pile(6);\nvar_dump($a);\n\n$a = make_a_pile(7);\nvar_dump($a);\n\
    \n$a = make_a_pile(8);\nvar_dump($a);\n\n$a = make_a_pile(9);\nvar_dump($a);\n\
    \n$a = make_a_pile(10);\nvar_dump($a);\n\n$a = make_a_pile(100);\nvar_dump($a);\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  int(0)\n}\narray(3) {\n  [0]=>\n  int(3)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(1)\n}\narray(3) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n\
    \  [2]=>\n  int(1)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(2)\n  [3]=>\n  int(1)\n}\narray(4) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(2)\n  [3]=>\n  int(1)\n}\narray(4) {\n  [0]=>\n  int(7)\n  [1]=>\n\
    \  int(4)\n  [2]=>\n  int(2)\n  [3]=>\n  int(1)\n}\narray(4) {\n  [0]=>\n  int(8)\n\
    \  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n  [3]=>\n  int(1)\n}\narray(5) {\n  [0]=>\n\
    \  int(9)\n  [1]=>\n  int(5)\n  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n\
    \  int(1)\n}\narray(5) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(5)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n}\narray(8) {\n  [0]=>\n  int(100)\n  [1]=>\n\
    \  int(50)\n  [2]=>\n  int(25)\n  [3]=>\n  int(13)\n  [4]=>\n  int(7)\n  [5]=>\n\
    \  int(4)\n  [6]=>\n  int(2)\n  [7]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpolvt5j_3.php:60\nStack trace:\n#0 /tmp/tmpolvt5j_3.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpolvt5j_3.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 0) {\n    $n--;\n    $next_value = ($n % 2 ==\
    \ 0) ? $n + 2 : $n + 1;\n    $result[] = $next_value;\n    $n = $next_value;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpmq410ch2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones=[];\n    for ($i=0; $i < $n; $i++) {\n        if ($i == 0) {\n  \
    \          $stones[] = $n;\n        } else {\n            $stones[] = $stones[$i-1]\
    \ + (2 * $i) + 1;\n        }\n    }\n    return $stones;\n}\necho implode(\",\
    \ \", make_a_pile(3)) . \"\\n\";\necho implode(\", \", make_a_pile(4)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 6, 11\n4, 7, 12, 19\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwefh0rou.php:30\nStack trace:\n#0 /tmp/tmpwefh0rou.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwefh0rou.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $levels = [$n];\n    $currNum = $n;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($currNum % 2 === 0) {\n            $currNum++;\n        } else {\n\
    \            $currNum += 2;\n        }\n        $levels[] = $currNum;\n    }\n\
    \    return $levels;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwb_f3lx.php:31\n\
    Stack trace:\n#0 /tmp/tmpgwb_f3lx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwb_f3lx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n + 1 : $n + 2;\n\
    \    $stones[] = $n;\n  }\n  return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp0dmn82dw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$levels = [];\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$levels[] = $n;\n\t\t$n\
    \ += $n & 1 ? 2 : 1;\n\t}\n\treturn $levels;\n}\n\necho '<pre>';\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(10));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(12));\necho '</pre>';\nfunction candidate(...$args) {\n  \
    \  return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp_3tok3b1.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [$n];\n\t$i = 1;\n\tdo {\n\t\t$result[] = $n = $n % 2 === 0 ? $n +\
    \ 2 : $n + 1;\n\t\t$i++;\n\t} while ($n < $i * 2 + 1);\n\treturn $result;\n}\n\
    \nprint_r(make_a_pile(3));\nprint_r(make_a_pile(7));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpg34lki_1.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $i = 0;\n    while ($n > 0) {\n        $pile[$i] = $n;\n\
    \        $n = ($n % 2 === 0) ? $n - 1 : $n - 2;\n        $i++;\n    }\n    return\
    \ $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00xwf9u8.php:27\n\
    Stack trace:\n#0 /tmp/tmp00xwf9u8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp00xwf9u8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $i = 0;\n    while ($n > 0) {\n        $result[$i] = $n;\n\
    \        $n = $n % 2 ? $n + 2 : $n + 1;\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(make_a_pile(3));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpxxee7s46.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    // your code here\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmkphadk.php:21\n\
    Stack trace:\n#0 /tmp/tmpgmkphadk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgmkphadk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  // Your code here\n  $arr = [];\n  for ($i = 0; $i < $n; $i++) {\n    if ($i\
    \ == 0) {\n      $n = $n;\n    } else {\n      if ($n % 2 == 0) {\n        $n\
    \ = $n + 2;\n      } else {\n        $n = $n + 1;\n      }\n    }\n    array_push($arr,\
    \ $n);\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp29lsh3hb.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $i = 1;\n    $level = 1;\n    $result = [];\n    while ($i <= $n) {\n   \
    \     $result[] = $level;\n        $level += ($level % 2 === 0) ? 2 : 1;\n   \
    \     $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiakxyo6y.php:28\n\
    Stack trace:\n#0 /tmp/tmpiakxyo6y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpiakxyo6y.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $res = [$n];\n  while($n--) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n    $res[]\
    \ = $n;\n  }\n  return $res;\n}\n\n$n = 3;\n\nvar_dump(make_a_pile($n));\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmprmv14vyf.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    //Your code here\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf4as3b4.php:20\n\
    Stack trace:\n#0 /tmp/tmpvf4as3b4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvf4as3b4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $odd = [1];\n    $even = [2];\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  $odd[] = $odd[$i] + 2;\n        $even[] = $even[$i] + 2;\n    }\n    if ($n\
    \ % 2 === 0) {\n        return $even;\n    } else {\n        return $odd;\n  \
    \  }\n}\necho '<pre>make_a_pile(3)</pre>';\nvar_dump(make_a_pile(3));\necho '<pre>make_a_pile(5)</pre>';\n\
    var_dump(make_a_pile(5));\necho '<pre>make_a_pile(10)</pre>';\nvar_dump(make_a_pile(10));\n\
    echo '<pre>make_a_pile(22)</pre>';\nvar_dump(make_a_pile(22));\necho '<pre>make_a_pile(0)</pre>';\n\
    var_dump(make_a_pile(0));\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>make_a_pile(3)</pre>array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n}\n<pre>make_a_pile(5)</pre>array(6) {\n\
    \  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n\
    \  [4]=>\n  int(9)\n  [5]=>\n  int(11)\n}\n<pre>make_a_pile(10)</pre>array(11)\
    \ {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n  int(8)\n\
    \  [4]=>\n  int(10)\n  [5]=>\n  int(12)\n  [6]=>\n  int(14)\n  [7]=>\n  int(16)\n\
    \  [8]=>\n  int(18)\n  [9]=>\n  int(20)\n  [10]=>\n  int(22)\n}\n<pre>make_a_pile(22)</pre>array(23)\
    \ {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n  int(8)\n\
    \  [4]=>\n  int(10)\n  [5]=>\n  int(12)\n  [6]=>\n  int(14)\n  [7]=>\n  int(16)\n\
    \  [8]=>\n  int(18)\n  [9]=>\n  int(20)\n  [10]=>\n  int(22)\n  [11]=>\n  int(24)\n\
    \  [12]=>\n  int(26)\n  [13]=>\n  int(28)\n  [14]=>\n  int(30)\n  [15]=>\n  int(32)\n\
    \  [16]=>\n  int(34)\n  [17]=>\n  int(36)\n  [18]=>\n  int(38)\n  [19]=>\n  int(40)\n\
    \  [20]=>\n  int(42)\n  [21]=>\n  int(44)\n  [22]=>\n  int(46)\n}\n<pre>make_a_pile(0)</pre>array(1)\
    \ {\n  [0]=>\n  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpd_pdl1qg.php:40\nStack trace:\n#0 /tmp/tmpd_pdl1qg.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd_pdl1qg.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if (!is_int($n) || $n < 1) {\n        return null;\n    }\n    $pile = [];\n\
    \    $i = 1;\n    while ($n > 0) {\n        $pile[] = $n;\n        $n = $n + $i;\n\
    \        $i = ($i + 1) % 2;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp2scxyif7.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    $next = ($n % 2 == 0) ? ($n + 2) : ($n + 1);\n    while\
    \ ($next < $n * 2) {\n        $result[] = $next;\n        $next = ($next % 2 ==\
    \ 0) ? ($next + 2) : ($next + 1);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklkdm68f.php:26\n\
    Stack trace:\n#0 /tmp/tmpklkdm68f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpklkdm68f.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $s = [$n];\n    $f = $n % 2 ? 'odd' : 'even';\n    for ($i = $n; $i < 100;\
    \ $i++) {\n        $i = $f($i + 1);\n        $s[] = $i;\n    }\n    return $s;\n\
    }\necho \"make_a_pile(3)\\n\";\necho_array(make_a_pile(3));\necho \"make_a_pile(8)\\\
    n\";\necho_array(make_a_pile(8));\necho \"make_a_pile(25)\\n\";\necho_array(make_a_pile(25));\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "make_a_pile(3)\n\nFatal error: Uncaught Error: Call to undefined function\
    \ echo_array() in /tmp/tmp72fol9l2.php:22\nStack trace:\n#0 {main}\n  thrown in\
    \ /tmp/tmp72fol9l2.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stack = [$n];\n  while ($n > 1) {\n    if ($n % 2 === 0) {\n      $n /= 2;\n\
    \    } else {\n      $n = ($n + 1) / 2;\n    }\n    $stack[] = $n;\n  }\n  return\
    \ $stack;\n}\n\n$n = 3;\nprint_r(make_a_pile($n));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf3uywg3i.php:32\nStack trace:\n#0 /tmp/tmpf3uywg3i.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf3uywg3i.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [];\n  while ($n > 0) {\n    $stones[] = $n;\n    $n = $n % 2 ==\
    \ 0 ? $n - 1 : $n - 2;\n  }\n  return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkjxc6t6.php:26\n\
    Stack trace:\n#0 /tmp/tmpwkjxc6t6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwkjxc6t6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while($n) {\n        $n = ($n % 2) ? $n + 2 : $n + 1;\n\
    \        $result[] = $n;\n    }\n    return $result;\n}\n$result = make_a_pile(3);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpaop2swt5.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    // your code here\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_73fi48x.php:20\n\
    Stack trace:\n#0 /tmp/tmp_73fi48x.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_73fi48x.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $numbers = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        $numbers[] =\
    \ ($numbers[$i - 1] % 2 === 0) ? $numbers[$i - 1] + 2 : $numbers[$i - 1] + 1;\n\
    \    }\n    return $numbers;\n}\nprint_r(make_a_pile(3));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 6\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpn3l17gau.php:26\nStack trace:\n#0 /tmp/tmpn3l17gau.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn3l17gau.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp3x1_ggul.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n == 1) {\n    return [1];\n  } elseif ($n == 2) {\n    return [2, 3];\n\
    \  } else {\n    $pile = make_a_pile($n - 1);\n    if ($n % 2 == 0) {\n      $pile[]\
    \ = $pile[count($pile) - 1] + 2;\n    } else {\n      $pile[] = $pile[count($pile)\
    \ - 1] + 1;\n    }\n    return $pile;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppp46_g08.php:32\n\
    Stack trace:\n#0 /tmp/tmppp46_g08.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppp46_g08.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n % 2) ? $n - 1 : $n / 2;\n \
    \   $pile[] = $n;\n  }\n  return $pile;\n}\n$expected = [3, 5, 7];\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(10));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 2\n    [2] => 1\n)\nArray\n(\n    [0] => 10\n    [1] => 5\n\
    \    [2] => 4\n    [3] => 2\n    [4] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1tb9dk39.php:30\nStack trace:\n#0 /tmp/tmp1tb9dk39.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1tb9dk39.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n < 1) {\n    return [];\n  }\n  $pile = [$n];\n  while ($n > 1) {\n \
    \   $n = ($n % 2) ? $n + 2 : $n + 1;\n    $pile[] = $n;\n  }\n  return $pile;\n\
    }\n$pile = make_a_pile(3);\nprint_r($pile);\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpvrhj_pqa.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $a = [$n];\n  while ($n > 1) {\n    $n = ($n & 1) ? $n + 2 : $n + 1;\n    $a[]\
    \ = $n;\n  }\n  return $a;\n}\n\nforeach (make_a_pile(3) as $n)\n  echo \"$n \"\
    ;\necho \"\\n\";\nforeach (make_a_pile(5) as $n)\n  echo \"$n \";\necho \"\\n\"\
    ;\nforeach (make_a_pile(7) as $n)\n  echo \"$n \";\necho \"\\n\";\nforeach (make_a_pile(9)\
    \ as $n)\n  echo \"$n \";\necho \"\\n\";\nforeach (make_a_pile(1) as $n)\n  echo\
    \ \"$n \";\necho \"\\n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpkrbaus_4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $arr = [$n];\n    while ($n !== 1) {\n        if ($n % 2 === 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n * 3) + 1;\n     \
    \   }\n        $arr[] = $n;\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamuje9iz.php:29\n\
    Stack trace:\n#0 /tmp/tmpamuje9iz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpamuje9iz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $n_next = $n % 2 ? $n + 2 : $n + 1;\n    if ($n == 1) {\n        return [1];\n\
    \    } else {\n        return array_merge([$n], make_a_pile($n_next));\n    }\n\
    }\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(30));\nprint_r(make_a_pile(45));\n\
    print_r(make_a_pile(85));\nprint_r(make_a_pile(100));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp9latiw6h.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $res = [];\n  for ($i = 0; $i < $n; $i++) {\n    $res[] = $n + ($i%2 == 0 ?\
    \ 1 : 2) * $i;\n  }\n  return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtvakf5o.php:24\n\
    Stack trace:\n#0 /tmp/tmpdtvakf5o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdtvakf5o.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $curr = $n;\n  while ($curr) {\n    $result[] = $curr;\n \
    \   $curr = $curr % 2 ? $curr + 2 : $curr + 1;\n  }\n  return $result;\n}\n\n\
    echo implode(', ', make_a_pile(3)) . PHP_EOL;\necho implode(', ', make_a_pile(6))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(2)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(1)) . PHP_EOL;\necho implode(', ', make_a_pile(0)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmppe3l957w.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $i = $n;\n  $result = [];\n  while ($i > 0) {\n    $result[] = $i;\n    $i\
    \ = $i % 2 ? $i + 2 : $i + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpm9npkfvm.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [$n];\n  while($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n + 1;\n\
    \    $stones[] = $n;\n  }\n  return $stones;\n}\n\n$tests = [\n  '10' => [10,\
    \ 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39,\
    \ 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67,\
    \ 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96,\
    \ 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120,\
    \ 121, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 144,\
    \ 145, 147, 148, 150, 151, 153, 154, 156, 157, 159, 160, 162, 163, 165, 166, 168,\
    \ 169, 171, 172, 174, 175, 177, 178, 180, 181, 183, 184, 186, 187, 189, 190, 192,\
    \ 193, 195, 196, 198, 199, 201, 202, 204, 205, 207, 208, 210, 211, 213, 214, 216,\
    \ 217, 219, 220, 222, 223, 225, 226, 228, 229, 231, 232, 234, 235, 237, 238, 240,\
    \ 241, 243, 244, 246, 247, 249, 250, 252, 253, 255, 256, 258, 259, 261, 262, 264,\
    \ 265, 267, 268, 270, 271, 273, 274, 276, 277, 279, 280, 282, 283, 285, 286, 288,\
    \ 289, 291, 292, 294, 295, 297, 298, 300, 301, 303, 304, 306, 307, 309, 310, 312,\
    \ 313, 315, 316, 318, 319, 321, 322, 324, 325, 327, 328, 330, 331, 333, 334, 336,\
    \ 337, 339,\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmywvrvww.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [$n];\n\tfor ($i = 1; $i < $n; $i++) {\n\t\t$result[] = $result[$i\
    \ - 1] + 2;\n\t}\n\treturn $result;\n}\n\n$n = 8;\n$result = make_a_pile($n);\n\
    echo implode(', ', $result), \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8, 10, 12, 14, 16, 18, 20, 22\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$pile = [];\n\t$pile[0] = $n;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($pile[$i\
    \ - 1] % 2 === 0) {\n\t\t\t$pile[$i] = $pile[$i - 1] + 2;\n\t\t} else {\n\t\t\t\
    $pile[$i] = $pile[$i - 1] + 1;\n\t\t}\n\t}\n\treturn $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2im0us_1.php:29\n\
    Stack trace:\n#0 /tmp/tmp2im0us_1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2im0us_1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [];\n\t$i = 0;\n\twhile ($n > 0) {\n\t\t$result[$i] = $n;\n\t\t$n\
    \ = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n\t\t$i++;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmps6uo4pj8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    $n = $n % 2 ? $n + 2 : $n + 1;\n    while ($n > 1) {\n\
    \        $pile[] = $n;\n        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return\
    \ $pile;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpj0dnltw_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  $i = 1;\n  while($i < $n) {\n    if($pile[$i-1] % 2 == 0)\
    \ {\n      $next = $pile[$i-1] + 2;\n    } else {\n      $next = $pile[$i-1] +\
    \ 1;\n    }\n    $pile[] = $next;\n    $i++;\n  }\n  return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp361ed0m.php:32\n\
    Stack trace:\n#0 /tmp/tmpp361ed0m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp361ed0m.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n -= 1;\n        } else {\n            $n -= 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(14));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 1\n)\nArray\n(\n    [0] => 10\n    [1]\
    \ => 9\n    [2] => 7\n    [3] => 5\n    [4] => 3\n    [5] => 1\n)\nArray\n(\n\
    \    [0] => 14\n    [1] => 13\n    [2] => 11\n    [3] => 9\n    [4] => 7\n   \
    \ [5] => 5\n    [6] => 3\n    [7] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0zckq45w.php:34\nStack trace:\n#0 /tmp/tmp0zckq45w.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0zckq45w.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [];\n    $i = 0;\n    while ($n > 0) {\n        $res[$i] = $n;\n \
    \       $n = ($n % 2 == 0) ? $n - 1 : $n - 2;\n        $i++;\n    }\n    return\
    \ $res;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(20));\nprint_r(make_a_pile(35));\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 1\n)\nArray\n(\n    [0] => 4\n    [1]\
    \ => 3\n    [2] => 1\n)\nArray\n(\n    [0] => 6\n    [1] => 5\n    [2] => 3\n\
    \    [3] => 1\n)\nArray\n(\n    [0] => 7\n    [1] => 5\n    [2] => 3\n    [3]\
    \ => 1\n)\nArray\n(\n    [0] => 11\n    [1] => 9\n    [2] => 7\n    [3] => 5\n\
    \    [4] => 3\n    [5] => 1\n)\nArray\n(\n    [0] => 15\n    [1] => 13\n    [2]\
    \ => 11\n    [3] => 9\n    [4] => 7\n    [5] => 5\n    [6] => 3\n    [7] => 1\n\
    )\nArray\n(\n    [0] => 20\n    [1] => 19\n    [2] => 17\n    [3] => 15\n    [4]\
    \ => 13\n    [5] => 11\n    [6] => 9\n    [7] => 7\n    [8] => 5\n    [9] => 3\n\
    \    [10] => 1\n)\nArray\n(\n    [0] => 35\n    [1] => 33\n    [2] => 31\n   \
    \ [3] => 29\n    [4] => 27\n    [5] => 25\n    [6] => 23\n    [7] => 21\n    [8]\
    \ => 19\n    [9] => 17\n    [10] => 15\n    [11] => 13\n    [12] => 11\n    [13]\
    \ => 9\n    [14] => 7\n    [15] => 5\n    [16] => 3\n    [17] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp2ei_m_xj.php:37\nStack trace:\n\
    #0 /tmp/tmp2ei_m_xj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2ei_m_xj.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $res = [$n];\n  while ($n > 0) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n    $res[]\
    \ = $n;\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp8bca61xz.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) {\n        return;\n    }\n\n    $pile = [$n];\n    while ($n\
    \ > 1) {\n        $n -= 1;\n        $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n    \
    \    $pile[] = $n;\n    }\n\n    return $pile;\n}\n\n$pile = make_a_pile(3);\n\
    echo implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(4);\necho implode(',\
    \ ', $pile), PHP_EOL;\n\n$pile = make_a_pile(5);\necho implode(', ', $pile), PHP_EOL;\n\
    \n$pile = make_a_pile(6);\necho implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(7);\n\
    echo implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(8);\necho implode(',\
    \ ', $pile), PHP_EOL;\n\n$pile = make_a_pile(9);\necho implode(', ', $pile), PHP_EOL;\n\
    \n$pile = make_a_pile(10);\necho implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(11);\n\
    echo implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(12);\necho implode(',\
    \ ', $pile), PHP_EOL;\n\n$pile = make_a_pile(13);\necho implode(', ', $pile),\
    \ PHP_EOL;\n\n$pile = make_a_pile(14);\necho implode(', ', $pile), PHP_EOL;\n\n\
    $pile = make_a_pile(15);\necho implode(', ', $pile), PHP_EOL;\n\n$pile = make_a_pile(16);\n\
    echo implode(', ', $\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzyb5fo24.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $output = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $output[] = $n + $i;\n        } else {\n            $output[]\
    \ = $n + $i + 1;\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt2dqp3u.php:29\n\
    Stack trace:\n#0 /tmp/tmpnt2dqp3u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnt2dqp3u.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\necho implode(',\
    \ ', make_a_pile(3)) . PHP_EOL;\necho implode(', ', make_a_pile(10)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(15)) . PHP_EOL;\necho implode(', ', make_a_pile(19))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(25)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(30)) . PHP_EOL;\necho implode(', ', make_a_pile(33)) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpll06kcmd.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  while ($n > 0) {\n    $result[] = $n;\n    $n = $n % 2 ==\
    \ 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp3_mf5c1j.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $list = [$n];\n  for ($i = 1; $i < $n; $i++) {\n    $list[] = $list[$i - 1]\
    \ + ($list[$i - 1] % 2 == 0 ? 2 : 1);\n  }\n  return $list;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46fduklp.php:24\n\
    Stack trace:\n#0 /tmp/tmp46fduklp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp46fduklp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [];\n  $levels[] = $n;\n  while ($n > 1) {\n    $n = ($n % 2) ? $n\
    \ + 2 : $n + 1;\n    $levels[] = $n;\n  }\n  return $levels;\n}\n\necho \"make_a_pile(1):\
    \ \";\necho json_encode(make_a_pile(1));\necho \"\\n\";\n\necho \"make_a_pile(2):\
    \ \";\necho json_encode(make_a_pile(2));\necho \"\\n\";\n\necho \"make_a_pile(3):\
    \ \";\necho json_encode(make_a_pile(3));\necho \"\\n\";\n\necho \"make_a_pile(8):\
    \ \";\necho json_encode(make_a_pile(8));\necho \"\\n\";\n\necho \"make_a_pile(20):\
    \ \";\necho json_encode(make_a_pile(20));\necho \"\\n\";\n\necho \"make_a_pile(100):\
    \ \";\necho json_encode(make_a_pile(100));\necho \"\\n\";\n\necho \"make_a_pile(200):\
    \ \";\necho json_encode(make_a_pile(200));\necho \"\\n\";\n\necho \"make_a_pile(201):\
    \ \";\necho json_encode(make_a_pile(201));\necho \"\\n\";\n\necho \"make_a_pile(2000):\
    \ \";\necho json_encode(make_a_pile(2000));\necho \"\\n\";\n\necho \"make_a_pile(10000):\
    \ \";\necho json_encode(make_a_pile(10000));\necho \"\\n\";\n\necho \"make_a_pile(100000):\
    \ \";\necho json_encode(make_a_pile(100000));\necho \"\\n\";\n\necho \"make_a_pile(1000000):\
    \ \";\necho json_encode(make_a_pile(1000000));\necho \"\\n\";\n\necho \"make_a_pile(\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnihgnywf.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $ans = [];\n  while ($n > 0) {\n    $ans[] = $n;\n    $n = ($n % 2 == 0) ?\
    \ $n - 1 : $n - 2;\n  }\n  return $ans;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90kh4j27.php:26\n\
    Stack trace:\n#0 /tmp/tmp90kh4j27.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp90kh4j27.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $a = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        $a[] = $a[$i - 1]\
    \ + (($a[$i - 1] % 2) ? 2 : 1);\n    }\n    return $a;\n}\necho implode(', ',\
    \ make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(10))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 5, 7\n4, 5, 7, 9\n5, 7, 9, 11, 13\n10, 11, 13, 15, 17, 19, 21, 23, 25,\
    \ 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfb_88zw.php:29\n\
    Stack trace:\n#0 /tmp/tmpsfb_88zw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsfb_88zw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) {\n        return [0];\n    }\n\n    $level = $n;\n    $pile\
    \ = [$level];\n    while ($level > 1) {\n        $level--;\n        $next_level\
    \ = $level % 2 === 0 ? $level + 2 : $level + 1;\n        $pile[] = $next_level;\n\
    \    }\n\n    return $pile;\n}\n\n$test_cases = [\n    [[], [0]],\n    [[-1],\
    \ [0]],\n    [[1], [1]],\n    [[3], [3, 5, 7]],\n    [[5], [5, 7, 9, 11, 13]],\n\
    \    [[10], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]],\n];\n\nforeach ($test_cases\
    \ as [$n, $expected]) {\n    $result = make_a_pile($n);\n    if ($result == $expected)\
    \ {\n        echo \"\u2705 {$n}<br>\";\n    } else {\n        echo \"\U0001F534\
    \ {$n}<br>\";\n        echo \"<i>Expected <b>{$expected}</b>, but got <b>{$result}</b></i><br>\"\
    ;\n    }\n    echo '<hr>';\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmprrxqo9pg.php:21\n\
    Stack trace:\n#0 /tmp/tmprrxqo9pg.php(38): make_a_pile(Array)\n#1 {main}\n  thrown\
    \ in /tmp/tmprrxqo9pg.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n < 0) {\n        return -1;\n    }\n    $r = [];\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $r[] = $n;\n        $n += $n % 2 ? 2 : 1;\n    }\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpju5re0ya.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n/2;\n\
    \    } else {\n      $n = ($n+1)/2;\n    }\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n\n$ip = array(3, 1, 7, 22, 10);\nforeach ($ip as $n) {\n  echo\
    \ \"make_a_pile($n) = \";\n  echo implode(', ', make_a_pile($n)) . \"\\n\";\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "make_a_pile(3) = 3, 2, 1\nmake_a_pile(1) = 1\nmake_a_pile(7) = 7, 4, 2,\
    \ 1\nmake_a_pile(22) = 22, 11, 6, 3, 2, 1\nmake_a_pile(10) = 10, 5, 3, 2, 1\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpa67i5q6o.php:35\nStack\
    \ trace:\n#0 /tmp/tmpa67i5q6o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa67i5q6o.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  //base case\n  if ($n === 1) {\n    return [1];\n  }\n  $next_level = ($n %\
    \ 2 === 0) ? $n + 2 : $n + 1;\n  return array_merge([$n], make_a_pile($next_level));\n\
    }\necho \"make_a_pile(4) => \";\nprint_r(make_a_pile(4));\necho \"make_a_pile(5)\
    \ => \";\nprint_r(make_a_pile(5));\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "make_a_pile(4) => \nFatal error: Allowed memory size of 134217728 bytes\
    \ exhausted (tried to allocate 262144 bytes) in /tmp/tmpmzrufccn.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    if ($n <= 0) {\n        return $result;\n    }\n\n   \
    \ $result[] = $n;\n    $currentLevel = $n;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($currentLevel % 2 == 0) {\n            $currentLevel++;\n       \
    \ } else {\n            $currentLevel += 2;\n        }\n        $result[] = $currentLevel;\n\
    \    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38w7s82v.php:38\n\
    Stack trace:\n#0 /tmp/tmp38w7s82v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp38w7s82v.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) return [];\n    $pile = [$n];\n    while ($n > 1) {\n      \
    \  $n -= 1;\n        $n = ($n % 2 === 0) ? $n + 1 : $n + 2;\n        $pile[] =\
    \ $n;\n    }\n    return $pile;\n}\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpvkya1abf.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while($n > 0) {\n        if($n %\
    \ 2 == 0) {\n            $n = $n - 1;\n        } else {\n            $n = $n -\
    \ 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\necho\
    \ implode(\" \", make_a_pile(12)) . \"\\n\";\necho implode(\" \", make_a_pile(9))\
    \ . \"\\n\";\necho implode(\" \", make_a_pile(6)) . \"\\n\";\necho implode(\"\
    \ \", make_a_pile(3)) . \"\\n\";\necho implode(\" \", make_a_pile(0)) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "12 11 9 7 5 3 1 -1\n9 7 5 3 1 -1\n6 5 3 1 -1\n3 1 -1\n0\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3iomzcu7.php:36\nStack trace:\n\
    #0 /tmp/tmp3iomzcu7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3iomzcu7.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $i = 1;\n    while ($n > 0) {\n        $pile[] = $n;\n \
    \       $n -= $i;\n        $i++;\n    }\n    return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gcy18kc.php:27\n\
    Stack trace:\n#0 /tmp/tmp2gcy18kc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2gcy18kc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$list = [];\n\t$list[] = $n;\n\t$new_level = 0;\n\tfor ($i = 0; $i < ($n - 1);\
    \ $i++) {\n\t\tif ($n % 2 === 0) {\n\t\t\t$new_level = $n + 2;\n\t\t} else {\n\
    \t\t\t$new_level = $n + 1;\n\t\t}\n\t\t$list[] = $new_level;\n\t\t$n = $new_level;\n\
    \t}\n\treturn $list;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpeq1v82xb.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo3c6f2s.php:20\n\
    Stack trace:\n#0 /tmp/tmpgo3c6f2s.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgo3c6f2s.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [];\n  for ($i = 0; $i < $n; $i++) {\n    $levels[] = $n;\n    $n\
    \ += $n % 2 === 0 ? 2 : 1;\n  }\n  return $levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp9fsle05h.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    if ($n <= 0) {\n        return null;\n    }\n    $pile = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $pile[] = $n + 2 * $i;\n    }\n    return $pile;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stack = [];\n  $n_odd = $n;\n  $n_even = $n;\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    if ($n_odd % 2 == 1) {\n      $stack[] = $n_odd;\n      $n_odd += 2;\n\
    \    } else {\n      $stack[] = $n_even;\n      $n_even += 2;\n    }\n  }\n  return\
    \ $stack;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $pile[] = $n;\n    }\n    return $pile;\n}\nprint_r(make_a_pile(3));\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzvrnhemx.php:31\nStack trace:\n#0 /tmp/tmpzvrnhemx.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzvrnhemx.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $current = $n;\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $current;\n    if ($current % 2 === 0) {\n      $current += 2;\n    } else\
    \ {\n      $current += 1;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2b6qniq.php:31\n\
    Stack trace:\n#0 /tmp/tmpy2b6qniq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy2b6qniq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n === 1) {\n    return [1];\n  }\n  $first_num = $n;\n  $second_num =\
    \ $n % 2 === 0 ? $n + 2 : $n + 1;\n  $stones = [$first_num, $second_num];\n  $next_num\
    \ = $second_num + 2;\n  while ($next_num <= 2 * $n) {\n    $stones[] = $next_num;\n\
    \    $next_num += 2;\n  }\n  return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg634b8qz.php:32\n\
    Stack trace:\n#0 /tmp/tmpg634b8qz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg634b8qz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [];\n  while ($n > 0) {\n    $stones[] = $n;\n    $n = $n % 2 ==\
    \ 0 ? $n + 2 : $n + 1;\n  }\n  return $stones;\n}\necho implode(', ', make_a_pile(3)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(4)), PHP_EOL;\necho implode(', ', make_a_pile(5)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(6)), PHP_EOL;\necho implode(', ', make_a_pile(7)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(8)), PHP_EOL;\necho implode(', ', make_a_pile(13)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(23)), PHP_EOL;\necho implode(', ',\
    \ make_a_pile(24)), PHP_EOL;\necho implode(', ', make_a_pile(25)), PHP_EOL;\n\
    echo implode(', ', make_a_pile(26)), PHP_EOL;\necho implode(', ', make_a_pile(27)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(28)), PHP_EOL;\necho implode(', ',\
    \ make_a_pile(33)), PHP_EOL;\necho implode(', ', make_a_pile(43)), PHP_EOL;\n\
    echo implode(', ', make_a_pile(44)), PHP_EOL;\necho implode(', ', make_a_pile(45)),\
    \ PHP_EOL;\necho implode(', ', make_a_pile(46)), PHP_EOL;\necho implode(', ',\
    \ make_a_pile(47)), PHP_EOL;\necho implode(', ', make_a_pile(48)), PHP_EOL;\n\
    echo implode(', ', make_a_pile(53)), PHP_EOL;\necho implode(', ', make_a_pile(\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt34h60qw.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $stones[] = $n;\n    }\n    return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp5iyd5nmi.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$arr=[];\n\tfor($i=0;$i<$n;$i++){\n\t\t$arr[]=$n;\n\t\tif($n%2==0){\n\t\t\t\
    $n=$n+2;\n\t\t}else{\n\t\t\t$n=$n+1;\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpm4jpdzt7.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    for ($i = 1; $i < $n; $i++) {\n        $next_level =\
    \ $result[$i - 1] + 2;\n        array_push($result, $next_level);\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    $cur = $n;\n    while ($cur > 1) {\n        if ($cur\
    \ % 2 == 0) {\n            $cur = $cur / 2;\n        } else {\n            $cur\
    \ = ($cur + 1) / 2;\n        }\n        $result[] = 2 * $cur - 1;\n    }\n   \
    \ return $result;\n}\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3, 3, 1\n4, 3, 1\n5, 5, 3, 1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxtvvjfxi.php:33\nStack trace:\n#0 /tmp/tmpxtvvjfxi.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxtvvjfxi.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    while ($n > 0) {\n        $pile[] = $n;\n        $n = ($n\
    \ % 2) ? $n + 2 : $n + 1;\n    }\n    return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpjrlslmkm.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    $result[] = (2 * $n)\
    \ + 1;\n  }\n  return $result;\n}\n$cases = [\n  [3, [3, 5, 7]],\n  [1, [1]],\n\
    \  [5, [5, 9, 13, 17, 21]],\n  [6, [6, 10, 14, 18, 22, 26]],\n  [7, [7, 11, 15,\
    \ 19, 23, 27, 31]],\n  [9, [9, 13, 17, 21, 25, 29, 33, 37, 41]],\n  [10, [10,\
    \ 14, 18, 22, 26, 30, 34, 38, 42, 46]],\n  [14, [14, 18, 22, 26, 30, 34, 38, 42,\
    \ 46, 50, 54, 58, 62, 66]],\n  [15, [15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55,\
    \ 59, 63, 67, 71]],\n  [20, [20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68,\
    \ 72, 76, 80, 84, 88, 92, 96]],\n  [21, [21, 25, 29, 33, 37, 41, 45, 49, 53, 57,\
    \ 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101]],\n  [26, [26, 30, 34, 38, 42,\
    \ 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114,\
    \ 118, 122, 126]],\n  [27, [27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75,\
    \ 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 131]],\n \nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsiye5gil.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n \
    \           $res[] = $n;\n        } else {\n            $res[] = $res[$i - 1]\
    \ + ($res[$i - 1] % 2 == 0 ? 2 : 1);\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4wz08yu.php:29\n\
    Stack trace:\n#0 /tmp/tmpw4wz08yu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw4wz08yu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $previous_value = $n;\n  $result[] = $previous_value;\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    if ($previous_value % 2 === 0) {\n      $previous_value\
    \ += 2;\n    } else {\n      $previous_value += 1;\n    }\n    $result[] = $previous_value;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphi88jn9x.php:32\n\
    Stack trace:\n#0 /tmp/tmphi88jn9x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphi88jn9x.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stone_list = [$n];\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n \
    \           $n++;\n        } else {\n            $n--;\n        }\n        array_push($stone_list,\
    \ $n);\n    }\n    return $stone_list;\n}\nfunction candidate(...$args) {\n  \
    \  return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpdw8sxac1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $output = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 === 0) ? $n - 1 : $n\
    \ - 2;\n    $output[] = $n;\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkaghh5dv.php:26\n\
    Stack trace:\n#0 /tmp/tmpkaghh5dv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkaghh5dv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $arr = [];\n  $arr[] = $n;\n  while ($n > 0) {\n    if ($n % 2 === 0) {\n \
    \     $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $arr[]\
    \ = ($n % 2 === 0) ? $n + 1 : $n + 2;\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpmwgqq4m7.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $out = [];\n  for ($i = 0; $i < $n; $i++) {\n    $out[] = ($i + 1) * 2 + ($i\
    \ % 2) - 1;\n  }\n  return $out;\n}\necho implode(', ', make_a_pile(10)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 4, 5, 8, 9, 12, 13, 16, 17, 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptsp1o5es.php:25\nStack trace:\n#0 /tmp/tmptsp1o5es.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptsp1o5es.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $temp = $n;\n  while ($temp > 0) {\n    $result[] = $temp;\n\
    \    $temp -= 2;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppb3ax0hz.php:26\n\
    Stack trace:\n#0 /tmp/tmppb3ax0hz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppb3ax0hz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $num = $n;\n  $num2 = $n;\n  $l = [$n];\n  for ($i = 0; $i < $n - 1; $i++)\
    \ {\n    if ($num % 2 == 0) {\n      $num += 2;\n      $l[] = $num;\n    } else\
    \ {\n      $num2 += 2;\n      $l[] = $num2;\n    }\n  }\n  return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $i = 1;\n    while ($n > 0) {\n        $result[] = $n;\n\
    \        $n = ($n % 2 == 0) ? $n - $i : $n + $i;\n        $i += 2;\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp638p7hl6.php:27\n\
    Stack trace:\n#0 /tmp/tmp638p7hl6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp638p7hl6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [$n];\n\t$start = $n;\n\t$next = ($n % 2) ? $n + 2 : $n + 1;\n\twhile\
    \ ($next <= $start * 2) {\n\t\t$result[] = $next;\n\t\t$next = ($next % 2) ? $next\
    \ + 2 : $next + 1;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0b3ug0e1.php:27\n\
    Stack trace:\n#0 /tmp/tmp0b3ug0e1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0b3ug0e1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n >= 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yeqrdtd.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yeqrdtd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7yeqrdtd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $arr = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n\
    \    } else {\n      $n = ($n + 1) / 2;\n    }\n    array_push($arr, $n);\n  }\n\
    \  return $arr;\n}\necho \"3, 5, 7\";\nprint_r(make_a_pile(3));\necho \"\\n<br\
    \ />\";\necho \"4, 6, 10, 14\";\nprint_r(make_a_pile(4));\necho \"\\n<br />\"\
    ;\necho \"1, 1\";\nprint_r(make_a_pile(1));\necho \"\\n<br />\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3, 5, 7Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\n\n<br />4,\
    \ 6, 10, 14Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n)\n\n<br />1, 1Array\n\
    (\n    [0] => 1\n)\n\n<br />\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpuyc43y77.php:38\nStack trace:\n#0 /tmp/tmpuyc43y77.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpuyc43y77.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        $res[] = $n + $i *\
    \ 2;\n    }\n    return $res;\n}\necho make_a_pile(3), \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [];\n  for ($i = 0; $i < $n; $i++) {\n    $pile[] = 2 * $i + $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if($n === 1) {\n    return [1];\n  }\n  $current = 1;\n  $prev = make_a_pile($n\
    \ - 1);\n  if(is_even($n)) {\n    $current = last($prev) + 2;\n  } else {\n  \
    \  $current = last($prev) + 1;\n  }\n  return push($prev, $current);\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_even() in\
    \ /tmp/tmp9rsptr7_.php:18\nStack trace:\n#0 /tmp/tmp9rsptr7_.php(17): make_a_pile(2)\n\
    #1 /tmp/tmp9rsptr7_.php(26): make_a_pile(3)\n#2 /tmp/tmp9rsptr7_.php(30): candidate(3)\n\
    #3 /tmp/tmp9rsptr7_.php(37): test()\n#4 {main}\n  thrown in /tmp/tmp9rsptr7_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n < 1) return false;\n  $pile = [];\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $pile[] = ($i % 2 === 0) ? $i + 1 : $i + 2;\n  }\n  return $pile;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xbm9a4b.php:25\n\
    Stack trace:\n#0 /tmp/tmp9xbm9a4b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9xbm9a4b.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $ret = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n        \
    \    $n -= 1;\n        } else {\n            $n -= 2;\n        }\n        $ret[]\
    \ = $n;\n    }\n    return $ret;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(2));\n\
    print_r(make_a_pile(1));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r(make_a_pile(33));\nprint_r(make_a_pile(34));\nprint_r(make_\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw253akix.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if($n == 1) return [1];\n  $result = [];\n  while($n > 0) {\n    $result[]\
    \ = $n;\n    $n += $n % 2 == 0 ? 2 : 1;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp4q3l_gum.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $next_level = $i\
    \ === 0 ? $n : $pile[$i - 1] + 2;\n        array_push($pile, $next_level);\n \
    \   }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [];\n  $pile[] = $n;\n  while ($n > 0) {\n    $n = ($n % 2 == 0) ?\
    \ $n / 2 : $n + 1;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmphg8bs0qy.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    while ($n > 0) {\n        $pile[] = $n;\n        $n = ($n\
    \ % 2) ? $n + 2 : $n + 1;\n    }\n    return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp_s450ga6.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  if ($n < 0) {\n    return null;\n  }\n\n  $pile = [$n];\n  while ($n != 1)\
    \ {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n\
    \ - 1) / 2;\n    }\n    array_push($pile, $n);\n  }\n  return $pile;\n}\n\n$ans\
    \ = make_a_pile(10);\nvar_dump($ans);\n$ans = make_a_pile(3);\nvar_dump($ans);\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(10)\n  [1]=>\n  int(5)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(1)\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxansmn3m.php:38\nStack\
    \ trace:\n#0 /tmp/tmpxansmn3m.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxansmn3m.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $levels = [];\n  for ($i = 0; $i < $n; $i++) {\n    $levels[] = ($i + 1) *\
    \ 2 + 1;\n  }\n  return $levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2nfrurr.php:26\n\
    Stack trace:\n#0 /tmp/tmpq2nfrurr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq2nfrurr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $stones = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $stones[] = $n;\n        } else {\n            $stones[] = $stones[$i\
    \ - 1] + ($stones[$i - 1] % 2 == 0 ? 2 : 1);\n        }\n    }\n    return $stones;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdf4wp47.php:29\n\
    Stack trace:\n#0 /tmp/tmpgdf4wp47.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgdf4wp47.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [];\n  for ($i = 0; $i < $n; $i++) {\n    $pile[] = $n + ($i + 1) *\
    \ 2;\n  }\n  return $pile;\n}\necho make_a_pile(3) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc14j5yld.php:25\n\
    Stack trace:\n#0 /tmp/tmpc14j5yld.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc14j5yld.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    $pile[] = $n;\n    while ($n > 0) {\n        $n = $n % 2\
    \ == 0 ? $n / 2 : ($n + 1) / 2;\n        $pile[] = $n;\n    }\n    $pile = array_reverse($pile);\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpup_jhid7.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  if ($n < 3) return $pile;\n  $pile[] = $n % 2 ? $n + 2 : $n\
    \ + 1;\n  $i = 3;\n  while ($pile[$i - 1] + 2 < $n) {\n    $pile[] = $pile[$i\
    \ - 1] + 2;\n    $i++;\n  }\n  return $pile;\n}\n\nvar_dump(make_a_pile(3)); //\
    \ [3, 5, 7]\nvar_dump(make_a_pile(7)); // [7, 9, 11, 13, 15, 17, 19]\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpzf5hikbh.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n + 1;\n \
    \   $pile[] = $n;\n  }\n  return $pile;\n}\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmppkoc9sdm.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \t$result = [];\n\t$stones = $n;\n\t$result[] = $stones;\n\twhile ($stones > 1)\
    \ {\n\t\tif ($stones % 2 == 0) {\n\t\t\t$stones = $stones - 1;\n\t\t} else {\n\
    \t\t\t$stones = $stones - 2;\n\t\t}\n\t\t$result[] = $stones;\n\t}\n\treturn $result;\n\
    }\necho \"make_a_pile(3)\\n\";\nvar_dump(make_a_pile(3));\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "make_a_pile(3)\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(1)\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8y7lryg6.php:33\nStack\
    \ trace:\n#0 /tmp/tmp8y7lryg6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8y7lryg6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $res = [$n];\n    while ($n != 1) {\n        if ($n % 2) {\n            $n\
    \ = $n + 2;\n        } else {\n            $n = $n + 1;\n        }\n        $res[]\
    \ = $n;\n    }\n    return $res;\n}\n\necho \"<pre>make_a_pile(2)\\r\\n\";\nprint_r(make_a_pile(2));\n\
    echo \"</pre>\";\n\necho \"<pre>make_a_pile(7)\\r\\n\";\nprint_r(make_a_pile(7));\n\
    echo \"</pre>\";\n\necho \"<pre>make_a_pile(20)\\r\\n\";\nprint_r(make_a_pile(20));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>make_a_pile(2)\n\nFatal error: Allowed memory size of 134217728 bytes\
    \ exhausted (tried to allocate 134217736 bytes) in /tmp/tmp_a08j8wu.php on line\
    \ 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
