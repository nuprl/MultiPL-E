name: HumanEval_158_find_max
language: php
results:
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // TODO: Implement this function\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_tkcjma.php:18\n\
    Stack trace:\n#0 /tmp/tmpm_tkcjma.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm_tkcjma.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word = \"\";\n    $max_char = 0;\n    foreach\
    \ ($words as $value) {\n        $char = count_chars($value, 3);\n        if (strlen($char)\
    \ > $max_char) {\n            $max_char = strlen($char);\n            $word =\
    \ $value;\n        }\n    }\n    return $word;\n}\necho find_max([\"name\", \"\
    of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"game\"]) .\
    \ PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7qii9o67.php:31\nStack trace:\n#0 /tmp/tmp7qii9o67.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7qii9o67.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $current_max = 0;\n    $current_word = null;\n\
    \    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        if (count($unique_chars) > $current_max) {\n            $current_max\
    \ = count($unique_chars);\n            $current_word = $word;\n        }\n   \
    \ }\n    return $current_word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4c5a1qk.php:27\n\
    Stack trace:\n#0 /tmp/tmpu4c5a1qk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu4c5a1qk.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_len = 0;\n    $max_word = \"\";\n    foreach\
    \ ($words as $word) {\n        $cur_len = strlen(uniq_chars($word));\n       \
    \ if ($cur_len > $max_len) {\n            $max_len = $cur_len;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function uniq_chars()\
    \ in /tmp/tmpda7c0xg2.php:13\nStack trace:\n#0 /tmp/tmpda7c0xg2.php(23): find_max(Array)\n\
    #1 /tmp/tmpda7c0xg2.php(27): candidate(Array)\n#2 /tmp/tmpda7c0xg2.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpda7c0xg2.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = array();\n\t$count_max = 0;\n\t$count_max_index\
    \ = array();\n\tforeach ($words as $i => $word) {\n\t\t$count = count_unique_chars($word);\n\
    \t\tif ($count > $count_max) {\n\t\t\t$count_max = $count;\n\t\t\t$count_max_index\
    \ = array($i);\n\t\t} else if ($count == $count_max) {\n\t\t\t$count_max_index[]\
    \ = $i;\n\t\t}\n\t}\n\tif (count($count_max_index) == 1) {\n\t\treturn $words[$count_max_index[0]];\n\
    \t} else {\n\t\tforeach ($count_max_index as $i) {\n\t\t\t$max[] = $words[$i];\n\
    \t\t}\n\t\treturn lexicographical_first($max);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpw8yn7rqz.php:14\nStack trace:\n#0 /tmp/tmpw8yn7rqz.php(32): find_max(Array)\n\
    #1 /tmp/tmpw8yn7rqz.php(36): candidate(Array)\n#2 /tmp/tmpw8yn7rqz.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw8yn7rqz.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = '';\n    foreach ($words as $word) {\n\
    \        if (unique_characters($word) > unique_characters($max)) {\n         \
    \   $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_characters()\
    \ in /tmp/tmp9qi7lon5.php:12\nStack trace:\n#0 /tmp/tmp9qi7lon5.php(20): find_max(Array)\n\
    #1 /tmp/tmp9qi7lon5.php(24): candidate(Array)\n#2 /tmp/tmp9qi7lon5.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9qi7lon5.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$curr_max = \"\";\n\t$curr_max_len = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$unique_chars = array_unique(str_split($word));\n\t\
    \t$unique_len = count($unique_chars);\n\t\tif ($unique_len > $curr_max_len) {\n\
    \t\t\t$curr_max = $word;\n\t\t\t$curr_max_len = $unique_len;\n\t\t}\n\t}\n\treturn\
    \ $curr_max;\n}\n\n$words = [\"enam\", \"name\", \"game\"];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "enam\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3ljjtn8.php:31\n\
    Stack trace:\n#0 /tmp/tmp_3ljjtn8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_3ljjtn8.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = \"\";\n\t$wordLength = 0;\n\t$previousWordLength\
    \ = 0;\n\tforeach ($words as $word) {\n\t\t$wordLength = strlen(array_unique(str_split($word)));\n\
    \t\tif ($wordLength > $previousWordLength) {\n\t\t\t$max = $word;\n\t\t\t$previousWordLength\
    \ = $wordLength;\n\t\t}\n\t}\n\treturn $max;\n}\n\necho find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpsxgkekua.php\
    \ on line 14\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpsxgkekua.php on line 14\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpsxgkekua.php on line 14\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmpsxgkekua.php on line\
    \ 14\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpsxgkekua.php\
    \ on line 14\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpsxgkekua.php on line 14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpsxgkekua.php:29\nStack trace:\n#0 /tmp/tmpsxgkekua.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsxgkekua.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_len = 0;\n  $max_str = \"\";\n  foreach\
    \ ($words as $word) {\n    $len = strlen(implode(array_unique(str_split($word))));\n\
    \    if ($len > $max_len) {\n      $max_len = $len;\n      $max_str = $word;\n\
    \    }\n  }\n  return $max_str;\n}\nprint_r(find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]));\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd928mv91.php:28\n\
    Stack trace:\n#0 /tmp/tmpd928mv91.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd928mv91.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$word = '';\n\t$arr = [];\n\tforeach ($words\
    \ as $key => $value) {\n\t\t$arr[$key] = str_split($value);\n\t\t$arr[$key] =\
    \ array_unique($arr[$key]);\n\t\t$arr[$key] = count($arr[$key]);\n\t}\n\t$max\
    \ = max($arr);\n\t$index = array_search($max, $arr);\n\t$word = $words[$index];\n\
    \treturn $word;\n}\necho find_max([\"name\", \"of\", \"string\"]).\"\\n\";\necho\
    \ find_max([\"name\", \"enam\", \"game\"]).\"\\n\";\necho find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]).\"\\n\";\necho find_max([\"b\", \"a\" ,\"cc\"]).\"\\n\";\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\nb\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvnbwdkud.php:32\nStack trace:\n#0 /tmp/tmpvnbwdkud.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvnbwdkud.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $res = '';\n  foreach ($words as\
    \ $word) {\n    $count = count_chars($word, 3);\n    if ($count > $max) {\n  \
    \    $max = $count;\n      $res = $word;\n    }\n  }\n  return $res;\n}\n\necho\
    \ find_max([\"name\", \"of\", \"string\"]) . \"\\n\"; //string\necho find_max([\"\
    name\", \"enam\", \"game\"]) . \"\\n\"; //enam\necho find_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\"]) . \"\\n\"; //aaaaaaa\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v_b8q6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp6v_b8q6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6v_b8q6b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = \"\";\n    $max_count = 0;\n  \
    \  foreach ($words as $word) {\n        $count = 0;\n        $chars = [];\n  \
    \      for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $chars)) {\n                $chars[] = $word[$i];\n                $count++;\n\
    \            }\n        }\n        if ($count > $max_count) {\n            $max_count\
    \ = $count;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }\necho find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"\
    name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwxpyfx0y.php:37\nStack trace:\n#0 /tmp/tmpwxpyfx0y.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwxpyfx0y.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $w) {\n    $l = array_unique(str_split($w));\n    if (count($l) > $max) {\n\
    \      $max = count($l);\n      $result = $w;\n    }\n  }\n  return $result;\n\
    }\necho find_max([\"name\", \"of\", \"string\"]);\necho \"\\n\";\necho find_max([\"\
    name\", \"enam\", \"game\"]);\necho \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpfmuwr7h3.php:32\nStack trace:\n#0 /tmp/tmpfmuwr7h3.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfmuwr7h3.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $map = array();\n    foreach ($words as $word)\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n \
    \           if (!in_array($word[$i], $map)) {\n                $count++;\n   \
    \             $map[] = $word[$i];\n            }\n        }\n        $map = array();\n\
    \        $res[$word] = $count;\n    }\n    arsort($res);\n    return array_keys($res)[0];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzg8wsh6v.php:32\n\
    Stack trace:\n#0 /tmp/tmpzg8wsh6v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzg8wsh6v.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // First, I need to create an array that stores\
    \ all of the unique chars\n  // in each word.\n  $unique_chars = [];\n  foreach\
    \ ($words as $word) {\n    $unique_chars[] = count_unique_chars($word);\n  }\n\
    \  // We now have an array of the number of unique chars in each word.\n  // We\
    \ want to find the word with the most unique chars.\n  $max_number_of_unique_chars\
    \ = 0;\n  foreach ($unique_chars as $number_of_unique_chars) {\n    if ($number_of_unique_chars\
    \ > $max_number_of_unique_chars) {\n      $max_number_of_unique_chars = $number_of_unique_chars;\n\
    \    }\n  }\n  // We can now use this number to find all of the words in $words\
    \ that\n  // have this number of unique chars.\n  $words_with_most_unique_chars\
    \ = [];\n  foreach ($unique_chars as $index => $number_of_unique_chars) {\n  \
    \  if ($number_of_unique_chars == $max_number_of_unique_chars) {\n      $words_with_most_unique_chars[]\
    \ = $words[$index];\n    }\n  }\n  // Now we want to return the word that appears\
    \ first in lexicographical\n  // order.\n  sort($words_with_most_unique_chars);\n\
    \  return $words_with_most_unique_chars[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmmqie8sr.php:14\nStack trace:\n#0 /tmp/tmpmmqie8sr.php(39): find_max(Array)\n\
    #1 /tmp/tmpmmqie8sr.php(43): candidate(Array)\n#2 /tmp/tmpmmqie8sr.php(55): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmmqie8sr.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$maxWord = \"\";\n\t$maxLetter = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$count = count_unique_letters($word);\n\t\tif ($count\
    \ > $maxLetter) {\n\t\t\t$maxLetter = $count;\n\t\t\t$maxWord = $word;\n\t\t}\n\
    \t}\n\treturn $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_letters()\
    \ in /tmp/tmpdq10okbv.php:13\nStack trace:\n#0 /tmp/tmpdq10okbv.php(23): find_max(Array)\n\
    #1 /tmp/tmpdq10okbv.php(27): candidate(Array)\n#2 /tmp/tmpdq10okbv.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdq10okbv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_length = 0;\n    $temp_word = null;\n\
    \    foreach ($words as $word) {\n        $letters = array_unique(str_split($word));\n\
    \        $length = count($letters);\n        if ($length > $max_length) {\n  \
    \          $max_length = $length;\n            $temp_word = $word;\n        }\n\
    \    }\n    return $temp_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiybw2dc1.php:29\n\
    Stack trace:\n#0 /tmp/tmpiybw2dc1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiybw2dc1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $highest_word = $words[0];\n    $high_word_char_count\
    \ = 0;\n    $high_word_char_set = [];\n    foreach ($words as $word) {\n     \
    \   $char_set = [];\n        for ($i = 0; $i < strlen($word); $i++) {\n      \
    \      if (!in_array($word[$i], $char_set)) {\n                $char_set[] = $word[$i];\n\
    \            }\n        }\n        if (count($char_set) > $high_word_char_count)\
    \ {\n            $high_word_char_count = count($char_set);\n            $high_word_char_set\
    \ = $char_set;\n            $highest_word = $word;\n        }\n    }\n    return\
    \ $highest_word;\n}\n\n$word_list = [\n    \"name\",\n    \"of\",\n    \"string\"\
    \n];\n$word_list2 = [\n    \"name\",\n    \"enam\",\n    \"game\"\n];\n$word_list3\
    \ = [\n    \"aaaaaaa\",\n    \"bb\",\n    \"cc\"\n];\n\necho \"max word of \"\
    \ . implode(\", \", $word_list) . \" is: \" . find_max($word_list) . \"\\n\";\n\
    echo \"max word of \" . implode(\", \", $word_list2) . \" is: \" . find_max($word_list2)\
    \ . \"\\n\";\necho \"max word of \" . implode(\", \", $word_list3) . \" is: \"\
    \ . find_max($word_list3) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "max word of name, of, string is: string\nmax word of name, enam, game is:\
    \ name\nmax word of aaaaaaa, bb, cc is: aaaaaaa\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpcfjs37mx.php:54\nStack trace:\n#0 /tmp/tmpcfjs37mx.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcfjs37mx.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word_with_most_characters = '';\n    $max_characters\
    \ = 0;\n    foreach ($words as $word) {\n        $current_characters = count_unique_characters($word);\n\
    \        if ($current_characters > $max_characters) {\n            $max_characters\
    \ = $current_characters;\n            $word_with_most_characters = $word;\n  \
    \      }\n    }\n    return $word_with_most_characters;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpgy6utudt.php:13\nStack trace:\n#0 /tmp/tmpgy6utudt.php(22): find_max(Array)\n\
    #1 /tmp/tmpgy6utudt.php(26): candidate(Array)\n#2 /tmp/tmpgy6utudt.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgy6utudt.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_str = '';\n    foreach\
    \ ($words as $word) {\n        $unique_chars = 0;\n        $chars = str_split($word);\n\
    \        $unique_chars = count(array_unique($chars));\n        if ($unique_chars\
    \ > $max) {\n            $max = $unique_chars;\n            $max_str = $word;\n\
    \        }\n    }\n    return $max_str;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg6coyyv.php:30\n\
    Stack trace:\n#0 /tmp/tmptg6coyyv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptg6coyyv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = \"\";\n    $max_count = 0;\n  \
    \  foreach ($words as $word) {\n        $count = count_uniques($word);\n     \
    \   if ($count > $max_count) {\n            $max_count = $count;\n           \
    \ $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_uniques()\
    \ in /tmp/tmpgcldoemy.php:13\nStack trace:\n#0 /tmp/tmpgcldoemy.php(22): find_max(Array)\n\
    #1 /tmp/tmpgcldoemy.php(26): candidate(Array)\n#2 /tmp/tmpgcldoemy.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgcldoemy.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$r = \"\";\n\t$count = 0;\n\tforeach ($words\
    \ as $word) {\n\t\t$l = count_unique_chars($word);\n\t\tif ($l > $count) {\n\t\
    \t\t$count = $l;\n\t\t\t$r = $word;\n\t\t}\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpfg28m_28.php:13\nStack trace:\n#0 /tmp/tmpfg28m_28.php(23): find_max(Array)\n\
    #1 /tmp/tmpfg28m_28.php(27): candidate(Array)\n#2 /tmp/tmpfg28m_28.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfg28m_28.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // we need to know the length of longest word\n\
    \    $longest = max(array_map('strlen', $words));\n    // we will iterate over\
    \ $words array\n    foreach ($words as $word) {\n        // if this word is longer\
    \ than longest we will set longest to current word\n        if (strlen($word)\
    \ == $longest) {\n            // we will check if this word has more unique letters\n\
    \            if (count(count_chars($word, 3)) > count(count_chars($longest, 3)))\
    \ {\n                $longest = $word;\n            }\n        }\n    }\n    return\
    \ $longest;\n}\necho find_max([\"name\", \"of\", \"string\"]);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp00daeugj.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp00daeugj.php\
    \ on line 17\n6\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp00daeugj.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp00daeugj.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00daeugj.php:30\n\
    Stack trace:\n#0 /tmp/tmp00daeugj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp00daeugj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $maxCount = 0;\n  $maxString = \"\";\n  foreach\
    \ ($words as $word) {\n    $charCount = count_chars($word, 1);\n    if ($maxCount\
    \ < count($charCount)) {\n      $maxCount = count($charCount);\n      $maxString\
    \ = $word;\n    }\n  }\n  return $maxString;\n}\n$word1 = [\"name\", \"of\", \"\
    string\"];\n$word2 = [\"name\", \"enam\", \"game\"];\n$word3 = [\"aaaaaaa\", \"\
    bb\" ,\"cc\"];\n\necho \"| \" . implode(\" \", $word1) . \" | \" . find_max($word1)\
    \ . \" |\\n\";\necho \"| \" . implode(\" \", $word2) . \" | \" . find_max($word2)\
    \ . \" |\\n\";\necho \"| \" . implode(\" \", $word3) . \" | \" . find_max($word3)\
    \ . \" |\\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "| name of string | string |\n| name enam game | name |\n| aaaaaaa bb cc\
    \ | aaaaaaa |\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaawqaxlg.php:35\n\
    Stack trace:\n#0 /tmp/tmpaawqaxlg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpaawqaxlg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\tforeach ($words as $word) {\n\t\t$lengths[] =\
    \ strlen(unique_letters($word));\n\t}\n\t$max = max($lengths);\n\t$word = $words[array_search($max,\
    \ $lengths)];\n\treturn $word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_letters()\
    \ in /tmp/tmpkml7rv14.php:11\nStack trace:\n#0 /tmp/tmpkml7rv14.php(18): find_max(Array)\n\
    #1 /tmp/tmpkml7rv14.php(22): candidate(Array)\n#2 /tmp/tmpkml7rv14.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkml7rv14.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = $words[0];\n    $max_len = 0;\n    foreach\
    \ ($words as $word) {\n        $tmp = array_unique(str_split($word));\n      \
    \  if (count($tmp) > $max_len) {\n            $max = $word;\n            $max_len\
    \ = count($tmp);\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5ganebv.php:28\n\
    Stack trace:\n#0 /tmp/tmpp5ganebv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp5ganebv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = \"\";\n    foreach ($words as $word)\
    \ {\n        if (count_chars($word, 1) > count_chars($max, 1)) {\n           \
    \ $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp73i6po7j.php:25\n\
    Stack trace:\n#0 /tmp/tmp73i6po7j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp73i6po7j.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $a=$words[0];\n    for($i=1;$i<count($words);$i++){\n\
    \    if(count(array_unique(str_split($words[$i])))>count(array_unique(str_split($a))))\n\
    \    $a=$words[$i];\n    }\n    return $a;\n}\n\n$testcase=array(\"aaaaaaa\",\
    \ \"bb\" ,\"cc\");\nprint_r(find_max($testcase));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphr0j05g.php:26\n\
    Stack trace:\n#0 /tmp/tmpphr0j05g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpphr0j05g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = \"\";\n    $max_set = [];\n    foreach\
    \ ($words as $word) {\n        $current_set = array_unique(str_split($word));\n\
    \        if (count($current_set) > count($max_set)) {\n            $max = $word;\n\
    \            $max_set = $current_set;\n        }\n    }\n    return $max;\n}\n\
    \n$words = [\"name\", \"of\", \"string\"];\necho find_max($words) . PHP_EOL;\n\
    \n$words = [\"name\", \"enam\", \"game\"];\necho find_max($words) . PHP_EOL;\n\
    \n$words = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words) . PHP_EOL;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpt50dlnx5.php:36\nStack trace:\n#0 /tmp/tmpt50dlnx5.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt50dlnx5.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvyjjmnz.php:17\n\
    Stack trace:\n#0 /tmp/tmpfvyjjmnz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfvyjjmnz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $uniqueChars = [];\n  foreach ($words as $w)\
    \ {\n    $uniqueChars[$w] = count_chars($w,1);\n  }\n  $count = max($uniqueChars);\n\
    \  $index = array_search($count, $uniqueChars);\n  return $index;\n}\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztalxxz4.php:25\n\
    Stack trace:\n#0 /tmp/tmpztalxxz4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpztalxxz4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = \"\";\n  $max_count = 0;\n  foreach\
    \ ($words as $word) {\n    $char_count = count_unique_chars($word);\n    if ($char_count\
    \ > $max_count) {\n      $max_count = $char_count;\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp13wwf_bz.php:13\nStack trace:\n#0 /tmp/tmp13wwf_bz.php(22): find_max(Array)\n\
    #1 /tmp/tmp13wwf_bz.php(26): candidate(Array)\n#2 /tmp/tmp13wwf_bz.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp13wwf_bz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = '';\n    $maxUniques = 0;\n    $words\
    \ = explode(\",\", $words);\n    $words = array_map('trim', $words);\n    foreach\
    \ ($words as $word) {\n        $uniques = count_unique_chars($word);\n       \
    \ if ($uniques > $maxUniques) {\n            $max = $word;\n            $maxUniques\
    \ = $uniques;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmphi9ks42u.php\
    \ on line 12\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmphi9ks42u.php on line 13\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmphi9ks42u.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphi9ks42u.php:29\nStack trace:\n#0 /tmp/tmphi9ks42u.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphi9ks42u.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\tforeach ($words as $word) {\n\t\t$chars = array_count_values(str_split($word));\n\
    \t\t$max_chars[$word] = count($chars);\n\t}\n\tarsort($max_chars);\n\tforeach\
    \ ($max_chars as $word => $count) {\n\t\tif ($count > 1) {\n\t\t\treturn $word;\n\
    \t\t}\n\t}\n}\necho find_max([\"name\", \"of\", \"string\"]) . PHP_EOL;\necho\
    \ find_max([\"name\", \"enam\", \"game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6in0fxj.php:30\n\
    Stack trace:\n#0 /tmp/tmpx6in0fxj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx6in0fxj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max='';\n    foreach ($words as $word) {\n\
    \        if(max_unique($word)>$max)\n            $max=$word;\n    }\n    return\
    \ $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_unique()\
    \ in /tmp/tmpiypqozxt.php:12\nStack trace:\n#0 /tmp/tmpiypqozxt.php(18): find_max(Array)\n\
    #1 /tmp/tmpiypqozxt.php(22): candidate(Array)\n#2 /tmp/tmpiypqozxt.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiypqozxt.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = $words[0];\n    foreach ($words as $word)\
    \ {\n        if (max_unique_chars($word) > max_unique_chars($max)) {\n       \
    \     $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function max_unique_chars()\
    \ in /tmp/tmpzo2qbow1.php:12\nStack trace:\n#0 /tmp/tmpzo2qbow1.php(20): find_max(Array)\n\
    #1 /tmp/tmpzo2qbow1.php(24): candidate(Array)\n#2 /tmp/tmpzo2qbow1.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzo2qbow1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_index = 0;\n  $max_length = 0;\n  foreach\
    \ ($words as $index => $word) {\n    $unique_chars = array_unique(str_split($word));\n\
    \    $unique_length = count($unique_chars);\n    if ($unique_length > $max_length)\
    \ {\n      $max_index = $index;\n      $max_length = $unique_length;\n    }\n\
    \  }\n  return $words[$max_index];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzk1w247_.php:28\n\
    Stack trace:\n#0 /tmp/tmpzk1w247_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzk1w247_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n   $word = $words[0];\n   $max = strlen(count_chars($word,\
    \ 1));\n   foreach ($words as $key => $value) {\n      $value = strlen(count_chars($value,\
    \ 1));\n      if ($value > $max) {\n         $max = $value;\n         $word =\
    \ $words[$key];\n      }\n   }\n   return $word;\n}\n\necho find_max([\"name\"\
    , \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"\
    ]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmps6jx3x6n.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmps6jx3x6n.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php on line\
    \ 13\nname\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmps6jx3x6n.php on line 11\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmps6jx3x6n.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php on line\
    \ 13\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php\
    \ on line 13\nname\n\nWarning: strlen() expects parameter 1 to be string, array\
    \ given in /tmp/tmps6jx3x6n.php on line 11\n\nWarning: strlen() expects parameter\
    \ 1 to be string, array given in /tmp/tmps6jx3x6n.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php on line\
    \ 13\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php\
    \ on line 13\naaaaaaa\n\nWarning: strlen() expects parameter 1 to be string, array\
    \ given in /tmp/tmps6jx3x6n.php on line 11\n\nWarning: strlen() expects parameter\
    \ 1 to be string, array given in /tmp/tmps6jx3x6n.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php on line\
    \ 13\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmps6jx3x6n.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6jx3x6n.php:30\n\
    Stack trace:\n#0 /tmp/tmps6jx3x6n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmps6jx3x6n.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $i = 0;\n    $length = strlen($words[0]);\n\
    \    $word = $words[0];\n    $count = 0;\n    $char_count = [];\n    foreach ($words\
    \ as $char) {\n        $length = strlen($char);\n        if (count(array_unique(str_split($char)))\
    \ >= $count) {\n            $count = count(array_unique(str_split($char)));\n\
    \            $word = $char;\n        }\n    }\n    return $word;\n}\n\nvar_dump(find_max([\"\
    name\", \"of\", \"string\"]));\nvar_dump(find_max([\"name\", \"enam\", \"game\"\
    ]));\nvar_dump(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string(6) \"string\"\nstring(4) \"game\"\nstring(2) \"cc\"\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpd0v2yque.php:34\nStack trace:\n\
    #0 /tmp/tmpd0v2yque.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd0v2yque.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxLen = array();\n    $maxCount = 0;\n  \
    \  foreach ($words as $word) {\n        $len = count(array_unique(str_split($word)));\n\
    \        $maxLen[$word] = $len;\n        if ($len > $maxCount) {\n           \
    \ $maxCount = $len;\n        }\n    }\n    foreach ($maxLen as $key => $value)\
    \ {\n        if ($value === $maxCount) {\n            return $key;\n        }\n\
    \    }\n}\necho find_max([\"name\", \"of\", \"string\"]);\necho find_max([\"name\"\
    , \"enam\", \"game\"]);\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxb964di.php:34\n\
    Stack trace:\n#0 /tmp/tmpxxb964di.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxxb964di.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $result = \"\";\n    for ($i\
    \ = 0; $i < count($words); $i++) {\n        $word = $words[$i];\n        $count\
    \ = 0;\n        for ($j = 0; $j < strlen($word); $j++) {\n            $letter\
    \ = $word[$j];\n            $isUnique = false;\n            for ($k = 0; $k <\
    \ strlen($word); $k++) {\n                if ($j == $k) {\n                  \
    \  continue;\n                }\n                if ($letter == $word[$k]) {\n\
    \                    $isUnique = true;\n                    break;\n         \
    \       }\n            }\n            if (!$isUnique) {\n                $count++;\n\
    \            }\n        }\n        if ($count > $max) {\n            $max = $count;\n\
    \            $result = $word;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphx0_tq5j.php:44\n\
    Stack trace:\n#0 /tmp/tmphx0_tq5j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphx0_tq5j.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $unique_words = [];\n  $unique_chars = [];\n\
    \  for ($i = 0; $i < count($words); $i++) {\n    if (!in_array($words[$i], $unique_words))\
    \ {\n      array_push($unique_words, $words[$i]);\n      array_push($unique_chars,\
    \ strlen(count_chars($words[$i], 1)));\n    }\n  }\n  if (max($unique_chars) ==\
    \ min($unique_chars)) {\n    return $unique_words[0];\n  } else {\n    return\
    \ $unique_words[array_search(max($unique_chars), $unique_chars)];\n  }\n}\n\n\
    $tests = [\n  [\"name\", \"of\", \"string\"],\n  [\"name\", \"enam\", \"game\"\
    ],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"a\", \"a\", \"a\"],\n  [\"name\", \"\
    string\", \"name\"],\n  [\"a\", \"b\", \"a\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"\
    ],\n  [\"aa\", \"a\", \"aa\"],\n  [\"aa\", \"a\", \"a\"],\n  [\"abcabcabcabcabcabcabc\"\
    , \"abcabcabcabcabcabcab\", \"abcabcabcabcabcabcabc\"],\n  [\"a\", \"b\", \"a\"\
    ],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"\
    aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\"\
    , \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"\
    cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n \
    \ [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\"\
    , \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"\
    cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n  [\"aaaaaaa\", \"bb\" ,\"cc\"],\n \n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgtkcntc_.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = null;\n  $max_word = null;\n  foreach\
    \ ($words as $word) {\n    $unique_chars = array_unique(str_split($word));\n \
    \   if (count($unique_chars) > $max) {\n      $max = count($unique_chars);\n \
    \     $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdocmr_q3.php:28\n\
    Stack trace:\n#0 /tmp/tmpdocmr_q3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdocmr_q3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (empty($words)) {\n        return \"\";\n\
    \    }\n    $max = 0;\n    $ans = \"\";\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $n = count($unique_chars);\n        if ($n > $max) {\n            $max\
    \ = $n;\n            $ans = $word;\n        }\n    }\n    return $ans;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg11vnga5.php:33\n\
    Stack trace:\n#0 /tmp/tmpg11vnga5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg11vnga5.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_words = [];\n  $max_chars = 0;\n  foreach\
    \ ($words as $word) {\n    $chars = count_chars($word, 3);\n    if (strlen($chars)\
    \ > $max_chars) {\n      $max_chars = strlen($chars);\n      $max_words = [$word];\n\
    \    } elseif (strlen($chars) == $max_chars) {\n      $max_words[] = $word;\n\
    \    }\n  }\n  return min($max_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Write your code here\n    if(count($words)\
    \ == 0) {\n        return null;\n    }\n    $count = [];\n    foreach($words as\
    \ $word) {\n        $count[$word] = count(array_unique(str_split($word)));\n \
    \   }\n    max($count);\n    return array_search(max($count), $count);\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5o60jdz6.php:27\n\
    Stack trace:\n#0 /tmp/tmp5o60jdz6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5o60jdz6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_len = 0;\n  $max_word = \"\";\n  foreach\
    \ ($words as $word) {\n    $word_len = count(array_unique(str_split($word)));\n\
    \    if ($word_len > $max_len) {\n      $max_len = $word_len;\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\n\necho find_max([\"name\", \"\
    of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"game\"]) .\
    \ PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxihmvq5f.php:31\nStack trace:\n#0 /tmp/tmpxihmvq5f.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxihmvq5f.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words_array = [];\n    foreach ($words as\
    \ $word) {\n        $words_array[$word] = count_unique_chars($word);\n    }\n\
    \    $max_word = \"\";\n    $max_unique_chars = 0;\n    foreach ($words_array\
    \ as $word => $unique_chars) {\n        if ($unique_chars > $max_unique_chars)\
    \ {\n            $max_word = $word;\n            $max_unique_chars = $unique_chars;\n\
    \        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpdgq642g7.php:12\nStack trace:\n#0 /tmp/tmpdgq642g7.php(26): find_max(Array)\n\
    #1 /tmp/tmpdgq642g7.php(30): candidate(Array)\n#2 /tmp/tmpdgq642g7.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdgq642g7.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $count = [];\n    foreach ($words as $w) {\n\
    \        $count[$w] = count(array_unique(str_split($w)));\n    }\n    asort($count);\n\
    \    $count = array_reverse($count);\n    return key($count);\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"\
    game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\ngame\ncc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dyariok.php:28\n\
    Stack trace:\n#0 /tmp/tmp6dyariok.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6dyariok.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$maxUnique = array_reduce($words, function($carry,\
    \ $item) {\n\t\t$uniqueChars = array_unique(str_split($item));\n\t\tif (count($uniqueChars)\
    \ > $carry) {\n\t\t\treturn count($uniqueChars);\n\t\t} else {\n\t\t\treturn $carry;\n\
    \t\t}\n\t}, 0);\n\t$max = array_filter($words, function($item) use ($maxUnique)\
    \ {\n\t\treturn count(array_unique(str_split($item))) == $maxUnique;\n\t});\n\t\
    return array_shift($max);\n}\necho find_max([\"name\", \"of\", \"string\"]);\n\
    echo \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]);\necho \"\\n\";\n\
    echo find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\necho \"\\n\";\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"ccc\"]);\necho \"\\n\";\necho find_max([\"bb\", \"cc\" ,\"\
    aaaaaaa\"]);\necho \"\\n\";\necho find_max([\"bb\", \"cc\" ,\"cccc\"]);\necho\
    \ \"\\n\";\necho find_max([\"bb\", \"cc\" ,\"ccc\"]);\necho \"\\n\";\necho find_max([\"\
    bb\", \"bb\", \"bb\"]);\necho \"\\n\";\necho find_max([\"bb\", \"bb\", \"bc\"\
    ]);\necho \"\\n\";\necho find_max([\"bb\", \"ba\", \"bc\"]);\necho \"\\n\";\n\
    echo find_max([\"bb\", \"aa\", \"bc\"]);\necho \"\\n\";\necho find_max([\"ab\"\
    , \"bb\", \"bc\"]);\necho \"\\n\";\necho find_max([\"ab\", \"ac\", \"bc\"]);\n\
    echo \"\\n\";\necho find_max([\"ac\", \"bc\", \"ac\"]);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\naaaaaaa\nbb\nbb\nbb\nbb\nbc\nba\nbc\nab\nab\nac\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33dd1299.php:57\nStack\
    \ trace:\n#0 /tmp/tmp33dd1299.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp33dd1299.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_length = max(array_map('strlen', $words));\n\
    \    $words = array_filter($words, function($word) use ($max_length) {\n     \
    \   return strlen($word) == $max_length;\n    });\n    usort($words, function($a,\
    \ $b) {\n        return strcmp($a, $b);\n    });\n    $uniq = array_unique(str_split($words[0]));\n\
    \    if(count($uniq) == $max_length) {\n        return $words[0];\n    }\n   \
    \ return '-1';\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzrs2rmk.php:31\n\
    Stack trace:\n#0 /tmp/tmpgzrs2rmk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgzrs2rmk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (sizeof($words) == 0) {\n        return\
    \ \"\";\n    }\n    $counts = [];\n    foreach ($words as $word) {\n        $counts[$word]\
    \ = count_chars($word, 1);\n    }\n    $max = sizeof($counts[$words[0]]);\n  \
    \  $max_word = $words[0];\n    foreach ($counts as $word => $count) {\n      \
    \  if (sizeof($count) > $max) {\n            $max = sizeof($count);\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = [\"name\", \"of\", \"string\"];\n$words2 = [\"name\", \"enam\", \"game\"];\n\
    $words3 = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words) . \"\\n\";\necho\
    \ find_max($words2) . \"\\n\";\necho find_max($words3) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppma2h87j.php:40\nStack trace:\n#0 /tmp/tmppma2h87j.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmppma2h87j.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = '';\n  $max_unique = 0;\n  foreach ($words\
    \ as $word) {\n    $unique = 0;\n    $letters = str_split($word);\n    $unique_letters\
    \ = array_unique($letters);\n    $unique = count($unique_letters);\n    if ($unique\
    \ > $max_unique) {\n      $max = $word;\n      $max_unique = $unique;\n    }\n\
    \  }\n  return $max;\n}\necho find_max([\"name\", \"of\", \"string\"]) . \"\\\
    n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbxbl24yi.php:34\nStack trace:\n#0 /tmp/tmpbxbl24yi.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbxbl24yi.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (count($words) == 0) {\n        return null;\n\
    \    }\n    $output = $words[0];\n    $max_count = count(array_unique(str_split($output)));\n\
    \    foreach ($words as $word) {\n        $current_count = count(array_unique(str_split($word)));\n\
    \        if ($current_count > $max_count) {\n            $max_count = $current_count;\n\
    \            $output = $word;\n        }\n    }\n    return $output;\n}\necho\
    \ find_max([\"name\", \"of\", \"string\"]) . \"<br>\";\necho find_max([\"name\"\
    , \"enam\", \"game\"]) . \"<br>\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ]) . \"<br>\";\necho find_max([\"aaaaa\", \"bb\" ,\"cc\", \"zaxscdvf\"]) . \"\
    <br>\";\necho find_max([\"abc\", \"def\", \"edf\", \"zed\"]) . \"<br>\";\necho\
    \ find_max([\"abc\", \"def\", \"aaa\", \"aa\", \"a\", \"a\", \"zz\"]) . \"<br>\"\
    ;\necho find_max([\"abc\", \"def\", \"edf\", \"zzz\"]) . \"<br>\";\necho find_max([\"\
    def\", \"edf\", \"zzz\"]) . \"<br>\";\necho find_max([\"def\", \"edf\", \"zzz\"\
    , \"abc\"]) . \"<br>\";\necho find_max([\"def\", \"edf\", \"zzz\", \"abc\", \"\
    z\", \"a\"]) . \"<br>\";\necho find_max([\"def\", \"edf\", \"zzz\", \"abc\", \"\
    z\", \"a\", \"b\"]) . \"<br>\";\necho find_max([\"def\", \"edf\", \"zzz\", \"\
    abc\", \"z\", \"a\", \"b\", \"c\"]) . \"<br>\";\necho find_max([\"def\", \"edf\"\
    , \"zzz\", \"abc\", \"z\", \"a\", \"b\", \"c\", \"d\"]) . \"<br>\";\necho find_max([\"\
    def\",\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuj9i6ttn.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = array(\"count\" => 0, \"word\" => \"\
    \");\n    foreach ($words as $word) {\n        $chars = str_split($word);\n  \
    \      $uniques = array_unique($chars);\n        if (count($uniques) > $max[\"\
    count\"]) {\n            $max[\"count\"] = count($uniques);\n            $max[\"\
    word\"] = $word;\n        }\n    }\n    return $max[\"word\"];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydgepyqp.php:27\n\
    Stack trace:\n#0 /tmp/tmpydgepyqp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpydgepyqp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    foreach\
    \ ($words as $word) {\n        $unique_letters = [];\n        for ($i = 0; $i\
    \ < strlen($word); $i++) {\n            $letter = $word[$i];\n            if (!in_array($letter,\
    \ $unique_letters)) {\n                $unique_letters[] = $letter;\n        \
    \    }\n        }\n        if (count($unique_letters) > $max) {\n            $max\
    \ = count($unique_letters);\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_3tlym6.php:33\n\
    Stack trace:\n#0 /tmp/tmpz_3tlym6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz_3tlym6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // ...\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp689mmxxg.php:18\n\
    Stack trace:\n#0 /tmp/tmp689mmxxg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp689mmxxg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = '';\n    $max_count = 0;\n    foreach\
    \ ($words as $word) {\n        $count = count_unique_chars($word);\n        if\
    \ ($count > $max_count) {\n            $max_count = $count;\n            $result\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpt_mi78pt.php:13\nStack trace:\n#0 /tmp/tmpt_mi78pt.php(23): find_max(Array)\n\
    #1 /tmp/tmpt_mi78pt.php(27): candidate(Array)\n#2 /tmp/tmpt_mi78pt.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt_mi78pt.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_char = \"\";\n  $max_char_len = 0;\n  $max_lex\
    \ = \"\";\n  foreach ($words as $word) {\n    $char = array_unique(str_split($word));\n\
    \    $char_len = count($char);\n    if ($char_len >= $max_char_len) {\n      $max_char_len\
    \ = $char_len;\n      $max_char = $word;\n    }\n    if ($char_len == $max_char_len)\
    \ {\n      if ($word < $max_char) {\n        $max_char = $word;\n      }\n   \
    \ }\n  }\n  return $max_char;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6cq4ncw.php:35\n\
    Stack trace:\n#0 /tmp/tmpz6cq4ncw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz6cq4ncw.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = '';\n  $max_num = 0;\n  foreach ($words\
    \ as $word) {\n    $char_arr = array_unique(str_split($word));\n    $num = count($char_arr);\n\
    \    if ($num > $max_num) {\n      $max = $word;\n      $max_num = $num;\n   \
    \ }\n  }\n  return $max;\n}\n$words = [\"name\", \"of\", \"string\"];\necho find_max($words)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhpmxu7i.php:30\n\
    Stack trace:\n#0 /tmp/tmpnhpmxu7i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnhpmxu7i.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = array_reduce($words, function($carry,\
    \ $item) {\n        $count = count_chars($item, 1);\n        if (count($count)\
    \ > count($carry)) {\n            return $count;\n        } else {\n         \
    \   return $carry;\n        }\n    }, []);\n    $result = array_search(count($max),\
    \ array_map(function($item) {\n        return count(count_chars($item, 1));\n\
    \    }, $words));\n    return $words[$result];\n}\n\necho find_max([\"name\",\
    \ \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"\
    ]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpqw7re9ic.php:33\nStack trace:\n#0 /tmp/tmpqw7re9ic.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqw7re9ic.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = 0;\n\t$max_words = [];\n\tforeach ($words\
    \ as $word) {\n\t\t$letters = str_split($word);\n\t\t$letters = array_unique($letters);\n\
    \t\t$letters = count($letters);\n\t\tif ($letters > $max) {\n\t\t\t$max = $letters;\n\
    \t\t\t$max_words = [$word];\n\t\t} elseif ($letters == $max) {\n\t\t\t$max_words[]\
    \ = $word;\n\t\t}\n\t}\n\tsort($max_words);\n\treturn $max_words[0];\n}\n\n$ret\
    \ = find_max([\"name\", \"of\", \"string\"]);\nif ($ret != \"string\") {\n\tprint\
    \ \"Wrong Answer\";\n\texit(1);\n}\n$ret = find_max([\"name\", \"enam\", \"game\"\
    ]);\nif ($ret != \"enam\") {\n\tprint \"Wrong Answer\";\n\texit(1);\n}\n$ret =\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\nif ($ret != \"aaaaaaa\") {\n\tprint\
    \ \"Wrong Answer\";\n\texit(1);\n}\n$ret = find_max([\"aaaaaaa\", \"bba\" ,\"\
    ccc\"]);\nif ($ret != \"bba\") {\n\tprint \"Wrong Answer\";\n\texit(1);\n}\n$ret\
    \ = find_max([\"aaaaaaa\", \"ccb\" ,\"ccc\"]);\nif ($ret != \"ccb\") {\n\tprint\
    \ \"Wrong Answer\";\n\texit(1);\n}\n$ret = find_max([\"aaaaaaa\", \"ccc\" ,\"\
    bbc\"]);\nif ($ret != \"aaaaaaa\") {\n\tprint \"Wrong Answer\";\n\texit(1);\n\
    }\n$ret = find_max([\"aaaaaaa\", \"ccb\" ,\"ccc\"]);\nif ($ret != \"ccb\") {\n\
    \tprint \"Wrong Answer\";\n\texit(1);\n}\n$ret = find_max([\"aaaaaaa\", \"aab\"\
    \ ,\"aac\"]);\nif ($ret != \"aaaaaaa\") {\n\tprint \"Wrong Answer\";\n\texit(\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_e3f6dzq.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $word) {\n    $unique_chars = str_split(implode(array_unique(str_split($word))));\n\
    \    $unique_chars_count = count($unique_chars);\n    if ($unique_chars_count\
    \ > $max) {\n      $max = $unique_chars_count;\n      $result = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisixauvu.php:29\n\
    Stack trace:\n#0 /tmp/tmpisixauvu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpisixauvu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $result = \"\";\n    foreach\
    \ ($words as $word) {\n        $result_temp = \"\";\n        foreach (str_split($word)\
    \ as $letter) {\n            if (!strpos($result_temp, $letter)) {\n         \
    \       $result_temp .= $letter;\n            }\n        }\n        if (strlen($result_temp)\
    \ > $max) {\n            $max = strlen($result_temp);\n            $result = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cdndryw.php:33\n\
    Stack trace:\n#0 /tmp/tmp3cdndryw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3cdndryw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\tif (count($words) == 0) {\n\t\treturn \"\";\n\
    \t}\n\t$words_count = array();\n\tforeach ($words as $word) {\n\t\t$words_count[$word]\
    \ = count_unique_characters($word);\n\t}\n\t$max_word = \"\";\n\t$max_count =\
    \ 0;\n\tforeach ($words_count as $word => $count) {\n\t\tif ($count > $max_count)\
    \ {\n\t\t\t$max_word = $word;\n\t\t\t$max_count = $count;\n\t\t}\n\t}\n\treturn\
    \ $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp_9cg__69.php:15\nStack trace:\n#0 /tmp/tmp_9cg__69.php(28): find_max(Array)\n\
    #1 /tmp/tmp_9cg__69.php(32): candidate(Array)\n#2 /tmp/tmp_9cg__69.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_9cg__69.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max_word = '';\n\t$max_count = 0;\n\t$word_count\
    \ = 0;\n\tforeach ($words as $word) {\n\t\t$word_count = count(array_unique(str_split($word)));\n\
    \t\tif ($word_count > $max_count) {\n\t\t\t$max_count = $word_count;\n\t\t\t$max_word\
    \ = $word;\n\t\t}\n\t}\n\techo $max_word;\n}\nfind_max([\"name\", \"of\", \"string\"\
    ]);\nfind_max([\"name\", \"enam\", \"game\"]);\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaastring\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpz15k80e0.php:30\nStack trace:\n#0 /tmp/tmpz15k80e0.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz15k80e0.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $longest = 0;\n  $word = \"\";\n  foreach ($words\
    \ as $i) {\n    $uniq_chars = count_chars($i, 1);\n    if (count($uniq_chars)\
    \ > $longest) {\n      $longest = count($uniq_chars);\n      $word = $i;\n   \
    \ }\n  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hn5noy5.php:28\n\
    Stack trace:\n#0 /tmp/tmp7hn5noy5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7hn5noy5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    foreach ($words as $word)\
    \ {\n        if (count_chars($word, 3) == count(str_split($word))) {\n       \
    \     $result = $word;\n            break;\n        }\n    }\n    return $result;\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"\
    name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uifi5qa.php:28\n\
    Stack trace:\n#0 /tmp/tmp8uifi5qa.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8uifi5qa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = $words[0];\n    $max_len = strlen(count_chars($result,\
    \ 1));\n    for ($i = 1; $i < count($words); $i++) {\n        $current_len = strlen(count_chars($words[$i],\
    \ 1));\n        if ($current_len > $max_len) {\n            $max_len = $current_len;\n\
    \            $result = $words[$i];\n        }\n    }\n    return $result;\n}\n\
    \n$strings = [\"name\", \"of\", \"string\"];\necho find_max($strings) . \"<br>\"\
    ;\n$strings = [\"name\", \"enam\", \"game\"];\necho find_max($strings) . \"<br>\"\
    ;\n$strings = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($strings) . \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpov6omdy6.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpov6omdy6.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpov6omdy6.php on line 13\nname<br>\nWarning:\
    \ strlen() expects parameter 1 to be string, array given in /tmp/tmpov6omdy6.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpov6omdy6.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpov6omdy6.php on line 13\nname<br>\nWarning:\
    \ strlen() expects parameter 1 to be string, array given in /tmp/tmpov6omdy6.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpov6omdy6.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpov6omdy6.php on line 13\naaaaaaa<br>\n\
    Warning: strlen() expects parameter 1 to be string, array given in /tmp/tmpov6omdy6.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpov6omdy6.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpov6omdy6.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpov6omdy6.php:33\nStack trace:\n\
    #0 /tmp/tmpov6omdy6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpov6omdy6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  foreach ($words as $word) {\n    $words_array[$word]\
    \ = count_chars($word, 3);\n  }\n  foreach ($words_array as $word => $chars) {\n\
    \    $char_count[$word] = strlen($chars);\n  }\n  return array_search(max($char_count),\
    \ $char_count);\n}\necho find_max([\"name\", \"of\", \"string\"]); // == \"string\"\
    \necho find_max([\"name\", \"enam\", \"game\"]); // == \"enam\"\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]); // == \"\"aaaaaaa\"\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiygphv22.php:27\n\
    Stack trace:\n#0 /tmp/tmpiygphv22.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiygphv22.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = -1;\n\t$max_word = \"\";\n\tforeach ($words\
    \ as $word) {\n\t\t$uniques = count_unique_chars($word);\n\t\tif ($uniques > $max)\
    \ {\n\t\t\t$max = $uniques;\n\t\t\t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmppma9vjft.php:13\nStack trace:\n#0 /tmp/tmppma9vjft.php(23): find_max(Array)\n\
    #1 /tmp/tmppma9vjft.php(27): candidate(Array)\n#2 /tmp/tmppma9vjft.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmppma9vjft.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_char_count = 0;\n    $max_unique_char_word\
    \ = '';\n    foreach ($words as $word) {\n        $unique_chars = array_unique(str_split($word));\n\
    \        $unique_char_count = count($unique_chars);\n        if ($unique_char_count\
    \ > $max_unique_char_count) {\n            $max_unique_char_count = $unique_char_count;\n\
    \            $max_unique_char_word = $word;\n        }\n    }\n    return $max_unique_char_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0skflr2.php:29\n\
    Stack trace:\n#0 /tmp/tmpa0skflr2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa0skflr2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6rse9vw.php:17\n\
    Stack trace:\n#0 /tmp/tmpl6rse9vw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl6rse9vw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $counts = array_map('count_uniques', $words);\n\
    \    $max_count = max($counts);\n    if($max_count < 2) {\n        return \"\"\
    ;\n    }\n    $index = array_search($max_count, $counts);\n    return $words[$index];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'count_uniques' not found or invalid function name in /tmp/tmpnn9owzva.php on\
    \ line 10\n\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpnn9owzva.php on line 11\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnn9owzva.php:24\nStack trace:\n#0 /tmp/tmpnn9owzva.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnn9owzva.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // TODO\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo_tq8e3.php:17\n\
    Stack trace:\n#0 /tmp/tmpgo_tq8e3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgo_tq8e3.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = [0, ''];\n    foreach ($words as $word)\
    \ {\n        $chars = [];\n        for ($i = 0; $i < strlen($word); $i++) {\n\
    \            if (!isset($chars[$word[$i]])) {\n                $chars[$word[$i]]\
    \ = 1;\n            }\n        }\n        if (count($chars) > $max[0]) {\n   \
    \         $max = [count($chars), $word];\n        }\n    }\n    return $max[1];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfagar1ej.php:30\n\
    Stack trace:\n#0 /tmp/tmpfagar1ej.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfagar1ej.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  if (count($words) < 1) {\n    return null;\n\
    \  }\n  $word = '';\n  $len = 0;\n  foreach ($words as $value) {\n    $count =\
    \ strlen(count_chars($value, 3));\n    if ($count > $len) {\n      $len = $count;\n\
    \      $word = $value;\n    }\n  }\n  return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil3rf7k7.php:31\n\
    Stack trace:\n#0 /tmp/tmpil3rf7k7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpil3rf7k7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $max_unique_chars = 0;\n\
    \    foreach ($words as $word) {\n        $unique_chars = 0;\n        for ($i\
    \ = 0; $i < strlen($word); $i++) {\n            $found = false;\n            for\
    \ ($j = 0; $j < $i; $j++) {\n                if ($word[$i] == $word[$j]) {\n \
    \                   $found = true;\n                    break;\n             \
    \   }\n            }\n            if (!$found) {\n                $unique_chars++;\n\
    \            }\n        }\n        if ($unique_chars > $max_unique_chars) {\n\
    \            $max_unique_chars = $unique_chars;\n            $result = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5pv2xef.php:40\n\
    Stack trace:\n#0 /tmp/tmpq5pv2xef.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpq5pv2xef.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $word_max = '';\n    $n_max = 0;\n    foreach\
    \ ($words as $word) {\n        $n = 0;\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            $char = $word[$i];\n            if (strpos($word, $char,\
    \ $i + 1) === false) {\n                $n++;\n            }\n        }\n    \
    \    if ($n > $n_max) {\n            $n_max = $n;\n            $word_max = $word;\n\
    \        }\n    }\n    return $word_max;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtnlj9sg.php:34\n\
    Stack trace:\n#0 /tmp/tmpdtnlj9sg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdtnlj9sg.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    foreach ($words as $word) {\n        $uniqueChars\
    \ = array_unique(str_split($word));\n        $output[$word] = count($uniqueChars);\n\
    \    }\n    $maxValue = max($output);\n    $maxWord = array_search($maxValue,\
    \ $output);\n    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3_m1vkx.php:25\n\
    Stack trace:\n#0 /tmp/tmpw3_m1vkx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw3_m1vkx.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxChars = '';\n    foreach ($words as $word)\
    \ {\n        if (count_chars($word, 1) > count_chars($maxChars, 1)) {\n      \
    \      $maxChars = $word;\n        }\n    }\n    return $maxChars;\n}\n\n$words\
    \ = [\"name\", \"of\", \"string\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39pbb1vc.php:27\n\
    Stack trace:\n#0 /tmp/tmp39pbb1vc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp39pbb1vc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_length = 0;\n    $max_word = \"\";\n \
    \   foreach ($words as $word) {\n        $count = count_unique_characters($word);\n\
    \        if ($count >= $max_length) {\n            $max_length = $count;\n   \
    \         $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpxhfzt_cc.php:13\nStack trace:\n#0 /tmp/tmpxhfzt_cc.php(22): find_max(Array)\n\
    #1 /tmp/tmpxhfzt_cc.php(26): candidate(Array)\n#2 /tmp/tmpxhfzt_cc.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxhfzt_cc.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $currentMax = 0;\n    $result\
    \ = \"\";\n    foreach ($words as $word) {\n        $letters = [];\n        $currentMax\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!array_key_exists($word[$i],\
    \ $letters)) {\n                $letters[$word[$i]] = 0;\n                $currentMax++;\n\
    \            }\n        }\n        if ($currentMax > $max) {\n            $max\
    \ = $currentMax;\n            $result = $word;\n        }\n    }\n    return $result;\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]).\"\\n\";\necho find_max([\"\
    name\", \"enam\", \"game\"]).\"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]).\"\\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_m7yecaj.php:40\nStack trace:\n#0 /tmp/tmp_m7yecaj.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_m7yecaj.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $chars_count = 0;\n    $max_count = 0;\n  \
    \  $word = \"\";\n    foreach ($words as $word_in_array) {\n        $chars_count\
    \ = count_chars($word_in_array, 1);\n        $chars_count = count($chars_count);\n\
    \        if ($chars_count > $max_count) {\n            $max_count = $chars_count;\n\
    \            $word = $word_in_array;\n        }\n    }\n    return $word;\n}\n\
    $a = [\"name\", \"of\", \"string\"];\nprint_r(find_max($a));\necho \"<br>\";\n\
    $b = [\"name\", \"enam\", \"game\"];\nprint_r(find_max($b));\necho \"<br>\";\n\
    $c = [\"aaaaaaa\", \"bb\" ,\"cc\"];\nprint_r(find_max($c));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpips49alb.php:37\nStack trace:\n#0 /tmp/tmpips49alb.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpips49alb.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $string = \"\";\n    $words_unique = array();\n\
    \    $unique_num = 0;\n    for ($i = 0; $i < count($words); $i++) {\n        $words_unique[$i]\
    \ = count_chars($words[$i], 1);\n        $words_unique[$i] = array_count_values($words_unique[$i]);\n\
    \        if ($words_unique[$i] > $unique_num) {\n            $unique_num = $words_unique[$i];\n\
    \            $string = $words[$i];\n        }\n    }\n    return $string;\n}\n\
    echo find_max([\"name\", \"of\", \"string\"]);\necho find_max([\"name\", \"enam\"\
    , \"game\"]);\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cy3ga60.php:33\n\
    Stack trace:\n#0 /tmp/tmp8cy3ga60.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8cy3ga60.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = $words[0];\n\tforeach ($words as $word)\
    \ {\n\t\tif (strlen(implode(array_unique(str_split($word)))) > strlen(implode(array_unique(str_split($max)))))\
    \ {\n\t\t\t$max = $word;\n\t\t}\n\t}\n\treturn $max;\n}\necho find_max([\"name\"\
    , \"of\", \"string\"]);\necho \"\\n\";\necho find_max([\"name\", \"enam\", \"\
    game\"]);\necho \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp54kny9xt.php:31\nStack trace:\n#0 /tmp/tmp54kny9xt.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp54kny9xt.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $maxWord = \"\";\n  $maxCount = 0;\n  foreach\
    \ ($words as $word) {\n    $count = count_chars($word, 1);\n    if (count($count)\
    \ > $maxCount) {\n      $maxCount = count($count);\n      $maxWord = $word;\n\
    \    }\n  }\n  return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38xz6kqb.php:28\n\
    Stack trace:\n#0 /tmp/tmp38xz6kqb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp38xz6kqb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $wordWithMaxUniqueChars = \"\";\n    $maxUniqueChars\
    \ = 0;\n    foreach ($words as $word) {\n        $chars = getUniqueChars($word);\n\
    \        if (count($chars) > $maxUniqueChars) {\n            $maxUniqueChars =\
    \ count($chars);\n            $wordWithMaxUniqueChars = $word;\n        }\n  \
    \  }\n    return $wordWithMaxUniqueChars;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getUniqueChars()\
    \ in /tmp/tmp6ruioast.php:13\nStack trace:\n#0 /tmp/tmp6ruioast.php(23): find_max(Array)\n\
    #1 /tmp/tmp6ruioast.php(27): candidate(Array)\n#2 /tmp/tmp6ruioast.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6ruioast.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = [\n\t\t'max' => 0,\n\t\t'word' => null\n\
    \t];\n\tforeach ($words as $word) {\n\t\t$word_chars = array_unique(str_split($word));\n\
    \t\t$char_len = count($word_chars);\n\t\tif ($char_len > $max['max']) {\n\t\t\t\
    $max['max'] = $char_len;\n\t\t\t$max['word'] = $word;\n\t\t}\n\t}\n\treturn $max['word'];\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"\
    name\", \"enam\", \"game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3uxntfpd.php:34\nStack trace:\n#0 /tmp/tmp3uxntfpd.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3uxntfpd.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = \"\";\n    $max_length = 0;\n \
    \   foreach ($words as $word) {\n        $unique_count = count(array_unique(str_split($word)));\n\
    \        if ($unique_count > $max_length) {\n            $max_length = $unique_count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    echo find_max([\"name\", \"of\", \"string\"]);\necho find_max([\"name\", \"enam\"\
    , \"game\"]);\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb57ym9e0.php:32\n\
    Stack trace:\n#0 /tmp/tmpb57ym9e0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpb57ym9e0.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_chars = -1;\n    $word_with_max_unique_chars\
    \ = null;\n    foreach ($words as $word) {\n        $unique_chars = get_unique_chars($word);\n\
    \        if ($unique_chars > $max_unique_chars) {\n            $max_unique_chars\
    \ = $unique_chars;\n            $word_with_max_unique_chars = $word;\n       \
    \ }\n    }\n    return $word_with_max_unique_chars;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmp8bg7exta.php:13\nStack trace:\n#0 /tmp/tmp8bg7exta.php(23): find_max(Array)\n\
    #1 /tmp/tmp8bg7exta.php(27): candidate(Array)\n#2 /tmp/tmp8bg7exta.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8bg7exta.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $uniq = [];\n    foreach ($words as $k => $word)\
    \ {\n        $uniq[$k] = count(array_unique(str_split($word)));\n    }\n    $max\
    \ = max($uniq);\n    $k = array_search($max, $uniq);\n    return $words[$k];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tib65pr.php:25\n\
    Stack trace:\n#0 /tmp/tmp7tib65pr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7tib65pr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Please note that the number of words in\
    \ the list can be very large\n    $max_count = 0;\n    $max_word = '';\n    foreach\
    \ ($words as $word) {\n        $seen = [];\n        $count = 0;\n        for ($i\
    \ = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i], $seen))\
    \ {\n                $seen[] = $word[$i];\n                $count++;\n       \
    \     }\n        }\n        if ($count > $max_count) {\n            $max_count\
    \ = $count;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }\n\nprint_r(find_max([\"name\", \"of\", \"string\"])); // string\nprint_r(find_max([\"\
    name\", \"enam\", \"game\"])); // enam\nprint_r(find_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"])); // aaaaaaa\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0_agtsn.php:39\n\
    Stack trace:\n#0 /tmp/tmpj0_agtsn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj0_agtsn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $count = [];\n  foreach ($words as $word) {\n\
    \    $count[$word] = count(array_unique(str_split($word)));\n  }\n  asort($count);\n\
    \  $count = array_reverse($count);\n  $keys = array_keys($count);\n  return $keys[0];\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"\
    name\", \"enam\", \"game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\ngame\ncc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3gpy1e2.php:29\n\
    Stack trace:\n#0 /tmp/tmpc3gpy1e2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc3gpy1e2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = 0;\n\t$result = \"\";\n\tfor ($i = 0;\
    \ $i < count($words); $i++) {\n\t\t$chars = str_split($words[$i]);\n\t\t$unique\
    \ = array_unique($chars);\n\t\tif (count($unique) > $max) {\n\t\t\t$max = count($unique);\n\
    \t\t\t$result = $words[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"\
    game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwerq7nww.php:33\nStack trace:\n#0 /tmp/tmpwerq7nww.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwerq7nww.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t// Write your code here\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"\
    game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5_xipup.php:21\n\
    Stack trace:\n#0 /tmp/tmpb5_xipup.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb5_xipup.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_unique_chars = [];\n  $max_unique_length\
    \ = 0;\n  $max_unique_word = \"\";\n  foreach ($words as $word) {\n    $chars\
    \ = str_split($word);\n    $unique_chars = array_unique($chars);\n    $unique_length\
    \ = count($unique_chars);\n    if ($unique_length > $max_unique_length) {\n  \
    \    $max_unique_chars = $unique_chars;\n      $max_unique_length = $unique_length;\n\
    \      $max_unique_word = $word;\n    }\n  }\n  return $max_unique_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jfyib2p.php:32\n\
    Stack trace:\n#0 /tmp/tmp1jfyib2p.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1jfyib2p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_len = 0;\n  $max_word = '';\n  foreach ($words\
    \ as $word) {\n    $char_count = 0;\n    $char_array = [];\n    for ($i = 0; $i\
    \ < strlen($word); $i++) {\n      if (!in_array($word[$i], $char_array)) {\n \
    \       $char_array[] = $word[$i];\n        $char_count++;\n      }\n    }\n \
    \   if ($char_count > $max_len) {\n      $max_len = $char_count;\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\n\necho find_max([\"name\", \"\
    of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]) .\
    \ \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9khq5_sx.php:39\nStack trace:\n#0 /tmp/tmp9khq5_sx.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9khq5_sx.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $str='';\n  $max_chars_count=0;\n  $chars_count=0;\n\
    \  foreach ($words as $word) {\n    $chars_count=count(array_unique(str_split($word)));\n\
    \    if ($chars_count>$max_chars_count) {\n      $max_chars_count=$chars_count;\n\
    \      $str=$word;\n    }\n  }\n  return $str;\n}\necho find_max([\"name\", \"\
    of\", \"string\"]) . \"<br/>\";\necho find_max([\"name\", \"enam\", \"game\"])\
    \ . \"<br/>\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"<br/>\";\n ?>\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string<br/>name<br/>aaaaaaa<br/>function candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $maxWord = '';\n  $maxUniqueChars = 0;\n  foreach\
    \ ($words as $word) {\n    $uniqueChars = array_unique(str_split($word));\n  \
    \  if (count($uniqueChars) > $maxUniqueChars) {\n      $maxUniqueChars = count($uniqueChars);\n\
    \      $maxWord = $word;\n    }\n  }\n  return $maxWord;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzh0v2on.php:27\n\
    Stack trace:\n#0 /tmp/tmpgzh0v2on.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgzh0v2on.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words_count = 0;\n    $words_count_max = 0;\n\
    \    $max_word = \"\";\n    foreach ($words as $word) {\n        $words_count\
    \ = count(str_split($word));\n        if ($words_count > $words_count_max) {\n\
    \            $words_count_max = $words_count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsz5ca06.php:28\n\
    Stack trace:\n#0 /tmp/tmprsz5ca06.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprsz5ca06.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $length = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $word) {\n    $temp = [];\n    for ($i = 0; $i < strlen($word); $i++) {\n\
    \      $temp[$word[$i]] = true;\n    }\n    if (count($temp) > $length) {\n  \
    \    $length = count($temp);\n      $result = $word;\n    }\n  }\n  return $result;\n\
    }\nvar_dump(find_max([\"name\", \"of\", \"string\"]));\nvar_dump(find_max([\"\
    name\", \"enam\", \"game\"]));\nvar_dump(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ]));\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(6) \"string\"\nstring(4) \"name\"\nstring(7) \"aaaaaaa\"\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp_xoi73ab.php:33\nStack trace:\n\
    #0 /tmp/tmp_xoi73ab.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_xoi73ab.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_count = 0;\n  $max_word = '';\n  foreach\
    \ ($words as $word) {\n    $count = count_unique_chars($word);\n    if ($count\
    \ > $max_count) {\n      $max_count = $count;\n      $max_word = $word;\n    }\n\
    \  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpqz08ahzy.php:13\nStack trace:\n#0 /tmp/tmpqz08ahzy.php(22): find_max(Array)\n\
    #1 /tmp/tmpqz08ahzy.php(26): candidate(Array)\n#2 /tmp/tmpqz08ahzy.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqz08ahzy.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = '';\n  $max_count = 0;\n  foreach ($words\
    \ as $word) {\n    $count = count_chars($word, 1);\n    if (count($count) > $max_count)\
    \ {\n      $max = $word;\n      $max_count = count($count);\n    }\n  }\n  return\
    \ $max;\n}\necho(find_max([\"name\", \"of\", \"string\"]) . \"\\n\");\necho(find_max([\"\
    name\", \"enam\", \"game\"]) . \"\\n\");\necho(find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . \"\\n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfv3sq7d2.php:30\nStack trace:\n#0 /tmp/tmpfv3sq7d2.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfv3sq7d2.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $longest_word = $words[0];\n  $longest_length\
    \ = strlen($longest_word);\n  $unique_characters = [];\n  $result = [];\n  foreach\
    \ ($words as $key => $word) {\n    $unique_characters = array_unique(str_split($word));\n\
    \    $result[$key] = $unique_characters;\n    if (count($unique_characters) >\
    \ $longest_length) {\n      $longest_length = count($unique_characters);\n   \
    \   $longest_word = $word;\n    }\n  }\n  return $longest_word;\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"\
    game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbv8hlev9.php:34\nStack trace:\n#0 /tmp/tmpbv8hlev9.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbv8hlev9.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = '';\n  $max_number = 0;\n  $ordered_words\
    \ = [];\n  foreach ($words as $word) {\n    $ordered_words[$word] = count_unique_chars($word);\n\
    \  }\n  arsort($ordered_words);\n  $max_number = reset($ordered_words);\n  foreach\
    \ ($ordered_words as $word => $number) {\n    if ($number === $max_number) {\n\
    \      $max_word = $word;\n      break;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp7hd7smw2.php:14\nStack trace:\n#0 /tmp/tmp7hd7smw2.php(28): find_max(Array)\n\
    #1 /tmp/tmp7hd7smw2.php(32): candidate(Array)\n#2 /tmp/tmp7hd7smw2.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7hd7smw2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = $words[0];\n  $max_chars = 0;\n \
    \ foreach ($words as $word) {\n    $chars = count_chars($word, 3);\n    if (strlen($chars)\
    \ > $max_chars) {\n      $max_chars = strlen($chars);\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n\necho find_max([\"name\", \"of\", \"string\"\
    ]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpru36ln92.php:31\nStack trace:\n#0 /tmp/tmpru36ln92.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpru36ln92.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $sortedWords = array();\n    foreach ($words\
    \ as $wrd) {\n        $letters = str_split($wrd);\n        $letters = array_unique($letters);\n\
    \        $sortedWords[$wrd] = count($letters);\n    }\n    arsort($sortedWords);\n\
    \    $max = array_pop($sortedWords);\n    foreach ($sortedWords as $key => $value)\
    \ {\n        if ($value == $max) {\n            return $key;\n        }\n    }\n\
    }\necho find_max([\"name\", \"of\", \"string\"]);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtzcmud6.php:30\n\
    Stack trace:\n#0 /tmp/tmpjtzcmud6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjtzcmud6.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  if (count($words) === 0) {\n    return '';\n\
    \  }\n\n  $currentMax = $words[0];\n  $currentMaxNumUnique = count(array_unique(str_split($currentMax)));\n\
    \n  for ($i = 1; $i < count($words); $i++) {\n    $numUnique = count(array_unique(str_split($words[$i])));\n\
    \    if ($numUnique > $currentMaxNumUnique) {\n      $currentMax = $words[$i];\n\
    \      $currentMaxNumUnique = $numUnique;\n    } else if ($numUnique === $currentMaxNumUnique)\
    \ {\n      if ($words[$i] < $currentMax) {\n        $currentMax = $words[$i];\n\
    \      }\n    }\n  }\n\n  return $currentMax;\n}\n\necho find_max([\"name\", \"\
    of\", \"string\"]), \"</br>\";\necho find_max([\"name\", \"enam\", \"game\"]),\
    \ \"</br>\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]), \"</br>\";\necho find_max([\"\
    aaaaaaabbbbb\", \"ab\" ,\"cc\"]), \"</br>\";\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: string</br>enam</br>aaaaaaa</br>aaaaaaabbbbb</br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = [];\n    foreach ($words as $word) {\n\
    \        $count = count_chars($word, 1);\n        if (count($count) > count($max))\
    \ {\n            $max = $count;\n        }\n    }\n    return $max;\n}\n\n$words\
    \ = [\"name\", \"of\", \"string\"];\n$words2 = [\"name\", \"enam\", \"game\"];\n\
    $words3 = [\"aaaaaaa\", \"bb\" ,\"cc\"];\n\necho find_max($words3);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5whk1gi.php:30\n\
    Stack trace:\n#0 /tmp/tmpk5whk1gi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk5whk1gi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $count = [];\n  foreach ($words as $word) {\n\
    \    $count[$word] = count(count_chars($word, 1));\n  }\n  $max = max($count);\n\
    \  foreach ($count as $key => $value) {\n    if ($value == $max) {\n      return\
    \ $key;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizouutt0.php:28\n\
    Stack trace:\n#0 /tmp/tmpizouutt0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpizouutt0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $unique_chars = [];\n    foreach ($words as\
    \ $word) {\n        $unique_chars[$word] = count_chars($word, 1);\n    }\n   \
    \ uasort($unique_chars, function($a, $b) {\n        return count($a) < count($b);\n\
    \    });\n    return key($unique_chars);\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx_3mr6f.php:26\n\
    Stack trace:\n#0 /tmp/tmpfx_3mr6f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfx_3mr6f.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $maxWord = $words[0];\n  $maxChars = array_unique(str_split($maxWord));\n\
    \  foreach ($words as $word) {\n    $wordArray = array_unique(str_split($word));\n\
    \    if (count($wordArray) > count($maxChars)) {\n      $maxWord = $word;\n  \
    \    $maxChars = $wordArray;\n    }\n  }\n  return $maxWord;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk3trna0.php:28\n\
    Stack trace:\n#0 /tmp/tmpfk3trna0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfk3trna0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_char_count = 0;\n    $result =\
    \ null;\n    foreach ($words as $word) {\n        $unique_char_count = count(array_unique(str_split($word)));\n\
    \        if ($unique_char_count > $max_unique_char_count) {\n            $max_unique_char_count\
    \ = $unique_char_count;\n            $result = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\necho find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho\
    \ find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzlb_flbc.php:31\nStack trace:\n#0 /tmp/tmpzlb_flbc.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzlb_flbc.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_words = [];\n    foreach\
    \ ($words as $word) {\n        $u = unique($word);\n        if ($u > $max) {\n\
    \            $max = $u;\n            $max_words = [$word];\n        } elseif ($u\
    \ == $max) {\n            $max_words[] = $word;\n        }\n    }\n    sort($max_words);\n\
    \    return $max_words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique() in /tmp/tmp9_7pd_g5.php:13\n\
    Stack trace:\n#0 /tmp/tmp9_7pd_g5.php(26): find_max(Array)\n#1 /tmp/tmp9_7pd_g5.php(30):\
    \ candidate(Array)\n#2 /tmp/tmp9_7pd_g5.php(42): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp9_7pd_g5.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // TODO: Implement this function\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53jfs37e.php:18\n\
    Stack trace:\n#0 /tmp/tmp53jfs37e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp53jfs37e.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxLen = 0;\n    $maxWord = null;\n    foreach\
    \ ($words as $word) {\n        $chars = str_split($word);\n        $uniqueChars\
    \ = array_unique($chars);\n        $uniqueLen = count($uniqueChars);\n       \
    \ if ($uniqueLen > $maxLen) {\n            $maxLen = $uniqueLen;\n           \
    \ $maxWord = $word;\n        }\n    }\n    return $maxWord;\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]).\"\\n\";\necho find_max([\"name\", \"enam\", \"game\"\
    ]).\"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnpuvtrek.php:33\nStack trace:\n#0 /tmp/tmpnpuvtrek.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnpuvtrek.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = '';\n    $max_num = 0;\n    foreach\
    \ ($words as $word) {\n        $current_num = strlen(count_chars($word, 1));\n\
    \        if ($current_num >= $max_num) {\n            $max_num = $current_num;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    $words = ['name', 'of', 'string'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpuuf5eqm4.php\
    \ on line 13\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpuuf5eqm4.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpuuf5eqm4.php on line 13\nstring\nWarning:\
    \ strlen() expects parameter 1 to be string, array given in /tmp/tmpuuf5eqm4.php\
    \ on line 13\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpuuf5eqm4.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmpuuf5eqm4.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmpuuf5eqm4.php on line\
    \ 13\n\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpuuf5eqm4.php\
    \ on line 13\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpuuf5eqm4.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpuuf5eqm4.php:29\nStack trace:\n#0 /tmp/tmpuuf5eqm4.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuuf5eqm4.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = \"\";\n\tforeach ($words as $word) {\n\
    \t\tif (strlen($word) > strlen($max)) {\n\t\t\t$max = $word;\n\t\t}\n\t}\n\treturn\
    \ $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmheixe2.php:24\n\
    Stack trace:\n#0 /tmp/tmprmheixe2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprmheixe2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // TODO: code solution\n    $maxUniqueCount\
    \ = 0;\n    $maxUniqueWord = \"\";\n    foreach ($words as $word) {\n        $uniqueCount\
    \ = getUniqueCount($word);\n        if ($uniqueCount > $maxUniqueCount) {\n  \
    \          $maxUniqueCount = $uniqueCount;\n            $maxUniqueWord = $word;\n\
    \        }\n    }\n    return $maxUniqueWord;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getUniqueCount()\
    \ in /tmp/tmp7ntay1iz.php:14\nStack trace:\n#0 /tmp/tmp7ntay1iz.php(24): find_max(Array)\n\
    #1 /tmp/tmp7ntay1iz.php(28): candidate(Array)\n#2 /tmp/tmp7ntay1iz.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ntay1iz.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_chars = 0;\n    $max_words = array();\n\
    \    foreach ($words as $word) {\n        $chars = count_chars($word, 1);\n  \
    \      if (count($chars) > $max_chars) {\n            $max_chars = count($chars);\n\
    \            $max_words = array($word);\n        } elseif (count($chars) == $max_chars)\
    \ {\n            $max_words[] = $word;\n        }\n    }\n    return min($max_words);\n\
    }\n\n$words = array(\"name\", \"of\", \"string\");\n$result = find_max($words);\n\
    print_r($result);\necho \"\\n\";\n\n$words = array(\"name\", \"enam\", \"game\"\
    );\n$result = find_max($words);\nprint_r($result);\necho \"\\n\";\n\n$words =\
    \ array(\"aaaaaaa\", \"bb\" ,\"cc\");\n$result = find_max($words);\nprint_r($result);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (!is_array($words)) {\n        return false;\n\
    \    }\n    $unique_letters = [];\n    foreach ($words as $word) {\n        $temp\
    \ = array_unique(str_split($word));\n        $unique_letters[$word] = count($temp);\n\
    \    }\n    return key($unique_letters);\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_w_xnhfz.php:26\n\
    Stack trace:\n#0 /tmp/tmp_w_xnhfz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_w_xnhfz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = $words[0];\n\t$max_len = strlen(count_chars($max,\
    \ 1));\n\tforeach ($words as $word) {\n\t\t$len = strlen(count_chars($word, 1));\n\
    \t\tif ($len > $max_len) {\n\t\t\t$max = $word;\n\t\t\t$max_len = $len;\n\t\t\
    }\n\t}\n\treturn $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmppnm7gua1.php\
    \ on line 11\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmppnm7gua1.php on line 13\n\nWarning: strlen() expects parameter 1\
    \ to be string, array given in /tmp/tmppnm7gua1.php on line 13\n\nWarning: strlen()\
    \ expects parameter 1 to be string, array given in /tmp/tmppnm7gua1.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnm7gua1.php:27\n\
    Stack trace:\n#0 /tmp/tmppnm7gua1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppnm7gua1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = $words[0];\n  foreach ($words as $word)\
    \ {\n    if (count(array_unique(str_split($word))) > count(array_unique(str_split($max))))\
    \ {\n      $max = $word;\n    }\n  }\n  return $max;\n}\n\necho find_max([\"name\"\
    , \"of\", \"string\"]) . \"<br>\";\necho find_max([\"name\", \"enam\", \"game\"\
    ]) . \"<br>\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"<br>\";\necho\
    \ find_max([\"aa\", \"aaaa\", \"aaaaa\"]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa<br>aa<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1qdtidjj.php:29\nStack trace:\n#0 /tmp/tmp1qdtidjj.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1qdtidjj.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxword = \"\";\n    $maxcount = 0;\n    foreach\
    \ ($words as $word) {\n        $count = count_unique_chars($word);\n        if\
    \ ($count > $maxcount) {\n            $maxcount = $count;\n            $maxword\
    \ = $word;\n        }\n    }\n    return $maxword;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpyg_snvzz.php:13\nStack trace:\n#0 /tmp/tmpyg_snvzz.php(22): find_max(Array)\n\
    #1 /tmp/tmpyg_snvzz.php(26): candidate(Array)\n#2 /tmp/tmpyg_snvzz.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyg_snvzz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $results = [];\n  foreach ($words as $word) {\n\
    \    $results[$word] = count_chars($word, 1);\n  }\n  usort($results, function($a,\
    \ $b) {\n    if (count($a) == count($b)) {\n      return strcmp(key($a), key($b));\n\
    \    }\n    return count($b) - count($a);\n  });\n  return key($results[0]);\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"\
    name\", \"enam\", \"game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "103\n97\n97\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2hbek4e.php:31\n\
    Stack trace:\n#0 /tmp/tmpm2hbek4e.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm2hbek4e.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_words = array();\n  $max_count = 0;\n  foreach\
    \ ($words as $word) {\n    $current_count = strlen(implode(array_unique(str_split($word))));\n\
    \    if ($current_count == $max_count) {\n      $max_words[] = $word;\n    } elseif\
    \ ($current_count > $max_count) {\n      $max_words = array($word);\n      $max_count\
    \ = $current_count;\n    }\n  }\n  sort($max_words);\n  return $max_words[0];\n\
    }\n\necho find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"\
    name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_letters = '';\n    $max_letters\
    \ = 0;\n    foreach ($words as $word) {\n        $unique_letters = [];\n     \
    \   $letters = 0;\n        foreach (str_split($word) as $letter) {\n         \
    \   if (!array_key_exists($letter, $unique_letters)) {\n                $unique_letters[$letter]\
    \ = true;\n                $letters++;\n            }\n        }\n        if ($letters\
    \ > $max_letters) {\n            $max_letters = $letters;\n            $max_unique_letters\
    \ = $word;\n        }\n    }\n    return $max_unique_letters;\n}\necho find_max([\"\
    name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"\
    game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3510o675.php:37\nStack trace:\n#0 /tmp/tmp3510o675.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3510o675.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = \"\";\n    $max_num = 0;\n    foreach\
    \ ($words as $word) {\n        $letters = str_split($word);\n        $unique_letters\
    \ = array_unique($letters);\n        $unique_num = count($unique_letters);\n \
    \       if ($unique_num > $max_num) {\n            $max_num = $unique_num;\n \
    \           $max_word = $word;\n        }\n    }\n    return $max_word;\n}\necho\
    \ find_max([\"name\", \"of\", \"string\"]);\necho \"<br>\";\necho find_max([\"\
    name\", \"enam\", \"game\"]);\necho \"<br>\";\necho find_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpibnzpgih.php:34\nStack trace:\n#0 /tmp/tmpibnzpgih.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpibnzpgih.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$strs = [];\n\tforeach ($words as $word) {\n\t\
    \t$strs[$word] = strlen(count_chars($word, 3));\n\t}\n\tasort($strs);\n\t$results\
    \ = array_keys($strs);\n\treturn $results[count($results) - 1];\n}\n\nprint_r(find_max([\"\
    name\", \"of\", \"string\"]));\nprint_r(find_max([\"name\", \"enam\", \"game\"\
    ]));\nprint_r(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "stringgamecc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmitpqtn3.php:28\n\
    Stack trace:\n#0 /tmp/tmpmitpqtn3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmitpqtn3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = array();\n\t$maxValue = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$uniqueChars = array_unique(str_split($word));\n\t\t\
    $uniqueCharsCount = count($uniqueChars);\n\t\tif ($uniqueCharsCount > $maxValue)\
    \ {\n\t\t\t$max = array($word);\n\t\t\t$maxValue = $uniqueCharsCount;\n\t\t} else\
    \ if ($uniqueCharsCount == $maxValue) {\n\t\t\tarray_push($max, $word);\n\t\t\
    }\n\t}\n\t// Only one word with max number of unique characters\n\tif (count($max)\
    \ == 1) {\n\t\treturn $max[0];\n\t}\n\t// More than one word, need to compare\
    \ lexicographically\n\t$sortedWords = $max;\n\tsort($sortedWords);\n\treturn $sortedWords[0];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $idx = 0;\n    foreach ($words\
    \ as $word) {\n        $length = strlen(count_chars($word, 3));\n        if ($length\
    \ > $max) {\n            $max = $length;\n            $idx = $word;\n        }\n\
    \    }\n    return $idx;\n}\n\necho find_max([\"name\", \"of\", \"string\"]).\"\
    \\n\";\necho find_max([\"name\", \"enam\", \"game\"]).\"\\n\";\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]).\"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_p3gh903.php:32\nStack trace:\n#0 /tmp/tmp_p3gh903.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_p3gh903.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max_string = \"\";\n\t$max_chars = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$char_count = array_count_values(str_split($word));\n\
    \t\t$unique_chars = count($char_count);\n\t\tif ($unique_chars > $max_chars) {\n\
    \t\t\t$max_chars = $unique_chars;\n\t\t\t$max_string = $word;\n\t\t}\n\t}\n\t\
    return $max_string;\n}\n\n$words = [\"name\", \"of\", \"string\"];\necho find_max($words)\
    \ . PHP_EOL;\n\n$words = [\"name\", \"enam\", \"game\"];\necho find_max($words)\
    \ . PHP_EOL;\n\n$words = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkbs0tjxw.php:37\nStack trace:\n#0 /tmp/tmpkbs0tjxw.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkbs0tjxw.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t// your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53_oi9to.php:18\n\
    Stack trace:\n#0 /tmp/tmp53_oi9to.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp53_oi9to.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $str = \"\";\n    foreach ($words\
    \ as $word) {\n        $res = count_chars($word, 1);\n        $res = count($res);\n\
    \        if ($res > $max) {\n            $max = $res;\n            $str = $word;\n\
    \        }\n    }\n    return $str;\n}\n\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7akgcsr2.php:30\n\
    Stack trace:\n#0 /tmp/tmp7akgcsr2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7akgcsr2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max = array_map('count_chars', $words);\n\t\
    $key = array_search(max($max), $max);\n\treturn $words[$key];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiys153s1.php:20\n\
    Stack trace:\n#0 /tmp/tmpiys153s1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpiys153s1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Reverse sort the given array\n    rsort($words);\n\
    \    // Get the first value in array, which should be the greatest one\n    $max\
    \ = $words[0];\n    // Get the length of the first value\n    $max_length = strlen($max);\n\
    \    // Loop through all the words\n    foreach ($words as $word) {\n        //\
    \ For each word, get the length of it\n        $word_length = strlen($word);\n\
    \        // If a word is shorter than the first item (greatest value)\n      \
    \  if ($word_length < $max_length) {\n            // Break out of loop, since\
    \ a word can only have more unique characters\n            // if it is longer,\
    \ and we have already checked the longest\n            break;\n        }\n   \
    \     // If the word is equal to the greatest value, and they both have the same\
    \ number of characters\n        else if ($word_length == $max_length) {\n    \
    \        // Set the max variable to the first word, and break out of loop\n  \
    \          $max = $word;\n            break;\n        }\n    }\n    // Return\
    \ the greatest value\n    return $max;\n}\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43vo7spg.php:42\n\
    Stack trace:\n#0 /tmp/tmp43vo7spg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp43vo7spg.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = \"\";\n    $max_unique_chars =\
    \ 0;\n    foreach ($words as $word) {\n        $unique_chars = count_unique_chars($word);\n\
    \        if ($unique_chars > $max_unique_chars) {\n            $max_unique_chars\
    \ = $unique_chars;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpyzesr049.php:13\nStack trace:\n#0 /tmp/tmpyzesr049.php(23): find_max(Array)\n\
    #1 /tmp/tmpyzesr049.php(27): candidate(Array)\n#2 /tmp/tmpyzesr049.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyzesr049.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $frequency_array = [];\n  foreach ($words as\
    \ $key => $word) {\n    $chars = str_split($word);\n    $frequency_array[$key]\
    \ = count(array_unique($chars));\n  }\n  $max_frequency = max($frequency_array);\n\
    \  $max_frequency_index = array_search($max_frequency, $frequency_array);\n  return\
    \ $words[$max_frequency_index];\n}\n\necho find_max([\"name\", \"of\", \"string\"\
    ]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptf63s9wm.php:30\nStack trace:\n#0 /tmp/tmptf63s9wm.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmptf63s9wm.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $arr = [];\n    foreach ($words as $word) {\n\
    \        $arr[$word] = count_unique_characters($word);\n    }\n    arsort($arr);\n\
    \    return key($arr);\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmp6bm0fft9.php:12\nStack trace:\n#0 /tmp/tmp6bm0fft9.php(19): find_max(Array)\n\
    #1 /tmp/tmp6bm0fft9.php(23): candidate(Array)\n#2 /tmp/tmp6bm0fft9.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6bm0fft9.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = NULL;\n  $max_uniq_chars = 0;\n \
    \ foreach ($words as $word) {\n    $unique_chars = count_unique_chars($word);\n\
    \    if ($unique_chars > $max_uniq_chars) {\n      $max_uniq_chars = $unique_chars;\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp3p7drd56.php:13\nStack trace:\n#0 /tmp/tmp3p7drd56.php(23): find_max(Array)\n\
    #1 /tmp/tmp3p7drd56.php(27): candidate(Array)\n#2 /tmp/tmp3p7drd56.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3p7drd56.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $result = '';\n  foreach ($words\
    \ as $key => $word) {\n    $chars = [];\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      $chars[$word[$i]] = 1;\n    }\n    if (count($chars) > $max)\
    \ {\n      $max = count($chars);\n      $result = $word;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f0dh3er.php:30\n\
    Stack trace:\n#0 /tmp/tmp4f0dh3er.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4f0dh3er.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    foreach\
    \ ($words as $word) {\n        $chars = count_chars($word, 3);\n        if (strlen($chars)\
    \ > $max) {\n            $max = strlen($chars);\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmypwn4m4.php:28\n\
    Stack trace:\n#0 /tmp/tmpmypwn4m4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmypwn4m4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // Split the list into an array\n    $word_array\
    \ = explode(\",\", $words);\n    $count = 0;\n    $word = \"\";\n    // Loop through\
    \ the array\n    foreach ($word_array as $key => $value) {\n        // Count the\
    \ number of unique characters in each word\n        $unique_chars = count_chars($value,3);\n\
    \        // Keep the word if it has more unique characters than the previous word\n\
    \        if ($unique_chars > $count) {\n            $count = $unique_chars;\n\
    \            $word = $value;\n        }\n    }\n    // Return the word with the\
    \ most unique characters\n    return $word;\n}\necho find_max(\"name,of,string\"\
    ) . \"<br>\";\necho find_max(\"name,enam,game\") . \"<br>\";\necho find_max(\"\
    aaaaaaa,bb,cc\") . \"<br>\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br>\nWarning: explode() expects parameter 2 to be string, array\
    \ given in /tmp/tmphgclhzrm.php on line 11\n\nWarning: Invalid argument supplied\
    \ for foreach() in /tmp/tmphgclhzrm.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphgclhzrm.php:35\nStack trace:\n#0 /tmp/tmphgclhzrm.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphgclhzrm.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_value = '';\n    foreach\
    \ ($words as $key => $value) {\n        $unique_count = count(array_unique(str_split($value)));\n\
    \        if ($unique_count > $max) {\n            $max = $unique_count;\n    \
    \        $max_value = $value;\n        }\n    }\n    return $max_value;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq90ro18.php:28\n\
    Stack trace:\n#0 /tmp/tmpxq90ro18.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxq90ro18.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_char_words = array();\n    $max_unique_char_count\
    \ = 0;\n    foreach ($words as $word) {\n        $unique_chars = count_unique_chars($word);\n\
    \        if ($unique_chars > $max_unique_char_count) {\n            $max_unique_char_count\
    \ = $unique_chars;\n            $max_unique_char_words = array($word);\n     \
    \   } else if ($unique_chars == $max_unique_char_count) {\n            $max_unique_char_words[]\
    \ = $word;\n        }\n    }\n    return min($max_unique_char_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp76gccc7x.php:13\nStack trace:\n#0 /tmp/tmp76gccc7x.php(25): find_max(Array)\n\
    #1 /tmp/tmp76gccc7x.php(29): candidate(Array)\n#2 /tmp/tmp76gccc7x.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp76gccc7x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $uniques = [];\n    foreach ($words as $word)\
    \ {\n        $cnt = 0;\n        $letter = $word[0];\n        while ($letter !==\
    \ \"\") {\n            $cnt++;\n            $letter = $word[$cnt];\n        }\n\
    \        $uniques[] = $cnt;\n    }\n    return max($uniques);\n}\necho find_max([\"\
    name\", \"of\", \"string\"]);\necho find_max([\"name\", \"enam\", \"game\"]);\n\
    echo find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "647\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8553f31o.php:30\n\
    Stack trace:\n#0 /tmp/tmp8553f31o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8553f31o.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $word = '';\n  foreach ($words as\
    \ $word) {\n    $uniques = array_unique(str_split($word));\n    if (count($uniques)\
    \ > $max) {\n      $max = count($uniques);\n      $max_word = $word;\n    }\n\
    \  }\n  return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnp_ggm7.php:27\n\
    Stack trace:\n#0 /tmp/tmpdnp_ggm7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdnp_ggm7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $arr = array();\n    foreach ($words as $word)\
    \ {\n        $arr[$word] = array_unique(str_split($word));\n    }\n    $count_chars\
    \ = array_map(function($word) {\n        return count($word);\n    }, $arr);\n\
    \    asort($count_chars);\n    $res = array_slice($count_chars, -1);\n    $arr_key\
    \ = array_keys($res);\n    return $arr_key[0];\n}\n\n$words = [\"name\", \"of\"\
    , \"string\"];\nvar_dump(find_max($words));\necho \"<br>\";\n$words = [\"name\"\
    , \"enam\", \"game\"];\nvar_dump(find_max($words));\necho \"<br>\";\n$words =\
    \ [\"aaaaaaa\", \"bb\" ,\"cc\"];\nvar_dump(find_max($words));\necho \"<br>\";\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(6) \"string\"\n<br>string(4) \"game\"\n<br>string(2) \"cc\"\n<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjou_deo_.php:39\nStack\
    \ trace:\n#0 /tmp/tmpjou_deo_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjou_deo_.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = -1;\n    $max_index = -1;\n  \
    \  foreach ($words as $index => $word) {\n        $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_index = $index;\n        }\n    }\n    return $words[$max_index];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpkng5ncmy.php:13\nStack trace:\n#0 /tmp/tmpkng5ncmy.php(22): find_max(Array)\n\
    #1 /tmp/tmpkng5ncmy.php(26): candidate(Array)\n#2 /tmp/tmpkng5ncmy.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkng5ncmy.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_word = '';\n  $max_char = 0;\n  foreach\
    \ ($words as $word) {\n    $char = array_unique(str_split($word));\n    if (count($char)\
    \ > $max_char) {\n      $max_char = count($char);\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\n$words = [\"name\", \"of\", \"string\"];\n\
    echo find_max($words);\necho \"\\n\";\n$words = [\"name\", \"enam\", \"game\"\
    ];\necho find_max($words);\necho \"\\n\";\n$words = [\"aaaaaaa\", \"bb\" ,\"cc\"\
    ];\necho find_max($words);\necho \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_shehaat.php:36\nStack trace:\n#0 /tmp/tmp_shehaat.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_shehaat.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_len = 0;\n    $max_word = NULL;\n    foreach\
    \ ($words as $word) {\n        $chars = array_unique(str_split($word));\n    \
    \    $word_len = count($chars);\n        if ($word_len > $max_len) {\n       \
    \     $max_len = $word_len;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbs0g1o91.php:28\n\
    Stack trace:\n#0 /tmp/tmpbs0g1o91.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbs0g1o91.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = [\"max_count\" => 0, \"max_word\" =>\
    \ \"\"];\n    foreach ($words as $word) {\n        $unique_chars = [];\n     \
    \   for ($i = 0; $i < strlen($word); $i++) {\n            $unique_chars[$word[$i]]\
    \ = true;\n        }\n        $unique_chars_count = count($unique_chars);\n  \
    \      if ($unique_chars_count > $max[\"max_count\"]) {\n            $max[\"max_count\"\
    ] = $unique_chars_count;\n            $max[\"max_word\"] = $word;\n        } else\
    \ if ($unique_chars_count == $max[\"max_count\"]) {\n            if ($word < $max[\"\
    max_word\"]) {\n                $max[\"max_word\"] = $word;\n            }\n \
    \       }\n    }\n    return $max[\"max_word\"];\n}\n\n$words1 = [\"name\", \"\
    of\", \"string\"];\n$words2 = [\"name\", \"enam\", \"game\"];\n$words3 = [\"aaaaaaa\"\
    , \"bb\" ,\"cc\"];\nprint_r(find_max($words1) . \"\\n\");\nprint_r(find_max($words2)\
    \ . \"\\n\");\nprint_r(find_max($words3) . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $length = 0;\n  $max_word = \"\";\n  foreach\
    \ ($words as $word) {\n    $uniq = count_chars($word, 1);\n    if (count($uniq)\
    \ > $length) {\n      $length = count($uniq);\n      $max_word = $word;\n    }\n\
    \  }\n  return $max_word;\n}\n$words = [\"name\", \"of\", \"string\"];\necho find_max($words)\
    \ . \"\\n\";\n$words = [\"name\", \"enam\", \"game\"];\necho find_max($words)\
    \ . \"\\n\";\n$words = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1ux5ho47.php:33\nStack trace:\n#0 /tmp/tmp1ux5ho47.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1ux5ho47.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $counts = [];\n    foreach ($words as $word)\
    \ {\n        $unique = array_unique(str_split($word));\n        $counts[$word]\
    \ = count($unique);\n    }\n    arsort($counts);\n    reset($counts);\n    return\
    \ key($counts);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqbil7v2.php:25\n\
    Stack trace:\n#0 /tmp/tmpbqbil7v2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbqbil7v2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_str = \"\";\n  $max_len = 0;\n  $arr_words\
    \ = str_split($words);\n  foreach ($arr_words as $word) {\n    $len = count(array_unique(str_split($word)));\n\
    \    if ($len > $max_len) {\n      $max_len = $len;\n      $max_str = $word;\n\
    \    }\n  }\n  return $max_str;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: str_split() expects parameter 1 to be string, array given in\
    \ /tmp/tmp2qwbxsrf.php on line 12\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmp2qwbxsrf.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp2qwbxsrf.php:28\nStack trace:\n#0 /tmp/tmp2qwbxsrf.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2qwbxsrf.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  // Write your code here\n  $max = 0;\n  $max_word\
    \ = \"\";\n  foreach ($words as $word) {\n    $uniques = array_unique(str_split($word));\n\
    \    if (count($uniques) > $max) {\n      $max = count($uniques);\n      $max_word\
    \ = $word;\n    }\n  }\n  return $max_word;\n}\n\necho find_max([\"name\", \"\
    of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"game\"]) .\
    \ PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6hnjix2a.php:32\nStack trace:\n#0 /tmp/tmp6hnjix2a.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6hnjix2a.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxCount = 0;\n    $returnValue = \"\";\n\
    \    foreach ($words as $word) {\n        $characters = str_split($word);\n  \
    \      $uniqueCharArray = array_unique($characters);\n        $uniqueCharCount\
    \ = count($uniqueCharArray);\n        if ($uniqueCharCount > $maxCount) {\n  \
    \          $maxCount = $uniqueCharCount;\n            $returnValue = $word;\n\
    \        }\n    }\n    return $returnValue;\n}\n$words = [\"name\", \"of\", \"\
    string\"];\necho find_max($words);\necho \"<br>\";\n$words = [\"name\", \"enam\"\
    , \"game\"];\necho find_max($words);\necho \"<br>\";\n$words = [\"aaaaaaa\", \"\
    bb\" ,\"cc\"];\necho find_max($words);\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmparxcvdwz.php:38\nStack trace:\n#0 /tmp/tmparxcvdwz.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmparxcvdwz.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $count = 0;\n    $word = '';\n    foreach ($words\
    \ as $word) {\n        $word_count = count_unique_chars($word);\n        if ($word_count\
    \ > $count) {\n            $count = $word_count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp244vyi9b.php:13\nStack trace:\n#0 /tmp/tmp244vyi9b.php(23): find_max(Array)\n\
    #1 /tmp/tmp244vyi9b.php(27): candidate(Array)\n#2 /tmp/tmp244vyi9b.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp244vyi9b.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words_splitted = [];\n    foreach ($words\
    \ as $word) {\n        $words_splitted[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words_splitted as $word) {\n        $result[] = count(array_unique($word));\n\
    \    }\n    $maximum = max($result);\n    $index_of_max = array_search($maximum,\
    \ $result);\n    return $words[$index_of_max];\n}\n\necho find_max([\"name\",\
    \ \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"name\", \"enam\", \"game\"\
    ]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpv6u51p94.php:32\nStack trace:\n#0 /tmp/tmpv6u51p94.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpv6u51p94.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max_word = \"\";\n\t$max_uniq_chars = 0;\n\t\
    foreach ($words as $word) {\n\t\t$word_uniq_chars = count_chars($word, 1);\n\t\
    \tif (count($word_uniq_chars) > $max_uniq_chars) {\n\t\t\t$max_uniq_chars = count($word_uniq_chars);\n\
    \t\t\t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\n\n$input = [\"name\"\
    , \"of\", \"string\"];\necho find_max($input) . \"\\n\";\n$input = [\"name\",\
    \ \"enam\", \"game\"];\necho find_max($input) . \"\\n\";\n$input = [\"aaaaaaa\"\
    , \"bb\" ,\"cc\"];\necho find_max($input) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_1sjboys.php:34\nStack trace:\n#0 /tmp/tmp_1sjboys.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_1sjboys.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t// if(isset($words[0])) {\n\t// \t$curr_word\
    \ = $words[0];\n\t// \t$max_count = get_count_unique_characters($curr_word);\n\
    \t// \tfor($i = 1; $i < count($words); $i++) {\n\t// \t\t$temp_count = get_count_unique_characters($words[$i]);\n\
    \t// \t\tif($temp_count > $max_count) {\n\t// \t\t\t$max_count = $temp_count;\n\
    \t// \t\t\t$curr_word = $words[$i];\n\t// \t\t}\n\t// \t}\n\t// \treturn $curr_word;\n\
    \t// }\n\t// else {\n\t// \treturn \"\";\n\t// }\n\t$curr_word = \"\";\n\t$max_count\
    \ = 0;\n\tforeach($words as $word) {\n\t\t$temp_count = get_count_unique_characters($word);\n\
    \t\tif($temp_count > $max_count) {\n\t\t\t$max_count = $temp_count;\n\t\t\t$curr_word\
    \ = $word;\n\t\t}\n\t}\n\treturn $curr_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_count_unique_characters()\
    \ in /tmp/tmpjtq41xze.php:28\nStack trace:\n#0 /tmp/tmpjtq41xze.php(38): find_max(Array)\n\
    #1 /tmp/tmpjtq41xze.php(42): candidate(Array)\n#2 /tmp/tmpjtq41xze.php(54): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjtq41xze.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$words_chars = array();\n\t$words_by_chars =\
    \ array();\n\tforeach ($words as $word) {\n\t\t$unique_chars = array_unique(str_split($word));\n\
    \t\tsort($unique_chars);\n\t\t$words_chars[$word] = $unique_chars;\n\t\t$words_by_chars[implode($unique_chars)]\
    \ = $word;\n\t}\n\trsort($words_by_chars);\n\treturn $words_by_chars[0];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqnadood.php:27\n\
    Stack trace:\n#0 /tmp/tmpgqnadood.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgqnadood.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $counts = array_map(function($word) {\n   \
    \     return count_chars($word, 1);\n    }, $words);\n    $max = 0;\n    foreach\
    \ ($counts as $count) {\n        $max = count($count) > $max ? count($count) :\
    \ $max;\n    }\n    $max_words = array_keys($counts, function($count) use ($max)\
    \ {\n        return count($count) == $max;\n    });\n    asort($max_words);\n\
    \    return $max_words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61ihfqrv.php:29\n\
    Stack trace:\n#0 /tmp/tmp61ihfqrv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp61ihfqrv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = [];\n    foreach ($words as $word) {\n\
    \        if (count(count_chars($word, 1)) > count($max)) {\n            $max =\
    \ count_chars($word, 1);\n        }\n    }\n    print_r($max);\n}\n\nfind_max([\"\
    name\", \"of\", \"string\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [103] => 1\n    [105] => 1\n    [110] => 1\n    [114] =>\
    \ 1\n    [115] => 1\n    [116] => 1\n)\nArray\n(\n    [103] => 1\n    [105] =>\
    \ 1\n    [110] => 1\n    [114] => 1\n    [115] => 1\n    [116] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4d265bfx.php:25\nStack trace:\n\
    #0 /tmp/tmp4d265bfx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4d265bfx.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max_string = \"\";\n\t$max_length = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$characters = str_split($word);\n\t\t$unique_characters\
    \ = array_unique($characters);\n\t\t$length = count($unique_characters);\n\t\t\
    if ($length > $max_length) {\n\t\t\t$max_length = $length;\n\t\t\t$max_string\
    \ = $word;\n\t\t}\n\t}\n\treturn $max_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6gvjt_2.php:30\n\
    Stack trace:\n#0 /tmp/tmpg6gvjt_2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg6gvjt_2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $words_filtered = [];\n    foreach ($words\
    \ as $word) {\n        $words_filtered[] = array_unique(str_split($word));\n \
    \   }\n    $words_filtered = array_map(function($letter) {\n        return implode('',\
    \ $letter);\n    }, $words_filtered);\n    $max_length = max(array_map('strlen',\
    \ $words_filtered));\n    $words_filtered = array_filter($words_filtered, function($word)\
    \ use ($max_length) {\n        return strlen($word) == $max_length;\n    });\n\
    \    return implode('', $words_filtered);\n}\n\n$data = [\n    [\"name\", \"of\"\
    , \"string\"],\n    [\"name\", \"enam\", \"game\"],\n    [\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"],\n];\n\n$count = 0;\nforeach ($data as $test_data) {\n    echo ++$count\
    \ . \" : \" . var_export(find_max($test_data), true) . PHP_EOL;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1 : 'string'\n2 : 'nameenamgame'\n3 : 'abc'\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7hwmlde3.php:40\nStack trace:\n#0 /tmp/tmp7hwmlde3.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7hwmlde3.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_word = $words[0];\n    $max_unique_characters\
    \ = 0;\n    foreach ($words as $word) {\n        $unique_characters = count_unique_characters($word);\n\
    \        if ($unique_characters > $max_unique_characters) {\n            $max_unique_characters\
    \ = $unique_characters;\n            $max_word = $word;\n        }\n    }\n  \
    \  return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpzwh4h0er.php:13\nStack trace:\n#0 /tmp/tmpzwh4h0er.php(23): find_max(Array)\n\
    #1 /tmp/tmpzwh4h0er.php(27): candidate(Array)\n#2 /tmp/tmpzwh4h0er.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzwh4h0er.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$result = \"\";\n\t$maxUnique = 0;\n\tforeach\
    \ ($words as $word) {\n\t\t$unique = 0;\n\t\t$chars = str_split($word);\n\t\t\
    $used = [];\n\t\tforeach ($chars as $char) {\n\t\t\tif (array_search($char, $used)\
    \ === false) {\n\t\t\t\t$unique++;\n\t\t\t\t$used[] = $char;\n\t\t\t}\n\t\t}\n\
    \t\tif ($unique >= $maxUnique) {\n\t\t\t$maxUnique = $unique;\n\t\t\t$result =\
    \ $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$result = find_max([\"name\", \"\
    of\", \"string\"]);\nif ($result == \"string\") {\n\techo \"Test1 passed<br/>\"\
    ;\n} else {\n\techo \"Test1 failed<br/>\";\n}\n\n$result = find_max([\"name\"\
    , \"enam\", \"game\"]);\nif ($result == \"enam\") {\n\techo \"Test2 passed<br/>\"\
    ;\n} else {\n\techo \"Test2 failed<br/>\";\n}\n\n$result = find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]);\nif ($result == \"aaaaaaa\") {\n\techo \"Test3 passed<br/>\"\
    ;\n} else {\n\techo \"Test3 failed<br/>\";\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Test1 passed<br/>Test2 failed<br/>Test3 failed<br/>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0kqcom9w.php:56\nStack trace:\n#0 /tmp/tmp0kqcom9w.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0kqcom9w.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $maxUnique = 0;\n    $maxIndex = 0;\n    for\
    \ ($i = 0; $i < count($words); $i++) {\n        $word = $words[$i];\n        $currentUnique\
    \ = 0;\n        $seen = [];\n        for ($j = 0; $j < strlen($word); $j++) {\n\
    \            $letter = $word[$j];\n            if (!isset($seen[$letter])) {\n\
    \                $seen[$letter] = true;\n                $currentUnique++;\n \
    \           }\n        }\n        if ($currentUnique > $maxUnique) {\n       \
    \     $maxUnique = $currentUnique;\n            $maxIndex = $i;\n        }\n \
    \   }\n    return $words[$maxIndex];\n}\n$arr = [\"name\", \"of\", \"string\"\
    ];\nprint_r(find_max($arr));\necho \"\\n\";\n$arr = [\"name\", \"enam\", \"game\"\
    ];\nprint_r(find_max($arr));\necho \"\\n\";\n$arr = [\"aaaaaaa\", \"bb\" ,\"cc\"\
    ];\nprint_r(find_max($arr));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjttm77h6.php:45\nStack trace:\n#0 /tmp/tmpjttm77h6.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjttm77h6.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_unique_chars = 0;\n  $unique_chars = 0;\n\
    \  $max_words = \"\";\n  foreach ($words as $word) {\n    $unique_chars = count_unique_chars($word);\n\
    \    if ($unique_chars > $max_unique_chars) {\n      $max_unique_chars = $unique_chars;\n\
    \      $max_words = $word;\n    }\n  }\n  return $max_words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmppeh4ihww.php:14\nStack trace:\n#0 /tmp/tmppeh4ihww.php(24): find_max(Array)\n\
    #1 /tmp/tmppeh4ihww.php(28): candidate(Array)\n#2 /tmp/tmppeh4ihww.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppeh4ihww.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // put your code here\n    return $words;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2p5ytark.php:18\n\
    Stack trace:\n#0 /tmp/tmp2p5ytark.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2p5ytark.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = array_reduce($words, function($acc, $word)\
    \ {\n    $uniques = count_chars($word, 1);\n    if (!isset($acc['uniques']) ||\
    \ count($uniques) > $acc['uniques']) {\n      $acc['word'] = $word;\n      $acc['uniques']\
    \ = count($uniques);\n    }\n    return $acc;\n  }, array());\n  return $max['word'];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35v7nawb.php:26\n\
    Stack trace:\n#0 /tmp/tmp35v7nawb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp35v7nawb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_length = -1;\n  $max_word = '';\n  foreach\
    \ ($words as $word) {\n    $letters = array_flip(str_split($word));\n    if (count($letters)\
    \ > $max_length) {\n      $max_length = count($letters);\n      $max_word = $word;\n\
    \    }\n  }\n  return $max_word;\n}\necho find_max([\"name\", \"of\", \"string\"\
    ]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp765b5d29.php:30\nStack trace:\n#0 /tmp/tmp765b5d29.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp765b5d29.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if(count($words) === 0) {\n        return \"\
    \";\n    }\n    $counts = array_map(function($word) {\n        return count(array_unique(str_split($word)));\n\
    \    }, $words);\n    $max = max($counts);\n    $word = $words[array_search($max,\
    \ $counts)];\n    $index = array_search($word, $words);\n    for($i = $index +\
    \ 1; $i < count($words); $i++) {\n        if($counts[$i] === $max) {\n       \
    \     if($words[$i] < $word) {\n                $word = $words[$i];\n        \
    \    }\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $newArr = [];\n  foreach ($words as $word) {\n\
    \    $newArr[$word] = count_chars($word, 1);\n  }\n  $max = max($newArr);\n  $result\
    \ = array_keys($newArr, $max)[0];\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqx8ae4h.php:24\n\
    Stack trace:\n#0 /tmp/tmplqx8ae4h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplqx8ae4h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$newArray = [];\n\tforeach ($words as $word)\
    \ {\n\t\t$newArray[$word] = count_chars($word, 1);\n\t}\n\tforeach ($newArray\
    \ as $key => $value) {\n\t\t$max = max($value);\n\t\tforeach ($value as $key2\
    \ => $val) {\n\t\t\tif ($val == $max) {\n\t\t\t\treturn $key;\n\t\t\t}\n\t\t}\n\
    \t}\n}\n\necho find_max([\"name\", \"of\", \"string\"]) . PHP_EOL;\necho find_max([\"\
    name\", \"enam\", \"game\"]) . PHP_EOL;\necho find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]) . PHP_EOL;\necho find_max([\"so\", \"bu\", \"cl\"]) . PHP_EOL;\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "name\nname\naaaaaaa\nso\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6ev6lr5z.php:34\nStack trace:\n#0 /tmp/tmp6ev6lr5z.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6ev6lr5z.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if(count($words) == 0) {\n        return \"\
    \";\n    }\n\n    $max_count = -1;\n    $max_word = \"\";\n    foreach($words\
    \ as $word) {\n        $unique_count = count(array_unique(str_split($word)));\n\
    \        if($unique_count > $max_count) {\n            $max_count = $unique_count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrv_tz_k.php:31\n\
    Stack trace:\n#0 /tmp/tmpwrv_tz_k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwrv_tz_k.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = 0;\n    $max_word = \"\";\n  \
    \  foreach ($words as $w) {\n        $count = count_unique_characters($w);\n \
    \       if ($count > $max_count) {\n            $max_count = $count;\n       \
    \     $max_word = $w;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpi6qc6901.php:13\nStack trace:\n#0 /tmp/tmpi6qc6901.php(23): find_max(Array)\n\
    #1 /tmp/tmpi6qc6901.php(27): candidate(Array)\n#2 /tmp/tmpi6qc6901.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi6qc6901.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    if (!is_array($words)) {\n        return false;\n\
    \    }\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $temp_arr = str_split($word);\n        $unique_letters = array_unique($temp_arr);\n\
    \        $unique_count = count($unique_letters);\n        if ($unique_count >\
    \ $max_count) {\n            $max_count = $unique_count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\necho find_max([\"name\"\
    , \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"\
    ]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpncgkeukl.php:35\nStack trace:\n#0 /tmp/tmpncgkeukl.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpncgkeukl.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $result = \"\";\n    $len = 0;\n    foreach\
    \ ($words as $word) {\n        $set = array_unique(str_split($word));\n      \
    \  if (count($set) > $len) {\n            $len = count($set);\n            $result\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp4pd0ca.php:28\n\
    Stack trace:\n#0 /tmp/tmpwp4pd0ca.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwp4pd0ca.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $largest = '';\n  $max = 0;\n  foreach ($words\
    \ as $word) {\n    $unique = count_chars($word, 1);\n    if (count($unique) >\
    \ $max) {\n      $max = count($unique);\n      $largest = $word;\n    }\n  }\n\
    \  return $largest;\n}\n\necho find_max([\"name\", \"of\", \"string\"]) . \"\\\
    n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_ljmz0ro.php:32\nStack trace:\n#0 /tmp/tmp_ljmz0ro.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_ljmz0ro.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $max_word = '';\n    foreach\
    \ ($words as $word) {\n        $word_arr = str_split($word);\n        $unique_chars\
    \ = array_unique($word_arr);\n        $word_count = count($unique_chars);\n  \
    \      if ($word_count > $max) {\n            $max = $word_count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6a5cxtm.php:30\n\
    Stack trace:\n#0 /tmp/tmpx6a5cxtm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx6a5cxtm.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // First find the longest word\n    $longest\
    \ = \"\";\n    foreach ($words as $word) {\n        if (strlen($word) > strlen($longest))\
    \ {\n            $longest = $word;\n        }\n    }\n    // Search the list of\
    \ words to find a word with the same length as the longest\n    // and the same\
    \ number of unique characters\n    $unique_longest = array_unique(str_split($longest));\n\
    \    $same_length = [];\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == strlen($longest)) {\n            $unique_word = array_unique(str_split($word));\n\
    \            if (count($unique_word) == count($unique_longest)) {\n          \
    \      $same_length[] = $word;\n            }\n        }\n    }\n    // Now find\
    \ the first word in the list\n    $first = $same_length[0];\n    foreach ($same_length\
    \ as $word) {\n        if ($word < $first) {\n            $first = $word;\n  \
    \      }\n    }\n    return $first;\n}\necho find_max([\"name\", \"of\", \"string\"\
    ]) . \"\\n\";\necho find_max([\"name\", \"enam\", \"game\"]) . \"\\n\";\necho\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = array_values($words)[0];\n    $maxCount\
    \ = 0;\n    foreach ($words as $word) {\n        $new = array_unique(str_split($word));\n\
    \        $current = count($new);\n        if ($current >= $maxCount) {\n     \
    \       $max = $word;\n            $maxCount = $current;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8bur05s.php:29\n\
    Stack trace:\n#0 /tmp/tmpd8bur05s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd8bur05s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $res = \"\";\n  foreach ($words as $val) {\n\
    \    if ($res == \"\") {\n      $res = $val;\n    } else {\n      $res = uni_count($res)\
    \ > uni_count($val) ? $res : $val;\n    }\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function uni_count() in\
    \ /tmp/tmpd15bj96s.php:15\nStack trace:\n#0 /tmp/tmpd15bj96s.php(22): find_max(Array)\n\
    #1 /tmp/tmpd15bj96s.php(26): candidate(Array)\n#2 /tmp/tmpd15bj96s.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd15bj96s.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\t$max_len = max(array_map(function($elem) {\n\t\
    \treturn strlen(count_chars($elem, 3));\n\t}, $words));\n\t$res = array_filter($words,\
    \ function($elem) use ($max_len) {\n\t\treturn strlen(count_chars($elem, 3)) ==\
    \ $max_len;\n\t});\n\tsort($res);\n\treturn $res[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    // convert array to lower case\n    $words\
    \ = array_map('strtolower', $words);\n    // sort array in ascending order with\
    \ strings\n    asort($words);\n    // convert array to assoc array with count\
    \ of unique characters\n    $new_words = array_map(function($word) {\n       \
    \ $word_arr = str_split($word);\n        return array($word => count(array_unique($word_arr)));\n\
    \    }, $words);\n    // extract count of unique characters and sort\n    $new_words\
    \ = array_map(function($value) {\n        return key($value);\n    }, $new_words);\n\
    \    // sort in descending order\n    rsort($new_words);\n    // get the first\
    \ element from sorted array\n    $res = reset($new_words);\n    // echo the value\n\
    \    return $res;\n}\n\n$words = [\"name\", \"of\", \"string\"];\necho find_max($words);\n\
    $words = [\"name\", \"enam\", \"game\"];\necho find_max($words);\n$words = [\"\
    aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "stringnamecc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvl6qvam.php:43\n\
    Stack trace:\n#0 /tmp/tmphvl6qvam.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphvl6qvam.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $word) {\n    $string_length = strlen($word);\n    $unique_characters = unique_characters($word);\n\
    \    if (count($unique_characters) > $max) {\n      $max = count($unique_characters);\n\
    \      $result = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique_characters()\
    \ in /tmp/tmpwgt7qzzn.php:14\nStack trace:\n#0 /tmp/tmpwgt7qzzn.php(24): find_max(Array)\n\
    #1 /tmp/tmpwgt7qzzn.php(28): candidate(Array)\n#2 /tmp/tmpwgt7qzzn.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwgt7qzzn.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max = 0;\n    $word = \"\";\n    foreach ($words\
    \ as $word) {\n        $unique = str_split($word);\n        $unique = array_unique($unique);\n\
    \        $unique = count($unique);\n        if ($unique > $max) {\n          \
    \  $max = $unique;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\n$list = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($list);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "cc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvwlc7oa.php:32\n\
    Stack trace:\n#0 /tmp/tmpdvwlc7oa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdvwlc7oa.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max_unique_characters = 0;\n  $max_unique_word\
    \ = '';\n  foreach ($words as $word) {\n    if (strlen($word) > $max_unique_characters)\
    \ {\n      $max_unique_characters = strlen($word);\n      $max_unique_word = $word;\n\
    \    }\n  }\n  return $max_unique_word;\n}\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywrpyyib.php:26\n\
    Stack trace:\n#0 /tmp/tmpywrpyyib.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpywrpyyib.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $sorted = $words;\n    $results = [];\n   \
    \ for ($i = 0; $i < count($words); $i++) {\n        $char = count_chars($words[$i],\
    \ 1);\n        array_push($results, $char);\n    }\n    $comp = $results[0];\n\
    \    $max = \"\";\n    for ($i = 0; $i < count($results); $i++) {\n        if\
    \ (count($results[$i]) > count($comp)) {\n            $comp = $results[$i];\n\
    \            $max = $sorted[$i];\n        }\n    }\n    return $max;\n}\necho\
    \ find_max([\"name\", \"of\", \"string\"]) . \"\\n\";\necho find_max([\"name\"\
    , \"enam\", \"game\"]) . \"\\n\";\necho find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ]) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy28bt1s3.php:35\n\
    Stack trace:\n#0 /tmp/tmpy28bt1s3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpy28bt1s3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  foreach ($words as $word) {\n    if (!strlen($word))\
    \ {\n      continue;\n    }\n    $unique_characters = \"\";\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      if (strpos($unique_characters, $word[$i])\
    \ === false) {\n        $unique_characters .= $word[$i];\n      }\n    }\n   \
    \ if (!strlen($max_word) || strlen($unique_characters) > strlen($max_word)) {\n\
    \      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\necho find_max([\"\
    name\", \"of\", \"string\"]); // string\necho \"\\n\";\necho find_max([\"name\"\
    , \"enam\", \"game\"]); // enam\necho \"\\n\";\necho find_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\"]); // aaaaaaa\necho \"\\n\";\necho find_max([\"s\", \"b\", \"aa\"\
    ]); // s\necho \"\\n\";\necho find_max([\"name\", \"of\", \"\"]); // name\necho\
    \ \"\\n\";\necho find_max([\"\", \"\", \"\"]); //\necho \"\\n\";\necho find_max([\"\
    a\", \"b\", \"a\"]); // a\necho \"\\n\";\necho find_max([\"aa\", \"bb\"]); //\
    \ aa\necho \"\\n\";\necho find_max([\"\", \"of\", \"\"]); // of\necho \"\\n\"\
    ;\necho find_max([\"name\", \"of\", \"string\", \"a\"]); // string\necho \"\\\
    n\";\necho find_max([\"\", \"\", \"\", \"\", \"\", \"\"]); //\necho \"\\n\";\n\
    echo find_max([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc4vqb_v7.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_unique_chars = 0;\n    $max_unique_chars_word\
    \ = \"\";\n    foreach ($words as $word) {\n        if (strlen($word) > $max_unique_chars)\
    \ {\n            $max_unique_chars = strlen($word);\n            $max_unique_chars_word\
    \ = $word;\n        }\n    }\n    return $max_unique_chars_word;\n}\n\n$words\
    \ = [\"name\", \"of\", \"string\"];\necho find_max($words);\necho \"<br>\";\n\n\
    $words = [\"name\", \"enam\", \"game\"];\necho find_max($words);\necho \"<br>\"\
    ;\n\n$words = [\"aaaaaaa\", \"bb\" ,\"cc\"];\necho find_max($words);\necho \"\
    <br>\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpsbiy80yc.php:39\nStack trace:\n#0 /tmp/tmpsbiy80yc.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsbiy80yc.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $temp = '';\n  $results = '';\n  $count = 0;\n\
    \  foreach ($words as $word) {\n    $string = str_split($word);\n    $string =\
    \ array_unique($string);\n    $count_temp = count($string);\n    if ($count_temp\
    \ > $count) {\n      $count = $count_temp;\n      $results = $word;\n    }\n \
    \ }\n  return $results;\n}\nprint_r(find_max([\"name\", \"of\", \"string\"]));\n\
    echo \"<br>\";\nprint_r(find_max([\"name\", \"enam\", \"game\"]));\necho \"<br>\"\
    ;\nprint_r(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string<br>name<br>aaaaaaa\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpa0bd6oh_.php:35\nStack trace:\n#0 /tmp/tmpa0bd6oh_.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa0bd6oh_.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $char_counter = 0;\n    $new_array = [];\n\
    \    foreach ($words as $word) {\n        $char_count = count_chars($word, 1);\n\
    \        if ($char_count > $char_counter) {\n            $char_counter = $char_count;\n\
    \            $new_array = $word;\n        }\n    }\n    return $new_array;\n}\n\
    print_r(find_max([\"name\", \"of\", \"string\"]));\nprint_r(find_max([\"name\"\
    , \"enam\", \"game\"]));\nprint_r(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]));\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "stringnameaaaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7o78o5hx.php:30\n\
    Stack trace:\n#0 /tmp/tmp7o78o5hx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7o78o5hx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $final_word = \"\";\n    $max_count = 0;\n\
    \    foreach ($words as $word) {\n        $count = 0;\n        $temp_word = \"\
    \";\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (strpos($temp_word,\
    \ $word[$i]) === false) {\n                $temp_word .= $word[$i];\n        \
    \        $count++;\n            }\n        }\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $final_word = $word;\n    \
    \    }\n    }\n    return $final_word;\n}\n\necho find_max([\"name\", \"of\",\
    \ \"string\"]);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuxbpyfh.php:36\n\
    Stack trace:\n#0 /tmp/tmpxuxbpyfh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxuxbpyfh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n\tif(!is_array($words)) return false;\n\t$unique_words\
    \ = [];\n\tforeach($words as $word) {\n\t\t$unique_words[$word] = count_chars($word,1);\n\
    \t}\n\t$max_word = '';\n\t$max_len = 0;\n\tforeach($unique_words as $word => $chars)\
    \ {\n\t\tif(count($chars) > $max_len) {\n\t\t\t$max_len = count($chars);\n\t\t\
    \t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\n\nprint_r(find_max([\"\
    name\", \"of\", \"string\"]) .\"\\n\");\nprint_r(find_max([\"name\", \"enam\"\
    , \"game\"]) .\"\\n\");\nprint_r(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) .\"\\\
    n\");\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string\nname\naaaaaaa\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp62z5bgfw.php:35\nStack trace:\n#0 /tmp/tmp62z5bgfw.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp62z5bgfw.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n    $max_count = 0;\n    $max_word = \"\";\n  \
    \  foreach ($words as $word) {\n        $word_chars = str_split($word);\n    \
    \    $word_chars = array_unique($word_chars);\n        $word_chars_count = count($word_chars);\n\
    \        if ($word_chars_count > $max_count) {\n            $max_count = $word_chars_count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdb85qb_p.php:30\n\
    Stack trace:\n#0 /tmp/tmpdb85qb_p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdb85qb_p.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \nfunction find_max($words) {\n  $max = 0;\n  $result = \"\";\n  foreach ($words\
    \ as $word) {\n    $unique = count_unique($word);\n    if ($unique > $max) {\n\
    \      $max = $unique;\n      $result = $word;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique()\
    \ in /tmp/tmpyve2d9rh.php:13\nStack trace:\n#0 /tmp/tmpyve2d9rh.php(23): find_max(Array)\n\
    #1 /tmp/tmpyve2d9rh.php(27): candidate(Array)\n#2 /tmp/tmpyve2d9rh.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyve2d9rh.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
