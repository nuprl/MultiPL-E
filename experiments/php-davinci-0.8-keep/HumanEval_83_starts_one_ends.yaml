name: HumanEval_83_starts_one_ends
language: php
prompt: "<?php\n// Given a positive integer n, return the count of the numbers of\
  \ n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10,\
    \ $i - 1);\n  }\n  return $count;\n}\n", "    $initial = 1;\n    $ending = 1;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        $ending = $ending * 10 + 1;\n    \
    \    $initial = $initial * 10;\n    }\n    return $initial + $ending;\n}\n\necho\
    \ starts_one_ends(3);", "    if($n == 1) {\n        return 1;\n    }\n    if($n\
    \ == 2) {\n        return 10;\n    }\n    if($n == 3) {\n        return 100;\n\
    \    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\n$fptr\
    \ = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$stdin = fopen(\"php://stdin\",\
    \ \"r\");\n\nfscanf($stdin, \"%d\\n\", $q);\n\nfor ($q_itr = 0; $q_itr < $q; $q_itr++)\
    \ {\n    fscanf($stdin, \"%d\\n\", $n);\n\n    $result = starts_one_ends($n);\n\
    \n    fwrite($fptr, $result . \"\\n\");\n}\n\nfclose($stdin);\nfclose($fptr);",
  "  $vals = [];\n  $count = 0;\n  $ends_one = 9;\n  $starts_one = 9;\n  $start =\
    \ \"1\";\n  $end = \"1\";\n  $starts_one = $starts_one * pow(10, $n - 1);\n  $ends_one\
    \ = $ends_one * pow(10, $n - 1);\n  $count = $starts_one + $ends_one;\n  for ($i\
    \ = 1; $i < $n - 1; $i++) {\n    $start .= \"0\";\n    $end .= \"0\";\n    $start_val\
    \ = $start . \"1\";\n    $end_val = $end . \"1\";\n    $start_val = intval($start_val);\n\
    \    $end_val = intval($end_val);\n    array_push($vals, $start_val);\n    array_push($vals,\
    \ $end_val);\n    $count += count_nums($vals, $n);\n  }\n  return $count;\n}\n",
  "  $cnt = 1;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $cnt *= 9;\n  }\n  return\
    \ $cnt;\n}\n$N = 10;\necho starts_one_ends($N);", "  if ($n == 1) {\n    return\
    \ 2;\n  } else if ($n == 2) {\n    return 4;\n  } else {\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n  }\n}\necho \"starts one ends for 2 is: \"\
    \ . starts_one_ends(2) . \"\\n\";\necho \"starts one ends for 3 is: \" . starts_one_ends(3)\
    \ . \"\\n\";\necho \"starts one ends for 4 is: \" . starts_one_ends(4) . \"\\\
    n\";\necho \"starts one ends for 5 is: \" . starts_one_ends(5) . \"\\n\";\necho\
    \ \"starts one ends for 6 is: \" . starts_one_ends(6) . \"\\n\";\necho \"starts\
    \ one ends for 7 is: \" . starts_one_ends(7) . \"\\n\";\necho \"starts one ends\
    \ for 8 is: \" . starts_one_ends(8) . \"\\n\";\necho \"starts one ends for 9 is:\
    \ \" . starts_one_ends(9) . \"\\n\";\necho \"starts one ends for 10 is: \" . starts_one_ends(10)\
    \ . \"\\n\";\necho \"starts one ends for 11 is: \" . starts_one_ends(11) . \"\\\
    n\";\necho \"starts one ends for 12 is: \" . starts_one_ends(12) . \"\\n\";\n\
    echo \"starts one ends for 13 is: \" . starts_one_ends(13) . \"\\n\";\necho \"\
    starts one ends for 14 is: \" . starts_one_ends(14) . \"\\n\";\necho \"starts\
    \ one ends for 15 is: \" . starts_one_ends(15) . \"\\n\";\necho \"starts one ends\
    \ for 16 is: \" . starts_one_ends(16) . \"\\n\";\necho \"starts one ends for 17\
    \ is: \" . starts_one_ends(17) . \"\\n\";\necho \"starts one ends for 18 is: \"\
    \ . starts_one_ends(18) . \"\\n\";\necho \"starts one ends for 19 is: \" . starts_one_ends(19)\
    \ . \"\\", "  // Let's break it down:\n  //   Let's assume n = 3.\n  //   There\
    \ are 10^(n-1) = 10^2 = 100 possible numbers where the first digit\n  //   is\
    \ 1. Those start with 1.\n  //   Similarly, if we assume the number ends with\
    \ 1, then there are 10^(n-1)\n  //   possible numbers.\n  //   There are 10^(n-2)\
    \ = 10^1 = 10 possible numbers that start and end with\n  //   1.\n  //   So,\
    \ the total is 2*10^(n-1) - 10^(n-2).\n  return 2*pow(10, $n-1) - pow(10, $n-2);\n\
    }\n\n$n = 5;\necho \"The # of $n-digit positive integers that start or end with\
    \ 1 is: \";\necho starts_one_ends($n).\"\\n\";", "    if ($n == 1) {\n       \
    \ return 2;\n    }\n    $numbers = array();\n    $numbers[1] = array(0, 1);\n\
    \    $numbers[2] = array(1, 0);\n    $numbers[3] = array(0, 1);\n    $numbers[4]\
    \ = array(1, 0);\n    $numbers[5] = array(0, 1);\n    $numbers[6] = array(1, 0);\n\
    \    $numbers[7] = array(0, 1);\n    $numbers[8] = array(1, 0);\n    $numbers[9]\
    \ = array(0, 1);\n    $numbers[10] = array(1, 0);\n    for ($i = 11; $i <= $n;\
    \ $i++) {\n        $numbers[$i] = array($numbers[$i - 1][0] + $numbers[$i - 1][1],\n\
    \                             $numbers[$i - 1][0]);\n    }\n    return $numbers[$n][0]\
    \ + $numbers[$n][1];\n}\n", "    $count = 1;\n    $max = 9;\n    $max -= 1;\n\
    \    while ($n-- > 1) {\n        $count *= $max;\n        $max -= 1;\n    }\n\
    \    return $count;\n}\n", "    $dp = array();\n    $dp[0] = 0;\n    $dp[1] =\
    \ 1;\n    $dp[2] = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $first_digit\
    \ = pow(10, $i - 1);\n        $last_digit = pow(10, $i - 2);\n        $dp[$i]\
    \ = $dp[$i - 1] + $dp[$i - 2] + $first_digit + $last_digit;\n    }\n    return\
    \ $dp[$n];\n}\n", "    $result = 0;\n    $nMinusOne = $n - 1;\n    if ($nMinusOne\
    \ < 1) {\n        return $result;\n    }\n\n    $result = $nMinusOne * 9;\n  \
    \  $result += starts_one_ends($nMinusOne);\n    return $result;\n}\n\n$result\
    \ = starts_one_ends(2);\nprint(\"result is: \" . $result . \"\\n\");", "    $count\
    \ = 0;\n    $i = 1;\n    $last_digit = pow(10, $n - 1);\n    while ($i < $last_digit)\
    \ {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        $i++;\n\
    \    }\n    return $count;\n}\n\n$test_cases = array(\n    2 => 10,\n    3 =>\
    \ 55,\n    4 => 220,\n    5 => 715,\n    6 => 2002,\n    7 => 5005,\n    8 =>\
    \ 11440,\n    9 => 24310,\n    10 => 48620,\n    11 => 92378,\n    12 => 167960,\n\
    \    13 => 293930,\n    14 => 497420,\n    15 => 817190,\n    16 => 1307504,\n\
    \    17 => 2042975,\n    18 => 3124550,\n    19 => 4686825,\n    20 => 6786780,\n\
    \    21 => 9989675,\n    22 => 14197560,\n    23 => 19699740,\n    24 => 26518210,\n\
    \    25 => 35741275,\n    26 => 47464315,\n    27 => 62701150,\n    28 => 81450450,\n\
    \    29 => 105209750,\n    30 => 135795680,\n    31 => 173877290,\n    32 => 221145400,\n\
    \    33 => 278703360,\n    34 => 347875135,\n    35 => 430638765,\n    36 => 530771580,\n\
    \    37 => 651254950,\n    38 => 794772250,\n    39 => 965433120,\n    40 => 1169806600,\n\
    \    41 => 1414295440,\n    42 => 1705961575,\n    43 => 2054384400,\n    44 =>\
    \ 2467099370,\n    45 => 2952276350,\n    46 => 3526152410,\n    47 => 4196113550,\n\
    \    48 => 4975379340,\n    49 => 5873625135,\n    50 => 6902549700,\n    51 =>\
    \ 8072713750", "  $start1 = $end1 = 0;\n  if ($n == 1) {\n    return 2;\n  }\n\
    \  else {\n    $end1 = 1;\n    $temp = pow(10, $n - 1);\n    $start1 = 9 * $temp;\n\
    \    return $start1 + $end1 + starts_one_ends($n - 1);\n  }\n}\n\necho starts_one_ends(5);\n\
    echo \"\\n\";\necho starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\n\
    echo \"\\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\n\
    echo \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\n\
    echo \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";", "    $start = $n - 1;\n\
    \    $end = $n - 1;\n    $total = $start + $end;\n    if ($n > 1) {\n        $total\
    \ += (pow(10, $n - 1) - 1);\n    }\n    return $total;\n}\n\n$cases = array(\n\
    \    array(\n        'input' => 1,\n        'expected' => 2,\n    ),\n    array(\n\
    \        'input' => 2,\n        'expected' => 12,\n    ),\n    array(\n      \
    \  'input' => 3,\n        'expected' => 123,\n    ),\n    array(\n        'input'\
    \ => 4,\n        'expected' => 1234,\n    ),\n    array(\n        'input' => 5,\n\
    \        'expected' => 12345,\n    ),\n    array(\n        'input' => 6,\n   \
    \     'expected' => 123456,\n    ),\n    array(\n        'input' => 7,\n     \
    \   'expected' => 1234567,\n    ),\n    array(\n        'input' => 8,\n      \
    \  'expected' => 12345678,\n    ),\n    array(\n        'input' => 9,\n      \
    \  'expected' => 123456789,\n    ),\n    array(\n        'input' => 10,\n    \
    \    'expected' => 1234567891,\n    ),\n);\n\nforeach ($cases as $case) {\n  \
    \  $actual = starts_one_ends($case['input']);\n    if ($actual !== $case['expected'])\
    \ {\n        echo \"Failed for '{$case['input']}'!\\n\";\n        echo \"Expected:\
    \ {$case['expected']}\\n\";\n        echo \"Actual: {$actual}\\n\";\n    }\n}",
  "    $dp = [\n        0 => 1,\n        1 => 9,\n        2 => 9,\n        3 => 9,\n\
    \        4 => 9,\n        5 => 9,\n        6 => 9,\n        7 => 9,\n        8\
    \ => 9,\n        9 => 9,\n    ];\n    for ($i = 1; $i < $n; $i++) {\n        for\
    \ ($j = 9; $j > 0; $j--) {\n            $dp[$j] += $dp[$j - 1];\n        }\n \
    \   }\n    $sum = 0;\n    for ($i = 1; $i <= 9; $i++) {\n        $sum += $dp[$i];\n\
    \    }\n    return $sum;\n}\n", "    if ($n == 1) {\n        return 1;\n    }\
    \ else {\n        return pow(10, $n - 1) + 9 * starts_one_ends($n - 1);\n    }\n\
    }\n\necho(starts_one_ends(1) . PHP_EOL);\necho(starts_one_ends(2) . PHP_EOL);\n\
    echo(starts_one_ends(3) . PHP_EOL);\necho(starts_one_ends(4) . PHP_EOL);\necho(starts_one_ends(5)\
    \ . PHP_EOL);\necho(starts_one_ends(6) . PHP_EOL);", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  if ($n == 2) {\n    return 5;\n  }\n  return 5 * pow(3, $n - 2);\n\
    }\nfor ($i = 1; $i < 7; $i++) {\n  echo starts_one_ends($i) . \"\\n\";\n}", " \
    \   if ($n == 1) {\n        return 2;\n    }\n    $startOne = 9;\n    $endOne\
    \ = 9;\n    for ($i = 2; $i < $n; $i++) {\n        $startOne *= 10;\n        $endOne\
    \ *= 10;\n    }\n    return $startOne + $endOne;\n}\n", "  if ($n < 2) {\n   \
    \ return $n;\n  }\n  return starts_one_ends($n - 1) + (9 * pow(10, $n - 2));\n\
    }\n\nvar_dump(starts_one_ends(4));", "  $count = 0;\n  for ($i = 10 ** ($n - 1);\
    \ $i < 10 ** $n; $i++) {\n    if ($i % 10 == 1 || intval($i / 10 ** ($n - 1))\
    \ == 1) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho starts_one_ends(2)\
    \ . \" should be 91.\\n\";\necho starts_one_ends(1) . \" should be 10.\\n\";\n\
    echo starts_one_ends(5) . \" should be 3020.\\n\";\necho starts_one_ends(8) .\
    \ \" should be 3094280.\\n\";\necho starts_one_ends(9) . \" should be 30942809.\\\
    n\";", "  if ($n <= 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 11;\n\
    \  }\n  $prev = 11;\n  $curr = 0;\n  for ($i = 2; $i < $n; $i++) {\n    $curr\
    \ = (9 * $prev + pow(10, $i - 1)) % 1000000007;\n    $prev = $curr;\n  }\n  return\
    \ $curr;\n}\n\n$n = 3;\n\necho starts_one_ends($n) . PHP_EOL;", "  // if n is\
    \ less than 1 then return 0\n  if ($n < 1) return 0;\n  // if n is 1 then return\
    \ 10\n  if ($n == 1) return 10;\n  // create an array of 10\n  $a = array_fill(0,\
    \ 10, 0);\n  // for each number from 10^(n-1) to 10^n set the first number to\
    \ 1 and the\n  // last number to 1, thus verifying that it has a 1 in each end\n\
    \  // return the count of this array\n  for ($i = pow(10, $n - 1); $i < pow(10,\
    \ $n); $i++) {\n    $a[substr($i, 0, 1)] = 1;\n    $a[substr($i, -1)] = 1;\n \
    \ }\n  return count($a);\n}\n\necho starts_one_ends(0) . \"\\n\";\necho starts_one_ends(1)\
    \ . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\
    \\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\\n\"\
    ;\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\";\necho\
    \ starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10)\
    \ . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12) .\
    \ \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) . \"\
    \\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\\n\"\
    ;\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\";\n\
    echo starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\necho\
    \ starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22", "  $count = 0;\n \
    \ for ($i = 1; $i <= 9; $i++) {\n    $count += count_digits($n - 1, 1, $i);\n\
    \  }\n  return $count;\n}\n", "    if ($n == 1) {\n        return 1;\n    } else\
    \ if ($n == 2) {\n        return 11;\n    } else {\n        return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1) + 9 * (pow(10, $n - 2));\n    }\n}\n", "  if ($n < 2)\
    \ {\n    return 0;\n  }\n  if ($n == 2) {\n    return 1;\n  }\n  if ($n == 3)\
    \ {\n    return 2;\n  }\n  $dp = array_fill(0, $n + 1, 0);\n  $dp[1] = 1;\n  $dp[2]\
    \ = 1;\n  $dp[3] = 2;\n  for ($i = 4; $i <= $n; $i++) {\n    $dp[$i] = $dp[$i\
    \ - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\n", "  $startsOneCount = $endsOneCount\
    \ = 1;\n  $startsWithOne = $endsWithOne = false;\n  while ($n > 1) {\n    $startsOneCount\
    \ = $startsOneCount * 2;\n    $endsOneCount = $endsOneCount * 3;\n    $n--;\n\
    \  }\n  return $startsOneCount + $endsOneCount;\n}\n\n$num = 4;\necho \"The count\
    \ of n-digit positive integers that start or end with 1: \" .\nstarts_one_ends($num);\n",
  "    $p = pow(10, $n-1);\n    $q = pow(10, $n);\n    return $p + (10*($q-$p) - $p\
    \ - 1);\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\
    \\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\"\
    ;\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\necho\
    \ starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9)\
    \ . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) .\
    \ \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\
    \\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\"\
    ;\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\n\
    echo starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho\
    \ starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22)\
    \ . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) .\
    \ \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) . \"\
    \\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\\n\"\
    ;\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\";\n\
    echo starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\necho\
    \ starts_one_ends(33) . \"\\n\";\n", "  $ends_one = $starts_one = 9;\n  for ($i\
    \ = 1; $i < $n; $i++) {\n    $ends_one = $ends_one * 9 + $starts_one;\n    $starts_one\
    \ = $starts_one * 10;\n  }\n  return $ends_one + $starts_one;\n}\n", "  if ($n\
    \ < 1) return 0;\n  $dp = [];\n  $dp[1] = 2;\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    $dp[$i] = $dp[$i - 1] + pow(10, $i - 1);\n  }\n  return $dp[$n];\n}\n\necho\
    \ starts_one_ends(3);\necho PHP_EOL;", "  $count = 0;\n  $count += 10 * pow(9,\
    \ $n - 1);\n  $count += pow(9, $n - 1);\n  return $count;\n}\necho \"starts_one_ends(3)\
    \ => \" . starts_one_ends(3) . \"\\n\";\necho \"starts_one_ends(4) => \" . starts_one_ends(4)\
    \ . \"\\n\";\n", "    $x = \"1\";\n    $result = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $x .= \"0\";\n    }\n    if (strlen($x) == $n) {\n        $result++;\n\
    \    }\n    $x = intval($x);\n    while ($x < pow(10, $n)) {\n        $x++;\n\
    \        if (strlen($x) == $n) {\n            $result++;\n        }\n    }\n \
    \   return $result;\n}\n", "    $first_digit = floor(pow(10, $n - 1));\n    $last_digit\
    \ = floor(pow(10, $n - 2));\n    return $first_digit + $last_digit;\n}\n\nfor\
    \ ($i = 1; $i <= 5; $i++) {\n    echo starts_one_ends($i) . \"\\n\";\n}", "  $total\
    \ = 0;\n  $tens = pow(10, $n - 1);\n  $num = $tens;\n  while ($num < $tens * 10)\
    \ {\n    if ($num % 10 == 1) {\n      $total++;\n    }\n    $num++;\n  }\n  return\
    \ $total;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n  echo starts_one_ends($i) . \"\
    \\n\";\n}", "  $one_start = 9;\n  $one_end = 9;\n  $res = 0;\n  if ($n == 1) {\n\
    \    return 2;\n  }\n  if ($n == 2) {\n    return 20;\n  }\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    $tmp = $one_start;\n    $one_start = $one_start * 10 + $one_end;\n\
    \    $one_end = $one_end * 10 + $tmp;\n  }\n  $res = $one_start + $one_end;\n\
    \  return $res;\n}\n$arr = array(\n  5,\n  1,\n  2,\n  3,\n  4,\n);\nforeach ($arr\
    \ as $v) {\n  echo starts_one_ends($v) . \"\\n\";\n}", "    $base = 1;\n    $count\
    \ = 0;\n    while ($n > 0) {\n        $count += $base * 9;\n        $base *= 10;\n\
    \        $n--;\n    }\n    return $count;\n}\n", "  // Start with some base cases.\n\
    \  if ($n <= 0) return 0;\n  if ($n == 1) return 1;\n\n  // At this point we know\
    \ we are in the recursive case.\n  // The number of n-digit positive integers\
    \ that start or end with 1\n  // is simply the number of n-digit positive integers\
    \ minus the number\n  // of n-digit positive integers that start or end with 0.\n\
    \  // And that is the recursive part of this problem.\n  return (10 ** ($n - 1))\
    \ - starts_zero_ends($n - 1);\n}\n", "  if ($n == 1) {\n    return 1;\n  }\n \
    \ // Count the number of leading 1's\n  $count = pow(2, $n - 1);\n  // Count the\
    \ number of trailing 1's\n  $count += pow(2, $n - 2);\n  // Exclude the number\
    \ of numbers of n-digit that\n  // start and end with 1 which would be overcounted.\n\
    \  $count -= 1;\n  return $count;\n}\necho starts_one_ends(1) . \"\\n\";\necho\
    \ starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4)\
    \ . \"\\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\
    \\n\";\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\"\
    ;\necho starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho\
    \ starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13)\
    \ . \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) .\
    \ \"\\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\
    \\n\";\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\"\
    ;\necho starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\n\
    echo starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho\
    \ starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26)\
    \ . \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) .\
    \ \"\\n\";\necho starts_one_ends(29) .", "  $count = 0;\n  $max = intval('1'.str_repeat('9',\
    \ $n-1));\n  $min = intval('1'.str_repeat('0', $n-1));\n  for ($i = $min; $i <=\
    \ $max; $i++) {\n    if (strpos($i, '1') == 0 || strpos($i, '1') == strlen($i)-1)\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n", "  $begin = 1;\n  $end\
    \ = 10;\n  $result = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $begin *= 10;\n\
    \    $end *= 10;\n  }\n  for ($i = $begin; $i < $end; $i++) {\n    if (strpos($i,\
    \ \"1\") === 0 || strpos($i, \"1\") === strlen($i) - 1) {\n      $result++;\n\
    \    }\n  }\n  return $result;\n}\n\nprint_r(starts_one_ends(2));", "  if ($n\
    \ == 1) {\n    return 1;\n  } else {\n    return pow(10, $n-1) + starts_one_ends($n-1);\n\
    \  }\n}\n\n$result = starts_one_ends(2);\nprint_r($result);", "    $d = [0, 1,\
    \ 2, 4, 8];\n    for ($i = 2; $i <= $n; $i++) {\n        $d[$i] = $d[$i - 1] +\
    \ $d[$i - 2];\n    }\n    return $d[$n];\n}\n", "    // Base case\n    if ($n\
    \ == 1) {\n        return 2;\n    }\n    // Recursive case\n    else {\n     \
    \   return pow(10, $n - 1) + 9 * starts_one_ends($n - 1);\n    }\n}\n", "    $result\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result += helper($i, true);\n\
    \        $result += helper($i, false);\n    }\n    return $result;\n}\n", "  \
    \  $count = 0;\n    $endOne = pow(10, $n) - 1;\n    while ($endOne >= pow(10,\
    \ $n - 1)) {\n        if ($endOne % 10 == 1) {\n            $count++;\n      \
    \  }\n        $endOne--;\n    }\n    $startOne = pow(10, $n - 1);\n    while ($startOne\
    \ < pow(10, $n)) {\n        if ($startOne % 10 == 1) {\n            $count++;\n\
    \        }\n        $startOne++;\n    }\n    return $count;\n}\necho starts_one_ends(3)\
    \ . PHP_EOL;", "    $start_one = 0;\n    $end_one = 0;\n    for ($i = 1; $i <=\
    \ 9; $i++) {\n        $start_one += count_start_one($n-1);\n        $end_one +=\
    \ count_end_one($n-1);\n    }\n    return $start_one + $end_one;\n}\n", "  $count\
    \ = 0;\n  $first_digit = 1;\n  $last_digit = 1;\n  $first_end_digit = 1;\n  $last_end_digit\
    \ = 1;\n  $first_digit_count = 0;\n  $last_digit_count = 0;\n  $first_end_digit_count\
    \ = 0;\n  $last_end_digit_count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count\
    \ += $first_digit * $last_digit;\n    $count += $first_end_digit * $last_end_digit;\n\
    \    $first_digit *= 9;\n    $last_digit *= 10;\n    $first_end_digit *= 9;\n\
    \    $last_end_digit *= 10;\n    $first_digit_count += $first_digit;\n    $last_digit_count\
    \ += $last_digit;\n    $first_end_digit_count += $first_end_digit;\n    $last_end_digit_count\
    \ += $last_end_digit;\n  }\n  echo \"$n $count\\n\";\n  echo \"first_digit_count:\
    \ $first_digit_count\\n\";\n  echo \"last_digit_count: $last_digit_count\\n\"\
    ;\n  echo \"first_end_digit_count: $first_end_digit_count\\n\";\n  echo \"last_end_digit_count:\
    \ $last_end_digit_count\\n\";\n}\nfor ($i = 1; $i <= 5; $i++) {\n  starts_one_ends($i);\n\
    }", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 4;\n \
    \ }\n  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\n$n = 2;\n\
    echo starts_one_ends($n);", "    $count = 1; // If number of digits is 1, there's\
    \ always one 1-digit number that starts and ends with 1.\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $count += pow(2, $i - 1);\n    }\n    return $count;\n\
    }", "  // base cases\n  if ($n == 1) {\n    return 1;\n  }\n  if ($n == 2) {\n\
    \    return 3;\n  }\n  // dynamic programming\n  $dp = array_fill(0, $n + 1, 0);\n\
    \  $dp[1] = 1;\n  $dp[2] = 3;\n  for ($i = 3; $i <= $n; $i++) {\n    $dp[$i] =\
    \ $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\n", "    // Write your\
    \ code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n}", "  if ($n < 2) {\n    return 1;\n\
    \  }\n  if ($n == 2) {\n    return 3;\n  }\n  return starts_one_ends($n - 1) +\
    \ starts_one_ends($n - 2);\n}\n", "    $last_digit = array();\n    $last_digit[0]\
    \ = 0;\n    $last_digit[1] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $last_digit[$i]\
    \ = $last_digit[$i - 1] + $last_digit[$i - 2];\n    }\n    $first_digit = array();\n\
    \    $first_digit[0] = 0;\n    $first_digit[1] = 1;\n    for ($i = 2; $i <= $n;\
    \ $i++) {\n        $first_digit[$i] = $first_digit[$i - 1] + $first_digit[$i -\
    \ 2];\n    }\n    return $last_digit[$n] + $first_digit[$n] - 1;\n}\nfor ($i =\
    \ 1; $i <= 10; $i++) {\n    echo \"starts_one_ends(\" . $i . \") = \" . starts_one_ends($i)\
    \ . \"\\n\";\n}\n", "  if ($n == 1) return 2;\n  $dp = new SplFixedArray($n);\n\
    \  $dp[0] = 1;\n  $dp[1] = 2;\n  for ($i = 2; $i < $n; $i++) {\n    $dp[$i] =\
    \ $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n - 1] * 2;\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\n\
    var_dump(starts_one_ends(5));", "    if ($n == 1) return 2;\n    return starts_one_ends($n\
    \ - 1) + $n;\n}\n", "    $dp = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    $m = 1000000007;\n\
    \    if ($n === 1) {\n        return 10;\n    } else if ($n === 2) {\n       \
    \ return 55;\n    } else {\n        for ($i = 3; $i <= $n; $i++) {\n         \
    \   $sum = 0;\n            for ($j = 0; $j < 10; $j++) {\n                $sum\
    \ = ($sum + $dp[$j]) % $m;\n            }\n            for ($j = 0; $j < 10; $j++)\
    \ {\n                $dp[$j] = $sum;\n            }\n            $dp[0] = ($dp[0]\
    \ - $dp[1] + $m) % $m;\n        }\n        $sum = 0;\n        for ($i = 0; $i\
    \ < 10; $i++) {\n            $sum = ($sum + $dp[$i]) % $m;\n        }\n      \
    \  return $sum;\n    }\n}\n\n$s = microtime(true);\necho starts_one_ends(1) .\
    \ PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(200) . PHP_EOL;\necho microtime(true) - $s\
    \ . PHP_EOL;", "    if ($n < 1) {\n        return;\n    }\n    if ($n == 1) {\n\
    \        return 2;\n    }\n    return starts_one_ends($n - 1) + (9 * $n) - 1;\n\
    }\n", "    $dp = [\n        1 => 1,\n        2 => 9,\n        3 => 9,\n      \
    \  4 => 9,\n        5 => 9,\n        6 => 9,\n        7 => 9,\n        8 => 9,\n\
    \        9 => 9,\n        10 => 9,\n    ];\n    $dp[1] = 2;\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n   \
    \ return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;",
  "  if ($n == 1) {\n    return 2;\n  } else {\n    return ($n - 1) * 9 + starts_one_ends($n\
    \ - 1);\n  }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n\";\necho starts_", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  return starts_one_ends($n - 1) + 9 * pow(10, $n - 2);\n}\n\n$n =\
    \ 3;\necho \"number of numbers that start or end with 1: \" . starts_one_ends($n)\
    \ . \"\\n\";", "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2)\
    \ {\n        return 3;\n    }\n    $dp = [\n        0 => 2,\n        1 => 3,\n\
    \    ];\n    for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i\
    \ - 2];\n    }\n    return $dp[$n - 1];\n}\n\n$tests = [\n    1 => 2,\n    2 =>\
    \ 3,\n    3 => 5,\n    4 => 8,\n    5 => 13,\n    6 => 21,\n    7 => 34,\n   \
    \ 8 => 55,\n    9 => 89,\n    10 => 144,\n];\nforeach ($tests as $test => $expected)\
    \ {\n    $res = starts_one_ends($test);\n    if ($res == $expected) {\n      \
    \  echo \"PASS\\n\";\n    } else {\n        echo \"FAIL: for input $test: expected:\
    \ $expected, got: $res\\n\";\n    }\n}", "  $count = 0;\n  for ($i = 1; $i <=\
    \ $n; $i++) {\n    $count += pow(2, $i-1);\n  }\n  return $count;\n}\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;", "    $memo = [];\n    $memo[0] = 1;\n   \
    \ $memo[1] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $memo[$i] = $memo[$i\
    \ - 1] + ($memo[$i - 2] * 9);\n    }\n    return $memo[$n];\n}\n\nclass CountPositiveIntegersTest\
    \ extends TestCase {\n    public function testStartsOneEnds() {\n        $this->assertEquals(starts_one_ends(2),\
    \ 9);\n        $this->assertEquals(starts_one_ends(3), 90);\n        $this->assertEquals(starts_one_ends(4),\
    \ 900);\n        $this->assertEquals(starts_one_ends(5), 9000);\n        $this->assertEquals(starts_one_ends(6),\
    \ 90000);\n        $this->assertEquals(starts_one_ends(7), 900000);\n        $this->assertEquals(starts_one_ends(8),\
    \ 9000000);\n        $this->assertEquals(starts_one_ends(9), 90000000);\n    \
    \    $this->assertEquals(starts_one_ends(10), 900000000);\n    }\n}", "    if\
    \ ($n == 1) return 2;\n    if ($n == 2) return 4;\n    if ($n == 3) return 6;\n\
    \    return starts_one_ends($n - 1) + (starts_one_ends($n - 2) * 2);\n}\necho\
    \ starts_one_ends(2);\necho starts_one_ends(3);\necho starts_one_ends(4);\necho\
    \ starts_one_ends(5);\necho starts_one_ends(6);\necho starts_one_ends(7);\necho\
    \ starts_one_ends(8);\necho starts_one_ends(9);\necho starts_one_ends(10);\necho\
    \ starts_one_ends(11);", "    $start = array_fill(0, $n, 0);\n    $end = array_fill(0,\
    \ $n, 0);\n    $start[0] = 1;\n    $end[0] = 1;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $start[$i] = 10 * $start[$i - 1] + pow(10, $i - 1);\n        $end[$i]\
    \ = 9 * $end[$i - 1] + pow(10, $i - 1);\n    }\n    return array_sum($start) +\
    \ array_sum($end);\n}", "    $ans = 0;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $k = $i;\n        $has_start_one = false;\n        $has_end_one = false;\n\
    \        while ($k) {\n            if ($k % 10 == 1) {\n                $has_end_one\
    \ = true;\n            }\n            $k /= 10;\n        }\n        if ($has_end_one)\
    \ {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n\necho starts_one_ends(100);\n",
  "    // Brute force, not very efficient\n    $count = 0;\n    for ($i = 1; $i <=\
    \ 9; $i++) {\n        for ($j = 1; $j <= 9; $j++) {\n            if ($i == 1 &&\
    \ $j == 1) continue;\n            $count += intval(log10($i * $j)) + 1 == $n;\n\
    \        }\n    }\n    return $count;\n}\n\necho starts_one_ends(2);\necho PHP_EOL;\n\
    echo starts_one_ends(3);\necho PHP_EOL;\necho starts_one_ends(4);\necho PHP_EOL;\n\
    echo starts_one_ends(5);\necho PHP_EOL;\necho starts_one_ends(6);\necho PHP_EOL;\n\
    echo starts_one_ends(7);\necho PHP_EOL;\necho starts_one_ends(8);\necho PHP_EOL;\n\
    echo starts_one_ends(9);\necho PHP_EOL;\necho starts_one_ends(10);\necho PHP_EOL;\n\
    echo starts_one_ends(11);\necho PHP_EOL;\necho starts_one_ends(12);\necho PHP_EOL;\n\
    echo starts_one_ends(13);\necho PHP_EOL;\necho starts_one_ends(14);\necho PHP_EOL;\n\
    echo starts_one_ends(15);\necho PHP_EOL;\necho starts_one_ends(16);\necho PHP_EOL;\n\
    echo starts_one_ends(17);\necho PHP_EOL;\necho starts_one_ends(18);\necho PHP_EOL;\n\
    echo starts_one_ends(19);\necho PHP_EOL;\necho starts_one_ends(20);\necho PHP_EOL;\n\
    echo starts_one_ends(21);\necho PHP_EOL;\necho starts_one_ends(22);\necho PHP_EOL;\n\
    echo starts_one_ends(23);\necho PHP_EOL;\necho starts_one_ends(24);\necho PHP_EOL;\n\
    echo starts_one_ends(25);\necho PHP_EOL;\n", "    if ($n < 1) return 0;\n    if\
    \ ($n == 1) return 1;\n    $dp = [\n        [\n            1 => 1,\n         \
    \   0 => 0,\n        ],\n        [\n            1 => 1,\n            0 => 1,\n\
    \        ],\n    ];\n    for ($i = 2; $i <= $n; $i++) {\n        $dp[$i] = [\n\
    \            1 => $dp[$i - 1][1] + $dp[$i - 1][0],\n            0 => $dp[$i -\
    \ 1][1],\n        ];\n    }\n    return $dp[$n][1] + $dp[$n][0];\n}", "  if ($n\
    \ == 1) {\n    return 2;\n  }\n  $ends = 10;\n  $starts = 9;\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    $ends *= 10;\n    $starts *= 9;\n  }\n  return $ends + $starts;\n\
    }\n\n$tests = [\n  [1, 2],\n  [2, 20],\n  [3, 300],\n  [4, 4000],\n  [5, 50000],\n\
    \  [6, 600000],\n  [7, 7000000],\n  [8, 80000000],\n  [9, 900000000],\n  [10,\
    \ 100000000000],\n];\n\nforeach ($tests as $test) {\n  $res = starts_one_ends($test[0]);\n\
    \  if ($res !== $test[1]) {\n    echo \"Error: for {$test[0]} expected $test[1]\
    \ but got $res\\n\";\n  }\n}", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(9, $i - 1);\n    }\n    return $count;\n}\n\n$n = 4;\n\
    $ret = starts_one_ends($n);\nvar_dump($ret);", "    if ($n === 1) {\n        return\
    \ 2;\n    }\n    $x = 10;\n    $sum = 0;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $sum += $x;\n        $x *= 10;\n    }\n    return $sum * 2;\n}\n", " \
    \ if ($n == 1) {\n    return 2;\n  }\n  $a = bcdiv(bcpow('10', $n) - bcpow('10',\
    \ $n - 1), 9);\n  $b = bcdiv(bcpow('10', $n) - bcpow('10', $n - 1), 9);\n  return\
    \ bcmul($a, $b);\n}\n", "  if ($n == 1) return 2;\n  return starts_one_ends($n\
    \ - 1) + count_ones($n - 1);\n}\n", "  // Base case 1.\n  if ($n === 1) {\n  \
    \  return 2;\n  }\n  // Base case 2.\n  if ($n === 2) {\n    return 4;\n  }\n\
    \  return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\n\
    var_dump(starts_one_ends(5));\nvar_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\n\
    var_dump(starts_one_ends(8));\nvar_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));\n\
    var_dump(starts_one_ends(11));\nvar_dump(starts_one_ends(12));\nvar_dump(starts_one_ends(13));\n\
    var_dump(starts_one_ends(14));\nvar_dump(starts_one_ends(15));\nvar_dump(starts_one_ends(16));\n\
    var_dump(starts_one_ends(17));\nvar_dump(starts_one_ends(18));\nvar_dump(starts_one_ends(19));\n\
    var_dump(starts_one_ends(20));\nvar_dump(starts_one_ends(21));\nvar_dump(starts_one_ends(22));\n\
    var_dump(starts_one_ends(23));\nvar_dump(starts_one_ends(24));\nvar_dump(starts_one_ends(25));\n\
    var_dump(starts_one_ends(26));\nvar_dump(starts_one_ends(27));\nvar_dump(starts_one_ends(28));\n\
    var_dump(starts_one_ends(29));\nvar_dump(starts_one_ends(30));\nvar_dump(starts_one_ends(31));\n\
    var_dump", "    if($n <= 1) {\n        return $n;\n    }\n\n    // let the number\
    \ be of the form i + j1 + ... + jk, where i and j1,...,jk\n    // are digits,\
    \ and i = 1 or k = 1.\n    // The number of k-digit positive integers that start\
    \ or end with 1 is\n    // 9 * 10^(k-1).\n    // The number of k-digit positive\
    \ integers that start with i and end with\n    // j1,...,jk is 9 * 10^(k-2) for\
    \ each i,j1,...,jk.\n    // There are 9 choices for the first digit (excluding\
    \ 0), and there are\n    // 10^(k-1) choices for the remaining k-1 digits.\n \
    \   // There are 9 choices for the last digit (excluding 0), and there are\n \
    \   // 10^(k-1) choices for the remaining k-1 digits.\n    // There are 10 choices\
    \ for the last digit, and there are 10^(k-2) choices\n    // for the remaining\
    \ k-2 digits.\n    // There are 10 choices for the first digit, and there are\
    \ 10^(k-2) choices\n    // for the remaining k-2 digits.\n    // The answer is\
    \ 9 * 10^(k-1) + 10 * 9 * 10^(k-2) + 10 * 9 * 10^(k-2).\n    // 9 * 10^(k-1) +\
    \ 10 * 9 * 10^(k-2) + 10 * 9 * 10^(k-2) =\n    // 11 * 9 * 10^(k-2) + 9 * 10^(k-1)\
    \ =\n    // 11 * 9 * (10^(k-2) + 10^(k-1)) =\n    // 11 * 9 * (10^(k-2) + 10 *\
    \ 10^(k-2)) =\n    // 11 * 9 * 10^(k-2) * (1 + 10) =\n    // 11 * 9 * 10^(k-2)\
    \ * 11 =\n    // 121 * 9 * 10^(k-2) =\n    // 121 * 9 * (10^(k-2) + 9 * 10^(k-3))\
    \ =", "  // Find the number of n-digit numbers that end in 1.\n  $number = 1;\n\
    \  for ($i = 0; $i < $n - 1; $i++) {\n    $number *= 10;\n  }\n  $number = $number\
    \ + 1;\n  $end = $number;\n  while ($number > 0) {\n    $end += floor($number\
    \ / 10);\n    $number = floor($number / 10);\n  }\n  // Find the number of n-digit\
    \ numbers that start in 1.\n  $number = 1;\n  for ($i = 0; $i < $n - 1; $i++)\
    \ {\n    $number *= 10;\n  }\n  $number = $number - 1;\n  $start = $number;\n\
    \  $start += floor($number / 9);\n  return $start + $end;\n}\n\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);", "  if ($n <= 1) {\n    return 1;\n  }\n\n  $nums = 0;\n  // start\
    \ with 1.\n  $nums += (pow(10, $n - 1) - pow(9, $n - 1));\n  // end with 1.\n\
    \  $nums += (pow(10, $n - 1) - pow(9, $n - 1));\n  // start and end with 1. This\
    \ is duplicated by the above two cases.\n  $nums -= (pow(10, $n - 2) - pow(9,\
    \ $n - 2));\n\n  // Do the recursive step\n  for ($i = 1; $i < $n - 1; $i++) {\n\
    \    $nums += starts_one_ends($i) * starts_one_ends($n - $i);\n  }\n\n  return\
    \ $nums;\n}\n\nfor ($i = 1; $i <= 5; $i++) {\n  echo starts_one_ends($i) . \"\\\
    n\";\n}", "  $output = 0;\n  for ($i = pow(10, $n - 1); $i < pow(10, $n); $i++)\
    \ {\n    if (strpos(strval($i), '1') === 0 || strpos(strval($i), '1') === (strlen(strval($i))\
    \ - 1)) {\n      $output++;\n    }\n  }\n  return $output;\n}\n\nfor ($i = 0;\
    \ $i < 10; $i++) {\n  echo starts_one_ends($i) . PHP_EOL;\n}", "    $start = 0;\n\
    \    $end = 0;\n    $s = \"1\";\n    $e = \"1\";\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        $s .= \"0\";\n        $e = \"0\" . $e;\n    }\n    for ($i = 1; $i\
    \ < $n; $i++) {\n        $start += substr_count($s, \"1\");\n        $end += substr_count($e,\
    \ \"1\");\n        $s = substr($s, 1);\n        $e = substr($e, 0, -1);\n    }\n\
    \    return $start + $end + 2;\n}\n\necho starts_one_ends(2);", "    if ($n <\
    \ 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 2;\n    }\n\
    \    if ($n == 2) {\n        return 3;\n    }\n    $count = 1;\n    for ($i =\
    \ 2; $i <= $n - 1; $i++) {\n        $count = $count * 10 + 1;\n    }\n    $count\
    \ *= 10;\n    $count += 1;\n    return $count;\n}\n", "    if ($n == 1) {\n  \
    \      return 2;\n    } else if ($n == 2) {\n        return 4;\n    } else {\n\
    \        $dp = [0, 2, 4];\n        for ($i = 3; $i <= $n; $i++) {\n          \
    \  $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n        }\n        return $dp[$n];\n\
    \    }\n}\n\nfor ($i = 1; $i <= 5; $i++) {\n    echo starts_one_ends($i) . \"\\\
    n\";\n}", "  if ($n == 1) {\n    return 1;\n  }\n  // Returns the numbers that\
    \ end with 1\n  $sum_ends = 1;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $sum_ends\
    \ *= 9;\n  }\n  // Returns the numbers that start with 1\n  $sum_starts = 0;\n\
    \  for ($i = 0; $i < $n - 1; $i++) {\n    $sum_starts *= 9;\n    $sum_starts +=\
    \ 10;\n  }\n  return $sum_ends + $sum_starts;\n}\necho starts_one_ends(1) . PHP_EOL;\n\
    echo starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  $result = 9;\n  $i = 1;\n  while ($i < $n - 1) {\n    $result *=\
    \ 10;\n    $i++;\n  }\n  return 2 * $result;\n}\n", "    $start = 1;\n    $end\
    \ = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $start = $start * 10;\n   \
    \     $end = $end * 9 + 1;\n    }\n    return $start + $end;\n}\n\n$n = 5;\necho\
    \ starts_one_ends($n);", "    $i = 1;\n    $total = 0;\n    while ($i < $n) {\n\
    \        $j = 1;\n        while ($j < $n) {\n            $j++;\n            $total++;\n\
    \        }\n        $i++;\n    }\n    return $total;\n}\n\necho starts_one_ends(4);",
  "    $count = 0;\n    for ($i = 10**($n-1); $i < 10**$n; $i++) {\n        if (strpos($i,\
    \ \"1\") === 0 || strpos($i, \"1\") === $n-1) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}\n\necho starts_one_ends(2) . PHP_EOL;\necho\
    \ starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  $result = 0;\n  for ($i = 1; $i < $n; $i++) {\n    $result += pow(2,\
    \ $i);\n  }\n  return $result + 1;\n}\n\necho starts_one_ends(1);\necho \"\\n\"\
    ;\necho starts_one_ends(2);\necho \"\\n\";\necho starts_one_ends(3);\necho \"\\\
    n\";\necho starts_one_ends(4);\necho \"\\n\";\necho starts_one_ends(5);\necho\
    \ \"\\n\";\necho starts_one_ends(6);\necho \"\\n\";\necho starts_one_ends(7);\n\
    echo \"\\n\";\necho starts_one_ends(8);\necho \"\\n\";\necho starts_one_ends(9);\n\
    echo \"\\n\";\necho starts_one_ends(10);\necho \"\\n\";\necho starts_one_ends(11);\n\
    echo \"\\n\";\necho starts_one_ends(12);\necho \"\\n\";\necho starts_one_ends(13);\n\
    echo \"\\n\";\necho starts_one_ends(14);\necho \"\\n\";\necho starts_one_ends(15);\n\
    echo \"\\n\";\necho starts_one_ends(16);\necho \"\\n\";\necho starts_one_ends(17);\n\
    echo \"\\n\";\necho starts_one_ends(18);\necho \"\\n\";\necho starts_one_ends(19);\n\
    echo \"\\n\";\necho starts_one_ends(20);\necho \"\\n\";\necho starts_one_ends(21);\n\
    echo \"\\n\";\necho starts_one_ends(22);\necho \"\\n\";\necho starts_one_ends(23);\n\
    echo \"\\n\";\necho starts_one_ends(24);\necho \"\\n\";\necho starts_one_ends(25);\n\
    echo \"\\n\";\necho starts_one_ends(26);\necho \"\\n\";\necho starts_one_ends(27);\n\
    echo \"\\n\";\necho starts_one_ends(28);\necho \"\\n\";\necho starts_one_ends(29);\n\
    echo \"\\n\";\necho starts_one_ends(30", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    $dp = array_fill(0, $n, 0);\n    $dp[0] = 1;\n    $dp[1] = 2;\n  \
    \  for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n\
    \    }\n    return $dp[$n - 1] * 2;\n}\n\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;", "  $count = 0;\n  $start_ends = array();\n\
    \  $start_ends['start_1'] = pow(2, $n - 1);\n  $start_ends['end_1'] = pow(2, $n\
    \ - 1);\n  return $start_ends;\n}\n", "  $count = 0;\n  for ($i = 10 ** ($n -\
    \ 1); $i < 10 ** $n; $i++) {\n    if ($i % 10 == 1 || $i % 10 == 1) $count++;\n\
    \  }\n  return $count;\n}\n", "    if ($n < 1) {\n        return 0;\n    }\n \
    \   if ($n == 1) {\n        return 2;\n    }\n    $ways = 1;\n    $prev = 1;\n\
    \    $num = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        $num = 9 * $prev +\
    \ $ways;\n        $prev = $ways;\n        $ways = $num;\n    }\n    return $num;\n\
    }\n", "  $answer = 0;\n  $num_range = 1;\n  for ($i = 0; $i < $n; $i++) {\n  \
    \  $num_range *= 10;\n  }\n  for ($i = 1; $i < $num_range; $i++) {\n    if ($i\
    \ < 10) {\n      $answer++;\n    } else if (ends_with_one($i)) {\n      $answer++;\n\
    \    }\n  }\n  return $answer;\n}\n", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += ($i == 1 ? 2 : pow(2, $i));\n    }\n    return\
    \ $count;\n}\n\nforeach ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as $n) {\n    echo starts_one_ends($n)\
    \ . \"\\n\";\n}", "  if ($n < 2) return $n;\n  $dp = [];\n  for ($i = 0; $i <\
    \ $n; $i++) {\n    $dp[$i] = [];\n    $dp[$i][0] = 1;\n    $dp[$i][1] = 1;\n \
    \ }\n  $dp[$n] = [];\n  $dp[$n][0] = 0;\n  $dp[$n][1] = 0;\n  for ($i = 2; $i\
    \ <= $n; $i++) {\n    $dp[$i][0] = $dp[$i - 1][0] + $dp[$i - 1][1];\n    $dp[$i][1]\
    \ = $dp[$i - 1][0];\n  }\n  return $dp[$n][0] + $dp[$n][1];\n}\n\nprint_r(starts_one_ends(1)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(2) . PHP_EOL);\nprint_r(starts_one_ends(3)\
    \ . PHP_EOL);\nprint_r(starts_one_ends(4) . PHP_EOL);\nprint_r(starts_one_ends(5)\
    \ . PHP_EOL);", "  $count = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $count +=\
    \ $n - $i;\n  }\n  return $count;\n}\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2)\
    \ == 4);\nassert(starts_one_ends(3) == 6);\nassert(starts_one_ends(4) == 10);\n\
    assert(starts_one_ends(5) == 14);\nassert(starts_one_ends(6) == 20);\nassert(starts_one_ends(7)\
    \ == 26);\nassert(starts_one_ends(8) == 34);\nassert(starts_one_ends(9) == 42);\n\
    assert(starts_one_ends(10) == 52);\necho \"Tests passed.\\n\";", "  if ($n < 2)\
    \ return pow(10, $n);\n  else return 10 * starts_one_ends($n - 1) + 2 * pow(10,\
    \ $n - 1);\n}\n\nfor ($i = 1; $i < 4; $i++) {\n  print starts_one_ends($i) . PHP_EOL;\n\
    }", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += count_for_len($i);\n\
    \  }\n  return $count;\n}\n", "    // calculate total numbers with $n digits\n\
    \    $total = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $total += pow(9,\
    \ $i);\n    }\n    echo \"There are $total numbers with $n digits\\n\";\n\n  \
    \  // now, get the numbers starting with one\n    $ones = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $ones += pow(9, $i - 1);\n    }\n    echo \"There\
    \ are $ones numbers starting with 1\\n\";\n\n    // calculate the number ending\
    \ with one\n    $ones = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $ones\
    \ += pow(9, $i - 1);\n    }\n    echo \"There are $ones numbers ending with 1\\\
    n\";\n\n    // the result is sum of the two above\n    return $ones + $ones;\n\
    }\n\n$n = 2;\n$res = starts_one_ends($n);\necho \"There are $res numbers of $n-digit\
    \ numbers starting or ending with 1\\n\";", "  $one = $n-1;\n  $nine = $n-1;\n\
    \  $ten = 1;\n  $sum = $one + $nine + $ten;\n  for ($i = 0; $i < $n-2; $i++) {\n\
    \    $one *= 10;\n    $nine *= 9;\n    $ten *= 10;\n    $sum += $one + $nine +\
    \ $ten;\n  }\n  return $sum;\n}\n\n$i = 1;\nwhile ($i <= 1000000) {\n  echo \"\
    $i:\\t\" . starts_one_ends($i) . PHP_EOL;\n  $i++;\n}", "  $left_zeros = str_repeat('0',\
    \ $n - 1);\n  $right_zeros = str_repeat('0', $n - 2);\n  $start_1 = $left_zeros\
    \ . '1' . $right_zeros;\n  $end_1 = $right_zeros . '1' . $left_zeros;\n  return\
    \ $start_1 + $end_1;\n}\n\necho starts_one_ends(2);\necho starts_one_ends(3);\n\
    echo starts_one_ends(4);\necho starts_one_ends(5);\necho starts_one_ends(6);\n\
    echo starts_one_ends(7);\necho starts_one_ends(8);\necho starts_one_ends(9);\n\
    echo starts_one_ends(10);\necho starts_one_ends(11);\necho starts_one_ends(12);\n\
    echo starts_one_ends(13);\necho starts_one_ends(14);\necho starts_one_ends(15);\n\
    echo starts_one_ends(16);\necho starts_one_ends(17);\necho starts_one_ends(18);\n\
    echo starts_one_ends(19);\necho starts_one_ends(20);\necho starts_one_ends(21);\n\
    echo starts_one_ends(22);\necho starts_one_ends(23);\necho starts_one_ends(24);\n\
    echo starts_one_ends(25);\necho starts_one_ends(26);\necho starts_one_ends(27);\n\
    echo starts_one_ends(28);\necho starts_one_ends(29);\necho starts_one_ends(30);\n\
    echo starts_one_ends(31);\necho starts_one_ends(32);\necho starts_one_ends(33);\n\
    echo starts_one_ends(34);\necho starts_one_ends(35);\necho starts_one_ends(36);\n\
    echo starts_one_ends(37);\necho starts_one_ends(38);\necho starts_one_ends(39);\n\
    echo starts_one_ends(40);\necho starts_one_ends(41);\necho starts_one_ends(42);\n\
    echo", "  if($n === 1) {\n    return 2;\n  }\n  if($n === 2) {\n    return 3;\n\
    \  }\n  $dp[1] = 2;\n  $dp[2] = 3;\n  for($i = 3; $i <= $n; $i++) {\n    $dp[$i]\
    \ = $dp[$i - 1] + $dp[$i - 2];\n  }\n  return $dp[$n];\n}\nvar_dump(starts_one_ends(3));",
  "    // initialize count\n    $count = 0;\n    // loop from 1 to n\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        // cast i to string\n        $i = (string)$i;\n\
    \        // check if i starts or ends with 1\n        if ($i[0] == '1' || $i[strlen($i)\
    \ - 1] == '1') {\n            // if so, increment count\n            $count++;\n\
    \        }\n    }\n    // return count\n    return $count;\n}\n", "  $tens = pow(10,\
    \ $n - 1);\n  return 2 * ($tens - 1) + ($tens - 1) * (int) $n;\n}\n", "    $arr\
    \ = ['0' => 0, '1' => 1, '2' => 1, '3' => 1, '4' => 1, '5' => 1, '6' => 1, '7'\
    \ => 1, '8' => 1, '9' => 1];\n    for ($i = 2; $i <= $n; $i++) {\n        for\
    \ ($j = 0; $j <= 9; $j++) {\n            if ($j == 0) {\n                $arr[$j]\
    \ = $arr[$j] + $arr[$j];\n            } elseif ($j == 9) {\n                $arr[$j]\
    \ = $arr[$j - 1];\n            } else {\n                $arr[$j] = $arr[$j -\
    \ 1] + $arr[$j];\n            }\n        }\n    }\n    $count = 0;\n    for ($i\
    \ = 1; $i <= 9; $i++) {\n        $count += $arr[$i];\n    }\n    return $count;\n\
    }\n", "  $total = 0;\n  $total += pow(3, $n-1); // Account for all numbers that\
    \ have a leading 0\n  $total += pow(2, $n-1); // Account for all numbers that\
    \ have a leading 1\n  // Account for all numbers that have a trailing 1\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    $total += (2 * pow(3, $i-1) * pow(2, $n-$i-1));\n\
    \  }\n  return $total;\n}\n\n$in = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nforeach\
    \ ($in as $i) {\n  echo starts_one_ends($i) . \"\\n\";\n}", "    if ($n <= 0)\
    \ {\n        return 0;\n    }\n    $result = 0;\n    $start = array();\n    $start[0]\
    \ = 1;\n    $start[1] = 1;\n    $end = array();\n    $end[0] = 1;\n    $end[1]\
    \ = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $start[$i] = $start[$i - 1]\
    \ + $end[$i - 1];\n        $end[$i] = $start[$i - 1];\n    }\n    $result = $start[$n]\
    \ + $end[$n];\n    return $result;\n}\n$n = 4;\necho starts_one_ends($n);", " \
    \   if ($n == 1) return 2;\n    if ($n == 2) return 4;\n    $nums = array(1,1,1,1);\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $temp = $nums[0];\n        $nums[0]\
    \ = array_sum($nums);\n        $nums[1] = $nums[2];\n        $nums[2] = $nums[3];\n\
    \        $nums[3] = $temp;\n    }\n    return array_sum($nums);\n}\n\necho starts_one_ends(3)\
    \ . \"\\n\";", "  if($n == 1) {\n    return 1;\n  }\n  if($n == 2) {\n    return\
    \ 10;\n  }\n  return $n * 10 + (1 * pow(10, $n-1));\n}\n\necho starts_one_ends(1)\
    \ . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\
    \\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(10) . \"\\n\"\
    ;", "  if ($n < 2) return 0;\n  return pow(10, $n - 1) + starts_one_ends($n -\
    \ 1);\n}\n", "    $count = 0;\n    $start = 0;\n    if ($n === 1) {\n        return\
    \ 1;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        $count += count_unique_numbers($i);\n\
    \    }\n    return $count;\n}\n", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    if ($i == 1) {\n      $count++;\n    } else if ($i % 10 == 1) {\n   \
    \   $count++;\n    }\n  }\n  return $count;\n}\n\necho \"Starting with one or\
    \ ending with one: \";\necho starts_one_ends(1000) . \"\\n\";\n", "  if ($n ==\
    \ 1) {\n    return 2;\n  } else {\n    return starts_one_ends($n - 1) + pow(10,\
    \ $n - 1);\n  }\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));", "  $num = intval(pow(10,\
    \ $n - 1) + 1);\n  $res = 1;\n  for ($i = 0; $i < $n - 1; $i++) {\n    $res *=\
    \ 9;\n  }\n  return $res;\n}\n$i = 1;\nwhile ($i < 8) {\n  echo starts_one_ends($i),\
    \ \"\\n\";\n  $i++;\n}", "  $total = 0;\n  if ($n > 0) {\n    $total += 8 * pow(10,\
    \ $n - 1);\n    $total += starts_one_ends($n - 1);\n  }\n  return $total;\n}\n",
  "    if ($n == 1) {\n        return 2;\n    } else {\n        $start = pow(10, $n\
    \ - 1);\n        $end = 10;\n        $ret = $start + $end;\n        for ($i =\
    \ 2; $i < $n; $i++) {\n            $start = (int)($start / 10);\n            $end\
    \ = $end * 10;\n            $ret += $start + $end;\n        }\n        return\
    \ $ret;\n    }\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    $start_one\
    \ = 0;\n    $end_one = 0;\n    if ($n < 2) {\n        return 0;\n    }\n    if\
    \ ($n == 2) {\n        return 1;\n    }\n    $start_one = 11;\n    $end_one =\
    \ 10;\n    for ($i = 3; $i <= $n; $i++) {\n        $start_one = 10 * $start_one\
    \ + pow(10, $i - 2);\n        $end_one = 10 * $end_one + 9;\n    }\n    $count\
    \ = $start_one + $end_one;\n    return $count;\n}\n\necho starts_one_ends(3);",
  "    if ($n <= 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return\
    \ 10;\n    }\n    $ans = starts_one_ends($n - 1) * 9 +\n        pow(10, $n - 2)\
    \ * 2;\n    return $ans;\n}\n\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;",
  "  if ($n == 1) {\n    return 2;\n  } else {\n    return starts_one_ends($n - 1)\
    \ + pow(9, $n - 1);\n  }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\";",
  "  if ($n == 1) {\n    return 2;\n  }\n  $p = 100;\n  if ($n == 2) {\n    return\
    \ 10;\n  }\n  for ($i = 3; $i <= $n; $i++) {\n    $p *= 10;\n  }\n  $p /= 10;\n\
    \  $p -= $p % pow(10, $n-1);\n  $p += $p / 10;\n  return $p;\n}\n\nforeach (array(1,\
    \ 2, 3, 4, 5, 10, 20, 100) as $n) {\n  echo starts_one_ends($n), \"\\n\";\n}",
  "  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n", "    if ($n == 1)\
    \ {\n        return 2;\n    } else {\n        return pow(2, $n - 1) + (9 * pow(2,\
    \ $n - 2));\n    }\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(7));\nvar_dump(starts_one_ends(8));\n\
    var_dump(starts_one_ends(9));\nvar_dump(starts_one_ends(10));", "    if ($n ==\
    \ 1) {\n        return 2;\n    } else {\n        $count = $n * 2;\n        for\
    \ ($i = 2; $i < $n; $i++) {\n            $count += pow(2, $i - 1);\n        }\n\
    \        return $count;\n    }\n}\n", "    $count = 0;\n    $maximum = pow(10,\
    \ $n) - 1;\n    $minimum = pow(10, $n - 1);\n    for ($i = $minimum; $i <= $maximum;\
    \ $i++) {\n        if (substr($i, 0, 1) == 1 || substr($i, -1) == 1) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\n\nvar_dump(starts_one_ends(1));\n\
    var_dump(starts_one_ends(2));\nvar_dump(starts_one_ends(4));", "  $count = 0;\n\
    \  for ($i = 1; $i <= 9; $i++) {\n    $count += dfs($n, $i);\n  }\n  return $count;\n\
    }\n", "    // Let f(n) be the number of n-digit positive integers that start or\
    \ end\n    // with 1. It is not too hard to see that if n is odd, then f(n) =\
    \ f(n-1).\n    // If n is even, then f(n) = f(n-1) - 1.\n    // The explanation\
    \ is as follows: a positive integer of n digits can either\n    // start with\
    \ 1 and end with a number that is not 1, or end with 1 and start\n    // with\
    \ a number that is not 1. f(n-1) accounts for the first case. As for\n    // the\
    \ second case, if we subtract the total number of integers of (n-1)\n    // digits\
    \ that end with 1, then the difference is the number of integers of\n    // (n-1)\
    \ digits that start with 1.\n    $dp = array(1,1);\n    $dp[] = count($dp);\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[] = $dp[$i-1] + ($i % 2 == 0\
    \ ? -1 : 0);\n    }\n    return $dp[$n];\n}\n\necho starts_one_ends(7) . \"\\\
    n\";", "  $arr = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1];\n  if ($n <= 1) {\n    return\
    \ 1;\n  }\n  for ($i = 2; $i <= $n; $i++) {\n    $arr[$i] = 10 * $arr[$i - 1]\
    \ - 9 * $arr[$i - 2];\n  }\n  return $arr[$n];\n}\n", "    if($n <= 1) return\
    \ 0;\n    else if($n == 2) return 9;\n    else if($n == 3) return 30;\n    else\
    \ if($n == 4) return 90;\n    else if($n == 5) return 270;\n    else if($n ==\
    \ 6) return 810;\n    else if($n == 7) return 2430;\n    else if($n == 8) return\
    \ 7290;\n    else if($n == 9) return 21870;\n    else if($n == 10) return 65610;\n\
    \    else if($n == 11) return 196830;\n    else if($n == 12) return 590490;\n\
    \    else if($n == 13) return 1771470;\n    else if($n == 14) return 5314410;\n\
    \    else if($n == 15) return 15943240;\n    else if($n == 16) return 47829690;\n\
    \    else if($n == 17) return 143489110;\n    else if($n == 18) return 430467260;\n\
    \    else if($n == 19) return 1291401630;\n    else if($n == 20) return 3874204890;\n\
    \    else if($n == 21) return 11622614600;\n    else if($n == 22) return 34867844300;\n\
    \    else if($n == 23) return 104603532060;\n    else if($n == 24) return 313810596090;\n\
    \    else if($n == 25) return 941431788270;\n    else if($n == 26) return 2824295364800;\n\
    \    else if($n == 27) return 8472886094400;\n    else if($n == 28) return 25418658283200;\n\
    \    else if($n == 29) return 76255974849800;\n    else if($n == 30) return 228767924549600;\n\
    \    else if($n == 31) return 686303773648820;\n    else if($n == 32) return 2058911320946490;\n\
    \    else if($n == 33) return 6176733962839600;\n    else if($n == 34) return\
    \ 18530201888518580;\n    else if($", "    $table = array_fill(0, $n, array_fill(0,\
    \ 2, 0));\n    $table[0][0] = 1;\n    $table[0][1] = 1;\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        $table[$i][0] = $table[$i - 1][0] + $table[$i - 1][1];\n\
    \        $table[$i][1] = $table[$i - 1][0];\n    }\n    return $table[$n - 1][0]\
    \ + $table[$n - 1][1];\n}\n\nforeach (range(1, 6) as $n) {\n    echo \"Starts\
    \ one ends for $n = \" . starts_one_ends($n) . \"\\n\";\n}", "    if ($n < 1)\
    \ return 0;\n    if ($n == 1) return 2;\n    $a = 2;\n    $b = 0;\n    $tmp =\
    \ 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $tmp = $a;\n        $a = $a\
    \ + $b;\n        $b = $tmp;\n    }\n    return $a + $b;\n}\n", "    if ($n ==\
    \ 1) return 10;\n    if ($n == 2) return 200;\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\nfor ($i = 1; $i <= 9; $i++) {\n    print_r(starts_one_ends($i));\n\
    \    echo \"\\n\";\n}", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\necho starts_one_ends(5);",
  "  if($n == 1) {\n    return 9;\n  }\n\n  if($n == 2) {\n    return 18;\n  }\n\n\
    \  $ans = starts_one_ends($n - 1) + starts_one_ends($n - 2);\n  return $ans;\n\
    }\n", "  $count = 0;\n  for ($i = 10 ** ($n - 1); $i < 10 ** $n; $i++) {\n   \
    \ if (strlen($i) == $n) {\n      if (strpos($i, \"1\") === 0 || strpos($i, \"\
    1\") === strlen($i) - 1) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n\
    }\n", "  // Time: O(n)\n  // Space: O(1)\n  // if n == 1, all single digit numbers\
    \ start with 1, hence the count is 9\n  if ($n == 1) {\n    return 9;\n  }\n\n\
    \  // all single digit numbers end with 1 hence 10\n  $ones = 10;\n  // all two\
    \ digit numbers starting with 1\n  $tens = 9;\n  // all two digit numbers ending\
    \ with 1\n  $end = 10;\n  for ($i = 2; $i <= $n; $i++) {\n    // the count of\
    \ numbers with length i = total count\n    // of numbers with length i-1 (11...1)\
    \ plus the count of numbers\n    // of length i-1 that ends with 1 and has one\
    \ less digit to allow\n    // to be at the beginning of i-length numbers.\n  \
    \  $count = $ones + $tens;\n    // all two digit numbers end with 1.\n    $tens\
    \ = $ones;\n    // all two digit numbers ending with 1\n    $ones = $count;\n\
    \  }\n  return $count;\n}\n\nfor ($i = 1; $i < 10; $i++) {\n  echo \"count of\
    \ numbers of length $i: \" . starts_one_ends($i) . PHP_EOL;\n}", "    if ($n ==\
    \ 1) {\n        return 2;\n    } else if ($n == 2) {\n        return 3;\n    }\
    \ else {\n        return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n\
    \    }\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\\
    n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\n\
    echo starts_one_ends(5) . \"\\n\";", "    $result = 0;\n    if ($n == 1) {\n \
    \       $result = 10;\n    } else {\n        // number of n-digit numbers that\
    \ end with 1, need to keep track of\n        // number of zeros (1, 10, 100, 1000).\n\
    \        $zeros = 1;\n        $ends_one = 0;\n        // number of n-digit numbers\
    \ that start with 1, need to keep track of\n        // number of 9s (9, 99, 999,\
    \ 9999).\n        $nines = 1;\n        $starts_one = 0;\n        // Start with\
    \ n = 2 since we already took care of 1-digit numbers.\n        for ($i = 2; $i\
    \ <= $n; $i++) {\n            // for each number that ends with 1, we can append\
    \ a zero to make\n            // the number have n+1 digits.\n            $zeros\
    \ = $ends_one;\n            // for each number that ends with 1, we can add a\
    \ 2-9 to the end of\n            // it to make the number have n+1 digits.\n \
    \           $ends_one = $zeros + $ends_one + 9;\n            // for each number\
    \ that starts with 1, we can add a zero to the\n            // beginning of it\
    \ to make the number have n+1 digits.\n            $nines *= 10;\n           \
    \ // for each number that starts with 1, we can add a 0-8 to the\n           \
    \ // beginning of it to make the number have n+1 digits.\n            $starts_one\
    \ = $nines + $starts_one + 8;\n        }\n        $result = $starts_one + $ends_one;\n\
    \    }\n    return $result;\n}\n", "  $total = 9;\n  $a = 9;\n  $b = 1;\n  for\
    \ ($i = 2; $i <= $n; $i++) {\n    $total = $total * 10 - $a + $b;\n    $a = $a\
    \ * 10;\n    $b = $b * 10;\n  }\n  return $total;\n}\n\nassert(starts_one_ends(1)\
    \ == 2);\nassert(starts_one_ends(2) == 12);\nassert(starts_one_ends(3) == 62);\n\
    assert(starts_one_ends(4) == 302);\nassert(starts_one_ends(5) == 1492);\nassert(starts_one_ends(6)\
    \ == 7452);\nassert(starts_one_ends(7) == 37212);\nassert(starts_one_ends(8) ==\
    \ 186052);\nassert(starts_one_ends(9) == 932752);\nassert(starts_one_ends(10)\
    \ == 4665852);\nassert(starts_one_ends(11) == 23337152);\n", "    if ($n == 1)\
    \ {\n        return 2;\n    }\n    $dp = array_fill(0, $n, 0);\n    $dp[0] = 1;\n\
    \    $dp[1] = 2;\n    for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i\
    \ - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1] * 2;\n}\n\n$n = 1;\n$ret\
    \ = starts_one_ends($n);\nvar_dump($ret);", "    if ($n == 1) {\n        return\
    \ 2;\n    }\n    $start = ($n - 1) * pow(9, 2);\n    $end = (pow(10, $n) - 1)\
    \ / 9;\n    return $start + $end;\n}\n\n$n = 3;\necho starts_one_ends($n) . PHP_EOL;",
  "  if ($n <= 0) return 0;\n  if ($n == 1) return 1;\n  return pow(10, $n - 1) +\
    \ starts_one_ends($n - 1);\n}\n\nvar_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(3));\nvar_dump(starts_one_ends(4));\nvar_dump(starts_one_ends(5));\n\
    var_dump(starts_one_ends(6));\nvar_dump(starts_one_ends(10));", "  // Find the\
    \ number of base 10 numbers that start with 1. This is\n  // easy, as it's just\
    \ 9 * 10^(n-1).\n  $total = 9 * pow(10, $n - 1);\n\n  // The end of the number\
    \ can only be 1 if the digits in the middle\n  // are all 0.\n  $num_zeros = $n\
    \ - 2;\n  if ($num_zeros == 0) {\n    return $total;\n  }\n\n  // For each number\
    \ of zeros, we have 9 choices for the first digit,\n  // 10 choices for the last\
    \ digit, and then 10^(num_zeros - 1)\n  // choices for the digits in the middle.\n\
    \  for ($i = 1; $i <= $num_zeros; $i++) {\n    $total += 9 * 10 * pow(10, $i -\
    \ 1);\n  }\n\n  return $total;\n}\n", "    if ($n == 1) {\n        return 2;\n\
    \    } else {\n        return starts_one_ends($n - 1) + 10 * pow(10, $n - 2);\n\
    \    }\n}\n", "    $f = [1, 1];\n    for ($i = 1; $i < $n; $i++) {\n        $f[$i\
    \ + 1] = $f[$i] + 9 * $f[$i - 1];\n    }\n    return $f[$n];\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;", "   \
    \ if ($n == 1) return 2;\n    if ($n == 2) return 3;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    if ($n == 2) {\n        return 7;\n    }\n    $for_number = 0;\n \
    \   $for_start = 0;\n    $for_end = 0;\n    $for_both = 0;\n    $for_zero = 0;\n\
    \    $for_max = 0;\n    $for_min = 0;\n    if ($n == 3) {\n        $for_number\
    \ = 6;\n        $for_start = 2;\n        $for_end = 4;\n        $for_both = 1;\n\
    \        $for_zero = 1;\n        $for_max = 2;\n        $for_min = 1;\n    }\n\
    \    if ($n == 4) {\n        $for_number = 35;\n        $for_start = 14;\n   \
    \     $for_end = 21;\n        $for_both = 6;\n        $for_zero = 6;\n       \
    \ $for_max = 10;\n        $for_min = 4;\n    }\n    if ($n == 5) {\n        $for_number\
    \ = 222;\n        $for_start = 86;\n        $for_end = 135;\n        $for_both\
    \ = 51;\n        $for_zero = 51;\n        $for_max = 70;\n        $for_min = 30;\n\
    \    }\n    if ($n == 6) {\n        $for_number = 1397;\n        $for_start =\
    \ 552;\n        $for_end = 845;\n        $for_both = 351;\n        $for_zero =\
    \ 351;\n        $for_max = 496;\n        $for_min = 192;\n    }\n    if ($n ==\
    \ 7) {\n        $for_number = 8855;\n        $for_start = 3404;\n        $for_end\
    \ = 5451;\n        $for_both = 2251;\n        $for_zero = 2251;\n        $for_max\
    \ = 3216;\n        $for_min = 1264;\n    }\n    $count = 0;\n    if ($n > 3) {\n\
    \        $count += $for_number;\n        $", "  $count = 0;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $count += 9 * pow(10, $i - 1);\n  }\n  return $count;\n\
    }\nvar_dump(starts_one_ends(1));", "    if ($n == 1) {\n        return 2;\n  \
    \  }\n    if ($n == 2) {\n        return 10;\n    }\n    $pow = pow(10, $n - 1);\n\
    \    $minus_one = pow(10, $n - 2);\n    return $pow + 9 * $minus_one;\n}\n", " \
    \   if($n == 1) return 2;\n    if($n == 2) return 6;\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3).\"\\n\";\necho\
    \ starts_one_ends(4).\"\\n\";\necho starts_one_ends(5).\"\\n\";\necho starts_one_ends(6).\"\
    \\n\";\necho starts_one_ends(7).\"\\n\";\necho starts_one_ends(8).\"\\n\";\necho\
    \ starts_one_ends(9).\"\\n\";\necho starts_one_ends(10).\"\\n\";\necho starts_one_ends(11).\"\
    \\n\";\necho starts_one_ends(12).\"\\n\";\necho starts_one_ends(13).\"\\n\";\n\
    echo starts_one_ends(14).\"\\n\";\necho starts_one_ends(15).\"\\n\";\necho starts_one_ends(16).\"\
    \\n\";\necho starts_one_ends(17).\"\\n\";\necho starts_one_ends(18).\"\\n\";\n\
    echo starts_one_ends(19).\"\\n\";\necho starts_one_ends(20).\"\\n\";\necho starts_one_ends(21).\"\
    \\n\";\necho starts_one_ends(22).\"\\n\";\necho starts_one_ends(23).\"\\n\";\n\
    echo starts_one_ends(24).\"\\n\";\necho starts_one_ends(25).\"\\n\";\necho starts_one_ends(26).\"\
    \\n\";\necho starts_one_ends(27).\"\\n\";\necho starts_one_ends(28).\"\\n\";\n\
    echo starts_one_ends(29).\"\\n\";\necho starts_one_ends(30).\"\\n\";\necho starts_one_ends(31).\"\
    \\n\";\necho starts_one_ends(32).\"\\n\";\necho starts_one_ends(33).\"\\n\";\n\
    echo starts_one_ends(34).\"\\n\";\necho starts_one_ends(35).\"\\n\";\necho starts_one_ends(36).\"\
    \\n\";\necho starts_one_ends(37).\"\\n\";\necho starts_one_ends(", "  $count =\
    \ 0;\n  if ($n == 1) {\n    return 2;\n  }\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $count += pow(10, $i - 1);\n  }\n  return $count * 2;\n}\n\nassert(starts_one_ends(1)\
    \ == 2);\nassert(starts_one_ends(2) == 20);\nassert(starts_one_ends(3) == 200);\n",
  "  // base case\n  if ($n == 1) return 2;\n\n  $tens = 10;\n  for ($i = 2; $i <\
    \ $n; $i++) $tens *= 10;\n\n  $ret = $tens + 9 * (1 + starts_one_ends($n - 1));\n\
    \  return $ret;\n}\n\nfor ($i = 1; $i < 5; $i++) {\n  $result = starts_one_ends($i);\n\
    \  var_dump($result);\n}", "    $length = 1;\n    $sum = 0;\n    $starts = 0;\n\
    \    $ends = 0;\n    $s = 1;\n    $e = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $e = $e * 10;\n        $s = $s * 10;\n        $starts = $starts + $s;\n\
    \        $ends = $ends + $e;\n        $sum = $sum + $starts + $ends;\n    }\n\
    \    return $sum;\n}\n\necho starts_one_ends(5);\n", "    if ($n == 1) {\n   \
    \     return 2;\n    } else if ($n == 2) {\n        return 5;\n    } else {\n\
    \        $a = 1;\n        $b = 1;\n        $c = 2;\n        for ($i = 3; $i <=\
    \ $n; $i++) {\n            $d = $a + $b + $c;\n            $a = $b;\n        \
    \    $b = $c;\n            $c = $d;\n        }\n        return $d;\n    }\n}\n\
    \necho starts_one_ends(5) . \"\\n\";", "  $input = str_repeat('1', $n);\n  $max\
    \ = 10**$n;\n  $count = 0;\n  for ($i = 1; $i < $max; $i++) {\n    if (strpos($i,\
    \ $input) === 0 || strpos($i, $input) === strlen($i) - strlen($input)) {\n   \
    \   $count++;\n    }\n  }\n  return $count;\n}\n", "    // 1-digit positive integers\
    \ that start with 1: 1\n    if ($n == 1) {\n        return 1;\n    }\n    // n-digit\
    \ positive integers that start with 1: 9*10^(n-2)\n    $starts = 9 * pow(10, $n\
    \ - 2);\n    // n-digit positive integers that end with 1: 10^(n-1)\n    $ends\
    \ = pow(10, $n - 1);\n    return $starts + $ends;\n}\necho starts_one_ends(3);",
  "  $sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $sum += pow(10, $i);\n  }\n \
    \ return $sum * 2;\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n", "  if ($n == 1) return 2;\n  $left_most = 10\
    \ ** ($n - 1);\n  $left_most_1 = $left_most + 1;\n  $right_most = pow(10, $n)\
    \ - 1;\n  $right_most_1 = pow(10, $n - 1) - 1;\n  return $left_most_1 + $right_most_1\
    \ + starts_one_ends($n - 1);\n}\n\nassert(starts_one_ends(1) == 2);\nassert(starts_one_ends(2)\
    \ == 12);\nassert(starts_one_ends(3) == 132);\nassert(starts_one_ends(4) == 1332);\n\
    assert(starts_one_ends(5) == 13332);\nassert(starts_one_ends(6) == 133332);\n\
    assert(starts_one_ends(7) == 1333332);\nassert(starts_one_ends(8) == 13333332);\n\
    assert(starts_one_ends(9) == 133333332);\nassert(starts_one_ends(10) == 1333333332);\n\
    echo \"Tests passed\\n\";", "  if ($n < 2) {\n    return 0;\n  }\n\n  if ($n ==\
    \ 2) {\n    return 10;\n  }\n\n  $count = pow(10, $n - 1);\n\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    $count += pow(10, $i - 1) * (pow(10, $n - $i) - 1);\n  }\n\
    \n  return $count;\n}\n\nfor ($i = 1; $i < 20; $i++) {\n  echo starts_one_ends($i)\
    \ . PHP_EOL;\n}", "  $num = 0;\n  $i = pow(10, $n - 1);\n  while ($i < pow(10,\
    \ $n)) {\n    if ($i % 10 == 1 || $i / pow(10, $n - 1) == 1) {\n      $num++;\n\
    \    }\n    $i++;\n  }\n  return $num;\n}\necho starts_one_ends(1) . PHP_EOL;\n\
    echo starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\n", "    if ($n === 1) {\n \
    \       return 1;\n    }\n\n    $left = $n - 1;\n    $right = 1;\n    $sum = 1;\n\
    \    $res = 1;\n    $digits = \"123456789\";\n    $power = 10;\n    $end = substr($digits,\
    \ 0, $n);\n    $start = substr($digits, 0, $n - 1);\n\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        $sum = $sum * $left;\n        $res = $res + $sum;\n       \
    \ $left--;\n    }\n\n    for ($i = $n - 1; $i > 0; $i--) {\n        $sum = $sum\
    \ * $right;\n        $res = $res + $sum;\n        $right++;\n    }\n\n    $res\
    \ = $res + $sum;\n\n    $res = $res + (int) substr($end, 0, -1);\n    $res = $res\
    \ + (int) substr($start, 1);\n\n    return $res;\n}\n\n$input = 5;\n$result =\
    \ starts_one_ends($input);\necho $result;", "    // We choose whether the first\
    \ digit is 1 and then count the number of\n    // legal numbers with the rest\
    \ of the digits.\n    $count = 9 * pow(10, $n - 1);\n    // We choose whether\
    \ the last digit is 1 and then count the number of\n    // legal numbers with\
    \ the rest of the digits.\n    $count += 9 * pow(10, $n - 1);\n    // We can't\
    \ have both the first and last digits as 1, so we subtract 1.\n    return $count\
    \ - 1;\n}", "  $start = 9;\n  $ends = pow(10, $n - 1);\n  $res = $start + $ends;\n\
    \  return $res;\n}", "  // Base case.\n  if ($n == 1) {\n    return 2;\n  }\n\n\
    \  // Recursive case.\n  return (10 * starts_one_ends($n - 1)) - pow(9, $n - 1);\n\
    }\n", "    if ($n < 1) {\n        return 0;\n    }\n    return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1) + 9 * pow(10, $n - 2);\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho\
    \ starts_one_ends(29", "  if ($n < 1) {\n    return 0;\n  }\n  if ($n == 1) {\n\
    \    return 1;\n  }\n  $x = 0;\n  $min = 1;\n  $max = 1;\n  $i = 1;\n  while ($i++\
    \ < $n) {\n    $min *= 10;\n    $max = $max * 10 + 1;\n  }\n  $x += $max - $min\
    \ + 1;\n  // $x += pow(10, $n) - pow(10, $n - 1);\n  $x += starts_one_ends($n\
    \ - 1);\n  return $x;\n}\n\nvar_dump(starts_one_ends(3));", "    $count = 0;\n\
    \    $pow = pow(10, $n - 1);\n    for ($i = $pow; $i < $pow * 10; $i++) {\n  \
    \      if ($i % 10 == 1 || $i % $pow == 1) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(6);", "    $prefixOne =\
    \ 1;\n    $suffixOne = 1;\n    $nonOne = 0;\n    $all = 0;\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        $tmp = $all;\n        $all = $nonOne + $prefixOne +\
    \ $suffixOne;\n        $nonOne = $all - $prefixOne - $suffixOne;\n        $prefixOne\
    \ = $tmp;\n        $suffixOne = $prefixOne;\n    }\n    return $all;\n}\n", " \
    \ if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 9;\n  }\n \
    \ return 9 * pow(10, $n - 2);\n}\n", "    $total = 0;\n    $offset = 1;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $total += $offset;\n        $offset *= 10;\n\
    \    }\n    return $total * 2;\n}\n\nforeach (range(1, 10) as $n) {\n    echo\
    \ starts_one_ends($n) . PHP_EOL;\n}", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n", "    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n    \
    \    return 10;\n    }\n    return 9 * pow(10, $n - 2);\n}\n\n$fp = fopen(\"php://stdin\"\
    , \"r\");\n\nfscanf($fp, \"%d\", $t);\n\nfor ($i = 0; $i < $t; $i++) {\n    fscanf($fp,\
    \ \"%d\", $n);\n    echo starts_one_ends($n) . \"\\n\";\n}", "    if ($n == 1)\
    \ {\n        return 2;\n    }\n    $end = 9;\n    for ($i = 1; $i < $n - 1; $i++)\
    \ {\n        $end *= 10;\n    }\n    return $end * 2;\n}\necho starts_one_ends(5)\
    \ . PHP_EOL;", "    // $count = 0;\n    // for ($num = 1; $num <= pow(10, $n);\
    \ $num++) {\n    //     if (strpos($num, \"1\") === 0 || strpos($num, \"1\") ===\
    \ strlen($num) - 1) {\n    //         $count++;\n    //     }\n    // }\n    //\
    \ return $count;\n\n    // $count = 0;\n    // for ($i = 1; $i <= 9; $i++) {\n\
    \    //     $count += pow(10, $n - 1);\n    // }\n    // return $count * 2;\n\n\
    \    return pow(10, $n - 1) * 9;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);", "    $count = 0;\n    $p\
    \ = pow(10, $n - 1);\n    for ($i = $p; $i < $p * 10; $i++) {\n        if (strpos(strval($i),\
    \ '1') == 0 ||\n            strpos(strval($i), '1') == (strlen(strval($i)) - 1))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(10) . \"\
    \\n\";", "  $a = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $a += count_digits($i);\n\
    \  }\n  return $a;\n}\n", "  $answer = 0;\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $answer += 9 * pow(10, $i - 1);\n  }\n  return $answer;\n}\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\
    \\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\\n\"\
    ;\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\";\necho\
    \ starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10)\
    \ . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12) .\
    \ \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) . \"\
    \\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\\n\"\
    ;\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\";\n\
    echo starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\necho\
    \ starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23)\
    \ . \"\\n\";\necho starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25) .\
    \ \"\\n\";\necho starts_one_ends(26) . \"\\n\";\necho starts_one_ends(27) . \"\
    \\n\";\necho starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29) . \"\\n\"\
    ;\necho starts_one_ends(30) . \"\\n\";\necho starts_one_ends(31) . \"\\n\";\n\
    echo starts_one_ends(32) . \"\\n\";\necho starts_one_ends(33) . \"\\", "    if\
    \ ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n        return 3;\n\
    \    } else {\n        $start = starts_one_ends($n - 1);\n        $end = starts_one_ends($n\
    \ - 2);\n        return $start + $end;\n    }\n}\n\nassert(starts_one_ends(1)\
    \ == 2);\nassert(starts_one_ends(2) == 3);\nassert(starts_one_ends(3) == 5);\n\
    assert(starts_one_ends(4) == 8);\nassert(starts_one_ends(5) == 13);\nassert(starts_one_ends(6)\
    \ == 21);\nassert(starts_one_ends(7) == 34);\nassert(starts_one_ends(8) == 55);\n\
    assert(starts_one_ends(9) == 89);\nassert(starts_one_ends(10) == 144);\n", " \
    \   if ($n == 1) {\n        return 2;\n    }\n    $dp = [1, 1];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + 1;\n    }\n    return\
    \ $dp[$n];\n}\n\nforeach (range(1, 10) as $n) {\n    echo sprintf(\"%2d: %d\\\
    n\", $n, starts_one_ends($n));\n}", "  if ($n == 1) {\n    return 2;\n  }\n  return\
    \ pow(2, $n - 1) + starts_one_ends($n - 1);\n}\n\necho starts_one_ends(5);", " \
    \   if($n == 1) {\n        return 2;\n    }\n    $result = 9 * (10 ** ($n - 2));\n\
    \    return $result;\n}", "    // First we construct the base number\n    $base\
    \ = '';\n    for ($i = 0; $i < $n; $i++) {\n        $base .= '1';\n    }\n   \
    \ $val = intval($base);\n    // Now we brute force to find all possibilities\n\
    \    $count = 0;\n    while ($val >= pow(10, $n - 1)) {\n        if ($val % 10\
    \ == 1) {\n            $count++;\n        }\n        $val--;\n    }\n    return\
    \ $count;\n}\n", "  $count = 0;\n  if ($n == 1) {\n    return 10;\n  }\n  for\
    \ ($i = 10 ** ($n - 1); $i < 10 ** $n; $i++) {\n    if (strpos($i, '1') === 0\
    \ || strpos($i, '1') === strlen($i) - 1) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n\n$i = 1;\n$count = 0;\nwhile (true) {\n  $count += starts_one_ends($i);\n\
    \  if ($count > 1000000) {\n    break;\n  }\n  $i++;\n}\necho $i;", "    if ($n\
    \ == 1) {\n        return 2;\n    }\n    return pow(10, $n - 1) * 2;\n}\n\nvar_dump(starts_one_ends(2));\n\
    var_dump(starts_one_ends(1));\nvar_dump(starts_one_ends(3));", "  if ($n == 1)\
    \ return 1;\n  return ends_one_ends($n - 1) + starts_one_ends($n - 1);\n}\n",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9, $i-1);\n\
    \    }\n    return $count;\n}\necho starts_one_ends(5);", "    if ($n == 1) {\n\
    \        return 2;\n    } else if ($n == 2) {\n        return 4;\n    } else {\n\
    \        return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n    }\n}\n\
    echo starts_one_ends(3) . PHP_EOL;", "    $total = 0;\n    $first_digit = 0;\n\
    \    $last_digit = 0;\n    $one_in_middle = 0;\n    $num_digits = 0;\n    $min\
    \ = pow(10, $n - 1);\n    $max = pow(10, $n) - 1;\n    for ($i = $min; $i <= $max;\
    \ $i++) {\n        $num_digits = digit_count($i);\n        $first_digit = get_first_digit($i);\n\
    \        $last_digit = get_last_digit($i);\n        $one_in_middle = contains_one($i);\n\
    \        if ($num_digits == $n) {\n            if ($first_digit == 1 || $last_digit\
    \ == 1 || $one_in_middle) {\n                $total++;\n            }\n      \
    \  }\n    }\n    return $total;\n}\n", "    if ($n == 1) {\n        return 1;\n\
    \    }\n    $nums = 1; //nums start with 1\n    $nums += 9; //nums end with 1\n\
    \    $nums += 9 * pow(10, $n - 2); //nums start with 0 and end with 1\n    return\
    \ $nums;\n}\n", "    if ($n == 1) {\n        return 2;\n    } else if ($n == 2)\
    \ {\n        return 4;\n    } else {\n        return starts_one_ends($n - 1) +\
    \ starts_one_ends($n - 2);\n    }\n}\n", "    if ($n <= 0) {\n        return \"\
    undefined\";\n    } elseif ($n == 1) {\n        return 2;\n    } else {\n    \
    \    return (9 * pow(10, $n - 1) - 9 + starts_one_ends($n - 1));\n    }\n}\n",
  "    if ($n == 1) {\n        return 10;\n    }\n    $sum = pow(10, $n - 1) + pow(10,\
    \ $n - 2);\n    for ($i = 2; $i < $n; $i++) {\n        $sum += pow(10, $n - $i\
    \ - 1) * 9;\n    }\n    return $sum;\n}\n\nvar_dump(starts_one_ends(2));", " \
    \ $first = pow(10, $n - 1);\n  $last = pow(10, $n);\n  $counter = 0;\n  for ($i\
    \ = $first; $i < $last; $i++) {\n    if ($i % 10 == 1 || $i / 10 == 1) {\n   \
    \   $counter++;\n    }\n  }\n  return $counter;\n}\n\nvar_dump(starts_one_ends(1));\
    \ // 2\nvar_dump(starts_one_ends(2)); // 3\nvar_dump(starts_one_ends(3)); // 4\n\
    var_dump(starts_one_ends(4)); // 5\n", "    $total = 0;\n    for ($i = $n; $i\
    \ > 0; $i--) {\n        if ($i == 1) {\n            $total += 1;\n        } else\
    \ {\n            $total += 9 * pow(10, $i - 2);\n        }\n    }\n    return\
    \ $total;\n}\n\necho starts_one_ends(3) . \"\\n\";", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  if ($n == 3) {\n    return\
    \ 5;\n  }\n  $count = 1;\n  for ($i = 1; $i < $n - 1; $i++) {\n    $count *= 9;\n\
    \  }\n  return $count * 5;\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(7) . \"\\n\"\
    ;\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\n\
    echo starts_one_ends(1000000) . \"\\n\";", "  // Iterate through each digit and\
    \ check if it can start or end with 1\n  $count = 0;\n  for ($i = pow(10, $n -\
    \ 1); $i < pow(10, $n); $i++) {\n    $count += starts_one($i) || ends_one($i);\n\
    \  }\n  return $count;\n}\n", "    if($n == 1) {\n        return 2;\n    } else\
    \ {\n        $start_count = 1;\n        $end_count = 1;\n        $n_minus_1 =\
    \ $n - 1;\n        $all_minus_one = 9;\n        for($i = 1; $i < $n_minus_1; $i++)\
    \ {\n            $all_minus_one *= 10;\n        }\n        return $start_count\
    \ + $end_count + $all_minus_one;\n    }\n}\n\n$n = 1;\nwhile($n < 10) {\n    echo\
    \ \"There are \" . starts_one_ends($n) . \" $n-digit numbers that start or end\
    \ with 1.\\n\";\n    $n++;\n}", "    $res = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $k = 0;\n        $p = 1;\n        for ($j = 0; $j < $i; $j++) {\n\
    \            $k += 9 * $p;\n            $p *= 10;\n        }\n        $res +=\
    \ $k;\n    }\n    return $res;\n}\n", "    $result = 0;\n    for ($i = 1; $i <=\
    \ 9; $i++) {\n        $result += count($n - 1, $i);\n    }\n    return $result;\n\
    }\n", "    $zeros = str_repeat('0', $n - 1);\n    return str_repeat('2', $n -\
    \ 1) . '1' . $zeros;\n}\n\n$a = starts_one_ends(3);\n$b = starts_one_ends(10);\n\
    print \"$a\\n\";\nprint \"$b\\n\";", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    return starts_one_ends($n - 1) + 9 * starts_one_ends($n - 2);\n}\n",
  "  if ($n == 1) {\n    return 2;\n  } else if ($n == 2) {\n    return 3;\n  } else\
    \ {\n    $total = 3;\n    $last = 3;\n    for ($i = 3; $i <= $n; $i++) {\n   \
    \   $total = $total + 2 * $last;\n      $last = 2 * $last;\n    }\n    return\
    \ $total;\n  }\n}\n\necho starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\n\
    echo \"\\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\n\
    echo \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";", "    if ($n === 1) {\n        return 1;\n    }\n    if ($n ===\
    \ 2) {\n        return 10;\n    }\n    return pow(10, $n - 1) + 9 * pow(10, $n\
    \ - 2);\n}\n\n$n = 4;\n$result = starts_one_ends($n);\nvar_dump($result);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
