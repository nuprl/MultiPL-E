name: HumanEval_112_reverse_delete
language: php
prompt: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n// then check if\
  \ the result string is palindrome.\n// A string is called palindrome if it reads\
  \ the same backward as forward.\n// You should return a tuple containing the result\
  \ string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"\
  ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the\
  \ result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result\
  \ should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n"
tests: "function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
  , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
  , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
  dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !==\
  \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $reversed = strrev($s);\n  $res = $s;\n  $arr = str_split($c);\n\
    \  foreach ($arr as $char) {\n    $res = str_replace($char, '', $res);\n  }\n\
    \  return $res === $reversed ? array($res, true) : array($res, false);\n}\n",
  "    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        if (strpos($c,\
    \ $s[$i]) !== false) {\n            $s = substr_replace($s, '', $i, 1);\n    \
    \        $i--;\n            $len--;\n        }\n    }\n    return array($s, $s\
    \ == strrev($s));\n}", "    //$c[0] se puede colocar si solo se quiere el primer\
    \ caracter\n    $characters = str_split($c);\n    $result = str_split($s);\n \
    \   $result2 = array();\n    foreach ($result as $value) {\n        foreach ($characters\
    \ as $value2) {\n            if ($value === $value2) {\n                $value\
    \ = '';\n            }\n        }\n        array_push($result2, $value);\n   \
    \ }\n    $result3 = implode($result2);\n    $reversed = strrev($result3);\n  \
    \  if ($result3 === $reversed) {\n        $result4 = [$result3, True];\n    }\
    \ else {\n        $result4 = [$result3, False];\n    }\n    return $result4;\n\
    }\n", "    $s = str_split($s);\n    $c = str_split($c);\n    $res = '';\n    foreach\
    \ ($s as $k => $v) {\n        if (!in_array($v, $c)) {\n            $res .= $v;\n\
    \        }\n    }\n    $res = str_split($res);\n    $rev = '';\n    for ($i =\
    \ count($res) - 1; $i >= 0; $i--) {\n        $rev .= $res[$i];\n    }\n    return\
    \ $rev == implode('', $res) ? $rev : false;\n}\n\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));", "  $result = \"\";\n  $s_array = str_split($s);\n  $c_array = str_split($c);\n\
    \  foreach ($s_array as $value) {\n    if(!in_array($value, $c_array)){\n    \
    \  $result .= $value;\n    }\n  }\n  if($result == strrev($result)){\n    return\
    \ [$result, True];\n  }else{\n    return [$result, False];\n  }\n}", "  $count\
    \ = 0;\n  $s = str_split($s);\n  for($i = 0; $i < count($s); $i++){\n    for($j\
    \ = 0; $j < strlen($c); $j++){\n      if($s[$i] == $c[$j]){\n        unset($s[$i]);\n\
    \        $count++;\n      }\n    }\n  }\n  $s = implode(\"\", $s);\n  if($count\
    \ > 0){\n    if($s == strrev($s)){\n      return [$s, true];\n    } else {\n \
    \     return [$s, false];\n    }\n  } else {\n    return [$s, false];\n  }\n}\n",
  "    $s = str_split($s);\n    $c = str_split($c);\n    $res = [];\n    for($i =\
    \ 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n            $res[]\
    \ = $s[$i];\n        }\n    }\n    $res1 = implode('', $res);\n    $res2 = strrev($res1);\n\
    \    return [$res1, $res1 == $res2];\n}", "    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        $s = str_replace($c[$i], '', $s);\n    }\n    return [$s, $s == strrev($s)];\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s,\
    \ $c);\n    $s = array_values($s);\n    return array(implode('', $s), $s == array_reverse($s));\n\
    }", "  $s_as_array = str_split($s);\n  $c_as_array = str_split($c);\n  $intersect\
    \ = array_intersect($s_as_array, $c_as_array);\n  $result = array_diff($s_as_array,\
    \ $intersect);\n  $result_as_string = implode($result);\n  $result_as_string_reversed\
    \ = strrev($result_as_string);\n  if ($result_as_string == $result_as_string_reversed)\
    \ {\n    return [$result_as_string, TRUE];\n  } else {\n    return [$result_as_string,\
    \ FALSE];\n  }\n}\n", "  $res = \"\";\n  for($i = 0; $i < strlen($s); $i++){\n\
    \    if(strpos($c, $s[$i]) === false){\n      $res .= $s[$i];\n    }\n  }\n  return\
    \ [$res, $res == strrev($res)];\n}", "    $string_array = str_split($s);\n   \
    \ $del_array = str_split($c);\n    $result = [];\n    $check = true;\n    foreach\
    \ ($string_array as $v) {\n        if (!in_array($v, $del_array)) {\n        \
    \    $result[] = $v;\n        }\n    }\n    if ($result != array_reverse($result))\
    \ {\n        $check = false;\n    }\n    return [implode('', $result), $check];\n\
    }", "  $count = strlen($s);\n  for($i = 0; $i < $count; $i++){\n    if(strpos($c,\
    \ $s[$i]) === FALSE){\n      $result .= $s[$i];\n    }\n  }\n  if($result == strrev($result)){\n\
    \    return array($result, TRUE);\n  }\n  return array($result, FALSE);\n}\n",
  "    $array_c = str_split($c);\n    $r = str_split($s);\n    $r = array_diff($r,\
    \ $array_c);\n    $r = implode('', $r);\n    return [$r, $r == strrev($r)];\n}",
  "    $string = '';\n    $string_len = strlen($s);\n    for($i = 0; $i < $string_len;\
    \ $i++){\n        if(strpos($c, $s[$i]) === false){\n            $string .= $s[$i];\n\
    \        }\n    }\n    $reverse_string = strrev($string);\n    if($string ===\
    \ $reverse_string){\n        return [$string, true];\n    }else{\n        return\
    \ [$string, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "\t$result\
    \ = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif (strpos($c, $s[$i])\
    \ === false) {\n\t\t\t$result .= $s[$i];\n\t\t}\n\t}\n\treturn [$result, strrev($result)\
    \ == $result];\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  //coding\
    \ and coding....\n  \t$pali = str_split($s);\n  \t$char = str_split($c);\n  \t\
    for ($i=0; $i < count($char); $i++) { \n  \t\t$key = array_search($char[$i], $pali);\n\
    \  \t\tunset($pali[$key]);\n  \t}\n  \t$str = \"\";\n  \tfor ($i=0; $i < count($pali);\
    \ $i++) { \n  \t\t$str .= $pali[$i];\n  \t}\n  \t$reverse = strrev($str);\n  \t\
    if($str == $reverse){\n  \t\treturn array($str,true);\n  \t}else{\n  \t\treturn\
    \ array($str,false);\n  \t}\n}\n", "    $parts = str_split($s);\n    $parts2 =\
    \ str_split($c);\n    $result = array_diff($parts, $parts2);\n    $resultStr =\
    \ implode(\"\", $result);\n    $palindrome = strrev($resultStr);\n    if ($resultStr\
    \ == $palindrome) {\n        return array($resultStr, true);\n    } else {\n \
    \       return array($resultStr, false);\n    }\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $res = [];\n    for($i = 0; $i < count($s); $i++){\n\
    \        if(!in_array($s[$i], $c)){\n            $res[] = $s[$i];\n        }\n\
    \    }\n    $res = implode('', $res);\n    $res_rev = strrev($res);\n    return\
    \ [$res, $res == $res_rev];\n}\necho '<pre>';\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\necho '</pre>';", "  $result = preg_replace(\"/[$c]/\",\"\",$s);\n\
    \  $palindrome = false;\n  if ($result == strrev($result)) $palindrome = true;\n\
    \  return [$result, $palindrome];\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    foreach ($s as $key => $value) {\n        foreach ($c as $char) {\n     \
    \       if ($value == $char) {\n                unset($s[$key]);\n           \
    \ }\n        }\n    }\n    $s = implode('', $s);\n    return array($s, ($s ==\
    \ strrev($s)));\n}\n\necho \"<pre>\";\nprint_r(reverse_delete(\"abcdedcba\", \"\
    ab\"));", "    $c_array = str_split($c);\n    $s_array = str_split($s);\n    $new_s\
    \ = [];\n    foreach ($s_array as $key => $value) {\n        if (!in_array($value,\
    \ $c_array)) {\n            $new_s[] = $value;\n        }\n    }\n    $new_s =\
    \ implode($new_s);\n    $is_palindrome = is_palindrome($new_s);\n    return array($new_s,\
    \ $is_palindrome);\n}", "    $s = str_split($s);\n    $c = str_split($c);\n  \
    \  $s = array_diff($s, $c);\n    $s = implode('', $s);\n    $s = str_split($s);\n\
    \    $s1 = implode('', $s);\n    $s = array_reverse($s);\n    $s = implode('',\
    \ $s);\n    if ($s1 == $s) {\n        return [$s1, true];\n    } else {\n    \
    \    return [$s1, false];\n    }\n}", "  $c = str_split($c);\n  $s = str_split($s);\n\
    \  foreach($c as $char){\n    $s = array_diff($s, [$char]);\n  }\n  $s = implode($s);\n\
    \  $s = str_split($s);\n  $r = array_reverse($s);\n  return [implode($s), $s ==\
    \ $r];\n}", "    $str = '';\n    $str = str_replace(str_split($c), '', $s);\n\
    \    $len = strlen($str);\n    $compare = '';\n    $i = 1;\n    while($i <= $len)\
    \ {\n        $compare .= $str[$len - $i];\n        $i++;\n    }\n    return $compare\
    \ == $str ? array($str, true) : array($str, false);\n}\n$s = \"abcde\";\n$c =\
    \ \"ae\";\necho \"For s = $s and c = $c, the result should be ('bcd',False).\\\
    n\";\nvar_dump(reverse_delete($s, $c));\n$s = \"abcdef\";\n$c = \"b\";\necho \"\
    For s = $s and c = $c, the result should be ('acdef',False).\\n\";\nvar_dump(reverse_delete($s,\
    \ $c));\n$s = \"abcdedcba\";\n$c = \"ab\";\necho \"For s = $s and c = $c, the\
    \ result should be ('cdedc',True).\\n\";\nvar_dump(reverse_delete($s, $c));",
  "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], '',\
    \ $s);\n    }\n    return [$s, $s == strrev($s)];\n}", "    $output = '';\n  \
    \  $s = str_split($s);\n    $c = str_split($c);\n    foreach($s as $letter){\n\
    \        if(!in_array($letter, $c)){\n            $output .= $letter;\n      \
    \  }\n    }\n    return [$output, $output == strrev($output)];\n}\n", "    $c\
    \ = str_split($c);\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        if (!in_array($s[$i], $c)) {\n            $result .= $s[$i];\n  \
    \      }\n    }\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode($result);\n    return array($result, $result == strrev($result));\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    $final = array_values(array_diff($s,\
    \ $c));\n    return array(join('', $final), $final == array_reverse($final));\n\
    }", "    $replaced = str_replace($c, '', $s);\n    return [$replaced, $replaced\
    \ === strrev($replaced)];\n}", "    $res = str_split($s);\n    foreach ($res as\
    \ $key => $value) {\n        for ($i = 0; $i < strlen($c); $i++) {\n         \
    \   if ($value == $c[$i]) unset($res[$key]);\n        }\n    }\n    $res = implode($res);\n\
    \    return array($res, $res == strrev($res));\n}", "  $result = '';\n  $arr=str_split($s);\n\
    \  $arrC=str_split($c);\n  $a=count($arr);\n  $b=count($arrC);\n  $res='';\n \
    \ $k=0;\n  $ar=array();\n  $arr1=array();\n  $k=0;\n  for($i=0;$i<$a;$i++){\n\
    \    for($j=0;$j<$b;$j++){\n      if($arr[$i]==$arrC[$j]){\n        $ar[$k]=$arr[$i];\n\
    \        $k++;\n      }\n    }\n  }\n  for($i=0;$i<$a;$i++){\n    $f=0;\n    for($j=0;$j<$k;$j++){\n\
    \      if($arr[$i]==$ar[$j]){\n        $f=1;\n      }\n    }\n    if($f==0){\n\
    \      $arr1[$j]=$arr[$i];\n    }\n  }\n  $k=count($arr1);\n  for($i=0;$i<$k;$i++){\n\
    \    $res=$res.$arr1[$i];\n  }\n  $a=strlen($res);\n  $q=1;\n  for($i=0;$i<$a;$i++){\n\
    \    if($res[$i]!=$res[$a-1-$i]){\n      $q=0;\n    }\n  }\n  if($q==1){\n   \
    \ $res=$res.\" True\";\n  }\n  else{\n    $res=$res.\" False\";\n  }\n  return\
    \ $res;\n}", "    $arr = str_split($s);\n    $res = [];\n    foreach ($arr as\
    \ $v) {\n        if (!strpos($c, $v)) {\n            $res[] = $v;\n        }\n\
    \    }\n    return array(join('', $res), join('', $res) == join('', array_reverse($res)));\n\
    }\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $arr_s = str_split($s);\n\
    \    foreach ($arr_s as $k=>$v) {\n        if (strpos($c, $v) !== false) {\n \
    \           unset($arr_s[$k]);\n        }\n    }\n    $result = join($arr_s);\n\
    \    return [$result, $result === strrev($result)];\n}", "  $result = '';\n  for($i\
    \ = 0; $i < strlen($s); $i++) {\n    if(!strpos($c, $s[$i])) {\n      $result\
    \ .= $s[$i];\n    }\n  }\n  $counter = 0;\n  $result = str_split($result);\n \
    \ $reverse = array_reverse($result);\n  for($i = 0; $i < count($result); $i++)\
    \ {\n    if($result[$i] == $reverse[$i]) {\n      $counter++;\n    }\n  }\n  if($counter\
    \ == count($result)) {\n    return [implode($result), true];\n  }\n  return [implode($result),\
    \ false];\n}\n$s = \"abcde\";\n$c = \"ae\";\necho 'Result: ' . json_encode(reverse_delete($s,\
    \ $c));", "    $check = true;\n    $result = preg_replace(\"/[$c]/\", \"\", $s);\n\
    \    $array = str_split($result);\n    $count = count($array);\n    for ($i =\
    \ 0; $i < $count / 2; $i++) {\n        if ($array[$i] !== $array[$count - $i -\
    \ 1]) {\n            $check = false;\n            break;\n        }\n    }\n \
    \   return [$result, $check];\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    $s = array_diff($s, $c);\n    return [join('', $s), $s === array_reverse($s)];\n\
    }", "  $s = str_split($s);\n  $c = str_split($c);\n  $result = '';\n  foreach($s\
    \ as $v){\n    if(!in_array($v, $c)){\n      $result .= $v;\n    }\n  }\n  $bool\
    \ = $result == strrev($result);\n  return [$result, $bool];\n}\n", "  $s_array\
    \ = str_split($s);\n  $c_array = str_split($c);\n  $result = array_values(array_diff($s_array,\
    \ $c_array));\n  if ($result === array_reverse($result)) {\n    return array(implode($result),\
    \ true);\n  } else {\n    return array(implode($result), false);\n  }\n}\n\necho\
    \ \"True Test <br>\";\nprint_r(reverse_delete(\"aabcdeedcba\", \"ab\"));\necho\
    \ \"<br>False Test <br>\";\nprint_r(reverse_delete(\"abcdef\", \"b\"));", "  \
    \  $result = str_replace($c,\"\",$s);\n    $flag = false;\n    if(strrev($result)\
    \ === $result){\n        $flag = true;\n    }\n    return array($result,$flag);\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key\
    \ => $value) {\n        foreach ($c as $char) {\n            if ($value == $char)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode('', $s);\n    $rev = strrev($s);\n    return $s == $rev ? [$s, True]\
    \ : [$s, False];\n}", "    $s=str_split($s);\n    $c=str_split($c);\n    foreach($s\
    \ as $key=>$value){\n        if(in_array($value,$c)){\n            unset($s[$key]);\n\
    \        }\n    }\n    return array(implode('',$s),implode('',$s)===implode('',array_reverse($s)));\n\
    }", "\t$s = str_split($s);\n\t$c = str_split($c);\n\tforeach ($s as $i => $a)\
    \ {\n\t\tforeach ($c as $j => $b) {\n\t\t\tif ($a == $b) {\n\t\t\t\tunset($s[$i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\t$s = implode($s);\n\t$reverse = strrev($s);\n\tif ($s ==\
    \ $reverse) {\n\t\treturn [$s, true];\n\t} else {\n\t\treturn [$s, false];\n\t\
    }\n}", "  //$s = \"abcde\"; $c = \"ae\";\n  $removed = str_replace($c, \"\", $s);\n\
    \  $array = str_split($removed);\n  $reverse = array_reverse($array);\n  $result\
    \ = implode(\"\", $reverse);\n  $check = ($result == $removed) ? true : false;\n\
    \  return \"($removed,$check)\";\n}\necho reverse_delete(\"abcdedcba\", \"ab\"\
    );", "    $s = str_split($s);\n    $c = str_split($c);\n    $len = count($s);\n\
    \    $res = \"\";\n    for($i = 0; $i < $len; $i++){\n        if(!in_array($s[$i],\
    \ $c)){\n            $res .= $s[$i];\n        }\n    }\n    $len_res = strlen($res);\n\
    \    $tmp = true;\n    for($i = 0; $i < $len_res/2; $i++){\n        if($res[$i]\
    \ != $res[$len_res - $i - 1]){\n            $tmp = false;\n            break;\n\
    \        }\n    }\n    return array($res, $tmp);\n}\n", "    $resultString = \"\
    \";\n    for($i = 0; $i < strlen($s); $i++){\n        $found = false;\n      \
    \  for($j = 0; $j < strlen($c); $j++){\n            if($s[$i] == $c[$j]){\n  \
    \              $found = true;\n                break;\n            }\n       \
    \ }\n        if(!$found){\n            $resultString = $resultString.$s[$i];\n\
    \        }\n    }\n    $reverse = \"\";\n    for($i = strlen($resultString) -\
    \ 1; $i >= 0; $i--){\n        $reverse = $reverse.$resultString[$i];\n    }\n\
    \    return $resultString == $reverse ? [$resultString,true] : [$resultString,false];\n\
    }", "    $pattern = \"/[$c]/\";\n    $s = preg_replace($pattern, \"\", $s);\n\
    \    $strlen = strlen($s);\n    for($i = 0; $i < $strlen; $i++){\n        if($s[$i]\
    \ != $s[$strlen - 1 - $i]){\n            return [$s, false];\n        }\n    }\n\
    \    return [$s, true];\n}", "    $c = str_split($c);\n    foreach ($c as $char)\
    \ {\n        $s = str_replace($char, '', $s);\n    }\n    return array($s, $s\
    \ == strrev($s));\n}", "    $result = \"\";\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if(strpos($c, $s[$i]) === false){\n            $result .= $s[$i];\n\
    \        }\n    }\n    if($result == strrev($result)){\n        return array($result,\
    \ true);\n    }else{\n        return array($result, false);\n    }\n}", "  foreach\
    \ (str_split($c) as $char) {\n    $s = str_replace($char, '', $s);\n  }\n  $check\
    \ = $s == strrev($s);\n  return array($s, $check);\n}\n", "    //cari yang sama\
    \ di keduanya\n    $common = array_intersect(str_split($s), str_split($c));\n\
    \    //bikin array baru dengan perulangan array common dan remove elemen yang\
    \ sama dengan common\n    foreach ($common as $char) {\n        $s = str_replace($char,\
    \ '', $s);\n    }\n    //membalik string\n    $reverse = strrev($s);\n    //konfersi\
    \ string ke boolean\n    $palindrome = boolval($s === $reverse);\n    return [$s,\
    \ $palindrome];\n}\n", "\t$s = str_split($s);\n\t$c = str_split($c);\n\t$output\
    \ = [];\n\t$array = [];\n\tforeach ($s as $key => $value) {\n\t\tforeach ($c as\
    \ $k => $v) {\n\t\t\tif($value == $v){\n\t\t\t\tunset($s[$key]);\n\t\t\t}\n\t\t\
    }\n\t}\n\t$array = implode($s);\n\t$array = str_split($array);\n\t$reverse = array_reverse($array);\n\
    \t$bool = ($array == $reverse) ? true : false;\n\techo json_encode(['string' =>\
    \ $array, 'bool' => $bool]);\n}\nreverse_delete(\"abcde\", \"ae\");", "  $result_string\
    \ = str_replace(str_split($c), \"\", $s);\n  $result_array = [];\n  array_push($result_array,\
    \ $result_string);\n  array_push($result_array, $result_string === strrev($result_string));\n\
    \  return $result_array;\n}\n", "    $result_str = '';\n    $s_arr = str_split($s);\n\
    \    $c_arr = str_split($c);\n    for ($i = 0; $i < count($s_arr); $i++) {\n \
    \       if (!in_array($s_arr[$i], $c_arr)) {\n            $result_str .= $s_arr[$i];\n\
    \        }\n    }\n    return [$result_str, $result_str == strrev($result_str)];\n\
    }", "    $res = $s;\n    for ($i = 0; $i < strlen($c); $i++) {\n        $res =\
    \ str_replace($c[$i], '', $res);\n    }\n    return [$res, strrev($res) === $res];\n\
    }\n\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcde\", \"ae\"));", "  $s = str_split($s);\n\
    \  $c = str_split($c);\n  foreach($s as $k => $v){\n    if(in_array($v, $c)){\n\
    \      unset($s[$k]);\n    }\n  }\n  $s = implode($s);\n  return array($s, $s\
    \ == strrev($s));\n}\n", "    //your code here\n}\n", "    $str = str_split($s);\n\
    \    $chars = str_split($c);\n    foreach ($chars as $char) {\n        $str =\
    \ str_replace($char, '', $str);\n    }\n    $result = implode($str);\n    $reversed\
    \ = implode(array_reverse($str));\n    return [$result, $result === $reversed];\n\
    }", "    $result = \"\";\n    $palindrome = true;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (strpos($c, $s[$i]) === false) {\n            $result .=\
    \ $s[$i];\n        }\n    }\n    if ($result != strrev($result)) {\n        $palindrome\
    \ = false;\n    }\n    return [$result, $palindrome];\n}", "    $arr_s = str_split($s);\n\
    \    $arr_c = str_split($c);\n    $result = \"\";\n    foreach ($arr_s as $value)\
    \ {\n        if (!in_array($value, $arr_c)) {\n            $result .= $value;\n\
    \        }\n    }\n    $arr_result = str_split($result);\n    $l = count($arr_result);\n\
    \    for ($i = 0; $i < ($l / 2); $i++) {\n        if ($arr_result[$i] != $arr_result[$l\
    \ - $i - 1]) {\n            return [$result, false];\n        }\n    }\n    return\
    \ [$result, true];\n}\n\necho \"<pre> reverse_delete('abcdedcba', 'ab')\";\nprint_r(reverse_delete('abcdedcba',\
    \ 'ab'));\necho \"</pre>\";\n\necho \"<pre> reverse_delete('abcdef', 'b')\";\n\
    print_r(reverse_delete('abcdef', 'b'));\necho \"</pre>\";\n\necho \"<pre> reverse_delete('abcde',\
    \ 'ae')\";\nprint_r(reverse_delete('abcde', 'ae'));\necho \"</pre>\";", "    $result\
    \ = \"\";\n    $arr = str_split($s);\n    $arr1 = str_split($c);\n    $lent =\
    \ count($arr);\n    $lent1 = count($arr1);\n    for($i = 0; $i < $lent; $i++){\n\
    \        for($j = 0; $j < $lent1; $j++){\n            if($arr[$i] == $arr1[$j]){\n\
    \                unset($arr[$i]);\n            }\n        }\n    }\n    foreach($arr\
    \ as $key => $value){\n        $result .= $value;\n    }\n    if($result == strrev($result)){\n\
    \        return array($result, true);\n    }else{\n        return array($result,\
    \ false);\n    }\n}\n$s = \"abcdedcba\";\n$c = \"ab\";\necho \"<pre>\";\nprint_r(reverse_delete($s,\
    \ $c));\necho \"</pre>\";", "  $result = \"\";\n  $reverse_result = \"\";\n  $is_palindrome\
    \ = true;\n  $length = strlen($s);\n  for($i = 0; $i < $length; $i++) {\n    if(stripos($c,\
    \ $s[$i]) === false) {\n      $result .= $s[$i];\n      $reverse_result = $s[$i]\
    \ . $reverse_result;\n    }\n  }\n  for($i = 0; $i < strlen($result); $i++) {\n\
    \    if($result[$i] != $reverse_result[$i]) {\n      $is_palindrome = false;\n\
    \      break;\n    }\n  }\n  return [$result, $is_palindrome];\n}", "    foreach(str_split($c)\
    \ as $char) {\n        $s = str_replace($char, '', $s);\n    }\n    return [$s,\
    \ $s === strrev($s)];\n}", "  //coding and coding..\n}", "  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach($s as $char) {\n    if (!in_array($char,\
    \ $c)) {\n      $result[] = $char;\n    }\n  }\n  $palindrome = $result === array_reverse($result);\n\
    \  return [join('', $result), $palindrome];\n}", "    $s = str_split($s);\n  \
    \  $c = str_split($c);\n    $result = [];\n    for($i = 0; $i < count($s); $i++){\n\
    \        if(!in_array($s[$i], $c)){\n            $result[] = $s[$i];\n       \
    \ }\n    }\n    $str = implode('', $result);\n    $result = array($str, $str ==\
    \ strrev($str));\n    return $result;\n}", "    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n        $letter = $c[$i];\n        $s = str_replace($letter, \"\",\
    \ $s);\n    }\n    $s_reversed = strrev($s);\n    if ($s_reversed == $s) {\n \
    \       return [$s, true];\n    } else {\n        return [$s, false];\n    }\n\
    }\n", "    $s = str_split($s);\n    $c = str_split($c);\n    $res = '';\n    for($i\
    \ = 0; $i < count($s); $i++){\n        $res .= !in_array($s[$i], $c) ? $s[$i]\
    \ : '';\n    }\n    $res_rev = strrev($res);\n    return array($res, $res == $res_rev);\n\
    }\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  $c = str_split($c);\n\
    \  foreach($c as $v) {\n    $s = str_replace($v, '', $s);\n  }\n  return array($s,\
    \ $s === strrev($s));\n}", "  $res = $s;\n  for ($i=0; $i < strlen($c); $i++)\
    \ {\n    $res = str_replace($c[$i], \"\", $res);\n  }\n  $res1 = strrev($res);\n\
    \  if ($res === $res1) {\n    return [$res, true];\n  } else {\n    return [$res,\
    \ false];\n  }\n}\n\necho var_dump(reverse_delete(\"abcde\", \"ae\"));", "  $str\
    \ = str_split($s);\n  $char = str_split($c);\n  $new_str = [];\n  foreach($str\
    \ as $symbol){\n    if(!in_array($symbol, $char)) $new_str[] = $symbol;\n  }\n\
    \  return implode('', $new_str) === strrev(implode('', $new_str)) ? [implode('',\
    \ $new_str), true] : [implode('', $new_str), false];\n}", "    $s=str_split($s);\n\
    \    $c=str_split($c);\n    $result=[];\n    foreach($s as $t){\n        if(!in_array($t,$c)){\n\
    \            $result[]=$t;\n        }\n    }\n    return[implode('',$result),implode('',$result)==strrev(implode('',$result))];\n\
    }", "  $c = str_split($c);\n  foreach($c as $v) {\n    $s = str_replace($v, '',\
    \ $s);\n  }\n  $res = ($s === strrev($s)) ? [$s, true] : [$s, false];\n  return\
    \ $res;\n}", "    $c = str_split($c);\n    $result = [];\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n            $result[]\
    \ = $s[$i];\n        }\n    }\n    return [implode($result), implode($result)\
    \ == strrev(implode($result))];\n}", "    $r = strrev($s);\n    $t = str_replace($c,\"\
    \",$s);\n    $m = str_replace($c,\"\",$r);\n    return [$t,$t == $m];\n}", "\t\
    $newString = str_replace($c, \"\", $s);\n\t$result = array($newString, $newString\
    \ === strrev($newString));\n\treturn $result;\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));", "    $newString = '';\n    for($i = 0; $i < strlen($s); $i++){\n\
    \        if(strpos($c, $s[$i]) === false){\n            $newString .= $s[$i];\n\
    \        }\n    }\n    return [$newString, $newString === strrev($newString)];\n\
    }\n", "    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key\
    \ => $value) {\n        foreach ($c as $key1 => $value1) {\n            if ($value\
    \ == $value1) {\n                unset($s[$key]);\n            }\n        }\n\
    \    }\n    $s = implode($s);\n    $reversed = strrev($s);\n    if ($s == $reversed)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\n", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ '', $s);\n    }\n    return array($s, $s == strrev($s));\n}", "  for ($i=0;\
    \ $i < strlen($c); $i++) {\n      $s = str_replace($c[$i], \"\", $s);\n  }\n \
    \ return [$s,$s==strrev($s)];\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    $c = str_split($c);\n    $s = str_split($s);\n    foreach ($c\
    \ as $v) {\n        foreach ($s as $k => $v1) {\n            if ($v == $v1) {\n\
    \                unset($s[$k]);\n            }\n        }\n    }\n    return [implode($s),\
    \ $s == array_reverse($s)];\n}", "    $arr = str_split($s);\n    $str = implode(\"\
    \", array_diff($arr, str_split($c)));\n    return array($str, $str === strrev($str));\n\
    }", "    $arr = preg_split('//u', $s, -1, PREG_SPLIT_NO_EMPTY);\n    $arr1 = preg_split('//u',\
    \ $c, -1, PREG_SPLIT_NO_EMPTY);\n    foreach ($arr as $key => $value) {\n    \
    \    foreach ($arr1 as $key1 => $value1) {\n            if ($value == $value1)\
    \ {\n                unset($arr[$key]);\n            }\n        }\n    }\n   \
    \ $arr = array_values($arr);\n    $string = \"\";\n    foreach ($arr as $key =>\
    \ $value) {\n        $string .= $value;\n    }\n    $arr2 = preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $arr3 = array_reverse($arr2);\n    if\
    \ ($arr2 == $arr3) {\n        return array($string, True);\n    } else {\n   \
    \     return array($string, False);\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ '', $s);\n    }\n    return [$s, $s == strrev($s)];\n}", "    $result = $s;\n\
    \    for ($i = 0; $i < strlen($c); $i++) {\n        $result = str_replace($c[$i],\
    \ '', $result);\n    }\n    if ($result == strrev($result)) {\n        return\
    \ array($result, true);\n    } else {\n        return array($result, false);\n\
    \    }\n}\n\necho reverse_delete(\"abcde\", \"ae\");\necho '<br>';\necho reverse_delete(\"\
    abcdef\", \"b\");\necho '<br>';\necho reverse_delete(\"abcdedcba\", \"ab\");",
  "  for ($i=0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\"\",$s);\n\
    \  }\n  return [$s,$s == strrev($s)];\n}", "  $temp = str_split($s);\n  foreach($temp\
    \ as $char){\n    if(in_array($char, str_split($c))){\n      $key = array_search($char,\
    \ $temp);\n      unset($temp[$key]);\n    }\n  }\n  return array(implode('', $temp),\
    \ $temp === array_reverse($temp));\n}\n\n$ans = reverse_delete(\"abcde\", \"ae\"\
    );\nvar_dump($ans); // => array('bcd', false)\n\n$ans = reverse_delete(\"abcdef\"\
    , \"b\");\nvar_dump($ans); // => array('acdef', false)\n\n$ans = reverse_delete(\"\
    abcdedcba\", \"ab\");\nvar_dump($ans); // => array('cdedc', true)", "    $letter_arr\
    \ = str_split($s);\n    $filter_arr = str_split($c);\n    $l = array_diff($letter_arr,\
    \ $filter_arr);\n    $result = join('', $l);\n    if ($result == strrev($result))\
    \ {\n        return array($result, True);\n    } else {\n        return array($result,\
    \ False);\n    }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  //..\n\
    \  $flag = true;\n  $cArr = str_split($c);\n  $sArr = str_split($s);\n  foreach($cArr\
    \ as $char) {\n    if(($key = array_search($char, $sArr)) !== false) {\n     \
    \ unset($sArr[$key]);\n    }\n  }\n  $str = implode('', $sArr);\n  $strReverse\
    \ = strrev($str);\n  if ($str !== $strReverse) {\n    $flag = false;\n  }\n  return\
    \ [$str, $flag];\n}\n$s = \"abcde\";\n$c = \"ae\";\nprint_r(reverse_delete($s,\
    \ $c));", "  for ($i=0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\
    \ \"\", $s);\n  }\n  return [$s, strrev($s) === $s];\n}\n", "\t// Kode kamu di\
    \ sini\n\t$delete = str_split($c);\n\t$string = str_split($s);\n\tfor ($i=0; $i\
    \ < count($delete); $i++) { \n\t\tfor ($j=0; $j < count($string); $j++) { \n\t\
    \t\tif ($delete[$i]==$string[$j]) {\n\t\t\t\tunset($string[$j]);\n\t\t\t}\n\t\t\
    }\n\t}\n\t$string_baru = implode(\"\", $string);\n\t$hasil = [];\n\t$hasil[] =\
    \ $string_baru;\n\tif ($string_baru == strrev($string_baru)) {\n\t\t$hasil[] =\
    \ true;\n\t}else{\n\t\t$hasil[] = false;\n\t}\n\t$result = implode(\",\", $hasil);\n\
    \treturn $result;\n}\n\necho reverse_delete(\"abcde\", \"ae\"); //bcd,false\n\
    echo \"<br>\";\necho reverse_delete(\"abcdef\", \"b\"); //acdef,false\necho \"\
    <br>\";\necho reverse_delete(\"abcdedcba\", \"ab\"); //cdedc,true", "  $res =\
    \ '';\n  $len = strlen($s);\n  for($i = 0; $i < $len; $i++) {\n    if(strpos($c,\
    \ $s[$i]) === false) {\n      $res .= $s[$i];\n    }\n  }\n  return [$res, $res\
    \ === strrev($res)];\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    foreach ($s as $key => $value) {\n        foreach ($c as $key2 => $value2)\
    \ {\n            if ($value === $value2) {\n                unset($s[$key]);\n\
    \            }\n        }\n    }\n    $str = '';\n    foreach ($s as $key => $value)\
    \ {\n        $str .= $value;\n    }\n    if ($str === strrev($str)) {\n      \
    \  return [$str, True];\n    } else {\n        return [$str, False];\n    }\n\
    }\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $result = \"\
    \";\n    for($i = 0; $i < strlen($s); $i++){\n        if(!strchr($c, $s[$i])){\n\
    \            $result .= $s[$i];\n        }\n    }\n    $check = ($result == strrev($result))\
    \ ? true : false;\n    return [$result, $check];\n}", "  $new_str = str_replace($c,\
    \ '', $s);\n  $length = strlen($new_str);\n  $palindrome = false;\n  for($i =\
    \ 0; $i < $length; $i++) {\n    if($new_str[$i] == $new_str[$length - $i - 1])\
    \ {\n      $palindrome = true;\n    } else {\n      $palindrome = false;\n   \
    \   break;\n    }\n  }\n  return [$new_str, $palindrome];\n}", "  for ($i=0; $i\
    \ < strlen($c); $i++) {\n    $s = str_replace($c[$i], \"\", $s);\n  }\n  return\
    \ [$s, $s == strrev($s)];\n}\n\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));",
  "\t$arr = str_split($s);\n\t$arr_c = str_split($c);\n\t$result = [];\n\tfor ($i=0;\
    \ $i < sizeof($arr); $i++) { \n\t\tif (!in_array($arr[$i], $arr_c)) {\n\t\t\t\
    array_push($result, $arr[$i]);\n\t\t}\n\t}\n\t$result = implode($result);\n\t\
    return $result;\n}", "  //coding and coding..\n  $result = '';\n  $arr = str_split($s);\n\
    \  for($i = 0; $i < count($arr); $i++){\n    if(!strpos($c, $arr[$i])){\n    \
    \  $result .= $arr[$i];\n    }\n  }\n  return [$result, $result === strrev($result)];\n\
    }\n", "    $c=str_split($c);\n    $s=str_split($s);\n    $i=0;\n    while($i<count($s)){\n\
    \        if(in_array($s[$i],$c)){\n            unset($s[$i]);\n        }\n   \
    \     $i++;\n    }\n    return [implode($s),$s==array_reverse($s)];\n}\nprint_r(reverse_delete(\"\
    abcdedcba\",\"ab\"));", "  $result = [];\n  $arr1 = str_split($s);\n  $arr2 =\
    \ str_split($c);\n  $length1 = count($arr1);\n  $length2 = count($arr2);\n  for\
    \ ($i = 0; $i < $length1; $i++) {\n    for ($j = 0; $j < $length2; $j++) {\n \
    \     if ($arr1[$i] == $arr2[$j]) {\n        $result[] = $arr1[$i];\n      }\n\
    \    }\n  }\n  $new_arr = array_diff($arr1, $result);\n  $new_s = join('', $new_arr);\n\
    \  $length = strlen($new_s);\n  $result1 = [];\n  for ($x = 0; $x < $length; $x++)\
    \ {\n    $result1[] = $new_s[$x];\n  }\n  $length_new = count($result1);\n  $left\
    \ = 0;\n  $right = $length_new - 1;\n  while ($left < $right) {\n    if ($result1[$left]\
    \ != $result1[$right]) {\n      return [$new_s, false];\n    }\n    $left++;\n\
    \    $right--;\n  }\n  return [$new_s, true];\n}\n$s = \"abcdedcba\";\n$c = \"\
    ab\";\necho reverse_delete($s, $c)[0].\"<br>\";\necho reverse_delete($s, $c)[1];",
  "    $result = '';\n    $s = str_split($s);\n    $c = str_split($c);\n    for ($i\
    \ = 0; $i < count($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n       \
    \     $result .= $s[$i];\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\n", "  $result = preg_replace(\"/$c/\", \"\", $s);\n  return [$result, $result\
    \ == strrev($result)];\n}\n", "    $a = '';\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if(strpos($c, $s[$i]) === false){\n            $a .= $s[$i];\n\
    \        }\n    }\n    return [$a, $a === strrev($a)];\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = \"\";\n    foreach ($s as $s_item) {\n\
    \        if (!in_array($s_item, $c)) {\n            $result .= $s_item;\n    \
    \    }\n    }\n    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    if ($result == $result_reverse) {\n        return [join(\"\", $result), true];\n\
    \    } else {\n        return [join(\"\", $result), false];\n    }\n}", "\t$s\
    \ = str_split($s);\n\t$s = array_diff($s, str_split($c));\n\t$s = join(\"\", $s);\n\
    \t$s = $s == strrev($s) ? [$s, true] : [$s, false];\n\treturn $s;\n}", "    $c\
    \ = str_split($c);\n    $res = str_split($s);\n    foreach ($c as $letter) {\n\
    \        $key = array_search($letter, $res);\n        unset($res[$key]);\n   \
    \ }\n    $res = array_values($res);\n    $rev = implode($res);\n    $rev = strrev($rev);\n\
    \    if($rev == implode($res)) {\n        return array(implode($res),true);\n\
    \    }\n    return array(implode($res),false);\n}\nvar_dump(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $c = str_split($c);\n  for($i = 0; $i < count($c);\
    \ $i++){\n    $s = str_replace($c[$i], \"\", $s);\n  }\n  $s = str_split($s);\n\
    \  $len = count($s);\n  $s = join(\"\", $s);\n  $reversed_string = strrev($s);\n\
    \  if($s === $reversed_string){\n    return array($s, True);\n  }\n  return array($s,\
    \ False);\n}", "    $c = str_split($c);\n    $s = str_split($s);\n    foreach\
    \ ($c as $char) {\n        if (false !== $key = array_search($char, $s)) {\n \
    \           unset($s[$key]);\n        }\n    }\n    return array(implode($s),\
    \ $s == array_reverse($s));\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    $s = array_diff($s, $c);\n    if ($s == array_reverse($s)) {\n        return\
    \ [implode('', $s), true];\n    } else {\n        return [implode('', $s), false];\n\
    \    }\n}\n\n$result = reverse_delete(\"abcde\", \"ae\");\nvar_dump($result);\n\
    $result = reverse_delete(\"abcdef\", \"b\");\nvar_dump($result);\n$result = reverse_delete(\"\
    abcdedcba\", \"ab\");\nvar_dump($result);", "    $arr1 = str_split($s);\n    $arr2\
    \ = str_split($c);\n    $result = [];\n    foreach ($arr1 as $key => $val) {\n\
    \        if (!in_array($val, $arr2)) {\n            $result[] = $val;\n      \
    \  }\n    }\n    $result = implode('', $result);\n    return [$result, $result\
    \ == strrev($result)];\n}\n", "  $delete_letters = str_split($c);\n  $result =\
    \ [];\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (!in_array($s[$i], $delete_letters))\
    \ {\n      $result[] = $s[$i];\n    }\n  }\n  $result = implode('', $result);\n\
    \  $reverse = strrev($result);\n  if ($result == $reverse) {\n    return [$result,\
    \ true];\n  } else {\n    return [$result, false];\n  }\n}", "    // Write your\
    \ code here\n    $array = str_split($s);\n    $characters = str_split($c);\n \
    \   $revArray = array_reverse($array);\n    $revString = implode($revArray);\n\
    \    foreach($characters as $character){\n        $s = str_replace($character,\
    \ \"\", $s);\n        $revString = str_replace($character, \"\", $revString);\n\
    \    }\n    if($s == $revString){\n        return array($s, True);\n    }else{\n\
    \        return array($s, False);\n    }\n}\n", "  // your code here\n  $copy\
    \ = str_split($s);\n  $copy2 = str_split($c);\n  $i = 0;\n  while ($i < count($copy))\
    \ {\n    $j = 0;\n    while ($j < count($copy2)) {\n      if ($copy[$i] == $copy2[$j])\
    \ {\n        array_splice($copy, $i, 1);\n        $i--;\n      }\n      $j++;\n\
    \    }\n    $i++;\n  }\n  $string = implode($copy);\n  $rev = strrev($string);\n\
    \  if ($string == $rev) {\n    return [$string, true];\n  } else {\n    return\
    \ [$string, false];\n  }\n}", "    // Your code\n    $str=str_split($s);\n   \
    \ $str_c=str_split($c);\n    foreach($str_c as $val){\n        if($key=array_search($val,$str)){\n\
    \            unset($str[$key]);\n        }\n    }\n    $res=implode($str);\n \
    \   $len=strlen($res);\n    $mid=$len/2;\n    $res_1=substr($res,0,$mid);\n  \
    \  $res_2=substr($res,$mid,$len-1);\n    $res_2=strrev($res_2);\n    if($res_1==$res_2){\n\
    \        return [$res,True];\n    }else{\n        return [$res,False];\n    }\n\
    }", "    $count = substr_count($s, $c);\n    $reverseString = strrev($s);\n  \
    \  $newString = str_replace($c, \"\", $s);\n    $newString = str_replace($c, \"\
    \", $reverseString);\n    return array(strrev($newString), $count);\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\necho \"<br>\";\nprint_r(reverse_delete(\"abcdef\", \"b\"));\n\
    echo \"<br>\";\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $arr_res=str_split($s);\n\
    \    $arr_inp=str_split($c);\n    foreach ($arr_inp as $item){\n        if (in_array($item,$arr_res)){\n\
    \            $arr_res=array_diff($arr_res,[$item]);\n        }\n    }\n    return\
    \ implode($arr_res);\n}\n", "  for ($i=0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\
    \ \"\", $s);\n  }\n  return [$s, $s == strrev($s)];\n}\n", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $key => $value) {\n        foreach\
    \ ($c as $c_value) {\n            if ($value == $c_value) {\n                unset($s[$key]);\n\
    \            }\n        }\n    }\n    $s = array_values($s);\n    $s_reverse =\
    \ array_reverse($s);\n    if ($s_reverse == $s) {\n        return [implode($s),true];\n\
    \    }\n    return [implode($s),false];\n}\n", "    $c = str_split($c);\n    $s\
    \ = str_split($s);\n    foreach ($c as $item) {\n        $s = str_replace($item,\
    \ '', $s);\n    }\n    $res = str_split($s);\n    $final = implode($res);\n  \
    \  $rev = array_reverse($res);\n    $rev = implode($rev);\n    if ($final == $rev)\
    \ {\n        return [$final, true];\n    } else {\n        return [$final, false];\n\
    \    }\n}\necho \"<pre> reverse_delete('abcdedcba', 'ab')\";\nprint_r(reverse_delete('abcdedcba',\
    \ 'ab'));\necho \"</pre>\";\n", "    $c = str_split($c);\n    $s = str_split($s);\n\
    \    $result = $s;\n    foreach ($c as $v){\n        if(($key = array_search($v,\
    \ $result)) !== false) {\n            unset($result[$key]);\n        }\n    }\n\
    \    $result = implode('', $result);\n    $r = strrev($result);\n    if ($result\
    \ == $r){\n        return [$result, True];\n    } else {\n        return [$result,\
    \ False];\n    }\n}\n$s = \"abcdedcba\";\n$c = \"ab\";\nprint_r(reverse_delete($s,\
    \ $c));", "    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as\
    \ $i => $v) {\n        if (in_array($v, $c)) {\n            unset($s[$i]);\n \
    \       }\n    }\n    $s = implode('', $s);\n    return array($s, $s == strrev($s));\n\
    }", "\tfor ($i=0; $i < strlen($c); $i++) { \n\t\t$s = str_replace($c[$i], \"\"\
    , $s);\n\t}\n\t$rev = strrev($s);\n\tif ($s == $rev) {\n\t\treturn [$s, true];\n\
    \t} else {\n\t\treturn [$s, false];\n\t}\n}", "    $s = str_split($s);\n    $c\
    \ = str_split($c);\n    $f = function($x) use ($c) {\n        return array_filter($c,\
    \ function($y) use ($x) {\n            return $x == $y;\n        });\n    };\n\
    \    $r = array_filter($s, $f);\n    $r = implode($r);\n    $r = str_split($r);\n\
    \    return [implode(array_diff($s, $r)), $r == array_reverse($r)];\n}", "   \
    \ for ($i = 0; $i < strlen($c); $i++) {\n        $pos = strpos($s, $c[$i]);\n\
    \        while ($pos !== false) {\n            $s = substr_replace($s, '', $pos,\
    \ 1);\n            $pos = strpos($s, $c[$i]);\n        }\n    }\n    if (strrev($s)\
    \ == $s) {\n        return [$s, true];\n    } else {\n        return [$s, false];\n\
    \    }\n}\n$s = \"abcde\";\n$c = \"ae\";\necho reverse_delete($s, $c)[0];", " \
    \ $arr = str_split($s);\n  $c_arr = str_split($c);\n  $result = array_diff($arr,\
    \ $c_arr);\n  $answer = array_values($result);\n  $value = implode($answer);\n\
    \  $palindrome = \"\";\n  for($i = count($answer) - 1; $i >= 0; $i--) {\n    $palindrome\
    \ .= $answer[$i];\n  }\n  if($value == $palindrome) {\n    return array($value,\
    \ true);\n  } else {\n    return array($value, false);\n  }\n}", "    for ($i\
    \ = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], '', $s);\n \
    \   }\n    return $s == strrev($s);\n}", "    $words = str_split($s);\n    $tocheck\
    \ = str_split($c);\n    $result = array_filter($words, function($e) use ($tocheck)\
    \ {\n        return !in_array($e, $tocheck);\n    });\n    return array(implode($result),\
    \ $result == array_reverse($result));\n}", "    $filter = str_split($c);\n   \
    \ $result = \"\";\n    for($i = 0; $i < strlen($s); $i++){\n        if(!in_array($s[$i],\
    \ $filter)){\n            $result .= $s[$i];\n        }\n    }\n    $result =\
    \ str_split($result);\n    $is_palindrome = true;\n    for($i = 0; $i < floor(count($result)/2);\
    \ $i++){\n        if($result[$i] != $result[count($result)-$i-1]){\n         \
    \   $is_palindrome = false;\n            break;\n        }\n    }\n    return\
    \ array(implode(\"\", $result), $is_palindrome);\n}\n", "    $arr_c = str_split($c);\n\
    \    foreach ($arr_c as $value) {\n        $s = str_replace($value, '', $s);\n\
    \    }\n    $result = ($s == strrev($s)) ? $s.\"True\" : $s.\"False\";\n    return\
    \ explode(\"True\", $result);\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n    $result =\
    \ [];\n    foreach ($s as $item) {\n        if (!in_array($item, $c)) {\n    \
    \        $result[] = $item;\n        }\n    }\n    return [join($result), $result\
    \ == array_reverse($result)];\n}", "\t$s = str_split($s);\n\t$c = str_split($c);\n\
    \tfor ($i=0; $i < count($s); $i++) { \n\t\tif (in_array($s[$i], $c)) {\n\t\t\t\
    unset($s[$i]);\n\t\t}\n\t}\n\t$s = array_values($s);\n\t$l = count($s);\n\t$r\
    \ = count($s)-1;\n\t$isPalindrome = true;\n\twhile ($l < $r) {\n\t\tif ($s[$l]\
    \ != $s[$r]) {\n\t\t\t$isPalindrome = false;\n\t\t\tbreak;\n\t\t}\n\t\t$l++;\n\
    \t\t$r--;\n\t}\n\treturn array(implode($s), $isPalindrome);\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $res='';\n    $length=strlen($s);\n    for($i=0;$i<$length;$i++){\n\
    \        if(!strpos($c,$s[$i])){\n            $res.=$s[$i];\n        }\n    }\n\
    \    $res_r=strrev($res);\n    if($res===$res_r){\n        return [$res, true];\n\
    \    }\n    return [$res, false];\n}", "    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        $s = str_replace($c[$i], '', $s);\n    }\n    $len = strlen($s);\n\
    \    $half_len = $len / 2;\n    $check = true;\n    for ($i = 0; $i < $half_len;\
    \ $i++) {\n        if ($s[$i] != $s[$len - $i - 1]) {\n            $check = false;\n\
    \            break;\n        }\n    }\n    return [$s, $check];\n}", "    $regex\
    \ = \"/[$c]/\";\n    $s = preg_replace($regex, \"\", $s);\n    return [$s, $s\
    \ == strrev($s)];\n}", "    $arr = explode($c, $s);\n    return [implode('', $arr),\
    \ $arr === array_reverse($arr)];\n}", "    $result = $s;\n    for ($i = 0; $i\
    \ < strlen($c); $i++) {\n        $result = str_replace($c[$i], '', $result);\n\
    \    }\n    $result = str_split($result);\n    $i = 0;\n    $j = count($result)\
    \ - 1;\n    while ($i < $j) {\n        if ($result[$i] !== $result[$j]) {\n  \
    \          return [implode('', $result), false];\n        }\n        $i++;\n \
    \       $j--;\n    }\n    return [implode('', $result), true];\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n \
    \   foreach ($s as $key => $value) {\n        foreach ($c as $char) {\n      \
    \      if ($value == $char) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n\
    }", "\t$s = str_split($s);\n\t$c = str_split($c);\n\t$s = array_diff($s, $c);\n\
    \t$s = array_values($s);\n\t$result = '';\n\t$length = count($s);\n\tfor ($i =\
    \ 0; $i < $length; $i++) {\n\t\t$result .= $s[$i];\n\t}\n\tif ($result == strrev($result))\
    \ {\n\t\treturn $result . \"True\";\n\t} else {\n\t\treturn $result . \"False\"\
    ;\n\t}\n}", "    $ss = '';\n    $len = strlen($s);\n    for($i = 0; $i < $len;\
    \ $i++) {\n        if(strpos($c, $s[$i]) === false) $ss .= $s[$i];\n    }\n  \
    \  return array($ss, $ss == strrev($ss));\n}\n", "    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n        $s = str_replace($c[$i], '', $s);\n    }\n    $check = false;\n\
    \    if ($s == strrev($s)) {\n        $check = true;\n    }\n    return [$s, $check];\n\
    }", "    $a = str_split($s);\n    $b = str_split($c);\n    $r = str_split($s);\n\
    \    $k = count($a);\n    $z = 0;\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ if (in_array($a[$i], $b)) {\n            unset($r[$i]);\n        }\n    }\n\
    \    $r = implode($r);\n    $m = strrev($r);\n    if ($r == $m) {\n        $z\
    \ = 1;\n    }\n    $result = [$r, $z];\n    return $result;\n}", "    $str = str_split($s);\n\
    \    $str_n = str_split($c);\n    foreach ($str as $key => $letter) {\n      \
    \  if (in_array($letter, $str_n)) {\n            unset($str[$key]);\n        }\n\
    \    }\n    return [join($str), $str == array_reverse($str)];\n}", "    $s = str_split($s);\n\
    \    $str = '';\n    $strlen = strlen($s);\n    for($i = 0; $i < $strlen; $i++){\n\
    \        if(strpos($c, $s[$i]) !== false){\n            unset($s[$i]);\n     \
    \   }else{\n            $str .= $s[$i];\n        }\n    }\n    return [$str, $str\
    \ === strrev($str)];\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));", "    //\
    \ your code here\n    \n    //need to delete all chars in s that are equal to\
    \ chars in c.\n    //then check if that string is palindrome\n    //that is compare\
    \ it to the string reversed.\n    //return an array with the string and a boolean\
    \ (true or false)\n    \n    //remove from s the letters that are in c\n    //put\
    \ s into an array.\n    $s_array = str_split($s);\n    $c_array = str_split($c);\n\
    \    //loop through c and remove all c that match s.\n    foreach($c_array as\
    \ $char){\n        foreach($s_array as $key => $v){\n            if($char ===\
    \ $v){\n                unset($s_array[$key]);\n            }\n        }\n   \
    \ }\n    //rejoin the array back into a string\n    $s_string = implode($s_array);\n\
    \    //check if the string is palindrome\n    //convert the string to an array,\
    \ then reverse it and convert it back to a string.\n    $rev_array = str_split($s_string);\n\
    \    $rev_string = implode(array_reverse($rev_array));\n    //compare the two\
    \ strings.\n    if($s_string === $rev_string){\n        $bool = true;\n    } else\
    \ {\n        $bool = false;\n    }\n    return [$s_string, $bool];\n}", "    $arr\
    \ = str_split($s);\n    $newArr = array_diff($arr, str_split($c));\n    return\
    \ [implode('', $newArr), implode('', $newArr) == strrev(implode('', $newArr))];\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key\
    \ => $schar) {\n        foreach ($c as $cchar) {\n            if ($schar == $cchar)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = array_values($s);\n    $rev = array_reverse($s);\n    if ($s == $rev) {\n\
    \        return array(implode('', $s), true);\n    } else {\n        return array(implode('',\
    \ $s), false);\n    }\n}\n", "    $c = str_split($c);\n    foreach ($c as $v)\
    \ {\n        $s = str_replace($v, '', $s);\n    }\n    return (strrev($s) ===\
    \ $s) ? array($s, true) : array($s, false);\n}", "    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n        $s = str_replace($c[$i], '', $s);\n    }\n    $length = strlen($s);\n\
    \    $isPalindrome = false;\n    for ($i = 0; $i < $length / 2; $i++) {\n    \
    \    if ($s[$i] == $s[$length - $i - 1]) {\n            $isPalindrome = true;\n\
    \        } else {\n            $isPalindrome = false;\n            break;\n  \
    \      }\n    }\n    return [$s, $isPalindrome];\n}", "    $c = str_split($c);\n\
    \    $res = '';\n    for($i = 0; $i < strlen($s); $i++) {\n        if(!in_array($s[$i],\
    \ $c)) {\n            $res .= $s[$i];\n        }\n    }\n    return array($res,\
    \ $res == strrev($res));\n}\n", "    $c = str_split($c);\n    $s = str_split($s);\n\
    \    $str = '';\n    foreach ($s as $value) {\n        if(!in_array($value, $c))\
    \ {\n            $str .= $value;\n        }\n    }\n    return [$str, $str ==\
    \ strrev($str)];\n}", "    $s = preg_replace(\"/$c/\", \"\", $s);\n    $len =\
    \ strlen($s);\n    $reverse = '';\n    for ($i = $len - 1; $i >= 0; $i--) {\n\
    \        $reverse .= $s[$i];\n    }\n    return [$s, $s == $reverse];\n}", " \
    \   $new_str = \"\";\n    $s_array = str_split($s);\n    for($i = 0; $i < count($s_array);\
    \ $i++){\n        if(!(strpos($c, $s_array[$i]) !== false)){\n            $new_str\
    \ .= $s_array[$i];\n        }\n    }\n    $check = $new_str == strrev($new_str)\
    \ ? True : False;\n    return [$new_str, $check];\n}", "    $a = str_split($s);\n\
    \    $b = str_split($c);\n    $result = [];\n    for($i = 0; $i < count($a); $i++){\n\
    \        if(!in_array($a[$i], $b)){\n            $result[] = $a[$i];\n       \
    \ }\n    }\n    return array(implode('', $result), implode('', $result) == strrev(implode('',\
    \ $result)));\n}\necho '<pre>';\nprint_r(reverse_delete(\"abcefedcba\", \"b\"\
    ));\necho '</pre>';", "  $r = str_split($s);\n  $s = str_split($s);\n  $n = sizeof($s);\n\
    \  for($i = 0; $i < $n; $i++) {\n    if (stripos($c, $s[$i]) !== false) {\n  \
    \    unset($s[$i]);\n    }\n  }\n  $s = array_values($s);\n  $n = sizeof($s);\n\
    \  for($i = 0; $i < $n/2; $i++) {\n    if ($s[$i] != $s[$n - $i - 1]) {\n    \
    \  return [implode('', $s), false];\n    }\n  }\n  return [implode('', $s), true];\n\
    }", "  $str = \"\";\n  $str_rev = \"\";\n  $h = [ 'string' => '', 'palindrome'\
    \ => false ];\n  $s = str_split($s);\n  $c = str_split($c);\n  foreach ($s as\
    \ $ss) {\n    if (!in_array($ss, $c)) {\n      $str .= $ss;\n    }\n  }\n  $str_rev\
    \ = strrev($str);\n  if ($str === $str_rev) {\n    $h['string'] = $str;\n    $h['palindrome']\
    \ = true;\n  } else {\n    $h['string'] = $str;\n    $h['palindrome'] = false;\n\
    \  }\n  return $h;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    $str = \"\";\n    for($i = 0;\
    \ $i < count($s); $i++){\n        if(in_array($s[$i], $c)) continue;\n       \
    \ $str .= $s[$i];\n    }\n    return [$str, $str == strrev($str)];\n}\n", "  \
    \  for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], '',\
    \ $s);\n    }\n    if ($s == strrev($s)) {\n        return [$s, true];\n    }\
    \ else {\n        return [$s, false];\n    }\n}", "    //coding and coding..\n\
    \    $set = str_split($c);\n    $s = str_split($s);\n    $result = [];\n    foreach\
    \ ($s as $key => $char) {\n        if (!in_array($char, $set)) {\n           \
    \ $result[] = $char;\n        }\n    }\n    $res = join('', $result);\n    return\
    \ array($res, $res === strrev($res));\n}", "    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n      $s = str_replace($c[$i], \"\", $s);\n    }\n    \n    return\
    \ array($s, $s === strrev($s));\n}", "    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        if (strpos($s, $c[$i]) !== false) {\n            $s = str_replace($c[$i],\
    \ '', $s);\n        }\n    }\n    $result = '';\n    $result .= $s;\n    $result\
    \ .= ',';\n    $result .= strrev($s) == $s ? 'True' : 'False';\n    return $result;\n\
    }", "    $newStr = str_replace($c,\"\",$s);\n    $strLength = strlen($newStr);\n\
    \    for($i = 0; $i < $strLength; $i++){\n        if($newStr[$i] !== $newStr[$strLength\
    \ - $i - 1]){\n            return array($newStr, false);\n        }\n    }\n \
    \   return array($newStr, true);\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    foreach ($s as $key => $val) {\n        if (in_array($val, $c)) {\n     \
    \       unset($s[$key]);\n        }\n    }\n    $s = implode($s);\n    $s = strrev($s);\n\
    \    if ($s == implode($s)) {\n        return [implode($s), TRUE];\n    } else\
    \ {\n        return [implode($s), FALSE];\n    }\n}\n", "  $result = '';\n  for($i\
    \ = 0; $i < strlen($s); $i++) {\n    if(strpos($c, $s[$i]) === false) {\n    \
    \  $result .= $s[$i];\n    }\n  }\n  return array($result, $result === strrev($result));\n\
    }", "  $r = str_split($s);\n  $r = array_diff($r, str_split($c));\n  $r = array_values($r);\n\
    \  $result = implode($r);\n  $result = [$result, strrev($result) === $result];\n\
    \  return $result;\n}", "  $s = str_split($s);\n  $c = str_split($c);\n  foreach($s\
    \ as $key => $item){\n    if(in_array($item, $c)){\n      unset($s[$key]);\n \
    \   }\n  }\n  $s = implode($s);\n  $res = array();\n  array_push($res, $s);\n\
    \  array_push($res, $s == strrev($s));\n  return $res;\n}", "    //coding and\
    \ coding....\n    $str = \"\";\n    $str2 = \"\";\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if(strpos($c, $s[$i]) !== false){\n            continue;\n \
    \       }\n        $str .= $s[$i];\n        $str2 = $s[$i].$str2;\n    }\n   \
    \ return ($str === $str2) ? [$str, true] : [$str, false];\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));", "    $str_arr = str_split($s);\n    $char_arr = str_split($c);\n\
    \    foreach ($str_arr as $key=>$value) {\n        if (in_array($value, $char_arr))\
    \ {\n            unset($str_arr[$key]);\n        }\n    }\n    return array(implode('',\
    \ $str_arr), $str_arr === array_reverse($str_arr));\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $result = preg_replace(\"/[$c]/\", '', $s);\n  \
    \  return array($result, $result === strrev($result));\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $string = \"\";\n    foreach($s as $key=>$value){\n\
    \        if(!in_array($value,$c)){\n            $string .= $value;\n        }\n\
    \    }\n    $string2 = strrev($string);\n    if($string == $string2){\n      \
    \  return array($string,true);\n    }\n    return array($string,false);\n}", " \
    \   $new_string = str_replace($c, '', $s);\n    return [$new_string, strrev($new_string)\
    \ == $new_string];\n}", "  for ($i=0; $i < strlen($c); $i++) {\n    $s = str_replace($c[$i],\
    \ \"\", $s);\n  }\n  return array($s,$s == strrev($s));\n}\n$s = \"abcde\";\n\
    $c = \"ae\";\nvar_dump(reverse_delete($s, $c));", "  \n}", "    $arr = [];\n \
    \   $s_arr = str_split($s);\n    $c_arr = str_split($c);\n    $result = str_split($s);\n\
    \    for ($i = 0; $i < count($s_arr); $i++) {\n        for ($j = 0; $j < count($c_arr);\
    \ $j++) {\n            if ($s_arr[$i] == $c_arr[$j]) {\n                $arr[]\
    \ = $i;\n            }\n        }\n    }\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        unset($result[$arr[$i] - $i]);\n    }\n    $new_arr = implode($result);\n\
    \    $new_reverse = implode(array_reverse($result));\n    if ($new_arr == $new_reverse)\
    \ {\n        $check = true;\n    } else {\n        $check = false;\n    }\n  \
    \  return [$new_arr, $check];\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"\
    ));", "    $str = '';\n    for($i = 0; $i < strlen($s); $i++){\n        if(strpos($c,\
    \ $s[$i]) === false){\n            $str = $str.$s[$i];\n        }\n    }\n   \
    \ return array($str, $str == strrev($str));\n}\n\nprint_r(reverse_delete(\"abcdecba\"\
    , \"acd\"));\n", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i],\
    \ '', $s);\n    }\n    $length = strlen($s);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($s[$i] != $s[$length - $i - 1]) {\n            return [$s, false];\n\
    \        }\n    }\n    return [$s, true];\n}", "    $s = str_split($s);\n    $c\
    \ = str_split($c);\n    $newString = [];\n    $bool = true;\n    foreach($s as\
    \ $value){\n        foreach($c as $check){\n            if($value == $check){\n\
    \                $bool = false;\n            }\n        }\n        if($bool){\n\
    \            $newString[] = $value;\n        }\n        $bool = true;\n    }\n\
    \    $finalString = join('', $newString);\n    if($finalString === strrev($finalString)){\n\
    \        return [$finalString,true];\n    }\n    return [$finalString,false];\n\
    }\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));", "    $c_arr = str_split($c);\n\
    \    $str = '';\n    for($i = 0; $i < strlen($s); $i++){\n        if(!in_array($s[$i],\
    \ $c_arr)){\n            $str .= $s[$i];\n        }\n    }\n    if(strrev($str)\
    \ == $str){\n        return array($str, true);\n    }else{\n        return array($str,\
    \ false);\n    }\n}", "\t$c = str_split($c);\n\t$s = str_split($s);\n\t$res =\
    \ [];\n\t$len = count($s);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (!in_array($s[$i],\
    \ $c)) {\n\t\t\t$res[] = $s[$i];\n\t\t}\n\t}\n\t$res_str = implode('', $res);\n\
    \t$res_str_rev = strrev($res_str);\n\tif ($res_str === $res_str_rev) {\n\t\treturn\
    \ [$res_str, true];\n\t} else {\n\t\treturn [$res_str, false];\n\t}\n}", "   \
    \ for ($i = 0; $i < strlen($c); $i++) {\n        $s = str_replace($c[$i], '',\
    \ $s);\n    }\n    $s = str_split($s);\n    return implode('', $s) == implode('',\
    \ array_reverse($s)) ? [implode('', $s), true] : [implode('', $s), false];\n}",
  "    $result = preg_replace(\"/[$c]/\", '', $s);\n    return array($result, $result\
    \ == strrev($result));\n}", "  $s = str_split($s);\n  foreach($s as $key => $val){\n\
    \    if(strpos($c, $val) !== false){\n      unset($s[$key]);\n    }\n  }\n  $r\
    \ = implode('', $s);\n  $p = strrev($r);\n  if($r === $p){\n    return [$r, true];\n\
    \  }\n  return [$r, false];\n}", "    $array = str_split($s);\n    foreach ($array\
    \ as $key => $value) {\n        if (in_array($value, str_split($c))) {\n     \
    \       unset($array[$key]);\n        }\n    }\n    $new_array = implode('', $array);\n\
    \    $rev_array = implode('', array_reverse($array));\n    if ($new_array == $rev_array)\
    \ {\n        return [$new_array, true];\n    } else {\n        return [$new_array,\
    \ false];\n    }\n}\n", "    for ($i = 0; $i < strlen($c); $i++) {\n        $s\
    \ = str_replace($c[$i], '', $s);\n    }\n    return [$s, $s == strrev($s)];\n}",
  "    $reverse_string = strrev($s);\n    $result_string = str_replace($c, \"\", $s);\n\
    \    $result_string_reverse = str_replace($c, \"\", $reverse_string);\n    $check\
    \ = false;\n    if($result_string === $result_string_reverse){\n        $check\
    \ = true;\n    }\n    return [$result_string, $check];\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));", "   $cArray = str_split($c);\n   $sArray = str_split($s);\n\
    \   $res = \"\";\n   for($i = 0; $i < count($sArray); $i++){\n       $match =\
    \ false;\n       for($j = 0; $j < count($cArray); $j++){\n           if($sArray[$i]\
    \ == $cArray[$j]){\n               $match = true;\n               break;\n   \
    \        }\n       }\n       if(!$match){\n           $res .= $sArray[$i];\n \
    \      }\n   }\n   $reverse = strrev($res);\n   if($res == $reverse){\n      \
    \ return [$res, true];\n   }\n   return [$res, false];\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    foreach ($s as $k => $v) {\n        if (in_array($v,\
    \ $c)) {\n            unset($s[$k]);\n        }\n    }\n    $s = implode('', $s);\n\
    \    return [$s, $s === strrev($s)];\n}", "    for ($i = 0; $i < strlen($c); $i++)\
    \ {\n        $s = str_replace($c[$i], '', $s);\n    }\n    return array($s, $s\
    \ == strrev($s));\n}\n$s1 = \"abcde\";\n$c1 = \"ae\";\n$s2 = \"abcdef\";\n$c2\
    \ = \"b\";\n$s3 = \"abcdedcba\";\n$c3 = \"ab\";\necho \"<pre>\";\nprint_r(reverse_delete($s1,\
    \ $c1));\nprint_r(reverse_delete($s2, $c2));\nprint_r(reverse_delete($s3, $c3));\n\
    echo \"</pre>\";", "    $stringWithOnlyC = str_replace($c, '', $s);\n    return\
    \ array(\n        'string' => $stringWithOnlyC,\n        'isPalindrome' => ($stringWithOnlyC\
    \ === strrev($stringWithOnlyC))\n    );\n}\n\necho \"<pre>\";\nvar_dump(reverse_delete(\"\
    abcde\", \"ae\"));\nvar_dump(reverse_delete(\"abcdef\", \"b\"));\nvar_dump(reverse_delete(\"\
    abcdedcba\", \"ab\"));\necho \"</pre>\";", "    $array_s = str_split($s);\n  \
    \  $array_c = str_split($c);\n    $arr_res = [];\n    foreach ($array_s as $value)\
    \ {\n        if (!in_array($value, $array_c)) {\n            $arr_res[] = $value;\n\
    \        }\n    }\n    $res = implode('', $arr_res);\n    $res_rev = implode('',\
    \ array_reverse($arr_res));\n    if ($res === $res_rev) {\n        return [$res,\
    \ true];\n    } else {\n        return [$res, false];\n    }\n}", "    for ($i\
    \ = 0; $i < strlen($c); $i++) {\n      $s = str_replace($c[$i], \"\", $s);\n \
    \   }\n    if (strcmp($s, strrev($s)) == 0) {\n      return [$s, true];\n    }\
    \ else {\n      return [$s, false];\n    }\n}", "    $s = str_split($s);\n   \
    \ $c = str_split($c);\n    $r = array_diff($s, $c);\n    $r = implode($r);\n \
    \   $r = str_split($r);\n    $i = count($r) - 1;\n    $j = 0;\n    $result = True;\n\
    \    while ($i > 0){\n        if ($r[$i] != $r[$j]){\n            $result = False;\n\
    \            break;\n        }\n        $i -= 1;\n        $j += 1;\n    }\n  \
    \  return array(implode($r), $result);\n}\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $arr = array(str_replace($c,\"\",$s),is_palindrome(str_replace($c,\"\
    \",$s)));\n    return $arr;\n}", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    $t = [];\n    foreach ($s as $key => $value) {\n        if (!in_array($value,\
    \ $c)) {\n            $t[] = $value;\n        }\n    }\n    $r = array_reverse($t);\n\
    \    return [implode('', $t), $t == $r];\n}", "    $str = '';\n    for($i = 0;\
    \ $i < strlen($s); $i++){\n        if(strpos($c, $s[$i]) === false){\n       \
    \     $str = $str.$s[$i];\n        }\n    }\n    return [$str, $str === strrev($str)];\n\
    }", "    $len = strlen($s);\n    $char = str_split($c);\n    for($i = 0; $i <\
    \ $len; $i++){\n        if(in_array($s[$i], $char)){\n            $s[$i] = \"\"\
    ;\n        }\n    }\n    $s = trim($s);\n    $s = str_split($s);\n    $rev = array_reverse($s);\n\
    \    $check = \"True\";\n    for($i = 0; $i < count($s); $i++){\n        if($s[$i]\
    \ != $rev[$i]){\n            $check = \"False\";\n        }\n    }\n    return\
    \ array(implode(\"\", $s), $check);\n}", "  \n}", "    $str1 = preg_replace(\"\
    /[\" . $c . \"]/\", \"\", $s);\n    $str2 = preg_replace(\"/[\" . $c . \"]/\"\
    , \"\", strrev($s));\n    if ($str1 === $str2) {\n        return [$str1, true];\n\
    \    } else {\n        return [$str1, false];\n    }\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  $del_symbols = str_split($c);\n  foreach ($del_symbols\
    \ as $symbol) {\n    $s = str_replace($symbol, '', $s);\n  }\n  return [$s, strrev($s)\
    \ === $s];\n}", "    foreach ($c as $v) {\n        $s = str_replace($v, '', $s);\n\
    \    }\n    $r = strrev($s);\n    if ($s == $r) {\n        return [$s, true];\n\
    \    } else {\n        return [$s, false];\n    }\n}\n\nvar_dump(reverse_delete(\"\
    abcde\", \"ae\"));\nvar_dump(reverse_delete(\"abcdef\", \"b\"));\nvar_dump(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $res_str = '';\n    $len = strlen($s);\n    for($i\
    \ = 0; $i < $len; $i++) {\n        if(strpos($c, $s[$i]) === false) {\n      \
    \      $res_str .= $s[$i];\n        }\n    }\n    $rev_str = strrev($res_str);\n\
    \    return [$res_str, $res_str === $rev_str];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
