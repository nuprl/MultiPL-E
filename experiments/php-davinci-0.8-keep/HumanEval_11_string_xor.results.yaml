name: HumanEval_11_string_xor
language: php
results:
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6techu4.php:18\n\
    Stack trace:\n#0 /tmp/tmpp6techu4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp6techu4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  if (count($a) > count($b)) {\n  \
    \  while (count($a) > count($b))\n      array_unshift($b, 0);\n  } else {\n  \
    \  while (count($b) > count($a))\n      array_unshift($a, 0);\n  }\n  $i = count($a)\
    \ - 1;\n  $r = [];\n  while ($i >= 0) {\n    if ($a[$i] == $b[$i]) {\n      $r[]\
    \ = 0;\n    } else {\n      $r[] = 1;\n    }\n    $i--;\n  }\n  return implode($r);\n\
    }\necho string_xor('010', '110');\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "001\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkk5qrzo.php:36\n\
    Stack trace:\n#0 /tmp/tmpdkk5qrzo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdkk5qrzo.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $xor;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm3g755z.php:19\n\
    Stack trace:\n#0 /tmp/tmpdm3g755z.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdm3g755z.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\tif\
    \ ( strlen($a) != strlen($b) ) {\n\t\treturn \"Strings must be equal length\"\
    ;\n\t}\n\t$len = strlen($a);\n\t$result = '';\n\tfor ( $i = 0; $i < $len; $i++\
    \ ) {\n\t\t$one = substr($a, $i, 1);\n\t\t$two = substr($b, $i, 1);\n\t\tif (\
    \ $one == $two ) {\n\t\t\t$result .= \"0\";\n\t\t} else {\n\t\t\t$result .= \"\
    1\";\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $aBin\
    \ = str_split($a);\n  $bBin = str_split($b);\n  $binaryXor = \"\";\n  for ($i\
    \ = 0; $i < count($aBin); $i++) {\n    if ($aBin[$i] == $bBin[$i]) {\n      $binaryXor\
    \ .= \"0\";\n    } else {\n      $binaryXor .= \"1\";\n    }\n  }\n  return $binaryXor;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Test length of strings\n  if (strlen($a) != strlen($b)) {\n    throw new Exception('Strings\
    \ have different length!');\n  }\n  // Split strings into arrays, convert to binary\
    \ format, perform XOR on each\n  // element, convert back to string and return.\n\
    \  return implode('', array_map(function($char) {\n    return $char[0] ^ $char[1];\n\
    \  }, array_map('bindec', str_split($a)), str_split($b)));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsn2th44.php:22\n\
    Stack trace:\n#0 /tmp/tmprsn2th44.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprsn2th44.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$s\
    \ = '';\n\tfor($i = 0; $i < strlen($a); $i++) {\n\t\t$s .= $a[$i] ^ $b[$i];\n\t\
    }\n\treturn $s;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8gjbepa.php:18\n\
    Stack trace:\n#0 /tmp/tmpy8gjbepa.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpy8gjbepa.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $stringXor\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $stringXor .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $stringXor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_9ok0m4.php:19\n\
    Stack trace:\n#0 /tmp/tmps_9ok0m4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps_9ok0m4.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ implode(array_map(function($x, $y) {\n    return ($x == $y) ? '0' : '1';\n \
    \ }, str_split($a), str_split($b)));\n}\necho string_xor('010', '110') . \"\\\
    n\";\necho string_xor('000', '001') . \"\\n\";\necho string_xor('1010101', '0010101')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n001\n1000000\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz4y7bo0.php:19\n\
    Stack trace:\n#0 /tmp/tmpfz4y7bo0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfz4y7bo0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$output = \"\";\n\tfor ($i = 0; $i\
    \ < sizeof($a); $i++) {\n\t\tif ($a[$i] == $b[$i]) {\n\t\t\t$output .= \"0\";\n\
    \t\t} else {\n\t\t\t$output .= \"1\";\n\t\t}\n\t}\n\treturn $output;\n}\n\necho(string_xor('010',\
    \ '110') . \"\\n\");\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ implode('', array_map(function($x, $y) { return $x ^ $y; }, str_split($a), str_split($b)));\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzta4viu.php:14\n\
    Stack trace:\n#0 /tmp/tmplzta4viu.php(19): test()\n#1 {main}\n  thrown in /tmp/tmplzta4viu.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $l\
    \ = strlen($a);\n  $xorString = '';\n  for ($i = 0; $i < $l; $i++) {\n    $xorString\
    \ .= (intval($a[$i]) ^ intval($b[$i])) ? '1' : '0';\n  }\n  return $xorString;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $len\
    \ = max(strlen($a), strlen($b));\n  $a = str_pad($a, $len, \"0\", STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $len, \"0\", STR_PAD_LEFT);\n  $result = \"\";\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $result .= ($a[$i] == $b[$i]) ? \"0\" : \"1\";\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = array();\n    $a = str_split($a);\n    $b = str_split($b);\n    foreach ($a\
    \ as $key => $char) {\n        $result[] = $char ^ $b[$key];\n    }\n    return\
    \ implode($result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zeb9_y8.php:21\n\
    Stack trace:\n#0 /tmp/tmp4zeb9_y8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4zeb9_y8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $res\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= $a[$i] ^\
    \ $b[$i];\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi78narj.php:18\n\
    Stack trace:\n#0 /tmp/tmppi78narj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppi78narj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $len = strlen($a);\n  for ($i = 0; $i < $len; $i++) {\n    $result\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pnk7fj8.php:20\n\
    Stack trace:\n#0 /tmp/tmp2pnk7fj8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2pnk7fj8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $ret = \"\";\n  for ($i = 0; $i <\
    \ count($a); $i++) {\n    $ret .= ($a[$i] ^ $b[$i]);\n  }\n  return $ret;\n}\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqboh_nxn.php:20\n\
    Stack trace:\n#0 /tmp/tmpqboh_nxn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqboh_nxn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $res = '';\n  $len = max(count($a),\
    \ count($b));\n  for ($i = 0; $i < $len; $i++) {\n    $aa = (isset($a[$i])) ?\
    \ $a[$i] : 0;\n    $bb = (isset($b[$i])) ? $b[$i] : 0;\n    $res .= $aa ^ $bb;\n\
    \  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsocq0_n.php:24\n\
    Stack trace:\n#0 /tmp/tmpwsocq0_n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwsocq0_n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = \"\";\n    $a = str_split($a);\n    $b = str_split($b);\n    $i = 0;\n   \
    \ $j = 0;\n    while($i < count($a) && $j < count($b)){\n        if($a[$i] ==\
    \ $b[$j]){\n            $result .= \"0\";\n        } else {\n            $result\
    \ .= \"1\";\n        }\n        $i++;\n        $j++;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor_result\
    \ = array();\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor_result[] = (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return implode('', $xor_result);\n}\necho string_xor('0101',\
    \ '0111');\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '0010'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$c\
    \ = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$c .= ((int)$a[$i] ^ (int)$b[$i]);\n\
    \t}\n\treturn $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Convert strings to an array of bits\n  $a = str_split($a);\n  $b = str_split($b);\n\
    \  // Perform XOR operation on bits\n  $r = array();\n  foreach ($a as $i => $v)\
    \ {\n    $r[] = $v == $b[$i] ? '0' : '1';\n  }\n  // Return result as a string\n\
    \  return implode('', $r);\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $r = '';\n    foreach($a as $i\
    \ => $v) {\n        $r .= ($v xor $b[$i]);\n    }\n    return $r;\n}\n$a = \"\
    10010010\";\n$b = \"10111001\";\necho \"Result of XOR: \".string_xor($a, $b);\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Result of XOR: 1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3u4rb8p.php:23\n\
    Stack trace:\n#0 /tmp/tmpj3u4rb8p.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj3u4rb8p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$result\
    \ = array();\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$result[] = ($a[$i]\
    \ == $b[$i]) ? '0' : '1';\n\t}\n\treturn implode($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n  $max = max(strlen($a), strlen($b));\n  $a = str_pad($a, $max,\
    \ '0', STR_PAD_LEFT);\n  $b = str_pad($b, $max, '0', STR_PAD_LEFT);\n  $result\
    \ = '';\n  for ($i = 0; $i < $max; $i++) {\n    $result .= $a[$i] == $b[$i] ?\
    \ '0' : '1';\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\treturn\
    \ implode(array_map(function($a, $b) {\n\t\treturn $a ^ $b;\n\t}, str_split($a),\
    \ str_split($b)));\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0eo1l19h.php:17\n\
    Stack trace:\n#0 /tmp/tmp0eo1l19h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0eo1l19h.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $longer = strlen($a) > strlen($b) ? $a : $b;\n  $shorter = strlen($a)\
    \ > strlen($b) ? $b : $a;\n  for ($i = 0; $i < strlen($longer); $i++) {\n    $result\
    \ .= $i < strlen($shorter) ? $longer[$i] == $shorter[$i] ? '0' : '1' : $longer[$i];\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = [];\n  $a = str_split($a);\n  $b = str_split($b);\n  foreach($a as $key =>\
    \ $value) {\n    if ($a[$key] == $b[$key]) {\n      $xor[] = 0;\n    } else {\n\
    \      $xor[] = 1;\n    }\n  }\n  return implode($xor);\n}\n\necho string_xor('010',\
    \ '110');\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91l_n0ym.php:19\n\
    Stack trace:\n#0 /tmp/tmp91l_n0ym.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp91l_n0ym.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa1onz98.php:15\n\
    Stack trace:\n#0 /tmp/tmpoa1onz98.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpoa1onz98.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $r\
    \ = '';\n  $l = max(strlen($a), strlen($b));\n  $a = str_pad($a, $l, '0', STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $l, '0', STR_PAD_LEFT);\n  for ($i = 0; $i < $l; $i++)\n \
    \   $r .= ((int)$a[$i] ^ (int)$b[$i]);\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ implode(array_map(function($i, $j) {\n        return ((int)$i)^((int)$j);\n\
    \    }, str_split($a), str_split($b)));\n}\n\necho string_xor('010', '110');\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $a_digit = substr($a,\
    \ $i, 1);\n    $b_digit = substr($b, $i, 1);\n    if ($a_digit == $b_digit) {\n\
    \      $result .= \"0\";\n    } else {\n      $result .= \"1\";\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $binString\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $binString .= (bool) $a[$i]\
    \ ^ (bool) $b[$i] ? '1' : '0';\n  }\n  return $binString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $out\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $out .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $out;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyv9v2hj.php:18\n\
    Stack trace:\n#0 /tmp/tmpeyv9v2hj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpeyv9v2hj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkhx4akd.php:18\n\
    Stack trace:\n#0 /tmp/tmplkhx4akd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplkhx4akd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $len\
    \ = max(strlen($a), strlen($b));\n    $max = max($a, $b);\n    $a = str_pad($a,\
    \ $len, $max[0], STR_PAD_LEFT);\n    $b = str_pad($b, $len, $max[0], STR_PAD_LEFT);\n\
    \    $result = '';\n    for ($i = 0; $i < $len; $i++) {\n        $result .= ($a[$i]\
    \ ^ $b[$i]);\n    }\n    return $result;\n}\n\necho string_xor('010', '110');\n\
    echo string_xorn\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9ut7x84a.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    //\
    \ convert the strings to an array of characters\n    $a_array = str_split($a);\n\
    \    $b_array = str_split($b);\n    // count the length of the arrays\n    $a_length\
    \ = count($a_array);\n    $b_length = count($b_array);\n    // compare length\
    \ of $a and $b\n    if ($a_length !== $b_length) {\n        return \"Strings are\
    \ not equal in length.\";\n    }\n    // $result is a string that starts with\
    \ empty string\n    $result = \"\";\n    // loop through the arrays\n    for ($i\
    \ = 0; $i < $a_length; $i++) {\n        // check if $a_array[$i] is equal to $b_array[$i]\n\
    \        if ($a_array[$i] == $b_array[$i]) {\n            // if true, add 0 to\
    \ $result\n            $result .= \"0\";\n        } else {\n            // if\
    \ false, add 1 to $result\n            $result .= \"1\";\n        }\n    }\n \
    \   // return $result\n    return $result;\n}\necho string_xor('010', '110');\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $res\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $a_i = substr($a,\
    \ $i, 1);\n        $b_i = substr($b, $i, 1);\n        $res .= ($a_i == $b_i) ?\
    \ '0' : '1';\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$xor = array();\n\tfor ($i = 0; $i\
    \ < count($a); $i++) {\n\t\tif ($a[$i] == $b[$i]) {\n\t\t\t$xor[] = '0';\n\t\t\
    } else {\n\t\t\t$xor[] = '1';\n\t\t}\n\t}\n\treturn implode($xor);\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$c = [];\n\tforeach ($a as $key =>\
    \ $value) {\n\t\tif ($value == 1 && $b[$key] == 1) {\n\t\t\t$c[] = 0;\n\t\t} elseif\
    \ ($value == 0 && $b[$key] == 0) {\n\t\t\t$c[] = 0;\n\t\t} else {\n\t\t\t$c[]\
    \ = 1;\n\t\t}\n\t}\n\treturn implode('', $c);\n}\necho string_xor('010', '110')\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $r\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljqzt9ie.php:19\n\
    Stack trace:\n#0 /tmp/tmpljqzt9ie.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpljqzt9ie.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnsuptr5.php:19\n\
    Stack trace:\n#0 /tmp/tmpmnsuptr5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmnsuptr5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= ($a[$i] ^ $b[$i]);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6vmznfr.php:21\n\
    Stack trace:\n#0 /tmp/tmpq6vmznfr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq6vmznfr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$result\
    \ = \"\";\n\t$strlen = strlen($a);\n\tfor ($i = 0; $i < $strlen; $i++) {\n\t\t\
    $result .= ($a[$i] != $b[$i]) ? \"1\" : \"0\";\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$result\
    \ = \"\";\n\t$i = 0;\n\twhile ($i < strlen($a)) {\n\t\tif (substr($a, $i, 1) ==\
    \ substr($b, $i, 1)) {\n\t\t\t$result .= \"0\";\n\t\t} else {\n\t\t\t$result .=\
    \ \"1\";\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $c;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ob7_q4u.php:18\n\
    Stack trace:\n#0 /tmp/tmp2ob7_q4u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2ob7_q4u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    //\
    \ your code\n    $result = '';\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    for ($i = 0; $i < strlen($a); $i++) {\n        if ((int)$a[$i] ^ (int)$b[$i])\
    \ {\n            $result .= '1';\n        } else {\n            $result .= '0';\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpgyaun4gw.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyaun4gw.php:25\n\
    Stack trace:\n#0 /tmp/tmpgyaun4gw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgyaun4gw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$r\
    \ = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$r .= $a[$i] ^ $b[$i];\n\
    \t}\n\treturn $r;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpup198fn_.php:18\n\
    Stack trace:\n#0 /tmp/tmpup198fn_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpup198fn_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $c = [];\n    foreach ($a as\
    \ $key => $value) {\n        if ($value == $b[$key]) {\n            $c[] = 0;\n\
    \        } else {\n            $c[] = 1;\n        }\n    }\n    return implode('',\
    \ $c);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwxmyikl.php:21\n\
    Stack trace:\n#0 /tmp/tmpmwxmyikl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmwxmyikl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $temp\
    \ = str_split($a);\n  $temp2 = str_split($b);\n  $count = 0;\n  $xor = [];\n \
    \ while ($count < count($temp)) {\n    if ($temp[$count] == $temp2[$count]) {\n\
    \      $xor[] = '0';\n    } else {\n      $xor[] = '1';\n    }\n    $count++;\n\
    \  }\n  return implode($xor);\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $c\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= intval($a[$i])\
    \ ^ intval($b[$i]);\n    }\n    return $c;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $xor\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $xor;\n}\necho string_xor('010', '110');\necho PHP_EOL;\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic5u26ty.php:21\n\
    Stack trace:\n#0 /tmp/tmpic5u26ty.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpic5u26ty.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $res\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= ($a[$i] ^ $b[$i]);\n\
    \  }\n  return $res;\n}\n\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3mv4o9l.php:20\n\
    Stack trace:\n#0 /tmp/tmps3mv4o9l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmps3mv4o9l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n      $c .= $a[$i] == $b[$i]\
    \ ? \"0\" : \"1\";\n  }\n  return $c;\n}\n$string1 = \"101101\";\n$string2 = \"\
    110101\";\necho string_xor($string1, $string2);\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '011000'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $res\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= ($a[$i] ^\
    \ $b[$i]);\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaht8bj_b.php:19\n\
    Stack trace:\n#0 /tmp/tmpaht8bj_b.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpaht8bj_b.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $a_len = strlen($a);\n  $b_len = strlen($b);\n  $len = max($a_len,\
    \ $b_len);\n  for ($i = 0; $i < $len; $i++) {\n    $result .= ((isset($a[$i])\
    \ ? $a[$i] : '0') ^ (isset($b[$i]) ? $b[$i] : '0'));\n  }\n  return $result;\n\
    }\n\n$s1 = '010';\n$s2 = '110';\n\necho string_xor($s1, $s2);\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnojdjf4.php:26\n\
    Stack trace:\n#0 /tmp/tmpsnojdjf4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsnojdjf4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n   $a\
    \ = str_split($a);\n   $b = str_split($b);\n   $res = \"\";\n   for ($i = 0; $i\
    \ < count($a); $i++) {\n     $res .= ($a[$i] xor $b[$i]);\n   }\n   return $res;\n\
    }\n\necho string_xor('010', '110') . \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y4nvsyr.php:23\n\
    Stack trace:\n#0 /tmp/tmp2y4nvsyr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2y4nvsyr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xorResult\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xorResult .= $a[$i] ^\
    \ $b[$i];\n  }\n  return $xorResult;\n}\n\necho string_xor('010', '110');\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76bn2ua4.php:20\n\
    Stack trace:\n#0 /tmp/tmp76bn2ua4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp76bn2ua4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2alc17dz.php:14\n\
    Stack trace:\n#0 /tmp/tmp2alc17dz.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp2alc17dz.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvymobto.php:19\n\
    Stack trace:\n#0 /tmp/tmpuvymobto.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpuvymobto.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] === $b[$i]\
    \ ? '0' : '1';\n  }\n  return $c;\n}\necho string_xor('010', '110');\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = $a ^ $b;\n  return sprintf(\"%b\", $xor);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9tb_bvl.php:16\n\
    Stack trace:\n#0 /tmp/tmpx9tb_bvl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpx9tb_bvl.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $ans\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $ans .= ($a[$i] ==\
    \ $b[$i]) ? '0' : '1';\n    }\n    return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\treturn\
    \ decbin(bindec($a) ^ bindec($b));\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp524laf8p.php:15\n\
    Stack trace:\n#0 /tmp/tmp524laf8p.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp524laf8p.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n  \n}\n```\n\n```html\n<!-- For example: -->\n<p>\n  <b>Input:</b>\
    \ 010 and 110\n  <br>\n  <b>Output:</b> 100\n</p>\n```\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxuftrkpm.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakgoqt27.php:18\n\
    Stack trace:\n#0 /tmp/tmpakgoqt27.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpakgoqt27.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    //\
    \ convert string to array\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    // loop over the array\n    for ($i = 0; $i < count($a); $i++) {\n      \
    \  // convert to integers\n        $a[$i] = (int) $a[$i];\n        $b[$i] = (int)\
    \ $b[$i];\n        // if $a and $b are equal then xor = 0 else 1\n        $c[]\
    \ = $a[$i] == $b[$i] ? 0 : 1;\n    }\n    // return string converted from array\n\
    \    return implode('', $c);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqy17ofl.php:19\n\
    Stack trace:\n#0 /tmp/tmpvqy17ofl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvqy17ofl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $r\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxu6knuxe.php:19\n\
    Stack trace:\n#0 /tmp/tmpxu6knuxe.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxu6knuxe.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Get the length of string b\n  $b_length = strlen($b);\n  // Initialize a new\
    \ string with the same length as string b\n  $result = str_repeat(' ', $b_length);\n\
    \  // For every character in string a and string b\n  for ($i = 0; $i < $b_length;\
    \ $i++) {\n    // If they are equal to each other\n    if ($a[$i] == $b[$i]) {\n\
    \      // Output a 0\n      $result[$i] = '0';\n    } else {\n      // Otherwise\
    \ output a 1\n      $result[$i] = '1';\n    }\n  }\n  // Convert the string to\
    \ an integer and return the result\n  return (int) $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x2b6rs1.php:31\n\
    Stack trace:\n#0 /tmp/tmp9x2b6rs1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9x2b6rs1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $res\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $res;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mieln4u.php:18\n\
    Stack trace:\n#0 /tmp/tmp4mieln4u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4mieln4u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] == $b[$i]\
    \ ? '0' : '1';\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n  // get the number of bits of the longest string.\n  $len =\
    \ max(strlen($a), strlen($b));\n  // create an array to store the result.\n  $result\
    \ = array();\n  // convert each string to binary number.\n  $bin_a = intval($a,\
    \ 2);\n  $bin_b = intval($b, 2);\n  // calculate the bitwise xor of the two binary\
    \ numbers.\n  $xor = $bin_a ^ $bin_b;\n  // convert the xor result back to a string\
    \ of bits.\n  $xor_bin = str_pad(decbin($xor), $len, '0', STR_PAD_LEFT);\n  //\
    \ return the result.\n  return $xor_bin;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $str\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $str .= ($a[$i] == $b[$i])\
    \ ? \"0\" : \"1\";\n  }\n  return $str;\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $res\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c = $a[$i] ^ $b[$i];\n\
    \    $res .= $c;\n  }\n  return $res;\n}\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvga5tld.php:19\n\
    Stack trace:\n#0 /tmp/tmppvga5tld.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppvga5tld.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$result\
    \ = '';\n\tif (strlen($a) == strlen($b)) {\n\t\tfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n\t\t\t$result .= $a[$i] == $b[$i] ? '0' : '1';\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n   $return\
    \ = '';\n   $len = strlen($a);\n   for ($i = 0; $i < $len; $i++) {\n     $return\
    \ .= $a[$i] ^ $b[$i];\n   }\n   return $return;\n}\n\necho string_xor('010', '110')\
    \ . \"\\n\";\necho string_xor('101', '101') . \"\\n\";\necho string_xor('101',\
    \ '111') . \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\x01\0\0\n\0\0\0\n\0\x01\0\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpya2rwhzj.php:24\nStack trace:\n#0 /tmp/tmpya2rwhzj.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmpya2rwhzj.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $aBin\
    \ = bindec($a);\n    $bBin = bindec($b);\n    $xor = $aBin ^ $bBin;\n    return\
    \ decbin($xor);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1g98wh93.php:18\n\
    Stack trace:\n#0 /tmp/tmp1g98wh93.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1g98wh93.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $xored = $a ^ $b;\n  // Converts decimal to binary and get it's length.\n\
    \  $length = strlen(decbin($xored));\n  // Loops through binary representation\
    \ and add string of 1 or 0 to result variable.\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    $result .= ($xored >> $i) & 1;\n  }\n  return $result;\n}\n\necho string_xor('010',\
    \ '110');\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp78kf3uv9.php on line\
    \ 13\n0\nWarning: A non-numeric value encountered in /tmp/tmp78kf3uv9.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78kf3uv9.php:24\n\
    Stack trace:\n#0 /tmp/tmp78kf3uv9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp78kf3uv9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $a_len = strlen($a);\n  $b_len = strlen($b);\n  $longest = ($a_len\
    \ > $b_len) ? $a_len : $b_len;\n  for ($i = 0; $i < $longest; $i++) {\n    $result\
    \ .= (($a[$i] ^ $b[$i]) ? '1' : '0');\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5io3gfnx.php:22\n\
    Stack trace:\n#0 /tmp/tmp5io3gfnx.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5io3gfnx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor .= ($a[$i] == $b[$i])\
    \ ? '0' : '1';\n  }\n  return $xor;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ your code here\n  $result = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n \
    \   if ($a[$i] === $b[$i]) {\n      $result .= '0';\n    } else {\n      $result\
    \ .= '1';\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    $len = max(strlen($a), strlen($b));\n    $a = str_pad($a, $len, '0',\
    \ STR_PAD_LEFT);\n    $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $result .= ($a[$i] xor $b[$i]) ? '1' : '0';\n\
    \    }\n    return $result;\n}\n\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ implode(array_map(function($x, $y) {\n    return (int)$x ^ (int)$y;\n  }, str_split($a),\
    \ str_split($b)));\n}\n\necho string_xor('010', '110');\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $out\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $out .= $a[$i]^$b[$i];\n\
    \    }\n    return $out;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb0of3u2.php:18\n\
    Stack trace:\n#0 /tmp/tmpmb0of3u2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmb0of3u2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_umpiqg.php:19\n\
    Stack trace:\n#0 /tmp/tmpf_umpiqg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf_umpiqg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $output\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $output .= $a[$i] == $b[$i]\
    \ ? '0' : '1';\n  }\n  return $output;\n}\nfunction candidate(...$args) {\n  \
    \  return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor .= ((int)$a[$i] ^ (int)$b[$i]);\n\
    \  }\n  return $xor;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $str\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $str .= ($a[$i] ^ $b[$i]);\n\
    \  }\n  return $str;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69659vn6.php:18\n\
    Stack trace:\n#0 /tmp/tmp69659vn6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp69659vn6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $n\
    \ = strlen($a);\n    $c = \"\";\n    for ($i = 0; $i < $n; $i++) {\n        $c\
    \ .= $a[$i] == $b[$i] ? '0' : '1';\n    }\n    return $c;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $i = 0;\n  while ($i < strlen($a)) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \    $i++;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc4gis_t.php:21\n\
    Stack trace:\n#0 /tmp/tmpzc4gis_t.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzc4gis_t.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $res\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $res .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $res;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ow6ysqe.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ow6ysqe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3ow6ysqe.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ str_repeat(\"0\", (strlen($a) - strlen($b)) % strlen($a)) . $b ^ $a;\n}\necho\
    \ string_xor('010', '110') . \"<br>\";\necho string_xor('111', '111') . \"<br>\"\
    ;\necho string_xor('1100', '1010') . \"<br>\";\necho string_xor('11', '01') .\
    \ \"<br>\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\x01\0\0<br>\0\0\0<br>\0\x01\x01\0<br>\x01\0<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpncibgy3i.php:19\nStack trace:\n#0 /tmp/tmpncibgy3i.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpncibgy3i.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Here we use str_split to convert string to array of characters.\n  // This is\
    \ needed to access individual characters in string in array format.\n  $a = str_split($a);\n\
    \  $b = str_split($b);\n  $r = array();\n\n  // Loop through each character in\
    \ string and perform XOR operation on it.\n  for ($i = 0; $i < count($a); $i++)\
    \ {\n    $r[] = $a[$i] ^ $b[$i];\n  }\n\n  // Return the result as a string.\n\
    \  return implode($r);\n}\n\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxusuv90e.php:28\n\
    Stack trace:\n#0 /tmp/tmpxusuv90e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxusuv90e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $length\
    \ = strlen($a);\n    $out = '';\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    $out .= (int) ($a[$i] !== $b[$i]);\n    }\n    return $out;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] == $b[$i]\
    \ ? \"0\" : \"1\";\n  }\n  return $c;\n}\necho string_xor('010', '110');\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $r\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= ($a[$i] == $b[$i])\
    \ ? '0' : '1';\n    }\n    return $r;\n}\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] xor $b[$i];\n\
    \  }\n  return $result;\n}\n\n/* From: http://www.php.net/manual/en/function.str-split.php#107658\
    \ */\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphr4bsoua.php:20\n\
    Stack trace:\n#0 /tmp/tmphr4bsoua.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphr4bsoua.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n  \n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpastmmrah.php:16\n\
    Stack trace:\n#0 /tmp/tmpastmmrah.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpastmmrah.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kubl5nr.php:21\n\
    Stack trace:\n#0 /tmp/tmp5kubl5nr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5kubl5nr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= ($a[$i] ^ $b[$i]);\n  }\n  return $result;\n\
    }\n\necho string_xor('010', '110') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmh_b1i9_.php:22\n\
    Stack trace:\n#0 /tmp/tmpmh_b1i9_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmh_b1i9_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $r\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3x_cwge.php:19\n\
    Stack trace:\n#0 /tmp/tmpu3x_cwge.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpu3x_cwge.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $r\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2lq6jp5.php:19\n\
    Stack trace:\n#0 /tmp/tmpt2lq6jp5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt2lq6jp5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $o\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $o .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n  }\n  return $o;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9l5q_lci.php:18\n\
    Stack trace:\n#0 /tmp/tmp9l5q_lci.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9l5q_lci.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = array();\n  $split_a = str_split($a);\n  $split_b = str_split($b);\n  $diff\
    \ = abs(strlen($a) - strlen($b));\n  if (strlen($a) < strlen($b)) {\n    while\
    \ ($diff--) {\n      array_unshift($split_a, '0');\n    }\n  } else if (strlen($a)\
    \ > strlen($b)) {\n    while ($diff--) {\n      array_unshift($split_b, '0');\n\
    \    }\n  }\n  for ($i = 0; $i < count($split_a); $i++) {\n    $xor[] = (int)$split_a[$i]\
    \ xor (int)$split_b[$i];\n  }\n  return implode('', $xor);\n}\n\necho string_xor('010',\
    \ '110') . \"\\n\";\necho string_xor('00', '0') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "010\n00\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjqls1gh.php:33\n\
    Stack trace:\n#0 /tmp/tmpnjqls1gh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnjqls1gh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = (string)$a;\n\t$b = (string)$b;\n\t$xor = '';\n\tfor ($i = 0; $i < max(strlen($a),\
    \ strlen($b)); $i++) {\n\t\t$xor .= $a[$i] == $b[$i] ? '0' : '1';\n\t}\n\treturn\
    \ $xor;\n}\necho string_xor('101', '110');\necho '<br>';\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 011<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $c = '';\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $c = $c . (($a[$i] + $b[$i]) % 2);\n  }\n  return $c;\n}\n\necho\
    \ string_xor('010', '110') . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ decbin(bindec($a) ^ bindec($b));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoquwhhq.php:14\n\
    Stack trace:\n#0 /tmp/tmpcoquwhhq.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpcoquwhhq.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    //\
    \ my solution\n    $a = str_split($a);\n    $b = str_split($b);\n    $result =\
    \ [];\n    foreach ($a as $i => $char) {\n        if ($char == $b[$i]) {\n   \
    \         $result[] = 0;\n        } else {\n            $result[] = 1;\n     \
    \   }\n    }\n    return implode($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i]\
    \ ^ $b[$i]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8lql68v.php:19\n\
    Stack trace:\n#0 /tmp/tmpf8lql68v.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf8lql68v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jhujc14.php:14\n\
    Stack trace:\n#0 /tmp/tmp9jhujc14.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp9jhujc14.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $output\
    \ = '';\n    $a = str_split($a);\n    $b = str_split($b);\n    for ($i = 0; $i\
    \ < count($a); $i++) {\n        $output .= $a[$i] ^ $b[$i];\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20anueeo.php:21\n\
    Stack trace:\n#0 /tmp/tmp20anueeo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp20anueeo.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $length\
    \ = max(strlen($a), strlen($b));\n  $a = str_pad($a, $length, \"0\", STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $length, \"0\", STR_PAD_LEFT);\n  $result = \"\";\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    $result .= (intval($a[$i]) ^ intval($b[$i]));\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a_bin\
    \ = bin2hex($a);\n    $b_bin = bin2hex($b);\n    $result = '';\n    for ($i =\
    \ 0; $i < strlen($a_bin); $i++) {\n        $result .= (hexdec($a_bin[$i]) ^ hexdec($b_bin[$i]));\n\
    \    }\n    return hex2bin($result);\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xqt2__o.php:20\n\
    Stack trace:\n#0 /tmp/tmp5xqt2__o.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xqt2__o.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (($a[$i] == '1')\
    \ != ($b[$i] == '1')) ? '1' : '0';\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1o37te2.php:20\n\
    Stack trace:\n#0 /tmp/tmpu1o37te2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpu1o37te2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\n```\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbnu4v2bi.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$result = '';\n\tfor ($i = 0; $i\
    \ < count($a); $i++) {\n\t\t$result .= $a[$i] ^ $b[$i];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzegiw9mp.php:21\n\
    Stack trace:\n#0 /tmp/tmpzegiw9mp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzegiw9mp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  foreach ($a as $key\
    \ => $value) {\n    if ($a[$key] == $b[$key]) {\n      $result[] = 0;\n    } else\
    \ {\n      $result[] = 1;\n    }\n  }\n  return implode('', $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuy20ebx1.php:15\n\
    Stack trace:\n#0 /tmp/tmpuy20ebx1.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpuy20ebx1.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ implode(array_map(function($x, $y) {\n      return $x ^ $y;\n    }, str_split($a),\
    \ str_split($b)));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhdbkmrd.php:16\n\
    Stack trace:\n#0 /tmp/tmplhdbkmrd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplhdbkmrd.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $out\
    \ = \"\";\n  $strlen = strlen($a);\n  for ($i = 0; $i < $strlen; $i++) {\n   \
    \ $out .= $a[$i] ^ $b[$i];\n  }\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61vv5p_b.php:20\n\
    Stack trace:\n#0 /tmp/tmp61vv5p_b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp61vv5p_b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here!\n  $output = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    if ($a[$i] === $b[$i]) {\n      $output .= '0';\n    } else {\n      $output\
    \ .= '1';\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $aArr\
    \ = str_split($a);\n    $bArr = str_split($b);\n    $res = '';\n    for ($i =\
    \ 0; $i < count($aArr); $i++) {\n        $res .= $aArr[$i] == $bArr[$i] ? '0'\
    \ : '1';\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    // your code here\n    for ($i = 0; $i < strlen($a); $i++) {\n  \
    \      $result .= ($a[$i] == $b[$i]) ? '0' : '1';\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] ==\
    \ $b[$i]) ? \"0\" : \"1\";\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $len\
    \ = max(strlen($a), strlen($b));\n  $a = str_pad($a, $len, '0', STR_PAD_LEFT);\n\
    \  $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n  $result = \"\";\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg77_l0dt.php:22\n\
    Stack trace:\n#0 /tmp/tmpg77_l0dt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpg77_l0dt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr57ntobk.php:18\n\
    Stack trace:\n#0 /tmp/tmpr57ntobk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpr57ntobk.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $res = [];\n    for ($i = 0;\
    \ $i < count($a); $i++) {\n        $res[] = $a[$i] ^ $b[$i];\n    }\n    return\
    \ implode('', $res);\n}\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04m81pc9.php:21\n\
    Stack trace:\n#0 /tmp/tmp04m81pc9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp04m81pc9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $aLen\
    \ = strlen($a);\n  $bLen = strlen($b);\n  $i = 0;\n  $result = '';\n  if ($aLen\
    \ < $bLen) {\n    $a = str_pad($a, $bLen, '0', STR_PAD_LEFT);\n  } else {\n  \
    \  $b = str_pad($b, $aLen, '0', STR_PAD_LEFT);\n  }\n  while ($i < $aLen) {\n\
    \    $result .= $a[$i] ^ $b[$i];\n    $i++;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphp738xw3.php:28\n\
    Stack trace:\n#0 /tmp/tmphp738xw3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphp738xw3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ implode(array_map(function($x, $y) {\n    return $x ^ $y;\n  }, str_split($a),\
    \ str_split($b)));\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy_nu0hq.php:17\n\
    Stack trace:\n#0 /tmp/tmpmy_nu0hq.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpmy_nu0hq.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsh0nwypj.php:19\n\
    Stack trace:\n#0 /tmp/tmpsh0nwypj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpsh0nwypj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)$a[$i] ^\
    \ (int)$b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $str\
    \ = '';\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $str .= $a[$i] ^ $b[$i];\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbj7zuv8.php:21\n\
    Stack trace:\n#0 /tmp/tmpgbj7zuv8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgbj7zuv8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$a\
    \ = str_split($a);\n\t$b = str_split($b);\n\t$output = '';\n\tfor ($i = 0; $i\
    \ < count($a); $i++) {\n\t\t$output .= $a[$i] ^ $b[$i];\n\t}\n\treturn $output;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5kuy468.php:21\n\
    Stack trace:\n#0 /tmp/tmpt5kuy468.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpt5kuy468.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //convert\
    \ to numbers\n  $aNum = bindec($a);\n  $bNum = bindec($b);\n  //perform bitwise\
    \ xor\n  $xor = $aNum ^ $bNum;\n  //convert back to binary\n  $xor = decbin($xor);\n\
    \  //return as string\n  return (string)$xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mijz1__.php:22\n\
    Stack trace:\n#0 /tmp/tmp3mijz1__.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3mijz1__.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $r\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $r;\n}\necho string_xor('010', '110');\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbz9hsqk.php:21\n\
    Stack trace:\n#0 /tmp/tmpdbz9hsqk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdbz9hsqk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = (string) $a;\n  $b = (string) $b;\n  $len = max(strlen($a), strlen($b));\n\
    \  $res = '';\n  for ($i = 0; $i < $len; $i++) {\n    $l = isset($a[$i]) ? $a[$i]\
    \ : '0';\n    $r = isset($b[$i]) ? $b[$i] : '0';\n    $res .= $l ^ $r;\n  }\n\
    \  return $res;\n}\n\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsxg3kst.php:25\n\
    Stack trace:\n#0 /tmp/tmpbsxg3kst.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbsxg3kst.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] != $b[$i]\
    \ ? '1' : '0';\n  }\n  return $result;\n}\n\n$tests = array(\n    array('010',\
    \ '110', '100'),\n    array('000', '111', '111'),\n    array('1101', '101', '1000'),\n\
    \    array('110', '110', '000'),\n    array('11101', '101', '11000'),\n    array('1010101010101010101010101010101010101010101010101010101010101010',\
    \ '1010101010101010101010101010101010101010101010101010101010101010', '0'),\n\
    \    array('11', '1', '10'),\n    array('110101', '1111', '110000'),\n    arrayn\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0kam6mxf.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $r\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $r .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi85i774_.php:19\n\
    Stack trace:\n#0 /tmp/tmpi85i774_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpi85i774_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $aLength\
    \ = strlen($a);\n  $bLength = strlen($b);\n  $result = '';\n  if ($aLength > $bLength)\
    \ {\n    $b = str_pad($b, $aLength, '0', STR_PAD_LEFT);\n  } else if ($bLength\
    \ > $aLength) {\n    $a = str_pad($a, $bLength, '0', STR_PAD_LEFT);\n  }\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] xor $b[$i]) ? '1'\
    \ : '0';\n  }\n  return $result;\n}\necho string_xor('010', '110') . PHP_EOL;\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t//split\
    \ strings into arrays and XOR the corresponding bits\n\t$a = str_split($a);\n\t\
    $b = str_split($b);\n\t$c = array();\n\tforeach ($a as $key => $val) {\n\t\t$c[]\
    \ = $val^$b[$key];\n\t}\n\treturn implode($c);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi61mibj8.php:22\n\
    Stack trace:\n#0 /tmp/tmpi61mibj8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpi61mibj8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $len\
    \ = strlen($a);\n    if ($len === strlen($b)) {\n        $result = '';\n     \
    \   for ($i = 0; $i < $len; $i++) {\n            $result .= (string) ((int) $a[$i]\
    \ ^ (int) $b[$i]);\n        }\n        return $result;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$out\
    \ = '';\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\t$out .= $a[$i] == $b[$i]\
    \ ? '0' : '1';\n\t}\n\treturn $out;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= (int)$a[$i]\
    \ ^ (int)$b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $output\
    \ = \"\";\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    if ($a[$i] === \"1\" && $b[$i] === \"1\") {\n      $output .= \"\
    0\";\n    } else if ($a[$i] === \"0\" && $b[$i] === \"0\") {\n      $output .=\
    \ \"0\";\n    } else {\n      $output .= \"1\";\n    }\n  }\n  return $output;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= (int)$a[$i] ^ (int)$b[$i];\n\
    \  }\n  return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $length\
    \ = max(strlen($a), strlen($b));\n    $a = str_pad($a, $length, \"0\", STR_PAD_LEFT);\n\
    \    $b = str_pad($b, $length, \"0\", STR_PAD_LEFT);\n    $result = '';\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        $result .= ((int)$a[$i] ^ (int)$b[$i]);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $aArr\
    \ = str_split($a);\n    $bArr = str_split($b);\n    $arr = [];\n    for ($i =\
    \ 0; $i < count($aArr); $i++) {\n        if ($aArr[$i] == $bArr[$i]) {\n     \
    \       $arr[] = 0;\n        } else {\n            $arr[] = 1;\n        }\n  \
    \  }\n    return implode('', $arr);\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $c = [];\n  foreach (range(0, count($a)-1)\
    \ as $i) {\n    $c[] = $a[$i] xor $b[$i];\n  }\n  return implode('', $c);\n}\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc88rvv9.php:20\n\
    Stack trace:\n#0 /tmp/tmpqc88rvv9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqc88rvv9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $c\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $c .= $a[$i] == $b[$i] ?\
    \ '0' : '1';\n  }\n  return $c;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n   $result\
    \ = '';\n   for ($i = 0; $i < strlen($a); $i++) {\n       $result .= (((int)$a[$i])^((int)$b[$i]))\
    \ ? '1' : '0';\n   }\n   return $result;\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = (string) $a;\n  $b = (string) $b;\n  $result = '';\n  for ($i = 0; $i < max(strlen($a),\
    \ strlen($b)); $i++) {\n    $result .= ($a[$i] xor $b[$i]) ? '1' : '0';\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ array_reduce(str_split($a), function($acc, $val) use ($b) {\n    $i = $acc[1];\n\
    \    $acc[0] .= ($val != $b[$i]) ? '1' : '0';\n    $acc[1] += 1;\n    return $acc;\n\
    \  }, ['', 0])[0];\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $b1\
    \ = decbin(hexdec($a));\n    $b2 = decbin(hexdec($b));\n    $b1 = str_pad($b1,\
    \ 8, \"0\", STR_PAD_LEFT);\n    $b2 = str_pad($b2, 8, \"0\", STR_PAD_LEFT);\n\
    \    echo \"$b1\\n\";\n    echo \"$b2\\n\";\n    $xor = \"\";\n    for ($i = 0;\
    \ $i < strlen($b1); $i++) {\n        $xor .= $b1[$i] == $b2[$i] ? \"0\" : \"1\"\
    ;\n    }\n    return dechex(bindec($xor));\n}\necho \"$a ^ $b = \".string_xor($a,\
    \ $b).\"\\n\";\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "00000000\n00000000\n ^  = 0\n100010001000000000000\n100000001000000010000\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddgck5rb.php:25\nStack\
    \ trace:\n#0 /tmp/tmpddgck5rb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpddgck5rb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $aBinStr\
    \ = decbin(hexdec($a));\n    $bBinStr = decbin(hexdec($b));\n    return dechex(bindec($aBinStr\
    \ ^ $bBinStr));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu58jza0l.php:16\n\
    Stack trace:\n#0 /tmp/tmpu58jza0l.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpu58jza0l.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $length = max(strlen($a), strlen($b));\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $a_bit = strlen($a) - $i - 1 >= 0 ? $a[strlen($a) - $i - 1] : '0';\n\
    \    $b_bit = strlen($b) - $i - 1 >= 0 ? $b[strlen($b) - $i - 1] : '0';\n    $result\
    \ = (string)((int)$a_bit ^ (int)$b_bit) . $result;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $length = strlen($a);\n  for ($i = 0; $i < $length; $i++) {\n    $result\
    \ .= (intval($a[$i]) ^ intval($b[$i])) ? '1' : '0';\n  }\n  return $result;\n\
    }\n\nprint string_xor('110', '010');\nprint string_xor('10', '10');\nprint string_xor('1010',\
    \ '1010');\nprint string_xor('1010', '111');\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1000000000100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $length\
    \ = max(strlen($a), strlen($b));\n  $res = '';\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h8p264y.php:20\n\
    Stack trace:\n#0 /tmp/tmp4h8p264y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4h8p264y.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ TODO\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwh0t3ig.php:14\n\
    Stack trace:\n#0 /tmp/tmppwh0t3ig.php(19): test()\n#1 {main}\n  thrown in /tmp/tmppwh0t3ig.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ array_reduce(str_split($a), function($res, $val) use ($b) {\n    return $res\
    \ .= $val ^ $b[$res->key()];\n  }, '');\n}\nfunction candidate(...$args) {\n \
    \   return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function key() on string\
    \ in /tmp/tmp76fypqs_.php:8\nStack trace:\n#0 [internal function]: {closure}('',\
    \ '1')\n#1 /tmp/tmp76fypqs_.php(9): array_reduce(Array, Object(Closure), '')\n\
    #2 /tmp/tmp76fypqs_.php(12): string_xor('111000', '101010')\n#3 /tmp/tmp76fypqs_.php(16):\
    \ candidate('111000', '101010')\n#4 /tmp/tmp76fypqs_.php(21): test()\n#5 {main}\n\
    \  thrown in /tmp/tmp76fypqs_.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i]\
    \ == $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42rmmh2u.php:19\n\
    Stack trace:\n#0 /tmp/tmp42rmmh2u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp42rmmh2u.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $len\
    \ = strlen($a);\n  $r = '';\n  for ($i = 0; $i < $len; $i++) {\n    $r .= $a[$i]\
    \ ^ $b[$i];\n  }\n  return $r;\n}\n\nprint string_xor('010', '110') . \"\\n\"\
    ;\nprint string_xor('1010101', '0101010') . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\x01\0\0\n\x01\x01\x01\x01\x01\x01\x01\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_cbdi4z5.php:23\nStack trace:\n#0 /tmp/tmp_cbdi4z5.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_cbdi4z5.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ \"\";\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6vr7q5h.php:14\n\
    Stack trace:\n#0 /tmp/tmpx6vr7q5h.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpx6vr7q5h.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $r\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $r .= ($a[$i] ^ $b[$i])\
    \ ? '1' : '0';\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzyya95t.php:19\n\
    Stack trace:\n#0 /tmp/tmpfzyya95t.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfzyya95t.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $str\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $str .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $str;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpha35wl.php:19\n\
    Stack trace:\n#0 /tmp/tmpdpha35wl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdpha35wl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$xor\
    \ = array();\n\tfor ($i = 0; $i < strlen($a); $i++) {\n\t\tif ($a[$i] != $b[$i])\
    \ {\n\t\t\t$xor[] = '1';\n\t\t} else {\n\t\t\t$xor[] = '0';\n\t\t}\n\t}\n\treturn\
    \ implode('', $xor);\n}\necho string_xor('010', '110');\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $an\
    \ = strlen($a);\n    $bn = strlen($b);\n    if ($an > $bn) {\n        $b = str_pad($b,\
    \ $an, '0', STR_PAD_LEFT);\n    } elseif ($bn > $an) {\n        $a = str_pad($a,\
    \ $bn, '0', STR_PAD_LEFT);\n    }\n    $output = \"\";\n    for ($i = 0; $i <\
    \ strlen($a); $i++) {\n        $output .= ($a[$i] == $b[$i]) ? '0' : '1';\n  \
    \  }\n    return $output;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $res\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $res .= $a[$i] ^\
    \ $b[$i];\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp589z9c.php:18\n\
    Stack trace:\n#0 /tmp/tmpwp589z9c.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwp589z9c.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $len\
    \ = max(strlen($a), strlen($b));\n  $binA = str_pad($a, $len, \"0\", STR_PAD_LEFT);\n\
    \  $binB = str_pad($b, $len, \"0\", STR_PAD_LEFT);\n  $result = \"\";\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $result .= $binA[$i] ^ $binB[$i];\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmput37peiz.php:22\n\
    Stack trace:\n#0 /tmp/tmput37peiz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmput37peiz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n   return\
    \ substr(trim(base_convert(base_convert($a, 2, 10) ^ base_convert($b, 2, 10),\
    \ 10, 2)), -strlen($a));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8ytcbw9.php:14\n\
    Stack trace:\n#0 /tmp/tmpx8ytcbw9.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpx8ytcbw9.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa5zm266.php:14\n\
    Stack trace:\n#0 /tmp/tmpsa5zm266.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpsa5zm266.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $c\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= $a[$i] == $b[$i]\
    \ ? '0' : '1';\n    }\n    return $c;\n}\n\necho string_xor('010', '110') . \"\
    \\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\")\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $len\
    \ = max(strlen($a), strlen($b));\n    $a = str_pad($a, $len, '0', STR_PAD_LEFT);\n\
    \    $b = str_pad($b, $len, '0', STR_PAD_LEFT);\n    $c = '';\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $c .= ($a[$i] != $b[$i]) ? '1' : '0';\n    }\n \
    \   return $c;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\t$xor\
    \ = strlen($a) > strlen($b) ? $a : $b;\n\t$and = strlen($a) < strlen($b) ? $a\
    \ : $b;\n\t$result = '';\n\t\n\tfor ($i = 0; $i < strlen($xor); $i++) {\n\t\t\
    $r = isset($and[$i]) ? $xor[$i] xor $and[$i] : $xor[$i];\n\t\t$result .= $r;\n\
    \t}\n\t\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmupqw7d.php:23\n\
    Stack trace:\n#0 /tmp/tmpvmupqw7d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvmupqw7d.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $aBin\
    \ = str_split($a);\n  $bBin = str_split($b);\n  $len = max(strlen($a), strlen($b));\n\
    \  $result = '';\n  for ($i = 0; $i < $len; $i++) {\n    $result .= $aBin[$i]\
    \ ^ $bBin[$i];\n  }\n  return $result;\n}\n\necho string_xor('010', '110') . \"\
    \\n\";\necho string_xor('1010', '1011') . \"\\n\";\necho string_xor('1010', '11')\
    \ . \"\\n\";\necho string_xor('0', '1') . \"\\n\";\necho string_xor('1', '0')\
    \ . \"\\n\";\necho string_xor('1', '1') . \"\\n\";\necho string_xor('0', '0')\
    \ . \"\\n\";\necho string_xor('00', '00') . \"\\n\";\necho string_xor('01', '01')\
    \ . \"\\n\";\necho string_xor('01', '00') . \"\\n\";\necho string_xor('10', '00')\
    \ . \"\\n\";\necho string_xor('1', '0') . \"\\n\";\necho string_xor('0', '1')\
    \ . \"\\n\";\necho string_xor('10', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor('01', '10') . \"\\n\";\necho string_xor('01', '10')\
    \ . \"\\n\";\necho string_xor\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplvcfxz83.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $xor\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $xor .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $xor;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdr1sg_3q.php:19\n\
    Stack trace:\n#0 /tmp/tmpdr1sg_3q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdr1sg_3q.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ array_reduce(range(0, strlen($a) - 1), function($r, $i) use ($a, $b) {\n   \
    \     return $r . ($a[$i] ^ $b[$i]);\n    }, '');\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2usmzou.php:16\n\
    Stack trace:\n#0 /tmp/tmpp2usmzou.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpp2usmzou.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    //\
    \ Your code here\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstyzuow8.php:14\n\
    Stack trace:\n#0 /tmp/tmpstyzuow8.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpstyzuow8.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $output\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $temp = (((int)$a[$i])\
    \ ^ ((int)$b[$i]));\n        $output .= $temp;\n    }\n    return $output;\n}\n\
    echo(string_xor('010', '110'));\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n}\necho\
    \ string_xor('010', '110');\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd647dz0q.php:16\n\
    Stack trace:\n#0 /tmp/tmpd647dz0q.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpd647dz0q.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $c\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $c .= $a[$i] ^ $b[$i];\n\
    \    }\n    return $c;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97f30nt8.php:19\n\
    Stack trace:\n#0 /tmp/tmp97f30nt8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp97f30nt8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  return\
    \ sprintf(\"%0\".(max(strlen($a), strlen($b))).\"b\", $a ^ $b);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48b3xpu5.php:15\n\
    Stack trace:\n#0 /tmp/tmp48b3xpu5.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp48b3xpu5.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $aBin\
    \ = str_split($a);\n  $bBin = str_split($b);\n  $res = '';\n  for ($i = 0; $i\
    \ < count($aBin); $i++) {\n    $res .= $aBin[$i] ^ $bBin[$i];\n  }\n  return $res;\n\
    }\n\necho string_xor('010', '110');\necho '<br>';\necho string_xor('10', '11');\n\
    echo '<br>';\necho string_xor('10', '10');\necho '<br>';\necho string_xor('101',\
    \ '111');\necho '<br>';\necho string_xor('101', '101');\necho '<br>';\necho string_xor('101',\
    \ '100');\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\x01\0\0<br>\0\x01<br>\0\0<br>\0\x01\0<br>\0\0\0<br>\0\0\x01\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7aa1c4wg.php:32\nStack trace:\n\
    #0 /tmp/tmp7aa1c4wg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7aa1c4wg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = array();\n  for ($i = 0;\
    \ $i < count($a); $i++) {\n    $result[] = $a[$i] == $b[$i] ? '0' : '1';\n  }\n\
    \  return implode($result);\n}\n\n/* Test cases\nassert(string_xor('010', '110')\
    \ == '100');\nassert(string_xor('000', '101') == '101');\nassert(string_xor('111',\
    \ '111') == '000');\nassert(string_xor('001', '111') == '110');\n*/\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $res\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $a_num = $a[$i];\n\
    \        $b_num = $b[$i];\n        $res .= $a_num ^ $b_num;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgm6q1pq.php:21\n\
    Stack trace:\n#0 /tmp/tmpmgm6q1pq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmgm6q1pq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\n\
    \  // Your code here\n  //\n  $res = \"\";\n  for($i = 0; $i < strlen($a); $i++){\n\
    \    if($a[$i] == $b[$i]){\n      $res .= \"0\";\n    }else{\n      $res .= \"\
    1\";\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n\treturn\
    \ array_reduce(\n\t\tarray_map(\n\t\t\tfunction($n, $m) {\n\t\t\t\treturn $n ^\
    \ $m;\n\t\t\t}, \n\t\t\tstr_split($a), \n\t\t\tstr_split($b)\n\t\t),\n\t\tfunction($c,\
    \ $n) {\n\t\t\treturn $c . $n;\n\t\t},\n\t\t''\n\t);\n}\necho string_xor('010',\
    \ '110');\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\x01\0\0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vqswfh5.php:29\n\
    Stack trace:\n#0 /tmp/tmp5vqswfh5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5vqswfh5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $xor = [];\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $xor[] = $a[$i] ^ $b[$i];\n  }\n  return implode('', $xor);\n}\n\
    \necho string_xor('010', '110');\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\x01\0\0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplin_xwaq.php:22\n\
    Stack trace:\n#0 /tmp/tmplin_xwaq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplin_xwaq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $aChar = $a[$i];\n    $bChar\
    \ = $b[$i];\n    $result .= ($aChar == $bChar) ? 0 : 1;\n  }\n  return $result;\n\
    }\n\nprint_r(string_xor('010', '110'));\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '100'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    return\
    \ implode(array_map(function($x, $y) {\n        return $x ^ $y;\n    }, str_split($a),\
    \ str_split($b)));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d2gjgz0.php:16\n\
    Stack trace:\n#0 /tmp/tmp_d2gjgz0.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp_d2gjgz0.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $length = strlen($a);\n  for ($i = 0; $i < $length; $i++) {\n    $result\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kzflkb7.php:20\n\
    Stack trace:\n#0 /tmp/tmp2kzflkb7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2kzflkb7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  //\
    \ Your code here\n  \n}\n```\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_bvx2ox.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a_binary\
    \ = decbin(octdec($a));\n    $b_binary = decbin(octdec($b));\n    $result = '';\n\
    \    for ($i = 0; $i < strlen($a_binary); $i++) {\n        $result .= $a_binary[$i]\
    \ ^ $b_binary[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1hbcfu6.php:21\n\
    Stack trace:\n#0 /tmp/tmpn1hbcfu6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn1hbcfu6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $o\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $o .= ($a[$i] == $b[$i])\
    \ ? '0' : '1';\n  }\n  return $o;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
