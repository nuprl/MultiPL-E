name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)\
  \  == 0\n// digits(235) == 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $num = $n;\n  $sum = 1;\n  $mod = 10;\n  while ($num != 0) {\n  \
    \  $digit = $num % $mod;\n    if ($digit % 2 != 0) {\n      $sum *= $digit;\n\
    \    }\n    $num = (int)($num / $mod);\n  }\n  return $sum;\n}\n\nprint_r(digits(1));\n\
    print_r(digits(4));\nprint_r(digits(235));", "  $n = abs($n);\n  $odd = 1;\n \
    \ while ($n > 0) {\n    $d = $n % 10;\n    if ($d % 2) $odd *= $d;\n    $n = floor($n\
    \ / 10);\n  }\n  return $odd;\n}\n", "    if(strlen($n) == 1) {\n        return\
    \ ($n & 1) ? $n : 0;\n    } else {\n        return ($n%10 & 1) ? (($n%10) * digits(floor($n/10)))\
    \ : digits(floor($n/10));\n    }\n}", "    $str = strval($n);\n    $product =\
    \ 1;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] % 2 !==\
    \ 0) {\n            $product *= $str[$i];\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "  $new_string = '';\n  $total = 1;\n  foreach (str_split($n) as $digit)\
    \ {\n    if ($digit % 2 !== 0) {\n      $new_string .= $digit;\n    }\n  }\n \
    \ if (strlen($new_string) === 0) {\n    return 0;\n  }\n  foreach (str_split($new_string)\
    \ as $digit) {\n    $total *= $digit;\n  }\n  return $total;\n}\necho digits(1)\
    \  . PHP_EOL;\necho digits(4)  . PHP_EOL;\necho digits(235) . PHP_EOL;", "  if\
    \ ($n < 10) {\n    return ($n % 2 === 0) ? 0 : $n;\n  }\n  return ($n % 10 % 2\
    \ === 0) ? digits($n / 10) : ($n % 10) * digits($n / 10);\n}\necho digits(1) .\
    \ PHP_EOL; //  == 1\necho digits(4) . PHP_EOL; //  == 0\necho digits(235) . PHP_EOL;\
    \ // == 15", "    $arr = array_map('intval', str_split($n));\n    $newArr = [];\n\
    \    foreach ($arr as $elem) {\n        if ($elem % 2 == 1) {\n            $newArr[]\
    \ = $elem;\n        }\n    }\n    return array_product($newArr);\n}", "  $sum\
    \ = 1;\n  while($n != 0) {\n    $tmp = $n % 10;\n    if($tmp % 2 != 0) {\n   \
    \   $sum *= $tmp;\n    }\n    $n = intval($n / 10);\n  }\n  return $sum;\n}\n",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 != 0) {\n            $result *= $digit;\n        }\n        $n = floor($n\
    \ / 10);\n    }\n    return $result;\n}\n", "  $answer = 1;\n  $tmp = $n;\n  while\
    \ ($tmp > 0) {\n    $last = $tmp % 10;\n    if ($last % 2 == 1) {\n      $answer\
    \ *= $last;\n    }\n    $tmp = ($tmp - $last) / 10;\n  }\n  return $answer;\n\
    }\n\necho digits(1) . \" == 1\\n\";\necho digits(4) . \" == 0\\n\";\necho digits(235)\
    \ . \" == 15\\n\";\necho digits(255) . \" == 125\\n\";", "    $digits = str_split($n);\n\
    \    $result = 1;\n    foreach ($digits as $d) {\n        if ($d % 2 != 0) {\n\
    \            $result *= $d;\n        }\n    }\n    return $result;\n}\n\necho\
    \ digits(1);\necho '<br>';\necho digits(4);\necho '<br>';\necho digits(235);\n\
    echo '<br>';\necho digits(636);\necho '<br>';\necho digits(1357);\necho '<br>';\n\
    echo digits(2468);\necho '<br>';\necho digits(4680);\necho '<br>';\necho digits(8865);\n\
    echo '<br>';\necho digits(9309);\necho '<br>';\necho digits(1234);\necho '<br>';\n\
    echo digits(2345);\necho '<br>';\necho digits(3456);\necho '<br>';\necho digits(4567);\n\
    echo '<br>';\necho digits(5678);\necho '<br>';\necho digits(6789);\necho '<br>';\n\
    echo digits(7890);\necho '<br>';\necho digits(56780);\necho '<br>';\necho digits(67892);\n\
    echo '<br>';\necho digits(78903);\necho '<br>';\necho digits(89012);\necho '<br>';\n\
    echo digits(90123);\necho '<br>';\necho digits(01234);\necho '<br>';\necho digits(12345);\n\
    echo '<br>';\necho digits(23456);\necho '<br>';\necho digits(34567);\necho '<br>';\n\
    echo digits(45678);\necho '<br>';\necho digits(56789);\necho '<br>';\necho digits(67890);\n\
    echo '<br>';\necho digits(567890);\necho '<br>';\necho digits(678901);\necho '<br>';\n\
    echo digits(789012);\necho '<br>';\necho digits(890123);\necho", "  $n = str_split($n);\n\
    \  $total = 1;\n  foreach ($n as $number) {\n    if ($number % 2 !== 0) {\n  \
    \    $total *= $number;\n    }\n  }\n  return $total;\n}", "  $result = 0;\n \
    \ for($i = 1; $i <= $n; $i += 2) {\n    $result += $i;\n  }\n  return $result;\n\
    }\n", "  $nums = str_split($n);\n  $sum = 1;\n  foreach ($nums as $num) {\n  \
    \  if ($num % 2 !== 0) {\n      $sum *= $num;\n    }\n  }\n  return $sum;\n}",
  "  return array_product(array_filter(str_split($n), function($n) {\n    return $n\
    \ & 1;\n  }));\n}\n", "  $result = 0;\n  $nArray = str_split($n);\n  foreach ($nArray\
    \ as $int) {\n    if($int % 2 === 1) {\n      $result *= $int;\n    }\n  }\n \
    \ return $result;\n}\n\necho digits(235);\n ?>", "  $n = (string)$n;\n  $sum =\
    \ 1;\n  for ($i = 0; $i < strlen($n); $i++) {\n    if ($n[$i] % 2 === 1) {\n \
    \     $sum *= $n[$i];\n    }\n  }\n  return $sum;\n}", "    return array_product(array_filter(str_split($n),\
    \ function($v) {\n        return ($v % 2 != 0);\n    }));\n}", "  $result = 1;\n\
    \  foreach (str_split($n) as $value) {\n    if ($value % 2 !== 0) {\n      $result\
    \ *= $value;\n    }\n  }\n  return $result;\n}", "  $arr = str_split($n);\n  $product\
    \ = 1;\n  foreach ($arr as $a) {\n    if ($a % 2 == 1) {\n      $product *= $a;\n\
    \    }\n  }\n  return $product;\n}", "  $product = 1;\n  $arr = str_split($n);\n\
    \  foreach ($arr as $num) {\n    if ($num % 2 === 1) {\n      $product *= $num;\n\
    \    }\n  }\n  return $product === 1 ? 0 : $product;\n}\n\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;\necho digits(37) . PHP_EOL;\n\
    echo digits(8) . PHP_EOL;", "    $str = $n . '';\n    $arr = [];\n    $result\
    \ = 1;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] % 2\
    \ == 1) {\n            $arr[] = $str[$i];\n        }\n    }\n    if (empty($arr))\
    \ {\n        return 0;\n    }\n    foreach ($arr as $val) {\n        $result *=\
    \ $val;\n    }\n    return $result;\n}", "  $digits = str_split($n);\n  $odd =\
    \ 1;\n  foreach ($digits as $digit) {\n    if ($digit % 2 !== 0) {\n      $odd\
    \ *= $digit;\n    }\n  }\n  return $odd;\n}", "    $arr = str_split($n);\n   \
    \ $odd = function($item) {\n        return $item % 2 != 0;\n    };\n    $odds\
    \ = array_filter($arr, $odd);\n    $total = array_product($odds);\n    return\
    \ $total;\n}", "  $digits = str_split($n);\n  $odds = array_reduce($digits, function($carry,\
    \ $item) {\n    if ($item % 2 !== 0) {\n      $carry *= $item;\n    }\n    return\
    \ $carry;\n  }, 1);\n  return $odds === 1 ? 0 : $odds;\n}\n\necho digits(235);\n\
    echo \"\\n\";", "  $digits = str_split($n);\n  $result = 1;\n  foreach ($digits\
    \ as $digit) {\n    if ($digit % 2 !== 0) {\n      $result *= $digit;\n    }\n\
    \  }\n  return $result;\n}", "  $n_str = strval($n);\n  $count = strlen($n_str);\n\
    \  $result = 1;\n  for ($i = 0; $i < $count; $i++) {\n    $digit = intval($n_str[$i]);\n\
    \    if ($digit % 2 == 1) {\n      $result *= $digit;\n    }\n  }\n  return $result;\n\
    }", "    return array_product(array_filter(str_split($n), function($val) {\n \
    \     return $val % 2 !== 0;\n    }));\n}", "  $sum = 1;\n  for ($i = 0; $i <\
    \ strlen($n); $i++) {\n    if ($n[$i] % 2 === 1) {\n      $sum *= $n[$i];\n  \
    \  }\n  }\n  return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;\n", "  $product = 1;\n  while ($n >= 1) {\n    $digit\
    \ = $n % 10;\n    if ($digit % 2 != 0) {\n      $product *= $digit;\n    }\n \
    \   $n /= 10;\n  }\n  return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "\t$arr = str_split($n);\n\t$result\
    \ = 1;\n\tforeach ($arr as $value) {\n\t\tif($value % 2 != 0) {\n\t\t\t$result\
    \ *= $value;\n\t\t}\n\t}\n\treturn $result;\n}\n$n = 235;\necho digits($n);",
  "  $arr = array_map('intval', str_split($n));\n  $odd = array_filter($arr, function($v)\
    \ { return ($v % 2 == 1); });\n  return (count($odd) == 0) ? 0 : array_product($odd);\n\
    }\n", "  $product = 1;\n  $numbers = str_split($n);\n  foreach ($numbers as $number)\
    \ {\n    if ($number % 2 != 0) {\n      $product *= $number;\n    }\n  }\n  return\
    \ $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "  $temp = 0;\n  $temp1 = 1;\n  while($n!=0){\n    $temp = $n%10;\n\
    \    if($temp%2!=0){\n      $temp1 = $temp1*$temp;\n    }\n    $n = intval($n/10);\n\
    \  }\n  return $temp1;\n}\necho \"digits(1)  == 1 <br>\";\necho digits(1)  ==\
    \ 1 ? \"true<br>\" : \"false<br>\";\necho \"digits(4)  == 0 <br>\";\necho digits(4)\
    \  == 0 ? \"true<br>\" : \"false<br>\";\necho \"digits(235) == 15 <br>\";\necho\
    \ digits(235) == 15 ? \"true<br>\" : \"false<br>\";", "  $result = 1;\n  $digits\
    \ = str_split($n);\n  foreach ($digits as $digit) {\n    if ($digit % 2 === 1)\
    \ {\n      $result *= $digit;\n    }\n  }\n  return $result;\n}\n", "    $product\
    \ = 1;\n    $arr = str_split($n);\n    foreach ($arr as $value) {\n        if\
    \ ($value % 2 === 1) {\n            $product *= $value;\n        }\n    }\n  \
    \  return $product;\n}\n\necho digits(2), PHP_EOL;\necho digits(235), PHP_EOL;\n\
    echo digits(59), PHP_EOL;\necho digits(6), PHP_EOL;\necho digits(8), PHP_EOL;\n\
    echo digits(0), PHP_EOL;\necho digits(9), PHP_EOL;\necho digits(48), PHP_EOL;\n\
    echo digits(96), PHP_EOL;\necho digits(36), PHP_EOL;\necho digits(7), PHP_EOL;\n\
    echo digits(1), PHP_EOL;\necho digits(4), PHP_EOL;\necho digits(7), PHP_EOL;\n\
    echo digits(2), PHP_EOL;\necho digits(8), PHP_EOL;\necho digits(6), PHP_EOL;\n\
    echo digits(0), PHP_EOL;\necho digits(9), PHP_EOL;\necho digits(35), PHP_EOL;\n\
    echo digits(3), PHP_EOL;\necho digits(1), PHP_EOL;\necho digits(4), PHP_EOL;\n\
    echo digits(5), PHP_EOL;\necho digits(2), PHP_EOL;\necho digits(8), PHP_EOL;\n\
    echo digits(6), PHP_EOL;\necho digits(0), PHP_EOL;\necho digits(9), PHP_EOL;\n\
    echo digits(3), PHP_EOL;\necho digits(5), PHP_EOL;\necho digits(3), PHP_EOL;\n\
    echo digits(1), PHP_EOL;\necho digits(4), PHP_EOL;\necho digits(5), PHP_EOL;\n\
    echo digits(2), PHP_EOL;\necho digits(8), PHP_EOL;\necho digits(6), PHP_EOL;\n\
    echo digits(0), PHP_EOL;\necho digits(9), PHP_EOL;\necho digits(3), PHP_", " \
    \   $odd = array_filter(str_split($n), function($i) { return $i % 2 !== 0; });\n\
    \    return array_product($odd) == 0 ? 0 : array_product($odd);\n}\n\nvar_dump(digits(1));\n\
    var_dump(digits(4));\nvar_dump(digits(235));", "  $prod = 1;\n  for ($i = 0; $i\
    \ < strlen($n); $i++) {\n    if ($n[$i] % 2 == 1) {\n      $prod *= $n[$i];\n\
    \    }\n  }\n  return $prod;\n}", "    $new = [];\n    $res = 1;\n    $stringN\
    \ = strval($n);\n    $split = str_split($stringN);\n    foreach ($split as $num)\
    \ {\n        if ($num % 2 == 1) {\n            $new[] = $num;\n        }\n   \
    \ }\n    foreach ($new as $num) {\n        $res *= $num;\n    }\n    return $res;\n\
    }\n\necho digits(235);", "   $array = str_split($n);\n   $total = 1;\n   foreach\
    \ ($array as $num) {\n      if ($num % 2 != 0) {\n         $total *= $num;\n \
    \     }\n   }\n   return $total == 1 ? 0 : $total;\n}\n\necho digits(2352);",
  "    $num = $n;\n    $result = 1;\n    $listNum = [];\n    $i = 0;\n    while ($num\
    \ != 0) {\n        $num = (int)($num / 10);\n        $listNum[$i] = $num;\n  \
    \      $i++;\n    }\n    $lastIndex = count($listNum) - 1;\n    $num = $n;\n \
    \   for ($i = $lastIndex; $i >= 0; $i--) {\n        $result = $result * ($num\
    \ % 10);\n        $num = $listNum[$i];\n    }\n    return $result;\n}\n\necho\
    \ digits(235);", "  $n = str_split($n);\n  $x = 1;\n  foreach ($n as $value) {\n\
    \    if ($value % 2 != 0) {\n      $x *= $value;\n    }\n  }\n  return $x == 1\
    \ ? 0 : $x;\n}", "    $result = 1;\n    foreach (str_split($n) as $digit) {\n\
    \        if ($digit % 2 !== 0) {\n            $result *= $digit;\n        }\n\
    \    }\n    return $result;\n}\n", "    $product = 1;\n    $nString = strval($n);\n\
    \    for ($i = 0; $i < strlen($nString); $i++) {\n        if ($nString[$i] % 2\
    \ !== 0) {\n            $product *= $nString[$i];\n        }\n    }\n    return\
    \ $product;\n}\necho digits(235) . \"\\n\";", "  $total = 1;\n  $n = str_split($n);\n\
    \  foreach ($n as $number) {\n    if ($number % 2 != 0) {\n      $total *= $number;\n\
    \    }\n  }\n  return $total;\n}\necho digits(1) . \"<br>\";\necho digits(4) .\
    \ \"<br>\";\necho digits(235) . \"<br>\";\n", "  $product = 1;\n  foreach (str_split($n)\
    \ as $n) {\n    if ($n % 2 != 0) {\n      $product *= $n;\n    }\n  }\n  return\
    \ $product;\n}", "    $number = str_split($n);\n    $prod = 1;\n    foreach ($number\
    \ as $num) {\n        if ($num % 2 == 1) {\n            $prod *= $num;\n     \
    \   }\n    }\n    return $prod;\n}", "  if($n < 0) {\n    $n = abs($n);\n  }\n\
    \  $n = (string)$n;\n  $arr = str_split($n);\n  $res = 1;\n  foreach($arr as $val)\
    \ {\n    if(($val % 2) !== 0) {\n      $res *= $val;\n    }\n  }\n  return $res;\n\
    }\n", "  $arr = str_split($n);\n  $result = 1;\n  foreach ($arr as $digit) {\n\
    \    if ($digit % 2 === 1) {\n      $result *= $digit;\n    }\n  }\n  return $result;\n\
    }", "    $str = strval($n);\n    $odds = array_filter(str_split($str), function($element)\
    \ {\n        return $element % 2 == 1;\n    });\n    if (count($odds) > 0) {\n\
    \        return array_product($odds);\n    } else {\n        return 0;\n    }\n\
    }\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) .\
    \ \"\\n\";\necho digits(19) . \"\\n\";\necho digits(18) . \"\\n\";\necho digits(24)\
    \ . \"\\n\";\necho digits(31) . \"\\n\";\necho digits(30) . \"\\n\";", "    $k\
    \ = 1;\n    while ($n > 0) {\n        $m = $n % 10;\n        if ($m % 2 != 0)\
    \ {\n            $k *= $m;\n        }\n        $n = floor($n / 10);\n    }\n \
    \   return $k;\n}", "  $product = 1;\n  for ($i = 0; $i < strlen($n); $i++) {\n\
    \    if ($n[$i] % 2 == 1) {\n      $product *= $n[$i];\n    }\n  }\n  return $product;\n\
    }\n", "  $sum = 0;\n  $temp = $n;\n  while($temp > 0) {\n    $lastDigit = $temp\
    \ % 10;\n    if ($lastDigit % 2 == 1) {\n      $sum *= $lastDigit;\n    }\n  \
    \  $temp = ($temp - $lastDigit) / 10;\n  }\n  return $sum;\n}\necho digits(235).\"\
    \\n\";", "  $newArray = [];\n  $arr = str_split($n);\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] % 2 != 0) {\n      array_push($newArray, $arr[$i]);\n\
    \    }\n  }\n  $sum = 0;\n  if (count($newArray) > 0) {\n    $sum = array_product($newArray);\n\
    \  }\n  return $sum;\n}\n\necho digits(235);\n", "  $output = 1;\n  $digits =\
    \ str_split($n);\n  foreach ($digits as $digit) {\n    if ($digit % 2 == 1) {\n\
    \      $output *= $digit;\n    }\n  }\n  return $output;\n}\n", "    $count =\
    \ 0;\n    $newN = $n;\n    $result = 1;\n    while ($newN) {\n        $number\
    \ = $newN % 10;\n        if ($number % 2 !== 0) {\n            $result *= $number;\n\
    \        }\n        $newN = (int)($newN / 10);\n    }\n    return $result;\n}\n\
    \necho digits(235);", "    $digits = str_split($n);\n    $product = 1;\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product == 1 ? 0 : $product;\n}",
  "    $digits = [];\n    $number = str_split($n);\n    $total = 1;\n    foreach ($number\
    \ as $digit) {\n        if ($digit % 2 !== 0) {\n            $digits[] = $digit;\n\
    \        }\n    }\n    foreach ($digits as $digit) {\n        $total *= $digit;\n\
    \    }\n    return $total;\n}\n", "    $n = (string)$n;\n    $digits = str_split($n);\n\
    \    $total = 1;\n    for ($i = 0; $i < count($digits); $i++) {\n        if ($digits[$i]\
    \ % 2 !== 0) {\n            $total *= $digits[$i];\n        }\n    }\n    return\
    \ $total;\n}\n", "    $sum = 1;\n    $tmp = \"\";\n    while ($n != 0) {\n   \
    \     $tmp = $n % 10;\n        if ($tmp % 2 != 0) {\n            $sum *= $tmp;\n\
    \        }\n        $n = (int)($n / 10);\n    }\n    return $sum;\n}", "  $sum\
    \ = 0;\n  for ($i = 0; $i < strlen((string)$n); $i++) {\n    if ((int) substr((string)$n,\
    \ $i, 1) % 2 != 0) {\n      $sum += (int) substr((string)$n, $i, 1);\n    }\n\
    \  }\n  return $sum;\n}\necho digits(235);\necho \"\\n\";\n", "  $string_n = (string)$n;\n\
    \  $sum = 1;\n  for ($i = 0; $i < strlen($string_n); $i++) {\n    if ($string_n[$i]\
    \ % 2 != 0) {\n      $sum *= $string_n[$i];\n    }\n  }\n  return $sum;\n}", " \
    \   $sum = 0;\n    while ($n != 0) {\n        $sum = ($n % 10) % 2 != 0 ? $sum\
    \ * ($n % 10) : $sum;\n        $n = (int)($n / 10);\n    }\n    return $sum;\n\
    }\necho digits(1); //1\necho digits(4); //0\necho digits(235); //15\n", "\t$ans\
    \ = 1;\n\twhile($n > 0) {\n\t\t$t = $n % 10;\n\t\tif($t % 2 == 1) $ans *= $t;\n\
    \t\t$n /= 10;\n\t}\n\treturn $ans;\n}\n", "  $n = str_split($n);\n  $answer =\
    \ 0;\n  foreach ($n as $value) {\n    if ($value % 2 == 1) {\n      $answer =\
    \ $answer * $value;\n    }\n  }\n  return $answer;\n}", "    $arr = str_split($n);\n\
    \    $result = 1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 != 0) {\n            $result *= $arr[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\necho digits(2345);", "  $odd = 1;\n  while ($n > 0) {\n    $d\
    \ = $n % 10;\n    if ($d % 2 !== 0) {\n      $odd *= $d;\n    }\n    $n = floor($n\
    \ / 10);\n  }\n  return $odd;\n}\n\necho digits(1) . '<br />';\necho digits(4)\
    \ . '<br />';\necho digits(235) . '<br />';", "  $str = strval($n);\n  $split_str\
    \ = str_split($str);\n  $total = 1;\n  foreach ($split_str as $n) {\n    if($n\
    \ % 2 != 0) {\n      $total *= $n;\n    }\n  }\n  return $total;\n}\n", "    $digits\
    \ = str_split($n);\n    $output = 1;\n    foreach ($digits as $digit) {\n    \
    \    if ($digit % 2 !== 0) {\n            $output *= $digit;\n        }\n    }\n\
    \    return $output;\n}\n\necho digits(1) . \"<br>\";\necho digits(4) . \"<br>\"\
    ;\necho digits(235) . \"<br>\";\necho digits(0) . \"<br>\";\necho digits(10) .\
    \ \"<br>\";\necho digits(111) . \"<br>\";\necho digits(1233) . \"<br>\";\necho\
    \ digits(22) . \"<br>\";", "    $result = 1;\n    while ($n > 0) {\n        $temp\
    \ = $n % 10;\n        if ($temp % 2 != 0)\n            $result *= $temp;\n   \
    \     $n /= 10;\n    }\n    return $result;\n}\n\n$n = 7254;\n\necho digits($n);",
  "    $tmp = $n;\n    $sum = 1;\n    while ($tmp > 0) {\n        $tmp2 = $tmp % 10;\n\
    \        if ($tmp2 % 2 != 0) {\n            $sum *= $tmp2;\n        }\n      \
    \  $tmp = floor($tmp / 10);\n    }\n    return $sum;\n}\n", "  $product = 1;\n\
    \  while ($n != 0) {\n    $digit = $n % 10;\n    if ($digit % 2 == 1) {\n    \
    \  $product *= $digit;\n    }\n    $n = intval($n / 10);\n  }\n  return $product;\n\
    }\n", "    $odd = 1;\n    $number = str_split($n);\n    foreach ($number as $digit)\
    \ {\n        if (($digit % 2) == 1) {\n            $odd *= $digit;\n        }\n\
    \    }\n    return $odd;\n}", "  $digits = str_split($n);\n  $odd_digits = array_filter($digits,\
    \ function($x) {\n    return $x % 2 !== 0;\n  });\n  return array_product($odd_digits);\n\
    }", "  $result = 1;\n  $n = (string)$n;\n  $a = str_split($n);\n  foreach ($a\
    \ as $number) {\n    if ($number % 2 != 0) {\n      $result *= $number;\n    }\n\
    \  }\n  return $result;\n}", "  $odd_num = 0;\n  while($n > 0) {\n    $num = $n\
    \ % 10;\n    if($num % 2 != 0) {\n      $odd_num = $odd_num * 10 + $num;\n   \
    \ }\n    $n = floor($n / 10);\n  }\n  $answer = 0;\n  while($odd_num > 0) {\n\
    \    $answer = $answer * 10 + $odd_num % 10;\n    $odd_num = floor($odd_num /\
    \ 10);\n  }\n  return $answer;\n}\n", "    $arr = str_split(strval($n));\n   \
    \ $product = 1;\n    foreach ($arr as $digit) {\n        if ($digit % 2 !== 0)\
    \ {\n            $product *= $digit;\n        }\n    }\n    return $product ===\
    \ 1 ? 0 : $product;\n}", "\tif ($n == 0) return 0;\n\t$product = 1;\n\twhile ($n\
    \ > 0) {\n\t\t$digit = $n % 10;\n\t\tif ($digit % 2 != 0) {\n\t\t\t$product *=\
    \ $digit;\n\t\t}\n\t\t$n = (int)($n / 10);\n\t}\n\treturn $product;\n}\necho digits(15);",
  "    $result = 0;\n    $mult = 1;\n    while ($n) {\n        $digit = $n % 10;\n\
    \        if ($digit % 2 !== 0) {\n            $mult *= $digit;\n        }\n  \
    \      $n = floor($n / 10);\n    }\n    return $mult;\n}\n", "    $arr = str_split($n);\n\
    \    $result = 1;\n    foreach ($arr as $el) {\n        if ($el % 2 !== 0) {\n\
    \            $result *= $el;\n        }\n    }\n    return $result;\n}\necho digits(1);\
    \ // 1\necho \"<br>\";\necho digits(4); // 0\necho \"<br>\";\necho digits(235);\
    \ // 15", "  return array_product(array_filter(str_split($n), function($n) { return\
    \ $n % 2; }));\n}\n", "    $numbers = str_split($n);\n    $odd = [];\n    foreach\
    \ ($numbers as $number) {\n        if ($number % 2 !== 0) {\n            $odd[]\
    \ = $number;\n        }\n    }\n    if (count($odd) > 0) {\n        return array_product($odd);\n\
    \    } else {\n        return 0;\n    }\n}", "\t$odd = array();\n\t$results =\
    \ 0;\n\t$n = (string)$n;\n\tfor ($i=0; $i < strlen($n); $i++) { \n\t\t$odd[$i]\
    \ = $n[$i];\n\t\tif ($odd[$i] % 2 != 0){\n\t\t\t$results *= $odd[$i];\n\t\t}\n\
    \t}\n\treturn $results;\n}", "    $product = 1;\n    while ($n > 0) {\n      \
    \  $next = $n % 10;\n        if ($next % 2 === 1) {\n            $product *= $next;\n\
    \        }\n        $n = floor($n / 10);\n    }\n    return $product;\n}", " \
    \ $odds = 1;\n  $digits = str_split($n);\n  for ($i = 0; $i < count($digits);\
    \ $i++) {\n    if ($digits[$i] % 2 == 1) {\n      $odds *= $digits[$i];\n    }\n\
    \  }\n  return $odds;\n}\n\necho digits(1)  == 1, \"\\n\";\necho digits(4)  ==\
    \ 0, \"\\n\";\necho digits(235) == 15, \"\\n\";\necho digits(236) == 0, \"\\n\"\
    ;\necho digits(145) == 45, \"\\n\";\necho digits(9)   == 9, \"\\n\";\necho digits(300)\
    \ == 0, \"\\n\";\necho digits
  "  $result = 1;\n  $n = (string)$n;\n  for ($i = 0; $i < strlen($n); $i++) {\n \
    \   if ($n[$i] % 2 == 1) {\n      $result *= $n[$i];\n    }\n  }\n  return $result;\n\
    }\n", "    $str = strval($n);\n    $odds = [];\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] % 2 !== 0) $odds[] = $str[$i];\n    }\n    return\
    \ empty($odds) ? 0 : array_product($odds);\n}", "\t$result = 1;\n\t$n = (string)$n;\n\
    \t\n\tfor ($i = 0; $i < strlen($n); $i++) {\n\t\tif ((int)$n[$i] % 2 != 0) {\n\
    \t\t\t$result *= (int)$n[$i];\n\t\t}\n\t}\n\treturn $result;\n}", "    $odds =\
    \ 1;\n    $number = str_split($n);\n    foreach ($number as $digit) {\n      \
    \  if ($digit % 2 !== 0) {\n            $odds *= $digit;\n        }\n    }\n \
    \   return $odds;\n}\n\necho digits(123);", "  $output = [];\n  while ($n >= 1)\
    \ {\n    $output[] = $n % 10;\n    $n = floor($n / 10);\n  }\n  $product = 1;\n\
    \  for ($i = 0; $i < count($output); $i++) {\n    if ($output[$i] % 2 !== 0) {\n\
    \      $product *= $output[$i];\n    }\n  }\n  return $product;\n}\n", "  $n_string\
    \ = strval($n);\n  $digits = str_split($n_string);\n  $sum = 1;\n  foreach ($digits\
    \ as $key => $value) {\n    if ($value % 2 != 0) {\n      $sum *= $value;\n  \
    \  }\n  }\n  return $sum;\n}", "    $chars = str_split($n);\n    $product = 1;\n\
    \    for ($i = 0; $i < count($chars); $i++) {\n        if ($chars[$i] % 2 !==\
    \ 0) {\n            $product *= $chars[$i];\n        }\n    }\n    return $product;\n\
    }", "  $n = (string)$n;\n  $result = [];\n  $result = array_map(function($item)\
    \ {\n    if($item % 2 == 1) {\n      return $item;\n    }\n  }, str_split($n));\n\
    \  $result = array_filter($result);\n  if(count($result) == 0) {\n    return 0;\n\
    \  }\n  return array_product($result);\n}", "  $str = (string)$n;\n  $res = 1;\n\
    \  for ($i = 0; $i < strlen($str); $i++) {\n    if ($str[$i] % 2 != 0) {\n   \
    \   $res *= (int)$str[$i];\n    }\n  }\n  return $res;\n}\n ?>", "    $result\
    \ = 1;\n    while ($n >= 1) {\n        $num = $n % 10;\n        if ($num % 2 !=\
    \ 0) {\n            $result *= $num;\n        }\n        $n = ($n - $num) / 10;\n\
    \    }\n    return $result;\n}\n$n = 4;\nvar_dump(digits($n));", "  $n = (string)$n;\n\
    \  $sum = 1;\n  for ($i = 0; $i < strlen($n); $i++) {\n    if ((int)$n[$i] % 2\
    \ !== 0) {\n      $sum *= (int)$n[$i];\n    }\n  }\n  return $sum;\n}\necho digits(1);",
  "  $numbers = str_split($n);\n  $oddNumbers = [];\n  foreach ($numbers as $value)\
    \ {\n    if (($value % 2) !== 0) {\n      array_push($oddNumbers, $value);\n \
    \   }\n  }\n  if (count($oddNumbers) > 0) {\n    return array_product($oddNumbers);\n\
    \  } else {\n    return 0;\n  }\n}\n\necho digits(4) . \"\\n\";\necho digits(235)\
    \ . \"\\n\";\necho digits(123) . \"\\n\";\n", "    $product = 1;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 === 1) {\n           \
    \ $product *= $n[$i];\n        }\n    }\n    return $product;\n}", "    $s = str_split($n);\n\
    \    $result = 1;\n    foreach ($s as $item) {\n        if ($item % 2 != 0) {\n\
    \            $result *= $item;\n        }\n    }\n    return $result;\n}", " \
    \   $sum = 0;\n    $temp = 0;\n    if($n < 10) {\n        if($n % 2 == 1) {\n\
    \            return $n;\n        }\n        else {\n            return 0;\n  \
    \      }\n    }\n    else {\n        $temp = $n % 10;\n        if($temp % 2 ==\
    \ 1) {\n            $sum = $temp;\n        }\n        $n = (int)($n / 10);\n \
    \       $sum *= digits($n);\n        return $sum;\n    }\n}\necho digits(235);",
  "    $arr = str_split($n);\n    $result = 1;\n    foreach ($arr as $item) {\n  \
    \      if ($item % 2 == 1) {\n            $result *= $item;\n        }\n    }\n\
    \    return $result;\n}\n", "    $str = (string)$n;\n    $prod = 1;\n    for ($i\
    \ = 0; $i < strlen($str); $i++) {\n        if ((int)$str[$i] % 2 == 1) {\n   \
    \         $prod *= (int)$str[$i];\n        }\n    }\n    return $prod;\n}\necho\
    \ digits(1);", "  $n = str_split($n);\n  $prod = 1;\n  foreach ($n as $num) {\n\
    \    if ($num % 2 != 0) {\n      $prod *= $num;\n    }\n  }\n  return $prod;\n\
    }\n\n$n = 498;\necho digits($n);\n ?>", "  $n = str_split( $n );\n  $newn = 0;\n\
    \  foreach($n as $x) {\n      if($x % 2 !== 0){\n          $newn = $newn * $x;\n\
    \      }\n  }\n  return $newn;\n}\n", "  $n = (string)$n;\n  $odd = 1;\n  $len\
    \ = strlen($n);\n  for ($i = 0; $i < $len; $i++) {\n    if ( $n[$i] % 2 == 0 )\
    \ {\n      $odd *= 1;\n    } else {\n      $odd *= $n[$i];\n    }\n  }\n  return\
    \ $odd;\n}", "\t// $arr = str_split($n);\n\t// $arr2 = [];\n\t// for ($i=0; $i\
    \ < count($arr); $i++) { \n\t// \tif($arr[$i] % 2 !== 0){\n\t// \t\t$arr2[] =\
    \ $arr[$i];\n\t// \t}\n\t// }\n\t// if(count($arr2) == 0){\n\t// \treturn 0;\n\
    \t// }\n\t// $result = array_product($arr2);\n\t// return $result;\n\t$arr = str_split($n);\n\
    \t$arr2 = [];\n\tforeach ($arr as $key => $value) {\n\t\tif($value % 2 !== 0){\n\
    \t\t\t$arr2[] = $value;\n\t\t}\n\t}\n\tif(count($arr2) == 0){\n\t\treturn 0;\n\
    \t}\n\t$result = array_product($arr2);\n\treturn $result;\n}\necho digits(1).\"\
    \\n\"; // 1\necho digits(4).\"\\n\"; // 0\necho digits(235).\"\\n\"; // 15\necho\
    \ digits(465932798213); // 245", "  $s = (string)$n;\n  $arr = str_split($s);\n\
    \  $odd = array_filter($arr, function($v) { return $v & 1; });\n  return array_product($odd);\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $digits = str_split($n);\n    $odd = 1;\n    foreach ($digits as\
    \ $digit) {\n        if ($digit % 2 != 0) {\n            $odd *= $digit;\n   \
    \     }\n    }\n    return $odd;\n}\n", "  $odds = array_filter(str_split($n),\
    \ function($digit) {\n    return $digit % 2 == 1;\n  });\n  if (!$odds) return\
    \ 0;\n  return array_product($odds);\n}\n\necho digits(12); // 0\necho digits(13);\
    \ // 1\necho digits(32); // 2\necho digits(149); // 1*5 = 5\necho digits(13843);\
    \ // 1*3*3 = 9\necho digits(444444444444); // 0", "    $digits = array_map('intval',\
    \ str_split($n));\n    return array_product(array_filter($digits, function($n)\
    \ { return $n % 2 == 1; }));\n}", "  $n = (string)$n;\n  $odd_digits = array_filter(str_split($n),\
    \ function($i) {\n    return $i & 1;\n  });\n  if(count($odd_digits) == 0) return\
    \ 0;\n  return array_reduce($odd_digits, function($carry, $item) {\n    return\
    \ $carry *= $item;\n  });\n}\n", "    $result = 1;\n    $n = abs($n);\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n    \
    \        $result *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n\
    \    return $result;\n}\n", "    $sum = 1;\n    while ($n > 0) {\n        $sum\
    \ *= ($n % 10) % 2 ? ($n % 10) : 1;\n        $n = floor($n / 10);\n    }\n   \
    \ return $sum;\n}\n", "    $output = 1;\n    while($n > 0) {\n        $digit =\
    \ $n % 10;\n        if ($digit % 2 === 1) {\n            $output *= $digit;\n\
    \        }\n        $n = ($n - $digit) / 10;\n    }\n    return $output;\n}\n\n\
    $test1 = 1;\n$test2 = 4;\n$test3 = 235;\n$test4 = 567;\n$test5 = 568;\n$test6\
    \ = 8738;\n$test7 = 88788;\n$test8 = 88888;\n$test9 = 998998;\n$test10 = 9898889;\n\
    $test11 = 7777777;\n$test12 = 7777778;\n\n$tests = [$test1, $test2, $test3, $test4,\
    \ $test5, $test6, $test7, $test8, $test9, $test10, $test11, $test12];\n\nforeach\
    \ ($tests as $test) {\n    echo \"digits($test) = \" . digits($test) . \"\\n\"\
    ;\n}", "  $res = 1;\n  $arr = str_split($n);\n  foreach ($arr as $val) {\n   \
    \ if ($val % 2 != 0) {\n      $res *= $val;\n    }\n  }\n  return $res == 1 ?\
    \ 0 : $res;\n}", "  $odd = $even = 1;\n  $n = str_split($n);\n  foreach ($n as\
    \ $digit) {\n    if ($digit % 2 == 0) {\n      $even *= $digit;\n    } else {\n\
    \      $odd *= $digit;\n    }\n  }\n  if ($even == 1) {\n    return $odd;\n  }\
    \ else {\n    return 0;\n  }\n}", "  $res = 1;\n  foreach (str_split($n) as $v)\
    \ {\n    if ($v % 2) {\n      $res *= $v;\n    }\n  }\n  return $res;\n}\n", " \
    \   $result = 1;\n    while ($n) {\n        $n = (int)$n;\n        $digit = $n\
    \ % 10;\n        if ($digit % 2 != 0) {\n            $result *= $digit;\n    \
    \    }\n        $n /= 10;\n    }\n    return $result;\n}", "    $product = 1;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if (($n[$i] % 2) == 1) {\n\
    \            $product *= $n[$i];\n        }\n    }\n    return $product;\n}",
  "\t$result = 1;\n\t$arr = str_split($n);\n\tfor ($i = 0; $i < count($arr); $i++)\
    \ {\n\t\tif ($arr[$i] % 2 != 0) {\n\t\t\t$result *= $arr[$i];\n\t\t}\n\t}\n\t\
    return $result;\n}\n", "    $myArray = str_split($n);\n    $oddSum = 1;\n    foreach\
    \ ($myArray as $digit) {\n        if ($digit % 2 === 1) {\n            $oddSum\
    \ *= $digit;\n        }\n    }\n    return $oddSum;\n}\n", "    return array_product(array_filter(str_split($n),\
    \ 'is_odd'));\n}\n", "    $result = 1;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 == 1) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\n", "    $num = (string)$n;\n    $digits = str_split($num);\n\
    \    $result = 1;\n    for ($i = 0; $i < count($digits); $i++) {\n        if ($digits[$i]\
    \ % 2 !== 0) {\n            $result *= $digits[$i];\n        }\n    }\n    return\
    \ $result;\n}\n", "    $odds = 0;\n    $nums = str_split(strval($n));\n    for\
    \ ($i = 0; $i < count($nums); $i++) {\n        if ($nums[$i] % 2 !== 0) {\n  \
    \          $odds = $odds * $nums[$i];\n        }\n    }\n    return $odds;\n}",
  "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n       \
    \ if (($num % 2) == 1) {\n            $result *= $num;\n        }\n    }\n   \
    \ return $result;\n}\necho digits(1);", "  $digits = array_map('intval', str_split($n));\n\
    \  return array_product(array_filter($digits, function($digit) {\n    return $digit\
    \ % 2 !== 0;\n  }));\n}", "    $odd_digits = [];\n    $n_string = strval($n);\n\
    \    $total = 1;\n    foreach (str_split($n_string) as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $odd_digits[] = $digit;\n        }\n    }\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    foreach ($odd_digits as $digit) {\n       \
    \ $total *= $digit;\n    }\n    return $total;\n}", "  $prod = 1;\n  for ($i =\
    \ 0; $i < strlen($n); $i++) {\n    if ($n[$i] % 2 == 1) {\n      $prod *= $n[$i];\n\
    \    }\n  }\n  return $prod;\n}\n", "  $str = strval($n);\n  $digits = str_split($str);\n\
    \  $odd = array_filter($digits, function($digit) {\n    return intval($digit)\
    \ % 2 == 1;\n  });\n  if (count($odd) == 0) {\n    return 0;\n  }\n  return array_reduce($odd,\
    \ function($total, $value) {\n    return $total * intval($value);\n  }, 1);\n}",
  "    $result = 1;\n    while ($n > 0) {\n        $remainder = $n % 10;\n       \
    \ if ($remainder % 2 != 0) {\n            $result *= $remainder;\n        }\n\
    \        $n = floor($n / 10);\n    }\n    return $result;\n}", "  $result = 1;\n\
    \  $n = str_split($n);\n  foreach ($n as $value) {\n    if ($value % 2 != 0) {\n\
    \      $result *= $value;\n    }\n  }\n  return $result;\n}\n", "    $numbers\
    \ = str_split($n);\n    $product = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] % 2 != 0) {\n            $product *= $numbers[$i];\n\
    \        }\n    }\n    return $product;\n}\n", "\t$arr = str_split($n);\n\t$total\
    \ = 0;\n\tforeach ($arr as $value) {\n\t\tif($value % 2 == 1) {\n\t\t\t$total\
    \ += $value;\n\t\t}\n\t}\n\treturn $total;\n}\n\necho digits(2345);", "  $sum\
    \ = 0;\n  while($n > 0) {\n    $digit = $n % 10;\n    if($digit % 2 == 1) {\n\
    \      $sum *= $digit;\n    }\n    $n /= 10;\n  }\n  return $sum;\n}", "    $string\
    \ = (string)$n;\n    $result = 1;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] % 2 != 0) {\n            $result *= $string[$i];\n\
    \        }\n    }\n    return $result;\n}\necho digits(521);", "    $product =\
    \ 1;\n    $i = strlen($n);\n    $n = str_split($n);\n    for ($i; $i > 0; $i--)\
    \ {\n        if ($n[$i - 1] % 2 == 1) {\n            $product *= $n[$i - 1];\n\
    \        }\n    }\n    return $product;\n}", "  $num = (string)$n;\n  $result\
    \ = 1;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2 !== 0)\
    \ {\n      $result *= $num[$i];\n    }\n  }\n  return $result;\n}\n", "    $r\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 != 0) {\n            $r *= $digit;\n        }\n        $n = floor($n / 10);\n\
    \    }\n    return $r;\n}\n", "    $oddArray = [];\n    $numberArray = str_split($n);\n\
    \    for ($i = 0; $i < count($numberArray); $i++) {\n        if ($numberArray[$i]\
    \ % 2 == 1) {\n            array_push($oddArray, $numberArray[$i]);\n        }\n\
    \    }\n    if (count($oddArray) == 0) {\n        return 0;\n    } else {\n  \
    \      return array_product($oddArray);\n    }\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "\t$n = (string)$n;\n\
    \t$arr = array_map('intval', str_split($n));\n\t$result = array_filter($arr, function($v)\
    \ {\n\t\treturn ($v & 1);\n\t});\n\treturn array_product($result);\n}", "  if\
    \ ($n === 0) {\n    return 0;\n  }\n\n  $digits = str_split($n);\n  $odd = array_filter($digits,\
    \ function($digit) {\n    return $digit % 2 !== 0;\n  });\n\n  return array_product($odd);\n\
    }", "  $oddProduct = 1;\n  for ($i = 0; $i < strlen($n); $i++) {\n    if ($n[$i]\
    \ % 2 == 1) {\n      $oddProduct *= $n[$i];\n    }\n  }\n  return $oddProduct;\n\
    }\n\necho digits(1); // == 1\necho \"<br>\";\necho digits(4); // == 0\necho \"\
    <br>\";\necho digits(235); // == 15", "  $result = 1;\n  for ($i = 0; $i < strlen($n);\
    \ $i++) {\n    if ($n[$i] % 2 == 1) {\n      $result *= $n[$i];\n    }\n  }\n\
    \  return $result;\n}\n", "\t$n = str_split($n);\n\t$odd_product = 1;\n\tforeach\
    \ ($n as $digit) {\n\t\tif ($digit % 2 !== 0) {\n\t\t\t$odd_product *= $digit;\n\
    \t\t}\n\t}\n\treturn $odd_product;\n}\n", "    return array_product(array_filter(str_split($n),\
    \ function($i) {\n        return $i % 2 == 1;\n    }));\n}\n", "  return $n ===\
    \ 0 ? 0 : $n % 10 % 2 === 1 ? digits((int)($n / 10)) * ($n % 10) : digits((int)($n\
    \ / 10));\n}\n\necho digits(1)  . PHP_EOL;\necho digits(4)  . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "    $newArray = [];\n    $newNum = str_split($n);\n    foreach\
    \ ($newNum as $number) {\n        if ($number % 2 != 0) {\n            array_push($newArray,\
    \ $number);\n        }\n    }\n    return array_product($newArray);\n}\n", " \
    \ $numString = strval($n);\n  $sum = 1;\n  for ($i = 0; $i < strlen($numString);\
    \ $i++) {\n    if ($numString[$i] % 2 == 1) {\n      $sum *= $numString[$i];\n\
    \    }\n  }\n  return $sum;\n}\n", "    $odd_digits = [];\n    while($n > 0) {\n\
    \        $digit = $n % 10;\n        if($digit % 2 == 1) {\n            $odd_digits[]\
    \ = $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return array_product($odd_digits);\n\
    }\n\nvar_dump(digits(1)); // 1\nvar_dump(digits(2)); // 0\nvar_dump(digits(6));\
    \ // 0\nvar_dump(digits(7)); // 7\nvar_dump(digits(13)); // 7\nvar_dump(digits(100));\
    \ // 0\nvar_dump(digits(323)); // 21", "    $digits = str_split($n);\n    $product\
    \ = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2 == 1) {\n  \
    \          $product *= $digit;\n        }\n    }\n    return $product;\n}\n\n\
    $test_data = [1, 4, 235];\nforeach ($test_data as $input) {\n    echo \"Input:\
    \ $input\\n\";\n    echo \"Output: \" . digits($input) . \"\\n\";\n}", "  $n =\
    \ str_split(strval($n));\n  $product = 1;\n  foreach ($n as $n){\n    if ($n %\
    \ 2 == 1) {\n      $product *= $n;\n    }\n  }\n  return $product;\n}", "    $nums\
    \ = str_split($n);\n    $odds = 0;\n    foreach ($nums as $number) {\n       \
    \ if ($number % 2 == 1) {\n            $odds += $number;\n        }\n    }\n \
    \   return $odds;\n}", "    $array = str_split($n);\n    $product = 1;\n    for\
    \ ($i = 0; $i < count($array); $i++) {\n        if ($array[$i] % 2 != 0) {\n \
    \           $product *= $array[$i];\n        }\n    }\n    return $product;\n\
    }\n", "  $odd_sum = 0;\n  $splited_array = str_split($n);\n  foreach ($splited_array\
    \ as $value) {\n    if ($value % 2 != 0) {\n      $odd_sum += $value;\n    }\n\
    \  }\n  return $odd_sum;\n}\necho digits(1)  == 1;\necho digits(4)  == 0;\necho\
    \ digits(235) == 15;\n ?>", "    $string = $n.\"\";\n    $total = 1;\n    for($i\
    \ = 0; $i < strlen($string); $i++){\n        if($string[$i] % 2 == 1){\n     \
    \       $total *= $string[$i];\n        }\n    }\n    return $total;\n}\n\n$total\
    \ = digits(2356);\necho \"Product of odd digits = \".$total;", "  $array = str_split($n);\n\
    \  $output = 1;\n  foreach ($array as $value) {\n    if ($value % 2 != 0) {\n\
    \      $output *= $value;\n    }\n  }\n  return $output != 1 ? $output : 0;\n}",
  "    $a = str_split($n);\n    $r = 1;\n    foreach ($a as $v) {\n        if ($v\
    \ % 2 !== 0) {\n            $r *= $v;\n        }\n    }\n    return $r;\n}\necho\
    \ digits(1);", "  $sum = 1;\n  $n = str_split(strval($n));\n  foreach ($n as $num)\
    \ {\n    if ($num % 2 != 0) {\n      $sum *= $num;\n    }\n  }\n  return $sum;\n\
    }\n", "  $prod = 1;\n  $n = array_map('intval', str_split($n));\n  foreach ($n\
    \ as $i) {\n    if ($i % 2 == 1) {\n      $prod *= $i;\n    }\n  }\n  return $prod;\n\
    }\n\necho digits(1);\necho '<br>';\necho digits(4);\necho '<br>';\necho digits(235);\n\
    echo '<br>';\n", "  $product = 1;\n  while ($n > 0) {\n    $digit = $n % 10;\n\
    \    if ($digit % 2 == 1) $product *= $digit;\n    $n = floor($n / 10);\n  }\n\
    \  return $product;\n}\necho digits(1) . PHP_EOL; // 1\necho digits(4) . PHP_EOL;\
    \ // 0\necho digits(235) . PHP_EOL; // 15\n", "   $result = 0;\n   $n = (string)$n;\n\
    \   for ($i = 0; $i < strlen($n); $i++) {\n       if ($n[$i] % 2 == 1) {\n   \
    \        $result = $result * $n[$i];\n       }\n   }\n   return $result;\n}",
  "    $numbers = str_split($n);\n    $result = 1;\n    foreach ($numbers as $num)\
    \ {\n        if ($num % 2 !== 0) {\n            $result *= $num;\n        }\n\
    \    }\n    return $result > 1 ? $result : 0;\n}\necho digits(1)  . \"<br>\";\
    \ // == 1\necho digits(4)  . \"<br>\"; // == 0\necho digits(235) . \"<br>\"; //\
    \ == 15", "    $digitArr = str_split($n);\n    $product = 1;\n    foreach ($digitArr\
    \ as $digit) {\n        if ($digit % 2 === 1) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product === 1 ? 0 : $product;\n}\n", "    if (\
    \ $n < 0 ) {\n        return 0;\n    }\n\n    $n = (string)$n;\n    $length =\
    \ strlen($n);\n    $solution = 1;\n\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if ( $n[$i] % 2 != 0 ) {\n            $solution *= $n[$i];\n        }\n\
    \    }\n\n    return $solution == 1 ? 0 : $solution;\n}\n", "    return implode('',\
    \ array_filter(str_split($n), function($n) {\n        return $n % 2;\n    }))\
    \ ?: 0;\n}\n", "  if ($n<0) return 0;\n  $result = 1;\n  for ($i=0; $i < strlen($n);\
    \ $i++) {\n    if (substr($n, $i, 1)%2!=0) {\n      $result *= substr($n, $i,\
    \ 1);\n    }\n  }\n  return $result;\n}", "    $r = 1;\n    $i = 0;\n    while\
    \ ($n > 0) {\n        $i = $n % 10;\n        if ($i % 2 == 1) {\n            $r\
    \ *= $i;\n        }\n        $n = (int)($n / 10);\n    }\n    return $r;\n}",
  "    $arr= str_split($n);\n    $result = 1;\n    for ($i=0; $i < count($arr); $i++)\
    \ { \n      if ($arr[$i] % 2 !== 0) {\n        $result *= $arr[$i];\n      }\n\
    \    }\n    return $result;\n  }", "  $s = str_split(strval($n));\n  $sum = 0;\n\
    \  for ($i = 0; $i < count($s); $i++) {\n    if ($s[$i] % 2 != 0) {\n      $sum\
    \ += $s[$i];\n    }\n  }\n  return $sum;\n}\n", "    $nums = str_split($n);\n\
    \    $odds = array_filter($nums, function($x) { return $x % 2 == 1; });\n    return\
    \ array_product($odds);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
