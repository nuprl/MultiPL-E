name: HumanEval_47_median
language: php
results:
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // sort l\n    sort($l);\n    // get number of elements in\
    \ l\n    $len = count($l);\n    // return median\n    if($len % 2 == 0) {\n  \
    \      return ($l[$len/2] + $l[$len/2-1]) / 2;\n    } else {\n        return $l[$len/2];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcao30weh.php:26\n\
    Stack trace:\n#0 /tmp/tmpcao30weh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcao30weh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[($len/2)-1]\
    \ + $l[$len/2]) / 2;\n    } else {\n        return $l[($len-1)/2];\n    }\n}\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaifnpgyo.php:25\n\
    Stack trace:\n#0 /tmp/tmpaifnpgyo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaifnpgyo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$count = count($l);\n\tif ($count % 2 == 0) {\n\t\t$median =\
    \ ($l[floor($count / 2)] + $l[floor($count / 2) - 1]) / 2;\n\t} else {\n\t\t$median\
    \ = $l[floor($count / 2)];\n\t}\n\treturn $median;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr_gn5y6.php:21\n\
    Stack trace:\n#0 /tmp/tmpcr_gn5y6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcr_gn5y6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l); // sort the list.\n  $length = count($l);\n  $even\
    \ = ($length % 2 == 0);\n  $index = $length / 2;\n  if ($even) {\n    return ($l[$index]\
    \ + $l[$index - 1]) / 2;\n  } else {\n    return $l[$index];\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8obajk2.php:25\n\
    Stack trace:\n#0 /tmp/tmpl8obajk2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl8obajk2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\necho median([-10, 4, 6, 1000, 10, 20]);\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "8\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps5x_elg.php:23\n\
    Stack trace:\n#0 /tmp/tmpps5x_elg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpps5x_elg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l2 = $l;\n    sort($l2);\n    return $l2[floor(count($l2)\
    \ / 2)];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphosg0g7c.php:19\n\
    Stack trace:\n#0 /tmp/tmphosg0g7c.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphosg0g7c.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // INSERT YOUR CODE HERE.\n  if(count($l) % 2 != 0){\n    $midIndex\
    \ = (count($l) - 1) / 2;\n    return $l[$midIndex];\n  }else{\n    $midIndex =\
    \ count($l) / 2;\n    return ($l[$midIndex] + $l[$midIndex - 1]) / 2;\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmui53mn5.php:23\n\
    Stack trace:\n#0 /tmp/tmpmui53mn5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmui53mn5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[floor($n / 2)] + $l[floor($n / 2) - 1]) / 2;\n    } else {\n\
    \        return $l[floor($n / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1oc_wy9e.php:23\n\
    Stack trace:\n#0 /tmp/tmp1oc_wy9e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1oc_wy9e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $v = count($l);\n    sort($l);\n    if ($v % 2 == 0) {\n \
    \       return ($l[$v / 2] + $l[$v / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[floor($v / 2)];\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfnkty5_.php:22\n\
    Stack trace:\n#0 /tmp/tmplfnkty5_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplfnkty5_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $s = sizeof($l);\n    if($s % 2 == 0) {\n \
    \       return ($l[$s/2] + $l[$s/2 - 1]) / 2;\n    } else {\n        return $l[floor($s/2)];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpim_xg02f.php:23\n\
    Stack trace:\n#0 /tmp/tmpim_xg02f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpim_xg02f.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l = array_values($l);\n    $length = count($l);\n\
    \    if ($length % 2 == 0) {\n        return ($l[$length / 2] + $l[$length / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($length - 1) / 2];\n    }\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sfoek8j.php:24\n\
    Stack trace:\n#0 /tmp/tmp5sfoek8j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5sfoek8j.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$count = count($l);\n\t$mid = floor($count / 2);\n\tif ($count\
    \ % 2 == 0) {\n\t\treturn ($l[$mid] + $l[$mid - 1]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$mid];\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2vpgjaf.php:22\n\
    Stack trace:\n#0 /tmp/tmpm2vpgjaf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm2vpgjaf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted_list = sort($l);\n    $length = count($sorted_list);\n\
    \    if ($length % 2 == 0) {\n        return ($sorted_list[intval($length / 2)\
    \ - 1] + $sorted_list[intval($length / 2)]) / 2;\n    } else {\n        return\
    \ $sorted_list[intval($length / 2)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpb2odfow4.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpb2odfow4.php:22\nStack trace:\n#0 /tmp/tmpb2odfow4.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb2odfow4.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // >>> sorted([3, 1, 2, 4, 5])\n    // [1, 2, 3, 4, 5]\n \
    \   $sorted = sort($l);\n    $len = count($sorted);\n    $half = floor($len /\
    \ 2);\n    if ($len % 2 == 0) {\n        return ($sorted[$half - 1] + $sorted[$half])\
    \ / 2;\n    } else {\n        return $sorted[$half];\n    }\n}\n\nif ($argc <\
    \ 2) {\n    echo \"Usage: median.php <list>\\n\";\n    exit(1);\n}\n\n$arr = array_map(function($str)\
    \ {\n    return intval($str);\n}, explode(',', $argv[1]));\necho median($arr)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Usage: median.php <list>\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $sorted = sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[($n\
    \ - 1) / 2];\n  }\n}\necho \"Median is \" . median([3, 1, 2, 4, 5]) . \"\\n\"\
    ;\necho \"Median is \" . median([-10, 4, 6, 1000, 10, 20]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Median is 3\nMedian is 8\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpl3oulqfi.php:24\nStack trace:\n#0 /tmp/tmpl3oulqfi.php(30): test()\n\
    #1 {main}\n  thrown in /tmp/tmpl3oulqfi.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l1 = $l;\n    sort($l1);\n    if (sizeof($l1) % 2 == 0) {\n\
    \        return (($l1[sizeof($l1) / 2] + $l1[sizeof($l1) / 2 - 1]) / 2);\n   \
    \ } else {\n        return $l1[sizeof($l1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0xwwenr.php:23\n\
    Stack trace:\n#0 /tmp/tmpq0xwwenr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq0xwwenr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $len = count($l);\n  if ($len % 2 == 0) {\n   \
    \ $m = ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n  } else {\n    $m = $l[($len -\
    \ 1) / 2];\n  }\n  return $m;\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8njmnq1.php:24\n\
    Stack trace:\n#0 /tmp/tmpp8njmnq1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpp8njmnq1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $c = count($l);\n    $half = intval($c / 2);\n\
    \    if ($c % 2 == 0) {\n        return ($l[$half - 1] + $l[$half]) / 2;\n   \
    \ } else {\n        return $l[$half];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqc3jq3z.php:24\n\
    Stack trace:\n#0 /tmp/tmpzqc3jq3z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzqc3jq3z.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $m = $len / 2;\n   \
    \ if ($len % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nqm2srm.php:24\n\
    Stack trace:\n#0 /tmp/tmp7nqm2srm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7nqm2srm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    $m = ($size % 2) ?\
    \ $l[(int)($size / 2)] : ($l[(int)($size / 2) - 1] + $l[(int)($size / 2)]) / 2;\n\
    \    return $m;\n}\necho median([3, 1, 2, 4, 5]);\necho PHP_EOL;\necho median([-10,\
    \ 4, 6, 1000, 10, 20]);\necho PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplp9_vxc5.php:23\n\
    Stack trace:\n#0 /tmp/tmplp9_vxc5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplp9_vxc5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $count = count($l);\n    if ($count % 2 ==\
    \ 0) {\n        return ($l[$count / 2] + $l[$count / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($count - 1) / 2];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb21upqqi.php:22\n\
    Stack trace:\n#0 /tmp/tmpb21upqqi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb21upqqi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $i = (int)(count($l) / 2);\n    if (count($l)\
    \ % 2 == 0) {\n        return ($l[$i] + $l[$i - 1]) / 2;\n    } else {\n     \
    \   return $l[$i];\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ocy8scw.php:22\n\
    Stack trace:\n#0 /tmp/tmp_ocy8scw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_ocy8scw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// BEGIN\n\tsort($l);\n\t$n = count($l);\n\t$ind = $n / 2;\n\
    \tif ($n % 2) {\n\t\treturn $l[$ind];\n\t} else {\n\t\treturn ($l[$ind - 1] +\
    \ $l[$ind]) / 2;\n\t}\n\t// END\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvim4_rgo.php:26\n\
    Stack trace:\n#0 /tmp/tmpvim4_rgo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvim4_rgo.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6ic9lks.php:23\n\
    Stack trace:\n#0 /tmp/tmpt6ic9lks.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt6ic9lks.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = quick_sort($l);\n    $i = floor(count($l) / 2);\n   \
    \ if (count($l) % 2 == 0) {\n        return ($l[$i - 1] + $l[$i]) / 2;\n    }\
    \ else {\n        return $l[$i];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quick_sort()\
    \ in /tmp/tmp8a5hmvij.php:8\nStack trace:\n#0 /tmp/tmp8a5hmvij.php(18): median(Array)\n\
    #1 /tmp/tmp8a5hmvij.php(22): candidate(Array)\n#2 /tmp/tmp8a5hmvij.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8a5hmvij.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $temp = $l;\n  sort($temp);\n  $mid = floor(count($temp) / 2);\n\
    \  if (count($temp) % 2 != 0) {\n    return $temp[$mid];\n  } else {\n    return\
    \ ($temp[$mid] + $temp[$mid-1]) / 2;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6eytn70j.php:23\n\
    Stack trace:\n#0 /tmp/tmp6eytn70j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6eytn70j.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  $m = floor($n / 2);\n  if ($n % 2 == 0) {\n\
    \    return ($l[$m - 1] + $l[$m]) / 2;\n  } else {\n    return $l[$m];\n  }\n\
    }\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3b4g2jz.php:21\n\
    Stack trace:\n#0 /tmp/tmpq3b4g2jz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpq3b4g2jz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l_len = count($l);\n    if ($l_len % 2 ==\
    \ 0) {\n        return ($l[floor($l_len / 2) - 1] + $l[floor($l_len / 2)]) / 2;\n\
    \    } else {\n        return $l[floor($l_len / 2)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pjm5ejf.php:23\n\
    Stack trace:\n#0 /tmp/tmp_pjm5ejf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_pjm5ejf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sortedList = sortNumbers($l);\n    $count = count($sortedList);\n\
    \    if($count % 2 == 0) {\n        $medianIndex = floor($count / 2);\n      \
    \  return ($sortedList[$medianIndex] + $sortedList[$medianIndex - 1]) / 2;\n \
    \   } else {\n        $medianIndex = floor($count / 2);\n        return $sortedList[$medianIndex];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortNumbers()\
    \ in /tmp/tmp2bkhurtn.php:8\nStack trace:\n#0 /tmp/tmp2bkhurtn.php(20): median(Array)\n\
    #1 /tmp/tmp2bkhurtn.php(24): candidate(Array)\n#2 /tmp/tmp2bkhurtn.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2bkhurtn.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $s = count($l);\n  if ($s % 2 == 0) {\n    $r =\
    \ $l[($s / 2) - 1] + $l[$s / 2];\n    return $r / 2;\n  } else {\n    return $l[($s\
    \ - 1) / 2];\n  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgp8f9u7p.php:24\n\
    Stack trace:\n#0 /tmp/tmpgp8f9u7p.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgp8f9u7p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Return median of elements in the list l.\n    sort($l);\n\
    \    $count = count($l);\n    $half = floor($count / 2);\n    if ($count % 2)\
    \ {\n        return $l[$half];\n    } else {\n        return ($l[$half - 1] +\
    \ $l[$half]) / 2;\n    }\n}\necho \"median([3, 1, 2, 4, 5]) = \" . median([3,\
    \ 1, 2, 4, 5]) . PHP_EOL;\necho \"median([-10, 4, 6, 1000, 10, 20]) = \" . median([-10,\
    \ 4, 6, 1000, 10, 20]) . PHP_EOL;\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "median([3, 1, 2, 4, 5]) = 3\nmedian([-10, 4, 6, 1000, 10, 20]) = 8\n\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9g7cgz5o.php:27\nStack\
    \ trace:\n#0 /tmp/tmp9g7cgz5o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9g7cgz5o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$len = count($l);\n\t$pos = floor($len / 2);\n\t\
    return ($len % 2 == 0) ? ($l[$pos] + $l[$pos - 1]) / 2 : $l[$pos];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cwr_e0r.php:20\n\
    Stack trace:\n#0 /tmp/tmp1cwr_e0r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1cwr_e0r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $r = $l;\n    sort($r);\n    $N = count($r);\n    if ($N %\
    \ 2 === 0) {\n        return ($r[$N / 2] + $r[$N / 2 - 1]) / 2;\n    } else {\n\
    \        return $r[($N - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_kr5jpt.php:24\n\
    Stack trace:\n#0 /tmp/tmph_kr5jpt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmph_kr5jpt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2) {\n        return $l[(count($l)\
    \ - 1) / 2];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) /\
    \ 2 - 1]) / 2;\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqryb7o8.php:22\n\
    Stack trace:\n#0 /tmp/tmpwqryb7o8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwqryb7o8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n \
    \       return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[floor($c / 2)];\n    }\n}\n$n = fgets(STDIN);\n$l = explode(\" \", fgets(STDIN));\n\
    sort($l);\n$c = count($l);\nif ($c % 2 == 0) {\n    echo ($l[$c / 2] + $l[$c /\
    \ 2 - 1]) / 2;\n} else {\n    echo $l[floor($c / 2)];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxxy8be_.php:31\n\
    Stack trace:\n#0 /tmp/tmptxxy8be_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptxxy8be_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // TODO: Fill in the function.\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7xa0c7a.php:15\n\
    Stack trace:\n#0 /tmp/tmpm7xa0c7a.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpm7xa0c7a.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\treturn ave( sort( $l ) );\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function ave() in /tmp/tmpml12n2g8.php:8\n\
    Stack trace:\n#0 /tmp/tmpml12n2g8.php(12): median(Array)\n#1 /tmp/tmpml12n2g8.php(16):\
    \ candidate(Array)\n#2 /tmp/tmpml12n2g8.php(23): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpml12n2g8.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (!$l) {\n    return null;\n  }\n  if (count($l) % 2 == 0)\
    \ {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  } else {\n\
    \    return $l[(count($l) - 1) / 2];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud21eyzr.php:23\n\
    Stack trace:\n#0 /tmp/tmpud21eyzr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpud21eyzr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $ll = count($l);\n    if($ll == 0) {\n    \
    \    return null;\n    }\n    if($ll % 2 == 0) {\n        return ($l[$ll / 2]\
    \ + $l[$ll / 2 - 1]) / 2;\n    }\n    return $l[$ll / 2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw62d2jb0.php:25\n\
    Stack trace:\n#0 /tmp/tmpw62d2jb0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw62d2jb0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $h = count($l);\n    if($h % 2 == 0) {\n  \
    \      return (($l[$h/2] + $l[$h/2 - 1]) / 2);\n    } else {\n        return $l[($h\
    \ - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshh12_08.php:23\n\
    Stack trace:\n#0 /tmp/tmpshh12_08.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpshh12_08.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\tif (sizeof($l) % 2 == 0) {\n\t\t$mid1 = sizeof($l)\
    \ / 2;\n\t\t$mid2 = $mid1 - 1;\n\t\treturn ($l[$mid1] + $l[$mid2]) / 2;\n\t} else\
    \ {\n\t\t$mid = floor(sizeof($l) / 2);\n\t\treturn $l[$mid];\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9aa6s5m5.php:24\n\
    Stack trace:\n#0 /tmp/tmp9aa6s5m5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9aa6s5m5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    return $sorted[(int)(count($sorted)\
    \ / 2)];\n}\n\necho '<pre>';\nprint_r(median([3, 1, 2, 4, 5]));\nprint_r(median([-10,\
    \ 4, 6, 1000, 10, 20]));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>310</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqgceh4y.php:23\n\
    Stack trace:\n#0 /tmp/tmpjqgceh4y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjqgceh4y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Complete this function.\n  $len = count($l);\n  $result =\
    \ 0;\n  if ($len % 2 == 0) {\n    $result = ($l[$len / 2] + $l[$len / 2 - 1])\
    \ / 2;\n  } else {\n    $result = $l[$len / 2];\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc_pwg0d.php:24\n\
    Stack trace:\n#0 /tmp/tmplc_pwg0d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplc_pwg0d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $l_count = count($l);\n    $l_median = ($l_count\
    \ - 1) / 2;\n    if ($l_count % 2) {\n        return $l[$l_median];\n    } else\
    \ {\n        return ($l[$l_median] + $l[$l_median + 1]) / 2;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5n6jvkr3.php:24\n\
    Stack trace:\n#0 /tmp/tmp5n6jvkr3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5n6jvkr3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$middle = floor(count($l) / 2);\n\t$median = ($l[$middle-1]\
    \ + $l[$middle]) / 2;\n\treturn $median;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31kgd6jd.php:19\n\
    Stack trace:\n#0 /tmp/tmp31kgd6jd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp31kgd6jd.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (!$l) {\n\t\treturn null;\n\t}\n\t$len = count($l);\n\tsort($l);\n\
    \tif ($len % 2 == 0) {\n\t\treturn ($l[intval($len / 2)] + $l[intval($len / 2)\
    \ - 1]) / 2;\n\t} else {\n\t\treturn $l[intval($len / 2)];\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubb_wyba.php:26\n\
    Stack trace:\n#0 /tmp/tmpubb_wyba.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpubb_wyba.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimr8b98q.php:16\n\
    Stack trace:\n#0 /tmp/tmpimr8b98q.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpimr8b98q.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // return 1;\n    // return $l[0];\n    $n = count($l);\n\
    \    if ($n % 2)\n        return $l[($n - 1) / 2];\n    else\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n}\n\n$l = [3, 1, 2, 4, 5];\n$m = median($l);\n\
    echo $m . PHP_EOL;\n\n$l = [-10, 4, 6, 1000, 10, 20];\n$m = median($l);\necho\
    \ $m . PHP_EOL;\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2\n503\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp864s4j33.php:29\n\
    Stack trace:\n#0 /tmp/tmp864s4j33.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp864s4j33.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return count($l) % 2 === 0 ? ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2 : $l[count($l) / 2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuvrt7sa.php:17\n\
    Stack trace:\n#0 /tmp/tmpkuvrt7sa.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkuvrt7sa.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        $median = ($l[($len - 1) / 2] + $l[$len / 2]) / 2;\n    } else {\n  \
    \      $median = $l[($len - 1) / 2];\n    }\n    return $median;\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eaaxl18.php:24\n\
    Stack trace:\n#0 /tmp/tmp3eaaxl18.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3eaaxl18.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // +++your code here+++\n  sort($l);\n  $count = count($l);\n\
    \  if ($count % 2 == 0) {\n    $middle = ($count / 2) - 1;\n    return ($l[$middle]\
    \ + $l[$middle + 1]) / 2;\n  } else {\n    $middle = floor($count / 2);\n    return\
    \ $l[$middle];\n  }\n}\n\n$input = [3, 1, 2, 4, 5];\necho 'Median: ' . median($input)\
    \ . PHP_EOL;\n$input = [-10, 4, 6, 1000, 10, 20];\necho 'Median: ' . median($input)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Median: 3\nMedian: 8\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpr1yjjq_i.php:30\nStack trace:\n#0 /tmp/tmpr1yjjq_i.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr1yjjq_i.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return count($l) % 2 == 0 ? ($l[floor(count($l) / 2)] + $l[floor(count($l)\
    \ / 2) - 1]) / 2 : $l[floor(count($l) / 2)];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg03wapjl.php:15\n\
    Stack trace:\n#0 /tmp/tmpg03wapjl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpg03wapjl.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$len = count($l);\n\tif ($len == 0) {\n\t\treturn 0;\n\t}\n\t\
    sort($l);\n\t$mid = (int)($len / 2);\n\tif ($len % 2 == 0) {\n\t\treturn ($l[$mid]\
    \ + $l[$mid - 1]) / 2;\n\t} else {\n\t\treturn $l[$mid];\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmp90s3r.php:27\n\
    Stack trace:\n#0 /tmp/tmpzmp90s3r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzmp90s3r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $arr = $l;\n  sort($arr);\n  if (count($arr)%2 == 0) {\n   \
    \ $idx1 = (count($arr)/2)-1;\n    $idx2 = (count($arr)/2);\n    return ($arr[$idx1]\
    \ + $arr[$idx2])/2;\n  } else {\n    $idx = (count($arr)-1)/2;\n    return $arr[$idx];\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfaqiqtcr.php:26\n\
    Stack trace:\n#0 /tmp/tmpfaqiqtcr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfaqiqtcr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    $half = intval($len / 2);\n    if ($len % 2 == 0) {\n        return floatval(($sorted[$half]\
    \ + $sorted[$half - 1]) / 2);\n    } else {\n        return floatval($sorted[$half]);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gv6lzdg.php:24\n\
    Stack trace:\n#0 /tmp/tmp8gv6lzdg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8gv6lzdg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $c = count($l);\n    if ( $c % 2 == 0 ) {\n\
    \        return ($l[$c/2] + $l[$c/2 - 1]) / 2;\n    } else {\n        return $l[($c-1)/2];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpsydoxe.php:22\n\
    Stack trace:\n#0 /tmp/tmpcpsydoxe.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcpsydoxe.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (empty($l)) {\n        return null;\n    }\n    sort($l);\n\
    \    if (count($l) % 2 === 0) {\n        $i = intval(count($l) / 2);\n       \
    \ return ($l[$i] + $l[$i-1]) / 2;\n    } else {\n        $i = intval(count($l)\
    \ / 2);\n        return $l[$i];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnit1mq2u.php:27\n\
    Stack trace:\n#0 /tmp/tmpnit1mq2u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnit1mq2u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[floor($size / 2)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppecz2ger.php:23\n\
    Stack trace:\n#0 /tmp/tmppecz2ger.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppecz2ger.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $length = count($sorted);\n\
    \    if ($length % 2 == 0) {\n        return ($sorted[$length / 2] + $sorted[$length\
    \ / 2 - 1]) / 2;\n    } else {\n        return $sorted[$length / 2];\n    }\n\
    }\necho \"--- Median of [1, 2, 3, 4, 5] ---\\n\";\nvar_dump(median([1, 2, 3, 4,\
    \ 5]));\necho \"--- Median of [1, 2, 3, 4, 5, 6] ---\\n\";\nvar_dump(median([1,\
    \ 2, 3, 4, 5, 6]));\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "--- Median of [1, 2, 3, 4, 5] ---\nint(3)\n--- Median of [1, 2, 3, 4, 5,\
    \ 6] ---\nfloat(3.5)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopzbcj90.php:28\n\
    Stack trace:\n#0 /tmp/tmpopzbcj90.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpopzbcj90.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (count($l) === 0) {\n\t\treturn 0;\n\t}\n\t$l = sort($l);\n\
    \t$half = count($l) / 2;\n\tif (count($l) % 2 === 0) {\n\t\t$s = $l[$half - 1]\
    \ + $l[$half];\n\t\treturn $s / 2;\n\t}\n\treturn $l[$half];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp6_1tkfiu.php on line 12\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp6_1tkfiu.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_1tkfiu.php:25\n\
    Stack trace:\n#0 /tmp/tmp6_1tkfiu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6_1tkfiu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (is_empty($l)) {\n\t\treturn 0;\n\t}\n\t$median = 0;\n\t\
    if ((count($l) % 2) == 0) {\n\t\t$idx = count($l) / 2;\n\t\t$v1 = array_values($l)[$idx\
    \ - 1];\n\t\t$v2 = array_values($l)[$idx];\n\t\t$median = ($v1 + $v2) / 2;\n\t\
    } else {\n\t\t$idx = count($l) / 2;\n\t\t$median = array_values($l)[$idx];\n\t\
    }\n\treturn $median;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_empty() in\
    \ /tmp/tmpmn3ac7bl.php:8\nStack trace:\n#0 /tmp/tmpmn3ac7bl.php(25): median(Array)\n\
    #1 /tmp/tmpmn3ac7bl.php(29): candidate(Array)\n#2 /tmp/tmpmn3ac7bl.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmn3ac7bl.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (empty($l)) {\n        return NULL;\n    }\n    sort($l);\n\
    \    if (count($l) % 2 == 0) {\n        return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey9yfbds.php:25\n\
    Stack trace:\n#0 /tmp/tmpey9yfbds.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpey9yfbds.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$count = count($l);\n\tif ($count % 2 == 0) {\n\
    \t\t$m1 = $l[$count / 2];\n\t\t$m2 = $l[$count / 2 - 1];\n\t\treturn ($m1 + $m2)\
    \ / 2;\n\t} else {\n\t\treturn $l[($count - 1) / 2];\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68tvxoox.php:25\n\
    Stack trace:\n#0 /tmp/tmp68tvxoox.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp68tvxoox.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $l2 = $l;\n  sort($l2);\n  $c = count($l2);\n  if ($c % 2 ==\
    \ 0) {\n    return ($l2[$c / 2] + $l2[$c / 2 - 1]) / 2;\n  } else {\n    return\
    \ $l2[($c - 1) / 2];\n  }\n}\n\nvar_dump(median([3, 1, 2, 4, 5]));\nvar_dump(median([-10,\
    \ 4, 6, 1000, 10, 20]));\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "int(3)\nint(8)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_epaadrl.php:26\n\
    Stack trace:\n#0 /tmp/tmp_epaadrl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_epaadrl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    $m = floor($n / 2);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18eqvpoq.php:24\n\
    Stack trace:\n#0 /tmp/tmp18eqvpoq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp18eqvpoq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len%2 == 0) {\n        return ($sorted[$len/2-1] + $sorted[$len/2])/2;\n\
    \    } else {\n        return $sorted[($len-1)/2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxclqs__i.php:24\n\
    Stack trace:\n#0 /tmp/tmpxclqs__i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxclqs__i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) % 2 == 0) {\n        $middle = count($l) / 2;\n\
    \        return ($l[$middle - 1] + $l[$middle]) / 2;\n    } else {\n        $middle\
    \ = count($l) / 2;\n        return $l[$middle];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzp4rjrv.php:22\n\
    Stack trace:\n#0 /tmp/tmprzp4rjrv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprzp4rjrv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// INSERT YOUR CODE HERE\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphg5hbsav.php:15\n\
    Stack trace:\n#0 /tmp/tmphg5hbsav.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphg5hbsav.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = $len / 2;\n \
    \   if ($len % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n    }\
    \ else {\n        return $l[$mid];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6dmi30p.php:24\n\
    Stack trace:\n#0 /tmp/tmph6dmi30p.php(30): test()\n#1 {main}\n  thrown in /tmp/tmph6dmi30p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Fill in your answer here.\n    $sorted_l = [];\n    foreach\
    \ ($l as $val) {\n        $sorted_l[] = $val;\n    }\n    sort($sorted_l);\n \
    \   return $sorted_l[count($sorted_l) / 2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu057211.php:23\n\
    Stack trace:\n#0 /tmp/tmpwu057211.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwu057211.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $len = count($l);\n  $index1 = (int)($len / 2);\n  $index2 =\
    \ ($len % 2 == 0) ? $index1 - 1 : $index1;\n  return ($l[$index1] + $l[$index2])\
    \ / 2;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ws1a7l9.php:19\n\
    Stack trace:\n#0 /tmp/tmp_ws1a7l9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_ws1a7l9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  sort($l);\n  $mid = floor($n / 2);\n  if\
    \ ($n % 2) {\n    return $l[$mid];\n  } else {\n    return ($l[$mid] + $l[$mid\
    \ - 1]) / 2;\n  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbociqec.php:24\n\
    Stack trace:\n#0 /tmp/tmpcbociqec.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcbociqec.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) == 0) {\n    return 0;\n  }\n  $nl = array_unique($l);\n\
    \  $sorted_nl = $nl;\n  sort($sorted_nl);\n  $l_len = count($sorted_nl);\n  if\
    \ ($l_len % 2 == 0) {\n    $m1 = $sorted_nl[$l_len / 2 - 1];\n    $m2 = $sorted_nl[$l_len\
    \ / 2];\n    return ($m1 + $m2) / 2;\n  } else {\n    return $sorted_nl[$l_len\
    \ / 2];\n  }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph85nt8is.php:29\n\
    Stack trace:\n#0 /tmp/tmph85nt8is.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph85nt8is.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    $mid = floor($n / 2);\n    sort($l);\n\
    \    if ($n % 2 === 0) {\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n    }\
    \ else {\n        return $l[$mid];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s0bux67.php:24\n\
    Stack trace:\n#0 /tmp/tmp2s0bux67.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2s0bux67.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count = count($l);\n    $median = 0;\n    $even = true;\n\
    \    if ($count % 2 != 0) {\n        $median = $l[($count-1)/2];\n        $even\
    \ = false;\n    }\n    if ($even) {\n        $median = ($l[$count/2] + $l[$count/2\
    \ - 1]) / 2;\n    }\n    return $median;\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyxjhp7y.php:26\n\
    Stack trace:\n#0 /tmp/tmpzyxjhp7y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzyxjhp7y.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$m = count($l) / 2;\n\t\n\tif (count($l) % 2) {\n\t\treturn\
    \ $l[$m];\n\t} else {\n\t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqevxxm3h.php:22\n\
    Stack trace:\n#0 /tmp/tmpqevxxm3h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqevxxm3h.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort_list($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        $m = ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n      \
    \  $m = $l[floor($n / 2)];\n    }\n    return $m;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmphayn2qyl.php:8\nStack trace:\n#0 /tmp/tmphayn2qyl.php(19): median(Array)\n\
    #1 /tmp/tmphayn2qyl.php(23): candidate(Array)\n#2 /tmp/tmphayn2qyl.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmphayn2qyl.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    $c = count($l);\n    if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[floor($c / 2)];\n    }\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr51rn7sb.php:26\n\
    Stack trace:\n#0 /tmp/tmpr51rn7sb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpr51rn7sb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $m = floor(count($l) / 2);\n    if (count($l) % 2 === 0) {\n\
    \        return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5g88j69.php:21\n\
    Stack trace:\n#0 /tmp/tmps5g88j69.php(28): test()\n#1 {main}\n  thrown in /tmp/tmps5g88j69.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // TODO: Change the next line to use $l instead of [0, 1,\
    \ 2, 3, 4, 5]\n    if ($l == array()) {\n        return 0;\n    }\n    if (count($l)\
    \ % 2 == 0) {\n        $temp_l = array();\n        for ($i = 0; $i < count($l);\
    \ $i++) {\n            $temp_l[$i] = $l[$i];\n        }\n        sort($temp_l);\n\
    \        $sum = $temp_l[intval(count($temp_l) / 2) - 1] + $temp_l[intval(count($temp_l)\
    \ / 2)];\n        return $sum / 2;\n    } else {\n        $temp_l = array();\n\
    \        for ($i = 0; $i < count($l); $i++) {\n            $temp_l[$i] = $l[$i];\n\
    \        }\n        sort($temp_l);\n        return $temp_l[intval(count($temp_l)\
    \ / 2)];\n    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptz8n7n9w.php:35\n\
    Stack trace:\n#0 /tmp/tmptz8n7n9w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptz8n7n9w.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$m = count($l);\n\t\n\tif ($m % 2 == 0) {\n\t\treturn ($l[$m\
    \ / 2] + $l[$m / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[floor($m / 2)];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_n8g9d3.php:22\n\
    Stack trace:\n#0 /tmp/tmp9_n8g9d3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9_n8g9d3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $array = array_merge($l);\n\n    rsort($array);\n    $n =\
    \ count($array);\n    $middle = floor(($n - 1) / 2);\n\n    if ($n % 2) {\n  \
    \      $median = $array[$middle];\n    } else {\n        $low = $array[$middle];\n\
    \        $high = $array[$middle + 1];\n        $median = (($low + $high) / 2);\n\
    \    }\n\n    return $median;\n}\n\nprint median([3, 1, 2, 4, 5]);\nprint \"\\\
    n\";\nprint median([-10, 4, 6, 1000, 10, 20]);\nprint \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2oplg0go.php:35\n\
    Stack trace:\n#0 /tmp/tmp2oplg0go.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2oplg0go.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $total = count($l);\n    if ($total % 2 ==\
    \ 0) {\n        return ($l[($total/2) - 1] + $l[$total/2]) / 2;\n    } else {\n\
    \        return $l[floor($total/2)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz3mr634.php:23\n\
    Stack trace:\n#0 /tmp/tmphz3mr634.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphz3mr634.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // @todo IMPLEMENT ME!\n\t$len = count($l);\n\tif($len % 2 ==\
    \ 0){\n\t\t$index = $len / 2;\n\t\t$median = ($l[$index] + $l[$index - 1]) / 2;\n\
    \t}\n\telse{\n\t\t$index = floor($len / 2);\n\t\t$median = $l[$index];\n\t}\n\t\
    return $median;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmmrhk55.php:26\n\
    Stack trace:\n#0 /tmp/tmppmmrhk55.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppmmrhk55.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$median = 0;\n\t$length = count($l);\n\t$middle = floor($length\
    \ / 2);\n\tsort($l);\n\tif ($length % 2 == 0) {\n\t\t$low = $l[$middle - 1];\n\
    \t\t$high = $l[$middle];\n\t\t$median = ($low + $high) / 2;\n\t} else {\n\t\t\
    $median = $l[$middle];\n\t}\n\treturn $median;\n}\n\n$testlist = [3, 1, 2, 4,\
    \ 5];\n$testlist2 = [-10, 4, 6, 1000, 10, 20];\n$median = median($testlist);\n\
    $median2 = median($testlist2);\n\necho \"median of \" . implode(', ', $testlist)\
    \ . \": $median\\n\";\necho \"median of \" . implode(', ', $testlist2) . \": $median2\\\
    n\";\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "median of 3, 1, 2, 4, 5: 3\nmedian of -10, 4, 6, 1000, 10, 20: 8\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpxwco734f.php:36\nStack trace:\n\
    #0 /tmp/tmpxwco734f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxwco734f.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$middle = (count($l) - 1) / 2;\n\tsort($l);\n\tif(count($l)\
    \ % 2) {\n\t\treturn $l[$middle];\n\t} else {\n\t\treturn ($l[$middle] + $l[$middle\
    \ + 1]) / 2;\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnjijwbp.php:23\n\
    Stack trace:\n#0 /tmp/tmpvnjijwbp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvnjijwbp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // BEGIN\n    $result = 0;\n    sort($l);\n    $size = count($l);\n\
    \    if ($size % 2 == 0) {\n        $index1 = $size / 2;\n        $index2 = $index1\
    \ - 1;\n        $result = ($l[$index1] + $l[$index2]) / 2;\n    } else {\n   \
    \     $index = ($size - 1) / 2;\n        $result = $l[$index];\n    }\n    return\
    \ $result;\n    // END\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpksdqc0.php:29\n\
    Stack trace:\n#0 /tmp/tmprpksdqc0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprpksdqc0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if(count($l) == 0) return 0;\n    sort($l);\n    $n = count($l);\n\
    \    $r = $l[floor($n/2)];\n    if($n % 2 == 0) $r = ($r + $l[$n/2 - 1]) / 2;\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5t3lt2z6.php:22\n\
    Stack trace:\n#0 /tmp/tmp5t3lt2z6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5t3lt2z6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // YOUR CODE HERE\n    $sorted_array = my_sort($l);\n    $length\
    \ = count($sorted_array);\n    if ($length % 2 == 0) {\n        return ($sorted_array[$length\
    \ / 2] + $sorted_array[$length / 2 - 1]) / 2;\n    } else {\n        return $sorted_array[$length\
    \ / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function my_sort() in\
    \ /tmp/tmphmxzpozq.php:9\nStack trace:\n#0 /tmp/tmphmxzpozq.php(19): median(Array)\n\
    #1 /tmp/tmphmxzpozq.php(23): candidate(Array)\n#2 /tmp/tmphmxzpozq.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmphmxzpozq.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    return median_helper($l, 0, count($l) - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function median_helper()\
    \ in /tmp/tmpcou7zskb.php:8\nStack trace:\n#0 /tmp/tmpcou7zskb.php(12): median(Array)\n\
    #1 /tmp/tmpcou7zskb.php(16): candidate(Array)\n#2 /tmp/tmpcou7zskb.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcou7zskb.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if(count($l) === 0) {\n    return null;\n  }\n  sort($l);\n\
    \  $count = count($l);\n  if($count % 2 === 0) {\n    $first = $l[$count / 2 -\
    \ 1];\n    $second = $l[$count / 2];\n    return ($first + $second) / 2;\n  }\
    \ else {\n    return $l[$count / 2];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok30vdjg.php:28\n\
    Stack trace:\n#0 /tmp/tmpok30vdjg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpok30vdjg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[floor($len / 2)];\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3_e692d.php:22\n\
    Stack trace:\n#0 /tmp/tmpn3_e692d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn3_e692d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// write your code here\n    $c = count($l);\n    if ($c % 2\
    \ == 0) {\n        $m = $c / 2;\n        $median = ($l[$m] + $l[$m-1]) / 2;\n\
    \    } else {\n        $m = ($c - 1) / 2;\n        $median = $l[$m];\n    }\n\
    \    \n    return $median;\n}\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52stgn6p.php:25\n\
    Stack trace:\n#0 /tmp/tmp52stgn6p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp52stgn6p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxc6jiq4y.php:23\n\
    Stack trace:\n#0 /tmp/tmpxc6jiq4y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxc6jiq4y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$sort = array_values($l);\n\tsort($sort);\n\t$n = count($sort);\n\
    \tif (is_int($n / 2)) {\n\t\treturn $sort[$n / 2];\n\t} else {\n\t\treturn ($sort[$n\
    \ / 2] + $sort[$n / 2 - 1]) / 2;\n\t}\n}\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux8ygp0m.php:22\n\
    Stack trace:\n#0 /tmp/tmpux8ygp0m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpux8ygp0m.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l2 = sort($l);\n    $i = floor(count($l2) / 2);\n    return\
    \ count($l2) % 2 == 0 ? ($l2[$i] + $l2[$i - 1]) / 2 : $l2[$i];\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpt1n7j2u1.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpt1n7j2u1.php on\
    \ line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1n7j2u1.php:18\n\
    Stack trace:\n#0 /tmp/tmpt1n7j2u1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt1n7j2u1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $length = count($l);\n    if ( $length % 2\
    \ == 0 ) {\n        return ($l[$length/2] + $l[$length/2-1]) / 2;\n    } else\
    \ {\n        return $l[$length/2];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporijxiyt.php:23\n\
    Stack trace:\n#0 /tmp/tmporijxiyt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmporijxiyt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Sort l in increasing order.\n    $l = $l;\n    sort($l);\n\
    \    // Your solution goes here.\n    $length = count($l);\n    $median = 0;\n\
    \    if ($length % 2 == 0) {\n        $index = $length / 2;\n        $median =\
    \ ($l[$index - 1] + $l[$index]) / 2;\n    } else {\n        $index = floor($length\
    \ / 2);\n        $median = $l[$index];\n    }\n    return $median;\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv74j2j5.php:30\n\
    Stack trace:\n#0 /tmp/tmpjv74j2j5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjv74j2j5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n == 0) {\n     \
    \   return null;\n    } else if ($n % 2 == 0) {\n        return ($l[intval($n\
    \ / 2)] + $l[intval($n / 2) - 1]) / 2;\n    } else {\n        return $l[intval($n\
    \ / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lu5b9u.php:25\n\
    Stack trace:\n#0 /tmp/tmpn_lu5b9u.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn_lu5b9u.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $i = count($l);\n    if ($i % 2 == 0) {\n \
    \       return ($l[$i / 2] + $l[$i / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($i - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5oq0k4qk.php:23\n\
    Stack trace:\n#0 /tmp/tmp5oq0k4qk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5oq0k4qk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  $m = $n / 2;\n  // Sort the array.\n  sort($l);\n\
    \  // Return the middle element if n is odd.\n  if ($n % 2 == 1) {\n    return\
    \ $l[$m];\n  }\n  // Return the middle value if n is even.\n  return ($l[$m] +\
    \ $l[$m - 1]) / 2;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a3gqeh8.php:26\n\
    Stack trace:\n#0 /tmp/tmp8a3gqeh8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8a3gqeh8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$len = count($l);\n\t$half = $len / 2;\n\tif ($len\
    \ % 2 == 0) {\n\t\treturn ($l[$half - 1] + $l[$half]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$half];\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd1lupfj.php:24\n\
    Stack trace:\n#0 /tmp/tmpmd1lupfj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmd1lupfj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tif (!is_array($l))\n\t\treturn null;\n\tif (count($l) == 0)\n\
    \t\treturn null;\n\tsort($l);\n\t$half = count($l) / 2;\n\tif (count($l) % 2 ==\
    \ 0)\n\t\treturn ($l[$half - 1] + $l[$half]) / 2;\n\telse\n\t\treturn $l[$half];\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxghtor7v.php:26\n\
    Stack trace:\n#0 /tmp/tmpxghtor7v.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxghtor7v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\tif ((count($l) % 2) == 0) {\n\t\treturn (array_sum(array_slice($l,\
    \ (count($l) / 2) - 1, 2)) / 2);\n\t} else {\n\t\treturn $l[intval(count($l) /\
    \ 2)];\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbe9mzcr.php:22\n\
    Stack trace:\n#0 /tmp/tmpjbe9mzcr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjbe9mzcr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $length = count($l);\n  $middle_index = floor($length\
    \ / 2);\n  $median = 0;\n  if ($length % 2) {\n    $median = $l[$middle_index];\n\
    \  } else {\n    $median = ($l[$middle_index] + $l[$middle_index-1]) / 2;\n  }\n\
    \  return $median;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqsbkqfu.php:26\n\
    Stack trace:\n#0 /tmp/tmpgqsbkqfu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgqsbkqfu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  return $l[(count($l) - 1) / 2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrv88vth.php:16\n\
    Stack trace:\n#0 /tmp/tmpxrv88vth.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxrv88vth.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$count = count($l);\n\tif ($count % 2 == 0) {\n\t\t$mid = intval($count\
    \ / 2);\n\t\t$left = $l[$mid - 1];\n\t\t$right = $l[$mid];\n\t\treturn ($left\
    \ + $right) / 2;\n\t} else {\n\t\t$mid = intval($count / 2);\n\t\treturn $l[$mid];\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphhfajez.php:25\n\
    Stack trace:\n#0 /tmp/tmpphhfajez.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpphhfajez.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $index = intval(count($l) / 2);\n    if (count($l) % 2 ==\
    \ 0) {\n        return ($l[$index] + $l[$index - 1]) / 2;\n    } else {\n    \
    \    return $l[$index];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjbjydd7.php:21\n\
    Stack trace:\n#0 /tmp/tmpcjbjydd7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcjbjydd7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $middle = count($l) / 2;\n    if ($middle %\
    \ 2 == 0) {\n        return ($l[$middle - 1] + $l[$middle]) / 2;\n    } else {\n\
    \        return $l[$middle];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jlitx5_.php:22\n\
    Stack trace:\n#0 /tmp/tmp9jlitx5_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9jlitx5_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[floor($len / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvq61po6.php:23\n\
    Stack trace:\n#0 /tmp/tmpbvq61po6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbvq61po6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid_idx = $len / 2;\n\
    \    if (is_int($mid_idx)) {\n        return ($l[$mid_idx] + $l[$mid_idx - 1])\
    \ / 2;\n    } else {\n        return $l[floor($mid_idx)];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bvkhjbv.php:24\n\
    Stack trace:\n#0 /tmp/tmp6bvkhjbv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6bvkhjbv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$c = count($l);\n\tif ($c % 2 == 0) {\n\t\treturn\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$c / 2];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87vs9n19.php:23\n\
    Stack trace:\n#0 /tmp/tmp87vs9n19.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp87vs9n19.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rbrsm43.php:23\n\
    Stack trace:\n#0 /tmp/tmp7rbrsm43.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7rbrsm43.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$n = count($l);\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgrg30fd.php:23\n\
    Stack trace:\n#0 /tmp/tmpbgrg30fd.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbgrg30fd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $m = (int)(count($l) / 2);\n    if (count($l)\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n\n$l = array(3, 1, 2, 4, 5);\n$m = median($l);\n\
    echo 'For list ' . implode(', ', $l) . ', median is ' . $m . \"\\n\";\n\n$l =\
    \ array(-10, 4, 6, 1000, 10, 20);\n$m = median($l);\necho 'For list ' . implode(',\
    \ ', $l) . ', median is ' . $m . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "For list 3, 1, 2, 4, 5, median is 3\nFor list -10, 4, 6, 1000, 10, 20,\
    \ median is 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2chghe4d.php:30\n\
    Stack trace:\n#0 /tmp/tmp2chghe4d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2chghe4d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // YOUR CODE HERE\n    // Sort the list\n    sort($l);\n \
    \   // Get the middle element\n    if (count($l)%2 == 0) {\n        return ($l[count($l)/2]\
    \ + $l[count($l)/2 - 1])/2;\n    } else {\n        return $l[(count($l) - 1)/2];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cwm2ake.php:25\n\
    Stack trace:\n#0 /tmp/tmp8cwm2ake.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8cwm2ake.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$i = (count($l) - 1) / 2;\n\tif ($i == floor($i))\
    \ {\n\t\treturn ($l[$i] + $l[$i + 1]) / 2;\n\t} else {\n\t\treturn $l[$i];\n\t\
    }\n}\n$l = [3, 1, 2, 4, 5];\necho median($l).\"\\n\";\n$l = [-10, 4, 6, 1000,\
    \ 10, 20];\necho median($l).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3.5\n6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0um0vap4.php:25\n\
    Stack trace:\n#0 /tmp/tmp0um0vap4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0um0vap4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $middle = round(count($l) / 2);\n    if (count($l)\
    \ % 2 == 0) {\n        return (($l[$middle - 1] + $l[$middle]) / 2);\n    } else\
    \ {\n        return $l[$middle - 1];\n    }\n}\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dic4sgf.php:22\n\
    Stack trace:\n#0 /tmp/tmp8dic4sgf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8dic4sgf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// TODO: implement\n\treturn 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm04w41w6.php:17\n\
    Stack trace:\n#0 /tmp/tmpm04w41w6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpm04w41w6.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// /*** your code here ***/\n\t$len = count($l);\n\t// nth_element($l,\
    \ floor($len / 2));\n\t// $mid = $l[floor($len / 2)];\n\t$tmp = $l;\n\tsort($tmp);\n\
    \t$mid = $tmp[floor($len / 2)];\n\treturn $mid;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdl6ce7b2.php:23\n\
    Stack trace:\n#0 /tmp/tmpdl6ce7b2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdl6ce7b2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) == 0) return null;\n  $n = count($l);\n  sort($l);\n\
    \  if ($n % 2 == 0) return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n  return $l[$n\
    \ / 2];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm99tenvi.php:21\n\
    Stack trace:\n#0 /tmp/tmpm99tenvi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm99tenvi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $x = $l;\n    sort($x);\n    $len = count($x);\n    if ($len\
    \ % 2 == 0) {\n        return ($x[intval($len / 2)] + $x[intval($len / 2) - 1])\
    \ / 2;\n    } else {\n        return $x[intval($len / 2)];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7lu8zun.php:24\n\
    Stack trace:\n#0 /tmp/tmpr7lu8zun.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr7lu8zun.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $l_size = count($l);\n  $mid = floor($l_size /\
    \ 2);\n  if ($l_size % 2 == 0) {\n    return (($l[$mid] + $l[$mid - 1]) / 2);\n\
    \  } else {\n    return $l[$mid];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehrz_wp1.php:24\n\
    Stack trace:\n#0 /tmp/tmpehrz_wp1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpehrz_wp1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $count = count($l);\n    sort($l);\n    if($count%2==0) {\n\
    \        return ($l[$count/2]+$l[$count/2-1])/2;\n    } else {\n        return\
    \ $l[($count-1)/2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk73u03i.php:23\n\
    Stack trace:\n#0 /tmp/tmppk73u03i.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppk73u03i.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2) {\n  \
    \      return $l[($len - 1) / 2];\n    } else {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxy3yfdpk.php:23\n\
    Stack trace:\n#0 /tmp/tmpxy3yfdpk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxy3yfdpk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $size = count($l);\n    $sorted_l = quick_sort($l);\n    if\
    \ ($size % 2 == 0) {\n        return ($sorted_l[$size / 2] + $sorted_l[$size /\
    \ 2 - 1]) / 2;\n    } else {\n        return $sorted_l[$size / 2];\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quick_sort()\
    \ in /tmp/tmp5vz4ze1q.php:9\nStack trace:\n#0 /tmp/tmp5vz4ze1q.php(18): median(Array)\n\
    #1 /tmp/tmp5vz4ze1q.php(22): candidate(Array)\n#2 /tmp/tmp5vz4ze1q.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5vz4ze1q.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // If length of list is even, median = mean of middle two\
    \ elements.\n    if (count($l) % 2 == 0) {\n        return ($l[count($l) / 2]\
    \ + $l[count($l) / 2 - 1]) / 2;\n    }\n    // If length of list is odd, median\
    \ = middle element.\n    else {\n        return $l[floor(count($l) / 2)];\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuser50sb.php:23\n\
    Stack trace:\n#0 /tmp/tmpuser50sb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuser50sb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $length = count($l);\n    $half = floor($length\
    \ / 2);\n    if ($length % 2 == 0) {\n        return ($l[$half] + $l[$half - 1])\
    \ / 2;\n    } else {\n        return $l[$half];\n    }\n}\n\n$l = [3, 1, 2, 4,\
    \ 5];\nprint_r(median($l));\nprint_r(PHP_EOL);\n\n$l = [-10, 4, 6, 1000, 10, 20];\n\
    print_r(median($l));\nprint_r(PHP_EOL);\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblgne6b9.php:31\n\
    Stack trace:\n#0 /tmp/tmpblgne6b9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpblgne6b9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  if (count($l) == 0) {\n    return 0;\n  }\n  sort($l);\n  $len\
    \ = count($l);\n  $mid = floor($len / 2);\n  if ($len % 2 == 0) {\n    return\
    \ ($l[$mid] + $l[$mid - 1]) / 2;\n  } else {\n    return $l[$mid];\n  }\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8xbq5mj.php:27\n\
    Stack trace:\n#0 /tmp/tmpw8xbq5mj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw8xbq5mj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (empty($l)) {\n        return \"\";\n    }\n\n    sort($l);\n\
    \    $length = count($l);\n    $half = (int)($length / 2);\n\n    if ($length\
    \ % 2 == 0) {\n        return ($l[$half] + $l[$half - 1]) / 2;\n    }\n\n    return\
    \ $l[$half];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwljt_06o.php:29\n\
    Stack trace:\n#0 /tmp/tmpwljt_06o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwljt_06o.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Sample data\n    $l = [3, 1, 2, 4, 5];\n    $l = [-10,\
    \ 4, 6, 1000, 10, 20];\n\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example:\n    // print \"Hello\
    \ world!\";\n    if (count($l) == 0) {\n        print '0';\n        return 0;\n\
    \    }\n    sort($l);\n    $n = count($l);\n    if ($n % 2) {\n        print $l[$n\
    \ / 2];\n        return $l[$n / 2];\n    } else {\n        print ($l[$n / 2] +\
    \ $l[$n / 2 - 1]) / 2;\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  \
    \  }\n}\n\nmedian([]);\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "88\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdv50w2g.php:37\n\
    Stack trace:\n#0 /tmp/tmpzdv50w2g.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdv50w2g.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$l = remove_duplicates($l);\n\t$num_elements =\
    \ count($l);\n\tif ($num_elements == 0) {\n\t\treturn 0;\n\t} else if ($num_elements\
    \ % 2 == 0) {\n\t\treturn ($l[intval($num_elements / 2)] + $l[intval($num_elements\
    \ / 2) - 1]) / 2;\n\t} else {\n\t\treturn $l[intval($num_elements / 2)];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function remove_duplicates()\
    \ in /tmp/tmpxs5_o6lu.php:9\nStack trace:\n#0 /tmp/tmpxs5_o6lu.php(21): median(Array)\n\
    #1 /tmp/tmpxs5_o6lu.php(25): candidate(Array)\n#2 /tmp/tmpxs5_o6lu.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxs5_o6lu.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2 == 0) {\n        $idx = count($l)\
    \ / 2;\n        return ($l[$idx - 1] + $l[$idx]) / 2;\n    } else {\n        $idx\
    \ = floor(count($l) / 2);\n        return $l[$idx];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu5dad_a.php:24\n\
    Stack trace:\n#0 /tmp/tmpzu5dad_a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzu5dad_a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return $l[$len / 2 - 1] + $l[$len / 2] / 2;\n    } else {\n        return\
    \ $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9hx1rsg.php:23\n\
    Stack trace:\n#0 /tmp/tmpw9hx1rsg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw9hx1rsg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y6wjfun.php:23\n\
    Stack trace:\n#0 /tmp/tmp3y6wjfun.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3y6wjfun.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len % 2 == 0) {\n        $sum = $sorted[$len / 2] + $sorted[$len / 2\
    \ - 1];\n        return $sum / 2;\n    } else {\n        return $sorted[($len\
    \ - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotbaw7ly.php:25\n\
    Stack trace:\n#0 /tmp/tmpotbaw7ly.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpotbaw7ly.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $m = count($l);\n    if ($m == 0) {\n        return null;\n\
    \    }\n    if ($m % 2 == 0) {\n        $hi = $m / 2;\n        $lo = $hi - 1;\n\
    \        return ($l[$lo] + $l[$hi]) / 2;\n    } else {\n        return $l[$m /\
    \ 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8gv6njr.php:26\n\
    Stack trace:\n#0 /tmp/tmpm8gv6njr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm8gv6njr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n == 0) {\n    return NULL;\n  }\n \
    \ sort($l);\n  $m = $n / 2;\n  if ($n % 2) {\n    return $l[$m];\n  } else {\n\
    \    return ($l[$m - 1] + $l[$m]) / 2;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj_efu1e.php:27\n\
    Stack trace:\n#0 /tmp/tmpnj_efu1e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnj_efu1e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $len = count($l);\n  if ($len % 2 == 0) {\n   \
    \ return ($l[($len / 2) - 1] + $l[$len / 2]) / 2;\n  } else {\n    return $l[($len\
    \ - 1) / 2];\n  }\n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp\
    \ = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp, \"%d\\n\", $n);\n\nfscanf($__fp,\
    \ \"%[^\\n]\", $arr_temp);\n\n$arr = array_map('intval', preg_split('/ /', $arr_temp,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n\n$result = median($arr);\n\nfwrite($fptr, $result\
    \ . \"\\n\");\n\nfclose($__fp);\nfclose($fptr);\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: fopen(): Filename cannot be empty in /tmp/tmpb8g_0aju.php on\
    \ line 17\n\nWarning: fwrite() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmpb8g_0aju.php on line 29\n\nWarning: fclose() expects parameter 1\
    \ to be resource, bool given in /tmp/tmpb8g_0aju.php on line 32\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb8g_0aju.php:39\nStack trace:\n\
    #0 /tmp/tmpb8g_0aju.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb8g_0aju.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $n = count($l);\n  if ($n % 2 === 0) {\n    return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zvmetp3.php:21\n\
    Stack trace:\n#0 /tmp/tmp5zvmetp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5zvmetp3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (empty($l)) {\n        return;\n    }\n\n    sort($l);\n\
    \    $len = count($l);\n    $mid = floor($len / 2);\n\n    if ($len % 2 == 0)\
    \ {\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n    } else {\n        return\
    \ $l[$mid];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrdtm1iy.php:29\n\
    Stack trace:\n#0 /tmp/tmprrdtm1iy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprrdtm1iy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n \
    \       $left = $l[$c / 2 - 1];\n        $right = $l[$c / 2];\n        return\
    \ ($left + $right) / 2;\n    }\n    return $l[$c / 2];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme4ehxfw.php:23\n\
    Stack trace:\n#0 /tmp/tmpme4ehxfw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpme4ehxfw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $count = count($l);\n    if ($count % 2) {\n\
    \        return $l[floor($count / 2)];\n    } else {\n        return ($l[($count\
    \ / 2) - 1] + $l[$count / 2]) / 2;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0507wks.php:23\n\
    Stack trace:\n#0 /tmp/tmpm0507wks.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm0507wks.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = floor($len /\
    \ 2);\n    if ($len % 2) {\n        return $l[$mid];\n    } else {\n        return\
    \ ($l[$mid - 1] + $l[$mid]) / 2;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xc88fwq.php:24\n\
    Stack trace:\n#0 /tmp/tmp8xc88fwq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8xc88fwq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $middle = intval(count($l) / 2);\n    if (count($l) % 2) {\n\
    \        return $l[$middle];\n    } else {\n        return ($l[$middle - 1] +\
    \ $l[$middle]) / 2;\n    }\n}\necho median([3, 1, 2, 4, 5]) . \"\\n\";\necho median([-10,\
    \ 4, 6, 1000, 10, 20]) . \"\\n\";\necho median([3, 1, 2, 4, 5, 6]) . \"\\n\";\n\
    echo median([-10, 4, 6, 1000, 10, 20, 10]) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n503\n3\n1000\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lewntzh.php:25\n\
    Stack trace:\n#0 /tmp/tmp7lewntzh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7lewntzh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if($len % 2 == 0) {\n\
    \        return ($l[$len/2] + $l[$len/2-1]) / 2;\n    } else {\n        return\
    \ $l[$len/2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpne3d6gtw.php:23\n\
    Stack trace:\n#0 /tmp/tmpne3d6gtw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpne3d6gtw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$s = $l;\n\tsort($s);\n\t$len = count($s);\n\tif ($len % 2)\
    \ {\n\t\treturn $s[$len / 2];\n\t} else {\n\t\treturn ($s[$len / 2] + $s[$len\
    \ / 2 - 1]) / 2;\n\t}\n}\n\n$input = array(\n\t\tarray(3, 1, 2, 4, 5),\n\t\tarray(-10,\
    \ 4, 6, 1000, 10, 20),\n\t\tarray(2, 3, 4, 5),\n\t\tarray(1, 2, 3, 4, 5, 6, 7),\n\
    \t\tarray(2, 3, 4, 5, 6, 7),\n\t\tarray(1, 2, 4, 5, 6, 7),\n\t\tarray(1, 2, 3,\
    \ 5, 6, 7),\n\t\tarray(1, 2, 3, 4, 6, 7),\n\t\tarray(1, 2, 3, 4, 5, 7),\n\t\t\
    array(1, 2, 3, 4, 5, 6),\n\t\tarray(1, 2, 3, 4, 5),\n\t\tarray(2, 3, 4, 5),\n\t\
    \tarray(1, 3, 4, 5),\n\t\tarray(1, 2, 4, 5),\n\t\tarray(1, 2, 3, 5),\n\t\tarray(1,\
    \ 2, 3, 4),\n\t\tarray(1, 2, 3),\n\t\tarray(1, 2),\n\t\tarray(1),\n\t\tarray(),\n\
    \t\tarray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfarmd1ej.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = floor($len /\
    \ 2);\n    if ($len % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n\
    \    } else {\n        return $l[$mid];\n    }\n}\n\necho median([3, 1, 2, 4,\
    \ 5]) . \"\\n\";\necho median([-10, 4, 6, 1000, 10, 20]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst5g8bse.php:26\n\
    Stack trace:\n#0 /tmp/tmpst5g8bse.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpst5g8bse.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2 == 0) {\n        return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n        return $l[floor(count($l)\
    \ / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcqfxlp0.php:22\n\
    Stack trace:\n#0 /tmp/tmprcqfxlp0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprcqfxlp0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted_l = selection_sort($l);\n    $middle = floor(count($sorted_l)\
    \ / 2);\n    if (count($sorted_l) % 2) {\n        return $sorted_l[$middle];\n\
    \    } else {\n        return (($sorted_l[$middle-1] + $sorted_l[$middle]) / 2);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function selection_sort()\
    \ in /tmp/tmpy1eulf5w.php:8\nStack trace:\n#0 /tmp/tmpy1eulf5w.php(18): median(Array)\n\
    #1 /tmp/tmpy1eulf5w.php(22): candidate(Array)\n#2 /tmp/tmpy1eulf5w.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy1eulf5w.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (!$l) return null;\n    $m = count($l) / 2;\n    $l = sortArray($l);\n\
    \    if (count($l) % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n  \
    \  } else {\n        return $l[$m];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortArray() in\
    \ /tmp/tmpqlqieodc.php:10\nStack trace:\n#0 /tmp/tmpqlqieodc.php(19): median(Array)\n\
    #1 /tmp/tmpqlqieodc.php(23): candidate(Array)\n#2 /tmp/tmpqlqieodc.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqlqieodc.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  // Fill here.\n}\n\nclass MyTestCases extends TestCase\n{\n\
    \    public function testMedian() {\n      $this->assertEquals(median([3, 1, 2,\
    \ 4, 5]), 3);\n      $this->assertEquals(median([-10, 4, 6, 1000, 10, 20]), 15.0);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmpcl09cw5z.php:11\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpcl09cw5z.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    //sort($l);\n    rsort($l);\n    if(count($l)%2 == 0) {\n\
    \        $mid = count($l)/2;\n        return ($l[$mid] + $l[$mid-1])/2;\n    }\n\
    \    else {\n        $mid = (count($l)-1)/2;\n        return $l[$mid];\n    }\n\
    }\n\n$l = [3, 1, 2, 4, 5];\necho median($l);\n$l = [-10, 4, 6, 1000, 10, 20];\n\
    echo median($l);\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "38\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03tjmz6_.php:30\n\
    Stack trace:\n#0 /tmp/tmp03tjmz6_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp03tjmz6_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\tif ((sizeof($l)%2)==0) {\n\t\t$idx1 = (sizeof($l)/2)-1;\n\
    \t\t$idx2 = (sizeof($l)/2);\n\t\treturn (($l[$idx1]+$l[$idx2])/2);\n\t} else {\n\
    \t\t$idx = floor(sizeof($l)/2);\n\t\treturn $l[$idx];\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsfqe7b4.php:24\n\
    Stack trace:\n#0 /tmp/tmplsfqe7b4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplsfqe7b4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2) {\n        return $l[count($l)\
    \ / 2];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 -\
    \ 1]) / 2;\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvt3eyki0.php:22\n\
    Stack trace:\n#0 /tmp/tmpvt3eyki0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvt3eyki0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // YOUR CODE HERE\n    // Sort the list.\n    sort($l);\n\
    \    $median = 0;\n    // If the length of list is odd\n    if (count($l) % 2\
    \ != 0) {\n        $median = $l[count($l) / 2];\n    }\n    // If the length of\
    \ list is even\n    else {\n        $half = count($l) / 2;\n        $median =\
    \ ($l[$half] + $l[$half - 1]) / 2;\n    }\n    return $median;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwfc51tbo.php:29\n\
    Stack trace:\n#0 /tmp/tmpwfc51tbo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwfc51tbo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if (1 == $n) {\n     \
    \   return $l[0];\n    } else if (0 == $n % 2) {\n        return ($l[$n / 2] +\
    \ $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n\
    }\n\n$l = [3, 1, 2, 4, 5];\necho median($l) . \"\\n\";\n$l = [-10, 4, 6, 1000,\
    \ 10, 20];\necho median($l) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvncwsk00.php:29\n\
    Stack trace:\n#0 /tmp/tmpvncwsk00.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvncwsk00.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted_list = count($l) == 0 ? array() : mergesort($l);\n\
    \    $length = count($sorted_list);\n    if ($length % 2 == 0) {\n        $first\
    \ = $sorted_list[$length / 2 - 1];\n        $second = $sorted_list[$length / 2];\n\
    \        return ($first + $second) / 2;\n    } else {\n        return $sorted_list[($length\
    \ - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mergesort() in\
    \ /tmp/tmp9pj4_gvw.php:8\nStack trace:\n#0 /tmp/tmp9pj4_gvw.php(20): median(Array)\n\
    #1 /tmp/tmp9pj4_gvw.php(24): candidate(Array)\n#2 /tmp/tmp9pj4_gvw.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9pj4_gvw.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n == 0) {\n        return 0;\n \
    \   }\n    else if ($n % 2 == 0) {\n        $i = $n / 2;\n        return ($l[$i\
    \ - 1] + $l[$i]) / 2;\n    }\n    else {\n        $i = ($n - 1) / 2;\n       \
    \ return $l[$i];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq9pufdv.php:27\n\
    Stack trace:\n#0 /tmp/tmpwq9pufdv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwq9pufdv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  if (count($l) % 2 == 0) {\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n  } else {\n    return $l[count($l) / 2];\n\
    \  }\n}\n\nassert(median([3, 1, 2, 4, 5]) == 3);\nassert(median([-10, 4, 6, 1000,\
    \ 10, 20]) == 15.0);\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nWarning: assert(): assert(median([-10, 4, 6, 1000, 10, 20]) == 15) failed\
    \ in /tmp/tmpj2hkxnjl.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpj2hkxnjl.php:25\nStack trace:\n#0 /tmp/tmpj2hkxnjl.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj2hkxnjl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    if (count($l) % 2 == 0) {\n        $m\
    \ = (count($l) / 2) - 1;\n        return ($l[$m] + $l[$m + 1]) / 2;\n    } else\
    \ {\n        $m = (count($l) - 1) / 2;\n        return $l[$m];\n    }\n}\n\nprint(median([-10,\
    \ 4, 6, 1000, 10, 20]) . \"\\n\");\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpobn7fzov.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpobn7fzov.php on\
    \ line 13\n\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpobn7fzov.php on line 9\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpobn7fzov.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobn7fzov.php:24\n\
    Stack trace:\n#0 /tmp/tmpobn7fzov.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpobn7fzov.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$mid = floor(count($l) / 2);\n\tif (count($l) %\
    \ 2 == 0) {\n\t\treturn ($l[$mid] + $l[$mid + 1]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$mid];\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7srl3l65.php:23\n\
    Stack trace:\n#0 /tmp/tmp7srl3l65.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7srl3l65.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2 == 0) {\n        return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n        return $l[count($l)\
    \ / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmosav_fb.php:22\n\
    Stack trace:\n#0 /tmp/tmpmosav_fb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmosav_fb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $sorted_list = sort_list($l);\n  $middle = intval(count($sorted_list)\
    \ / 2);\n  if (count($sorted_list) % 2 == 0) {\n    return ($sorted_list[$middle\
    \ - 1] + $sorted_list[$middle]) / 2;\n  } else {\n    return $sorted_list[$middle];\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpa3ya2jjg.php:8\nStack trace:\n#0 /tmp/tmpa3ya2jjg.php(18): median(Array)\n\
    #1 /tmp/tmpa3ya2jjg.php(22): candidate(Array)\n#2 /tmp/tmpa3ya2jjg.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa3ya2jjg.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $i = (count($l) - 1) / 2;\n    return ($l[floor($i)]\
    \ + $l[ceil($i)]) / 2;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57xpc9o1.php:19\n\
    Stack trace:\n#0 /tmp/tmp57xpc9o1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp57xpc9o1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\n$list = array(3, 1, 2, 4, 5);\necho\
    \ median($list);\necho \"\\n\";\n\n$list = array(-10, 4, 6, 1000, 10, 20);\necho\
    \ median($list);\necho \"\\n\";\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hiufz2a.php:30\n\
    Stack trace:\n#0 /tmp/tmp6hiufz2a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6hiufz2a.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz_6o84a.php:23\n\
    Stack trace:\n#0 /tmp/tmphz_6o84a.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphz_6o84a.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$len = count($l);\n\t// if $len is odd, do not add one. otherwise,\
    \ add one.\n\t// the point is to take the two middle elements and find the avg.\n\
    \t$middle = ($len % 2 == 0) ? 1 : 0;\n\t// the midpoint is the index of the middle\
    \ element.\n\t$midpoint = floor($len / 2);\n\t// sort $l\n\tsort($l);\n\t// return\
    \ the avg of the middle two elements.\n\treturn ($l[$midpoint - 1] + $l[$midpoint\
    \ + $middle]) / 2;\n}\n\n$l = array(3, 1, 2, 4, 5);\n$m = median($l);\nprint \"\
    median($l) = $m\\n\";\n\n$l = array(-10, 4, 6, 1000, 10, 20);\n$m = median($l);\n\
    print \"median($l) = $m\\n\";\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "median(Array) = 2.5\nmedian(Array) = 13\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp110hzpzu.php:33\nStack trace:\n#0 /tmp/tmp110hzpzu.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp110hzpzu.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t// Sort the array.\n\tsort($l);\n\t\n\t// Get the middle index.\n\
    \t$i = floor(count($l) / 2);\n\t\n\t// If the number of elements in the array\
    \ is even, then return the average\n\t// of the two middle elements.\n\tif (count($l)\
    \ % 2 == 0) {\n\t\treturn ($l[$i] + $l[$i - 1]) / 2;\n\t}\n\t\n\t// If the number\
    \ of elements in the array is odd, then return the middle\n\t// element.\n\treturn\
    \ $l[$i];\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyern8cnj.php:31\n\
    Stack trace:\n#0 /tmp/tmpyern8cnj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyern8cnj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    if (count($l) == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $len = count($l);\n    $half = $len / 2;\n    if ($len % 2 == 0) {\n    \
    \    return ($l[$half - 1] + $l[$half]) / 2;\n    } else {\n        return $l[$half];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpxzsude.php:27\n\
    Stack trace:\n#0 /tmp/tmpqpxzsude.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqpxzsude.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $mid = floor(count($l) / 2);\n    $sorted = $l;\n    sort($sorted);\n\
    \    if (count($l) % 2 == 0) {\n        return ($sorted[$mid] + $sorted[$mid -\
    \ 1]) / 2;\n    } else {\n        return $sorted[$mid];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoyp8r9u.php:24\n\
    Stack trace:\n#0 /tmp/tmpuoyp8r9u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuoyp8r9u.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // sort the list and pick the middle element\n    sort($l);\n\
    \    $count = count($l);\n    if ($count % 2 == 0) {\n        return ($l[$count\
    \ / 2] + $l[$count / 2 - 1]) / 2;\n    } else {\n        return $l[$count / 2];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34llycgi.php:24\n\
    Stack trace:\n#0 /tmp/tmp34llycgi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp34llycgi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[floor($len / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpgq9d_6.php:23\n\
    Stack trace:\n#0 /tmp/tmpvpgq9d_6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvpgq9d_6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\t$s =\
    \ $l[$n / 2] + $l[$n / 2 - 1];\n\t\treturn $s / 2;\n\t} else {\n\t\treturn $l[$n\
    \ / 2];\n\t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoruw2km.php:24\n\
    Stack trace:\n#0 /tmp/tmpcoruw2km.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcoruw2km.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $size = count($l);\n    sort($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$size / 2];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xi8vfor.php:23\n\
    Stack trace:\n#0 /tmp/tmp9xi8vfor.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9xi8vfor.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = quicksort($l);\n\t$size = count($l);\n\tif ($size % 2 ==\
    \ 0) {\n\t\t$median = ($l[($size/2)-1] + $l[$size/2]) / 2;\n\t} else {\n\t\t$median\
    \ = $l[floor($size/2)];\n\t}\n\treturn $median;\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quicksort() in\
    \ /tmp/tmpsi2u085k.php:8\nStack trace:\n#0 /tmp/tmpsi2u085k.php(19): median(Array)\n\
    #1 /tmp/tmpsi2u085k.php(23): candidate(Array)\n#2 /tmp/tmpsi2u085k.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsi2u085k.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $count = count($l);\n    $middle = floor($count\
    \ / 2);\n    if ($count % 2 == 0) {\n        return ($l[$middle - 1] + $l[$middle])\
    \ / 2;\n    } else {\n        return $l[$middle];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6z57to.php:24\n\
    Stack trace:\n#0 /tmp/tmpdn6z57to.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdn6z57to.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    if (count($l) % 2 == 0) {\n        return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n        return $l[count($l)\
    \ / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh04x8rh.php:22\n\
    Stack trace:\n#0 /tmp/tmpxh04x8rh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxh04x8rh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    $mid = intval($size\
    \ / 2);\n    return ($size % 2) ? $l[$mid] : ($l[$mid - 1] + $l[$mid]) / 2;\n\
    }\n\n$l = [3, 1, 2, 4, 5];\n$res = median($l);\necho $res . PHP_EOL;\n\n$l = [-10,\
    \ 4, 6, 1000, 10, 20];\n$res = median($l);\necho $res . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhywiytj.php:27\n\
    Stack trace:\n#0 /tmp/tmpmhywiytj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmhywiytj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Fill in the code here\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[(int)($n / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz6ufo1_.php:22\n\
    Stack trace:\n#0 /tmp/tmpvz6ufo1_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvz6ufo1_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[(int)($len / 2)];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfcgifml.php:23\n\
    Stack trace:\n#0 /tmp/tmpmfcgifml.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmfcgifml.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n \
    \       return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[floor($c / 2)];\n    }\n}\n\n$l = [3, 1, 2, 4, 5];\necho median($l), PHP_EOL;\n\
    $l = [-10, 4, 6, 1000, 10, 20];\necho median($l), PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_6zcgmm.php:27\n\
    Stack trace:\n#0 /tmp/tmph_6zcgmm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph_6zcgmm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n    $median\
    \ = 0;\n    $sortedArray = quicksort($l);\n    $len = count($sortedArray);\n \
    \   if($len % 2 == 0){\n        $middle = $len / 2;\n        $median = ($sortedArray[$middle]\
    \ + $sortedArray[$middle - 1]) / 2;\n    }else{\n        $middle = floor($len\
    \ / 2);\n        $median = $sortedArray[$middle];\n    }\n    return $median;\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quicksort() in\
    \ /tmp/tmpld2u56lc.php:12\nStack trace:\n#0 /tmp/tmpld2u56lc.php(25): median(Array)\n\
    #1 /tmp/tmpld2u56lc.php(29): candidate(Array)\n#2 /tmp/tmpld2u56lc.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpld2u56lc.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $x = sort($l);\n    $n = count($x);\n    if($n % 2 == 0) {\n\
    \        return ($x[$n/2] + $x[$n/2-1]) / 2;\n    } else {\n        return $x[($n-1)/2];\n\
    \    }\n}\n\n$l = array(3, 1, 2, 4, 5);\nprint_r(median($l));\n\n$l = array(-10,\
    \ 4, 6, 1000, 10, 20);\nprint_r(median($l));\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpodu0_e1v.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpodu0_e1v.php on\
    \ line 9\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpodu0_e1v.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpodu0_e1v.php:27\nStack trace:\n#0 /tmp/tmpodu0_e1v.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpodu0_e1v.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        $result = ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n    \
    \    $result = $l[(int)($len / 2)];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqr9_i0g.php:23\n\
    Stack trace:\n#0 /tmp/tmpcqr9_i0g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcqr9_i0g.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    // takes the length of $l\n    $l_length = count($l);\n  \
    \  // if the length of $l is 0, return null\n    if ($l_length == 0) {\n     \
    \   return null;\n    }\n    // sorts $l ascending by default\n    sort($l);\n\
    \    // if the length of $l is odd, gets the middle value, \n    // and returns\
    \ it\n    if ($l_length % 2 == 1) {\n        return $l[$l_length / 2];\n    }\n\
    \    // else, returns the average of the two middle values\n    return ($l[($l_length\
    \ / 2) - 1] + $l[$l_length / 2]) / 2;\n}\n\nfunction candidate(...$args) {\n \
    \   return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0_sthv7.php:31\n\
    Stack trace:\n#0 /tmp/tmpq0_sthv7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq0_sthv7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$c = count($l);\n\t$m = intval($c / 2);\n\treturn\
    \ ($c % 2) == 0 ? ($l[$m - 1] + $l[$m]) / 2 : $l[$m];\n}\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptitrt_8r.php:19\n\
    Stack trace:\n#0 /tmp/tmptitrt_8r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptitrt_8r.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $len = count($l);\n    $middle = $len / 2;\n    $l = merge_sort($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$middle] + $l[$middle - 1]) / 2;\n\
    \    } else {\n        return $l[floor($middle)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmp_hjlt8qh.php:10\nStack trace:\n#0 /tmp/tmp_hjlt8qh.php(19): median(Array)\n\
    #1 /tmp/tmp_hjlt8qh.php(23): candidate(Array)\n#2 /tmp/tmp_hjlt8qh.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_hjlt8qh.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        $index_1 = $len / 2;\n        $index_2 = $index_1 - 1;\n        return\
    \ ($l[$index_1] + $l[$index_2]) / 2;\n    } else {\n        $index = floor($len\
    \ / 2);\n        return $l[$index];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa6no9su.php:26\n\
    Stack trace:\n#0 /tmp/tmpsa6no9su.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsa6no9su.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$size / 2];\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77lg_2zy.php:22\n\
    Stack trace:\n#0 /tmp/tmp77lg_2zy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp77lg_2zy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$s = count($l);\n\tif (is_array($l) && $s > 0) {\n\t\t$mid =\
    \ floor($s / 2);\n\t\tsort($l);\n\t\tif ($s % 2) {\n\t\t\treturn $l[$mid];\n\t\
    \t} else {\n\t\t\treturn ($l[$mid] + $l[$mid - 1]) / 2;\n\t\t}\n\t}\n\treturn\
    \ null;\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31cyg98y.php:27\n\
    Stack trace:\n#0 /tmp/tmp31cyg98y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp31cyg98y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $half = floor(count($l) / 2);\n    if (count($l)\
    \ % 2 == 0) {\n        return ($l[$half - 1] + $l[$half]) / 2;\n    } else {\n\
    \        return $l[$half];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocyxcx7m.php:23\n\
    Stack trace:\n#0 /tmp/tmpocyxcx7m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpocyxcx7m.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $size = count($l);\n    if ($size % 2) {\n        return $l[$size\
    \ / 2];\n    } else {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9y_25mw.php:21\n\
    Stack trace:\n#0 /tmp/tmpc9y_25mw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc9y_25mw.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$len = count($l);\n\tif ($len == 0) {\n\t\treturn 0;\n\t}\n\t\
    sort($l);\n\tif ($len % 2 == 0) {\n\t\treturn ($l[$len / 2] + $l[$len / 2 - 1])\
    \ / 2;\n\t} else {\n\t\treturn $l[$len / 2];\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5b77kxb.php:26\n\
    Stack trace:\n#0 /tmp/tmpj5b77kxb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj5b77kxb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $len = count($l);\n  $midIdx = floor($len / 2);\n\
    \  if ($len % 2 == 0) {\n    return ($l[$midIdx - 1] + $l[$midIdx]) / 2;\n  }\
    \ else {\n    return $l[$midIdx];\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplixiht7v.php:24\n\
    Stack trace:\n#0 /tmp/tmplixiht7v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplixiht7v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  sort($l);\n  $n = count($l);\n  if ($n == 0) return null;\n\
    \  if ($n % 2 == 0) {\n    $i = floor($n / 2);\n    return ($l[$i] + $l[$i - 1])\
    \ / 2;\n  } else {\n    $i = floor($n / 2);\n    return $l[$i];\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1alkaeq5.php:26\n\
    Stack trace:\n#0 /tmp/tmp1alkaeq5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1alkaeq5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted_l = sort($l);\n    $count = count($l);\n    $mid =\
    \ intval($count / 2);\n    if ($count % 2 == 0) {\n        return ($l[$mid] +\
    \ $l[$mid - 1]) / 2;\n    } else {\n        return $l[$mid];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjskby9h.php:24\n\
    Stack trace:\n#0 /tmp/tmpyjskby9h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyjskby9h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n  $count = count($l);\n  if ($count % 2 == 0) {\n    $i = $count\
    \ / 2;\n    return ($l[$i] + $l[$i - 1]) / 2;\n  } else {\n    $i = ($count -\
    \ 1) / 2;\n    return $l[$i];\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdngm110n.php:23\n\
    Stack trace:\n#0 /tmp/tmpdngm110n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdngm110n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    return $l[count($l) / 2];\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv7nam78.php:18\n\
    Stack trace:\n#0 /tmp/tmpmv7nam78.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmv7nam78.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$count = count($l);\n\tif($count%2 == 0) {\n\t\treturn ($l[$count/2\
    \ - 1] + $l[$count/2])/2;\n\t} else {\n\t\treturn $l[($count-1)/2];\n\t}\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr03rgcy8.php:21\n\
    Stack trace:\n#0 /tmp/tmpr03rgcy8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr03rgcy8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
