name: HumanEval_15_string_sequence
language: php
results:
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfazdee3.php:16\n\
    Stack trace:\n#0 /tmp/tmpvfazdee3.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpvfazdee3.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $arr = range(0, $n);\n \
    \   return implode(' ', $arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$i = 0;\n\t$array = array();\n\
    \twhile ($i <= $n) {\n\t\tarray_push($array, $i);\n\t\t$i++;\n\t}\n\t$str = implode(\"\
    \ \", $array);\n\treturn $str;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $arr = range(0, $n);\n \
    \   $str = implode(\" \", $arr);\n    return $str;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tfor ($i = 0; $i <= $n; $i++)\
    \ {\n\t\t$new_string = \"\";\n\t\t$new_string .= strval($i);\n\t\t$new_string\
    \ .= \" \";\n\t\t$old_string .= $new_string;\n\t}\n\t$final_string = rtrim($old_string);\n\
    \treturn $final_string;\n}\necho(string_sequence(5));\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  if ($n == 0)\
    \ {\n    $str = '0';\n  } else {\n    for ($i = 0; $i <= $n; $i++) {\n      $str\
    \ .= ' ' . $i;\n    }\n  }\n  return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk4ygwqh.php:25\n\
    Stack trace:\n#0 /tmp/tmprk4ygwqh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprk4ygwqh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    } else {\n        return string_sequence($n - 1) . \" $n\";\n\
    \    }\n}\necho string_sequence(5);\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0 1 2 3 4 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhvs19iu.php:20\n\
    Stack trace:\n#0 /tmp/tmprhvs19iu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprhvs19iu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$s = \"\";\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$s .= $i;\n\t\tif ($i != $n) {\n\t\t\t$s .= \" \";\n\t\
    \t}\n\t}\n\treturn $s;\n}\n\necho string_sequence(0) . \"\\n\";\necho string_sequence(5)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = \"\";\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $str .= \"$i \";\n  }\n  $str = rtrim($str);\n  return\
    \ $str;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    $result .= \"$i \";\n  }\n  return rtrim($result);\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $start = 0;\n    $end =\
    \ $n;\n    $arr = range($start, $end);\n    $str = implode(' ', $arr);\n    return\
    \ $str;\n}\necho string_sequence(5);\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return range(0, $n);\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6b4rw_l6.php:16\n\
    Stack trace:\n#0 /tmp/tmp6b4rw_l6.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6b4rw_l6.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n    $result = 0;\n    for ($i = 0; $i <= $n; $i++)\
    \ {\n        $result = $result . ' ' . $i;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ozj_dj4.php:23\n\
    Stack trace:\n#0 /tmp/tmp2ozj_dj4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2ozj_dj4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= \"$i \";\n    }\n    return rtrim($result);\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $sequence = \"\";\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    $sequence .= $i . \" \";\n  }\n  return rtrim($sequence);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $result .= \"{$i} \";\n    }\n    return\
    \ rtrim($result);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $s = '';\n  for ($i = 0; $i\
    \ <= $n; $i++) {\n    $s .= \" $i\";\n  }\n  return trim($s);\n}\necho string_sequence(0);\n\
    echo \"\\n\";\necho string_sequence(5);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjutkanxe.php:16\n\
    Stack trace:\n#0 /tmp/tmpjutkanxe.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjutkanxe.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $string = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $string .= $i . \" \";\n    }\n    $string\
    \ = trim($string);\n    return $string;\n}\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  \n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wm246am.php:16\n\
    Stack trace:\n#0 /tmp/tmp3wm246am.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3wm246am.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $sequence .= \"$i \";\n    }\n    return\
    \ rtrim($sequence);\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jqhdyrr.php:16\n\
    Stack trace:\n#0 /tmp/tmp2jqhdyrr.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp2jqhdyrr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n==0) {\n    return \"\
    0\";\n  } else {\n    return string_sequence($n-1) . \" $n\";\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = array();\n \
    \   $i = 0;\n    while ($i <= $n) {\n        $sequence[] = $i;\n        $i++;\n\
    \    }\n    return implode(' ', $sequence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(\" \", range(0,\
    \ $n));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence_string = \"\"\
    ;\n    for ($i = 0; $i <= $n; $i++) {\n        $sequence_string .= \" $i\";\n\
    \    }\n    return ltrim($sequence_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n > 0) {\n\t\treturn\
    \ string_sequence($n - 1) . \" \" . $n;\n\t} else {\n\t\treturn 0;\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xmndwcg.php:19\n\
    Stack trace:\n#0 /tmp/tmp5xmndwcg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5xmndwcg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n==0) {\n    return '0';\n\
    \  } else {\n    return string_sequence($n-1).' '.$n;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $i = 0;\n    $result = \"\
    \";\n    while ($i <= $n) {\n        $result .= $i . \" \";\n        $i++;\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp185iy6ta.php:22\n\
    Stack trace:\n#0 /tmp/tmp185iy6ta.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp185iy6ta.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $sequence .= $i . \" \";\n    }\n    return\
    \ trim($sequence);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t// YOUR CODE GOES HERE\n \
    \   if ($n < 0) {\n        $n = 0;\n    }\n    $string_sequence = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $string_sequence .= $i . \" \";\n    }\n\
    \    return $string_sequence;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8mkt5tr.php:23\n\
    Stack trace:\n#0 /tmp/tmpw8mkt5tr.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpw8mkt5tr.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplia3wp16.php:14\n\
    Stack trace:\n#0 /tmp/tmplia3wp16.php(19): test()\n#1 {main}\n  thrown in /tmp/tmplia3wp16.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  for ($i = 0;\
    \ $i <= $n; $i++) {\n    $str .= \"$i \";\n  }\n  return $str;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6bjms83.php:20\n\
    Stack trace:\n#0 /tmp/tmpg6bjms83.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg6bjms83.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ \"0\";\n  }\n  else {\n    return string_sequence($n - 1) . \" \" . $n;\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tfor ($i = 0; $i <= $n; $i++)\
    \ {\n\t\techo $i . \" \";\n\t}\n}\nstring_sequence(5);\necho \"<br/>\";\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5 <br/>0 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlvewz0a.php:20\n\
    Stack trace:\n#0 /tmp/tmpdlvewz0a.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpdlvewz0a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $newString = \"\";\n   \
    \ for ($i = 0; $i <= $n; $i++) {\n        $newString .= $i;\n        if ($i !=\
    \ $n) {\n            $newString .= \" \";\n        }\n    }\n    return $newString;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= ' ' . $i;\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= $i . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // The function passes if\
    \ strlen($sequence) === ($n+1)*2\n  $sequence = '';\n  // Write your code here\n\
    \  for ($i = 0; $i <= $n; $i++) {\n    $sequence .= $i.' ';\n  }\n  return trim($sequence);\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = array();\n   \
    \ for ($i = 0; $i <= $n; $i++) {\n        $result[] = strval($i);\n    }\n   \
    \ return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n < 0) {\n        return;\n\
    \    }\n    if ($n === 0) {\n        return \"0\";\n    }\n    $result = \"\"\
    ;\n    for ($i = 0; $i <= $n; $i++) {\n        $result .= \" \".$i;\n    }\n \
    \   return trim($result);\n}\n\necho string_sequence(2).\"\\n\";\necho string_sequence(4).\"\
    \\n\";\necho string_sequence(10).\"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0 1 2\n0 1 2 3 4\n0 1 2 3 4 5 6 7 8 9 10\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t// this will be our output\n\
    \t$output = '';\n\t// go from 0 to n\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t//\
    \ add each number to the output string\n\t\t$output .= ' ' . $i;\n\t}\n\t// remove\
    \ the leading space\n\treturn substr($output, 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = '';\n    for ($i =\
    \ 0; $i <= $n; $i++) {\n        $s .= $i . ' ';\n    }\n    return $s;\n}\n\n\
    echo string_sequence(5);\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uoap7u1.php:22\n\
    Stack trace:\n#0 /tmp/tmp2uoap7u1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2uoap7u1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $string = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $string .= $i . \" \";\n    }\n    return\
    \ $string;\n}\necho string_sequence(5);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5 \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_jndm41.php:22\n\
    Stack trace:\n#0 /tmp/tmpq_jndm41.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq_jndm41.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return \"0\";\n    }\n    else {\n        return string_sequence($n - 1) . \"\
    \ \" . $n;\n    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$nums = '';\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$nums .= $i . ' ';\n\t}\n\treturn $nums;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9cyc202.php:20\n\
    Stack trace:\n#0 /tmp/tmpk9cyc202.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpk9cyc202.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return join(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // STUDENT-TODO\n  if ($n==0)\
    \ {\n    return \"0\";\n  }\n  else{\n    return string_sequence($n-1).\" $n\"\
    ;\n  }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = '';\n\tfor ($i =\
    \ 0; $i <= $n; $i++) {\n\t\t$result .= $i . ' ';\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfnswali.php:20\n\
    Stack trace:\n#0 /tmp/tmpbfnswali.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbfnswali.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // Fill in the missing code\n\
    \  $arr = array();\n  for ($i = 0; $i <= $n; $i++) {\n    $arr[] = $i;\n  }\n\
    \  return implode(\" \", $arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $string_sequence = '';\n\
    \    for ($i = 0; $i <= $n; $i++) {\n        $string_sequence .= $i . ' ';\n \
    \   }\n    return $string_sequence;\n}\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhw40mj1.php:19\n\
    Stack trace:\n#0 /tmp/tmprhw40mj1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprhw40mj1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $result .= $i . ' ';\n  }\n  return rtrim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $str .= $i . ' ';\n    }\n    return $str;\n\
    }\n\necho string_sequence(5);\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0 1 2 3 4 5 \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfwrec9g.php:22\n\
    Stack trace:\n#0 /tmp/tmpvfwrec9g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvfwrec9g.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = '';\n\tfor ($i =\
    \ 0; $i <= $n; $i++) {\n\t\t$result .= \"$i \";\n\t}\n\treturn rtrim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$x = \"\";\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$x .= \" $i\";\n\t}\n\treturn trim($x);\n}\necho string_sequence(5);\n\
    \nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // YOUR CODE HERE\n  if ($n\
    \ == 0) {\n    return 0;\n  }\n  return string_sequence($n - 1) . \" \" . $n;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vjbnk2p.php:20\n\
    Stack trace:\n#0 /tmp/tmp8vjbnk2p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8vjbnk2p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    }\n    return string_sequence($n - 1) . ' ' . $n;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t// your code here\n\tif ($n\
    \ == 0) {\n\t\treturn '0';\n\t}\n\telse if ($n > 0) {\n\t\t$seq = '';\n\t\tfor\
    \ ($i = 0; $i <= $n; $i++) {\n\t\t\t$seq .= $i . ' ';\n\t\t}\n\t\treturn trim($seq);\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n \
    \   return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= $i . ' ';\n    }\n    return rtrim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n   if ($n == 0) {\n      return\
    \ \"0\";\n   } else {\n      return string_sequence($n - 1) . \" $n\";\n   }\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $str .= $i . ' ';\n    }\n    return $str;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsxia4zh.php:20\n\
    Stack trace:\n#0 /tmp/tmpnsxia4zh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnsxia4zh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(\" \", range(0,\
    \ $n));\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ '0';\n\t}\n\telse {\n\t\treturn string_sequence($n - 1) . ' ' . $n;\n\t}\n}\n\
    \necho string_sequence(5);\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = \"\";\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $str .= $i;\n        if ($i != $n) {\n     \
    \       $str .= \" \";\n        }\n    }\n    return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else if ($n > 0) {\n    return string_sequence($n - 1) . ' ' . $n;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n < 0) {\n        return;\n\
    \    }\n    if ($n == 0) {\n        return '0';\n    }\n    return string_sequence($n\
    \ - 1) . ' ' . $n;\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $res = \"\";\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $res .= \"$i \";\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_jupdaq.php:20\n\
    Stack trace:\n#0 /tmp/tmpt_jupdaq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt_jupdaq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $result .= $i . \" \";\n    }\n    return\
    \ trim($result);\n}\n\nassert(string_sequence(0) == \"0\");\nassert(string_sequence(5)\
    \ == \"0 1 2 3 4 5\");\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n > 0) {\n        return\
    \ string_sequence($n - 1) . \" $n\";\n    } else {\n        return \"0\";\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = array();\n  $i =\
    \ 0;\n  while ($i <= $n) {\n    $result[] = $i;\n    $i++;\n  }\n  return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    }\n    else {\n        return string_sequence($n - 1) . ' '\
    \ . $n;\n    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\telse {\n\t\treturn string_sequence($n - 1) . \" \" . $n;\n\t}\n}\n\
    \necho string_sequence(0);\necho \"\\n\";\necho string_sequence(5);\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7coetxe0.php:25\n\
    Stack trace:\n#0 /tmp/tmp7coetxe0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7coetxe0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\n\necho string_sequence(5);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = \"\";\n\tfor ($i\
    \ = 0; $i <= $n; $i++) {\n\t\t$result .= \" $i\";\n\t}\n\treturn trim($result);\n\
    }\n\n$tests = array(\n\tarray(\n\t\t\"input\" => array(0),\n\t\t\"expected\" =>\
    \ '0',\n\t),\n\tarray(\n\t\t\"input\" => array(5),\n\t\t\"expected\" => '0 1 2\
    \ 3 4 5',\n\t),\n);\n\nforeach ($tests as $test) {\n\t$result = string_sequence($test[\"\
    input\"][0]);\n\tif ($result != $test[\"expected\"]) {\n\t\techo \"Test failed:\
    \ \" . var_export($test[\"input\"], true) . \" => $result instead of \" . var_export($test[\"\
    expected\"], true) . \"\\n\";\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = \"\";\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $str .= \" \".$i;\n  }\n  return $str;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnnc59dg.php:20\n\
    Stack trace:\n#0 /tmp/tmpgnnc59dg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgnnc59dg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    $str = string_sequence($n - 1);\n    return \"$str\
    \ $n\";\n}\necho string_sequence(0);\necho \"\\n\";\necho string_sequence(5);\n\
    \nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Your code here\n    $output_string\
    \ = '';\n    for ($i = 0; $i <= $n; $i++) {\n        $output_string .= \"$i \"\
    ;\n    }\n    return $output_string;\n}\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_5ctjy_.php:20\n\
    Stack trace:\n#0 /tmp/tmpp_5ctjy_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp_5ctjy_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tfor ($i = 0; $i <= $n; $i++){\n\
    \t\techo $i . ' ';\n\t}\n}\nstring_sequence(5);\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5 0 \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11zay9se.php:19\n\
    Stack trace:\n#0 /tmp/tmp11zay9se.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp11zay9se.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8c577q46.php:16\n\
    Stack trace:\n#0 /tmp/tmp8c577q46.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8c577q46.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return join(\" \",range(0,$n));\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  }\n  elseif ($n == 1) {\n    return '0 1';\n  }\n  else {\n    return\
    \ string_sequence($n - 1) . ' ' . $n;\n  }\n}\necho string_sequence(5);\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // INSERT YOUR CODE HERE\n\
    \    if($n==0){\n        $result=\"0\";\n    }else{\n        $result=string_sequence($n-1);\n\
    \        $result=$result.\" \";\n        $result=$result.$n;\n    }\n    return\
    \ $result;\n}\n\necho string_sequence(5);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    return string_sequence($n - 1) . ' ' . $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $sequence .= \"$i \";\n    }\n    return\
    \ trim($sequence);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ 0;\n  } else {\n    return string_sequence($n - 1) . \" \" . $n;\n  }\n}\necho\
    \ string_sequence(0) . PHP_EOL;\necho string_sequence(5) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhbnkrd8.php:21\n\
    Stack trace:\n#0 /tmp/tmpxhbnkrd8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxhbnkrd8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ \"0\";\n\t}\n\telse {\n\t\treturn string_sequence($n - 1) . \" \" . $n;\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n > 0) {\n    return\
    \ $n . ' ' . string_sequence($n - 1);\n  }\n  return $n;\n}\necho string_sequence(5);\n\
    echo '<br>';\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5 4 3 2 1 0<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86bdjval.php:21\n\
    Stack trace:\n#0 /tmp/tmp86bdjval.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp86bdjval.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ \"0\";\n\t} else {\n\t\treturn string_sequence($n - 1) . \" \" . $n;\n\t}\n\
    }\n\necho string_sequence(5);\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yxgd4i2.php:16\n\
    Stack trace:\n#0 /tmp/tmp6yxgd4i2.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6yxgd4i2.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return \"0\";\n    }\n    return string_sequence($n - 1) . \" $n\";\n}\necho\
    \ string_sequence(5);\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$s = \"\";\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$s .= \" \" . $i;\n\t}\n\treturn $s;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuasf7wp.php:19\n\
    Stack trace:\n#0 /tmp/tmpbuasf7wp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbuasf7wp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$s = \"\";\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$s .= \" \" . $i;\n\t}\n\treturn substr($s, 1);\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= \" $i\";\n    }\n    return trim($result);\n\
    }\n\n$cmd = basename(__FILE__);\n\n$usage = \"Usage: $cmd <N>\nPrints a string\
    \ containing space-delimited numbers from 0 to N inclusive.\";\n\n$longopts =\
    \ array(\n    \"help\",\n);\n\n$options = getopt(\"\", $longopts);\nif (isset($options['help']))\
    \ {\n    echo $usage;\n    exit(0);\n}\n\n$args = $argv;\narray_shift($args);\n\
    if (count($args) != 1) {\n    echo $usage;\n    exit(1);\n}\n\n$n = intval($args[0]);\n\
    echo string_sequence($n);\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Usage: tmpv_zl9fpe.php <N>\nPrints a string containing space-delimited\
    \ numbers from 0 to N inclusive."
  stderr: ''
  exit_code: 1
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    }\n    else {\n        return string_sequence($n - 1) . ' '\
    \ . $n;\n    }\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // YOUR CODE GOES HERE\n\
    \    $string_sequence = '';\n    for ($i = 0; $i <= $n; $i++) {\n        $string_sequence\
    \ .= $i;\n        if ($i < $n) {\n            $string_sequence .= ' ';\n     \
    \   }\n    }\n    return $string_sequence;\n}\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3iufo5sn.php:16\n\
    Stack trace:\n#0 /tmp/tmp3iufo5sn.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3iufo5sn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = '';\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $result .= $i . ' ';\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9uhq37l.php:20\n\
    Stack trace:\n#0 /tmp/tmph9uhq37l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph9uhq37l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n < 0) {\n        $space\
    \ = \" \";\n        $sequence = string_sequence($n+1);\n        return \"$sequence$n\"\
    ;\n    }\n    elseif ($n == 0) {\n        return \"$n\";\n    }\n    else {\n\
    \        $space = \" \";\n        $sequence = string_sequence($n-1);\n       \
    \ return \"$sequence$space$n\";\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ '0';\n\t}\n\treturn string_sequence($n - 1) . ' ' . $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= $i;\n        if ($i < $n) {\n   \
    \         $result .= ' ';\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    else {\n        return string_sequence($n - 1) . '\
    \ ' . $n;\n    }\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= \"$i \";\n    }\n    return rtrim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$str = '';\n\tfor ($i = 0;\
    \ $i <= $n; $i++) {\n\t\t$str .= $i . ' ';\n\t}\n\treturn $str;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l11p7w1.php:20\n\
    Stack trace:\n#0 /tmp/tmp_l11p7w1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_l11p7w1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n <= 0) {\n       \
    \ return '0';\n    }\n    return string_sequence($n - 1) . ' ' . $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $result .= \" \" . $i;\n    }\n    return\
    \ trim($result);\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvssxuud.php:15\n\
    Stack trace:\n#0 /tmp/tmpyvssxuud.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpyvssxuud.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $array = array();\n    $string\
    \ = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $array[] = $i;\n    }\n\
    \    foreach ($array as $item) {\n        $string .= $item;\n        $string .=\
    \ \" \";\n    }\n    return rtrim($string);\n}\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n === 0) {\n    return\
    \ \"0\";\n  } else {\n    return (string_sequence($n - 1) . \" \" . strval($n));\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $sequence .= \"$i \";\n    }\n    return\
    \ $sequence;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp843591p2.php:20\n\
    Stack trace:\n#0 /tmp/tmp843591p2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp843591p2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $res = \"\";\n    $i = 0;\n\
    \    while ($i <= $n) {\n        $res .= \" $i\";\n        $i += 1;\n    }\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zeqqu88.php:22\n\
    Stack trace:\n#0 /tmp/tmp7zeqqu88.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7zeqqu88.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $i = 0;\n    $ret = '';\n\
    \    while ($i <= $n) {\n        $ret .= $i . ' ';\n        $i++;\n    }\n   \
    \ return rtrim($ret);\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpephsn6bc.php:16\n\
    Stack trace:\n#0 /tmp/tmpephsn6bc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpephsn6bc.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return \"0\";\n    } else {\n        return string_sequence($n - 1) . \" $n\"\
    ;\n    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return string_sequence($n - 1) . ' ' . $n;\n  }\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $output = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $output .= \"$i \";\n    }\n    return trim($output);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(\" \", range(0,\
    \ $n));\n}\n\n$str_seq = string_sequence(5);\necho $str_seq . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $str = '';\n  $i = 0;\n  while\
    \ ($i <= $n) {\n    $str .= \" $i\";\n    $i++;\n  }\n  return ltrim($str);\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n > 0) {\n    return\
    \ string_sequence($n - 1) . \" $n\";\n  } else {\n    return '0';\n  }\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(\" \", range(0,\
    \ $n));\n}\necho string_sequence(0) . \"\\n\";\necho string_sequence(5) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $line = '';\n  for ($i = 0;\
    \ $i <= $n; $i++) {\n    $line .= \" $i\";\n  }\n  return ltrim($line);\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = [];\n\tfor ($i =\
    \ 0; $i <= $n; $i++) {\n\t\t$result[] = $i;\n\t}\n\treturn implode(' ', $result);\n\
    }\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(' ', range(0,\
    \ $n));\n}\n\n$test_cases = [\n    [\n        'input' => [0],\n        'expect'\
    \ => '0',\n    ],\n    [\n        'input' => [5],\n        'expect' => '0 1 2\
    \ 3 4 5',\n    ],\n];\n\nforeach ($test_cases as $test_case) {\n    extract($test_case);\n\
    \    $result = string_sequence(...$input);\n    if ($result !== $expect) {\n \
    \       echo \"Failed: string_sequence(\" . implode(', ', $input) . \") returned\
    \ {$result} instead of {$expect}\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    $num\
    \ = 0;\n    while ($num <= $n) {\n        $result .= \" $num\";\n        $num\
    \ += 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q22bpyw.php:22\n\
    Stack trace:\n#0 /tmp/tmp5q22bpyw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5q22bpyw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return '0';\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a0munml.php:17\n\
    Stack trace:\n#0 /tmp/tmp7a0munml.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp7a0munml.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    return string_sequence($n - 1) . ' ' . $n;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t// Write your code here\n\t\
    $result = \"\";\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$result .= $i . \" \";\n\
    \t}\n\treturn rtrim($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return implode(\" \", range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // Fill in this function\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf88f6xpv.php:16\n\
    Stack trace:\n#0 /tmp/tmpf88f6xpv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpf88f6xpv.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj3rha5l.php:16\n\
    Stack trace:\n#0 /tmp/tmpqj3rha5l.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqj3rha5l.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . $n;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    $result .= $i . \" \";\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptc97rjkw.php:20\n\
    Stack trace:\n#0 /tmp/tmptc97rjkw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptc97rjkw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$string_sequence = \"\";\n\
    \t\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$string_sequence .= $i . \" \";\n\t\
    }\n\t\n\treturn $string_sequence;\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf3pwg8r.php:22\n\
    Stack trace:\n#0 /tmp/tmpvf3pwg8r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvf3pwg8r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $seq_string = \"\";\n  for\
    \ ($i = 0; $i <= $n; $i++) {\n    $seq_string .= $i;\n    if ($i != $n) $seq_string\
    \ .= \" \";\n  }\n  return $seq_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    } else {\n        return string_sequence($n - 1) . ' ' . strval($n);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh32zlgb.php:16\n\
    Stack trace:\n#0 /tmp/tmpwh32zlgb.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwh32zlgb.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return string_sequence($n - 1) . ' ' . $n;\n  }\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = \"\";\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $result .= $i . \" \";\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8hmhokt.php:20\n\
    Stack trace:\n#0 /tmp/tmpl8hmhokt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl8hmhokt.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ \"0\";\n  }\n  return string_sequence($n - 1) . \" $n\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return (string) range(0, $n);\n\
    }\n\necho string_sequence(5);\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqnkaxi2.php:17\n\
    Stack trace:\n#0 /tmp/tmplqnkaxi2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmplqnkaxi2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // Write your code here...\n\
    \n}\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgmir841.php:16\n\
    Stack trace:\n#0 /tmp/tmpvgmir841.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpvgmir841.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ \"0\";\n\t}\n\telse {\n\t\treturn $n + string_sequence($n - 1);\n\t}\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk7ytxcz.php:22\n\
    Stack trace:\n#0 /tmp/tmpkk7ytxcz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkk7ytxcz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $s = '';\n    for ($i =\
    \ 0; $i <= $n; $i++) {\n        $s .= $i . ' ';\n    }\n    return $s;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdg3_zla.php:20\n\
    Stack trace:\n#0 /tmp/tmprdg3_zla.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprdg3_zla.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return join(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif($n == 0) {\n\t\treturn\
    \ '0';\n\t}\n\t\n\t$num = 0;\n\t$string = \"\";\n\t\n\twhile($num <= $n) {\n\t\
    \t$string .= \"$num \";\n\t\t$num++;\n\t}\n\t\n\treturn trim($string);\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $ret = \"\";\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $ret .= $i . \" \";\n    }\n    return trim($ret);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$i = 0;\n\t$result = '';\n\
    \twhile ($i <= $n) {\n\t\t$result .= $i;\n\t\tif ($i != $n) {\n\t\t\t$result .=\
    \ ' ';\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $str = '';\n    $i = 0;\n\
    \    while ($i <= $n) {\n        $str .= $i;\n        if ($i !== $n) {\n     \
    \       $str .= ' ';\n        }\n        $i++;\n    }\n    return $str;\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    $result .= \" $i\";\n  }\n  return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpli1rhz6t.php:15\n\
    Stack trace:\n#0 /tmp/tmpli1rhz6t.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpli1rhz6t.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n === 0) {\n    return\
    \ \"0\";\n  }\n  return string_sequence($n - 1) . \" \" . $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ \"0\";\n  } else {\n    return string_sequence($n - 1) . \" $n\";\n  }\n}\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Your code here\n    if($n\
    \ == 0){\n        return \"0\";\n    } else {\n        return string_sequence($n-1).\"\
    \ \".$n;\n    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvxeb1ly.php:16\n\
    Stack trace:\n#0 /tmp/tmpxvxeb1ly.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxvxeb1ly.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return string_sequence($n - 1) . ' ' . $n;\n  }\n}\necho\
    \ string_sequence(5);\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return '0';\n    }\n    return string_sequence($n - 1) . ' ' . $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $result = \"\";\n  $count\
    \ = 0;\n  while ($count <= $n) {\n    $result .= strval($count);\n    $result\
    \ .= \" \";\n    $count += 1;\n  }\n  return trim($result);\n}\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Use a for loop to concatenate\
    \ numbers upto n\n    $string = '';\n    for ($i = 0; $i <= $n; $i++) {\n    \
    \    $string .= \" $i\";\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn99w5r1q.php:21\n\
    Stack trace:\n#0 /tmp/tmpn99w5r1q.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn99w5r1q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $return = '';\n  for ($i =\
    \ 0; $i <= $n; $i++) {\n    $return .= $i . ' ';\n  }\n  return trim($return);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_29xxnbr.php:16\n\
    Stack trace:\n#0 /tmp/tmp_29xxnbr.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp_29xxnbr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return string_sequence($n - 1) . ' ' . $n;\n  }\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhaaklu5.php:16\n\
    Stack trace:\n#0 /tmp/tmpqhaaklu5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqhaaklu5.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  }\n  return string_sequence($n - 1) . ' ' . $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    return $n == 0 ? '0' : join('\
    \ ', range(0, $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tfor ($i = 0; $i <= $n; $i++)\
    \ {\n\t\t$result[] = $i;\n\t}\n\treturn implode(' ', $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= $i;\n        if ($i != $n) {\n  \
    \          $result .= ' ';\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ '0';\n\t} else {\n\t\treturn $n . ' ' . string_sequence($n - 1);\n\t}\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkkon7it.php:21\n\
    Stack trace:\n#0 /tmp/tmppkkon7it.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppkkon7it.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return string_sequence($n - 1) . ' ' . $n;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fij_c_5.php:16\n\
    Stack trace:\n#0 /tmp/tmp2fij_c_5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp2fij_c_5.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$result = \"\";\n\tfor ($i\
    \ = 0; $i <= $n; $i++) {\n\t\t$result .= $i . \" \";\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph30pevz0.php:20\n\
    Stack trace:\n#0 /tmp/tmph30pevz0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph30pevz0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$string = \"\";\n\tfor ($i\
    \ = 0; $i <= $n; $i++) {\n\t\t$string .= strval($i) . \" \";\n\t}\n\treturn $string;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2eahm6g.php:20\n\
    Stack trace:\n#0 /tmp/tmpe2eahm6g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpe2eahm6g.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  return implode(' ', range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return \"0\";\n    } else {\n        return $n + string_sequence($n - 1);\n\
    \    }\n}\necho string_sequence(0) . \"\\n\";\necho string_sequence(5) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1s53nnz.php:22\n\
    Stack trace:\n#0 /tmp/tmps1s53nnz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmps1s53nnz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) return '0';\n\
    \    else return string_sequence($n - 1) . ' ' . $n;\n}\n\necho string_sequence(0)\
    \ . \"\\n\";\necho string_sequence(5) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n    $ans = \"\";\n    for ($i = 0; $i <= $n; $i++)\
    \ {\n        $ans .= $i.\" \";\n    }\n    return trim($ans);\n}\n\n$__fp = fopen(\"\
    php://stdin\", \"r\");\n\nfscanf($__fp, \"%d\", $_n);\n$res = string_sequence($_n);\n\
    print ($res);\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '0'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\treturn implode(\" \", range(0,\
    \ $n));\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n == 0) {\n    return\
    \ '0';\n  } else {\n    return $n . ' ' . string_sequence($n - 1);\n  }\n}\n\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jep7wud.php:21\n\
    Stack trace:\n#0 /tmp/tmp6jep7wud.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6jep7wud.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else {\n        return string_sequence($n - 1) . \" $n\";\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx5aooah.php:20\n\
    Stack trace:\n#0 /tmp/tmpfx5aooah.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfx5aooah.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $string = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $string .= $i;\n        if ($i < $n) {\n   \
    \         $string .= ' ';\n        }\n    }\n    return $string;\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  if ($n > 0) {\n    return\
    \ string_sequence($n - 1) . \" $n\";\n  } else {\n    return \"0\";\n  }\n}\n\
    echo string_sequence(5);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0 1 2 3 4 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa59fvuui.php:15\n\
    Stack trace:\n#0 /tmp/tmpa59fvuui.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpa59fvuui.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $retval = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $retval .= \"$i \";\n    }\n    return $retval;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1ei_ilr.php:20\n\
    Stack trace:\n#0 /tmp/tmpn1ei_ilr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn1ei_ilr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $seq = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $seq .= $i . ' ';\n    }\n    return $seq;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l4tni77.php:20\n\
    Stack trace:\n#0 /tmp/tmp3l4tni77.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3l4tni77.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= strval($i) . ' ';\n    }\n    return\
    \ rtrim($result);\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ \"0\";\n\t}\n\treturn string_sequence($n - 1) . \" $n\";\n}\n\nprint(string_sequence(5));\n\
    function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  // $i = 0;\n  // $s = \"\"\
    ;\n  // while ($i <= $n) {\n  //   $s = $s . ' ' . $i;\n  //   $i = $i + 1;\n\
    \  // }\n  // return substr($s, 1);\n\n  $a = array();\n  $i = 0;\n  while ($i\
    \ <= $n) {\n    $a[] = $i;\n    $i = $i + 1;\n  }\n  return implode(' ', $a);\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    if ($n === 0) {\n      \
    \  return '0';\n    }\n    $str = '';\n    for ($i = 0; $i <= $n; $i++) {\n  \
    \      $str .= $i . ' ';\n    }\n    return rtrim($str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $output = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $output .= $i . ' ';\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsfhc47e.php:20\n\
    Stack trace:\n#0 /tmp/tmpjsfhc47e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjsfhc47e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n\t$s = '';\n\t$i = 0;\n\twhile($i\
    \ <= $n) {\n\t\t$s .= $i . ' ';\n\t\t$i++;\n\t}\n\treturn $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ykquxbu.php:22\n\
    Stack trace:\n#0 /tmp/tmp2ykquxbu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2ykquxbu.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    // base case\n    if ($n\
    \ === 0) {\n        return '0';\n    } else {\n        return string_sequence($n\
    \ - 1) . ' ' . $n;\n    }\n}\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $result = '';\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result .= $i;\n        if ($i != $n) {\n  \
    \          $result .= ' ';\n        }\n    }\n    return $result;\n}\n\necho string_sequence(5);\n\
    echo '<br/>';\necho string_sequence(0);\necho '<br/>';\necho string_sequence(100);\n\
    echo '<br/>';\n\nfunction candidate(...$args) {\n    return string_sequence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0 1 2 3 4 5<br/>0<br/>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
    20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
    46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97
    98 99 100<br/>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n    $numbers = [];\n    for\
    \ ($i = 0; $i <= $n; $i++) {\n        $numbers[] = $i;\n    }\n    return implode('\
    \ ', $numbers);\n}\n\necho string_sequence(0);\necho '<br>';\necho string_sequence(5);\n\
    echo '<br>';\necho string_sequence(1);\necho '<br>';\necho string_sequence(2);\n\
    echo '<br>';\necho string_sequence(4);\necho '<br>';\necho string_sequence(6);\n\
    echo '<br>';\necho string_sequence(7);\necho '<br>';\necho string_sequence(8);\n\
    echo '<br>';\necho string_sequence(10);\necho '<br>';\necho string_sequence(12);\n\
    echo '<br>';\necho string_sequence(15);\necho '<br>';\necho string_sequence(20);\n\
    echo '<br>';\necho string_sequence(21);\necho '<br>';\necho string_sequence(25);\n\
    echo '<br>';\necho string_sequence(30);\necho '<br>';\necho string_sequence(40);\n\
    echo '<br>';\necho string_sequence(50);\necho '<br>';\necho string_sequence(60);\n\
    echo '<br>';\necho string_sequence(70);\necho '<br>';\necho string_sequence(80);\n\
    echo '<br>';\necho string_sequence(90);\necho '<br>';\necho string_sequence(99);\n\
    echo '<br>';\necho string_sequence(100);\necho '<br>';\necho string_sequence(999);\n\
    echo '<br>';\necho string_sequence(1000);\necho '<br>';\necho string_sequence(10000);\n\
    echo '<br>';\necho string_sequence(100000);\necho '<br>';\necho string_sequence(1000000);\n\
    echo '<br>';\necho string_sequence(10000000);\necho '<br>';\necho string_sequence(100000000);\n\
    echo '<br>';\necho string_sequence(\nfunction candidate(...$args) {\n    return\
    \ string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0)\
    \ !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3)\
    \ !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp19nemfsg.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n\
    // '0 1 2 3 4 5'\nfunction string_sequence($n) {\n  $stringSequence = '';\n  for\
    \ ($index = 0; $index <= $n; $index++) {\n    $stringSequence .= strval($index)\
    \ . ' ';\n  }\n  return trim($stringSequence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
