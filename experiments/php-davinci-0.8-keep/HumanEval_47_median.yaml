name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\n// >>> median([3, 1,\
  \ 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    // sort l\n    sort($l);\n    // get number of elements in l\n\
    \    $len = count($l);\n    // return median\n    if($len % 2 == 0) {\n      \
    \  return ($l[$len/2] + $l[$len/2-1]) / 2;\n    } else {\n        return $l[$len/2];\n\
    \    }\n}\n", "    if (empty($l)) {\n        return 0;\n    }\n    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[($len/2)-1]\
    \ + $l[$len/2]) / 2;\n    } else {\n        return $l[($len-1)/2];\n    }\n}",
  "\t$count = count($l);\n\tif ($count % 2 == 0) {\n\t\t$median = ($l[floor($count\
    \ / 2)] + $l[floor($count / 2) - 1]) / 2;\n\t} else {\n\t\t$median = $l[floor($count\
    \ / 2)];\n\t}\n\treturn $median;\n}", "  sort($l); // sort the list.\n  $length\
    \ = count($l);\n  $even = ($length % 2 == 0);\n  $index = $length / 2;\n  if ($even)\
    \ {\n    return ($l[$index] + $l[$index - 1]) / 2;\n  } else {\n    return $l[$index];\n\
    \  }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\necho median([-10, 4, 6, 1000, 10, 20]);", "    $l2 = $l;\n\
    \    sort($l2);\n    return $l2[floor(count($l2) / 2)];\n}\n", "  // INSERT YOUR\
    \ CODE HERE.\n  if(count($l) % 2 != 0){\n    $midIndex = (count($l) - 1) / 2;\n\
    \    return $l[$midIndex];\n  }else{\n    $midIndex = count($l) / 2;\n    return\
    \ ($l[$midIndex] + $l[$midIndex - 1]) / 2;\n  }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[floor($n / 2)] + $l[floor($n\
    \ / 2) - 1]) / 2;\n    } else {\n        return $l[floor($n / 2)];\n    }\n}\n",
  "    $v = count($l);\n    sort($l);\n    if ($v % 2 == 0) {\n        return ($l[$v\
    \ / 2] + $l[$v / 2 - 1]) / 2;\n    } else {\n        return $l[floor($v / 2)];\n\
    \    }\n}", "    sort($l);\n    $s = sizeof($l);\n    if($s % 2 == 0) {\n    \
    \    return ($l[$s/2] + $l[$s/2 - 1]) / 2;\n    } else {\n        return $l[floor($s/2)];\n\
    \    }\n}\n", "    sort($l);\n    $l = array_values($l);\n    $length = count($l);\n\
    \    if ($length % 2 == 0) {\n        return ($l[$length / 2] + $l[$length / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($length - 1) / 2];\n    }\n}\n",
  "\t$count = count($l);\n\t$mid = floor($count / 2);\n\tif ($count % 2 == 0) {\n\t\
    \treturn ($l[$mid] + $l[$mid - 1]) / 2;\n\t} else {\n\t\treturn $l[$mid];\n\t\
    }\n}\n", "    $sorted_list = sort($l);\n    $length = count($sorted_list);\n \
    \   if ($length % 2 == 0) {\n        return ($sorted_list[intval($length / 2)\
    \ - 1] + $sorted_list[intval($length / 2)]) / 2;\n    } else {\n        return\
    \ $sorted_list[intval($length / 2)];\n    }\n}\n", "    // >>> sorted([3, 1, 2,\
    \ 4, 5])\n    // [1, 2, 3, 4, 5]\n    $sorted = sort($l);\n    $len = count($sorted);\n\
    \    $half = floor($len / 2);\n    if ($len % 2 == 0) {\n        return ($sorted[$half\
    \ - 1] + $sorted[$half]) / 2;\n    } else {\n        return $sorted[$half];\n\
    \    }\n}\n\nif ($argc < 2) {\n    echo \"Usage: median.php <list>\\n\";\n   \
    \ exit(1);\n}\n\n$arr = array_map(function($str) {\n    return intval($str);\n\
    }, explode(',', $argv[1]));\necho median($arr) . \"\\n\";", "  $sorted = sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\necho \"Median is\
    \ \" . median([3, 1, 2, 4, 5]) . \"\\n\";\necho \"Median is \" . median([-10,\
    \ 4, 6, 1000, 10, 20]) . \"\\n\";", "    $l1 = $l;\n    sort($l1);\n    if (sizeof($l1)\
    \ % 2 == 0) {\n        return (($l1[sizeof($l1) / 2] + $l1[sizeof($l1) / 2 - 1])\
    \ / 2);\n    } else {\n        return $l1[sizeof($l1) / 2];\n    }\n}\n", "  sort($l);\n\
    \  $len = count($l);\n  if ($len % 2 == 0) {\n    $m = ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n  } else {\n    $m = $l[($len - 1) / 2];\n  }\n  return $m;\n\
    }\n", "    sort($l);\n    $c = count($l);\n    $half = intval($c / 2);\n    if\
    \ ($c % 2 == 0) {\n        return ($l[$half - 1] + $l[$half]) / 2;\n    } else\
    \ {\n        return $l[$half];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    $m = $len / 2;\n    if ($len % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n  \
    \  $size = count($l);\n    $m = ($size % 2) ? $l[(int)($size / 2)] : ($l[(int)($size\
    \ / 2) - 1] + $l[(int)($size / 2)]) / 2;\n    return $m;\n}\necho median([3, 1,\
    \ 2, 4, 5]);\necho PHP_EOL;\necho median([-10, 4, 6, 1000, 10, 20]);\necho PHP_EOL;",
  "    sort($l);\n    $count = count($l);\n    if ($count % 2 == 0) {\n        return\
    \ ($l[$count / 2] + $l[$count / 2 - 1]) / 2;\n    } else {\n        return $l[($count\
    \ - 1) / 2];\n    }\n}", "    sort($l);\n    $i = (int)(count($l) / 2);\n    if\
    \ (count($l) % 2 == 0) {\n        return ($l[$i] + $l[$i - 1]) / 2;\n    } else\
    \ {\n        return $l[$i];\n    }\n}", "\t// BEGIN\n\tsort($l);\n\t$n = count($l);\n\
    \t$ind = $n / 2;\n\tif ($n % 2) {\n\t\treturn $l[$ind];\n\t} else {\n\t\treturn\
    \ ($l[$ind - 1] + $l[$ind]) / 2;\n\t}\n\t// END\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", " \
    \   $l = quick_sort($l);\n    $i = floor(count($l) / 2);\n    if (count($l) %\
    \ 2 == 0) {\n        return ($l[$i - 1] + $l[$i]) / 2;\n    } else {\n       \
    \ return $l[$i];\n    }\n}\n", "  $temp = $l;\n  sort($temp);\n  $mid = floor(count($temp)\
    \ / 2);\n  if (count($temp) % 2 != 0) {\n    return $temp[$mid];\n  } else {\n\
    \    return ($temp[$mid] + $temp[$mid-1]) / 2;\n  }\n}", "  $n = count($l);\n\
    \  $m = floor($n / 2);\n  if ($n % 2 == 0) {\n    return ($l[$m - 1] + $l[$m])\
    \ / 2;\n  } else {\n    return $l[$m];\n  }\n}", "    sort($l);\n    $l_len =\
    \ count($l);\n    if ($l_len % 2 == 0) {\n        return ($l[floor($l_len / 2)\
    \ - 1] + $l[floor($l_len / 2)]) / 2;\n    } else {\n        return $l[floor($l_len\
    \ / 2)];\n    }\n}\n", "    $sortedList = sortNumbers($l);\n    $count = count($sortedList);\n\
    \    if($count % 2 == 0) {\n        $medianIndex = floor($count / 2);\n      \
    \  return ($sortedList[$medianIndex] + $sortedList[$medianIndex - 1]) / 2;\n \
    \   } else {\n        $medianIndex = floor($count / 2);\n        return $sortedList[$medianIndex];\n\
    \    }\n}\n", "  sort($l);\n  $s = count($l);\n  if ($s % 2 == 0) {\n    $r =\
    \ $l[($s / 2) - 1] + $l[$s / 2];\n    return $r / 2;\n  } else {\n    return $l[($s\
    \ - 1) / 2];\n  }\n}\n", "    // Return median of elements in the list l.\n  \
    \  sort($l);\n    $count = count($l);\n    $half = floor($count / 2);\n    if\
    \ ($count % 2) {\n        return $l[$half];\n    } else {\n        return ($l[$half\
    \ - 1] + $l[$half]) / 2;\n    }\n}\necho \"median([3, 1, 2, 4, 5]) = \" . median([3,\
    \ 1, 2, 4, 5]) . PHP_EOL;\necho \"median([-10, 4, 6, 1000, 10, 20]) = \" . median([-10,\
    \ 4, 6, 1000, 10, 20]) . PHP_EOL;\necho PHP_EOL;", "\tsort($l);\n\t$len = count($l);\n\
    \t$pos = floor($len / 2);\n\treturn ($len % 2 == 0) ? ($l[$pos] + $l[$pos - 1])\
    \ / 2 : $l[$pos];\n}\n", "    $r = $l;\n    sort($r);\n    $N = count($r);\n \
    \   if ($N % 2 === 0) {\n        return ($r[$N / 2] + $r[$N / 2 - 1]) / 2;\n \
    \   } else {\n        return $r[($N - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    if (count($l) % 2) {\n        return $l[(count($l) - 1) / 2];\n    } else\
    \ {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n\
    }\n", "    sort($l);\n    $c = count($l);\n    if ($c % 2 == 0) {\n        return\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[floor($c\
    \ / 2)];\n    }\n}\n$n = fgets(STDIN);\n$l = explode(\" \", fgets(STDIN));\nsort($l);\n\
    $c = count($l);\nif ($c % 2 == 0) {\n    echo ($l[$c / 2] + $l[$c / 2 - 1]) /\
    \ 2;\n} else {\n    echo $l[floor($c / 2)];\n}", "    // TODO: Fill in the function.\n\
    }", "\treturn ave( sort( $l ) );\n}\n", "  if (!$l) {\n    return null;\n  }\n\
    \  if (count($l) % 2 == 0) {\n    return ($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n  } else {\n    return $l[(count($l) - 1) / 2];\n  }\n}\n", "  \
    \  sort($l);\n    $ll = count($l);\n    if($ll == 0) {\n        return null;\n\
    \    }\n    if($ll % 2 == 0) {\n        return ($l[$ll / 2] + $l[$ll / 2 - 1])\
    \ / 2;\n    }\n    return $l[$ll / 2];\n}\n", "    sort($l);\n    $h = count($l);\n\
    \    if($h % 2 == 0) {\n        return (($l[$h/2] + $l[$h/2 - 1]) / 2);\n    }\
    \ else {\n        return $l[($h - 1) / 2];\n    }\n}\n", "\tsort($l);\n\tif (sizeof($l)\
    \ % 2 == 0) {\n\t\t$mid1 = sizeof($l) / 2;\n\t\t$mid2 = $mid1 - 1;\n\t\treturn\
    \ ($l[$mid1] + $l[$mid2]) / 2;\n\t} else {\n\t\t$mid = floor(sizeof($l) / 2);\n\
    \t\treturn $l[$mid];\n\t}\n}", "    $sorted = $l;\n    sort($sorted);\n    return\
    \ $sorted[(int)(count($sorted) / 2)];\n}\n\necho '<pre>';\nprint_r(median([3,\
    \ 1, 2, 4, 5]));\nprint_r(median([-10, 4, 6, 1000, 10, 20]));\necho '</pre>';",
  "  // Complete this function.\n  $len = count($l);\n  $result = 0;\n  if ($len %\
    \ 2 == 0) {\n    $result = ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n  } else {\n\
    \    $result = $l[$len / 2];\n  }\n  return $result;\n}\n", "    sort($l);\n \
    \   $l_count = count($l);\n    $l_median = ($l_count - 1) / 2;\n    if ($l_count\
    \ % 2) {\n        return $l[$l_median];\n    } else {\n        return ($l[$l_median]\
    \ + $l[$l_median + 1]) / 2;\n    }\n}\n", "\tsort($l);\n\t$middle = floor(count($l)\
    \ / 2);\n\t$median = ($l[$middle-1] + $l[$middle]) / 2;\n\treturn $median;\n}\n",
  "\tif (!$l) {\n\t\treturn null;\n\t}\n\t$len = count($l);\n\tsort($l);\n\tif ($len\
    \ % 2 == 0) {\n\t\treturn ($l[intval($len / 2)] + $l[intval($len / 2) - 1]) /\
    \ 2;\n\t} else {\n\t\treturn $l[intval($len / 2)];\n\t}\n}\n", "    return 0;\n\
    }\n", "    // return 1;\n    // return $l[0];\n    $n = count($l);\n    if ($n\
    \ % 2)\n        return $l[($n - 1) / 2];\n    else\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n}\n\n$l = [3, 1, 2, 4, 5];\n$m = median($l);\necho $m\
    \ . PHP_EOL;\n\n$l = [-10, 4, 6, 1000, 10, 20];\n$m = median($l);\necho $m . PHP_EOL;",
  "    sort($l);\n    return count($l) % 2 === 0 ? ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2 : $l[count($l) / 2];\n}", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        $median = ($l[($len - 1) / 2] + $l[$len / 2])\
    \ / 2;\n    } else {\n        $median = $l[($len - 1) / 2];\n    }\n    return\
    \ $median;\n}\n", "  // +++your code here+++\n  sort($l);\n  $count = count($l);\n\
    \  if ($count % 2 == 0) {\n    $middle = ($count / 2) - 1;\n    return ($l[$middle]\
    \ + $l[$middle + 1]) / 2;\n  } else {\n    $middle = floor($count / 2);\n    return\
    \ $l[$middle];\n  }\n}\n\n$input = [3, 1, 2, 4, 5];\necho 'Median: ' . median($input)\
    \ . PHP_EOL;\n$input = [-10, 4, 6, 1000, 10, 20];\necho 'Median: ' . median($input)\
    \ . PHP_EOL;", "    return count($l) % 2 == 0 ? ($l[floor(count($l) / 2)] + $l[floor(count($l)\
    \ / 2) - 1]) / 2 : $l[floor(count($l) / 2)];\n}", "\t$len = count($l);\n\tif ($len\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\t$mid = (int)($len / 2);\n\tif ($len\
    \ % 2 == 0) {\n\t\treturn ($l[$mid] + $l[$mid - 1]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$mid];\n\t}\n}\n", "  $arr = $l;\n  sort($arr);\n  if (count($arr)%2 == 0)\
    \ {\n    $idx1 = (count($arr)/2)-1;\n    $idx2 = (count($arr)/2);\n    return\
    \ ($arr[$idx1] + $arr[$idx2])/2;\n  } else {\n    $idx = (count($arr)-1)/2;\n\
    \    return $arr[$idx];\n  }\n}\n", "    $sorted = $l;\n    sort($sorted);\n \
    \   $len = count($sorted);\n    $half = intval($len / 2);\n    if ($len % 2 ==\
    \ 0) {\n        return floatval(($sorted[$half] + $sorted[$half - 1]) / 2);\n\
    \    } else {\n        return floatval($sorted[$half]);\n    }\n}\n", "    sort($l);\n\
    \    $c = count($l);\n    if ( $c % 2 == 0 ) {\n        return ($l[$c/2] + $l[$c/2\
    \ - 1]) / 2;\n    } else {\n        return $l[($c-1)/2];\n    }\n}", "    if (empty($l))\
    \ {\n        return null;\n    }\n    sort($l);\n    if (count($l) % 2 === 0)\
    \ {\n        $i = intval(count($l) / 2);\n        return ($l[$i] + $l[$i-1]) /\
    \ 2;\n    } else {\n        $i = intval(count($l) / 2);\n        return $l[$i];\n\
    \    }\n}\n", "    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[floor($size / 2)];\n    }\n}\n", "    $sorted = $l;\n    sort($sorted);\n\
    \    $length = count($sorted);\n    if ($length % 2 == 0) {\n        return ($sorted[$length\
    \ / 2] + $sorted[$length / 2 - 1]) / 2;\n    } else {\n        return $sorted[$length\
    \ / 2];\n    }\n}\necho \"--- Median of [1, 2, 3, 4, 5] ---\\n\";\nvar_dump(median([1,\
    \ 2, 3, 4, 5]));\necho \"--- Median of [1, 2, 3, 4, 5, 6] ---\\n\";\nvar_dump(median([1,\
    \ 2, 3, 4, 5, 6]));\n", "\tif (count($l) === 0) {\n\t\treturn 0;\n\t}\n\t$l =\
    \ sort($l);\n\t$half = count($l) / 2;\n\tif (count($l) % 2 === 0) {\n\t\t$s =\
    \ $l[$half - 1] + $l[$half];\n\t\treturn $s / 2;\n\t}\n\treturn $l[$half];\n}\n",
  "\tif (is_empty($l)) {\n\t\treturn 0;\n\t}\n\t$median = 0;\n\tif ((count($l) % 2)\
    \ == 0) {\n\t\t$idx = count($l) / 2;\n\t\t$v1 = array_values($l)[$idx - 1];\n\t\
    \t$v2 = array_values($l)[$idx];\n\t\t$median = ($v1 + $v2) / 2;\n\t} else {\n\t\
    \t$idx = count($l) / 2;\n\t\t$median = array_values($l)[$idx];\n\t}\n\treturn\
    \ $median;\n}\n", "    if (empty($l)) {\n        return NULL;\n    }\n    sort($l);\n\
    \    if (count($l) % 2 == 0) {\n        return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n",
  "\tsort($l);\n\t$count = count($l);\n\tif ($count % 2 == 0) {\n\t\t$m1 = $l[$count\
    \ / 2];\n\t\t$m2 = $l[$count / 2 - 1];\n\t\treturn ($m1 + $m2) / 2;\n\t} else\
    \ {\n\t\treturn $l[($count - 1) / 2];\n\t}\n}\n", "  $l2 = $l;\n  sort($l2);\n\
    \  $c = count($l2);\n  if ($c % 2 == 0) {\n    return ($l2[$c / 2] + $l2[$c /\
    \ 2 - 1]) / 2;\n  } else {\n    return $l2[($c - 1) / 2];\n  }\n}\n\nvar_dump(median([3,\
    \ 1, 2, 4, 5]));\nvar_dump(median([-10, 4, 6, 1000, 10, 20]));", "    sort($l);\n\
    \    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n      \
    \  return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return $l[$m];\n \
    \   }\n}\n", "    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len%2 == 0) {\n        return ($sorted[$len/2-1] + $sorted[$len/2])/2;\n\
    \    } else {\n        return $sorted[($len-1)/2];\n    }\n}\n", "    if (count($l)\
    \ % 2 == 0) {\n        $middle = count($l) / 2;\n        return ($l[$middle -\
    \ 1] + $l[$middle]) / 2;\n    } else {\n        $middle = count($l) / 2;\n   \
    \     return $l[$middle];\n    }\n}\n", "\t// INSERT YOUR CODE HERE\n}", "   \
    \ sort($l);\n    $len = count($l);\n    $mid = $len / 2;\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return\
    \ $l[$mid];\n    }\n}\n", "    // Fill in your answer here.\n    $sorted_l = [];\n\
    \    foreach ($l as $val) {\n        $sorted_l[] = $val;\n    }\n    sort($sorted_l);\n\
    \    return $sorted_l[count($sorted_l) / 2];\n}\n", "  $len = count($l);\n  $index1\
    \ = (int)($len / 2);\n  $index2 = ($len % 2 == 0) ? $index1 - 1 : $index1;\n \
    \ return ($l[$index1] + $l[$index2]) / 2;\n}\n", "  $n = count($l);\n  sort($l);\n\
    \  $mid = floor($n / 2);\n  if ($n % 2) {\n    return $l[$mid];\n  } else {\n\
    \    return ($l[$mid] + $l[$mid - 1]) / 2;\n  }\n}\n", "  if (count($l) == 0)\
    \ {\n    return 0;\n  }\n  $nl = array_unique($l);\n  $sorted_nl = $nl;\n  sort($sorted_nl);\n\
    \  $l_len = count($sorted_nl);\n  if ($l_len % 2 == 0) {\n    $m1 = $sorted_nl[$l_len\
    \ / 2 - 1];\n    $m2 = $sorted_nl[$l_len / 2];\n    return ($m1 + $m2) / 2;\n\
    \  } else {\n    return $sorted_nl[$l_len / 2];\n  }\n}", "    $n = count($l);\n\
    \    $mid = floor($n / 2);\n    sort($l);\n    if ($n % 2 === 0) {\n        return\
    \ ($l[$mid] + $l[$mid - 1]) / 2;\n    } else {\n        return $l[$mid];\n   \
    \ }\n}\n", "    $count = count($l);\n    $median = 0;\n    $even = true;\n   \
    \ if ($count % 2 != 0) {\n        $median = $l[($count-1)/2];\n        $even =\
    \ false;\n    }\n    if ($even) {\n        $median = ($l[$count/2] + $l[$count/2\
    \ - 1]) / 2;\n    }\n    return $median;\n}\n", "\t$m = count($l) / 2;\n\t\n\t\
    if (count($l) % 2) {\n\t\treturn $l[$m];\n\t} else {\n\t\treturn ($l[$m - 1] +\
    \ $l[$m]) / 2;\n\t}\n}\n", "    $l = sort_list($l);\n    $n = count($l);\n   \
    \ if ($n % 2 == 0) {\n        $m = ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        $m = $l[floor($n / 2)];\n    }\n    return $m;\n}\n", "    if (count($l)\
    \ == 0) {\n        return null;\n    }\n    sort($l);\n    $c = count($l);\n \
    \   if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n  \
    \  } else {\n        return $l[floor($c / 2)];\n    }\n}\n", "    $m = floor(count($l)\
    \ / 2);\n    if (count($l) % 2 === 0) {\n        return ($l[$m] + $l[$m - 1])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    // TODO: Change\
    \ the next line to use $l instead of [0, 1, 2, 3, 4, 5]\n    if ($l == array())\
    \ {\n        return 0;\n    }\n    if (count($l) % 2 == 0) {\n        $temp_l\
    \ = array();\n        for ($i = 0; $i < count($l); $i++) {\n            $temp_l[$i]\
    \ = $l[$i];\n        }\n        sort($temp_l);\n        $sum = $temp_l[intval(count($temp_l)\
    \ / 2) - 1] + $temp_l[intval(count($temp_l) / 2)];\n        return $sum / 2;\n\
    \    } else {\n        $temp_l = array();\n        for ($i = 0; $i < count($l);\
    \ $i++) {\n            $temp_l[$i] = $l[$i];\n        }\n        sort($temp_l);\n\
    \        return $temp_l[intval(count($temp_l) / 2)];\n    }\n}", "\t$m = count($l);\n\
    \t\n\tif ($m % 2 == 0) {\n\t\treturn ($l[$m / 2] + $l[$m / 2 - 1]) / 2;\n\t} else\
    \ {\n\t\treturn $l[floor($m / 2)];\n\t}\n}\n", "    $array = array_merge($l);\n\
    \n    rsort($array);\n    $n = count($array);\n    $middle = floor(($n - 1) /\
    \ 2);\n\n    if ($n % 2) {\n        $median = $array[$middle];\n    } else {\n\
    \        $low = $array[$middle];\n        $high = $array[$middle + 1];\n     \
    \   $median = (($low + $high) / 2);\n    }\n\n    return $median;\n}\n\nprint\
    \ median([3, 1, 2, 4, 5]);\nprint \"\\n\";\nprint median([-10, 4, 6, 1000, 10,\
    \ 20]);\nprint \"\\n\";", "    sort($l);\n    $total = count($l);\n    if ($total\
    \ % 2 == 0) {\n        return ($l[($total/2) - 1] + $l[$total/2]) / 2;\n    }\
    \ else {\n        return $l[floor($total/2)];\n    }\n}\n", "  // @todo IMPLEMENT\
    \ ME!\n\t$len = count($l);\n\tif($len % 2 == 0){\n\t\t$index = $len / 2;\n\t\t\
    $median = ($l[$index] + $l[$index - 1]) / 2;\n\t}\n\telse{\n\t\t$index = floor($len\
    \ / 2);\n\t\t$median = $l[$index];\n\t}\n\treturn $median;\n}\n", "\t$median =\
    \ 0;\n\t$length = count($l);\n\t$middle = floor($length / 2);\n\tsort($l);\n\t\
    if ($length % 2 == 0) {\n\t\t$low = $l[$middle - 1];\n\t\t$high = $l[$middle];\n\
    \t\t$median = ($low + $high) / 2;\n\t} else {\n\t\t$median = $l[$middle];\n\t\
    }\n\treturn $median;\n}\n\n$testlist = [3, 1, 2, 4, 5];\n$testlist2 = [-10, 4,\
    \ 6, 1000, 10, 20];\n$median = median($testlist);\n$median2 = median($testlist2);\n\
    \necho \"median of \" . implode(', ', $testlist) . \": $median\\n\";\necho \"\
    median of \" . implode(', ', $testlist2) . \": $median2\\n\";\n", "\t$middle =\
    \ (count($l) - 1) / 2;\n\tsort($l);\n\tif(count($l) % 2) {\n\t\treturn $l[$middle];\n\
    \t} else {\n\t\treturn ($l[$middle] + $l[$middle + 1]) / 2;\n\t}\n}\n", "    //\
    \ BEGIN\n    $result = 0;\n    sort($l);\n    $size = count($l);\n    if ($size\
    \ % 2 == 0) {\n        $index1 = $size / 2;\n        $index2 = $index1 - 1;\n\
    \        $result = ($l[$index1] + $l[$index2]) / 2;\n    } else {\n        $index\
    \ = ($size - 1) / 2;\n        $result = $l[$index];\n    }\n    return $result;\n\
    \    // END\n}", "    if(count($l) == 0) return 0;\n    sort($l);\n    $n = count($l);\n\
    \    $r = $l[floor($n/2)];\n    if($n % 2 == 0) $r = ($r + $l[$n/2 - 1]) / 2;\n\
    \    return $r;\n}\n", "    // YOUR CODE HERE\n    $sorted_array = my_sort($l);\n\
    \    $length = count($sorted_array);\n    if ($length % 2 == 0) {\n        return\
    \ ($sorted_array[$length / 2] + $sorted_array[$length / 2 - 1]) / 2;\n    } else\
    \ {\n        return $sorted_array[$length / 2];\n    }\n}\n", "    return median_helper($l,\
    \ 0, count($l) - 1);\n}\n", "  if(count($l) === 0) {\n    return null;\n  }\n\
    \  sort($l);\n  $count = count($l);\n  if($count % 2 === 0) {\n    $first = $l[$count\
    \ / 2 - 1];\n    $second = $l[$count / 2];\n    return ($first + $second) / 2;\n\
    \  } else {\n    return $l[$count / 2];\n  }\n}\n", "    sort($l);\n    $len =\
    \ count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[floor($len / 2)];\n    }\n}",
  "\t// write your code here\n    $c = count($l);\n    if ($c % 2 == 0) {\n      \
    \  $m = $c / 2;\n        $median = ($l[$m] + $l[$m-1]) / 2;\n    } else {\n  \
    \      $m = ($c - 1) / 2;\n        $median = $l[$m];\n    }\n    \n    return\
    \ $median;\n}", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0)\
    \ {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n   \
    \     return $l[($len - 1) / 2];\n    }\n}\n", "\t$sort = array_values($l);\n\t\
    sort($sort);\n\t$n = count($sort);\n\tif (is_int($n / 2)) {\n\t\treturn $sort[$n\
    \ / 2];\n\t} else {\n\t\treturn ($sort[$n / 2] + $sort[$n / 2 - 1]) / 2;\n\t}\n\
    }", "    $l2 = sort($l);\n    $i = floor(count($l2) / 2);\n    return count($l2)\
    \ % 2 == 0 ? ($l2[$i] + $l2[$i - 1]) / 2 : $l2[$i];\n}\n", "    sort($l);\n  \
    \  $length = count($l);\n    if ( $length % 2 == 0 ) {\n        return ($l[$length/2]\
    \ + $l[$length/2-1]) / 2;\n    } else {\n        return $l[$length/2];\n    }\n\
    }\n", "    // Sort l in increasing order.\n    $l = $l;\n    sort($l);\n    //\
    \ Your solution goes here.\n    $length = count($l);\n    $median = 0;\n    if\
    \ ($length % 2 == 0) {\n        $index = $length / 2;\n        $median = ($l[$index\
    \ - 1] + $l[$index]) / 2;\n    } else {\n        $index = floor($length / 2);\n\
    \        $median = $l[$index];\n    }\n    return $median;\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n == 0) {\n        return null;\n    } else if\
    \ ($n % 2 == 0) {\n        return ($l[intval($n / 2)] + $l[intval($n / 2) - 1])\
    \ / 2;\n    } else {\n        return $l[intval($n / 2)];\n    }\n}\n", "    sort($l);\n\
    \    $i = count($l);\n    if ($i % 2 == 0) {\n        return ($l[$i / 2] + $l[$i\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($i - 1) / 2];\n    }\n}\n",
  "  $n = count($l);\n  $m = $n / 2;\n  // Sort the array.\n  sort($l);\n  // Return\
    \ the middle element if n is odd.\n  if ($n % 2 == 1) {\n    return $l[$m];\n\
    \  }\n  // Return the middle value if n is even.\n  return ($l[$m] + $l[$m - 1])\
    \ / 2;\n}\n", "\tsort($l);\n\t$len = count($l);\n\t$half = $len / 2;\n\tif ($len\
    \ % 2 == 0) {\n\t\treturn ($l[$half - 1] + $l[$half]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$half];\n\t}\n}\n", "\tif (!is_array($l))\n\t\treturn null;\n\tif (count($l)\
    \ == 0)\n\t\treturn null;\n\tsort($l);\n\t$half = count($l) / 2;\n\tif (count($l)\
    \ % 2 == 0)\n\t\treturn ($l[$half - 1] + $l[$half]) / 2;\n\telse\n\t\treturn $l[$half];\n\
    }\n", "\tsort($l);\n\tif ((count($l) % 2) == 0) {\n\t\treturn (array_sum(array_slice($l,\
    \ (count($l) / 2) - 1, 2)) / 2);\n\t} else {\n\t\treturn $l[intval(count($l) /\
    \ 2)];\n\t}\n}\n", "  sort($l);\n  $length = count($l);\n  $middle_index = floor($length\
    \ / 2);\n  $median = 0;\n  if ($length % 2) {\n    $median = $l[$middle_index];\n\
    \  } else {\n    $median = ($l[$middle_index] + $l[$middle_index-1]) / 2;\n  }\n\
    \  return $median;\n}\n", "  return $l[(count($l) - 1) / 2];\n}\n", "\t$count\
    \ = count($l);\n\tif ($count % 2 == 0) {\n\t\t$mid = intval($count / 2);\n\t\t\
    $left = $l[$mid - 1];\n\t\t$right = $l[$mid];\n\t\treturn ($left + $right) / 2;\n\
    \t} else {\n\t\t$mid = intval($count / 2);\n\t\treturn $l[$mid];\n\t}\n}\n", " \
    \   $index = intval(count($l) / 2);\n    if (count($l) % 2 == 0) {\n        return\
    \ ($l[$index] + $l[$index - 1]) / 2;\n    } else {\n        return $l[$index];\n\
    \    }\n}\n", "    sort($l);\n    $middle = count($l) / 2;\n    if ($middle %\
    \ 2 == 0) {\n        return ($l[$middle - 1] + $l[$middle]) / 2;\n    } else {\n\
    \        return $l[$middle];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[floor($len / 2)];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    $mid_idx = $len / 2;\n    if (is_int($mid_idx)) {\n\
    \        return ($l[$mid_idx] + $l[$mid_idx - 1]) / 2;\n    } else {\n       \
    \ return $l[floor($mid_idx)];\n    }\n}\n", "\tsort($l);\n\t$c = count($l);\n\t\
    if ($c % 2 == 0) {\n\t\treturn ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n\t} else {\n\
    \t\treturn $l[$c / 2];\n\t}\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "\t$n = count($l);\n\tsort($l);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else\
    \ {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    sort($l);\n    $m = (int)(count($l)\
    \ / 2);\n    if (count($l) % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) /\
    \ 2;\n    } else {\n        return $l[$m];\n    }\n}\n\n$l = array(3, 1, 2, 4,\
    \ 5);\n$m = median($l);\necho 'For list ' . implode(', ', $l) . ', median is '\
    \ . $m . \"\\n\";\n\n$l = array(-10, 4, 6, 1000, 10, 20);\n$m = median($l);\n\
    echo 'For list ' . implode(', ', $l) . ', median is ' . $m . \"\\n\";", "    //\
    \ YOUR CODE HERE\n    // Sort the list\n    sort($l);\n    // Get the middle element\n\
    \    if (count($l)%2 == 0) {\n        return ($l[count($l)/2] + $l[count($l)/2\
    \ - 1])/2;\n    } else {\n        return $l[(count($l) - 1)/2];\n    }\n}\n",
  "\tsort($l);\n\t$i = (count($l) - 1) / 2;\n\tif ($i == floor($i)) {\n\t\treturn\
    \ ($l[$i] + $l[$i + 1]) / 2;\n\t} else {\n\t\treturn $l[$i];\n\t}\n}\n$l = [3,\
    \ 1, 2, 4, 5];\necho median($l).\"\\n\";\n$l = [-10, 4, 6, 1000, 10, 20];\necho\
    \ median($l).\"\\n\";", "    sort($l);\n    $middle = round(count($l) / 2);\n\
    \    if (count($l) % 2 == 0) {\n        return (($l[$middle - 1] + $l[$middle])\
    \ / 2);\n    } else {\n        return $l[$middle - 1];\n    }\n}", "\t// TODO:\
    \ implement\n\treturn 0;\n}\n", "\t// /*** your code here ***/\n\t$len = count($l);\n\
    \t// nth_element($l, floor($len / 2));\n\t// $mid = $l[floor($len / 2)];\n\t$tmp\
    \ = $l;\n\tsort($tmp);\n\t$mid = $tmp[floor($len / 2)];\n\treturn $mid;\n}", " \
    \ if (count($l) == 0) return null;\n  $n = count($l);\n  sort($l);\n  if ($n %\
    \ 2 == 0) return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n  return $l[$n / 2];\n}\n",
  "    $x = $l;\n    sort($x);\n    $len = count($x);\n    if ($len % 2 == 0) {\n\
    \        return ($x[intval($len / 2)] + $x[intval($len / 2) - 1]) / 2;\n    }\
    \ else {\n        return $x[intval($len / 2)];\n    }\n}\n", "  sort($l);\n  $l_size\
    \ = count($l);\n  $mid = floor($l_size / 2);\n  if ($l_size % 2 == 0) {\n    return\
    \ (($l[$mid] + $l[$mid - 1]) / 2);\n  } else {\n    return $l[$mid];\n  }\n}\n",
  "    $count = count($l);\n    sort($l);\n    if($count%2==0) {\n        return ($l[$count/2]+$l[$count/2-1])/2;\n\
    \    } else {\n        return $l[($count-1)/2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2) {\n        return $l[($len - 1) / 2];\n\
    \    } else {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    }\n\
    }\n", "    $size = count($l);\n    $sorted_l = quick_sort($l);\n    if ($size\
    \ % 2 == 0) {\n        return ($sorted_l[$size / 2] + $sorted_l[$size / 2 - 1])\
    \ / 2;\n    } else {\n        return $sorted_l[$size / 2];\n    }\n}\n", "   \
    \ // If length of list is even, median = mean of middle two elements.\n    if\
    \ (count($l) % 2 == 0) {\n        return ($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n    }\n    // If length of list is odd, median = middle element.\n\
    \    else {\n        return $l[floor(count($l) / 2)];\n    }\n}\n", "    sort($l);\n\
    \    $length = count($l);\n    $half = floor($length / 2);\n    if ($length %\
    \ 2 == 0) {\n        return ($l[$half] + $l[$half - 1]) / 2;\n    } else {\n \
    \       return $l[$half];\n    }\n}\n\n$l = [3, 1, 2, 4, 5];\nprint_r(median($l));\n\
    print_r(PHP_EOL);\n\n$l = [-10, 4, 6, 1000, 10, 20];\nprint_r(median($l));\nprint_r(PHP_EOL);",
  "  if (count($l) == 0) {\n    return 0;\n  }\n  sort($l);\n  $len = count($l);\n\
    \  $mid = floor($len / 2);\n  if ($len % 2 == 0) {\n    return ($l[$mid] + $l[$mid\
    \ - 1]) / 2;\n  } else {\n    return $l[$mid];\n  }\n}\n", "    if (empty($l))\
    \ {\n        return \"\";\n    }\n\n    sort($l);\n    $length = count($l);\n\
    \    $half = (int)($length / 2);\n\n    if ($length % 2 == 0) {\n        return\
    \ ($l[$half] + $l[$half - 1]) / 2;\n    }\n\n    return $l[$half];\n}\n", "  \
    \  // Sample data\n    $l = [3, 1, 2, 4, 5];\n    $l = [-10, 4, 6, 1000, 10, 20];\n\
    \n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example:\n    // print \"Hello world!\";\n    if (count($l)\
    \ == 0) {\n        print '0';\n        return 0;\n    }\n    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2) {\n        print $l[$n / 2];\n        return $l[$n\
    \ / 2];\n    } else {\n        print ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    }\n}\n\nmedian([]);", "\t\
    sort($l);\n\t$l = remove_duplicates($l);\n\t$num_elements = count($l);\n\tif ($num_elements\
    \ == 0) {\n\t\treturn 0;\n\t} else if ($num_elements % 2 == 0) {\n\t\treturn ($l[intval($num_elements\
    \ / 2)] + $l[intval($num_elements / 2) - 1]) / 2;\n\t} else {\n\t\treturn $l[intval($num_elements\
    \ / 2)];\n\t}\n}\n", "    sort($l);\n    if (count($l) % 2 == 0) {\n        $idx\
    \ = count($l) / 2;\n        return ($l[$idx - 1] + $l[$idx]) / 2;\n    } else\
    \ {\n        $idx = floor(count($l) / 2);\n        return $l[$idx];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ $l[$len / 2 - 1] + $l[$len / 2] / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0)\
    \ {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n\
    \ / 2];\n\t}\n}\n", "    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len % 2 == 0) {\n        $sum = $sorted[$len / 2] + $sorted[$len / 2\
    \ - 1];\n        return $sum / 2;\n    } else {\n        return $sorted[($len\
    \ - 1) / 2];\n    }\n}\n", "    $m = count($l);\n    if ($m == 0) {\n        return\
    \ null;\n    }\n    if ($m % 2 == 0) {\n        $hi = $m / 2;\n        $lo = $hi\
    \ - 1;\n        return ($l[$lo] + $l[$hi]) / 2;\n    } else {\n        return\
    \ $l[$m / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n    return NULL;\n\
    \  }\n  sort($l);\n  $m = $n / 2;\n  if ($n % 2) {\n    return $l[$m];\n  } else\
    \ {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  }\n}\n", "  sort($l);\n  $len =\
    \ count($l);\n  if ($len % 2 == 0) {\n    return ($l[($len / 2) - 1] + $l[$len\
    \ / 2]) / 2;\n  } else {\n    return $l[($len - 1) / 2];\n  }\n}\n\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp,\
    \ \"%d\\n\", $n);\n\nfscanf($__fp, \"%[^\\n]\", $arr_temp);\n\n$arr = array_map('intval',\
    \ preg_split('/ /', $arr_temp, -1, PREG_SPLIT_NO_EMPTY));\n\n$result = median($arr);\n\
    \nfwrite($fptr, $result . \"\\n\");\n\nfclose($__fp);\nfclose($fptr);", "  $n\
    \ = count($l);\n  if ($n % 2 === 0) {\n    return ($l[$n / 2 - 1] + $l[$n / 2])\
    \ / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", "    if (empty($l)) {\n\
    \        return;\n    }\n\n    sort($l);\n    $len = count($l);\n    $mid = floor($len\
    \ / 2);\n\n    if ($len % 2 == 0) {\n        return ($l[$mid] + $l[$mid - 1])\
    \ / 2;\n    } else {\n        return $l[$mid];\n    }\n}\n", "    sort($l);\n\
    \    $c = count($l);\n    if ($c % 2 == 0) {\n        $left = $l[$c / 2 - 1];\n\
    \        $right = $l[$c / 2];\n        return ($left + $right) / 2;\n    }\n \
    \   return $l[$c / 2];\n}", "    sort($l);\n    $count = count($l);\n    if ($count\
    \ % 2) {\n        return $l[floor($count / 2)];\n    } else {\n        return\
    \ ($l[($count / 2) - 1] + $l[$count / 2]) / 2;\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    $mid = floor($len / 2);\n    if ($len % 2) {\n   \
    \     return $l[$mid];\n    } else {\n        return ($l[$mid - 1] + $l[$mid])\
    \ / 2;\n    }\n}\n", "    $middle = intval(count($l) / 2);\n    if (count($l)\
    \ % 2) {\n        return $l[$middle];\n    } else {\n        return ($l[$middle\
    \ - 1] + $l[$middle]) / 2;\n    }\n}\necho median([3, 1, 2, 4, 5]) . \"\\n\";\n\
    echo median([-10, 4, 6, 1000, 10, 20]) . \"\\n\";\necho median([3, 1, 2, 4, 5,\
    \ 6]) . \"\\n\";\necho median([-10, 4, 6, 1000, 10, 20, 10]) . \"\\n\";\n", " \
    \   sort($l);\n    $len = count($l);\n    if($len % 2 == 0) {\n        return\
    \ ($l[$len/2] + $l[$len/2-1]) / 2;\n    } else {\n        return $l[$len/2];\n\
    \    }\n}\n", "\t$s = $l;\n\tsort($s);\n\t$len = count($s);\n\tif ($len % 2) {\n\
    \t\treturn $s[$len / 2];\n\t} else {\n\t\treturn ($s[$len / 2] + $s[$len / 2 -\
    \ 1]) / 2;\n\t}\n}\n\n$input = array(\n\t\tarray(3, 1, 2, 4, 5),\n\t\tarray(-10,\
    \ 4, 6, 1000, 10, 20),\n\t\tarray(2, 3, 4, 5),\n\t\tarray(1, 2, 3, 4, 5, 6, 7),\n\
    \t\tarray(2, 3, 4, 5, 6, 7),\n\t\tarray(1, 2, 4, 5, 6, 7),\n\t\tarray(1, 2, 3,\
    \ 5, 6, 7),\n\t\tarray(1, 2, 3, 4, 6, 7),\n\t\tarray(1, 2, 3, 4, 5, 7),\n\t\t\
    array(1, 2, 3, 4, 5, 6),\n\t\tarray(1, 2, 3, 4, 5),\n\t\tarray(2, 3, 4, 5),\n\t\
    \tarray(1, 3, 4, 5),\n\t\tarray(1, 2, 4, 5),\n\t\tarray(1, 2, 3, 5),\n\t\tarray(1,\
    \ 2, 3, 4),\n\t\tarray(1, 2, 3),\n\t\tarray(1, 2),\n\t\tarray(1),\n\t\tarray(),\n\
    \t\tarray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,", "    sort($l);\n    $len\
    \ = count($l);\n    $mid = floor($len / 2);\n    if ($len % 2 == 0) {\n      \
    \  return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n\
    \    }\n}\n\necho median([3, 1, 2, 4, 5]) . \"\\n\";\necho median([-10, 4, 6,\
    \ 1000, 10, 20]) . \"\\n\";", "    sort($l);\n    if (count($l) % 2 == 0) {\n\
    \        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[floor(count($l) / 2)];\n    }\n}\n", "    $sorted_l = selection_sort($l);\n\
    \    $middle = floor(count($sorted_l) / 2);\n    if (count($sorted_l) % 2) {\n\
    \        return $sorted_l[$middle];\n    } else {\n        return (($sorted_l[$middle-1]\
    \ + $sorted_l[$middle]) / 2);\n    }\n}\n", "    if (!$l) return null;\n    $m\
    \ = count($l) / 2;\n    $l = sortArray($l);\n    if (count($l) % 2 == 0) {\n \
    \       return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "  // Fill here.\n}\n\nclass MyTestCases extends TestCase\n{\n \
    \   public function testMedian() {\n      $this->assertEquals(median([3, 1, 2,\
    \ 4, 5]), 3);\n      $this->assertEquals(median([-10, 4, 6, 1000, 10, 20]), 15.0);\n\
    \    }\n}", "    //sort($l);\n    rsort($l);\n    if(count($l)%2 == 0) {\n   \
    \     $mid = count($l)/2;\n        return ($l[$mid] + $l[$mid-1])/2;\n    }\n\
    \    else {\n        $mid = (count($l)-1)/2;\n        return $l[$mid];\n    }\n\
    }\n\n$l = [3, 1, 2, 4, 5];\necho median($l);\n$l = [-10, 4, 6, 1000, 10, 20];\n\
    echo median($l);", "\tsort($l);\n\tif ((sizeof($l)%2)==0) {\n\t\t$idx1 = (sizeof($l)/2)-1;\n\
    \t\t$idx2 = (sizeof($l)/2);\n\t\treturn (($l[$idx1]+$l[$idx2])/2);\n\t} else {\n\
    \t\t$idx = floor(sizeof($l)/2);\n\t\treturn $l[$idx];\n\t}\n}", "    sort($l);\n\
    \    if (count($l) % 2) {\n        return $l[count($l) / 2];\n    } else {\n \
    \       return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n}\n",
  "    // YOUR CODE HERE\n    // Sort the list.\n    sort($l);\n    $median = 0;\n\
    \    // If the length of list is odd\n    if (count($l) % 2 != 0) {\n        $median\
    \ = $l[count($l) / 2];\n    }\n    // If the length of list is even\n    else\
    \ {\n        $half = count($l) / 2;\n        $median = ($l[$half] + $l[$half -\
    \ 1]) / 2;\n    }\n    return $median;\n}", "    sort($l);\n    $n = count($l);\n\
    \    if (1 == $n) {\n        return $l[0];\n    } else if (0 == $n % 2) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\n$l = [3, 1, 2, 4, 5];\necho median($l) . \"\\\
    n\";\n$l = [-10, 4, 6, 1000, 10, 20];\necho median($l) . \"\\n\";", "    $sorted_list\
    \ = count($l) == 0 ? array() : mergesort($l);\n    $length = count($sorted_list);\n\
    \    if ($length % 2 == 0) {\n        $first = $sorted_list[$length / 2 - 1];\n\
    \        $second = $sorted_list[$length / 2];\n        return ($first + $second)\
    \ / 2;\n    } else {\n        return $sorted_list[($length - 1) / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ else if ($n % 2 == 0) {\n        $i = $n / 2;\n        return ($l[$i - 1] +\
    \ $l[$i]) / 2;\n    }\n    else {\n        $i = ($n - 1) / 2;\n        return\
    \ $l[$i];\n    }\n}\n", "  sort($l);\n  if (count($l) % 2 == 0) {\n    return\
    \ ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  } else {\n    return $l[count($l)\
    \ / 2];\n  }\n}\n\nassert(median([3, 1, 2, 4, 5]) == 3);\nassert(median([-10,\
    \ 4, 6, 1000, 10, 20]) == 15.0);\n", "    $l = sort($l);\n    if (count($l) %\
    \ 2 == 0) {\n        $m = (count($l) / 2) - 1;\n        return ($l[$m] + $l[$m\
    \ + 1]) / 2;\n    } else {\n        $m = (count($l) - 1) / 2;\n        return\
    \ $l[$m];\n    }\n}\n\nprint(median([-10, 4, 6, 1000, 10, 20]) . \"\\n\");", "\t\
    sort($l);\n\t$mid = floor(count($l) / 2);\n\tif (count($l) % 2 == 0) {\n\t\treturn\
    \ ($l[$mid] + $l[$mid + 1]) / 2;\n\t} else {\n\t\treturn $l[$mid];\n\t}\n}\n",
  "    sort($l);\n    if (count($l) % 2 == 0) {\n        return ($l[count($l) / 2]\
    \ + $l[count($l) / 2 - 1]) / 2;\n    } else {\n        return $l[count($l) / 2];\n\
    \    }\n}\n", "  $sorted_list = sort_list($l);\n  $middle = intval(count($sorted_list)\
    \ / 2);\n  if (count($sorted_list) % 2 == 0) {\n    return ($sorted_list[$middle\
    \ - 1] + $sorted_list[$middle]) / 2;\n  } else {\n    return $sorted_list[$middle];\n\
    \  }\n}\n", "    sort($l);\n    $i = (count($l) - 1) / 2;\n    return ($l[floor($i)]\
    \ + $l[ceil($i)]) / 2;\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n\n$list = array(3, 1, 2, 4,\
    \ 5);\necho median($list);\necho \"\\n\";\n\n$list = array(-10, 4, 6, 1000, 10,\
    \ 20);\necho median($list);\necho \"\\n\";", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[$len / 2];\n    }\n}\n", "\t$len = count($l);\n\
    \t// if $len is odd, do not add one. otherwise, add one.\n\t// the point is to\
    \ take the two middle elements and find the avg.\n\t$middle = ($len % 2 == 0)\
    \ ? 1 : 0;\n\t// the midpoint is the index of the middle element.\n\t$midpoint\
    \ = floor($len / 2);\n\t// sort $l\n\tsort($l);\n\t// return the avg of the middle\
    \ two elements.\n\treturn ($l[$midpoint - 1] + $l[$midpoint + $middle]) / 2;\n\
    }\n\n$l = array(3, 1, 2, 4, 5);\n$m = median($l);\nprint \"median($l) = $m\\n\"\
    ;\n\n$l = array(-10, 4, 6, 1000, 10, 20);\n$m = median($l);\nprint \"median($l)\
    \ = $m\\n\";\n", "\t// Sort the array.\n\tsort($l);\n\t\n\t// Get the middle index.\n\
    \t$i = floor(count($l) / 2);\n\t\n\t// If the number of elements in the array\
    \ is even, then return the average\n\t// of the two middle elements.\n\tif (count($l)\
    \ % 2 == 0) {\n\t\treturn ($l[$i] + $l[$i - 1]) / 2;\n\t}\n\t\n\t// If the number\
    \ of elements in the array is odd, then return the middle\n\t// element.\n\treturn\
    \ $l[$i];\n}\n", "    if (count($l) == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $len = count($l);\n    $half = $len / 2;\n    if ($len % 2 == 0) {\n    \
    \    return ($l[$half - 1] + $l[$half]) / 2;\n    } else {\n        return $l[$half];\n\
    \    }\n}\n", "    $mid = floor(count($l) / 2);\n    $sorted = $l;\n    sort($sorted);\n\
    \    if (count($l) % 2 == 0) {\n        return ($sorted[$mid] + $sorted[$mid -\
    \ 1]) / 2;\n    } else {\n        return $sorted[$mid];\n    }\n}\n", "    //\
    \ sort the list and pick the middle element\n    sort($l);\n    $count = count($l);\n\
    \    if ($count % 2 == 0) {\n        return ($l[$count / 2] + $l[$count / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$count / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[floor($len / 2)];\n\
    \    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\t$s =\
    \ $l[$n / 2] + $l[$n / 2 - 1];\n\t\treturn $s / 2;\n\t} else {\n\t\treturn $l[$n\
    \ / 2];\n\t}\n}\n", "    $size = count($l);\n    sort($l);\n    if ($size % 2\
    \ == 0) {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$size / 2];\n    }\n}\n", "\t$l = quicksort($l);\n\t$size\
    \ = count($l);\n\tif ($size % 2 == 0) {\n\t\t$median = ($l[($size/2)-1] + $l[$size/2])\
    \ / 2;\n\t} else {\n\t\t$median = $l[floor($size/2)];\n\t}\n\treturn $median;\n\
    }\n", "    sort($l);\n    $count = count($l);\n    $middle = floor($count / 2);\n\
    \    if ($count % 2 == 0) {\n        return ($l[$middle - 1] + $l[$middle]) /\
    \ 2;\n    } else {\n        return $l[$middle];\n    }\n}\n", "    sort($l);\n\
    \    if (count($l) % 2 == 0) {\n        return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[count($l) / 2];\n    }\n}\n",
  "    sort($l);\n    $size = count($l);\n    $mid = intval($size / 2);\n    return\
    \ ($size % 2) ? $l[$mid] : ($l[$mid - 1] + $l[$mid]) / 2;\n}\n\n$l = [3, 1, 2,\
    \ 4, 5];\n$res = median($l);\necho $res . PHP_EOL;\n\n$l = [-10, 4, 6, 1000, 10,\
    \ 20];\n$res = median($l);\necho $res . PHP_EOL;", "    // Fill in the code here\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[(int)($n / 2)];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[(int)($len\
    \ / 2)];\n    }\n}\n", "    sort($l);\n    $c = count($l);\n    if ($c % 2 ==\
    \ 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[floor($c / 2)];\n    }\n}\n\n$l = [3, 1, 2, 4, 5];\necho median($l),\
    \ PHP_EOL;\n$l = [-10, 4, 6, 1000, 10, 20];\necho median($l), PHP_EOL;", "   \
    \ // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\";\n    $median = 0;\n \
    \   $sortedArray = quicksort($l);\n    $len = count($sortedArray);\n    if($len\
    \ % 2 == 0){\n        $middle = $len / 2;\n        $median = ($sortedArray[$middle]\
    \ + $sortedArray[$middle - 1]) / 2;\n    }else{\n        $middle = floor($len\
    \ / 2);\n        $median = $sortedArray[$middle];\n    }\n    return $median;\n\
    }\n", "    $x = sort($l);\n    $n = count($x);\n    if($n % 2 == 0) {\n      \
    \  return ($x[$n/2] + $x[$n/2-1]) / 2;\n    } else {\n        return $x[($n-1)/2];\n\
    \    }\n}\n\n$l = array(3, 1, 2, 4, 5);\nprint_r(median($l));\n\n$l = array(-10,\
    \ 4, 6, 1000, 10, 20);\nprint_r(median($l));", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        $result = ($l[$len / 2] + $l[$len / 2 - 1])\
    \ / 2;\n    } else {\n        $result = $l[(int)($len / 2)];\n    }\n    return\
    \ $result;\n}", "    // takes the length of $l\n    $l_length = count($l);\n \
    \   // if the length of $l is 0, return null\n    if ($l_length == 0) {\n    \
    \    return null;\n    }\n    // sorts $l ascending by default\n    sort($l);\n\
    \    // if the length of $l is odd, gets the middle value, \n    // and returns\
    \ it\n    if ($l_length % 2 == 1) {\n        return $l[$l_length / 2];\n    }\n\
    \    // else, returns the average of the two middle values\n    return ($l[($l_length\
    \ / 2) - 1] + $l[$l_length / 2]) / 2;\n}\n", "\tsort($l);\n\t$c = count($l);\n\
    \t$m = intval($c / 2);\n\treturn ($c % 2) == 0 ? ($l[$m - 1] + $l[$m]) / 2 : $l[$m];\n\
    }", "    $len = count($l);\n    $middle = $len / 2;\n    $l = merge_sort($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$middle] + $l[$middle - 1]) / 2;\n\
    \    } else {\n        return $l[floor($middle)];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        $index_1 = $len / 2;\n\
    \        $index_2 = $index_1 - 1;\n        return ($l[$index_1] + $l[$index_2])\
    \ / 2;\n    } else {\n        $index = floor($len / 2);\n        return $l[$index];\n\
    \    }\n}\n", "    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$size / 2];\n    }\n}", "\t$s = count($l);\n\tif (is_array($l)\
    \ && $s > 0) {\n\t\t$mid = floor($s / 2);\n\t\tsort($l);\n\t\tif ($s % 2) {\n\t\
    \t\treturn $l[$mid];\n\t\t} else {\n\t\t\treturn ($l[$mid] + $l[$mid - 1]) / 2;\n\
    \t\t}\n\t}\n\treturn null;\n}\n", "    sort($l);\n    $half = floor(count($l)\
    \ / 2);\n    if (count($l) % 2 == 0) {\n        return ($l[$half - 1] + $l[$half])\
    \ / 2;\n    } else {\n        return $l[$half];\n    }\n}\n", "    $size = count($l);\n\
    \    if ($size % 2) {\n        return $l[$size / 2];\n    } else {\n        return\
    \ ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    }\n}\n", "\t$len = count($l);\n\
    \tif ($len == 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\tif ($len % 2 == 0) {\n\t\
    \treturn ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$len\
    \ / 2];\n\t}\n}\n", "  sort($l);\n  $len = count($l);\n  $midIdx = floor($len\
    \ / 2);\n  if ($len % 2 == 0) {\n    return ($l[$midIdx - 1] + $l[$midIdx]) /\
    \ 2;\n  } else {\n    return $l[$midIdx];\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n == 0) return null;\n  if ($n % 2 == 0) {\n    $i = floor($n / 2);\n\
    \    return ($l[$i] + $l[$i - 1]) / 2;\n  } else {\n    $i = floor($n / 2);\n\
    \    return $l[$i];\n  }\n}\n", "    $sorted_l = sort($l);\n    $count = count($l);\n\
    \    $mid = intval($count / 2);\n    if ($count % 2 == 0) {\n        return ($l[$mid]\
    \ + $l[$mid - 1]) / 2;\n    } else {\n        return $l[$mid];\n    }\n}\n", " \
    \ $count = count($l);\n  if ($count % 2 == 0) {\n    $i = $count / 2;\n    return\
    \ ($l[$i] + $l[$i - 1]) / 2;\n  } else {\n    $i = ($count - 1) / 2;\n    return\
    \ $l[$i];\n  }\n}\n", "    sort($l);\n    return $l[count($l) / 2];\n}\n", "\t\
    $count = count($l);\n\tif($count%2 == 0) {\n\t\treturn ($l[$count/2 - 1] + $l[$count/2])/2;\n\
    \t} else {\n\t\treturn $l[($count-1)/2];\n\t}\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
