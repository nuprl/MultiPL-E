name: HumanEval_21_rescale_to_unit
language: php
results:
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) * $scale;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $ranges = array_map(function($number)\
    \ use ($min, $max) {\n        return ($number - $min) / ($max - $min);\n    },\
    \ $numbers);\n    return $ranges;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $n) {\n        $scaled[] = ($n - $min) / ($max - $min);\n    }\n\
    \    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $scale = $max - $min;\n   \
    \ $rescaled = array();\n    foreach ($numbers as $i => $n) {\n        $rescaled[$i]\
    \ = ($n - $min) / $scale;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $numbers_count\
    \ = count($numbers);\n    if ($numbers_count < 2) {\n        throw new \\InvalidArgumentException('Array\
    \ should contain at least two elements');\n    }\n\n    $min = min($numbers);\n\
    \    $max = max($numbers);\n    if ($min == $max) {\n        throw new \\InvalidArgumentException('$min\
    \ and $max should be different');\n    }\n\n    $scaled_list = [];\n    foreach\
    \ ($numbers as $number) {\n        $scaled_list[] = ($number - $min) / ($max -\
    \ $min);\n    }\n\n    return $scaled_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $result = [];\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new InvalidArgumentException(\"List of numbers must have\
    \ at least two elements\");\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $coef = 1 / ($max - $min);\n    foreach ($numbers as $index => $number) {\n\
    \        $numbers[$index] = ($number - $min) * $coef;\n    }\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    return array_map(function($value)\
    \ use ($max, $min) {\n        return ($value - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $new_min = 0;\n    $new_max\
    \ = 1;\n    $range = $max - $min;\n    if ($range == 0) {\n        return $numbers;\n\
    \    }\n    $ratio = ($new_max - $new_min) / $range;\n    return array_map(function($n)\
    \ use ($min, $ratio) {\n        return ($n - $min) * $ratio;\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // your\
    \ code goes here\n    // print_r($numbers);\n    $new_numbers = array();\n   \
    \ sort($numbers);\n    // print_r($numbers);\n    $min = $numbers[0];\n    $max\
    \ = $numbers[count($numbers) - 1];\n    $range = $max - $min;\n    foreach ($numbers\
    \ as $number) {\n        $new_numbers[] = ($number - $min) / $range;\n    }\n\
    \    // print_r($new_numbers);\n    return $new_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr42zi70_.php:27\n\
    Stack trace:\n#0 /tmp/tmpr42zi70_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr42zi70_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ use ($min, $max) {\n    return ($number - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $n = count($numbers);\n\
    \  $sorted = $numbers;\n  sort($sorted);\n  $min = $sorted[0];\n  $max = $sorted[$n\
    \ - 1];\n  $scale = 1.0 / ($max - $min);\n  for ($i = 0; $i < $n; $i++) {\n  \
    \  $numbers[$i] = ($numbers[$i] - $min) * $scale;\n  }\n  return $numbers;\n}\n\
    \n$data = [1.0, 2.0, 3.0, 4.0, 5.0];\n$result = rescale_to_unit($data);\n\necho\
    \ \"data: \";\nprint_r($data);\necho \"\\n\";\necho \"rescale: \";\nprint_r($result);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "data: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    \    [4] => 5\n)\n\nrescale: Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2]\
    \ => 0.5\n    [3] => 0.75\n    [4] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($number)\
    \ use ($min, $max) {\n        return ($number - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $diff = $max - $min;\n  if ($diff\
    \ == 0) {\n    return array_fill(0, count($numbers), 0);\n  }\n  return array_map(function($x)\
    \ use ($min, $diff) {\n    return ($x - $min) / $diff;\n  }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_number\
    \ = min($numbers);\n    $max_number = max($numbers);\n    $range = $max_number\
    \ - $min_number;\n    if ($range == 0) {\n        return array_fill(0, count($numbers),\
    \ 0);\n    }\n    return array_map(function($x) use ($min_number, $range) { return\
    \ ($x - $min_number) / $range; }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (sizeof($numbers)\
    \ < 2) {\n        throw new Exception(\"Cannot scale less than two numbers\");\n\
    \    }\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($num)\
    \ use ($min, $max) {\n        return ($num - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($n)\
    \ use ($min, $max) { return ($n - $min) / ($max - $min); }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  $count = count($numbers);\n  $delta\
    \ = $max - $min;\n  $scaled = array();\n  for ($i = 0; $i < $count; $i++) {\n\
    \    $scaled[$i] = ($numbers[$i] - $min) / $delta;\n  }\n  return $scaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $new_numbers = array();\n  foreach\
    \ ($numbers as $number) {\n    $new_numbers[] = ($number - $min) / ($max - $min);\n\
    \  }\n  return $new_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Find\
    \ the smallest and largest elements\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    // Compute the transform parameters\n    $shift = -$min;\n    $scale = 1.0\
    \ / ($max - $min);\n    // Apply the transform to the input list\n    $output\
    \ = array();\n    foreach ($numbers as $number) {\n        $output[] = ($number\
    \ + $shift) * $scale;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $rescaled = array();\n    foreach\
    \ ($numbers as $n) {\n        $rescaled[] = ($n - $min) / ($max - $min);\n   \
    \ }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $smallest\
    \ = min($numbers);\n  $largest = max($numbers);\n  $range = $largest - $smallest;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $smallest) / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $data = array();\n    foreach\
    \ ($numbers as $num) {\n        $data[] = ($num - $min) / ($max - $min);\n   \
    \ }\n    return $data;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function($n) use\
    \ ($min, $max) {\n    return ($n - $min) / ($max - $min);\n  }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    if($min == $max) {\n      \
    \  return array_fill(0, count($numbers), 0.5);\n    }\n    return array_map(function($n)\
    \ use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    sort($numbers);\n\
    \    $range = $numbers[count($numbers) - 1] - $numbers[0];\n    $new_numbers =\
    \ array();\n    foreach ($numbers as $n) {\n        array_push($new_numbers, ($n\
    \ - $numbers[0]) / $range);\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm9nfuz8.php:22\n\
    Stack trace:\n#0 /tmp/tmplm9nfuz8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplm9nfuz8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $key =>\
    \ $number) {\n        $numbers[$key] = ($number - $min) / ($max - $min);\n   \
    \ }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $new = [];\n    foreach ($numbers\
    \ as $number) {\n        $new[] = ($number - $min) / ($max - $min);\n    }\n \
    \   return $new;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $scale = $max - $min;\n  if ($scale\
    \ == 0) {\n    return array_fill(0, count($numbers), 0);\n  }\n  return array_map(function($num)\
    \ use ($min, $scale) {\n    return ($num - $min) / $scale;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $new_array\
    \ = array();\n    $min = min($numbers);\n    $max = max($numbers);\n    foreach\
    \ ($numbers as $number) {\n        $new_array[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $new_array;\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  foreach\
    \ ($numbers as $i => $number) {\n    $numbers[$i] = ($number - $min) / $range;\n\
    \  }\n  return $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // First,\
    \ find min & max\n  $min = min($numbers);\n  $max = max($numbers);\n  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number - $min)\
    \ / ($max - $min);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($number)\
    \ use ($min, $max) {\n        return ($number - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $number) {\n        if ($max - $min == 0) {\n            $scaled[]\
    \ = 0;\n        } else {\n            $scaled[] = ($number - $min) / ($max - $min);\n\
    \        }\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = $numbers[0];\n    $min = $numbers[0];\n    foreach ($numbers as $n) {\n  \
    \      if ($n > $max) {\n            $max = $n;\n        }\n        if ($n < $min)\
    \ {\n            $min = $n;\n        }\n    }\n    $magnitude = $max - $min;\n\
    \    foreach ($numbers as $n) {\n        $n = ($n - $min) / $magnitude;\n    }\n\
    \    return $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo847b58.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo847b58.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvo847b58.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_value\
    \ = min($numbers);\n    $max_value = max($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $value) {\n        $result[] = ($value - $min_value)\
    \ / ($max_value - $min_value);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    sort($numbers);\n\
    \n    $min = $numbers[0];\n    $max = $numbers[count($numbers) - 1];\n\n    $result\
    \ = [];\n    foreach ($numbers as $num) {\n        $result[] = ($num - $min) /\
    \ ($max - $min);\n    }\n\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg03yjf4b.php:25\n\
    Stack trace:\n#0 /tmp/tmpg03yjf4b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg03yjf4b.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (empty($numbers))\
    \ {\n        return $numbers;\n    }\n\n    $min = min($numbers);\n    $max =\
    \ max($numbers);\n\n    if ($min == $max) {\n        return $numbers;\n    }\n\
    \n    return array_map(function($n) use ($min, $max) {\n        return ($n - $min)\
    \ / ($max - $min);\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    if ($min == $max) {\n     \
    \   return array_fill(0, count($numbers), 0.5);\n    }\n    $delta = $max - $min;\n\
    \    return array_map(function($x) use ($min, $delta) {\n        return ($x -\
    \ $min) / $delta;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $res = array();\n    foreach\
    \ ($numbers as $n) {\n        $res[] = ($n - $min) / ($max - $min);\n    }\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $span = $max - $min;\n    $scale\
    \ = function($value) use ($min, $span) {\n        return ($value - $min) / $span;\n\
    \    };\n    return array_map($scale, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $r = [];\n    foreach ($numbers\
    \ as $n) {\n        $r[] = ($n - $min) / ($max - $min);\n    }\n    return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $scale = 1.0 / ($max - $min);\n \
    \ return array_map(function($number) use ($min, $scale) {\n    return ($number\
    \ - $min) * $scale;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $result\
    \ = array();\n  foreach ($numbers as $n) {\n    array_push($result, ($n - $min)\
    \ / $range);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $result\
    \ = [];\n  $max = max($numbers);\n  $min = min($numbers);\n  foreach ($numbers\
    \ as $number) {\n    $result[] = ($number - $min) / ($max - $min);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    if ($min == $max) {\n     \
    \   // return array of 1s if the minimum equals the maximum\n        return array_fill(0,\
    \ count($numbers), 1);\n    }\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        $result[] = ($number - $min) / ($max - $min);\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $numbers_count\
    \ = count($numbers);\n    if ($numbers_count < 2) {\n        return [0];\n   \
    \ }\n    sort($numbers);\n    $new_numbers = [];\n    $new_numbers[] = 0;\n  \
    \  $new_numbers[] = 1;\n    $min = $numbers[0];\n    $max = $numbers[$numbers_count\
    \ - 1];\n    for ($i = 1; $i < $numbers_count - 1; $i++) {\n        $new_numbers[]\
    \ = ($numbers[$i] - $min) / ($max - $min);\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bb_khu_.php:28\n\
    Stack trace:\n#0 /tmp/tmp6bb_khu_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6bb_khu_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $range\
    \ = max($numbers) - min($numbers);\n    $result = [];\n    foreach ($numbers as\
    \ $number) {\n        $result[] = ($number - min($numbers)) / $range;\n    }\n\
    \    return $result;\n}\n\nprint_r(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]));\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $diff = $max - $min;\n    $rescaled\
    \ = array();\n    foreach ($numbers as $number) {\n        $rescaled[] = ($number\
    \ - $min) / $diff;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $newNumbers\
    \ = array();\n  foreach ($numbers as $number) {\n    array_push($newNumbers, $number\
    \ / max($numbers));\n  }\n  return $newNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeflm9e2.php:19\n\
    Stack trace:\n#0 /tmp/tmpqeflm9e2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqeflm9e2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  if ($range\
    \ == 0) {\n    return array_fill(0, count($numbers), 0.5);\n  } else {\n    return\
    \ array_map(function($x) use ($min, $range) {\n      return ($x - $min) / $range;\n\
    \    }, $numbers);\n  }\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $new_numbers\
    \ = array();\n    $min = min($numbers);\n    $max = max($numbers);\n    foreach\
    \ ($numbers as $num) {\n        $new_numbers[] = ($num - $min) / ($max - $min);\n\
    \    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $unit_numbers = array();\n  foreach\
    \ ($numbers as $num) {\n    $unit_numbers[] = ($num - $min) / ($max - $min);\n\
    \  }\n  return $unit_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n\
    \        if ($number < $min) {\n            $min = $number;\n        }\n     \
    \   if ($number > $max) {\n            $max = $number;\n        }\n    }\n   \
    \ $delta = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $delta;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $new_numbers = array();\n \
    \   foreach ($numbers as $number) {\n        $new_numbers[] = ($number - $min)\
    \ / ($max - $min);\n    }\n    return $new_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  return array_map(function($x) use\
    \ ($max, $min) {\n    return ($x - $min) / ($max - $min);\n  }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = $max - $min;\n   \
    \ if ($scale < 0.001) {\n        return $numbers;\n    }\n    $rescaled = array();\n\
    \    foreach ($numbers as $num) {\n        $rescaled[] = ($num - $min) / $scale;\n\
    \    }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $delta = $max - $min;\n   \
    \ if ($delta == 0) {\n        return $numbers;\n    }\n    $numbers = array_map(function($x)\
    \ use ($min, $delta) {\n        return ($x - $min) / $delta;\n    }, $numbers);\n\
    \    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  $range = $max - $min;\n  if ($range\
    \ == 0) {\n    // avoid division by zero\n    return array_fill(0, count($numbers),\
    \ 0.5);\n  } else {\n    return array_map(function($number) use ($min, $range)\
    \ {\n      return ($number - $min) / $range;\n    }, $numbers);\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $oldMin\
    \ = min($numbers);\n  $oldMax = max($numbers);\n  $oldRange = $oldMax - $oldMin;\n\
    \  $newRange = 1.0;\n  $newValues = array();\n  foreach ($numbers as $val) {\n\
    \    $newValues[] = (($val - $oldMin) * $newRange) / $oldRange;\n  }\n  return\
    \ $newValues;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = $max - $min;\n   \
    \ foreach ($numbers as $key => $value) {\n        $numbers[$key] = ($value - $min)\
    \ / $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $result\
    \ = array();\n    $min = 0;\n    $max = 0;\n    $num_numbers = count($numbers);\n\
    \    for ($i = 0; $i < $num_numbers; $i++) {\n        if ($numbers[$i] < $min)\
    \ {\n            $min = $numbers[$i];\n        }\n        if ($numbers[$i] > $max)\
    \ {\n            $max = $numbers[$i];\n        }\n    }\n    $delta = $max - $min;\n\
    \    for ($i = 0; $i < $num_numbers; $i++) {\n        $result[$i] = ($numbers[$i]\
    \ - $min) / $delta;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu4n6r2a.php:31\n\
    Stack trace:\n#0 /tmp/tmphu4n6r2a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphu4n6r2a.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  $new_list = array();\n  foreach ($numbers\
    \ as $num) {\n    $new_list[] = ($num - $min) / ($max - $min);\n  }\n  return\
    \ $new_list;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $scaled = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n       \
    \ $n = $numbers[$i];\n        $scaled[$i] = ($n - $min) / $range;\n    }\n   \
    \ return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_number\
    \ = min($numbers);\n    $max_number = max($numbers);\n    if ($min_number == $max_number)\
    \ {\n        return array_fill(0, count($numbers), 0.5);\n    }\n    $result =\
    \ array();\n    foreach ($numbers as $n) {\n        $result[] = ($n - $min_number)\
    \ / ($max_number - $min_number);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = $max - $min;\n   \
    \ $result = array();\n    foreach ($numbers as $number) {\n        $result[] =\
    \ ($number - $min) / $scale;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $num_digits\
    \ = 4;\n\n    $min = min($numbers);\n    $max = max($numbers);\n\n    return array_map(function($n)\
    \ use ($min, $max, $num_digits) {\n        return round(($n - $min) / ($max -\
    \ $min), $num_digits);\n    }, $numbers);\n}\n\n$numbers = [\n    17.2370340326365,\n\
    \    15.8145785874384,\n    17.2370340326365,\n    15.8145785874384,\n    14.8351065826681,\n\
    \    14.8351065826681,\n    14.8351065826681,\n    14.8351065826681,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n    15.0330752454707,\n\
    \    15.0330752454707,\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpprb24r_4.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $diff = $max - $min;\n    $scaled\
    \ = array();\n    foreach ($numbers as $n) {\n        $scaled[] = ($n - $min)\
    \ / $diff;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $distance = $max - $min;\n\
    \    return array_map(function($number) use ($min, $distance) {\n        return\
    \ ($number - $min) / $distance;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  if ($min === $max) {\n    return\
    \ array_fill(0, count($numbers), 0.5);\n  }\n  return array_map(function($number)\
    \ use ($min, $max) {\n    return ($number - $min) / ($max - $min);\n  }, $numbers);\n\
    }\n\n$data = array(1.0, 2.0, 3.0, 4.0, 5.0);\nprint_r(rescale_to_unit($data));\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"Can't rescale less than two numbers\"\
    );\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $scale\
    \ = abs(max($numbers) - min($numbers));\n    return array_map(function($number)\
    \ use ($scale) {\n        return ($number - min($numbers)) / $scale;\n    }, $numbers);\n\
    }\n\n$rand_range = range(0, 50);\nshuffle($rand_range);\n$rand_range = array_slice($rand_range,\
    \ 0, rand(2, 20));\nvar_dump(rescale_to_unit($rand_range));\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwlk4tog1.php on line 9\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpwlk4tog1.php\
    \ on line 9\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwlk4tog1.php on line 9\narray(19) {\n  [0]=>\n  float(0.55102040816327)\n\
    \  [1]=>"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $count\
    \ = count($numbers);\n    if ($count < 2) {\n        return $numbers;\n    }\n\
    \    $min = $numbers[0];\n    $max = $numbers[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return $numbers;\n    }\n\
    \    $a = 1 / ($max - $min);\n    $b = $min / ($min - $max);\n    $result = array();\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[$i] = $a * $numbers[$i]\
    \ + $b;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_l61nfe.php:38\n\
    Stack trace:\n#0 /tmp/tmpj_l61nfe.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj_l61nfe.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $scaled;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"`rescale_to_unit` expects a list of at\
    \ least two numbers\");\n    }\n    $start = min($numbers);\n    $distance = max($numbers)\
    \ - $start;\n    if ($distance == 0) {\n        throw new Exception(\"List of\
    \ numbers has no distance\");\n    }\n    $output = [];\n    foreach ($numbers\
    \ as $number) {\n        $output[] = ($number - $start) / $distance;\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $numbers = array_map(function($x)\
    \ use ($min, $max) { return ($x - $min) / ($max - $min); }, $numbers);\n  return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($number)\
    \ use ($min, $max) {\n        return ($number - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $numbers\
    \ = array_values($numbers);\n  $max = max($numbers);\n  $min = min($numbers);\n\
    \  $result = [];\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / ($max - $min);\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // TODO:\
    \ implement me\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z2o7ewj.php:15\n\
    Stack trace:\n#0 /tmp/tmp8z2o7ewj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8z2o7ewj.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $d = $max - $min;\n  $rescaled =\
    \ array();\n  foreach ($numbers as $number) {\n    $rescaled[] = ($number - $min)\
    \ / $d;\n  }\n  return $rescaled;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    print_r(rescale_to_unit($numbers));\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"At least two elements required\");\n \
    \   }\n    $min = min($numbers);\n    $max = max($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $n) {\n        $result[] = ($n - $min) / ($max - $min);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $range = $max - $min;\n   \
    \ return array_map(function($x) use ($min, $range) { return ($x - $min) / $range;\
    \ }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // YOUR\
    \ CODE HERE\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoydiz608.php:15\n\
    Stack trace:\n#0 /tmp/tmpoydiz608.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpoydiz608.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $result = array();\n    foreach ($numbers as $number) {\n        $result[] =\
    \ ($number - $min) / $range;\n    }\n    return $result;\n}\n\n$result = rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]);\nprint_r($result);\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $scaled = array();\n    foreach ($numbers as $number) {\n        $scaled[] =\
    \ ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = null;\n    $max = null;\n    $result = array();\n    foreach ($numbers as\
    \ $n) {\n        if (is_null($min) || $n < $min) {\n            $min = $n;\n \
    \       }\n        if (is_null($max) || $n > $max) {\n            $max = $n;\n\
    \        }\n    }\n    foreach ($numbers as $n) {\n        $n = ($n - $min) /\
    \ ($max - $min);\n        $result[] = $n;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // TODO:\
    \ implement this function\n    $size = count($numbers);\n    $max = $numbers[0];\n\
    \    $min = $numbers[0];\n    for ($i = 0; $i < $size; $i++) {\n        if ($numbers[$i]\
    \ > $max) {\n            $max = $numbers[$i];\n        }\n        if ($numbers[$i]\
    \ < $min) {\n            $min = $numbers[$i];\n        }\n    }\n    for ($i =\
    \ 0; $i < $size; $i++) {\n        $numbers[$i] = ($numbers[$i] - $min) / ($max\
    \ - $min);\n    }\n    return $numbers;\n}\n\n$numbers = [1.0, 2.0, 3.0, 4.0,\
    \ 5.0];\nprint_r(rescale_to_unit($numbers));\necho \"\\n\";\n\n$numbers = [1.0,\
    \ 1.0, 1.0, 1.0, 1.0];\nprint_r(rescale_to_unit($numbers));\necho \"\\n\";\n\n\
    $numbers = [1.0, -1.0, 1.0, -1.0, 1.0];\nprint_r(rescale_to_unit($numbers));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n\n\nWarning: Division by zero in /tmp/tmp0et0834j.php on line\
    \ 20\n\nWarning: Division by zero in /tmp/tmp0et0834j.php on line 20\n\nWarning:\
    \ Division by zero in /tmp/tmp0et0834j.php on line 20\n\nWarning: Division by\
    \ zero in /tmp/tmp0et0834j.php on line 20\n\nWarning: Division by zero in /tmp/tmp0et0834j.php\
    \ on line 20\nArray\n(\n    [0] => NAN\n    [1] => NAN\n    [2] => NAN\n    [3]\
    \ => NAN\n    [4] => NAN\n)\n\nArray\n(\n    [0] => 1\n    [1] => 0\n    [2] =>\
    \ 1\n    [3] => 0\n    [4] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $scale = $max - $min;\n   \
    \ if ($scale == 0) {\n        return $numbers;\n    }\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $scale;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  if ($min == $max) {\n    return array_fill(0,\
    \ count($numbers), 0.5);\n  }\n  return array_map(function($n) use ($min, $max)\
    \ {\n    return ($n - $min) / ($max - $min);\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function($n) use\
    \ ($min, $max) { return ($n - $min) / ($max - $min); }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $spread = $max - $min;\n  \
    \  if ($spread == 0) {\n        return $numbers;\n    }\n    $unit_vector = array();\n\
    \    foreach ($numbers as $number) {\n        $unit_vector[] = ($number - $min)\
    \ / $spread;\n    }\n    return $unit_vector;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  if (count($numbers)\
    \ <= 1) {\n    echo \"List too short.\\n\";\n    return;\n  }\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function($x) use ($min, $max) {\n\
    \    return ($x - $min) / ($max - $min);\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $n =\
    \ count($numbers);\n    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i] =\
    \ ($numbers[$i] - $min) / ($max - $min);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $new_numbers = array();\n \
    \   foreach ($numbers as $n) {\n        array_push($new_numbers, ($n - $min) /\
    \ ($max - $min));\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Find\
    \ the minimum and maximum of the numbers\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    // Calculate the range\n    $range = $max - $min;\n  \
    \  // Apply the rescaling\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $scaled\
    \ = [];\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max\
    \ - $min;\n    foreach ($numbers as $number) {\n        $scaled[] = ($number -\
    \ $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max_number\
    \ = max($numbers);\n  $min_number = min($numbers);\n  $divisor = $max_number -\
    \ $min_number;\n  $result = array();\n  foreach ($numbers as $number) {\n    $result[]\
    \ = ($number - $min_number) / $divisor;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $smallest\
    \ = min($numbers);\n    $largest = max($numbers);\n    return array_map(function($n)\
    \ use ($smallest, $largest) {\n        return ($n - $smallest) / ($largest - $smallest);\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $largest\
    \ = max($numbers);\n  $smallest = min($numbers);\n  $scaled = array();\n  foreach\
    \ ($numbers as $number) {\n    $scaled[] = ($number - $smallest) / ($largest -\
    \ $smallest);\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"Linear transform requires list of at least\
    \ two numbers\");\n    }\n    $min_of_numbers = min($numbers);\n    $max_of_numbers\
    \ = max($numbers);\n    $numbers_range = $max_of_numbers - $min_of_numbers;\n\
    \    if ($numbers_range == 0) {\n        throw new Exception(\"All numbers in\
    \ input list are equal\");\n    }\n    return array_map(function($n) use ($min_of_numbers,\
    \ $numbers_range) {\n        return ($n - $min_of_numbers) / $numbers_range;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Find\
    \ max, min\n    $max = $numbers[0];\n    $min = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        if ($number < $min) {\n            $min = $number;\n     \
    \   }\n    }\n    // Rescale\n    $rescaled = array();\n    foreach ($numbers\
    \ as $number) {\n        $rescaled[] = ($number - $min) / ($max - $min);\n   \
    \ }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // compute\
    \ the min and max, if $numbers is empty, PHP will return INF and -INF\n  $max\
    \ = max($numbers);\n  $min = min($numbers);\n  $range = $max - $min;\n  if ($range\
    \ == 0) {\n    throw new Exception(\"Cannot rescale an empty array\");\n  }\n\
    \  $newNumbers = array();\n  foreach ($numbers as $n) {\n    $newNumbers[] = ($n\
    \ - $min) / $range;\n  }\n  return $newNumbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $interval = $max - $min;\n  $scaled\
    \ = array();\n  foreach ($numbers as $number) {\n    $scaled[] = ($number - $min)\
    \ / $interval;\n  }\n  return $scaled;\n}\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $smallest\
    \ = min($numbers);\n    $largest = max($numbers);\n    $scaled = array();\n  \
    \  foreach ($numbers as $number) {\n        $scaled[] = ($number - $smallest)\
    \ / ($largest - $smallest);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $diff = $max - $min;\n    if\
    \ ($diff == 0) {\n        return array_fill(0, count($numbers), 0);\n    } else\
    \ {\n        return array_map(function($n) use ($max, $min, $diff) {\n       \
    \     return ($n - $min) / $diff;\n        }, $numbers);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $length\
    \ = count($numbers);\n  if ($length < 2) {\n    return null;\n  }\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $diff = $max - $min;\n  if ($diff === 0) {\n    return\
    \ null;\n  }\n  $scaled = array();\n  for ($i = 0; $i < $length; $i++) {\n   \
    \ $scaled[$i] = ($numbers[$i] - $min) / $diff;\n  }\n  return $scaled;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $ranges = $max - $min;\n  return\
    \ array_map(function($number) use ($min, $ranges) {\n    return ($number - $min)\
    \ / $ranges;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = max($numbers);\n    $min = min($numbers);\n    $delta = $max - $min;\n   \
    \ return array_map(function($e) use ($max, $min, $delta) {\n        return ($e\
    \ - $min) / $delta;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $smallest\
    \ = min($numbers);\n    $largest = max($numbers);\n    $factor = 1 / ($largest\
    \ - $smallest);\n    return array_map(function($num) use ($smallest, $factor)\
    \ {\n        return ($num - $smallest) * $factor;\n    }, $numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  if ($range\
    \ == 0) {\n    return $numbers;\n  }\n  $result = array();\n  foreach ($numbers\
    \ as $number) {\n    $result[] = ($number - $min) / $range;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"Not enough numbers\");\n    }\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $res = array();\n    foreach ($numbers as $v) {\n        array_push($res, ($v\
    \ - $min) / $range);\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ $numbers[0];\n  $max = $numbers[0];\n  foreach ($numbers as $num) {\n    if\
    \ ($num < $min) {\n      $min = $num;\n    }\n    if ($num > $max) {\n      $max\
    \ = $num;\n    }\n  }\n  if ($min == $max) {\n    throw new InvalidArgumentException(\"\
    Min and max are equal\");\n  }\n  $scaled = array();\n  foreach ($numbers as $num)\
    \ {\n    $scaled[] = ($num - $min) / ($max - $min);\n  }\n  return $scaled;\n\
    }\n\nclass MyException extends Exception {}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $result = array();\n    foreach ($numbers as $n) {\n        $result[] = ($n\
    \ - $min) / $range;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $unit = [];\n    foreach ($numbers\
    \ as $number) {\n        $unit[] = ($number - $min) / ($max - $min);\n    }\n\
    \    return $unit;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $range = max($numbers) - $min;\n    return array_map(function($number)\
    \ use ($min, $range) {\n        return ($number - $min) / $range;\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $scaled = array();\n    foreach ($numbers as $number) {\n        $scaled[] =\
    \ ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max\
    \ = 0;\n    $min = 0;\n    $max_value = NULL;\n    $min_value = NULL;\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        if ($max_value === NULL || $numbers[$i]\
    \ > $max_value) {\n            $max_value = $numbers[$i];\n            $max =\
    \ $i;\n        }\n        if ($min_value === NULL || $numbers[$i] < $min_value)\
    \ {\n            $min_value = $numbers[$i];\n            $min = $i;\n        }\n\
    \    }\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i == $min)\
    \ {\n            $numbers[$i] = 0;\n        } elseif ($i == $max) {\n        \
    \    $numbers[$i] = 1;\n        } else {\n            $numbers[$i] = $numbers[$i]\
    \ - $min_value;\n            $numbers[$i] = $numbers[$i] / ($max_value - $min_value);\n\
    \        }\n    }\n    return $numbers;\n}\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo49med9.php:38\n\
    Stack trace:\n#0 /tmp/tmpfo49med9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfo49med9.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_val\
    \ = min($numbers);\n    $max_val = max($numbers);\n    if ($min_val == $max_val)\n\
    \        return $numbers;\n    return array_map(function($n) use ($min_val, $max_val)\
    \ { return ($n - $min_val) / ($max_val - $min_val); }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $len = count($numbers);\n \
    \   for ($i = 0; $i < $len; $i++) {\n        $numbers[$i] = ($numbers[$i] - $min)\
    \ / ($max - $min);\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new Exception(\"rescale_to_unit: Array is too short\"\
    );\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n    if ($min\
    \ == $max) {\n        return array_fill(0, count($numbers), 0.5);\n    }\n   \
    \ return array_map(function($number) use ($min, $max) {\n        return ($number\
    \ - $min) / ($max - $min);\n    }, $numbers);\n}\n\n$data = json_decode(file_get_contents(__DIR__\
    \ . '/../data/fertility-data.json'), true);\n$data = array_filter($data, function($country)\
    \ {\n    return $country['name'] == 'Bolivia'\n        || $country['name'] ==\
    \ 'Chile'\n        || $country['name'] == 'Denmark'\n        || $country['name']\
    \ == 'United States'\n        || $country['name'] == 'Uruguay';\n});\n$data =\
    \ array_map(function($country) {\n    $country['gdp'] = rescale_to_unit([$country['gdp']])[0];\n\
    \    $country['life_expectancy'] = rescale_to_unit([$country['life_expectancy']])[0];\n\
    \    $country['population'] = rescale_to_unit([$country['population']])[0];\n\
    \    $country['fertility'] = rescale_to_unit([$country['fertility']])[0];\n  \
    \  return $country;\n}, $data);\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: file_get_contents(/tmp/../data/fertility-data.json): failed\
    \ to open stream: No such file or directory in /tmp/tmpgvhnrjtt.php on line 20\n\
    \nWarning: array_filter() expects parameter 1 to be array, null given in /tmp/tmpgvhnrjtt.php\
    \ on line 27\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpgvhnrjtt.php on line 34\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // find\
    \ min/max\n    $min = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number < $min) {\n            $min = $number;\n\
    \        }\n        if ($number > $max) {\n            $max = $number;\n     \
    \   }\n    }\n    // apply linear transform to each element\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ ($max - $min);\n    }\n    return $rescaled;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $delta = $max - $min;\n  if ($delta\
    \ == 0) {\n    return array_fill(0, count($numbers), 0.5);\n  }\n  return array_map(function($number)\
    \ use ($min, $delta) {\n    return ($number - $min) / $delta;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $range =\
    \ $range == 0 ? 1 : $range;\n  return array_map(function($value) use ($min, $range)\
    \ {\n    return ($value - $min) / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $denominator = $max - $min;\n\
    \    return array_map(function($e) use ($min, $denominator) { return ($e - $min)\
    \ / $denominator; }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Do\
    \ some transformations\n    return array_map(function($v) {\n        return $v\
    \ * 2;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13o4go7e.php:18\n\
    Stack trace:\n#0 /tmp/tmp13o4go7e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp13o4go7e.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($n)\
    \ use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($x)\
    \ use ($min, $max) {\n        return ($x - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $input_min\
    \ = min($numbers);\n    $input_max = max($numbers);\n    $input_range = $input_max\
    \ - $input_min;\n    $scaled_numbers = array();\n    foreach ($numbers as $num)\
    \ {\n        $scaled_numbers[] = ($num - $input_min) / $input_range;\n    }\n\
    \    return $scaled_numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number - $min)\
    \ / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = $max - $min;\n   \
    \ $length = count($numbers);\n    $rescaled = array();\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        $rescaled[$i] = ($numbers[$i] - $min) / $scale;\n\
    \    }\n    return $rescaled;\n}\n\n$pixels = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    $rescaled = rescale_to_unit($pixels);\nprint_r($rescaled);\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max =\
    \ max($numbers);\n  $min = min($numbers);\n  $range = $max - $min;\n  $rescaled\
    \ = array();\n  foreach ($numbers as $number) {\n    $rescaled[] = ($number -\
    \ $min) / $range;\n  }\n  return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $mapped = array();\n    foreach ($numbers as $number) {\n        if ($range\
    \ == 0) {\n            $mapped[] = 1;\n        } else {\n            $mapped[]\
    \ = (($number - $min) / $range);\n        }\n    }\n    return $mapped;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_number\
    \ = min($numbers);\n    $max_number = max($numbers);\n    return array_map(function($x)\
    \ use ($min_number, $max_number) {\n        return ($x - $min_number) / ($max_number\
    \ - $min_number);\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  sort($numbers);\n\
    \  // Assumes that numbers are in ascending order\n  $min = $numbers[0];\n  $max\
    \ = $numbers[count($numbers) - 1];\n  $ranges = array();\n  for ($i = 0; $i <\
    \ count($numbers); $i++) {\n    $ranges[$i] = (($numbers[$i] - $min) / ($max -\
    \ $min));\n  }\n  return $ranges;\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf8c0t26.php:23\n\
    Stack trace:\n#0 /tmp/tmpvf8c0t26.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvf8c0t26.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $max_number\
    \ = max($numbers);\n    $min_number = min($numbers);\n    return array_map(function($n)\
    \ use ($max_number, $min_number) {\n        return ($n - $min_number) / ($max_number\
    \ - $min_number);\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($n)\
    \ use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // $numbers\
    \  expected to be valid array of numbers\n  // rescale list of numbers to have\
    \ its smallest number be 0 and its largest number be 1\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  // return 0 if min and max are the same\n  // (i.e.\
    \ there is only one number)\n  if ($min == $max) return [0];\n  // return list\
    \ of rescaled numbers\n  $transformed = [];\n  foreach ($numbers as $number) {\n\
    \    $transformed[] = ($number - $min) / ($max - $min);\n  }\n  return $transformed;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $smallest\
    \ = min($numbers);\n    $largest = max($numbers);\n    $total_range = $largest\
    \ - $smallest;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $smallest) / $total_range;\n    }\n    return\
    \ $rescaled;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $n =\
    \ count($numbers);\n    $min = $numbers[0];\n    $max = $numbers[$n - 1];\n  \
    \  $scaled = array();\n    for ($i = 0; $i < $n; $i++) {\n        $scaled[$i]\
    \ = ($numbers[$i] - $min) / ($max - $min);\n    }\n    return $scaled;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph07nokx3.php:23\n\
    Stack trace:\n#0 /tmp/tmph07nokx3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph07nokx3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function($x) use\
    \ ($min, $max) { return ($x - $min) / ($max - $min); }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $new_min\
    \ = 0;\n    $new_max = 1;\n    $old_min = min($numbers);\n    $old_max = max($numbers);\n\
    \    $old_range = $old_max - $old_min;\n    $new_range = $new_max - $new_min;\n\
    \    $result = array();\n    foreach ($numbers as $value) {\n        $result[]\
    \ = (($value - $old_min) * $new_range / $old_range) + $new_min;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ if ($range == 0) return array_fill(0, count($numbers), 0);\n    return array_map(function($n)\
    \ use ($min, $range) { return ($n - $min) / $range; }, $numbers);\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $minimum\
    \ = min($numbers);\n    $maximum = max($numbers);\n    $scaled = array();\n  \
    \  foreach ($numbers as $number) {\n        $scaled[] = ($number - $minimum) /\
    \ ($maximum - $minimum);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_num\
    \ = min($numbers);\n    $max_num = max($numbers);\n    if ($min_num == $max_num)\
    \ {\n        return $numbers;\n    }\n    $rescaled = array();\n    foreach ($numbers\
    \ as $number) {\n        $rescaled[] = ($number - $min_num) / ($max_num - $min_num);\n\
    \    }\n    return $rescaled;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    var_dump(rescale_to_unit($numbers));\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0.25)\n  [2]=>\n  float(0.5)\n\
    \  [3]=>\n  float(0.75)\n  [4]=>\n  float(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ if ($range == 0) {\n        return array_fill(0, count($numbers), 0);\n    }\
    \ else {\n        return array_map(function($x) use ($min, $range) {\n       \
    \     return ($x - $min) / $range;\n        }, $numbers);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function($n)\
    \ use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $old_min\
    \ = min($numbers);\n  $old_max = max($numbers);\n  $old_range = $old_max - $old_min;\n\
    \  $new_min = 0;\n  $new_max = 1;\n  $new_range = $new_max - $new_min;\n  $rescaled\
    \ = array();\n  foreach ($numbers as $number) {\n    $old_fraction = ($number\
    \ - $old_min) / $old_range;\n    $new_number = $new_min + $old_fraction * $new_range;\n\
    \    $rescaled[] = $new_number;\n  }\n  return $rescaled;\n}\n\n$array1 = [1.0,\
    \ 2.0, 3.0, 4.0, 5.0];\nprint_r(rescale_to_unit($array1));\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = $numbers[0];\n    $max = $numbers[0];\n    foreach ($numbers as $val) {\n\
    \        if ($val < $min) {\n            $min = $val;\n        }\n        if ($val\
    \ > $max) {\n            $max = $val;\n        }\n    }\n    $result = array();\n\
    \    foreach ($numbers as $val) {\n        $result[] = (($val - $min) / ($max\
    \ - $min));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  if ($min == $max) {\n    return $numbers;\n\
    \  }\n  $unit_numbers = array();\n  foreach ($numbers as $number) {\n    $unit_numbers[]\
    \ = ($number - $min) / ($max - $min);\n  }\n  return $unit_numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // Compute\
    \ minimum and maximum\n  $min = min($numbers);\n  $max = max($numbers);\n  //\
    \ Find the difference\n  $diff = $max - $min;\n  // Subtract the min from all\
    \ numbers\n  $numbers = array_map(function($number) use ($min) {\n    return $number\
    \ - $min;\n  }, $numbers);\n  // Divide everything by the difference\n  $numbers\
    \ = array_map(function($number) use ($diff) {\n    return $number / $diff;\n \
    \ }, $numbers);\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $min = min($min, $numbers[$i]);\n        $max = max($max, $numbers[$i]);\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n     \
    \   $res[$i] = ($numbers[$i] - $min) / ($max - $min);\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        return $numbers;\n    }\n    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $span = $max - $min;\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min) / $span;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $dist = $max - $min;\n  return array_map(function($num)\
    \ use ($min, $dist) {\n    return ($num - $min) / $dist;\n  }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = $max - $min;\n   \
    \ $transformed = array();\n    foreach ($numbers as $n) {\n        $transformed[]\
    \ = ($n - $min) / $scale;\n    }\n    return $transformed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min_number\
    \ = min($numbers);\n  $max_number = max($numbers);\n  $range = $max_number - $min_number;\n\
    \  return array_map(function($number) use ($min_number, $range) {\n    return\
    \ ($number - $min_number) / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $minimum\
    \ = min($numbers);\n    $maximum = max($numbers);\n    $delta = $maximum - $minimum;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $minimum) / $delta;\n    }\n    return $rescaled;\n}\n\n$numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0];\n$rescaled = rescale_to_unit($numbers);\nvar_dump($rescaled);\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0.25)\n  [2]=>\n  float(0.5)\n\
    \  [3]=>\n  float(0.75)\n  [4]=>\n  float(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $unit_numbers = array();\n    foreach ($numbers as $value) {\n        $unit_numbers[]\
    \ = ($value - $min) / $range;\n    }\n    return $unit_numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $list_min\
    \ = min($numbers);\n  $list_max = max($numbers);\n  $numbers_rescaled = array();\n\
    \  foreach ($numbers as $number) {\n    $numbers_rescaled[] = ($number - $list_min)\
    \ / ($list_max - $list_min);\n  }\n  return $numbers_rescaled;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // TODO\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f869kpo.php:15\n\
    Stack trace:\n#0 /tmp/tmp3f869kpo.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3f869kpo.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ return array_map(function($i) use ($min, $range) {\n        return ($i - $min)\
    \ / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $normalized = array();\n  \
    \  foreach ($numbers as $value) {\n        $normalized[] = ($value - $min) / ($max\
    \ - $min);\n    }\n    return $normalized;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $output = [];\n    foreach\
    \ ($numbers as $value) {\n        $output[] = ($value - $min) / ($max - $min);\n\
    \    }\n    return $output;\n}\n\nvar_dump(rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]));\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0.25)\n  [2]=>\n  float(0.5)\n\
    \  [3]=>\n  float(0.75)\n  [4]=>\n  float(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $unit = array();\n    foreach\
    \ ($numbers as $number) {\n        $unit[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $unit;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_x\
    \ = min($numbers);\n    $max_x = max($numbers);\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min_x) / ($max_x -\
    \ $min_x);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ $numbers[0];\n  $max = $numbers[0];\n  foreach ($numbers as $value) {\n    if\
    \ ($value < $min) {\n      $min = $value;\n    }\n    if ($value > $max) {\n \
    \     $max = $value;\n    }\n  }\n  $diff = $max - $min;\n  $rescaled = array();\n\
    \  foreach ($numbers as $value) {\n    array_push($rescaled, ($value - $min) /\
    \ $diff);\n  }\n  return $rescaled;\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // Write\
    \ your code here.\n  $min = min($numbers);\n  $max = max($numbers);\n  $unit =\
    \ $max - $min;\n  $result = [];\n  for ($i = 0; $i < count($numbers); $i++) {\n\
    \    array_push($result, ($numbers[$i] - $min) / $unit);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $new_list = array();\n    foreach ($numbers as $value) {\n        $new_list[]\
    \ = ($value - $min) / $range;\n    }\n    return $new_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $delta = $max - $min;\n   \
    \ return array_map(function($n) use ($min, $delta) {\n        return ($n - $min)\
    \ / $delta;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ if ($range == 0) {\n        return array_fill(0, count($numbers), 0);\n    }\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $range\
    \ = max($numbers) - min($numbers);\n    $rescaled = array();\n    foreach ($numbers\
    \ as $number) {\n        $rescaled[] = ($number - min($numbers)) / $range;\n \
    \   }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $current_min\
    \ = min($numbers);\n    $current_max = max($numbers);\n    $delta = $current_max\
    \ - $current_min;\n    $output = array();\n    foreach ($numbers as $number) {\n\
    \        $scaled = ($number - $current_min) / $delta;\n        $output[] = $scaled;\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (count($numbers)\
    \ < 2) {\n        throw new InvalidArgumentException(\"Can't rescale a one-element\
    \ list\");\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        $result[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $sum = array_sum($numbers);\n  $count\
    \ = count($numbers);\n  for ($i = 0; $i < $count; $i++) {\n    $numbers[$i] =\
    \ ($numbers[$i] - $min) / ($max - $min);\n  }\n  return $numbers;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $ranges = $max - $min;\n  \
    \  if ($ranges == 0) {\n        return array_fill(0, count($numbers), 0);\n  \
    \  }\n    return array_map(function($n) use ($min, $ranges) {\n        return\
    \ ($n - $min) / $ranges;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    sort($numbers);\n\
    \    $min = $numbers[0];\n    $max = $numbers[count($numbers) - 1];\n    $result\
    \ = [];\n    foreach ($numbers as $number) {\n        array_push($result, ($number\
    \ - $min) / ($max - $min));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1llo6jh.php:23\n\
    Stack trace:\n#0 /tmp/tmpd1llo6jh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd1llo6jh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Find\
    \ the biggest and smallest numbers\n    $max = max($numbers);\n    $min = min($numbers);\n\
    \    // Deduct the smallest number from all numbers, so the smallest number becomes\
    \ 0\n    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers\
    \ as $value) {\n        // If the range is 0 (i.e. the smallest and biggest number\
    \ are equal), just return 0\n        if ($range == 0) {\n            $rescaled[]\
    \ = 0;\n        } else {\n            $rescaled[] = ($value - $min) / $range;\n\
    \        }\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ if ($range == 0) {\n        return $numbers;\n    }\n    $output = array();\n\
    \    foreach ($numbers as $n) {\n        $output[] = ($n - $min) / $range;\n \
    \   }\n    return $output;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $rescaled\
    \ = [];\n    $min = min($numbers);\n    $range = max($numbers) - $min;\n    foreach\
    \ ($numbers as $value) {\n        $rescaled[] = ($value - $min) / $range;\n  \
    \  }\n    return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min_number\
    \ = min($numbers);\n    $max_number = max($numbers);\n    if ($min_number == $max_number)\
    \ {\n        return array_fill(0, count($numbers), 0.5);\n    }\n    $d = $max_number\
    \ - $min_number;\n    return array_map(function($number) use ($min_number, $d)\
    \ {\n        return ($number - $min_number) / $d;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $max_number\
    \ = max($numbers);\n  $min_number = min($numbers);\n  $result = array();\n  foreach\
    \ ($numbers as $number) {\n    $result[] = ($number - $min_number) / ($max_number\
    \ - $min_number);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    if (!\
    \ is_array($numbers)) {\n        echo \"Input is not an array\\n\";\n        return;\n\
    \    }\n    if (count($numbers) < 2) {\n        echo \"Input array is too short\\\
    n\";\n        return;\n    }\n    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / ($max - $min);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $delta = $max - $min;\n   \
    \ return array_map(function($number) use ($min, $delta) {\n        return ($number\
    \ - $min) / $delta;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ if ($range == 0) {\n        return $numbers;\n    }\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min_number\
    \ = min($numbers);\n  $max_number = max($numbers);\n  return array_map(function($number)\
    \ use ($min_number, $max_number) {\n    if ($max_number == $min_number) {\n  \
    \    return 0;\n    }\n    return ($number - $min_number) / ($max_number - $min_number);\n\
    \  }, $numbers);\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $rescaled\
    \ = array();\n  foreach ($numbers as $n) {\n    $rescaled[] = ($n - $min) / $range;\n\
    \  }\n  return $rescaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // calculate\
    \ min and max\n    $min = min($numbers);\n    $max = max($numbers);\n    // copy\
    \ numbers to output array\n    $output = $numbers;\n    // rescale numbers\n \
    \   for ($i = 0; $i < count($output); $i++) {\n        $output[$i] = ($output[$i]\
    \ - $min) / ($max - $min);\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  // create\
    \ a copy of the array, sorted\n  $sorted = $numbers;\n  sort($sorted);\n  $delta\
    \ = $sorted[count($sorted) - 1] - $sorted[0];\n  // map\n  $results = array();\n\
    \  foreach ($numbers as $n) {\n    array_push($results, ($n - $sorted[0]) / $delta);\n\
    \  }\n  return $results;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n    foreach\
    \ ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max - $min);\n\
    \    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $delta = $max - $min;\n  return array_map(function($number)\
    \ use ($min, $delta) {\n    return ($number - $min) / $delta;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $scaled\
    \ = array();\n  foreach ($numbers as $n) {\n    $scaled[] = ($n - $min) / $range;\n\
    \  }\n  return $scaled;\n}\n\n$sample = [1.0, 2.0, 3.0, 4.0, 5.0];\n\n$rescaled\
    \ = rescale_to_unit($sample);\n\nprint_r($rescaled);\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0.25\n    [2] => 0.5\n    [3] => 0.75\n\
    \    [4] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $list_min\
    \ = $numbers[0];\n    $list_max = $numbers[0];\n    $min_max_diff = 0;\n    $rescaled_list\
    \ = array();\n    $rescaled_list[0] = 0;\n\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $list_min) {\n            $list_min = $numbers[$i];\n\
    \        }\n        if ($numbers[$i] > $list_max) {\n            $list_max = $numbers[$i];\n\
    \        }\n    }\n\n    $min_max_diff = $list_max - $list_min;\n\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        $rescaled_list[$i] = ($numbers[$i]\
    \ - $list_min) / $min_max_diff;\n    }\n\n    return $rescaled_list;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxo7eq7b_.php:35\n\
    Stack trace:\n#0 /tmp/tmpxo7eq7b_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxo7eq7b_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $normalized = array();\n  \
    \  foreach ($numbers as $number) {\n        $normalized[] = ($number - $min) /\
    \ ($max - $min);\n    }\n    return $normalized;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    // Find\
    \ min & max number\n    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ // Map every number to 0...1 interval\n    $scaled = array_map(function($n)\
    \ use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n\
    \    return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n    $smallest\
    \ = PHP_INT_MAX;\n    $largest = ~PHP_INT_MAX;\n    foreach ($numbers as $number)\
    \ {\n        if ($number < $smallest) {\n            $smallest = $number;\n  \
    \      }\n        if ($number > $largest) {\n            $largest = $number;\n\
    \        }\n    }\n    $scaled = [];\n    foreach ($numbers as $number) {\n  \
    \      $scaled[] = ($number - $smallest) / ($largest - $smallest);\n    }\n  \
    \  return $scaled;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    // [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n  $rescaled\
    \ = array();\n  foreach ($numbers as $number) {\n    $rescaled[] = ($number -\
    \ $min) / $range;\n  }\n  return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
