name: HumanEval_48_is_palindrome
language: php
prompt: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n\
  // True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n//\
  \ True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome($text) {\n"
tests: "function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($text == \"\") {\n        return True;\n    } elseif (strlen($text)\
    \ == 1) {\n        return True;\n    } elseif (strlen($text) == 2) {\n       \
    \ if ($text[0] == $text[1]) {\n            return True;\n        } else {\n  \
    \          return False;\n        }\n    } else {\n        if ($text[0] == $text[strlen($text)\
    \ - 1]) {\n            $text = substr($text, 1, strlen($text) - 2);\n        \
    \    return is_palindrome($text);\n        } else {\n            return False;\n\
    \        }\n    }\n}\n", "  $text = strtolower($text);\n  $text = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $text);\n  return strrev($text) == $text;\n}", "    $reversed = strrev($text);\n\
    \    return $text == $reversed;\n}", "\t$characters = str_split($text);\n\t$reverse\
    \ = array_reverse($characters);\n\tif ($characters == $reverse) {\n\t\treturn\
    \ True;\n\t} else {\n\t\treturn False;\n\t}\n}", "  $letters = str_split($text);\n\
    \  return array_reverse($letters) == $letters;\n}\n", "    $answer = true;\n \
    \   for ($i = 0; $i < (strlen($text) / 2); $i++) {\n        if ($text[$i] != $text[strlen($text)\
    \ - $i - 1]) {\n            $answer = false;\n            break;\n        }\n\
    \    }\n    return $answer;\n}\n", "    if (strlen($text) <= 1) {\n        return\
    \ true;\n    }\n    if ($text[0] === $text[strlen($text) - 1]) {\n        return\
    \ is_palindrome(substr($text, 1, strlen($text) - 2));\n    }\n    return false;\n\
    }\n", "    $len = strlen($text);\n    for ($i = 0; $i < $len / 2; $i++) {\n  \
    \      if ($text[$i] != $text[$len - $i - 1]) {\n            return False;\n \
    \       }\n    }\n    return True;\n}\n", "\t$result = true;\n\t\n\tif (strlen($text)\
    \ == 0) {\n\t\treturn $result;\n\t}\n\t\n\t$text = strtolower($text);\n\t$len\
    \ = strlen($text);\n\t$mid = floor($len / 2);\n\t\n\tif ($len % 2 == 0) {\n\t\t\
    // even\n\t\t$end = $mid;\n\t} else {\n\t\t// odd\n\t\t$end = $mid + 1;\n\t}\n\
    \t\n\tfor ($i = 0; $i < $end; $i++) {\n\t\tif ($text[$i] != $text[$len - $i -\
    \ 1]) {\n\t\t\t$result = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn $result;\n\
    }\n", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $text);\n    $text = str_split($text);\n    $length = count($text);\n  \
    \  $mid = $length / 2;\n    for ($i = 0; $i < $mid; $i++) {\n        if ($text[$i]\
    \ != $text[$length - $i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "\t$letters = preg_split('//', $text, -1, PREG_SPLIT_NO_EMPTY);\n\
    \t$start = 0;\n\t$end = count($letters) - 1;\n\twhile ($start < $end) {\n\t\t\
    if ($letters[$start] != $letters[$end]) {\n\t\t\treturn False;\n\t\t}\n\t\t$start++;\n\
    \t\t$end--;\n\t}\n\treturn True;\n}\n", "  $len = strlen($text);\n  for ($i =\
    \ 0; $i < $len / 2; $i++) {\n    if ($text[$i] != $text[$len - $i - 1]) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n", "  $text_length = strlen($text);\n\
    \  if ($text_length == 0) {\n    return TRUE;\n  }\n  if ($text_length == 1) {\n\
    \    return TRUE;\n  }\n  $first_char = $text[0];\n  $last_char = $text[$text_length\
    \ - 1];\n  if ($first_char != $last_char) {\n    return FALSE;\n  }\n  $sub_string\
    \ = substr($text, 1, $text_length - 2);\n  return is_palindrome($sub_string);\n\
    }\n", "    $text = strtolower($text);\n    return $text == strrev($text);\n}\n\
    echo(is_palindrome(''));", "\t$text_length = strlen($text);\n\t$half_length =\
    \ intval($text_length / 2);\n\t$is_palindrome = True;\n\tfor ($i = 0; $i < $half_length;\
    \ $i++) {\n\t\tif ($text[$i] != $text[$text_length - $i - 1]) {\n\t\t\t$is_palindrome\
    \ = False;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $is_palindrome;\n}\n", "    $text\
    \ = strtolower($text);\n    $length = strlen($text);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($text[$i] !== $text[$length - $i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  // TODO: Fill in the function\
    \ body\n}\n", "  if(empty($text)) {\n    return true;\n  }\n\n  $count = strlen($text);\n\
    \  $mid = floor($count / 2);\n\n  for($i = 0; $i < $mid; $i++) {\n    if($text[$i]\
    \ != $text[$count - $i - 1]) {\n      return false;\n    }\n  }\n\n  return true;\n\
    }\n\nclass is_palindromeTest extends PHPUnit_Framework_TestCase {\n  public function\
    \ test1() {\n    $this->assertTrue(is_palindrome(''));\n  }\n\n  public function\
    \ test2() {\n    $this->assertTrue(is_palindrome('aba'));\n  }\n\n  public function\
    \ test3() {\n    $this->assertTrue(is_palindrome('aaaaa'));\n  }\n\n  public function\
    \ test4() {\n    $this->assertFalse(is_palindrome('zbcd'));\n  }\n}", "  $textLength\
    \ = strlen($text);\n  for ($i = 0; $i < $textLength; $i++) {\n    if ($text[$i]\
    \ != $text[$textLength - $i - 1]) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "    $text = strtolower($text);\n    $len = strlen($text);\n  \
    \  for ($i = 0; $i < floor($len / 2); $i++) {\n        if ($text[$i] != $text[$len\
    \ - $i - 1]) {\n            return False;\n        }\n    }\n    return True;\n\
    }\n", "    if (strlen($text) < 2) {\n        return true;\n    } else {\n    \
    \    $first_char = substr($text, 0, 1);\n        $last_char = substr($text, -1);\n\
    \        $middle_chars = substr($text, 1, -1);\n        return $first_char ==\
    \ $last_char && is_palindrome($middle_chars);\n    }\n}\n\necho is_palindrome('za');\n",
  "  if (strlen($text) == 0) {\n    return True;\n  } else {\n    return strtolower($text[0])\
    \ == strtolower($text[strlen($text) - 1]) && is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n  }\n}\necho '<pre>';\nvar_dump(is_palindrome('Aa'));\necho '</pre>';\n",
  "\t$text_length = strlen($text);\n\tif ($text_length == 0) {\n\t\treturn true;\n\
    \t}\n\tfor ($i = 0; $i < $text_length; $i += 1) {\n\t\tif ($text[$i] != $text[$text_length\
    \ - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    if(strlen($text)\
    \ < 2) {\n        return True;\n    }\n    else {\n        if($text[0] == $text[strlen($text)\
    \ - 1]) {\n            return is_palindrome(substr($text, 1, strlen($text) - 2));\n\
    \        }\n        else {\n            return False;\n        }\n    }\n}\necho\
    \ is_palindrome('abba');\necho is_palindrome('abca');", "    $size = strlen($text);\n\
    \    for ($i = 0; $i < floor($size / 2); $i++) {\n        if ($text[$i] != $text[$size\
    \ - $i - 1]) {\n            return False;\n        }\n    }\n    return True;\n\
    }\n", "    // TODO: Fill in the code\n    $rev_text = \"\";\n    $n = strlen($text);\n\
    \    for ($i = $n - 1; $i >= 0; $i--) {\n        $rev_text .= $text[$i];\n   \
    \ }\n    if ($text == $rev_text) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n", "    if (strlen($text) <= 1) {\n        return\
    \ True;\n    } else {\n        if ($text[0] == $text[strlen($text) - 1]) {\n \
    \           return is_palindrome(substr($text, 1, strlen($text) - 2));\n     \
    \   } else {\n            return False;\n        }\n    }\n}\n", "  $text_length\
    \ = strlen($text);\n  $mid = floor($text_length / 2);\n  for ($i = 0; $i < $mid;\
    \ $i++) {\n    if ($text[$i] != $text[$text_length - $i - 1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $symbols = preg_split('//u',\
    \ $text, null, PREG_SPLIT_NO_EMPTY);\n    $length = count($symbols);\n    for\
    \ ($i = 0; $i < $length / 2; $i++) {\n        if ($symbols[$i] != $symbols[$length\
    \ - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    // your code here\n    $reverse = strrev($text);\n    if ($text ==\
    \ $reverse) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\n", "\t$len = strlen($text);\n\tif ($len <= 1) {\n\t\treturn true;\n\t\
    }\n\t$mid = (int) ($len / 2);\n\t$first = strtolower(substr($text, 0, $mid));\n\
    \t$last = strtolower(substr($text, -$mid));\n\tif ($first == $last) {\n\t\treturn\
    \ is_palindrome(substr($text, $mid, $len - $mid - $mid));\n\t}\n\treturn false;\n\
    }", "    if(!is_string($text)) {\n        return false;\n    }\n    $length =\
    \ strlen($text);\n    for($i = 0; $i < $length / 2; $i++) {\n        if($text[$i]\
    \ != $text[$length - $i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "\t$text = strtolower($text);\n\t$text = preg_replace('/[^a-z]/',\
    \ '', $text);\n\t$left = 0;\n\t$right = strlen($text) - 1;\n\t$len = $right +\
    \ 1;\n\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$left] != $text[$right])\n\
    \t\t\treturn false;\n\t\t$left++;\n\t\t$right--;\n\t}\n\treturn true;\n}\n\nif\
    \ (is_palindrome('abba'))\n\techo 'true' . \"\\n\";\nelse\n\techo 'false' . \"\
    \\n\";\n\nif (is_palindrome('Anna'))\n\techo 'true' . \"\\n\";\nelse\n\techo 'false'\
    \ . \"\\n\";\n\nif (is_palindrome('\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\
    \u0430 \u043C\u0430\u043D\u0438\u0442 \u043D\u0435\u0433\u0440\u0430'))\n\techo\
    \ 'true' . \"\\n\";\nelse\n\techo 'false' . \"\\n\";\n", "    if (strlen($text)\
    \ < 2) {\n        return True;\n    }\n    if ($text[0] == $text[strlen($text)\
    \ - 1]) {\n        return is_palindrome(substr($text, 1, strlen($text) - 2));\n\
    \    }\n    return False;\n}\n\nif (is_palindrome('')) {\n    echo \"Palindrome\"\
    ;\n} else {\n    echo \"Not palindrome\";\n}", "\tif (!$text) {\n\t\treturn true;\n\
    \t}\n\t$text = strtolower($text);\n\t$length = strlen($text);\n\tfor ($i = 0;\
    \ $i < $length; $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1]) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    return true;\n}\n", " \
    \ // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example: print \"Hello world!\";\n  if (strlen($text) <= 1)\
    \ {\n    print \"True\\n\";\n    return True;\n  }\n  else {\n    if (substr($text,\
    \ 0, 1) == substr($text, -1)) {\n      is_palindrome(substr($text, 1, -1));\n\
    \    }\n    else {\n      print \"False\\n\";\n      return False;\n    }\n  }\n\
    }\n", "\tif (strlen($text) <= 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\tif ($text[0]\
    \ == $text[strlen($text) - 1]) {\n\t\t\treturn is_palindrome(substr($text, 1,\
    \ strlen($text) - 2));\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n",
  "    $rev = strrev($text);\n    if($text == $rev) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  $i = 0;\n  $j = strlen($text)\
    \ - 1;\n  while ($i < $j) {\n    if ($text[$i] != $text[$j]) {\n      return false;\n\
    \    }\n    $i += 1;\n    $j -= 1;\n  }\n  return true;\n}\n", "  return $text\
    \ == strrev($text);\n}\n", "    if (empty($text)) {\n        return true;\n  \
    \  }\n    if (strlen($text) < 2) {\n        return true;\n    }\n    if ($text[0]\
    \ == $text[strlen($text) - 1]) {\n        return is_palindrome(substr($text, 1,\
    \ strlen($text) - 2));\n    }\n    return false;\n}", "  $text = strtolower($text);\n\
    \  $text = preg_replace('/[^a-z]/', '', $text);\n  $reverse = strrev($text);\n\
    \  if ($text == $reverse) {\n    return True;\n  } else {\n    return False;\n\
    \  }\n}\n", "\t$text = strtolower($text);\n\t$length = strlen($text);\n\tfor ($i\
    \ = 0; $i < $length / 2; $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_palindrome('ABA')\
    \ ? 'Yes' : 'No';\n", "    $len = strlen($text);\n    for ($i = 0; $i < $len /\
    \ 2; $i++) {\n        if ($text[$i] != $text[$len - $i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "  return ($text == strrev($text));\n\
    }\n", "    // Write your code here\n}", "    $reverse = strrev($text);\n    return\
    \ $text == $reverse;\n}\n", "  $text_length = strlen($text);\n  $middle = ceil($text_length\
    \ / 2);\n  for ($i = 0; $i < $middle; $i++) {\n    if ($text[$i] != $text[$text_length\
    \ - $i - 1]) {\n      return False;\n    }\n  }\n  return True;\n}\n", "    //\
    \ code here\n}", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/',\
    \ '', $text);\n    return $text == strrev($text);\n}", "\t// Use regex to remove\
    \ all non-alphanumeric characters\n\t$text = preg_replace('/[^a-z0-9]/i', '',\
    \ $text);\n\t$text = strtolower($text);\n\t// Reverse the string and compare\n\
    \treturn $text == strrev($text);\n}\n", "  $text = strtolower($text);\n  $len\
    \ = strlen($text);\n  for ($i = 0; $i < $len; $i++) {\n    if ($text[$i] != $text[$len\
    \ - $i - 1]) {\n      return False;\n    }\n  }\n  return True;\n}", "\n}", "\t\
    $text = preg_replace('/[^a-zA-Z0-9]+/', '', $text);\n\t$text = strtolower($text);\n\
    \t$text_reversed = strrev($text);\n\tif ($text == $text_reversed) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\t$low = 0;\n\t$high = strlen($text)\
    \ - 1;\n\twhile ($low < $high) {\n\t\tif ($text[$low] != $text[$high]) {\n\t\t\
    \treturn False;\n\t\t}\n\t\t$low++;\n\t\t$high--;\n\t}\n\treturn True;\n}\n",
  "    if (strlen($text) <= 1) {\n        return true;\n    } else {\n        $first\
    \ = $text[0];\n        $last = $text[strlen($text) - 1];\n        if ($first ==\
    \ $last) {\n            return is_palindrome(substr($text, 1, strlen($text) -\
    \ 2));\n        } else {\n            return false;\n        }\n    }\n}\n", " \
    \   if (strlen($text) < 2) {\n        return True;\n    }\n    $len = strlen($text);\n\
    \    if ($text[0] == $text[$len - 1]) {\n        return is_palindrome(substr($text,\
    \ 1, $len - 2));\n    }\n    return False;\n}\n", "    $l = strlen($text);\n \
    \   for ($i = 0; $i < $l; $i++) {\n        if ($text[$i] != $text[$l - $i - 1])\n\
    \            return false;\n    }\n    return true;\n}\n", "    $len = strlen($text);\n\
    \    for ($i = 0; $i < $len / 2; $i++) {\n        if ($text[$i] != $text[$len\
    \ - $i - 1]) {\n            return False;\n        }\n    }\n    return True;\n\
    }\n", "  $length = strlen($text);\n  for ($i = 0; $i < $length / 2; $i++) {\n\
    \    if ($text[$i] != $text[$length - $i - 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    if (strlen($text) == 0) {\n        return True;\n\
    \    }\n    else if (strlen($text) == 1) {\n        return True;\n    }\n    else\
    \ if (strlen($text) == 2) {\n        if ($text[0] == $text[1]) {\n           \
    \ return True;\n        }\n        else {\n            return False;\n       \
    \ }\n    }\n    else {\n        $first = $text[0];\n        $last = $text[strlen($text)\
    \ - 1];\n        if ($first == $last) {\n            $reduced_text = substr($text,\
    \ 1, strlen($text) - 2);\n            return is_palindrome($reduced_text);\n \
    \       }\n        else {\n            return False;\n        }\n    }\n}", " \
    \   return $text == strrev($text);\n}\n\necho is_palindrome('') ? 'True' : 'False';\n\
    echo \"\\n\";\necho is_palindrome('aba') ? 'True' : 'False';\necho \"\\n\";\n\
    echo is_palindrome('aaaaa') ? 'True' : 'False';\necho \"\\n\";\necho is_palindrome('zbcd')\
    \ ? 'True' : 'False';\necho \"\\n\";", "    $text = strtolower($text);\n    $text\
    \ = preg_replace('/[^a-z0-9]/', '', $text);\n    $text_rev = strrev($text);\n\
    \    if ($text === $text_rev) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\n", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/i',\
    \ '', $text);\n    return $text == strrev($text);\n}\n", "\t$len = strlen($text);\n\
    \tfor ($i = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$i] != $text[$len - $i -\
    \ 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    $text = strtolower($text);\n\
    \    $text = preg_replace('/[^a-zA-Z]/', '', $text);\n    return $text == strrev($text);\n\
    }\n", "\t$text_len = strlen($text);\n\tfor ($i = 0; $i < $text_len / 2; $i++)\
    \ {\n\t\tif ($text[$i] != $text[$text_len - $i - 1]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\n", "    $text_len = strlen($text);\n    $text_half_len\
    \ = intval($text_len / 2);\n    for ($i = 0; $i < $text_half_len; $i++) {\n  \
    \      if ($text[$i] != $text[$text_len - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $rev = strrev($text);\n    return\
    \ $text == $rev;\n}\n", "  return ( $text == strrev($text) );\n}\n", "    // Your\
    \ code here\n    $len = strlen($text);\n    for ($i = 0; $i < $len / 2; $i++)\
    \ {\n        if ($text[$i] != $text[$len - $i - 1]) {\n            return False;\n\
    \        }\n    }\n    return True;\n}", "    $text = strtolower($text);\n   \
    \ $text = preg_replace('/[^a-z]/', '', $text);\n    return $text == strrev($text);\n\
    }\n", "    return $text == strrev($text);\n}\n", "  return $text == strrev($text);\n\
    }\n", "    $i = 0;\n    $length = strlen($text);\n    while ($i < $length/2) {\n\
    \        if ($text[$i] != $text[$length-$i-1])\n            return false;\n  \
    \      $i++;\n    }\n    return true;\n}\n\n$lines = array();\n$lines[] = \"\"\
    ;\n$lines[] = \"aba\";\n$lines[] = \"aaaaa\";\n$lines[] = \"zbcd\";\n\nforeach\
    \ ($lines as $line) {\n    if (is_palindrome($line))\n        echo \"True\\n\"\
    ;\n    else\n        echo \"False\\n\";\n}", "    $text = strtolower($text);\n\
    \    $length = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n  \
    \      if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nif (is_palindrome($argv[1])) {\n   \
    \ echo \"True\";\n} else {\n    echo \"False\";\n}", "    $reversed = strrev($text);\n\
    \    return $text == $reversed;\n}", "  // write your code here\n}\n", "    $rev\
    \ = strrev($text);\n    if ($text == $rev) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    if(strlen($text) == 0) {\n     \
    \   return true;\n    } else {\n        if($text[0] == $text[strlen($text) - 1])\
    \ {\n            return is_palindrome(substr($text, 1, strlen($text) - 2));\n\
    \        } else {\n            return false;\n        }\n    }\n}\n", "\t$text\
    \ = strtolower($text);\n\t$len = strlen($text);\n\tfor ($i = 0; $i < $len / 2;\
    \ $i++) {\n\t\tif ($text[$i] != $text[$len - $i - 1])\n\t\t\treturn false;\n\t\
    }\n\treturn true;\n}\n", "    $result = true;\n    $letters = str_split($text);\n\
    \    $count = count($letters);\n    for ($i = 0; $i < $count / 2; $i++) {\n  \
    \      if ($letters[$i] != $letters[$count - $i - 1]) {\n            $result =\
    \ false;\n            break;\n        }\n    }\n    return $result;\n}", "  return\
    \ $text == strrev($text);\n}\n", "\t$text = strtolower($text);\n\t$rev = strrev($text);\n\
    \treturn ($text === $rev);\n}\n\necho \"is_palindrome(''): \";\nvar_dump(is_palindrome(''));\n\
    echo \"is_palindrome('aba'): \";\nvar_dump(is_palindrome('aba'));\necho \"is_palindrome('aaaaa'):\
    \ \";\nvar_dump(is_palindrome('aaaaa'));\necho \"is_palindrome('zbcd'): \";\n\
    var_dump(is_palindrome('zbcd'));", "    if (strlen($text) < 2) {\n        return\
    \ True;\n    } elseif ($text[0] == $text[strlen($text) - 1]) {\n        return\
    \ is_palindrome(substr($text, 1, strlen($text) - 2));\n    } else {\n        return\
    \ False;\n    }\n}\n", "  return false;\n}\n", "  if ($text == \"\") return true;\n\
    \  if (strlen($text) <= 1) return true;\n  if (substr($text, 0, 1) != substr($text,\
    \ -1)) return false;\n  return is_palindrome(substr($text, 1, -1));\n}", "   \
    \ $text = strtolower($text);\n    return $text == strrev($text);\n}\n", "    if\
    \ ($text == strrev($text)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    if(strlen($text) < 2) {\n        return True;\n  \
    \  } else {\n        if ($text[0] != $text[strlen($text) - 1]) {\n           \
    \ return False;\n        } else {\n            return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n        }\n    }\n}", "    $len = strlen($text);\n\
    \    $rev = \"\";\n    for ($i = $len - 1; $i >= 0; $i--) {\n        $rev .= $text[$i];\n\
    \    }\n    return $rev == $text;\n}", "    $text = strtolower($text);\n    $len\
    \ = strlen($text);\n    for ($i = 0; $i < intval($len / 2); $i++) {\n        if\
    \ ($text[$i] != $text[$len - $i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "    if (empty($text)) {\n        return true;\n\
    \    }\n    $lower_text = strtolower($text);\n    $reversed_text = strrev($lower_text);\n\
    \    return $lower_text == $reversed_text;\n}\n", "    $text = strtolower($text);\n\
    \    $len = strlen($text);\n    $half_len = (int)($len / 2);\n    $is_palindrome\
    \ = true;\n    for ($i = 0; $i < $half_len; $i++) {\n        if ($text[$i] !=\
    \ $text[$len - $i - 1]) {\n            $is_palindrome = false;\n            break;\n\
    \        }\n    }\n    return $is_palindrome;\n}", "    $len = strlen($text);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($text[$i] != $text[$len - $i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "\t$input_length = strlen($text);\n\t\n\tif($input_length == 0 || $input_length\
    \ == 1) {\n\t\treturn true;\n\t}\n\t\n\t$mid_point = floor($input_length / 2);\n\
    \t\n\tif($text[0] == $text[$input_length - 1]) {\n\t\t$string = substr($text,\
    \ 1, -1);\n\t\treturn is_palindrome($string);\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "    // case insensitive\n    $text = strtolower($text);\n    $palidrome_size\
    \ = strlen($text);\n    $matched = 0;\n    for ($i = 0; $i < $palidrome_size /\
    \ 2; $i++) {\n        if ($text[$i] == $text[$palidrome_size - $i - 1]) {\n  \
    \          $matched++;\n        }\n    }\n    return $matched == floor($palidrome_size\
    \ / 2);\n}\n", "    $cleanText = strtolower(preg_replace('/[^a-zA-Z0-9]/', '',\
    \ $text));\n    return $cleanText == strrev($cleanText);\n}\n", "  if (strlen($text)\
    \ == 0) {\n    return True;\n  }\n  $i = 0;\n  $j = strlen($text) - 1;\n  while\
    \ ($i < $j) {\n    if ($text[$i] != $text[$j]) {\n      return False;\n    }\n\
    \    $i += 1;\n    $j -= 1;\n  }\n  return True;\n}", "  $letters = str_split($text);\n\
    \  $length = count($letters);\n  $middle = $length / 2;\n  for ($i = 0; $i < $middle;\
    \ $i++) {\n    if ($letters[$i] != $letters[$length - $i - 1]) {\n      return\
    \ False;\n    }\n  }\n  return True;\n}\n", "    $count = strlen($text);\n   \
    \ for ($i = 0; $i < $count / 2; $i++) {\n        if ($text[$i] != $text[$count\
    \ - $i - 1]) {\n            return False;\n        }\n    }\n    return True;\n\
    }", "    if(strlen($text)<=1) return true;\n    if(substr($text,0,1) !== substr($text,-1))\
    \ return false;\n    else return is_palindrome(substr($text,1,-1));\n}\n", " \
    \   $n = strlen($text);\n    for ($i = 0; $i < $n / 2; $i++) {\n        if ($text[$i]\
    \ != $text[$n - $i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    return $text == strrev($text);\n}\n", "\n}", "  $len = strlen($text);\n\
    \  if ($len <= 1) {\n    return true;\n  } else if ($text[0] == $text[$len - 1])\
    \ {\n    return is_palindrome(substr($text, 1, $len - 2));\n  } else {\n    return\
    \ false;\n  }\n}\n", "    if ($text === strrev($text)) {\n        return True;\n\
    \    } else {\n        return False;\n    }\n}\n", "    $text = strtolower($text);\n\
    \    $text = preg_replace('/[^a-zA-Z0-9]/', '', $text);\n    $reversed = strrev($text);\n\
    \    return $text == $reversed;\n}\n", "    $text = strtolower($text);\n    $text\
    \ = preg_replace('/[^a-z]/', '', $text);\n    if (strlen($text) < 2) {\n     \
    \   return true;\n    }\n    if ($text[0] == $text[strlen($text) - 1]) {\n   \
    \     return is_palindrome(substr($text, 1, strlen($text) - 2));\n    }\n    return\
    \ false;\n}\n", "\t$reversed = strrev($text);\n\treturn $text == $reversed;\n\
    }\n", "    $len = strlen($text);\n    $left = 0;\n    $right = $len - 1;\n   \
    \ while ($left < $right) {\n        if ($text[$left] != $text[$right]) {\n   \
    \         return false;\n        }\n        $left += 1;\n        $right -= 1;\n\
    \    }\n    return true;\n}", "  return $text == strrev($text);\n}\n\ndo {\n \
    \ fwrite(STDOUT, 'Enter a string: ');\n  $text = trim(fgets(STDIN));\n  if ($text\
    \ === 'n') {\n    break;\n  }\n  if (is_palindrome($text)) {\n    fwrite(STDOUT,\
    \ \"$text is a palindrome\\n\");\n  } else {\n    fwrite(STDOUT, \"$text is not\
    \ a palindrome\\n\");\n  }\n} while (true);", "    $len = strlen($text);\n   \
    \ for ($i = 0; $i < $len; $i++) {\n        if ($text[$i] != $text[$len - $i -\
    \ 1]) {\n            return false;\n        }\n    }\n    return true;\n}", " \
    \   $reverse_text = strrev($text);\n    if ($text == $reverse_text) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n", "\t$text_length\
    \ = strlen($text);\n\tfor ($i = 0; $i < $text_length; $i++) {\n\t\tif (ord($text[$i])\
    \ != ord($text[$text_length - $i - 1])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n", "\treturn $text == reverse($text);\n}\n", "\treturn false;\n\
    }\n", "  return strrev($text) == $text;\n}\n", "    $lowercase_text = strtolower($text);\n\
    \    $filtered_text = preg_replace('/[^a-z]/', '', $lowercase_text);\n    $reversed_text\
    \ = strrev($filtered_text);\n    return $filtered_text == $reversed_text;\n}\n",
  "    $textLength = strlen($text);\n    for ($i = 0; $i < $textLength / 2; $i++)\
    \ {\n        if ($text[$i] != $text[$textLength - $i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "  $text = strtolower($text);\n\
    \  $len = strlen($text);\n  for ($i = 0; $i < $len / 2; $i++) {\n    if ($text[$i]\
    \ != $text[$len - $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    // remove all non-alphanumeric characters and make the string lowercase\n\
    \    $text = preg_replace('/[^a-zA-Z0-9]/', '', strtolower($text));\n    // compare\
    \ the first half to the reversed second half\n    $first_half = substr($text,\
    \ 0, floor(strlen($text) / 2));\n    $second_half = strrev(substr($text, ceil(strlen($text)\
    \ / 2)));\n    return ($first_half == $second_half);\n}", "    return $text ==\
    \ strrev($text);\n}\n", "  if (strlen($text) <= 1) {\n    return true;\n  } else\
    \ {\n    if ($text[0] == $text[strlen($text) - 1]) {\n      return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n    } else {\n      return false;\n    }\n  }\n}",
  "  return $text == strrev($text);\n}\n", "    // This function is not yet implemented\n\
    \    // You need to add code that reverses the string\n    // and checks if the\
    \ reversed string is equal to $text\n    $reversed = '';\n    for ($i = strlen($text)\
    \ - 1; $i >= 0; $i--) {\n        $reversed .= $text[$i];\n    }\n    return $reversed\
    \ == $text;\n}\n", "    $text_length = strlen($text);\n    $palindrome = TRUE;\n\
    \    for ($index = 0; $index < $text_length / 2; $index++) {\n        if ($text[$index]\
    \ != $text[$text_length - 1 - $index]) {\n            $palindrome = FALSE;\n \
    \           break;\n        }\n    }\n    return $palindrome;\n}\n", "\treturn\
    \ $text == strrev($text);\n}\n", "    $text = strtolower($text);\n    $length\
    \ = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($text[$i]\
    \ != $text[$length - $i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nif (is_palindrome($argv[1])) {\n    echo \"True\\n\";\n\
    } else {\n    echo \"False\\n\";\n}", "  // TODO\n}\n```\n\n```python", "  //\
    \ Empty string is a palindrome\n  if (strlen($text) == 0) {\n    return true;\n\
    \  }\n\n  // The first character should be equal to the last character\n  if ($text[0]\
    \ != $text[strlen($text) - 1]) {\n    return false;\n  }\n\n  // Recursively test\
    \ the middle of the string\n  return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}", "  if ($text == '') {\n    return true;\n  }\n  if (strlen($text)\
    \ == 1) {\n    return true;\n  }\n  if (strlen($text) == 2) {\n    return $text[0]\
    \ == $text[1];\n  }\n  return $text[0] == $text[strlen($text) - 1] && is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n", "  $lower_text = strtolower($text);\n  $no_punctuation\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $lower_text);\n  $no_spaces = preg_replace('/\\\
    s+/', '', $no_punctuation);\n  $reverse_text = strrev($no_spaces);\n  if($no_spaces\
    \ == $reverse_text) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    $len = strlen($text);\n    $half = intval($len / 2);\n    for ($i =\
    \ 0; $i < $half; $i++) {\n        if ($text[$i] != $text[$len - $i - 1])\n   \
    \         return false;\n    }\n    return true;\n}", "    $text_length = strlen($text);\n\
    \    for ($i = 0; $i < $text_length / 2; $i++) {\n        if ($text[$i] != $text[$text_length\
    \ - $i - 1]) {\n            return False;\n        }\n    }\n    return True;\n\
    }\n", "    $reversed = strrev($text);\n    if ($text == $reversed) {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}", "    $text = strtolower($text);\n\
    \    if (strlen($text) == 0) {\n        return true;\n    } else if (strlen($text)\
    \ == 1) {\n        return true;\n    } else if (substr($text, 0, 1) != substr($text,\
    \ -1)) {\n        return false;\n    } else {\n        return is_palindrome(substr($text,\
    \ 1, -1));\n    }\n}", "  $text = strtolower($text);\n  $len = strlen($text);\n\
    \  $valid = true;\n  for ($i = 0; $i < $len / 2; $i++) {\n    if ($text[$i] !=\
    \ $text[$len - $i - 1]) {\n      $valid = false;\n      break;\n    }\n  }\n \
    \ return $valid;\n}", "  if (strlen($text) <= 1) {\n    return true;\n  }\n  else\
    \ {\n    if ($text[0] == $text[strlen($text) - 1]) {\n      return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n    }\n    else {\n      return false;\n    }\n  }\n\
    }\n", "\tif (strlen($text) == 0) {\n\t\treturn true;\n\t}\n\tif (strlen($text)\
    \ == 1) {\n\t\treturn true;\n\t}\n\tif (strlen($text) == 2) {\n\t\tif ($text[0]\
    \ == $text[1]) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tif ($text[0]\
    \ == $text[strlen($text) - 1]) {\n\t\treturn is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n\t}\n\treturn false;\n}\n", "\tif ($text == strrev($text)) {\n\t\techo\
    \ 'True' . PHP_EOL;\n\t} else {\n\t\techo 'False' . PHP_EOL;\n\t}\n}\n", "   \
    \ $len = strlen($text);\n    $mid = ceil($len / 2);\n    $backwards = strrev($text);\n\
    \    for ($i = 0; $i < $mid; $i++) {\n        if ($text[$i] != $backwards[$i])\
    \ {\n            return False;\n        }\n    }\n    return True;\n}\n", "  if\
    \ (strlen($text) == 0) {\n    return true;\n  }\n  if (strlen($text) == 1) {\n\
    \    return true;\n  }\n  $text = strtolower($text);\n  $i = 0;\n  $j = strlen($text)\
    \ - 1;\n  while ($i < $j) {\n    if ($text[$i] != $text[$j]) {\n      return false;\n\
    \    }\n    $i++;\n    $j--;\n  }\n  return true;\n}\necho is_palindrome('') ?\
    \ 'True' : 'False';\necho is_palindrome('aba') ? 'True' : 'False';\necho is_palindrome('aaaaa')\
    \ ? 'True' : 'False';\necho is_palindrome('zbcd') ? 'True' : 'False';\n", "\t\
    $len = strlen($text);\n\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$i]\
    \ != $text[$len - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "  return preg_match('/^(.)(.)*\\2\\1$/', $text);\n}", "    return ($text\
    \ === strrev($text));\n}", "\n}\n", "  return $text == strrev($text);\n}\n", " \
    \   // Your code here\n}\n", "  return $text == strrev($text);\n}\n", "    $len\
    \ = strlen($text);\n    for ($i = 0; $i < $len / 2; $i++) {\n        if ($text[$i]\
    \ != $text[$len - $i - 1]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    // Complete this function\n    $len = strlen($text);\n\
    \    if($len <= 1) {\n        return true;\n    }\n    if(substr($text, 0, 1)\
    \ == substr($text, $len - 1, 1)) {\n        return is_palindrome(substr($text,\
    \ 1, $len - 2));\n    }\n    return false;\n}\n\n$__fp = fopen(\"php://stdin\"\
    , \"r\");\n\nfscanf($__fp, \"%d\", $_t);\nfor($_i = 0; $_i < $_t; $_i++) {\n \
    \   fscanf($__fp, \"%s\", $_text);\n    $_result = is_palindrome($_text);\n  \
    \  if($_result) {\n        echo \"True\\n\";\n    }\n    else {\n        echo\
    \ \"False\\n\";\n    }\n}\n", "    $text = strtolower($text);\n    $letters =\
    \ str_split($text);\n    $letters_reversed = array_reverse($letters);\n    $text_reversed\
    \ = implode($letters_reversed);\n    if ($text == $text_reversed) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "  $text = strtolower($text);\n\
    \  $reversed = strrev($text);\n  return $text == $reversed;\n}\n", "    if ($text\
    \ === '') {\n        return true;\n    }\n    $len = strlen($text);\n    $text\
    \ = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '', $text);\n   \
    \ $rev_text = strrev($text);\n    $rev_len = strlen($rev_text);\n    if ($len\
    \ === $rev_len) {\n        if ($text === $rev_text) {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "    // Write your code here\n    //\
    \ To print results to the standard output you can use print\n    // Example: print\
    \ \"Hello world!\";\n    $str2 = strrev($text);\n    if($text == $str2){\n   \
    \     return true;\n    }else{\n        return false;\n    }\n}", "\tif (strlen($text)\
    \ <= 1) {\n\t\treturn true;\n\t}\n\tif ($text[0] === $text[strlen($text) - 1])\
    \ {\n\t\treturn is_palindrome(substr($text, 1, strlen($text) - 2));\n\t}\n\treturn\
    \ false;\n}\n", "  $text_length = strlen($text);\n  for ($i = 0; $i < $text_length;\
    \ $i++) {\n    if ($text[$i] != $text[$text_length - 1 - $i]) {\n      return\
    \ False;\n    }\n  }\n  return True;\n}\n", "    $text_length = strlen($text);\n\
    \    $last_index = $text_length - 1;\n    $first_char = $text[0];\n    $last_char\
    \ = $text[$last_index];\n    if ($first_char != $last_char) {\n        return\
    \ false;\n    }\n    if ($text_length < 2) {\n        return true;\n    }\n  \
    \  $text = substr($text, 1, $last_index - 1);\n    return is_palindrome($text);\n\
    }", "    // COMPLETE ME\n    return false;\n}\n", "  return $text == strrev($text);\n\
    }\n", "    return is_palindrome_worker($text, strlen($text) - 1, 0);\n}\n", "\t\
    $len = strlen($text);\n\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$i]\
    \ != $text[$len - $i - 1]) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn True;\n\
    }\n", "\n}\n", "    if (strlen($text) < 2) {\n        return true;\n    }\n  \
    \  if ($text[0] != $text[strlen($text) - 1]) {\n        return false;\n    }\n\
    \    return is_palindrome(substr($text, 1, strlen($text) - 2));\n}\n", "    $length\
    \ = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($text[$i]\
    \ != $text[$length - $i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "\t// Obtain text length\n\t$len = strlen($text);\n\t\
    // Check if text is equal to reverse\n\treturn $text == strrev($text);\n}\n",
  "    $len = strlen($text);\n    $mid = intval($len / 2);\n    $r = true;\n    for\
    \ ($i = 0; $i < $mid; $i++) {\n        if ($text[$i] != $text[$len - $i - 1])\
    \ {\n            $r = false;\n            break;\n        }\n    }\n    return\
    \ $r;\n}\n", "\t$text = strtolower($text);\n\t$len = strlen($text);\n\tfor ($i\
    \ = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$i] != $text[$len - $i - 1]) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    $reverse_text = strrev($text);\n\
    \    return $text == $reverse_text;\n}\n", "    $text_length = strlen($text);\n\
    \    $flag = true;\n    for ($i = 0; $i < $text_length; $i++) {\n        if ($text[$i]\
    \ !== $text[$text_length - 1 - $i]) {\n            $flag = false;\n          \
    \  break;\n        }\n    }\n    return $flag;\n}", "\t$is_palindrome = true;\n\
    \t$i = 0;\n\t$length = strlen($text);\n\twhile ($i < $length / 2) {\n\t\tif ($text[$i]\
    \ != $text[$length - $i - 1]) {\n\t\t\t$is_palindrome = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn $is_palindrome;\n}\n", "    if (strlen($text)\
    \ < 2) {\n        return true;\n    } else {\n        if ($text[0] == $text[strlen($text)\
    \ - 1]) {\n            return is_palindrome(substr($text, 1, strlen($text) - 2));\n\
    \        } else {\n            return false;\n        }\n    }\n}\n", "  $text_length\
    \ = strlen($text);\n  $last_index = $text_length - 1;\n  for ($i = 0; $i < $text_length;\
    \ $i++) {\n    if ($text[$i] != $text[$last_index - $i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $text = strtolower($text);\n    $text\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $text);\n    $length = strlen($text);\n\
    \    for ($i = 0; $i < $length / 2; $i++) {\n        if ($text[$i] != $text[$length\
    \ - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "\t// $text = trim($text);\n\t// $text = strtolower($text);\n\t// $text\
    \ = preg_replace('/[^a-z]/', '', $text);\n\t// $rev = strrev($text);\n\t// return\
    \ $text == $rev;\n\treturn $text == strrev($text);\n}\n", "    return empty($text)\
    \ || $text === strrev($text);\n}\n", "    $text = strtolower($text);\n    $str\
    \ = str_split($text);\n    $str1 = array_reverse($str);\n    $str2 = implode(\"\
    \", $str1);\n    if ($text == $str2) {\n        return True;\n    } else {\n \
    \       return False;\n    }\n}", "    $text_length = strlen($text);\n    if ($text_length\
    \ < 2) {\n        return true;\n    }\n    if ($text[0] != $text[$text_length\
    \ - 1]) {\n        return false;\n    }\n    return is_palindrome(substr($text,\
    \ 1, $text_length - 2));\n}\n", "    $length = strlen($text);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        if ($text[$i] != $text[$length - $i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "  //$text\
    \ = preg_replace('/[^a-zA-Z]+/', '', $text);\n  $text = strtolower($text);\n \
    \ $length = strlen($text);\n  for ($i = 0; $i < $length / 2; $i++) {\n    if ($text[$i]\
    \ != $text[$length - $i - 1]) {\n      return False;\n    }\n  }\n  return True;\n\
    }\n", "    $textLength = strlen($text);\n    for ($i = 0; $i < $textLength; $i++)\
    \ {\n        if ($text[$i] != $text[$textLength - $i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $length = strlen($text);\n\
    \    if ($length < 2) {\n        return True;\n    }\n    if ($text[0] != $text[$length\
    \ - 1]) {\n        return False;\n    }\n    return is_palindrome(substr($text,\
    \ 1, $length - 2));\n}\n", "    $len = strlen($text);\n    if ($len < 2) {\n \
    \       return True;\n    } else if ($text[0] == $text[$len - 1]) {\n        return\
    \ is_palindrome(substr($text, 1, $len - 2));\n    } else {\n        return False;\n\
    \    }\n}\n", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/',\
    \ '', $text);\n    $text_reversed = strrev($text);\n    return ($text == $text_reversed);\n\
    }\n", "\t$text1 = strtolower($text);\n\t$text2 = strrev($text1);\n\treturn $text1\
    \ == $text2;\n}\n", "\t$len = strlen($text);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($text[$i] != $text[$len - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n", "    if ($text == strrev($text)) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "  return $text == strrev($text);\n}",
  "    if (strlen($text) == 0) {\n        return true;\n    } else {\n        $lower\
    \ = strtolower($text);\n        $i = 0;\n        $j = strlen($lower) - 1;\n  \
    \      while ($i < $j) {\n            if ($lower[$i] == $lower[$j]) {\n      \
    \          $i++;\n                $j--;\n            } else {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n}\n",
  "\t// Your code here\n}\n", "  // TODO\n}\n\nif (!debug_backtrace()) {\n  // Example\
    \ test calls\n  echo is_palindrome('baa'), \"\\n\";\n  echo is_palindrome('bac'),\
    \ \"\\n\";\n  echo is_palindrome('a'), \"\\n\";\n  echo is_palindrome('aa'), \"\
    \\n\";\n  echo is_palindrome('abc'), \"\\n\";\n  echo is_palindrome('abba'), \"\
    \\n\";\n  echo is_palindrome('abbaa'), \"\\n\";\n  echo is_palindrome('abac'),\
    \ \"\\n\";\n  echo is_palindrome('baab'), \"\\n\";\n  echo is_palindrome('baabaa'),\
    \ \"\\n\";\n  echo is_palindrome('baaab'), \"\\n\";\n}", "\t$length = strlen($text);\n\
    \tif ($length == 0) {\n\t\treturn True;\n\t} else {\n\t\t$pos = (int) ($length\
    \ / 2);\n\t\t$pos2 = $length - $pos - 1;\n\t\treturn (strcmp($text[$pos], $text[$pos2])\
    \ == 0 && is_palindrome(substr($text, 0, $pos)) && is_palindrome(substr($text,\
    \ $pos + 1)));\n\t}\n}\n", "  return $text == strrev($text);\n}\n", "\t$text =\
    \ strtolower($text);\n\t$length = strlen($text);\n\tfor ($i = 0; $i < floor($length\
    \ / 2); $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn\
    \ False;\n\t\t}\n\t}\n\treturn True;\n}\necho is_palindrome(''); // True\necho\
    \ is_palindrome('aba'); // True\necho is_palindrome('aaaaa'); // True\necho is_palindrome('zbcd');\
    \ // False", "    $text = strtolower($text);\n    return $text == strrev($text);\n\
    }\n", "    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '',\
    \ $text);\n    return $text == strrev($text);\n}", "\tif (strlen($text) <= 1)\
    \ {\n\t\treturn True;\n\t}\n\telse if ($text[0] == $text[strlen($text) - 1]) {\n\
    \t\treturn is_palindrome(substr($text, 1, strlen($text) - 2));\n\t}\n\telse {\n\
    \t\treturn False;\n\t}\n}\n", "\t// Checks if given string is a palindrome\n\t\
    $text = strtolower($text);\n\t$text = preg_replace('/[^a-z]/', '', $text);\n\t\
    $text = str_split($text);\n\t$n = count($text);\n\tfor ($i = 0; $i < $n / 2; $i++)\
    \ {\n\t\tif ($text[$i] != $text[$n - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
