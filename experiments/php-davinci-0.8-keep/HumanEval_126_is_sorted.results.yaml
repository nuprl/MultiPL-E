name: HumanEval_126_is_sorted
language: php
results:
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$compare = 0;\n\t\
    $previous = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num > $previous) {\n\
    \t\t\t$compare += 1;\n\t\t}\n\t\t$previous = $num;\n\t}\n\tif ($compare == sizeof($lst)-1)\
    \ {\n\t\treturn True;\n\t}\n\telse {\n\t\treturn False;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg89kc867.php:42\n\
    Stack trace:\n#0 /tmp/tmpg89kc867.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpg89kc867.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tforeach($lst as\
    \ $k => $v) {\n\t\tif(!isset($lst[$k-1])) continue;\n\t\tif($lst[$k-1] >= $v)\
    \ return false;\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]).\"\
    \\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58h2doj1.php:39\n\
    Stack trace:\n#0 /tmp/tmp58h2doj1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp58h2doj1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$unique = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\tif($lst == $sorted && count($lst) == count($unique))\
    \ {\n\t\treturn \"True\";\n\t} else {\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho is_sorted([1, 2,\
    \ 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "FalseFalseTrueFalseTrueTrueFalse\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpj2e572yu.php:36\nStack trace:\n#0 /tmp/tmpj2e572yu.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj2e572yu.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// Your code here\n\
    \t$lst = array_unique($lst);\n\tif(count($lst) == 1){\n\t\treturn True;\n\t}\n\
    \tfor($i = 0; $i < count($lst); $i++){\n\t\tif($lst[$i] > $lst[$i+1]){\n\t\t\t\
    return False;\n\t\t}\n\t}\n\treturn True;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4kdk4d3.php:34\n\
    Stack trace:\n#0 /tmp/tmpf4kdk4d3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpf4kdk4d3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu88e0u3.php:38\n\
    Stack trace:\n#0 /tmp/tmptu88e0u3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptu88e0u3.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\tfor ($i=0; $i < count($lst); $i++) { \n\t\tif ($lst[$i] != $i+1)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9l84ufag.php:30\n\
    Stack trace:\n#0 /tmp/tmp9l84ufag.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9l84ufag.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$i = 0;\n\twhile ($i < count($lst) - 1) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lybkka5.php:43\n\
    Stack trace:\n#0 /tmp/tmp6lybkka5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6lybkka5.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ == 1) {\n\t\treturn true;\n\t} else {\n\t\tfor ($i = 0; $i < count($lst) - 1;\
    \ $i++) {\n\t\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t\treturn true;\n\t}\n}\n\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6,\
    \ 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgwr3s654.php:51\nStack trace:\n#0 /tmp/tmpgwr3s654.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgwr3s654.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $prev = null;\n\
    \    foreach ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n\
    \            return false;\n        }\n        $prev = $num;\n    }\n    return\
    \ true;\n}\necho is_sorted([5]) ? 'True' : 'False';\necho \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) ? 'True' : 'False';\necho \"\\n\";\necho is_sorted([1, 3, 2, 4,\
    \ 5]) ? 'True' : 'False';\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) ?\
    \ 'True' : 'False';\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) ? 'True'\
    \ : 'False';\necho \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) ? 'True' :\
    \ 'False';\necho \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) ? 'True' : 'False';\n\
    echo \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) ? 'True' : 'False';\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True\nTrue\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6p45i4rk.php:56\nStack trace:\n#0 /tmp/tmp6p45i4rk.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6p45i4rk.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = $lst;\n\t\
    sort($lst2);\n\tif ($lst === $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmz_03s0.php:37\n\
    Stack trace:\n#0 /tmp/tmpsmz_03s0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsmz_03s0.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = 0;\n\t\
    for ($i=0; $i < count($lst); $i++) { \n\t\tif ($lst[$i] < $lst[$i+1]) {\n\t\t\t\
    $count += 1;\n\t\t}\n\t}\n\tif ($count === count($lst)-1) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\necho is_sorted([5]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpknrktbp2.php:54\nStack trace:\n#0 /tmp/tmpknrktbp2.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpknrktbp2.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $s = count($lst);\n\
    \    $c = 0;\n    $d = 0;\n    $i = 1;\n    while ($i < $s) {\n        if ($lst[$i]\
    \ >= $lst[$i - 1]) {\n            $c++;\n        }\n        if ($lst[$i] == $lst[$i\
    \ - 1]) {\n            $d++;\n        }\n        $i++;\n    }\n    if ($c == $s\
    \ - 1 && $d == 0) {\n        return \"True\";\n    } else {\n        return \"\
    False\";\n    }\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5w_ow1lw.php:39\n\
    Stack trace:\n#0 /tmp/tmp5w_ow1lw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5w_ow1lw.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $flag = True;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i == count($lst) - 1)\
    \ {\n            return $flag;\n        }\n        if ($lst[$i] == $lst[$i + 1])\
    \ {\n            return false;\n        }\n        if ($lst[$i] > $lst[$i + 1])\
    \ {\n            $flag = false;\n        }\n    }\n}\necho is_sorted([5]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpufo8w5gp.php:56\nStack trace:\n#0 /tmp/tmpufo8w5gp.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpufo8w5gp.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $cnt = count($lst);\n\
    \  $newLst = [];\n  for ($i = 0; $i < $cnt; $i++) {\n    $newLst[$i] = $lst[$i];\n\
    \  }\n  sort($newLst);\n  $sortedLst = array_unique($newLst);\n  if (count($sortedLst)\
    \ !== $cnt) {\n    return false;\n  }\n  for ($i = 0; $i < $cnt; $i++) {\n   \
    \ if ($newLst[$i] !== $lst[$i]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpek7iz0an.php:48\n\
    Stack trace:\n#0 /tmp/tmpek7iz0an.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpek7iz0an.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $result = true;\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] > $lst[$i + 1]) {\n\
    \      $result = false;\n    }\n  }\n  return $result;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5edh4tu.php:29\n\
    Stack trace:\n#0 /tmp/tmpm5edh4tu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm5edh4tu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $a = array_count_values($lst);\n\
    \    $b = max($a);\n    if($b>1){\n        return false;\n    }\n    else{\n \
    \       if($lst == sort($lst)){\n            return true;\n        }\n       \
    \ else{\n            return false;\n        }\n    }\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph25yvsdx.php:37\n\
    Stack trace:\n#0 /tmp/tmph25yvsdx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmph25yvsdx.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$len = count($lst);\n\
    \t$h = [];\n\tforeach ($lst as $v) {\n\t\tif (array_key_exists($v, $h)) {\n\t\t\
    \t$h[$v]++;\n\t\t} else {\n\t\t\t$h[$v] = 1;\n\t\t}\n\t}\n\tforeach ($h as $v)\
    \ {\n\t\tif ($v > 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor ($i = 0; $i < $len\
    \ - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\necho is_sorted([5]).\"\\n\";\necho is_sorted([1, 2,\
    \ 3, 4, 5]).\"\\n\";\necho is_sorted([1, 3, 2, 4, 5]).\"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]).\"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]).\"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]).\"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]).\"\
    \\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpjlwd_n4c.php:60\nStack trace:\n#0 /tmp/tmpjlwd_n4c.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjlwd_n4c.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = array_unique($lst);\n\
    \tsort($lst2);\n\treturn $lst === $lst2;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjyk24bp.php:36\n\
    Stack trace:\n#0 /tmp/tmpdjyk24bp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdjyk24bp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = array_unique($lst);\n\
    \  sort($sorted);\n  if ($lst == $sorted) {\n    return true;\n  } else {\n  \
    \  return false;\n  }\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcvmg9kc.php:39\n\
    Stack trace:\n#0 /tmp/tmppcvmg9kc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppcvmg9kc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \t$unique = array_unique($lst);\n\tforeach ($unique as $value) {\n\t\tif ($arr[$value]\
    \ > 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($lst) - 1;\
    \ $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4po6co8.php:46\n\
    Stack trace:\n#0 /tmp/tmpe4po6co8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpe4po6co8.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ == 1) {\n\t\treturn true;\n\t}\n\t$tmp = $lst[0];\n\t$temp = [];\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($tmp == $value) {\n\t\t\t$temp[] = $value;\n\
    \t\t}\n\t\t$tmp = $value;\n\t}\n\tif (count($temp) > 1) {\n\t\treturn false;\n\
    \t}\n\t$temp = [];\n\tforeach ($lst as $key => $value) {\n\t\tif ($key == 0) {\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif ($lst[$key-1] > $value) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpdqyu74rw.php:71\nStack trace:\n#0 /tmp/tmpdqyu74rw.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdqyu74rw.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$prev = $lst[0];\n\
    \t$count = 0;\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif ($lst[$i] == $prev) {\n\t\t\t$count++;\n\
    \t\t}\n\t\t$prev = $lst[$i];\n\t}\n\tif ($count > 0) {\n\t\treturn false;\n\t\
    }\n\treturn true;\n}\n$lst = [1, 2, 3, 4, 5];\nprint_r(is_sorted($lst));\necho\
    \ \"\\n\";\n$lst = [1, 3, 2, 4, 5];\nprint_r(is_sorted($lst));\necho \"\\n\";\n\
    $lst = [1, 2, 3, 4, 5, 6];\nprint_r(is_sorted($lst));\necho \"\\n\";\n$lst = [1,\
    \ 2, 3, 4, 5, 6, 7];\nprint_r(is_sorted($lst));\necho \"\\n\";\n$lst = [1, 3,\
    \ 2, 4, 5, 6, 7];\nprint_r(is_sorted($lst));\necho \"\\n\";\n$lst = [1, 2, 2,\
    \ 3, 3, 4];\nprint_r(is_sorted($lst));\necho \"\\n\";\n$lst = [1, 2, 2, 2, 3,\
    \ 4];\nprint_r(is_sorted($lst));\necho \"\\n\";\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzma9py0h.php:70\n\
    Stack trace:\n#0 /tmp/tmpzma9py0h.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpzma9py0h.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sort = $lst;\n\
    \  sort($sort);\n  if (count(array_diff_assoc($lst, $sort)) > 0) return false;\n\
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmkvn8qn.php:34\n\
    Stack trace:\n#0 /tmp/tmprmkvn8qn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprmkvn8qn.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n$new_lst = array_unique($lst);\n\
    \  sort($new_lst);\n  if(array_diff_assoc($lst, $new_lst) == 0){\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_ibh9o8.php:29\n\
    Stack trace:\n#0 /tmp/tmp6_ibh9o8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6_ibh9o8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$first = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] <= $first) {\n\t\t\t\
    return false;\n\t\t}\n\t\t$first = $lst[$i];\n\t}\n\treturn true;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofjj1pmr.php:41\n\
    Stack trace:\n#0 /tmp/tmpofjj1pmr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpofjj1pmr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$val = true;\n\t\
    if(count($lst) >=2) {\n\t\tfor($i=0; $i<count($lst)-1; $i++) {\n\t\t\tif($lst[$i]\
    \ < $lst[$i+1]) {\n\t\t\t\t$val = true;\n\t\t\t} else {\n\t\t\t\t$val = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$val = true;\n\t}\n\treturn $val;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8x1vb04c.php:47\n\
    Stack trace:\n#0 /tmp/tmp8x1vb04c.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8x1vb04c.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbtc6tlf.php:36\n\
    Stack trace:\n#0 /tmp/tmpcbtc6tlf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcbtc6tlf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $temp = [];\n  foreach\
    \ ($lst as $item) {\n    if (in_array($item, $temp)) {\n      return false;\n\
    \    }\n    $temp[] = $item;\n  }\n  return $lst == $temp;\n}\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyky5t3g.php:32\n\
    Stack trace:\n#0 /tmp/tmppyky5t3g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppyky5t3g.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lstDuplicate =\
    \ array_unique($lst);\n\t$lstSorted = $lstDuplicate;\n\tsort($lstSorted);\n\t\
    $result = true;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lstDuplicate[$i]\
    \ != $lstSorted[$i]) {\n\t\t\t$result = false;\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp55_ncpn.php:42\n\
    Stack trace:\n#0 /tmp/tmpp55_ncpn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpp55_ncpn.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq9oqb28.php:37\n\
    Stack trace:\n#0 /tmp/tmpyq9oqb28.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyq9oqb28.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $duplicate = count($lst);\n\
    \  $sort = array_unique($lst);\n  if($duplicate != count($sort)) {\n    return\
    \ False;\n  }\n  else {\n    return True;\n  }\n}\nprint_r(is_sorted([1, 2, 2,\
    \ 3, 3, 4]));\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5r0wu9q.php:32\n\
    Stack trace:\n#0 /tmp/tmpm5r0wu9q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm5r0wu9q.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// Your code here\n\
    }\necho is_sorted([5]); // true\necho is_sorted([1, 2, 3, 4, 5]); // true\necho\
    \ is_sorted([1, 3, 2, 4, 5]); // false\necho is_sorted([1, 2, 3, 4, 5, 6]); //\
    \ true\necho is_sorted([1, 2, 3, 4, 5, 6, 7]); // true\necho is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]); // false\necho is_sorted([1, 2, 2, 3, 3, 4]); // true\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]); // false\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppytt62r.php:30\n\
    Stack trace:\n#0 /tmp/tmpppytt62r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpppytt62r.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $i = 0;\n  $j =\
    \ 0;\n  $len = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if ($i ==\
    \ $len - 1) {\n      return true;\n    }\n    $j = $i + 1;\n    if ($lst[$i] >\
    \ $lst[$j]) {\n      return false;\n    }\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaursrqf6.php:39\n\
    Stack trace:\n#0 /tmp/tmpaursrqf6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaursrqf6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$flag = True;\n\t\
    for ($i=0; $i < count($lst)-1; $i++) { \n\t\tif ($lst[$i] < $lst[$i+1]) {\n\t\t\
    \t$flag = True;\n\t\t} else {\n\t\t\t$flag = False;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn $flag;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps00chj80.php:43\n\
    Stack trace:\n#0 /tmp/tmps00chj80.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps00chj80.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tforeach ($lst as\
    \ $i => $v) {\n\t\tif ($i > 0 && $v < $lst[$i - 1]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\"\
    ;\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9w5ctou.php:43\n\
    Stack trace:\n#0 /tmp/tmpy9w5ctou.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy9w5ctou.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$prev = $lst[0];\n\
    \tforeach ($lst as $key => $num) {\n\t\tif ($key > 0) {\n\t\t\tif ($num < $prev)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($num == $prev) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn true;\n}\necho is_sorted([5]);\n\
    echo is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbra1enm.php:53\n\
    Stack trace:\n#0 /tmp/tmpxbra1enm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxbra1enm.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif(array_unique($lst)\
    \ === $lst){\n\t\t$max = max($lst);\n\t\t$min = min($lst);\n\t\t$check = range($min,\
    \ $max);\n\t\tif(array_diff($lst, $check) === []){\n\t\t\treturn true;\n\t\t}else{\n\
    \t\t\treturn false;\n\t\t}\n\t}else{\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_73qz563.php:36\n\
    Stack trace:\n#0 /tmp/tmp_73qz563.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_73qz563.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // I need to compare\
    \ every element to the next one.\n    for ($i = 0; $i < count($lst) - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvrr4aur.php:40\n\
    Stack trace:\n#0 /tmp/tmpwvrr4aur.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwvrr4aur.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $l = count($lst);\n\
    \    $sort = $lst;\n    sort($sort);\n    $is_dup = false;\n    $dup = array_unique($lst);\n\
    \    if ($l > count($dup)) {\n        $is_dup = true;\n    }\n    if ($lst ==\
    \ $sort && $is_dup == false) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]) . \"<br>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmihpmtd.php:47\n\
    Stack trace:\n#0 /tmp/tmplmihpmtd.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplmihpmtd.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    if ($lst[$i] < $lst[$i + 1]) {\n      return true;\n\
    \    } else if ($lst[$i] > $lst[$i + 1]) {\n      return false;\n    }\n  }\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_2hjzx8.php:28\n\
    Stack trace:\n#0 /tmp/tmps_2hjzx8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmps_2hjzx8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$len = count($lst);\n\
    \t$newArray = [];\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($i !== 0) {\n\t\t\
    \tif (count($newArray) === $len - 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\
    if ($lst[$i] > $lst[$i - 1]) {\n\t\t\t\t$newArray[] = $lst[$i];\n\t\t\t} else\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6p9_vevh.php:35\n\
    Stack trace:\n#0 /tmp/tmp6p9_vevh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6p9_vevh.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif ($lst[$i] !== $lst[$i+1]) {\n\t\t\tif ($lst[$i]\
    \ < $lst[$i+1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n}\necho\
    \ is_sorted([1, 2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndqlhocl.php:35\n\
    Stack trace:\n#0 /tmp/tmpndqlhocl.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpndqlhocl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $prev = null;\n\
    \    foreach ($lst as $key => $value) {\n        if (isset($prev) && $prev >=\
    \ $value) return false;\n        $prev = $value;\n    }\n    return true;\n}\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscp7184d.php:38\n\
    Stack trace:\n#0 /tmp/tmpscp7184d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpscp7184d.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$uniqueLst = array_unique($lst);\n\
    \t$sortedUniqueLst = $uniqueLst;\n\tsort($sortedUniqueLst);\n\treturn $uniqueLst\
    \ == $sortedUniqueLst;\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_la2y67.php:44\n\
    Stack trace:\n#0 /tmp/tmpg_la2y67.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpg_la2y67.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m3twakv.php:37\n\
    Stack trace:\n#0 /tmp/tmp5m3twakv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5m3twakv.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$newArr = [];\n\t\
    foreach ($lst as $item) {\n\t\tif (in_array($item, $newArr)) {\n\t\t\treturn false;\n\
    \t\t} else {\n\t\t\t$newArr[] = $item;\n\t\t}\n\t}\n\t$arr = $lst;\n\tsort($arr);\n\
    \tif ($arr == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfosb13m0.php:47\n\
    Stack trace:\n#0 /tmp/tmpfosb13m0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfosb13m0.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n   for($i=0;$i<count($lst)-1;$i++){\n\
    \       if($lst[$i]==$lst[$i+1]){\n           return false;\n       }\n   }\n\
    \   if($lst==sort($lst)){\n       return true;\n   }\n   else{\n       return\
    \ false;\n   }\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2azzo7qp.php:34\n\
    Stack trace:\n#0 /tmp/tmp2azzo7qp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2azzo7qp.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t\
    return false;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn true;\n}\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwawo6ld2.php:39\n\
    Stack trace:\n#0 /tmp/tmpwawo6ld2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwawo6ld2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if (count($lst)\
    \ === 1) {\n    return true;\n  }\n  foreach ($lst as $key => $val) {\n    if\
    \ ($key === 0) {\n      continue;\n    }\n    if ($val <= $lst[$key - 1]) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo016hrss.php:45\n\
    Stack trace:\n#0 /tmp/tmpo016hrss.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpo016hrss.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $s = sort($lst);\n\
    \    $c = count($lst);\n    $last = $lst[0];\n    $count = 0;\n    for ($i = 1;\
    \ $i < $c; $i++) {\n        if ($lst[$i] == $last) {\n            $count++;\n\
    \        }\n        $last = $lst[$i];\n    }\n    if ($count > 0) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $c; $i++) {\n        if ($lst[$i] != $s[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([5]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppba1ms_p.php:55\nStack trace:\n#0 /tmp/tmppba1ms_p.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmppba1ms_p.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $dupes = [];\n \
    \ $sorted = false;\n  foreach ($lst as $i => $num) {\n    if (isset($lst[$i +\
    \ 1])) {\n      if ($num < $lst[$i + 1]) {\n        $sorted = true;\n      } else\
    \ {\n        $sorted = false;\n        break;\n      }\n    }\n    if (in_array($num,\
    \ $dupes)) {\n      $sorted = false;\n      break;\n    } else {\n      $dupes[]\
    \ = $num;\n    }\n  }\n  return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52pnxpne.php:40\n\
    Stack trace:\n#0 /tmp/tmp52pnxpne.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp52pnxpne.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(sizeof($lst)\
    \ == 1) return true;\n    $check = [];\n    foreach($lst as $i){\n        if(!in_array($i,\
    \ $check))\n            array_push($check, $i);\n        else return false;\n\
    \    }\n    for($i = 0; $i < sizeof($lst) - 1; $i++){\n        if($lst[$i] > $lst[$i\
    \ + 1]) return false;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp742z5oo0.php:43\n\
    Stack trace:\n#0 /tmp/tmp742z5oo0.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp742z5oo0.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// check if there\
    \ is a duplicate\n\t$check = [];\n\tforeach ($lst as $val) {\n\t\tif (in_array($val,\
    \ $check)) {\n\t\t\treturn false;\n\t\t}\n\t\t$check[] = $val;\n\t}\n\t// check\
    \ if it is sorted\n\t$sort = sort($lst);\n\tif ($lst == $sort) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2,\
    \ 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpy63m936e.php:45\nStack trace:\n#0 /tmp/tmpy63m936e.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy63m936e.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n    if ($lst[$i] > $lst[$i + 1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla2fdmus.php:37\n\
    Stack trace:\n#0 /tmp/tmpla2fdmus.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpla2fdmus.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] == $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    return $lst == array_sort($lst);\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_sort()\
    \ in /tmp/tmp1jstssuf.php:21\nStack trace:\n#0 /tmp/tmp1jstssuf.php(24): is_sorted(Array)\n\
    #1 /tmp/tmp1jstssuf.php(28): candidate(Array)\n#2 /tmp/tmp1jstssuf.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1jstssuf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $length = count($lst);\n\
    \    if ($length == 1) {\n        return True;\n    }\n    else {\n        $check\
    \ = True;\n        for ($i = 0; $i < $length - 1; $i++) {\n            if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n                $check = False;\n            }\n       \
    \ }\n        return $check;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqusy5e74.php:45\n\
    Stack trace:\n#0 /tmp/tmpqusy5e74.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqusy5e74.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$asc = $lst;\n\t\
    sort($asc);\n\tforeach ($lst as $key => $val) {\n\t\tif ($val != $asc[$key]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br>1<br>1\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp2tz0vgbm.php:53\nStack trace:\n#0 /tmp/tmp2tz0vgbm.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2tz0vgbm.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $i = 0;\n  $res\
    \ = true;\n  while ($i < count($lst) - 1) {\n    if ($lst[$i] >= $lst[$i + 1])\
    \ {\n      $res = false;\n      break;\n    }\n    $i++;\n  }\n  return $res;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtv2kafr.php:42\n\
    Stack trace:\n#0 /tmp/tmprtv2kafr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprtv2kafr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1){\n        return True;\n    }else{\n        $res = True;\n        $lst\
    \ = array_unique($lst);\n        for ($i=0; $i < count($lst) - 1; $i++) { \n \
    \           if ($lst[$i] > $lst[$i+1]){\n                $res = False;\n     \
    \       }\n        }\n        return $res;\n    }\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchl3jxau.php:45\n\
    Stack trace:\n#0 /tmp/tmpchl3jxau.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpchl3jxau.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = false;\n\
    \    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i\
    \ + 1]) {\n            $sorted = false;\n            break;\n        } else {\n\
    \            $sorted = true;\n        }\n    }\n    return $sorted;\n}\necho is_sorted([5]);\n\
    echo is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "11111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk29hewr.php:39\n\
    Stack trace:\n#0 /tmp/tmpwk29hewr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwk29hewr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $filtered = array_filter($lst,\
    \ \"is_int\");\n  $count = count($filtered);\n  if ($count < 1) {\n    return\
    \ \"Invalid\";\n  }\n  else {\n    $min = min($filtered);\n    $max = max($filtered);\n\
    \    $expected = range($min, $max);\n    $actual = array_unique($filtered);\n\
    \    return $actual == $expected;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0s9hieu.php:40\n\
    Stack trace:\n#0 /tmp/tmpu0s9hieu.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpu0s9hieu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $newList = [];\n\
    \    $order = null;\n    foreach ($lst as $number) {\n        $newList[] = $number;\n\
    \    }\n    $order = sort($newList);\n    if (sort($lst) === $order) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrm8f3s9.php:37\n\
    Stack trace:\n#0 /tmp/tmpzrm8f3s9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpzrm8f3s9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$length = count($lst);\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < $length; $i++) {\n\t\tif ($lst[$i] < $prev)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn true;\n\
    }\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmph9n84lsh.php:47\nStack trace:\n#0 /tmp/tmph9n84lsh.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmph9n84lsh.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) return false;\n\
    \    }\n    return true;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzypzd9jk.php:41\n\
    Stack trace:\n#0 /tmp/tmpzypzd9jk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzypzd9jk.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\\
    n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\n\
    echo is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3,\
    \ 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp1kg79xiu.php:44\nStack trace:\n#0 /tmp/tmp1kg79xiu.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1kg79xiu.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx25j8kqp.php:36\n\
    Stack trace:\n#0 /tmp/tmpx25j8kqp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx25j8kqp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_siy5p3c.php:21\n\
    Stack trace:\n#0 /tmp/tmp_siy5p3c.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_siy5p3c.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$cnt=count($lst);\n\
    \tfor($i=0;$i<$cnt-1;$i++){\n\t\tif($lst[$i]<$lst[$i+1]){\n\t\t\tcontinue;\n\t\
    \t}else{\n\t\t\treturn \"False\";\n\t\t}\n\t}\n\treturn \"True\";\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5xkx8ey.php:31\n\
    Stack trace:\n#0 /tmp/tmpx5xkx8ey.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpx5xkx8ey.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $lst = array_count_values($lst);\n\
    \  foreach ($lst as $key => $value) {\n    if ($value > 1) {\n      return \"\
    False\";\n    }\n  }\n  $lst = array_values($lst);\n  sort($lst);\n  if (serialize($lst)\
    \ == serialize($lst)) {\n    return \"True\";\n  } else {\n    return \"False\"\
    ;\n  }\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoupg79oo.php:35\n\
    Stack trace:\n#0 /tmp/tmpoupg79oo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpoupg79oo.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n   foreach ($lst as\
    \ $key => $val) {\n      if ($key != $val) {\n         return false;\n      }\n\
    \   }\n   return true;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\n\
    echo is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4,\
    \ 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho\
    \ \"<br>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpl7vg5km6.php:41\nStack trace:\n#0 /tmp/tmpl7vg5km6.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpl7vg5km6.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] <= $prev) {\n\t\t\t\
    return false;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn true;\n}\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqn881cj.php:40\n\
    Stack trace:\n#0 /tmp/tmpmqn881cj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmqn881cj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$ans = true;\n\t\
    for ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\
    \t\t\t$ans = false;\n\t\t}\n\t}\n\treturn $ans;\n}\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rzbkpyf.php:38\n\
    Stack trace:\n#0 /tmp/tmp8rzbkpyf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8rzbkpyf.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn !(array_keys($lst)\
    \ !== range(0, count($lst) - 1) && array_keys($lst) !== range(0, count($lst) -\
    \ 1));\n}\n\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "11111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6sn218_.php:33\n\
    Stack trace:\n#0 /tmp/tmpz6sn218_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz6sn218_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lstlen = count($lst);\n\
    \tif ($lstlen < 2) {\n\t\treturn true;\n\t}\n\tfor ($i = 0; $i < $lstlen - 1;\
    \ $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0h67n0x.php:50\n\
    Stack trace:\n#0 /tmp/tmpo0h67n0x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpo0h67n0x.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ < 2) return true;\n\t$arr = array_unique($lst);\n\t$result = [];\n\tsort($arr);\n\
    \tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] !== $lst[$i]) return\
    \ false;\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pcsistm.php:40\n\
    Stack trace:\n#0 /tmp/tmp1pcsistm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1pcsistm.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    $current = $lst[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($current\
    \ > $lst[$i]) {\n            return false;\n        }\n        $current = $lst[$i];\n\
    \    }\n    return true;\n}\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6,\
    \ 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br>1<br>1<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfrudxy0a.php:48\nStack trace:\n#0 /tmp/tmpfrudxy0a.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfrudxy0a.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $dups = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $dups == $sorted;\n  }\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hf8h9wt.php:36\n\
    Stack trace:\n#0 /tmp/tmp4hf8h9wt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4hf8h9wt.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$unique = count(array_unique($lst));\n\tif ($count == $unique) {\n\t\t$str =\
    \ implode(\"\", $lst);\n\t\t$str2 = implode(\"\", $lst);\n\t\t$str2 = strrev($str2);\n\
    \t\tif ($str != $str2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\
    return false;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnjnvrmw.php:34\n\
    Stack trace:\n#0 /tmp/tmpsnjnvrmw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsnjnvrmw.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ === 1) {\n\t\treturn true;\n\t}\n\t$len = count($lst);\n\tfor ($i = 0; $i <\
    \ $len - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxstkdqj_.php:41\n\
    Stack trace:\n#0 /tmp/tmpxstkdqj_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxstkdqj_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $tmp_lst = array_unique($lst);\n\
    \    sort($tmp_lst);\n    return (implode(\",\", $lst) == implode(\",\", $tmp_lst));\n\
    }\necho is_sorted([1, 3, 2, 4, 5]);\necho \"\\n\";\necho is_sorted([1, 2, 3, 4,\
    \ 5]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpguv_03ar.php:43\n\
    Stack trace:\n#0 /tmp/tmpguv_03ar.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpguv_03ar.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $lstArray = array_count_values($lst);\n\
    \  foreach ($lstArray as $key => $value) {\n    if ($value > 1) {\n      return\
    \ false;\n    }\n  }\n  $lstCount = count($lst);\n  for ($i = 0; $i < $lstCount\
    \ - 1; $i++) {\n    if ($lst[$i] > $lst[$i + 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssemtmpd.php:45\n\
    Stack trace:\n#0 /tmp/tmpssemtmpd.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpssemtmpd.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = array_unique($lst);\n\
    \treturn ($lst == $lst2) ? true : false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4])\
    \ ? \"True\" : \"False\";\necho \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) ? \"True\" : \"\
    False\";\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) ? \"True\" : \"False\"\
    ;\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) ? \"True\" : \"False\"\
    ;\necho \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) ? \"True\" : \"False\"\
    ;\necho \"\\n\";\necho is_sorted([5]) ? \"True\" : \"False\";\necho \"\\n\";\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcaenjomr.php:41\nStack trace:\n#0 /tmp/tmpcaenjomr.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcaenjomr.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]);\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4,\
    \ 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3wvv014.php:46\n\
    Stack trace:\n#0 /tmp/tmpr3wvv014.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr3wvv014.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ == count(array_unique($lst))) {\n\t\treturn $lst == range(min($lst), max($lst));\n\
    \t} else {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmprp5py6wx.php\
    \ on line 16\n\nWarning: max(): Array must contain at least one element in /tmp/tmprp5py6wx.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp5py6wx.php:32\n\
    Stack trace:\n#0 /tmp/tmprp5py6wx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprp5py6wx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$s = [];\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $lst[$i + 1]) {\n\t\t\
    \t$s[] = \"sorted\";\n\t\t} else {\n\t\t\t$s[] = \"unsorted\";\n\t\t}\n\t}\n\t\
    if (in_array(\"unsorted\", $s)) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen00ds2a.php:34\n\
    Stack trace:\n#0 /tmp/tmpen00ds2a.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpen00ds2a.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $i = 0;\n    while\
    \ ( $i < count($lst) - 1 ) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n        $i++;\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcch3aoe9.php:38\n\
    Stack trace:\n#0 /tmp/tmpcch3aoe9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcch3aoe9.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// sort($lst);\n\
    \t// if($lst === $arr) {\n\t// \treturn True;\n\t// }\n\t// return False;\n\t\
    // echo implode(\",\", $lst);\n\t$count = count($lst);\n\t$arr = [];\n\tfor($i\
    \ = 0; $i < $count; $i++) {\n\t\tif(in_array($lst[$i], $arr)) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\telse {\n\t\t\tarray_push($arr, $lst[$i]);\n\t\t}\n\t}\n\t\
    $flag = true;\n\tfor($i = 0; $i < $count-1; $i++) {\n\t\tif($lst[$i] > $lst[$i+1])\
    \ {\n\t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $flag;\n}\necho\
    \ is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpte6d4k.php:64\n\
    Stack trace:\n#0 /tmp/tmpwpte6d4k.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpwpte6d4k.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$result = true;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $lst[$i - 1]) {\n\
    \t\t\t$result = false;\n\t\t}\n\t}\n\treturn $result;\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lj6rrcg.php:38\n\
    Stack trace:\n#0 /tmp/tmp2lj6rrcg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2lj6rrcg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = false;\n\
    \tforeach ($lst as $val) {\n\t\tif ($val == max($lst)) {\n\t\t\t$sorted = true;\n\
    \t\t} else {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe4pkrfp.php:33\n\
    Stack trace:\n#0 /tmp/tmpwe4pkrfp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwe4pkrfp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $ans = true;\n \
    \ $lst = array_unique($lst);\n  $lst = array_values($lst);\n  $tot = count($lst);\n\
    \  for ($i = 0; $i < $tot - 1; $i++) {\n    if ($lst[$i] > $lst[$i + 1]) {\n \
    \     $ans = false;\n    }\n  }\n  return $ans;\n}\necho \"5, 4, 3, 2, 1 \" .\
    \ (is_sorted([5, 4, 3, 2, 1]) ? \"True\" : \"False\") . \"\\n\";\necho \"1, 2,\
    \ 3, 4, 5 \" . (is_sorted([1, 2, 3, 4, 5]) ? \"True\" : \"False\") . \"\\n\";\n\
    echo \"1, 3, 2, 4, 5 \" . (is_sorted([1, 3, 2, 4, 5]) ? \"True\" : \"False\")\
    \ . \"\\n\";\necho \"1, 2, 3, 4, 5, 6 \" . (is_sorted([1, 2, 3, 4, 5, 6]) ? \"\
    True\" : \"False\") . \"\\n\";\necho \"1, 2, 3, 4, 5, 6, 7 \" . (is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) ? \"True\" : \"False\") . \"\\n\";\necho \"1, 3, 2, 4, 5,\
    \ 6, 7 \" . (is_sorted([1, 3, 2, 4, 5, 6, 7]) ? \"True\" : \"False\") . \"\\n\"\
    ;\necho \"1, 2, 2, 3, 3, 4 \" . (is_sorted([1, 2, 2, 3, 3, 4]) ? \"True\" : \"\
    False\") . \"\\n\";\necho \"1, 2, 2, 2, 3, 4 \" . (is_sorted([1, 2, 2, 2, 3, 4])\
    \ ? \"True\" : \"False\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5, 4, 3, 2, 1 False\n1, 2, 3, 4, 5 True\n1, 3, 2, 4, 5 False\n1, 2, 3,\
    \ 4, 5, 6 True\n1, 2, 3, 4, 5, 6, 7 True\n1, 3, 2, 4, 5, 6, 7 False\n1, 2, 2,\
    \ 3, 3, 4 True\n1, 2, 2, 2, 3, 4 True\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpniznzob0.php:48\nStack trace:\n#0 /tmp/tmpniznzob0.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpniznzob0.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n$count = count($lst);\n\
    \    if ($count > 2) {\n\t\tfor ($i = 0; $i < $count; $i++) {\n\t\t\tif ($lst[$i]\
    \ < $lst[$i + 1]) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q8bvf4f.php:36\n\
    Stack trace:\n#0 /tmp/tmp9q8bvf4f.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9q8bvf4f.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$counter = 0;\n\t\
    for ($i=0; $i < count($lst); $i++) { \n\t\tif($lst[$i] == $lst[$i+1]){\n\t\t\t\
    return false;\n\t\t}\n\t\tif($lst[$i] > $lst[$i+1]){\n\t\t\t$counter = 1;\n\t\t\
    }\n\t}\n\tif($counter == 1){\n\t\treturn false;\n\t}\n\treturn true;\n}\n\necho\
    \ is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3w2gjs4.php:43\n\
    Stack trace:\n#0 /tmp/tmpv3w2gjs4.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpv3w2gjs4.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $i = $lst[0];\n\
    \  foreach ($lst as $n) {\n    if ($n < $i) {\n      return false;\n    }\n  \
    \  $i = $n;\n  }\n  return true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59k82nbm.php:39\n\
    Stack trace:\n#0 /tmp/tmp59k82nbm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp59k82nbm.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$duplicate = array_count_values($lst);\n\
    \tif(count($duplicate) != count($lst)) {\n\t\treturn false;\n\t}\n\tfor($i = 0;\
    \ $i < count($lst) - 1; $i++) {\n\t\tif($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwwfh6n8.php:42\n\
    Stack trace:\n#0 /tmp/tmphwwfh6n8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphwwfh6n8.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    if ($lst[$i] == $lst[$i+1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiadytpsq.php:30\n\
    Stack trace:\n#0 /tmp/tmpiadytpsq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiadytpsq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  //  write code here\n\
    \  if (count($lst) < 2) {\n      return true;\n  }\n  $current = $lst[0];\n  for\
    \ ($i = 1; $i < count($lst); $i++) {\n      if ($current > $lst[$i]) {\n     \
    \     return false;\n      }\n      $current = $lst[$i];\n  }\n  return true;\n\
    }\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpu9keyrgt.php:50\nStack trace:\n#0 /tmp/tmpu9keyrgt.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpu9keyrgt.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ == 1) {\n\t\treturn true;\n\t}\n\t\n\t$previous = $lst[0];\n\tfor ($i = 1; $i\
    \ < count($lst); $i++) {\n\t\tif ($lst[$i] < $previous) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$previous = $lst[$i];\n\t}\n\treturn true;\n}\necho is_sorted([1, 2,\
    \ 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40wc5e1i.php:49\n\
    Stack trace:\n#0 /tmp/tmp40wc5e1i.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp40wc5e1i.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclpvptag.php:35\n\
    Stack trace:\n#0 /tmp/tmpclpvptag.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpclpvptag.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(count($lst)\
    \ == 1) {\n        return true;\n    }\n    for($i = 0; $i < count($lst) - 1;\
    \ $i++) {\n        if($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\
    <br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\necho is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4,\
    \ 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho is_sorted([5])\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br>1<br><br>1<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpr7_dkmdm.php:47\nStack trace:\n#0 /tmp/tmpr7_dkmdm.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr7_dkmdm.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// If the length\
    \ of the list is greater than 2\n\tif (count($lst) > 2) {\n\t\t// Create a new\
    \ array to store our data\n\t\t$newList = [];\n\t\t// Create a new variable for\
    \ our previous number\n\t\t$previous = 0;\n\t\t// Loop through our list\n\t\t\
    foreach ($lst as $number) {\n\t\t\t// See if we have the same number twice\n\t\
    \t\tif (in_array($number, $newList)) {\n\t\t\t\t// If so, return false\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t\t// See if our current number is more than our\
    \ previous number\n\t\t\tif ($number >= $previous) {\n\t\t\t\t// If so, store\
    \ our previous number\n\t\t\t\t$previous = $number;\n\t\t\t\t// Push our number\
    \ into our new list\n\t\t\t\tarray_push($newList, $number);\n\t\t\t} else {\n\t\
    \t\t\t// If not, return false\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Return\
    \ true\n\t\treturn true;\n\t} else {\n\t\t// If it is not greater than 2, return\
    \ true\n\t\treturn true;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7czh0wvr.php:63\n\
    Stack trace:\n#0 /tmp/tmp7czh0wvr.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp7czh0wvr.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lastElement = $lst[0];\n\
    \tforeach ($lst as $element) {\n\t\tif ($element < $lastElement) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$lastElement = $element;\n\t}\n\treturn true;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qfh95xc.php:39\n\
    Stack trace:\n#0 /tmp/tmp4qfh95xc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4qfh95xc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$length = count($lst);\n\
    \tif($length === 1){\n\t\treturn true;\n\t}\n\tfor($i = 0; $i < $length - 1; $i++){\n\
    \t\tif($lst[$i] > $lst[$i + 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxvm5o_w.php:40\n\
    Stack trace:\n#0 /tmp/tmpyxvm5o_w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpyxvm5o_w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$i = 0;\n\t$isSorted\
    \ = true;\n\t$currentElement = $lst[$i];\n\t$currentValue = $currentElement;\n\
    \tforeach ($lst as $element) {\n\t\tif ($currentValue == $element) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif ($currentValue > $element) {\n\t\t\t$isSorted = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\t$currentValue = $element;\n\t}\n\treturn $isSorted;\n}\necho is_sorted([5]);\n\
    echo is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm204xe57.php:53\n\
    Stack trace:\n#0 /tmp/tmpm204xe57.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpm204xe57.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$last = -1;\n\t\
    foreach ($lst as $val) {\n\t\tif ($val <= $last) {\n\t\t\treturn false;\n\t\t\
    }\n\t\t$last = $val;\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho\
    \ \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3n20px8.php:54\n\
    Stack trace:\n#0 /tmp/tmpa3n20px8.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpa3n20px8.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$values = array_count_values($lst);\n\
    \t$new = array_unique($lst);\n\tfor ($i=0; $i < count($new); $i++) { \n\t\tif\
    \ ($values[$new[$i]] > 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count($new)\
    \ == 1) {\n\t\treturn true;\n\t}\n\tfor ($i=0; $i < count($new)-1; $i++) { \n\t\
    \tif ($new[$i] < $new[$i+1]) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\
    \t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyzhhw13.php:40\n\
    Stack trace:\n#0 /tmp/tmpoyzhhw13.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoyzhhw13.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn $lst == array_unique($lst)\
    \ && $lst == array_merge(array_unique($lst), []);\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2on1tvb7.php:25\n\
    Stack trace:\n#0 /tmp/tmp2on1tvb7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2on1tvb7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn $lst == array_unique($lst);\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4xpxghp.php:25\n\
    Stack trace:\n#0 /tmp/tmpv4xpxghp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv4xpxghp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = count($lst);\n\
    \    for ($i = 0; $i < $count - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\necho is_sorted([5]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp502ukrfo.php:38\n\
    Stack trace:\n#0 /tmp/tmp502ukrfo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp502ukrfo.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $counted_arr =\
    \ array_count_values($lst);\n    foreach ($counted_arr as $value) {\n        if\
    \ ($value > 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\n\
    echo is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\"\
    ;\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpa93dfpi0.php:39\nStack trace:\n#0 /tmp/tmpa93dfpi0.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa93dfpi0.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \tforeach ($arr as $key => $value) {\n\t\tif ($value > 1) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\t$str = implode(\"\", $lst);\n\t$str1 = join(\"\", $lst);\n\tif ($str\
    \ == $str1) {\n\t\treturn True;\n\t}\n\treturn False;\n}\necho is_sorted([5]);\n\
    echo \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\\\
    n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp33hnm7gq.php:51\nStack trace:\n#0 /tmp/tmp33hnm7gq.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmp33hnm7gq.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ === 1) return true;\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n      \
    \  if ($lst[$i] >= $lst[$i + 1]) return false;\n    }\n    return true;\n}\necho\
    \ is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3,\
    \ 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo is_sorted([5]) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpt4vu0la6.php:45\nStack trace:\n#0 /tmp/tmpt4vu0la6.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt4vu0la6.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $first = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] >= $first) {\n\
    \            $first = $lst[$i];\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\necho \"Test 1: \" . (is_sorted([5])\
    \ ? \"true\" : \"false\") . \"\\n\";\necho \"Test 2: \" . (is_sorted([1, 2, 3,\
    \ 4, 5]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 3: \" . (is_sorted([1,\
    \ 3, 2, 4, 5]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 4: \" . (is_sorted([1,\
    \ 2, 3, 4, 5, 6]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 5: \" . (is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 6: \" . (is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 7: \" . (is_sorted([1,\
    \ 2, 2, 3, 3, 4]) ? \"true\" : \"false\") . \"\\n\";\necho \"Test 8: \" . (is_sorted([1,\
    \ 2, 2, 2, 3, 4]) ? \"true\" : \"false\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 1: true\nTest 2: true\nTest 3: false\nTest 4: true\nTest 5: true\n\
    Test 6: false\nTest 7: true\nTest 8: true\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpb6uhrvy8.php:48\nStack trace:\n#0 /tmp/tmpb6uhrvy8.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb6uhrvy8.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $result = false;\n\
    \    $len = count($lst);\n    if ($len > 1) {\n        $result = true;\n     \
    \   $current = $lst[0];\n        for ($i = 1; $i < $len; $i++) {\n           \
    \ if ($current >= $lst[$i]) {\n                $result = false;\n            \
    \    break;\n            }\n            $current = $lst[$i];\n        }\n    }\n\
    \    return $result;\n}\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2,\
    \ 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcj94pi_.php:43\n\
    Stack trace:\n#0 /tmp/tmpvcj94pi_.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpvcj94pi_.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyk5b3tqu.php:37\n\
    Stack trace:\n#0 /tmp/tmpyk5b3tqu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyk5b3tqu.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$dup = array_unique($lst);\n\
    \t$dup = array_diff_assoc($lst, $dup);\n\tif (empty($dup)) {\n\t\tif ($lst ==\
    \ (sort($lst))) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t\
    }\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) .\
    \ PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([5]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp3u4wd760.php:42\nStack trace:\n#0 /tmp/tmp3u4wd760.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3u4wd760.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$is_sorted = false;\n\
    \t$asc = true;\n\t$desc = true;\n\tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\
    \t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\t$asc = false;\n\t\t}\n\t\tif ($lst[$i]\
    \ < $lst[$i + 1]) {\n\t\t\t$desc = false;\n\t\t}\n\t}\n\tif ($asc || $desc) {\n\
    \t\t$is_sorted = true;\n\t}\n\treturn $is_sorted;\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphq2j64t9.php:45\n\
    Stack trace:\n#0 /tmp/tmphq2j64t9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphq2j64t9.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif(count($lst) ===\
    \ 1){\n\t\treturn true;\n\t}\n\t$arr = [];\n\tforeach($lst as $val){\n\t\tif(in_array($val,\
    \ $arr)){\n\t\t\treturn false;\n\t\t}\n\t\tarray_push($arr, $val);\n\t}\n\t$arr\
    \ = array_values($arr);\n\tif($arr[0] === $arr[1]){\n\t\treturn false;\n\t}\n\t\
    for($i = 0; $i < count($arr) - 1; $i++){\n\t\tif($arr[$i] > $arr[$i + 1]){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([5]).'<br>';\n\
    echo is_sorted([1, 2, 3, 4, 5]).'<br>';\necho is_sorted([1, 3, 2, 4, 5]).'<br>';\n\
    echo is_sorted([1, 2, 3, 4, 5, 6]).'<br>';\necho is_sorted([1, 2, 3, 4, 5, 6,\
    \ 7]).'<br>';\necho is_sorted([1, 3, 2, 4, 5, 6, 7]).'<br>';\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]).'<br>';\necho is_sorted([1, 2, 2, 2, 3, 4]).'<br>';\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc5yu41x3.php:55\nStack trace:\n#0 /tmp/tmpc5yu41x3.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc5yu41x3.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = count($lst);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i] === $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\
    <br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\necho is_sorted([1, 2,\
    \ 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"<br>\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([5]) . \"\
    <br>\";\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpqwxr62p0.php:42\nStack trace:\n#0 /tmp/tmpqwxr62p0.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqwxr62p0.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $isSorted = true;\n\
    \  $arrValues = array_count_values($lst);\n  foreach ($arrValues as $key => $value)\
    \ {\n    if ($value > 1) {\n      $isSorted = false;\n    }\n  }\n  if ($isSorted)\
    \ {\n    $newLst = sort($lst);\n    if ($newLst != $lst) {\n      $isSorted =\
    \ false;\n    }\n  }\n  return $isSorted;\n}\necho is_sorted([5]);\necho \"<br/>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br/>\";\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho \"<br/>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br/>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br/>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br/>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    echo \"<br/>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br/>1<br/>1<br/>1<br/>1<br/>1<br/><br/>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpajv6frrz.php:52\nStack trace:\n#0 /tmp/tmpajv6frrz.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpajv6frrz.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$counter = 0;\n\t\
    $len = count($lst);\n\t$first_num = $lst[0];\n\t$second_num = $lst[1];\n\t$i =\
    \ 0;\n\twhile($i < $len){\n\t\tif($first_num < $second_num){\n\t\t\t$counter++;\n\
    \t\t}\n\t\t$i++;\n\t\t$first_num = $lst[$i];\n\t\t$second_num = $lst[$i+1];\n\t\
    }\n\tif($counter === $len-1){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\
    \t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperqsl7o2.php:46\n\
    Stack trace:\n#0 /tmp/tmperqsl7o2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmperqsl7o2.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\tif($lst === $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br>1<br>1\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp3l78ss29.php:52\nStack trace:\n#0 /tmp/tmp3l78ss29.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3l78ss29.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sortedArray =\
    \ $lst;\n    sort($sortedArray);\n    if ($lst == $sortedArray) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjeh2sktz.php:38\n\
    Stack trace:\n#0 /tmp/tmpjeh2sktz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjeh2sktz.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n$sorted = $lst;\n\
    sort($sorted);\nreturn $lst === $sorted ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbbjxdon.php:33\n\
    Stack trace:\n#0 /tmp/tmpjbbjxdon.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjbbjxdon.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43jnpczz.php:27\n\
    Stack trace:\n#0 /tmp/tmp43jnpczz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp43jnpczz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = array_unique($lst);\n\
    \tsort($sorted);\n\treturn ($sorted === $lst) ? true : false;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fctkznj.php:36\n\
    Stack trace:\n#0 /tmp/tmp1fctkznj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1fctkznj.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    foreach ($lst\
    \ as $key => $value) {\n        if (isset($lst[$key + 1])) {\n            if ($value\
    \ >= $lst[$key + 1]) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpx6ib9c8d.php:48\nStack trace:\n#0 /tmp/tmpx6ib9c8d.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpx6ib9c8d.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $temp = $lst;\n\
    \    sort($temp);\n    $is = true;\n    foreach ($lst as $key => $value) {\n \
    \       if ($lst[$key] != $temp[$key]) {\n            $is = false;\n        }\n\
    \    }\n    return $is;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsoxxxq6g.php:39\n\
    Stack trace:\n#0 /tmp/tmpsoxxxq6g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsoxxxq6g.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tfor ($j = $i + 1; $j < count($lst); $j++) {\n\t\t\
    \tif ($lst[$i] > $lst[$j]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true;\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mfiq74e.php:46\n\
    Stack trace:\n#0 /tmp/tmp2mfiq74e.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2mfiq74e.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$set = array_unique($lst);\n\
    \tif(count($lst) == count($set)){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho\
    \ is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuupydop.php:38\n\
    Stack trace:\n#0 /tmp/tmphuupydop.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphuupydop.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t//your code goes\
    \ here\n\t$dup = [];\n\tfor($i = 0; $i < count($lst); $i++){\n\t\tif($lst[$i]\
    \ == $lst[$i+1]){\n\t\t\tarray_push($dup, $lst[$i]);\n\t\t}\n\t}\n\tif(count($dup)\
    \ > 1){\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6uc55e3.php:36\n\
    Stack trace:\n#0 /tmp/tmpb6uc55e3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpb6uc55e3.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6_oicif.php:36\n\
    Stack trace:\n#0 /tmp/tmpk6_oicif.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk6_oicif.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(!is_array($lst))\
    \ return false;\n    $l = count($lst);\n    if($l < 2) return true;\n    $pre\
    \ = $lst[0];\n    for($i = 1; $i < $l; $i++){\n        if($lst[$i] == $pre) return\
    \ false;\n        if($lst[$i] < $pre) return false;\n        $pre = $lst[$i];\n\
    \    }\n    return true;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\"\
    ;\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2cy7air.php:49\n\
    Stack trace:\n#0 /tmp/tmpv2cy7air.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv2cy7air.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $filter = array_unique($lst);\n\
    \  $diff =  array_diff_assoc($lst, $filter);\n  if(count($diff)>0){\n    return\
    \ false;\n  }\n  for($i=0;$i<count($lst)-1;$i++){\n    if($lst[$i] > $lst[$i+1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdtea70f.php:44\n\
    Stack trace:\n#0 /tmp/tmpwdtea70f.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpwdtea70f.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    if (isset($lst[$i + 1])) {\n      if ($lst[$i] >\
    \ $lst[$i + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzr5aohl.php:38\n\
    Stack trace:\n#0 /tmp/tmpbzr5aohl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbzr5aohl.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$tmp = $lst;\n\t\
    sort($tmp);\n\t$result = array_unique($tmp);\n\tif($lst === $result){\n\t\treturn\
    \ True;\n\t}else{\n\t\treturn False;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjru0ujx.php:41\n\
    Stack trace:\n#0 /tmp/tmprjru0ujx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprjru0ujx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $arr = [];\n  foreach\
    \ ($lst as $v) {\n    if (in_array($v, $arr)) {\n      return false;\n    }\n\
    \    $arr[] = $v;\n  }\n  return $lst == $arr;\n}\necho is_sorted([1, 2, 3, 4,\
    \ 5]);\necho \"<br/>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br/>\";\necho\
    \ is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br/>\";\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]);\necho \"<br/>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br/>1<br/><br/><br/>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp7jmsxjcx.php:39\nStack trace:\n#0 /tmp/tmp7jmsxjcx.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7jmsxjcx.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(count($lst)\
    \ === 1){\n        return true;\n    }\n    $arr = array_unique($lst);\n    if($arr\
    \ === $lst){\n        $array = $lst;\n        sort($array);\n        if($array\
    \ === $lst){\n            return true;\n        }\n    }\n    return false;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]);\necho \"\\n\";\necho is_sorted([5]);\necho \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"\\n\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\\n\";\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho \"\
    \\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"\\n\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp26qruj_6.php:64\nStack trace:\n#0 /tmp/tmp26qruj_6.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmp26qruj_6.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $isSorted = false;\n\
    \  $last_index = count($lst) - 1;\n  for ($i = 0; $i < $last_index; $i++) {\n\
    \    if ($lst[$i] < $lst[$i + 1]) {\n      $isSorted = true;\n    } else {\n \
    \     $isSorted = false;\n      break;\n    }\n  }\n  return $isSorted;\n}\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd01uwln7.php:32\n\
    Stack trace:\n#0 /tmp/tmpd01uwln7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpd01uwln7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    //sort the array\n\
    \    sort($lst);\n    //count the items in the array\n    $count = count($lst);\n\
    \    //loop through each item in the array\n    for($i = 0; $i < $count; $i++){\n\
    \        //as long as the item is not the same as the item after it\n        if($lst[$i]\
    \ !== $lst[$i+1]){\n            return true;\n        }else{\n            return\
    \ false;\n        }\n    }\n}\necho is_sorted([5]) ? \"True\" : \"False\";\necho\
    \ is_sorted([1, 2, 3, 4, 5]) ? \"True\" : \"False\";\necho is_sorted([1, 3, 2,\
    \ 4, 5]) ? \"True\" : \"False\";\necho is_sorted([1, 2, 3, 4, 5, 6]) ? \"True\"\
    \ : \"False\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) ? \"True\" : \"False\";\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) ? \"True\" : \"False\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) ? \"True\" : \"False\";\necho is_sorted([1, 2, 2, 2, 3, 4])\
    \ ? \"True\" : \"False\";\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "TrueTrueTrueTrueTrueTrueTrueTrue\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpo5oia04f.php:45\nStack trace:\n#0 /tmp/tmpo5oia04f.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo5oia04f.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp849ajw5p.php:22\n\
    Stack trace:\n#0 /tmp/tmp849ajw5p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp849ajw5p.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) .\
    \ PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([5]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 3, 3, 4, 5]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpmecq2u41.php:47\nStack trace:\n#0 /tmp/tmpmecq2u41.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmecq2u41.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sort = sort($lst);\n\
    \treturn $sort === $lst;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpml3vguzs.php:23\n\
    Stack trace:\n#0 /tmp/tmpml3vguzs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpml3vguzs.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $lst=array_values(array_unique($lst));\n\
    \    if(count($lst)==1){\n        return true;\n    }\n    for($i=0;$i<count($lst)-1;$i++){\n\
    \        if($lst[$i]>$lst[$i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\necho is_sorted([5]).\"\\n\";\necho is_sorted([1, 2, 3, 4,\
    \ 5]).\"\\n\";\necho is_sorted([1, 3, 2, 4, 5]).\"\\n\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6]).\"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]).\"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]).\"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]).\"\
    \\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp9v7ly7d9.php:48\nStack trace:\n#0 /tmp/tmp9v7ly7d9.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9v7ly7d9.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$copy = $lst;\n\tsort($copy);\n\tforeach($lst as $key => $value){\n\t\tif($value\
    \ != $copy[$key]){\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\n\
    echo is_sorted([5]).PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]).PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5]).PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]).PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]).PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]).PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 3, 3, 4]).PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]).PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpkc62zj0w.php:47\nStack trace:\n#0 /tmp/tmpkc62zj0w.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkc62zj0w.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $x = $lst[0];\n\
    \  $y = $lst[0];\n  foreach ($lst as $num) {\n    if ($x > $num) {\n      return\
    \ false;\n    }\n    $x = $num;\n  }\n  foreach ($lst as $num) {\n    if ($y <\
    \ $num) {\n      return false;\n    }\n    $y = $num;\n  }\n  return true;\n}\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr5i6gcr.php:37\n\
    Stack trace:\n#0 /tmp/tmpzr5i6gcr.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzr5i6gcr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\t$current = $lst[$i];\n\t\t$next = $lst[$i +\
    \ 1];\n\t\tif ($current >= $next) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgaaiznr.php:40\n\
    Stack trace:\n#0 /tmp/tmpqgaaiznr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqgaaiznr.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn count(array_unique($lst))==count($lst)\
    \ && $lst==sort($lst);\n}\n\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cmm1etr.php:26\n\
    Stack trace:\n#0 /tmp/tmp0cmm1etr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0cmm1etr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$prev = 0;\n\tforeach\
    \ ($lst as $val) {\n\t\tif ($val < $prev) return false;\n\t\t$prev = $val;\n\t\
    }\n\treturn true;\n}\n\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gb9kfbo.php:44\n\
    Stack trace:\n#0 /tmp/tmp3gb9kfbo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3gb9kfbo.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $f = array_unique($lst);\n\
    \    $q = count($lst);\n    $w = count($f);\n    if ($q == $w) {\n        $s =\
    \ $q - 1;\n        for ($i = 0; $i < $s; $i++) {\n            if ($lst[$i] > $lst[$i\
    \ + 1]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([5]);\necho \"<br>\";\n\
    echo is_sorted([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu6b1xv0w.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] == $lst[$i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_y246pcg.php:41\n\
    Stack trace:\n#0 /tmp/tmp_y246pcg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_y246pcg.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ == 1) {\n\t\treturn true;\n\t} else {\n\t\t$reversed = array_reverse($lst);\n\
    \t\tif ($lst == $reversed) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n}\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1, 2, 3,\
    \ 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\";\n\
    echo is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4, 5, 5, 5,\
    \ 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br><br><br><br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7ilcaofu.php:51\nStack trace:\n#0 /tmp/tmp7ilcaofu.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7ilcaofu.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn sizeof(array_unique($lst))\
    \ == sizeof($lst) ? true : false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah3k_kbg.php:24\n\
    Stack trace:\n#0 /tmp/tmpah3k_kbg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpah3k_kbg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $num = count($lst);\n\
    \  for ($i = 0; $i < $num - 1; $i++) {\n    if ($lst[$i] >= $lst[$i + 1]) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\necho is_sorted([5]) ? \"\
    True\" : \"False\";\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]) ? \"True\"\
    \ : \"False\";\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) ? \"True\" : \"\
    False\";\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]) ? \"True\" : \"False\"\
    ;\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) ? \"True\" : \"False\"\
    ;\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) ? \"True\" : \"False\"\
    ;\necho \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]) ? \"True\" : \"False\";\n\
    echo \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) ? \"True\" : \"False\";\necho\
    \ \"<br>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True<br>True<br>False<br>True<br>True<br>False<br>False<br>False<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpk07zsv2a.php:55\nStack\
    \ trace:\n#0 /tmp/tmpk07zsv2a.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpk07zsv2a.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$temp = $lst;\n\t\
    sort($temp);\n\tif ($temp === $lst) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb8ecgha.php:37\n\
    Stack trace:\n#0 /tmp/tmpwb8ecgha.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwb8ecgha.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n   for($i = 0; $i\
    \ < count($lst) - 1; $i++){\n       if($lst[$i] > $lst[$i + 1]){\n           return\
    \ false;\n       }\n   }\n   return true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4crj3p6.php:37\n\
    Stack trace:\n#0 /tmp/tmpr4crj3p6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpr4crj3p6.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $isSorted = true;\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if (isset($lst[$i + 1])) {\n  \
    \    if ($lst[$i] >= $lst[$i + 1]) {\n        $isSorted = false;\n      }\n  \
    \  }\n  }\n  return $isSorted;\n}\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6,\
    \ 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp71xlq73s.php:50\nStack trace:\n#0 /tmp/tmp71xlq73s.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp71xlq73s.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tforeach ($lst as\
    \ $i => $n) {\n\t\tif (isset($lst[$i + 1])) {\n\t\t\tif ($n > $lst[$i + 1]) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ioxmlof.php:38\n\
    Stack trace:\n#0 /tmp/tmp5ioxmlof.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5ioxmlof.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] !== $lst[$i + 1] && $lst[$i] >\
    \ $lst[$i + 1]) return false;\n\t}\n\treturn true;\n}\necho is_sorted([5]);\n\
    echo is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgiy7cf48.php:42\n\
    Stack trace:\n#0 /tmp/tmpgiy7cf48.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgiy7cf48.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$a=array_unique($lst);\n\
    \tif($a==$lst)\n\t{\n\t\treturn True;\n\t}\n\telse\n\t{\n\t\treturn False;\n\t\
    }\n}\necho is_sorted([5]).\"<br>\";\necho is_sorted([1, 2, 3, 4, 5]).\"<br>\"\
    ;\necho is_sorted([1, 3, 2, 4, 5]).\"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]).\"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]).\"<br>\";\necho is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]).\"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]).\"<br>\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]).\"<br>\";\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br>1<br>1<br>1<br>1<br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoizgfupv.php:40\nStack trace:\n#0 /tmp/tmpoizgfupv.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoizgfupv.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(count($lst)\
    \ === 1){\n        return true;\n    }\n    $sorted = true;\n    $prev = null;\n\
    \    foreach($lst as $item){\n        if($prev === null){\n            $prev =\
    \ $item;\n            continue;\n        }\n        if($prev > $item){\n     \
    \       $sorted = false;\n            break;\n        }else if($prev === $item){\n\
    \            $sorted = false;\n            break;\n        }\n        $prev =\
    \ $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslb1j5tl.php:53\n\
    Stack trace:\n#0 /tmp/tmpslb1j5tl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpslb1j5tl.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if(count($lst)\
    \ === 1) return true;\n    $max = 0;\n    $maxCount = 0;\n    foreach($lst as\
    \ $val) {\n        if($val > $max) {\n            $max = $val;\n            $maxCount\
    \ = 1;\n        } else if($val === $max) {\n            $maxCount++;\n       \
    \ }\n    }\n    return $maxCount === count($lst);\n}\necho is_sorted([5]) . \"\
    \\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4,\
    \ 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpes4zh4p5.php:42\n\
    Stack trace:\n#0 /tmp/tmpes4zh4p5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpes4zh4p5.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$nums = array_unique($lst);\n\
    \tsort($nums);\n\treturn $nums == $lst;\n}\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_s9uf9j.php:35\n\
    Stack trace:\n#0 /tmp/tmpa_s9uf9j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa_s9uf9j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $num = count($lst);\n\
    \    $dup = [];\n    for ($i = 0; $i < $num; $i++) {\n        for ($j = $i + 1;\
    \ $j < $num; $j++) {\n            if ($lst[$i] == $lst[$j]) {\n              \
    \  array_push($dup, $lst[$i]);\n            }\n        }\n    }\n    if (count($dup)\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho\
    \ \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho\
    \ \"<br>\";\necho \"<br>\";\necho \"<br>\";\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br>1<br>1<br>1<br>1<br><br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk5vkdpsm.php:56\nStack trace:\n#0 /tmp/tmpk5vkdpsm.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk5vkdpsm.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsldldyr.php:36\n\
    Stack trace:\n#0 /tmp/tmplsldldyr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplsldldyr.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $dup = [];\n  $len\
    \ = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if ($i > 0 && $lst[$i\
    \ - 1] > $lst[$i]) {\n      return false;\n    }\n    if (in_array($lst[$i], $dup))\
    \ {\n      return false;\n    }\n    array_push($dup, $lst[$i]);\n  }\n  return\
    \ true;\n}\n\necho is_sorted([1, 2, 3, 4, 5]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxm60srh_.php:46\n\
    Stack trace:\n#0 /tmp/tmpxm60srh_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxm60srh_.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t//return max($lst)==$lst[0]?max($lst)==min($lst):false;\n\
    \t//return $lst==array_unique($lst)?max($lst)==$lst[0]:false;\n\treturn max($lst)==$lst[0]\
    \ ? max($lst)==min($lst) : false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oreoyjc.php:26\n\
    Stack trace:\n#0 /tmp/tmp0oreoyjc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0oreoyjc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpreolx4va.php:40\n\
    Stack trace:\n#0 /tmp/tmpreolx4va.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpreolx4va.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif (count($lst)\
    \ === 1) {\n\t\treturn true;\n\t}\n\tfor ($i = 0; $i < count($lst) - 1; $i++)\
    \ {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1, 2, 3, 4,\
    \ 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"<br>\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplpch_eqb.php:50\nStack trace:\n#0 /tmp/tmplpch_eqb.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplpch_eqb.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $count = count($lst);\n\
    \  $lastNo = $lst[0];\n  $lastNoCount = 1;\n  for ($i = 1; $i < $count; $i++)\
    \ {\n    if ($lst[$i] > $lastNo) {\n      $lastNo = $lst[$i];\n      $lastNoCount\
    \ = 1;\n    } else if ($lst[$i] === $lastNo) {\n      $lastNoCount++;\n      if\
    \ ($lastNoCount > 1) {\n        return false;\n      }\n    } else {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkowuvhb.php:50\n\
    Stack trace:\n#0 /tmp/tmpbkowuvhb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbkowuvhb.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $result = true;\n\
    \  $i = 0;\n  while($i < count($lst) - 1){\n    if ($lst[$i] >= $lst[$i + 1]){\n\
    \      $result = false;\n      break;\n    }\n    $i += 1;\n  }\n  return $result;\n\
    }\n\n$n = [1, 2, 3, 4, 5];\n$n1 = [1, 3, 2, 4, 5];\n$n2 = [1, 2, 2, 3, 3, 4];\n\
    $n3 = [1, 2, 2, 2, 3, 4];\n$n4 = [2, 3, 4, 5, 6, 7, 7, 8, 9, 10];\n$n5 = [2, 3,\
    \ 4, 5, 6, 7, 7, 8, 8, 9, 10];\n\necho is_sorted($n) . PHP_EOL;\necho is_sorted($n1)\
    \ . PHP_EOL;\necho is_sorted($n2) . PHP_EOL;\necho is_sorted($n3) . PHP_EOL;\n\
    echo is_sorted($n4) . PHP_EOL;\necho is_sorted($n5) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf70ab6p3.php:56\n\
    Stack trace:\n#0 /tmp/tmpf70ab6p3.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpf70ab6p3.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n   $sorted = array_unique($lst);\n\
    \   sort($sorted);\n    if ($lst == $sorted) {\n       return true;\n   } else\
    \ {\n       return false;\n   }\n   }\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rqobncn.php:39\n\
    Stack trace:\n#0 /tmp/tmp3rqobncn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3rqobncn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $result = array_unique($lst);\n\
    \    if (sizeof($result) === sizeof($lst)) {\n        for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n            if ($lst[$i] > $lst[$i + 1]) {\n                return\
    \ \"False\";\n            }\n        }\n        return \"True\";\n    } else {\n\
    \        return \"False\";\n    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "False\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6u943_g.php:33\n\
    Stack trace:\n#0 /tmp/tmp_6u943_g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_6u943_g.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif (isset($lst[$i+1])) {\n\t\t\tif ($lst[$i] > $lst[$i+1])\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqhqwz49.php:38\n\
    Stack trace:\n#0 /tmp/tmpcqhqwz49.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcqhqwz49.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$array_count = count($lst);\n\
    \tif ($array_count==1) {\n\t\treturn true;\n\t}else{\n\t\t$min = min($lst);\n\t\
    \t$max = max($lst);\n\t\t$count_min = 0;\n\t\t$count_max = 0;\n\t\tfor ($i=0;\
    \ $i < $array_count; $i++) { \n\t\t\tif ($lst[$i]==$min) {\n\t\t\t\t$count_min++;\n\
    \t\t\t}\n\t\t\tif ($lst[$i]==$max) {\n\t\t\t\t$count_max++;\n\t\t\t}\n\t\t}\n\t\
    \tif ($count_min==1 && $count_max==1) {\n\t\t\treturn true;\n\t\t}else{\n\t\t\t\
    return false;\n\t\t}\n\t}\n}\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br>1<br>1<br>1<br>1<br>1<br>1\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpn8m3ub4w.php:60\nStack trace:\n#0 /tmp/tmpn8m3ub4w.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn8m3ub4w.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n    if ($lst[$i] >= $lst[$i + 1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cuqub2b.php:38\n\
    Stack trace:\n#0 /tmp/tmp3cuqub2b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3cuqub2b.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n$is_sorted=false;\n\
    \    if(count($lst)==1)\n    {\n        $is_sorted=true;\n    }\n    elseif(count($lst)>1)\n\
    \    {\n        $is_sorted=true;\n        $temp=0;\n        foreach($lst as $lst_val)\n\
    \        {\n            if($temp!=0)\n            {\n                if($temp>$lst_val)\n\
    \                {\n                    $is_sorted=false;\n                  \
    \  break;\n                }\n            }\n            $temp=$lst_val;\n   \
    \     }\n    }\n    return $is_sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo '<br>';\necho is_sorted([1, 3, 2, 4, 5]);\necho '<br>';\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho '<br>';\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br><br>1<br>1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopm83yn1.php:57\n\
    Stack trace:\n#0 /tmp/tmpopm83yn1.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpopm83yn1.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i > 0) {\n\t\t\tif ($lst[$i]\
    \ <= $lst[$i - 1]) {\n\t\t\t\t$sorted = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]).\"\\n\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]).\"\\n\";\necho is_sorted([5]).\"\\n\";\necho is_sorted([1, 2,\
    \ 3, 4, 5]).\"\\n\";\necho is_sorted([1, 3, 2, 4, 5]).\"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]).\"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]).\"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]).\"\\n\";\necho is_sorted([7, 6, 5, 4, 3, 2,\
    \ 1]).\"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp3a6zbz_t.php:50\nStack trace:\n#0 /tmp/tmp3a6zbz_t.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3a6zbz_t.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$i = 0;\n\tif($count > 1){\n\t\tfor($i = 0; $i < $count; $i++){\n\t\t\tif($lst[$i]\
    \ < $lst[$i + 1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpij9czcqg.php:40\n\
    Stack trace:\n#0 /tmp/tmpij9czcqg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpij9czcqg.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytiplgxl.php:21\n\
    Stack trace:\n#0 /tmp/tmpytiplgxl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpytiplgxl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $result = true;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst);\
    \ $j++) {\n            if ($lst[$i] <= $lst[$j]) {\n                $result =\
    \ true;\n            } else {\n                $result = false;\n            \
    \    break;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_1sufq2.php:35\n\
    Stack trace:\n#0 /tmp/tmp3_1sufq2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3_1sufq2.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$duplicates = [];\n\
    \tforeach ($lst as $k => $v) {\n\t\tif (in_array($v, $duplicates)) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$duplicates[] = $v;\n\t}\n\t$asc = $lst;\n\tsort($asc);\n\
    \tif ($lst == $asc) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u9u8jdg.php:47\n\
    Stack trace:\n#0 /tmp/tmp2u9u8jdg.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2u9u8jdg.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif(count($lst) <=\
    \ 1) {\n\t\treturn true;\n\t}\n\t$i = 0;\n\tforeach($lst as $item) {\n\t\tif($item\
    \ <= $lst[$i]) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn true;\n\
    }\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z6eofgm.php:41\n\
    Stack trace:\n#0 /tmp/tmp_z6eofgm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_z6eofgm.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $len = count($lst);\n\
    \    $pre = 0;\n    $count = 0;\n    for ($i = 0; $i < $len; $i++) {\n       \
    \ if ($i === 0) {\n            $pre = $lst[$i];\n            continue;\n     \
    \   }\n        if ($lst[$i] < $pre) {\n            return false;\n        }\n\
    \        if ($lst[$i] === $pre) {\n            $count++;\n        }\n        $pre\
    \ = $lst[$i];\n    }\n    if ($count === $len - 1) {\n        return false;\n\
    \    }\n    return true;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n1\n\n1\n1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpc0eha095.php:49\nStack trace:\n#0 /tmp/tmpc0eha095.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc0eha095.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $duplicate = false;\n\
    \    if (count($lst) <= 1) {\n        return true;\n    }\n    for ($i = 0; $i\
    \ < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n        if ($lst[$i] == $lst[$i + 1]) {\n    \
    \        $duplicate = true;\n        }\n    }\n    return $duplicate ? false :\
    \ true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpik8hf5v1.php:45\n\
    Stack trace:\n#0 /tmp/tmpik8hf5v1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpik8hf5v1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $flag = true;\n\
    \  foreach ($lst as $key => $value) {\n    if ($key < count($lst) - 1) {\n   \
    \   if ($value > $lst[$key + 1]) {\n        $flag = false;\n      }\n    }\n \
    \ }\n  return $flag;\n}\n\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwuea0wr.php:41\n\
    Stack trace:\n#0 /tmp/tmprwuea0wr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprwuea0wr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif(count($lst) >\
    \ 1){\n\t\t$flag = true;\n\t\t$prev = null;\n\t\tforeach($lst as $k => $v){\n\t\
    \t\tif($prev === null){\n\t\t\t\t$prev = $v;\n\t\t\t}else{\n\t\t\t\tif($prev ==\
    \ $v){\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($prev\
    \ > $v){\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$prev\
    \ = $v;\n\t\t\t}\n\t\t}\n\t\treturn $flag;\n\t}else{\n\t\treturn true;\n\t}\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgeiwtyt.php:56\n\
    Stack trace:\n#0 /tmp/tmpcgeiwtyt.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpcgeiwtyt.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$lst2 = $lst;\n\tsort($lst2);\n\tif($lst == $lst2){\n\t\treturn true;\n\t}else{\n\
    \t\tfor($i = 0; $i < $count; $i++){\n\t\t\tif($lst[$i] != $lst2[$i]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3f_5yob.php:42\n\
    Stack trace:\n#0 /tmp/tmp_3f_5yob.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_3f_5yob.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $a = count($lst);\n\
    \    $b = count(array_unique($lst));\n    $c = array_diff_assoc($lst, array_unique($lst));\n\
    \    if($a==$b){\n        $d = array_count_values($lst);\n        foreach($d as\
    \ $k => $v){\n            if($v > 1){\n                return false;\n       \
    \     }\n        }\n        $f = array_merge($lst);\n        sort($f);\n     \
    \   for($i=0;$i<count($lst);$i++){\n            if($lst[$i] != $f[$i]){\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }else{\n        return false;\n    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu34anjq.php:54\n\
    Stack trace:\n#0 /tmp/tmpzu34anjq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpzu34anjq.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    // Your code here\n\
    \    $ascending = true;\n    $descending = true;\n    $count = count($lst);\n\
    \    $output = false;\n    if ($count == 1) {\n        $output = true;\n    }\n\
    \    else {\n        for ($i = 0; $i < $count - 1; $i++) {\n            if ($lst[$i]\
    \ > $lst[$i + 1]) {\n                $ascending = false;\n            }\n    \
    \        if ($lst[$i] < $lst[$i + 1]) {\n                $descending = false;\n\
    \            }\n        }\n        if ($ascending || $descending) {\n        \
    \    $output = true;\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr40451x.php:51\n\
    Stack trace:\n#0 /tmp/tmpwr40451x.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwr40451x.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    sort($lst);\n    if ($lst === $lst) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n\n}\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_8xqjby.php:31\n\
    Stack trace:\n#0 /tmp/tmpo_8xqjby.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo_8xqjby.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t// let's sort the\
    \ array\n\t$sorted = $lst;\n\tsort($sorted);\n\t\n\t// loop through the array\
    \ and check if both are equal\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t\
    if ($lst[$i] !== $sorted[$i]) return false;\n\t}\n\t\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped6m8b4d.php:41\n\
    Stack trace:\n#0 /tmp/tmped6m8b4d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmped6m8b4d.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  for ($i = 0; $i < $len - 1; $i++) {\n    if ($lst[$i] > $lst[$i + 1]) {\n \
    \     return false;\n    }\n  }\n  return true;\n}\n\necho \"1 \" . (is_sorted([5])\
    \ ? \"True\" : \"False\") . \"\\n\";\necho \"2 \" . (is_sorted([1, 2, 3, 4, 5])\
    \ ? \"True\" : \"False\") . \"\\n\";\necho \"3 \" . (is_sorted([1, 3, 2, 4, 5])\
    \ ? \"True\" : \"False\") . \"\\n\";\necho \"4 \" . (is_sorted([1, 2, 3, 4, 5,\
    \ 6]) ? \"True\" : \"False\") . \"\\n\";\necho \"5 \" . (is_sorted([1, 2, 3, 4,\
    \ 5, 6, 7]) ? \"True\" : \"False\") . \"\\n\";\necho \"6 \" . (is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) ? \"True\" : \"False\") . \"\\n\";\necho \"7 \" . (is_sorted([1,\
    \ 2, 2, 3, 3, 4]) ? \"True\" : \"False\") . \"\\n\";\necho \"8 \" . (is_sorted([1,\
    \ 2, 2, 2, 3, 4]) ? \"True\" : \"False\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 True\n2 True\n3 False\n4 True\n5 True\n6 False\n7 True\n8 True\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpp_mzs691.php:47\nStack trace:\n\
    #0 /tmp/tmpp_mzs691.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp_mzs691.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = 0;\n  foreach($lst\
    \ as $key => $value){\n\t\tif($key === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif($value\
    \ < $lst[$key - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\tif($value === $lst[$key\
    \ - 1]) {\n\t\t\t$count++;\n\t\t}\n\t}\n\tif($count > 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\necho \"<h1>Is Sorted?</h1>\";\necho is_sorted([5]) . \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2,\
    \ 4, 5]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\"\
    ;\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . \"<br>\";\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h1>Is Sorted?</h1>1<br>1<br><br>1<br>1<br><br><br><br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplj1d1gb9.php:58\nStack trace:\n#0 /tmp/tmplj1d1gb9.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplj1d1gb9.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$isSorted = true;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i === 0) {\n\t\t\t$prev = $lst[$i];\n\
    \t\t} else {\n\t\t\tif ($lst[$i] < $prev) {\n\t\t\t\t$isSorted = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\t$prev = $lst[$i];\n\t\t}\n\t}\n\treturn $isSorted;\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_r_ogmtx.php:43\n\
    Stack trace:\n#0 /tmp/tmp_r_ogmtx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_r_ogmtx.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tif(max($lst) - min($lst)\
    \ == count($lst) - 1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0rv3ejb.php:28\n\
    Stack trace:\n#0 /tmp/tmpk0rv3ejb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk0rv3ejb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  if(count($lst) >\
    \ 1){\n    for($i = 0; $i < count($lst) - 1; $i++){\n      if($lst[$i] > $lst[$i\
    \ + 1]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjukjlrh.php:38\n\
    Stack trace:\n#0 /tmp/tmpbjukjlrh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbjukjlrh.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \t$ans = [];\n\tforeach ($arr as $value) {\n\t\t$ans[] = $value;\n\t}\n\tif ($ans[0]\
    \ > 1) {\n\t\treturn false;\n\t} else {\n\t\t$flag = 1;\n\t\tfor ($i = 0; $i <\
    \ count($lst) - 1; $i++) {\n\t\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\t\t$flag\
    \ = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag == 1) {\n\t\t\treturn true;\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\necho is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6ef2es8.php:52\n\
    Stack trace:\n#0 /tmp/tmpr6ef2es8.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpr6ef2es8.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\treturn $lst ===\
    \ array_unique($lst) && $lst === array_slice($lst, 0, count($lst) - 1) ? true\
    \ : false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwc05k9e0.php:23\n\
    Stack trace:\n#0 /tmp/tmpwc05k9e0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwc05k9e0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $new_lst = array_unique($lst);\n\
    \  $compare = sort($new_lst);\n  $compare = implode($compare);\n  $implode = implode($lst);\n\
    \  if($compare == $implode){\n    return \"True\";\n  }else{\n    return \"False\"\
    ;\n  }\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\nFalse\nWarning: implode(): Argument must be an array in /tmp/tmpp352o6q8.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp352o6q8.php:38\n\
    Stack trace:\n#0 /tmp/tmpp352o6q8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp352o6q8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\tforeach($lst as\
    \ $num){\n\t\t$index = array_search($num, $lst);\n\t\t$index = $index+1;\n\t\t\
    if($index == count($lst)){\n\t\t\tcontinue;\n\t\t}\n\t\tif($lst[$index] == $num){\n\
    \t\t\treturn false;\n\t\t}\n\t\tif($lst[$index] < $num){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprymheldb.php:46\n\
    Stack trace:\n#0 /tmp/tmprymheldb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprymheldb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
