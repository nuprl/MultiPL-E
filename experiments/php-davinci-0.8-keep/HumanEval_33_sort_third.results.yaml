name: HumanEval_33_sort_third
language: php
results:
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new_l = [];\n    $l_len = count($l);\n\
    \    $sorted_l = [];\n    for ($i = 0; $i < $l_len; $i++) {\n        if ($i %\
    \ 3 == 0) {\n            array_push($sorted_l, $l[$i]);\n        }\n    }\n  \
    \  sort($sorted_l);\n    $sorted_l_len = count($sorted_l);\n    $j = 0;\n    for\
    \ ($i = 0; $i < $l_len; $i++) {\n        if ($i % 3 == 0) {\n            array_push($new_l,\
    \ $sorted_l[$j]);\n            $j += 1;\n        } else {\n            array_push($new_l,\
    \ $l[$i]);\n        }\n    }\n    return $new_l;\n}\n\necho implode(', ', sort_third([1,\
    \ 2, 3]));\necho \"\\n\";\necho implode(', ', sort_third([5, 6, 3, 4, 8, 9, 2]));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3\n2, 6, 3, 4, 8, 9, 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t//TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf910d4dr.php:18\n\
    Stack trace:\n#0 /tmp/tmpf910d4dr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf910d4dr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $ret = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        $ret[$i] = $l[$i];\n    }\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $sublist =\
    \ array();\n            for ($j = $i; $j < $i + 3; $j++) {\n                $sublist[$j\
    \ - $i] = $l[$j];\n            }\n            sort($sublist);\n            for\
    \ ($j = $i; $j < $i + 3; $j++) {\n                $ret[$j] = $sublist[$j - $i];\n\
    \            }\n        }\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xhoq5qz.php:34\n\
    Stack trace:\n#0 /tmp/tmp8xhoq5qz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8xhoq5qz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 2; $i < count($l); $i\
    \ += 3) {\n        $sub = array_slice($l, $i - 2, 3);\n        sort($sub);\n \
    \       array_splice($l, $i - 2, 3, $sub);\n    }\n    return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm1ic22.php:22\n\
    Stack trace:\n#0 /tmp/tmphbm1ic22.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphbm1ic22.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $len = count($l);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($i % 3 == 0) {\n      sort($l, SORT_NUMERIC, $i,\
    \ 3);\n    }\n  }\n  return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmpu3dj22hr.php\
    \ on line 13\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmpu3dj22hr.php\
    \ on line 13\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmpu3dj22hr.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3dj22hr.php:24\n\
    Stack trace:\n#0 /tmp/tmpu3dj22hr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu3dj22hr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tif (sizeof($l) == 0) {\n\t\treturn\
    \ $l;\n\t}\n\t$i = 0;\n\t$third_indicies = [];\n\t$l_modified = [];\n\tforeach\
    \ ($l as $x) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$third_indicies[] = $i;\n\t\t}\n\
    \t\t$l_modified[] = $x;\n\t\t$i += 1;\n\t}\n\tforeach ($third_indicies as $i)\
    \ {\n\t\t$sub_l = array_slice($l_modified, $i, 3);\n\t\tsort($sub_l);\n\t\t$l_modified\
    \ = array_replace($l_modified, array_combine(range($i, $i + 2), $sub_l));\n\t\
    }\n\treturn $l_modified;\n}\n\necho \"<pre>\";\necho \"Test 1: \";\necho var_dump(sort_third([1,\
    \ 2, 3]));\necho \"Test 2: \";\necho var_dump(sort_third([5, 6, 3, 4, 8, 9, 2]));\n\
    echo \"Test 3: \";\necho var_dump(sort_third([7, 6, 5, 4, 3, 2, 1]));\necho \"\
    Test 4: \";\necho var_dump(sort_third([1, 2, 3, 4, 5, 6, 7]));\necho \"Test 5:\
    \ \";\necho var_dump(sort_third([]));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Test 1: array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n\
    \  int(3)\n}\nTest 2: \nWarning: array_combine(): Both parameters should have\
    \ an equal number of elements in /tmp/tmph3hjt32s.php on line 26\n\nWarning: array_replace():\
    \ Expected parameter 2 to be an array, bool given in /tmp/tmph3hjt32s.php on line\
    \ 26\nNULL\nTest 3: \nWarning: array_combine(): Both parameters should have an\
    \ equal number of elements in /tmp/tmph3hjt32s.php on line 26\n\nWarning: array_replace():\
    \ Expected parameter 2 to be an array, bool given in /tmp/tmph3hjt32s.php on line\
    \ 26\nNULL\nTest 4: \nWarning: array_combine(): Both parameters should have an\
    \ equal number of elements in /tmp/tmph3hjt32s.php on line 26\n\nWarning: array_replace():\
    \ Expected parameter 2 to be an array, bool given in /tmp/tmph3hjt32s.php on line\
    \ 26\nNULL\nTest 5: array(0) {\n}\n</pre>\nWarning: array_combine(): Both parameters\
    \ should have an equal number of elements in /tmp/tmph3hjt32s.php on line 26\n\
    \nWarning: array_replace(): Expected parameter 2 to be an array, bool given in\
    \ /tmp/tmph3hjt32s.php on line 26\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph3hjt32s.php:48\nStack trace:\n#0 /tmp/tmph3hjt32s.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmph3hjt32s.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new_list = array();\n    for ($i\
    \ = 0; $i < count($l); $i += 3) {\n        $sub_list = array_slice($l, $i, 3);\n\
    \        sort($sub_list);\n        $new_list = array_merge($new_list, $sub_list);\n\
    \    }\n    return $new_list;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4b2mzj6.php:23\n\
    Stack trace:\n#0 /tmp/tmpa4b2mzj6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa4b2mzj6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 === 0) {\n            $temp = $l[$i];\n\
    \            $l_prime[] = $temp;\n            sort($l_prime);\n        } else\
    \ {\n            $l_prime[] = $l[$i];\n        }\n    }\n    return $l_prime;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjrzrbwy.php:28\n\
    Stack trace:\n#0 /tmp/tmpxjrzrbwy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxjrzrbwy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // your code here\n    return [];\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nfla6w0.php:19\n\
    Stack trace:\n#0 /tmp/tmp4nfla6w0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4nfla6w0.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $newL = [];\n  $tempL = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    if ($i % 3 === 0) {\n      array_push($tempL,\
    \ $l[$i]);\n    } else {\n      array_push($newL, $l[$i]);\n    }\n  }\n  sort($tempL);\n\
    \  for ($i = 0; $i < count($tempL); $i++) {\n    array_splice($newL, $i * 3, 0,\
    \ $tempL[$i]);\n  }\n  return $newL;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ($i % 3 === 0) {\n\t\t\t$l[$i] = quick_sort($l[$i]);\n\t\t}\n\t}\n\
    \treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quick_sort()\
    \ in /tmp/tmp1f8ad4_x.php:12\nStack trace:\n#0 /tmp/tmp1f8ad4_x.php(19): sort_third(Array)\n\
    #1 /tmp/tmp1f8ad4_x.php(23): candidate(Array)\n#2 /tmp/tmp1f8ad4_x.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1f8ad4_x.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// Write your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsj5p34x.php:18\n\
    Stack trace:\n#0 /tmp/tmprsj5p34x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprsj5p34x.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    return sort_internal($l, true);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_internal()\
    \ in /tmp/tmpfjc9rmus.php:10\nStack trace:\n#0 /tmp/tmpfjc9rmus.php(14): sort_third(Array)\n\
    #1 /tmp/tmpfjc9rmus.php(18): candidate(Array)\n#2 /tmp/tmpfjc9rmus.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfjc9rmus.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l2 = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$three = array();\n\t\t\t\
    $start = $i;\n\t\t\twhile ($i < count($l) && $i < $start + 3) {\n\t\t\t\tarray_push($three,\
    \ $l[$i]);\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tsort($three);\n\t\t\tfor ($j = 0; $j\
    \ < count($three); $j++) {\n\t\t\t\tarray_push($l2, $three[$j]);\n\t\t\t}\n\t\t\
    } else {\n\t\t\tarray_push($l2, $l[$i]);\n\t\t}\n\t}\n\treturn $l2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y883bos.php:35\n\
    Stack trace:\n#0 /tmp/tmp0y883bos.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0y883bos.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = [];\n    $index = 0;\n\
    \    foreach ($l as $value) {\n        if ($index % 3 == 0) {\n            sort($value);\n\
    \        }\n        $result[] = $value;\n        $index += 1;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpcsy0suf2.php\
    \ on line 14\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpcsy0suf2.php on line 14\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpcsy0suf2.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcsy0suf2.php:27\nStack trace:\n#0 /tmp/tmpcsy0suf2.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcsy0suf2.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new = [];\n    $j = 0;\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        if (($i + 1) % 3 == 0) {\n       \
    \     $a = array_slice($l, $j, 3);\n            sort($a);\n            foreach\
    \ ($a as $b) {\n                array_push($new, $b);\n            }\n       \
    \     $j = $i + 1;\n        } else {\n            array_push($new, $l[$i]);\n\
    \        }\n    }\n    return $new;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xkubp8e.php:32\n\
    Stack trace:\n#0 /tmp/tmp2xkubp8e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2xkubp8e.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    for ($i\
    \ = 0; $i < count($l); $i++) {\n        $l_prime[$i] = $l[$i];\n    }\n    sort($l_prime);\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $l[$i] = $l_prime[$i];\n        }\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz6x71d3.php:27\n\
    Stack trace:\n#0 /tmp/tmphz6x71d3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphz6x71d3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  // Your code here!\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zbk7ysx.php:17\n\
    Stack trace:\n#0 /tmp/tmp7zbk7ysx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7zbk7ysx.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$res = [];\n\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$res[] = sort_third_helper($l[$i]);\n\
    \t\t} else {\n\t\t\t$res[] = $l[$i];\n\t\t}\n\t}\n\treturn $res;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmpwgewweih.php:13\nStack trace:\n#0 /tmp/tmpwgewweih.php(21): sort_third(Array)\n\
    #1 /tmp/tmpwgewweih.php(25): candidate(Array)\n#2 /tmp/tmpwgewweih.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwgewweih.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new_l = array();\n    for ($i =\
    \ 0; $i < count($l); $i++) {\n        if ($i % 3 != 0) {\n            $new_l[$i]\
    \ = $l[$i];\n        } else {\n            $new_l[$i] = $l[$i];\n            sort($new_l[$i]);\n\
    \        }\n    }\n    return $new_l;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpctebazb1.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpctebazb1.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpctebazb1.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpctebazb1.php:27\nStack trace:\n#0 /tmp/tmpctebazb1.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpctebazb1.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif (($i + 1) % 3 == 0) {\n\t\t\t$l_new[$i] = sort($l[$i]);\n\t\t} else\
    \ {\n\t\t\t$l_new[$i] = $l[$i];\n\t\t}\n\t}\n\treturn $l_new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmprbzfttly.php\
    \ on line 12\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmprbzfttly.php on line 12\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprbzfttly.php:25\nStack trace:\n#0 /tmp/tmprbzfttly.php(31): test()\n\
    #1 {main}\n  thrown in /tmp/tmprbzfttly.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$odds = [1, 4, 7];\n\t$l = array_replace($l,\
    \ array_filter($l, function($key) use ($odds) {\n\t\treturn array_search($key,\
    \ $odds) !== false;\n\t}, ARRAY_FILTER_USE_KEY));\n\tasort($l);\n\treturn $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5epv3bx3.php:23\n\
    Stack trace:\n#0 /tmp/tmp5epv3bx3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5epv3bx3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // TODO: Fill in the code here\n\
    \    return;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2l9_ufyd.php:18\n\
    Stack trace:\n#0 /tmp/tmp2l9_ufyd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2l9_ufyd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l2 = [];\n    $l_third = [];\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if (($i + 1) % 3 === 0) {\n\
    \            $l_third[] = $l[$i];\n        } else {\n            $l2[] = $l[$i];\n\
    \        }\n    }\n    sort($l_third);\n    $result = array_merge($l2, $l_third);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tpadz28.php:29\n\
    Stack trace:\n#0 /tmp/tmp_tpadz28.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_tpadz28.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new_l = [];\n    for ($i = 0; $i\
    \ < count($l); $i++) {\n        if ($i % 3 === 0) {\n            $a = [];\n  \
    \          for ($j = $i; $j < $i + 3; $j++) {\n                $a[] = $l[$j];\n\
    \            }\n            sort($a);\n            for ($j = $i; $j < $i + 3;\
    \ $j++) {\n                $new_l[] = $a[$j - $i];\n            }\n        } else\
    \ {\n            $new_l[] = $l[$i];\n        }\n    }\n    return $new_l;\n}\n\
    \nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25xxdo2p.php:33\n\
    Stack trace:\n#0 /tmp/tmp25xxdo2p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp25xxdo2p.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $ret = [];\n    for ($i = 0; $i\
    \ < count($l); $i++) {\n        if ($i % 3 === 0) {\n            $subset = array_slice($l,\
    \ $i, 3);\n            sort($subset);\n            $ret[] = $subset[0];\n    \
    \        $ret[] = $subset[1];\n            $ret[] = $subset[2];\n        } else\
    \ {\n            $ret[] = $l[$i];\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43m57yjl.php:30\n\
    Stack trace:\n#0 /tmp/tmp43m57yjl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp43m57yjl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  return array_map(\n    function($item)\
    \ {\n      if ($item % 3 == 0) {\n        sort($item);\n      }\n      return\
    \ $item;\n    },\n    $l\n  );\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp6ubjqyf3.php\
    \ on line 13\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp6ubjqyf3.php on line 13\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp6ubjqyf3.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6ubjqyf3.php:26\nStack trace:\n#0 /tmp/tmp6ubjqyf3.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6ubjqyf3.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $lout = array();\n    $count = 0;\n\
    \    foreach ($l as $val) {\n        if ($count % 3 == 0) {\n            $sortl\
    \ = array();\n            $sortl[] = $val;\n        } else {\n            $sortl[]\
    \ = $val;\n            if ($count % 3 == 2) {\n                sort($sortl);\n\
    \                $lout[] = $sortl[0];\n                $lout[] = $sortl[1];\n\
    \                $lout[] = $sortl[2];\n            }\n        }\n        $count++;\n\
    \    }\n    return $lout;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuce341u.php:34\n\
    Stack trace:\n#0 /tmp/tmptuce341u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptuce341u.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$returnList = [];\n\t$count = 0;\n\
    \t$thirdList = [];\n\tforeach ($l as $value) {\n\t\tif ($count % 3 == 0) {\n\t\
    \t\tarray_push($thirdList, $value);\n\t\t} else {\n\t\t\tarray_push($returnList,\
    \ $value);\n\t\t}\n\t\t$count++;\n\t}\n\tsort($thirdList);\n\t$count = 0;\n\t\
    foreach ($l as $key => $value) {\n\t\tif ($count % 3 == 0) {\n\t\t\t$returnList[$key]\
    \ = $thirdList[(int)($count / 3)];\n\t\t}\n\t\t$count++;\n\t}\n\treturn $returnList;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9qflxur.php:37\n\
    Stack trace:\n#0 /tmp/tmpu9qflxur.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu9qflxur.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  \n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xwhozp6.php:18\n\
    Stack trace:\n#0 /tmp/tmp0xwhozp6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0xwhozp6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // TODO: Implement this function.\n\
    \    $res = [];\n    $tmp = [];\n    for ($i = 0; $i < count($l); $i++) {\n  \
    \      if (($i+1) % 3 == 0) {\n            $tmp[] = $l[$i];\n        } else {\n\
    \            $res[] = $l[$i];\n        }\n    }\n    sort($tmp);\n    $res[] =\
    \ array_shift($tmp);\n    $res[] = array_shift($tmp);\n    $res[] = array_shift($tmp);\n\
    \    return $res;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m8dfvw6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1m8dfvw6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1m8dfvw6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$result[$i] = sort(array($l[$i],\
    \ $l[$i + 1], $l[$i + 2]));\n\t\t} else {\n\t\t\t$result[$i] = $l[$i];\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmpbn28bskd.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$sorted = sort($l);\n\tfor ($i = 0;\
    \ $i < sizeof($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\techo $sorted[$i];\n\t\
    \t} else {\n\t\t\techo $l[$i];\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3468\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zsei4qy.php:25\n\
    Stack trace:\n#0 /tmp/tmp1zsei4qy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1zsei4qy.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\n}\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjpapaqt.php:17\n\
    Stack trace:\n#0 /tmp/tmprjpapaqt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprjpapaqt.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // your code here\n    $length =\
    \ count($l);\n    for ($i = 0; $i < $length; $i += 3) {\n        sort_third_recursive_sort($l,\
    \ $i, 3);\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_recursive_sort()\
    \ in /tmp/tmpog0r_ca8.php:13\nStack trace:\n#0 /tmp/tmpog0r_ca8.php(19): sort_third(Array)\n\
    #1 /tmp/tmpog0r_ca8.php(23): candidate(Array)\n#2 /tmp/tmpog0r_ca8.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpog0r_ca8.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l1 = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$l2 = array();\n\t\t\tfor\
    \ ($j = $i; $j < $i + 3; $j++) {\n\t\t\t\tarray_push($l2, $l[$j]);\n\t\t\t}\n\t\
    \t\tsort($l2);\n\t\t\tfor ($j = $i; $j < $i + 3; $j++) {\n\t\t\t\tarray_push($l1,\
    \ $l2[$j - $i]);\n\t\t\t}\n\t\t} else {\n\t\t\tarray_push($l1, $l[$i]);\n\t\t\
    }\n\t}\n\treturn $l1;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_n4hj8tu.php:33\n\
    Stack trace:\n#0 /tmp/tmp_n4hj8tu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_n4hj8tu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    for ($i\
    \ = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $subarray\
    \ = array();\n            for ($j = $i; $j < $i + 3; $j++) {\n               \
    \ array_push($subarray, $l[$j]);\n            }\n            sort($subarray);\n\
    \            for ($j = $i; $j < $i + 3; $j++) {\n                array_push($l_prime,\
    \ $subarray[$j - $i]);\n            }\n        } else {\n            array_push($l_prime,\
    \ $l[$i]);\n        }\n    }\n    return $l_prime;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc09yhcn.php:33\n\
    Stack trace:\n#0 /tmp/tmpyc09yhcn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyc09yhcn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$a = array();\n\tfor ($i = 0; $i <\
    \ count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$a[$i] = array_slice($l, $i,\
    \ 3);\n\t\t\tsort($a[$i]);\n\t\t} else {\n\t\t\t$a[$i] = $l[$i];\n\t\t}\n\t}\n\
    \treturn $a;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kvgep9v.php:27\n\
    Stack trace:\n#0 /tmp/tmp7kvgep9v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7kvgep9v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = array();\n    $j = 0;\n\
    \    $k = 0;\n    $three_indicies = array();\n    $non_three_indicies = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $three_indicies[$j] = $l[$i];\n            $j++;\n        } else {\n  \
    \          $non_three_indicies[$k] = $l[$i];\n            $k++;\n        }\n \
    \   }\n    sort($three_indicies);\n    $k = 0;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $result[$i] = $three_indicies[$k];\n\
    \            $k++;\n        } else {\n            $result[$i] = $non_three_indicies[$k];\n\
    \            $k++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh7o34vh.php:43\n\
    Stack trace:\n#0 /tmp/tmpqh7o34vh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqh7o34vh.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $ans = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $temp = array();\n\
    \            array_push($temp, $l[$i]);\n            array_push($temp, $l[$i +\
    \ 1]);\n            array_push($temp, $l[$i + 2]);\n            sort($temp);\n\
    \            array_push($ans, $temp[0]);\n            array_push($ans, $temp[1]);\n\
    \            array_push($ans, $temp[2]);\n        } else {\n            array_push($ans,\
    \ $l[$i]);\n        }\n    }\n    return $ans;\n}\n\necho implode(\", \", sort_third([1,\
    \ 2, 3])) . \"<br>\";\necho implode(\", \", sort_third([5, 6, 3, 4, 8, 9, 2]))\
    \ . \"<br>\";\necho implode(\", \", sort_third([13, 15, 17, 19, 21, 23, 25, 27,\
    \ 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65,\
    \ 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103,\
    \ 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135,\
    \ 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167,\
    \ 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199,\
    \ 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231,\
    \ 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263,\
    \ 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289,\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpspzwtf35.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  for ($i = 2; $i < count($l); $i +=\
    \ 3) {\n    $temp = $l[$i];\n    for ($j = $i - 1; $j >= 0; $j--) {\n      if\
    \ ($l[$j] > $temp) {\n        $l[$j + 1] = $l[$j];\n      } else {\n        break;\n\
    \      }\n    }\n    $l[$j + 1] = $temp;\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxpwki31.php:28\n\
    Stack trace:\n#0 /tmp/tmpvxpwki31.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvxpwki31.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjeb3sxnd.php:18\n\
    Stack trace:\n#0 /tmp/tmpjeb3sxnd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjeb3sxnd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $size = count($l);\n    $newList\
    \ = array();\n    for ($i = 0; $i < $size; $i++) {\n        if ($i % 3 == 0) {\n\
    \            $array = array();\n            for ($j = $i; $j < $i + 3; $j++) {\n\
    \                array_push($array, $l[$j]);\n            }\n            sort($array);\n\
    \            for ($j = $i; $j < $i + 3; $j++) {\n                array_push($newList,\
    \ $array[$j - $i]);\n            }\n        } else {\n            array_push($newList,\
    \ $l[$i]);\n        }\n    }\n    return $newList;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe9j1xba.php:34\n\
    Stack trace:\n#0 /tmp/tmpxe9j1xba.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxe9j1xba.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_out = [];\n\t$div_three = [];\n\
    \tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\tarray_push($div_three,\
    \ $l[$i]);\n\t\t} else {\n\t\t\tarray_push($l_out, $l[$i]);\n\t\t}\n\t}\n\tsort($div_three);\n\
    \tforeach ($div_three as $item) {\n\t\tarray_splice($l_out, 2, 0, $item);\n\t\
    }\n\treturn $l_out;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24wr71j0.php:31\n\
    Stack trace:\n#0 /tmp/tmp24wr71j0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp24wr71j0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $len = count($l);\n    for ($i =\
    \ 2; $i < $len; $i += 3) {\n        $sub = array_slice($l, $i, 3);\n        sort($sub);\n\
    \        $l = array_merge(array_slice($l, 0, $i), $sub, array_slice($l, $i + 3));\n\
    \    }\n    return $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpms6jpa_c.php:23\n\
    Stack trace:\n#0 /tmp/tmpms6jpa_c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpms6jpa_c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $lPrime = array();\n  for ($i = 0;\
    \ $i < count($l); $i++) {\n    if ($i % 3 == 0) {\n      $lSlice = array_slice($l,\
    \ $i, 3);\n      sort($lSlice);\n      array_push($lPrime, $lSlice[0]);\n    \
    \  array_push($lPrime, $lSlice[1]);\n      array_push($lPrime, $lSlice[2]);\n\
    \    } else {\n      array_push($lPrime, $l[$i]);\n    }\n  }\n  return $lPrime;\n\
    }\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4naiz73s.php:29\n\
    Stack trace:\n#0 /tmp/tmp4naiz73s.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4naiz73s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// Your code here!\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwacynfan.php:18\n\
    Stack trace:\n#0 /tmp/tmpwacynfan.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwacynfan.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_prime = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$l_prime[] = l_sort($l[$i]);\n\
    \t\t} else {\n\t\t\t$l_prime[] = $l[$i];\n\t\t}\n\t}\n\treturn $l_prime;\n}\n\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function l_sort() in /tmp/tmpd1z470xo.php:13\n\
    Stack trace:\n#0 /tmp/tmpd1z470xo.php(22): sort_third(Array)\n#1 /tmp/tmpd1z470xo.php(26):\
    \ candidate(Array)\n#2 /tmp/tmpd1z470xo.php(32): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpd1z470xo.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 != 0) {\n\t\t\t$result[$i] = $l[$i];\n\
    \t\t} else {\n\t\t\t$chunk = array_slice($l, $i, 3);\n\t\t\tsort($chunk);\n\t\t\
    \t$result[$i] = $chunk[0];\n\t\t\t$result[$i + 1] = $chunk[1];\n\t\t\t$result[$i\
    \ + 2] = $chunk[2];\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddstdb37.php:30\n\
    Stack trace:\n#0 /tmp/tmpddstdb37.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpddstdb37.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$odds = [];\n\t$evens = [];\n\tfor\
    \ ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\tarray_push($odds,\
    \ $l[$i]);\n\t\t} else {\n\t\t\tarray_push($evens, $l[$i]);\n\t\t}\n\t}\n\t//\
    \ print_r($odds);\n\t// print_r($evens);\n\tsort($odds);\n\t// print_r($odds);\n\
    \t// print_r($evens);\n\treturn array_merge($evens, $odds);\n}\n\n$odds = [5,\
    \ 6, 3, 4, 8, 9, 2];\nprint_r(sort_third($odds));\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 6\n    [1] => 3\n    [2] => 8\n    [3] => 9\n    [4]\
    \ => 2\n    [5] => 4\n    [6] => 5\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpx7vqzzk0.php:35\nStack trace:\n#0 /tmp/tmpx7vqzzk0.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx7vqzzk0.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tif (count($l) < 3) {\n\t\treturn $l;\n\
    \t}\n\t$head = $l[0];\n\t$tail = array_slice($l, 1);\n\t$sorted_tail = sort_third($tail);\n\
    \t$sorted_third = sort(third($tail));\n\t$third_sorted = third($sorted_tail);\n\
    \t$third_part = array_replace($third_sorted, $sorted_third);\n\t$res = array_merge(array($head),\
    \ $sorted_tail);\n\t$res = array_replace($res, $third_part);\n\treturn $res;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function third() in /tmp/tmpupf1ozem.php:16\n\
    Stack trace:\n#0 /tmp/tmpupf1ozem.php(15): sort_third(Array)\n#1 /tmp/tmpupf1ozem.php(15):\
    \ sort_third(Array)\n#2 /tmp/tmpupf1ozem.php(15): sort_third(Array)\n#3 /tmp/tmpupf1ozem.php(15):\
    \ sort_third(Array)\n#4 /tmp/tmpupf1ozem.php(25): sort_third(Array)\n#5 /tmp/tmpupf1ozem.php(29):\
    \ candidate(Array)\n#6 /tmp/tmpupf1ozem.php(35): test()\n#7 {main}\n  thrown in\
    \ /tmp/tmpupf1ozem.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $lprime = array();\n    $j = 0;\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $lprime[$i] = $l[$i];\n            sort($lprime[$i]);\n        } else {\n\
    \            $lprime[$i] = $l[$i];\n        }\n    }\n    return $lprime;\n}\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_4zx2myt.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_4zx2myt.php on line 15\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp_4zx2myt.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_4zx2myt.php:27\nStack trace:\n#0 /tmp/tmp_4zx2myt.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_4zx2myt.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$ret = [];\n\t$i = 0;\n\tforeach ($l\
    \ as $x) {\n\t\tif ($i % 3 == 0) {\n\t\t\tarray_push($ret, sort_nums($x));\n\t\
    \t} else {\n\t\t\tarray_push($ret, $x);\n\t\t}\n\t\t$i++;\n\t}\n\treturn $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_nums() in\
    \ /tmp/tmpqn39pol1.php:14\nStack trace:\n#0 /tmp/tmpqn39pol1.php(24): sort_third(Array)\n\
    #1 /tmp/tmpqn39pol1.php(28): candidate(Array)\n#2 /tmp/tmpqn39pol1.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqn39pol1.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $result = array();\n  $list = array();\n\
    \  foreach ($l as $key => $value) {\n    if($key % 3 == 0) {\n      $list[] =\
    \ $value;\n    }\n    else {\n      $result[] = $value;\n    }\n  }\n  sort($list);\n\
    \  $j = 0;\n  for($i = 0; $i < count($l); $i++) {\n    if($i % 3 == 0) {\n   \
    \   $result[] = $list[$j];\n      $j++;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq3bhxzv.php:35\n\
    Stack trace:\n#0 /tmp/tmpkq3bhxzv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkq3bhxzv.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// We will use PHP's built-in array_chunk\
    \ to split the array into chunks of size 3\n\t// array_chunk will return an array\
    \ of arrays, where each array is a chunk\n\t$subarrays = array_chunk($l, 3);\n\
    \t// We then initialize an empty array to store the result\n\t$result = [];\n\t\
    // We iterate through the subarrays\n\tforeach ($subarrays as $subarray) {\n\t\
    \t// If the subarray has less than 3 elements, it is not divisible by 3 and we\
    \ add it directly to the result\n\t\tif (count($subarray) < 3) {\n\t\t\t$result\
    \ = array_merge($result, $subarray);\n\t\t} else {\n\t\t\t// If the subarray has\
    \ 3 elements, we sort it and then add it to the result\n\t\t\tsort($subarray);\n\
    \t\t\t$result = array_merge($result, $subarray);\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynbhpbxl.php:33\n\
    Stack trace:\n#0 /tmp/tmpynbhpbxl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpynbhpbxl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\t$n = count($l);\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$result[] = sort_three($l[$i],\
    \ $l[$i + 1], $l[$i + 2]);\n\t\t} else {\n\t\t\t$result[] = $l[$i];\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_three()\
    \ in /tmp/tmpe4xzdrxm.php:14\nStack trace:\n#0 /tmp/tmpe4xzdrxm.php(23): sort_third(Array)\n\
    #1 /tmp/tmpe4xzdrxm.php(27): candidate(Array)\n#2 /tmp/tmpe4xzdrxm.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe4xzdrxm.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $count = count($l);\n    $length\
    \ = $count % 3;\n    if ($length == 1) {\n        $l[] = $l[$count - 1];\n   \
    \     $l[] = $l[$count - 1];\n    } else if ($length == 2) {\n        $l[] = $l[$count\
    \ - 1];\n    }\n    for ($i = 2; $i < count($l); $i += 3) {\n        $arr1 = array_slice($l,\
    \ $i - 2, 3);\n        sort($arr1);\n        $l[$i - 2] = $arr1[0];\n        $l[$i\
    \ - 1] = $arr1[1];\n        $l[$i] = $arr1[2];\n    }\n    return $l;\n}\n\necho\
    \ sort_third([1, 2, 3]), \"\\n\";\necho sort_third([5, 6, 3, 4, 8, 9, 2]), \"\\\
    n\";\necho sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]), \"\\n\";\necho sort_third([5,\
    \ 6, 3, 4, 8, 9, 2, 1]), \"\\n\";\necho sort_third([5, 6, 3, 4, 8, 9, 2, 1, 7]),\
    \ \"\\n\";\necho sort_third([5, 6, 3, 4, 8, 9, 2, 1, 7, 10]), \"\\n\";\necho sort_third([5,\
    \ 6, 3, 4, 8, 9, 2, 1, 7, 10, 11]), \"\\n\";\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\nArray\nArray\nArray\nArray\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpoxbfrugp.php:40\nStack trace:\n#0 /tmp/tmpoxbfrugp.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoxbfrugp.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $N = count($l);\n    for ($i = 0;\
    \ $i < $N; $i++) {\n        if ($i % 3 == 0) {\n            sort(array_slice($l,\
    \ $i, 3));\n        }\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3axewfg.php:23\n\
    Stack trace:\n#0 /tmp/tmpo3axewfg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo3axewfg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_mod = array();\n    for ($i =\
    \ 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $l_mod[]\
    \ = $l[$i];\n        }\n    }\n    sort($l_mod);\n    $l_mod3 = array();\n   \
    \ for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n         \
    \   $l_mod3[] = array_shift($l_mod);\n        } else {\n            $l_mod3[]\
    \ = $l[$i];\n        }\n    }\n    return $l_mod3;\n}\n\necho '<pre>';\nvar_dump(sort_third([1,\
    \ 2, 3]));\nvar_dump(sort_third([5, 6, 3, 4, 8, 9, 2]));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    }\narray(7) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(6)\n  [2]=>\n  int(3)\n  [3]=>\n\
    \  int(4)\n  [4]=>\n  int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(5)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$sorted=True;\n\t$index=0;\n\twhile($sorted)\
    \ {\n\t\t$index2=$index+3;\n\t\tif($index2<count($l)) {\n\t\t\tif($l[$index]>$l[$index2])\
    \ {\n\t\t\t\t$t=$l[$index];\n\t\t\t\t$l[$index]=$l[$index2];\n\t\t\t\t$l[$index2]=$t;\n\
    \t\t\t\t$sorted=False;\n\t\t\t}\n\t\t}\n\t\t$index=$index+1;\n\t}\n\treturn $l;\n\
    }\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshsfccdg.php:31\n\
    Stack trace:\n#0 /tmp/tmpshsfccdg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpshsfccdg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $new_list = array();\n  $i = 0;\n\
    \  foreach ($l as $number) {\n    if ($i % 3 == 0) {\n      $new_list[] = bubble_sort(array($l[$i],\
    \ $l[$i + 1], $l[$i + 2]));\n      $i += 3;\n    } else {\n      $new_list[] =\
    \ $number;\n      $i++;\n    }\n  }\n  return $new_list;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmpj0a6nut1.php:14\nStack trace:\n#0 /tmp/tmpj0a6nut1.php(24): sort_third(Array)\n\
    #1 /tmp/tmpj0a6nut1.php(28): candidate(Array)\n#2 /tmp/tmpj0a6nut1.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj0a6nut1.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\t$sorted = $l;\n\
    \tsort($sorted);\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif (($i + 1) % 3\
    \ == 0) {\n\t\t\t$result[] = $sorted[$i];\n\t\t} else {\n\t\t\t$result[] = $l[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyw25x6hp.php:27\n\
    Stack trace:\n#0 /tmp/tmpyw25x6hp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyw25x6hp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    foreach\
    \ ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $l_prime[] = sort_array(array($l[$i],\
    \ $l[$i + 1], $l[$i + 2]));\n        } else {\n            $l_prime[] = $v;\n\
    \        }\n    }\n    return $l_prime;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmp9jxk6w9t.php:13\nStack trace:\n#0 /tmp/tmp9jxk6w9t.php(22): sort_third(Array)\n\
    #1 /tmp/tmp9jxk6w9t.php(26): candidate(Array)\n#2 /tmp/tmp9jxk6w9t.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9jxk6w9t.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $f = [];\n  $s = [];\n  $t = [];\n\
    \  $lh = count($l);\n  for ($i = 0; $i < $lh; $i++) {\n    if (($i + 1) % 3 ==\
    \ 0) {\n      $t[] = $l[$i];\n    } else if (($i + 2) % 3 == 0) {\n      $s[]\
    \ = $l[$i];\n    } else {\n      $f[] = $l[$i];\n    }\n  }\n  sort($t);\n  $ret\
    \ = [];\n  $fh = count($f);\n  $sh = count($s);\n  $th = count($t);\n  for ($i\
    \ = 0; $i < $fh; $i++) {\n    $ret[] = $f[$i];\n    if ($i < $sh) $ret[] = $s[$i];\n\
    \    if ($i < $th) $ret[] = $t[$i];\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr75hpyz.php:40\n\
    Stack trace:\n#0 /tmp/tmpjr75hpyz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjr75hpyz.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$k=array();\n\tfor ($i=0; $i < count($l);\
    \ $i++) { \n\t\tif ($i%3==0) {\n\t\t\t$k[$i]=min($l[$i],$l[$i+1],$l[$i+2]);\n\t\
    \t} else {\n\t\t\t$k[$i]=$l[$i];\n\t\t}\n\t}\n\treturn $k;\n}\nprint_r(sort_third([1,\
    \ 2, 3]));\necho \"<br>\";\nprint_r(sort_third([5, 6, 3, 4, 8, 9, 2]));\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 3\n    [1] => 6\n    [2] => 3\n    [3] => 4\n    [4] => 8\n    [5]\
    \ => 9\n    [6] => \n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsd51wtb1.php:29\n\
    Stack trace:\n#0 /tmp/tmpsd51wtb1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsd51wtb1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $results = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $copy = $l;\n\
    \            array_splice($copy, $i, 1);\n            $results[] = $l[$i];\n \
    \           sort($copy);\n            $results = array_merge($results, $copy);\n\
    \            return $results;\n        }\n        $results[] = $l[$i];\n    }\n\
    \    return $results;\n}\n$l = [5, 6, 3, 4, 8, 9, 2];\nprint_r(sort_third($l));\n\
    print_r($l);\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 6\n    [5] => 8\n    [6] => 9\n)\nArray\n(\n    [0] => 5\n    [1] => 6\n\
    \    [2] => 3\n    [3] => 4\n    [4] => 8\n    [5] => 9\n    [6] => 2\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpoqmu6q6d.php:32\nStack trace:\n\
    #0 /tmp/tmpoqmu6q6d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoqmu6q6d.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n   $l_prime = array();\n   for ($i =\
    \ 0; $i < count($l); $i++) {\n      if ($i % 3 == 0) {\n         $l_slice = array_slice($l,\
    \ $i, 3);\n         sort($l_slice);\n         $l_prime = array_merge($l_prime,\
    \ $l_slice);\n      } else {\n         $l_prime[] = $l[$i];\n      }\n   }\n \
    \  return $l_prime;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5wpvvyvh.php:27\n\
    Stack trace:\n#0 /tmp/tmp5wpvvyvh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5wpvvyvh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // Given a list l\n    // Let l'\
    \ be the list of the third elements of l\n    $l_prime = array_filter($l, function($index)\
    \ {\n        return ($index + 1) % 3 == 0;\n    }, ARRAY_FILTER_USE_KEY);\n  \
    \  // Sort the elements of l'\n    sort($l_prime);\n    // Replace the third elements\
    \ of l with the sorted third elements of l'\n    foreach($l_prime as $index =>\
    \ $value) {\n        $l[$index + 2] = $value;\n    }\n    // Return l\n    return\
    \ $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposgvsa6g.php:29\n\
    Stack trace:\n#0 /tmp/tmposgvsa6g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmposgvsa6g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  // your code here.\n  foreach ($l\
    \ as $key => $value) {\n    if ($key % 3 == 0) {\n      $l_3[] = $value;\n   \
    \ }\n  }\n  sort($l_3);\n  $l_3_ = [];\n  $i = 0;\n  foreach ($l as $key => $value)\
    \ {\n    if ($key % 3 == 0) {\n      $l_3_[] = $l_3[$i];\n      $i++;\n    } else\
    \ {\n      $l_3_[] = $value;\n    }\n  }\n  return $l_3_;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $newList = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $currentIndex\
    \ = $i;\n            $tempList = [];\n            while ($currentIndex < count($l)\
    \ && $currentIndex % 3 == 0) {\n                array_push($tempList, $l[$currentIndex]);\n\
    \                $currentIndex++;\n            }\n            sort($tempList);\n\
    \            $newList = array_merge($newList, $tempList);\n            $i = $currentIndex\
    \ - 1;\n        } else {\n            array_push($newList, $l[$i]);\n        }\n\
    \    }\n    return $newList;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkt_u_57.php:34\n\
    Stack trace:\n#0 /tmp/tmpmkt_u_57.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmkt_u_57.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $newlist = array();\n    $thirdlist\
    \ = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            array_push($thirdlist, $l[$i]);\n        }\n        array_push($newlist,\
    \ $l[$i]);\n    }\n    asort($thirdlist);\n    $thirdlist = array_values($thirdlist);\n\
    \    $m = 0;\n    for ($i = 0; $i < count($newlist); $i++) {\n        if ($i %\
    \ 3 == 0) {\n            $newlist[$i] = $thirdlist[$m];\n            $m = $m +\
    \ 1;\n        }\n    }\n    return $newlist;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 === 0) {\n            sort($l[$i]);\n\
    \        }\n        $l_prime[] = $l[$i];\n    }\n    return $l_prime;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmprxz3ty9c.php\
    \ on line 13\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmprxz3ty9c.php on line 13\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmprxz3ty9c.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmprxz3ty9c.php:24\nStack trace:\n#0 /tmp/tmprxz3ty9c.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprxz3ty9c.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l2 = array();\n    $l3 = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      array_push($l3, $l[$i]);\n        } else {\n            array_push($l2,\
    \ $l[$i]);\n        }\n    }\n    sort($l3);\n    for ($i = 0; $i < count($l2);\
    \ $i++) {\n        array_push($l3, $l2[$i]);\n    }\n    return $l3;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkiiy99jk.php:30\n\
    Stack trace:\n#0 /tmp/tmpkiiy99jk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkiiy99jk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $ret = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $copy = $l;\n\
    \            $sublist = array_splice($copy, $i, 3);\n            asort($sublist);\n\
    \            array_splice($ret, $i, 0, $sublist);\n        } else {\n        \
    \    $ret[] = $l[$i];\n        }\n    }\n    return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2g0oklk.php:28\n\
    Stack trace:\n#0 /tmp/tmpc2g0oklk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc2g0oklk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$sorted_third = [];\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sorted_third[$i] = sort([$l[$i],\
    \ $l[$i + 1], $l[$i + 2]]);\n\t\t} else {\n\t\t\t$sorted_third[$i] = $l[$i];\n\
    \t\t}\n\t}\n\treturn $sorted_third;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmpe0_qxu2b.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$m = [];\n\t$m[] = $l[0];\n\t$m[]\
    \ = $l[1];\n\tsort($l);\n\t$m[] = $l[0];\n\t$m[] = $l[1];\n\t$m[] = $l[2];\n\t\
    $m[] = $l[3];\n\t$m[] = $l[4];\n\treturn $m;\n}\n\n$r = sort_third([5, 6, 3, 4,\
    \ 8, 9, 2]);\nvar_dump($r);\n\n$r = sort_third([5, 6, 3, 4, 8, 9, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwi7dxa8u.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    foreach($l\
    \ as $index => $val) {\n        if ($index % 3 == 0) {\n            $l_prime[]\
    \ = sort_indicies($l, $index);\n        } else {\n            $l_prime[] = $val;\n\
    \        }\n    }\n    return $l_prime;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_indicies()\
    \ in /tmp/tmpu6o1h2u0.php:13\nStack trace:\n#0 /tmp/tmpu6o1h2u0.php(22): sort_third(Array)\n\
    #1 /tmp/tmpu6o1h2u0.php(26): candidate(Array)\n#2 /tmp/tmpu6o1h2u0.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu6o1h2u0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_new = array();\n    for ($i =\
    \ 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $l_new[]\
    \ = $l[$i];\n        }\n    }\n    sort($l_new);\n    $l_new_i = 0;\n    for ($i\
    \ = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $l[$i]\
    \ = $l_new[$l_new_i];\n            $l_new_i++;\n        }\n    }\n    return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $count = count($l);\n  $o = array();\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if ($i % 3 != 0) {\n      $o[$i] = $l[$i];\n\
    \    } else {\n      $o[$i] = sort_third_helper($l[$i]);\n    }\n  }\n  return\
    \ $o;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmpu5rb6fs8.php:16\nStack trace:\n#0 /tmp/tmpu5rb6fs8.php(23): sort_third(Array)\n\
    #1 /tmp/tmpu5rb6fs8.php(27): candidate(Array)\n#2 /tmp/tmpu5rb6fs8.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu5rb6fs8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_ = $l;\n\tfor ($i = 2; $i < count($l);\
    \ $i += 3) {\n\t\t$l_[$i] = sort_list($l[$i]);\n\t}\n\treturn $l_;\n}\n\n$tests[]\
    \ = 'sort_third';\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmp_0bag2kq.php:12\nStack trace:\n#0 /tmp/tmp_0bag2kq.php(20): sort_third(Array)\n\
    #1 /tmp/tmp_0bag2kq.php(24): candidate(Array)\n#2 /tmp/tmp_0bag2kq.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_0bag2kq.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            sort($l[$i]);\n        }\n    }\n\
    \    return $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpelcw8mgq.php\
    \ on line 12\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpelcw8mgq.php on line 12\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpelcw8mgq.php on line 12\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpelcw8mgq.php:22\nStack trace:\n#0 /tmp/tmpelcw8mgq.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpelcw8mgq.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    return array_map(function($e) {\n\
    \        if($e % 3 == 0) {\n            sort($e);\n        }\n        return $e;\n\
    \    }, $l);\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp2xffdkop.php\
    \ on line 12\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp2xffdkop.php on line 12\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp2xffdkop.php on line 12\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2xffdkop.php:23\nStack trace:\n#0 /tmp/tmp2xffdkop.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2xffdkop.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $odd_index = false;\n    $to_sort\
    \ = array();\n    $n = count($l);\n    $i = 0;\n    while ($i < $n) {\n      \
    \  if ($odd_index) {\n            $to_sort[] = $l[$i];\n            $i += 2;\n\
    \        } else {\n            $i += 1;\n        }\n        $odd_index = !$odd_index;\n\
    \    }\n    sort($to_sort);\n    $k = 0;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($i % 3 === 0) {\n            $l[$i] = $to_sort[$k];\n           \
    \ $k++;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8jiilq_.php:39\n\
    Stack trace:\n#0 /tmp/tmpl8jiilq_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpl8jiilq_.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$n = count($l);\n\tfor ($i = 0; $i\
    \ < $n; $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\tsort($l, 0, $i);\n\t\t}\n\t}\n\t\
    return $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects at most 2 parameters, 3 given in /tmp/tmpje8v1qrn.php\
    \ on line 13\n\nWarning: sort() expects at most 2 parameters, 3 given in /tmp/tmpje8v1qrn.php\
    \ on line 13\n\nWarning: sort() expects at most 2 parameters, 3 given in /tmp/tmpje8v1qrn.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpje8v1qrn.php:24\n\
    Stack trace:\n#0 /tmp/tmpje8v1qrn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpje8v1qrn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 2; $i < count($l); $i +=\
    \ 3) {\n\t\tsort($l[$i]);\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmph1ribouh.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmph1ribouh.php on line 11\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph1ribouh.php:21\nStack trace:\n#0 /tmp/tmph1ribouh.php(27): test()\n\
    #1 {main}\n  thrown in /tmp/tmph1ribouh.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_copy = $l;\n    for ($i = 2;\
    \ $i < count($l); $i+=3) {\n        $l_copy[$i] = $l[$i-2];\n        $l_copy[$i-2]\
    \ = $l[$i];\n    }\n    $sorted = sort($l_copy);\n    return $l_copy;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3h7w0rq.php:23\n\
    Stack trace:\n#0 /tmp/tmpz3h7w0rq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz3h7w0rq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $l_prime = array();\n  for ($i = 0;\
    \ $i < count($l); $i++) {\n    if ($i % 3 == 0) {\n      $l_prime[] = sort_list($l[$i]);\n\
    \    } else {\n      $l_prime[] = $l[$i];\n    }\n  }\n  return $l_prime;\n}\n\
    \nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmp6tbmvfrz.php:13\nStack trace:\n#0 /tmp/tmp6tbmvfrz.php(22): sort_third(Array)\n\
    #1 /tmp/tmp6tbmvfrz.php(26): candidate(Array)\n#2 /tmp/tmp6tbmvfrz.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6tbmvfrz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$sorted = false;\n\twhile(!$sorted)\
    \ {\n\t\t$sorted = true;\n\t\tfor($i = 2; $i < count($l); $i += 3) {\n\t\t\tif($l[$i]\
    \ < $l[$i - 1]) {\n\t\t\t\t$temp = $l[$i];\n\t\t\t\t$l[$i] = $l[$i - 1];\n\t\t\
    \t\t$l[$i - 1] = $temp;\n\t\t\t\t$sorted = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwllh1dy.php:30\n\
    Stack trace:\n#0 /tmp/tmpvwllh1dy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvwllh1dy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $result = array();\n  foreach($l as\
    \ $index => $elem) {\n    if ($index % 3 == 0) {\n      $result[] = sort_elem($elem);\n\
    \    } else {\n      $result[] = $elem;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_elem() in\
    \ /tmp/tmpzhf4g9m4.php:13\nStack trace:\n#0 /tmp/tmpzhf4g9m4.php(22): sort_third(Array)\n\
    #1 /tmp/tmpzhf4g9m4.php(26): candidate(Array)\n#2 /tmp/tmpzhf4g9m4.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzhf4g9m4.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l2 = array();\n    $i = 0;\n  \
    \  $i_third = 0;\n    while ($i < count($l)) {\n        if (($i + 1) % 3 == 0)\
    \ {\n            $third = array();\n            $i_third = $i;\n            while\
    \ ($i_third < count($l) && ($i_third + 1) % 3 == 0) {\n                $third[]\
    \ = $l[$i_third];\n                $i_third++;\n            }\n            sort($third);\n\
    \            for ($i_third = $i; $i_third < count($l) && ($i_third + 1) % 3 ==\
    \ 0; $i_third++) {\n                $l2[] = $third[$i_third - $i];\n         \
    \   }\n            $i = $i_third;\n        } else {\n            $l2[] = $l[$i];\n\
    \            $i++;\n        }\n    }\n    return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hbiyq70.php:39\n\
    Stack trace:\n#0 /tmp/tmp7hbiyq70.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7hbiyq70.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = array();\n    for ($i\
    \ = 0; $i < count($l); $i++) {\n        if ($i % 3 != 0) {\n            $result[$i]\
    \ = $l[$i];\n        } else {\n            $i_values = array();\n            for\
    \ ($j = $i; $j < count($l); $j += 3) {\n                array_push($i_values,\
    \ $l[$j]);\n            }\n            sort($i_values);\n            for ($j =\
    \ $i; $j < count($l); $j += 3) {\n                $result[$j] = array_shift($i_values);\n\
    \            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpia761qxp.php:33\n\
    Stack trace:\n#0 /tmp/tmpia761qxp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpia761qxp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l = array(1, 2, 3);\n    $l = array(5,\
    \ 6, 3, 4, 8, 9, 2);\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjk4cbs2.php:19\n\
    Stack trace:\n#0 /tmp/tmppjk4cbs2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppjk4cbs2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // TODO: Write this function\n}\n\
    \n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhigb7ng.php:19\n\
    Stack trace:\n#0 /tmp/tmpvhigb7ng.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvhigb7ng.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // Start by initializing a list\
    \ to hold the result\n    $result = array();\n    // This loop will split the\
    \ input list into every third element and save it as $third\n    // For each $third,\
    \ take the values, sort them, and then put them back in the result list.\n   \
    \ // The elements that do not fall on indicies that are divisible by three will\
    \ be skipped.\n    for ($i = 0; $i < sizeof($l); $i = $i + 3) {\n        $third\
    \ = array_slice($l, $i, 3);\n        sort($third);\n        for ($j = 0; $j <\
    \ sizeof($third); $j++) {\n            array_push($result, $third[$j]);\n    \
    \    }\n    }\n    return $result;\n}\necho \"Testing sort_third: \\n\";\necho\
    \ json_encode(sort_third([1, 2, 3]));\necho \"\\n\";\necho json_encode(sort_third([5,\
    \ 6, 3, 4, 8, 9, 2]));\necho \"\\n\";\necho json_encode(sort_third([5, 6, 3, 4,\
    \ 8, 9, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\necho\
    \ \"\\n\";\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Testing sort_third: \n[1,2,3]\n[3,5,6,4,8,9,2]\n[3,5,6,4,8,9,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8kqpli4.php:38\n\
    Stack trace:\n#0 /tmp/tmph8kqpli4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmph8kqpli4.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// we do this by creating a list of\
    \ values that are divisible by three.\n\t// Then we sort those values, then we\
    \ reconstruct the list, by interspersing the sorted values with values that were\
    \ not divisible by three.\n\t$r = array();\n\t$sort_l = array();\n\tfor ($i =\
    \ 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sort_l[] = $l[$i];\n\
    \t\t} else {\n\t\t\t$r[] = $l[$i];\n\t\t}\n\t}\n\tsort($sort_l);\n\t$x = 0;\n\t\
    for ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$r[] = $sort_l[$x];\n\
    \t\t\t$x++;\n\t\t}\n\t}\n\treturn $r;\n}\nfunction candidate(...$args) {\n   \
    \ return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2fsig10.php:36\n\
    Stack trace:\n#0 /tmp/tmpp2fsig10.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp2fsig10.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$n = count($l);\n\tfor ($i = 2; $i\
    \ < $n; $i += 3) {\n\t\tfor ($j = $i; $j > 0 && $l[$j - 3] > $l[$j]; $j -= 3)\
    \ {\n\t\t\t$t = $l[$j - 3];\n\t\t\t$l[$j - 3] = $l[$j];\n\t\t\t$l[$j] = $t;\n\t\
    \t}\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqkj862h.php:26\n\
    Stack trace:\n#0 /tmp/tmpkqkj862h.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkqkj862h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n   $l_new = [];\n   $divisible = [];\n\
    \   for ($i = 0; $i < count($l); $i++) {\n     if ($i % 3 == 0) {\n       array_push($divisible,\
    \ $l[$i]);\n     }\n     else {\n       array_push($l_new, $l[$i]);\n     }\n\
    \   }\n   $divisible = sort($divisible);\n   for ($i = 0; $i < count($divisible);\
    \ $i++) {\n     array_push($l_new, $divisible[$i]);\n   }\n   return $l_new;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp2unbb2qb.php on line 21\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp2unbb2qb.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2unbb2qb.php:32\n\
    Stack trace:\n#0 /tmp/tmp2unbb2qb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2unbb2qb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $new_l = [];\n  $index = 0;\n  foreach\
    \ ($l as $value) {\n    if ($index % 3 != 0) {\n      $new_l[] = $value;\n   \
    \ } else {\n      $third = [$value];\n      while ($index % 3 == 0) {\n      \
    \  $value = $l[$index];\n        $third[] = $value;\n        $index++;\n     \
    \ }\n      $index--;\n      sort($third);\n      $new_l = array_merge($new_l,\
    \ $third);\n    }\n    $index++;\n  }\n  return $new_l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_wxdy7r.php:35\n\
    Stack trace:\n#0 /tmp/tmpw_wxdy7r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw_wxdy7r.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $new_l = array();\n    $i = 0;\n\
    \    foreach ($l as $k => $v) {\n        if ($k % 3 != 0) {\n            $new_l[$k]\
    \ = $v;\n        } else {\n            $new_l[$k] = sort_array($l[$k]);\n    \
    \    }\n    }\n    return $new_l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpqjaztajw.php:16\nStack trace:\n#0 /tmp/tmpqjaztajw.php(23): sort_third(Array)\n\
    #1 /tmp/tmpqjaztajw.php(27): candidate(Array)\n#2 /tmp/tmpqjaztajw.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqjaztajw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    if (count($l) <= 1) {\n        return\
    \ $l;\n    }\n    $new = [];\n    $i = 0;\n    while ($i < count($l)) {\n    \
    \    if ($i % 3 == 0) {\n            $a = $l[$i];\n            $b = $l[$i + 1];\n\
    \            $c = $l[$i + 2];\n            $new[$i] = $a;\n            $new[$i\
    \ + 1] = $b;\n            $new[$i + 2] = $c;\n            $new_slice = array_slice($new,\
    \ $i, 3);\n            $new_slice = bubble_sort($new_slice);\n            $new[$i]\
    \ = $new_slice[0];\n            $new[$i + 1] = $new_slice[1];\n            $new[$i\
    \ + 2] = $new_slice[2];\n        } else {\n            $new[$i] = $l[$i];\n  \
    \      }\n        $i += 1;\n    }\n    return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmp7b6i8q_0.php:24\nStack trace:\n#0 /tmp/tmp7b6i8q_0.php(37): sort_third(Array)\n\
    #1 /tmp/tmp7b6i8q_0.php(41): candidate(Array)\n#2 /tmp/tmp7b6i8q_0.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7b6i8q_0.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = [];\n    $modCount = count($l)\
    \ % 3;\n    for ($i = 0; $i < count($l); $i++) {\n        if (($i + 1) % 3 ==\
    \ 0) {\n            $sort = $l;\n            usort($sort, function($a, $b) {\n\
    \                return $a <=> $b;\n            });\n            $result[] = $sort[$i\
    \ - 2];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ojleifp.php:30\n\
    Stack trace:\n#0 /tmp/tmp7ojleifp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7ojleifp.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// Define the functio nme\n\tfunction\
    \ sort_third_helper($l) {\n\t\t// Create an array with the indicies that are divisible\
    \ by three\n\t\t$threes = filter(function($n) { return ($n % 3 == 0); }, range(0,\
    \ count($l) - 1));\n\t\t// Create a list that is identical to l in the indicies\
    \ that are not divisible by three, and has lists of the values of the corresponding\
    \ indicies of l at the indicies that are divisible by three\n\t\t$l_temp = map(function($n)\
    \ use ($l, $threes) { return (in_array($n, $threes) ? array($l[$n]) : $l[$n]);\
    \ }, range(0, count($l) - 1));\n\t\t// Create an array of the values in the lists\
    \ of the indicies that are divisible by three, and then sort it\n\t\t$sort = merge(map(function($list)\
    \ { return sort($list); }, filter(function($n) { return is_array($n); }, $l_temp)));\n\
    \t\t// Merge the lists of the indicies that are divisible by three and sort\n\t\
    \t$merge = merge(map(function($n) use ($sort) { return ($n % 3 == 0 ? array_shift($sort)\
    \ : $n); }, range(0, count($l) - 1)));\n\t\t// Return the result\n\t\treturn $merge;\n\
    \t}\n\t// Return the result\n\treturn sort_third_helper($l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function filter() in /tmp/tmpd9emophv.php:13\n\
    Stack trace:\n#0 /tmp/tmpd9emophv.php(24): sort_third_helper(Array)\n#1 /tmp/tmpd9emophv.php(28):\
    \ sort_third(Array)\n#2 /tmp/tmpd9emophv.php(32): candidate(Array)\n#3 /tmp/tmpd9emophv.php(38):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpd9emophv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$ret = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$ret[] = sort_third_help($l[$i]);\n\
    \t\t} else {\n\t\t\t$ret[] = $l[$i];\n\t\t}\n\t}\n\treturn $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_help()\
    \ in /tmp/tmpcoxwfgss.php:13\nStack trace:\n#0 /tmp/tmpcoxwfgss.php(22): sort_third(Array)\n\
    #1 /tmp/tmpcoxwfgss.php(26): candidate(Array)\n#2 /tmp/tmpcoxwfgss.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcoxwfgss.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $modulo = 0;\n  $result = array();\n\
    \  $third = array();\n  foreach ($l as $item) {\n    if ($modulo % 3 == 0) {\n\
    \      $third[] = $item;\n    } else {\n      $result[] = $item;\n    }\n    $modulo++;\n\
    \  }\n  sort($third);\n  return array_merge($result, $third);\n}\n\nvar_dump(sort_third(array(1,\
    \ 2, 3)));\nvar_dump(sort_third(array(5, 6, 3, 4, 8, 9, 2)));\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(1)\n}\n\
    array(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(3)\n  [2]=>\n  int(8)\n  [3]=>\n\
    \  int(9)\n  [4]=>\n  int(2)\n  [5]=>\n  int(4)\n  [6]=>\n  int(5)\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpi4jmzk5n.php:32\nStack trace:\n\
    #0 /tmp/tmpi4jmzk5n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi4jmzk5n.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$lPrime = array();\n\t$thirdSort =\
    \ array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\
    \t\tarray_push($thirdSort, $l[$i]);\n\t\t} else {\n\t\t\tarray_push($lPrime, $l[$i]);\n\
    \t\t}\n\t}\n\tsort($thirdSort);\n\t$i = 0;\n\twhile (count($thirdSort) > 0) {\n\
    \t\tarray_splice($lPrime, 3 * $i, 0, array(array_shift($thirdSort)));\n\t\t$i++;\n\
    \t}\n\treturn $lPrime;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // TODO: Implement this\n    $new_list\
    \ = array();\n    for ($i = 0; $i < count($l); $i++){\n      if ($i % 3 == 0){\n\
    \        $new_list[$i] = $l[$i];\n        sort($new_list[$i]);\n      } else {\n\
    \        $new_list[$i] = $l[$i];\n      }\n    }\n    return $new_list;\n}\n\n\
    $l = array(1, 2, 3);\n$l1 = array(5, 6, 3, 4, 8, 9, 2);\n\nvar_dump(sort_third($l));\n\
    var_dump(sort_third($l1));\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmplj3ef51r.php\
    \ on line 15\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n\
    }\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmplj3ef51r.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmplj3ef51r.php on line 15\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmplj3ef51r.php on line 15\narray(7) {\n  [0]=>\n \
    \ int(5)\n  [1]=>\n  int(6)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n \
    \ int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(2)\n}\n\nWarning: sort() expects parameter\
    \ 1 to be array, int given in /tmp/tmplj3ef51r.php on line 15\n\nWarning: sort()\
    \ expects parameter 1 to be array, int given in /tmp/tmplj3ef51r.php on line 15\n\
    \nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmplj3ef51r.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj3ef51r.php:33\n\
    Stack trace:\n#0 /tmp/tmplj3ef51r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplj3ef51r.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  for ($i = 2; $i < count($l); $i +=\
    \ 3) {\n    $subl = array_slice($l, $i - 2, 3);\n    sort($subl);\n    array_splice($l,\
    \ $i - 2, 3, $subl);\n  }\n  return $l;\n}\n\necho \"<h3>sort_third</h3>\";\n\
    $numbers = [1, 2, 3];\n$expected = [1, 2, 3];\necho \"Input: \" . implode(\",\
    \ \", $numbers) . \"<br>\";\necho \"Expected: \" . implode(\", \", $expected)\
    \ . \"<br>\";\necho \"Output: \" . implode(\", \", sort_third($numbers)) . \"\
    <br>\";\n\n$numbers = [5, 6, 3, 4, 8, 9, 2];\n$expected = [2, 6, 3, 4, 8, 9, 5];\n\
    echo \"Input: \" . implode(\", \", $numbers) . \"<br>\";\necho \"Expected: \"\
    \ . implode(\", \", $expected) . \"<br>\";\necho \"Output: \" . implode(\", \"\
    , sort_third($numbers)) . \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h3>sort_third</h3>Input: 1, 2, 3<br>Expected: 1, 2, 3<br>Output: 1, 2,\
    \ 3<br>Input: 5, 6, 3, 4, 8, 9, 2<br>Expected: 2, 6, 3, 4, 8, 9, 5<br>Output:\
    \ 3, 5, 6, 4, 8, 9, 2<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp145hbuyh.php:35\n\
    Stack trace:\n#0 /tmp/tmp145hbuyh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp145hbuyh.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0wz22ac.php:17\n\
    Stack trace:\n#0 /tmp/tmpm0wz22ac.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpm0wz22ac.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $a = array();\n    $b = array();\n\
    \    $len = count($l);\n    // Seperate the array into two arrays, one containing\
    \ the elements we want to sort, and the other containing the rest.\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($i % 3 == 0) {\n            array_push($a,\
    \ $l[$i]);\n        } else {\n            array_push($b, $l[$i]);\n        }\n\
    \    }\n    // Sort the array with elements to sort\n    sort($a);\n    // Merge\
    \ the two arrays back together\n    return array_merge($b, $a);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jdh7noz.php:32\n\
    Stack trace:\n#0 /tmp/tmp5jdh7noz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5jdh7noz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$res = array();\n\tforeach($l as $key\
    \ => $value) {\n\t\tif ($key % 3 === 0) {\n\t\t\tsort($l);\n\t\t\t$res[] = $l[$key];\n\
    \t\t} else {\n\t\t\t$res[] = $value;\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiew49g5w.php:27\n\
    Stack trace:\n#0 /tmp/tmpiew49g5w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiew49g5w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // Task 2: Return the list $l modified\
    \ as stated above.\n    $count = count($l);\n    for ($i = 2; $i < $count; $i\
    \ = $i + 3) {\n        $temp = $l[$i - 2];\n        $l[$i - 2] = $l[$i];\n   \
    \     $l[$i] = $temp;\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmn_5l5s9.php:24\n\
    Stack trace:\n#0 /tmp/tmpmn_5l5s9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmn_5l5s9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l3 = array();\n    $lother = array();\n\
    \    $result = array();\n    foreach ($l as $key => $val) {\n        if ($key\
    \ % 3 == 0) {\n            $l3[] = $val;\n        } else {\n            $lother[]\
    \ = $val;\n        }\n    }\n    foreach ($l as $key => $val) {\n        if ($key\
    \ % 3 == 0) {\n            $result[] = $l3[array_search($val, $l3)];\n       \
    \ } else {\n            $result[] = $lother[array_search($val, $lother)];\n  \
    \      }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5laomwt.php:34\n\
    Stack trace:\n#0 /tmp/tmpj5laomwt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj5laomwt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_copy = $l;\n\t$l_copy_count = count($l_copy);\n\
    \t$counter = 0;\n\tfor ($i = 0; $i < $l_copy_count; $i++) {\n\t\tif ($i % 3 ===\
    \ 0) {\n\t\t\tsort($l_copy);\n\t\t\t$i++;\n\t\t}\n\t\t$counter++;\n\t}\n\tfor\
    \ ($i = 0; $i < $counter; $i++) {\n\t\tif ($i % 3 === 0) {\n\t\t\tarray_shift($l_copy);\n\
    \t\t}\n\t}\n\treturn $l_copy;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2o3dznx.php:33\n\
    Stack trace:\n#0 /tmp/tmpu2o3dznx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu2o3dznx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  // YOUR CODE HERE\n  for ($i = 2;\
    \ $i < count($l); $i+=3) {\n    $sub_array = array_slice($l, $i-2, 3);\n    sort($sub_array);\n\
    \    array_splice($l, $i-2, 3, $sub_array);\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwznz_7e1.php:23\n\
    Stack trace:\n#0 /tmp/tmpwznz_7e1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwznz_7e1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  if ($l == null) {\n    return null;\n\
    \  }\n  if (length($l) <= 3) {\n    return $l;\n  }\n  $i = 3;\n  while ($i <\
    \ length($l)) {\n    if ($i % 3 == 0) {\n      sort_third_helper(ref($l, $i),\
    \ ref($l, $i + 1), ref($l, $i + 2));\n    }\n    $i = $i + 1;\n  }\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function length() in /tmp/tmpdg7eo422.php:13\n\
    Stack trace:\n#0 /tmp/tmpdg7eo422.php(27): sort_third(Array)\n#1 /tmp/tmpdg7eo422.php(31):\
    \ candidate(Array)\n#2 /tmp/tmpdg7eo422.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdg7eo422.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 2; $i < count($l); $i\
    \ += 3) {\n        $sub = array_slice($l, $i, 3);\n        sort($sub);\n     \
    \   array_splice($l, $i, 3, $sub);\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzmmo9qi.php:23\n\
    Stack trace:\n#0 /tmp/tmpjzmmo9qi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjzmmo9qi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    if (count($l) < 3) return $l;\n\
    \    $ret = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $ret[] = $l[$i];\n        } else if ($i % 3 == 1) {\n\
    \            $ret[] = $l[$i];\n            $third = array();\n            for\
    \ ($j = $i - 1; $j < $i + 2; $j++) {\n                $third[] = $l[$j];\n   \
    \         }\n            sort($third);\n            for ($j = $i - 1; $j < $i\
    \ + 2; $j++) {\n                $ret[] = $third[$j - $i + 1];\n            }\n\
    \        }\n    }\n    return $ret;\n}\n\n$l = array(1, 2, 3);\necho 'Assertion:\
    \ ' . var_export(sort_third($l) == array(1, 2, 3), true) . '<br>';\n$l = array(5,\
    \ 6, 3, 4, 8, 9, 2);\necho 'Assertion: ' . var_export(sort_third($l) == array(2,\
    \ 6, 3, 4, 8, 9, 5), true) . '<br>';\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Assertion: false<br>Assertion: false<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpniedmqth.php:39\nStack trace:\n#0 /tmp/tmpniedmqth.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpniedmqth.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $part = array_slice($l,\
    \ $i, 3);\n            sort($part);\n            $l_prime = array_merge($l_prime,\
    \ $part);\n        } else {\n            $l_prime[] = $l[$i];\n        }\n   \
    \ }\n    return $l_prime;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxz_e9yh.php:28\n\
    Stack trace:\n#0 /tmp/tmppxz_e9yh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppxz_e9yh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$subl = array();\n\t\t\
    \tfor ($j = $i; $j < count($l) && $j < $i + 3; $j++) {\n\t\t\t\t$subl[] = $l[$j];\n\
    \t\t\t}\n\t\t\tsort($subl);\n\t\t\t$result = array_merge($result, $subl);\n\t\t\
    } else {\n\t\t\t$result[] = $l[$i];\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu69rcyx.php:30\n\
    Stack trace:\n#0 /tmp/tmppu69rcyx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppu69rcyx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    $index\
    \ = 0;\n    foreach ($l as $value) {\n        if ($index % 3 === 0) {\n      \
    \      $third = $value;\n            sort($third);\n            $l_prime[] = $third;\n\
    \        } else {\n            $l_prime[] = $value;\n        }\n        $index++;\n\
    \    }\n    return $l_prime;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_k7lv8ex.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_k7lv8ex.php on line 15\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp_k7lv8ex.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_k7lv8ex.php:29\nStack trace:\n#0 /tmp/tmp_k7lv8ex.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_k7lv8ex.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $ret = [];\n    $i = 0;\n    foreach\
    \ ($l as $e) {\n        if ($i % 3 == 0) {\n            $ret[] = bubble_sort([$e,\
    \ $l[$i+1], $l[$i+2]]);\n            $i += 3;\n        } else {\n            $ret[]\
    \ = $e;\n            $i++;\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmpvsuzigx0.php:14\nStack trace:\n#0 /tmp/tmpvsuzigx0.php(25): sort_third(Array)\n\
    #1 /tmp/tmpvsuzigx0.php(29): candidate(Array)\n#2 /tmp/tmpvsuzigx0.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvsuzigx0.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $res = [];\n    for ($i = 0; $i\
    \ < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $res[$i] = sort_array($l[$i]);\n\
    \        } else {\n            $res[$i] = $l[$i];\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpi86dn60s.php:13\nStack trace:\n#0 /tmp/tmpi86dn60s.php(22): sort_third(Array)\n\
    #1 /tmp/tmpi86dn60s.php(26): candidate(Array)\n#2 /tmp/tmpi86dn60s.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi86dn60s.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 2; $i < count($l); $i\
    \ += 3) {\n        $l[$i] = bubble_sort(array($l[$i], $l[$i - 1], $l[$i - 2]));\n\
    \    }\n    return $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmpsrvvqf4g.php:11\nStack trace:\n#0 /tmp/tmpsrvvqf4g.php(16): sort_third(Array)\n\
    #1 /tmp/tmpsrvvqf4g.php(20): candidate(Array)\n#2 /tmp/tmpsrvvqf4g.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsrvvqf4g.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  return array_map(function($subarr)\
    \ {\n    if (count($subarr) === 3) {\n      sort($subarr);\n    }\n    return\
    \ $subarr;\n  }, array_chunk($l, 3));\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_tncpon.php:23\n\
    Stack trace:\n#0 /tmp/tmpt_tncpon.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt_tncpon.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $i = 0;\n    $result = array();\n\
    \    foreach ($l as $x) {\n        if ($i % 3 === 0) {\n            $result[]\
    \ = sorted(array($l[$i], $l[$i + 1], $l[$i + 2]));\n            $i += 3;\n   \
    \     } else {\n            $result[] = $x;\n            $i++;\n        }\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sorted() in /tmp/tmpyvnc99pp.php:14\n\
    Stack trace:\n#0 /tmp/tmpyvnc99pp.php(25): sort_third(Array)\n#1 /tmp/tmpyvnc99pp.php(29):\
    \ candidate(Array)\n#2 /tmp/tmpyvnc99pp.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpyvnc99pp.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  if (empty($l)) {\n    return $l;\n\
    \  }\n  $l_sort = $l;\n  if (count($l) >= 3) {\n    $third = array_slice($l, 2,\
    \ 1);\n    sort($third);\n    $l_sort[2] = $third[0];\n  }\n  return array_merge(array_slice($l,\
    \ 0, 3), sort_third(array_slice($l, 3)));\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zlnv4wx.php:27\n\
    Stack trace:\n#0 /tmp/tmp0zlnv4wx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0zlnv4wx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 2; $i < count($l); $i +=\
    \ 3) {\n\t\tsort($l[$i]);\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpxc11slcf.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpxc11slcf.php on line 11\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxc11slcf.php:21\nStack trace:\n#0 /tmp/tmpxc11slcf.php(27): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxc11slcf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    return array_merge(array_values(array_filter($l,\
    \ function($v, $k) { return $k % 3 != 0; }, ARRAY_FILTER_USE_BOTH)),\n       \
    \                array_map(function($v) { sort($v); return $v; }, array_filter($l,\
    \ function($v, $k) { return $k % 3 == 0; }, ARRAY_FILTER_USE_BOTH)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpy22ngcrr.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpy22ngcrr.php on line 11\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpy22ngcrr.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpy22ngcrr.php:19\nStack trace:\n#0 /tmp/tmpy22ngcrr.php(25):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy22ngcrr.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $res = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 === 0) {\n            $res[] = $l[$i];\n\
    \        }\n    }\n    $res = merge_sort($res);\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 3 === 0) {\n            $l[$i] = array_shift($res);\n\
    \        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpreizc0r9.php:16\nStack trace:\n#0 /tmp/tmpreizc0r9.php(26): sort_third(Array)\n\
    #1 /tmp/tmpreizc0r9.php(30): candidate(Array)\n#2 /tmp/tmpreizc0r9.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpreizc0r9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$arr = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$arr[] = $l[$i];\n\t\t}\n\
    \t}\n\tsort($arr);\n\t$p = 0;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif\
    \ ($i % 3 == 0) {\n\t\t\t$l[$i] = $arr[$p];\n\t\t\t$p++;\n\t\t}\n\t}\n\treturn\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    if ($i % 3 == 0) {\n      $l[$i] = bubble_sort($l[$i]);\n    }\n  }\n\
    \  return $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmp9j8n0au1.php:12\nStack trace:\n#0 /tmp/tmp9j8n0au1.php(18): sort_third(Array)\n\
    #1 /tmp/tmp9j8n0au1.php(22): candidate(Array)\n#2 /tmp/tmp9j8n0au1.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9j8n0au1.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// your code here\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xrn2fb8.php:17\n\
    Stack trace:\n#0 /tmp/tmp6xrn2fb8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6xrn2fb8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 2; $i < count($l); $i +=\
    \ 3) {\n\t\t$temp = $l[$i];\n\t\tsort($temp);\n\t\t$l[$i] = $temp;\n\t}\n\treturn\
    \ $l;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpi3kaurlg.php\
    \ on line 12\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpi3kaurlg.php on line 12\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpi3kaurlg.php:22\nStack trace:\n#0 /tmp/tmpi3kaurlg.php(28): test()\n\
    #1 {main}\n  thrown in /tmp/tmpi3kaurlg.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$i = 0;\n\t$newList = array();\n\t\
    foreach ($l as $value) {\n\t\tif ($i % 3 != 0) {\n\t\t\tarray_push($newList, $value);\n\
    \t\t} else {\n\t\t\tsort($l);\n\t\t\tarray_push($newList, $l[0]);\n\t\t\tarray_shift($l);\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn $newList;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4r68toj.php:30\n\
    Stack trace:\n#0 /tmp/tmpj4r68toj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj4r68toj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $res = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        $res[$i] = $l[$i];\n    }\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $tmp = array();\n\
    \            for ($j = $i; $j < count($l); $j+=3) {\n                $tmp[] =\
    \ $l[$j];\n            }\n            for ($j = 0; $j < count($l); $j+=3) {\n\
    \                $tmp[] = $l[$j];\n            }\n            sort($tmp);\n  \
    \          for ($j = $i; $j < count($l); $j+=3) {\n                $res[$j] =\
    \ $tmp[$j - $i];\n            }\n            for ($j = 0; $j < count($l); $j+=3)\
    \ {\n                $res[$j] = $tmp[$j + count($l) - $i];\n            }\n  \
    \      }\n    }\n    return $res;\n}\n\n$l = [1, 2, 3];\nprint_r(sort_third($l));\n\
    echo \"\\n\";\n$l = [5, 6, 3, 4, 8, 9, 2];\nprint_r(sort_third($l));\necho \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => 2\n    [2] => 3\n)\n\nArray\n(\n    [0]\
    \ => 2\n    [1] => 6\n    [2] => 3\n    [3] => \n    [4] => 8\n    [5] => 9\n\
    \    [6] => \n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptf299p2e.php:47\n\
    Stack trace:\n#0 /tmp/tmptf299p2e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptf299p2e.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\t$sorted = array();\n\
    \tforeach ($l as $i => $e) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sorted[] = $e;\n\t\
    \t} else {\n\t\t\t$result[] = $e;\n\t\t}\n\t}\n\tsort($sorted);\n\tforeach ($sorted\
    \ as $i => $e) {\n\t\t$result[] = $e;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx24cz9a9.php:31\n\
    Stack trace:\n#0 /tmp/tmpx24cz9a9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx24cz9a9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$result[] = quicksort(array_slice($l,\
    \ $i, 3));\n\t\t} else {\n\t\t\t$result[] = $l[$i];\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quicksort() in\
    \ /tmp/tmpmo0ab6v3.php:13\nStack trace:\n#0 /tmp/tmpmo0ab6v3.php(22): sort_third(Array)\n\
    #1 /tmp/tmpmo0ab6v3.php(26): candidate(Array)\n#2 /tmp/tmpmo0ab6v3.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmo0ab6v3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_new = [];\n    $i = 0;\n    while\
    \ ($i < count($l)) {\n        if ($i % 3 == 0) {\n            $l_new[$i] = sort(array_slice($l,\
    \ $i, 3));\n        } else {\n            $l_new[$i] = $l[$i];\n        }\n  \
    \      $i = $i + 1;\n    }\n    return $l_new;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjlu24q8.php:27\n\
    Stack trace:\n#0 /tmp/tmptjlu24q8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptjlu24q8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $sortedList = array();\n  for ($i\
    \ = 0; $i < count($l); $i++) {\n    if ($i % 3 === 0) {\n      $num1 = $l[$i];\n\
    \      $num2 = $l[$i + 1];\n      $num3 = $l[$i + 2];\n      $sortedNums = [$num1,\
    \ $num2, $num3];\n      sort($sortedNums);\n      $sortedList[$i] = $sortedNums[0];\n\
    \      $sortedList[$i + 1] = $sortedNums[1];\n      $sortedList[$i + 2] = $sortedNums[2];\n\
    \    } else {\n      $sortedList[$i] = $l[$i];\n    }\n  }\n  return $sortedList;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t8pp6hd.php:33\n\
    Stack trace:\n#0 /tmp/tmp0t8pp6hd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0t8pp6hd.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l[2] = implode(',', $l[2]);\n \
    \   $l[2] = explode(',', $l[2]);\n    sort($l[2]);\n    $l[2] = implode(',', $l[2]);\n\
    \    $l[2] = explode(',', $l[2]);\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpzvb0j8w7.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvb0j8w7.php:22\n\
    Stack trace:\n#0 /tmp/tmpzvb0j8w7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzvb0j8w7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$new_l = [];\n\t$new_l[0] = $l[0];\n\
    \t$new_l[1] = $l[1];\n\t$new_l[2] = $l[2];\n\t$new_l[3] = $l[3];\n\t$new_l[4]\
    \ = $l[4];\n\t$new_l[5] = $l[5];\n\t$new_l[6] = $l[6];\n\t$new_l[7] = $l[7];\n\
    \t$new_l[8] = $l[8];\n\tsort($new_l[2]);\n\tsort($new_l[5]);\n\tsort($new_l[8]);\n\
    \treturn $new_l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp08wjr07a.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp08wjr07a.php on line 21\n\nWarning: sort() expects parameter 1 to be\
    \ array, null given in /tmp/tmp08wjr07a.php on line 22\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp08wjr07a.php:31\nStack trace:\n#0 /tmp/tmp08wjr07a.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp08wjr07a.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $new_list = [];\n  for ($i = 0; $i\
    \ < count($l); $i++) {\n    if ($i % 3 == 0) {\n      $new_list[$i] = sort_third_helper($l[$i]);\n\
    \    } else {\n      $new_list[$i] = $l[$i];\n    }\n  }\n  return $new_list;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmp2i6urx_m.php:13\nStack trace:\n#0 /tmp/tmp2i6urx_m.php(22): sort_third(Array)\n\
    #1 /tmp/tmp2i6urx_m.php(26): candidate(Array)\n#2 /tmp/tmp2i6urx_m.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2i6urx_m.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // Your code here\n    $res = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $temp = $l[$i];\n            sort($temp);\n            $res[$i] = $temp;\n\
    \        } else {\n            $res[$i] = $l[$i];\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpuhcviy63.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpuhcviy63.php on line 15\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpuhcviy63.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuhcviy63.php:29\nStack trace:\n#0 /tmp/tmpuhcviy63.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuhcviy63.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_p = [];\n    for ($i = 0; $i\
    \ < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $l_p[$i] = find_max($l,\
    \ $i);\n        } else {\n            $l_p[$i] = $l[$i];\n        }\n    }\n \
    \   return $l_p;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_max() in\
    \ /tmp/tmpfooisvlk.php:13\nStack trace:\n#0 /tmp/tmpfooisvlk.php(22): sort_third(Array)\n\
    #1 /tmp/tmpfooisvlk.php(26): candidate(Array)\n#2 /tmp/tmpfooisvlk.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfooisvlk.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$output = [];\n\t$output[0] = $l[0];\n\
    \t$output[1] = $l[1];\n\t$output[2] = sort_list($l[2]);\n\tfor ($i = 3; $i < count($l);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$output[$i] = sort_list($l[$i]);\n\t\t\
    } else {\n\t\t\t$output[$i] = $l[$i];\n\t\t}\n\t}\n\treturn $output;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmp6fl53h3g.php:13\nStack trace:\n#0 /tmp/tmp6fl53h3g.php(24): sort_third(Array)\n\
    #1 /tmp/tmp6fl53h3g.php(28): candidate(Array)\n#2 /tmp/tmp6fl53h3g.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6fl53h3g.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  if (count($l) < 3) {\n    return $l;\n\
    \  } else {\n    $l1 = array_slice($l, 0, 3);\n    $l2 = array_slice($l, 3);\n\
    \    return array_merge(array(count($l) % 3 == 0 ? sort($l1) : $l1), sort_third($l2));\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbms0f6q1.php:24\n\
    Stack trace:\n#0 /tmp/tmpbms0f6q1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbms0f6q1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$newl = array();\n\t$i = 0;\n\tforeach\
    \ ($l as $el) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$newl[] = $i;\n\t\t} else {\n\t\
    \t\t$newl[] = $el;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $newl;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4uuk_mn.php:28\n\
    Stack trace:\n#0 /tmp/tmpj4uuk_mn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj4uuk_mn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l3 = [];\n    $new_l = [];\n  \
    \  $c3 = 0;\n    $c = 0;\n    foreach ($l as $element) {\n        if ($c % 3 ==\
    \ 0) {\n            $l3[$c3] = $element;\n            $c3++;\n        }\n    \
    \    $c++;\n    }\n    sort($l3);\n    $c3 = 0;\n    $c = 0;\n    foreach ($l\
    \ as $element) {\n        if ($c % 3 == 0) {\n            $new_l[$c] = $l3[$c3];\n\
    \            $c3++;\n        } else {\n            $new_l[$c] = $element;\n  \
    \      }\n        $c++;\n    }\n    return $new_l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            sort(array_slice($l, $i, 3));\n \
    \       }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee6uy1xq.php:23\n\
    Stack trace:\n#0 /tmp/tmpee6uy1xq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpee6uy1xq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l1 = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            sort($l1);\n\
    \            array_push($l1, $l[$i]);\n        } else {\n            array_push($l1,\
    \ $l[$i]);\n        }\n    }\n    return $l1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2abj_s4h.php:27\n\
    Stack trace:\n#0 /tmp/tmp2abj_s4h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2abj_s4h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    // Instead of the third, you can\
    \ use the fourth, fifth, sixth, seventh, etc. elements.\n    $third_indices =\
    \ [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59,\
    \ 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98];\n    foreach ($third_indices\
    \ as $i) {\n        $third_elements[] = $l[$i];\n    }\n    sort($third_elements);\n\
    \    $i = 0;\n    foreach ($third_indices as $ind) {\n        $l[$ind] = $third_elements[$i];\n\
    \        $i++;\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2setx5lq.php:29\n\
    Stack trace:\n#0 /tmp/tmp2setx5lq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2setx5lq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l = array_values($l);\n    $l2\
    \ = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $subl = array_slice($l, $i, 3);\n            sort($subl);\n     \
    \       $l2 = array_merge($l2, $subl);\n        } else {\n            $l2[] =\
    \ $l[$i];\n        }\n    }\n    return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_a26jym.php:29\n\
    Stack trace:\n#0 /tmp/tmpb_a26jym.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb_a26jym.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 2; $i < count($l); $i +=\
    \ 3) {\n\t\t$sub_l = array_slice($l, $i - 2, 3);\n\t\tsort($sub_l);\n\t\t$l[$i\
    \ - 2] = $sub_l[0];\n\t\t$l[$i - 1] = $sub_l[1];\n\t\t$l[$i] = $sub_l[2];\n\t\
    }\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll9nz_5d.php:25\n\
    Stack trace:\n#0 /tmp/tmpll9nz_5d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpll9nz_5d.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $nl = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $s = array();\n\
    \            for ($j = $i; $j < $i + 3; $j++) {\n                array_push($s,\
    \ $l[$j]);\n            }\n            sort($s);\n            for ($j = $i; $j\
    \ < $i + 3; $j++) {\n                array_push($nl, $s[$j - $i]);\n         \
    \   }\n        } else {\n            array_push($nl, $l[$i]);\n        }\n   \
    \ }\n    return $nl;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm27fi8lu.php:33\n\
    Stack trace:\n#0 /tmp/tmpm27fi8lu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpm27fi8lu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$sorted = [];\n\t$r = $l;\n\tforeach\
    \ ($l as $index => $value) {\n\t\tif ($index % 3 == 0) {\n\t\t\tarray_push($sorted,\
    \ $value);\n\t\t\tsort($sorted);\n\t\t\t$l[$index] = $sorted[0];\n\t\t\tarray_shift($sorted);\n\
    \t\t}\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr86zti__.php:28\n\
    Stack trace:\n#0 /tmp/tmpr86zti__.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr86zti__.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $index = 0;\n  $newList = [];\n  while\
    \ ($index < count($l)) {\n    if (($index + 1) % 3 != 0) {\n      $newList[] =\
    \ $l[$index];\n    } else {\n      $triplet = array_slice($l, $index, 3);\n  \
    \    sort($triplet);\n      $newList = array_merge($newList, $triplet);\n    \
    \  $index += 2;\n    }\n    $index++;\n  }\n  return $newList;\n}\n\n$l = [1,\
    \ 2, 3];\n$l2 = [5, 6, 3, 4, 8, 9, 2];\necho \"Should be [1, 2, 3]\\n\";\nprint_r(sort_third($l));\n\
    echo \"Should be [2, 6, 3, 4, 8, 9, 5]\\n\";\nprint_r(sort_third($l2));\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Should be [1, 2, 3]\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    )\nShould be [2, 6, 3, 4, 8, 9, 5]\nArray\n(\n    [0] => 5\n    [1] => 6\n   \
    \ [2] => 3\n    [3] => 4\n    [4] => 8\n    [5] => 2\n    [6] => 9\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpr0an9s0d.php:37\nStack trace:\n\
    #0 /tmp/tmpr0an9s0d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpr0an9s0d.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$t = [];\n\t$j = 0;\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$j = array_slice($l,\
    \ $i, 3);\n\t\t\tsort($j);\n\t\t\tarray_push($t, $j);\n\t\t} else {\n\t\t\tarray_push($t,\
    \ $l[$i]);\n\t\t}\n\t}\n\treturn $t;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1ov3yh1.php:29\n\
    Stack trace:\n#0 /tmp/tmpn1ov3yh1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn1ov3yh1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $i = 0;\n    $result = array();\n\
    \    foreach ($l as $element) {\n        $result[$i] = $element;\n        $i++;\n\
    \    }\n    $i = 0;\n    foreach ($l as $element) {\n        if ($i % 3 == 0)\
    \ {\n            asort($result);\n        }\n        $i++;\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyadgmb3g.php:30\n\
    Stack trace:\n#0 /tmp/tmpyadgmb3g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyadgmb3g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_prime = array();\n\t$l_prime_three\
    \ = array();\n\t$i = 0;\n\tforeach ($l as $value) {\n\t\tif($i % 3 == 0) {\n\t\
    \t\t$l_prime_three[] = $value;\n\t\t}\n\t\t$l_prime[] = $value;\n\t\t$i++;\n\t\
    }\n\t$i = 0;\n\tsort($l_prime_three);\n\tforeach ($l_prime as $key => $value)\
    \ {\n\t\tif($key % 3 == 0) {\n\t\t\t$l_prime[$key] = $l_prime_three[$i];\n\t\t\
    \t$i++;\n\t\t}\n\t}\n\treturn $l_prime;\n}\nfunction candidate(...$args) {\n \
    \   return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$i = 0;\n\tforeach ($l as $e) {\n\t\
    \tif ($i % 3 == 0) {\n\t\t\t$l[$i] = sort_third_helper($e);\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmph0cd_jfu.php:13\nStack trace:\n#0 /tmp/tmph0cd_jfu.php(21): sort_third(Array)\n\
    #1 /tmp/tmph0cd_jfu.php(25): candidate(Array)\n#2 /tmp/tmph0cd_jfu.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmph0cd_jfu.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$retval = [];\n\tfor ($i = 0; $i <\
    \ count($l); $i++) {\n\t\tif ($i % 3 === 0) {\n\t\t\t$retval[$i] = $l[$i];\n\t\
    \t} else {\n\t\t\t$retval[$i] = $l[$i];\n\t\t}\n\t}\n\treturn $retval;\n}\n$l\
    \ = array(1, 2, 3);\nprint_r(sort_third($l));\n\n$l = array(5, 6, 3, 4, 8, 9,\
    \ 2);\nprint_r(sort_third($l));\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 6\n    [2] => 3\n    [3] => 4\n    [4] => 8\n    [5] => 9\n\
    \    [6] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxnf4ynv.php:31\n\
    Stack trace:\n#0 /tmp/tmpwxnf4ynv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwxnf4ynv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    //TODO\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotskunjr.php:18\n\
    Stack trace:\n#0 /tmp/tmpotskunjr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpotskunjr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $l2 = array();\n  for ($i = 0; $i\
    \ < count($l); $i++) {\n    if ($i % 3 == 0) {\n      $temp = $l[$i];\n      sort($temp);\n\
    \      $l2[$i] = $temp;\n    } else {\n      $l2[$i] = $l[$i];\n    }\n  }\n \
    \ return $l2;\n}\n\necho \"sort_third([1, 2, 3]) is \";\nvar_dump(sort_third([1,\
    \ 2, 3]));\necho \"<br />\";\necho \"sort_third([5, 6, 3, 4, 8, 9, 2]) is \";\n\
    var_dump(sort_third([5, 6, 3, 4, 8, 9, 2]));\necho \"<br />\";\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_third([1, 2, 3]) is \nWarning: sort() expects parameter 1 to be array,\
    \ int given in /tmp/tmpoubsjl76.php on line 14\narray(3) {\n  [0]=>\n  int(1)\n\
    \  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n<br />sort_third([5, 6, 3, 4, 8, 9,\
    \ 2]) is \nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpoubsjl76.php\
    \ on line 14\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpoubsjl76.php on line 14\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpoubsjl76.php on line 14\narray(7) {\n  [0]=>\n \
    \ int(5)\n  [1]=>\n  int(6)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n \
    \ int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(2)\n}\n<br />\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpoubsjl76.php on line 14\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpoubsjl76.php on\
    \ line 14\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpoubsjl76.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoubsjl76.php:35\n\
    Stack trace:\n#0 /tmp/tmpoubsjl76.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpoubsjl76.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_prime = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\t$l_prime[$i] = $l[$i];\n\t}\n\tfor ($i = 2; $i\
    \ < count($l); $i += 3) {\n\t\tfor ($j = $i + 1; $j < count($l); $j++) {\n\t\t\
    \tif ($l[$j] < $l[$i]) {\n\t\t\t\t$l_prime[$i] = $l[$j];\n\t\t\t\t$l_prime[$j]\
    \ = $l[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $l_prime;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmtcynca.php:30\n\
    Stack trace:\n#0 /tmp/tmpxmtcynca.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxmtcynca.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$i = 0;\n\t$ret = array();\n\twhile\
    \ ($i < count($l)) {\n\t\t$k = $i + 1;\n\t\t$tmp = array();\n\t\twhile ($k % 3\
    \ != 0 && $k < count($l)) {\n\t\t\t$tmp[] = $l[$k];\n\t\t\t$k++;\n\t\t}\n\t\t\
    if ($k % 3 == 0) {\n\t\t\t$tmp[] = $l[$k];\n\t\t\t$ret = array_merge($ret, $tmp);\n\
    \t\t\t$tmp = sort($tmp);\n\t\t\t$ret = array_merge($ret, $tmp);\n\t\t}\n\t\t$i\
    \ = $k + 1;\n\t}\n\treturn $ret;\n}\n\n/*\nfunction candidate(...$args) {\n  \
    \  return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 30 in /tmp/tmp39vx071x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$lprime = $l;\n\t$i = 2;\n\twhile\
    \ ($i < count($l)) {\n\t\t$j = $i;\n\t\twhile ($j >= 3 && $l[$j - 3] > $l[$j])\
    \ {\n\t\t\t$temp = $l[$j - 3];\n\t\t\t$l[$j - 3] = $l[$j];\n\t\t\t$l[$j] = $temp;\n\
    \t\t\t$j -= 3;\n\t\t}\n\t\t$i += 3;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1a6q24ux.php:30\n\
    Stack trace:\n#0 /tmp/tmp1a6q24ux.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1a6q24ux.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = array();\n    foreach\
    \ ($l as $key => $value) {\n        if ($key % 3 === 0) {\n            $chunk\
    \ = array_slice($l, $key, 3);\n            sort($chunk);\n            $result\
    \ = array_merge($result, $chunk);\n        } else {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ucrh0em.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ucrh0em.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0ucrh0em.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$new_l = array();\n\t$sub_l = array();\n\
    \t$sub_l_index = 0;\n\t$sub_l_modified = 0;\n\tforeach ($l as $index => $value)\
    \ {\n\t\tif ($index % 3 == 0) {\n\t\t\tif ($sub_l_modified == 1) {\n\t\t\t\t$new_l[$sub_l_index]\
    \ = $sub_l;\n\t\t\t\t$sub_l_modified = 0;\n\t\t\t}\n\t\t\t$sub_l = array();\n\t\
    \t\t$sub_l_index = $index;\n\t\t}\n\t\t$sub_l[] = $value;\n\t\t$sub_l_modified\
    \ = 1;\n\t}\n\tif ($sub_l_modified == 1) {\n\t\t$new_l[$sub_l_index] = $sub_l;\n\
    \t}\n\tforeach ($new_l as $index => $sub_l) {\n\t\tsort($sub_l);\n\t\t$new_l[$index]\
    \ = $sub_l;\n\t}\n\t$l_index = 0;\n\tforeach ($new_l as $index => $sub_l) {\n\t\
    \tforeach ($sub_l as $sub_l_index => $value) {\n\t\t\t$l[$l_index] = $value;\n\
    \t\t\t$l_index++;\n\t\t}\n\t}\n\treturn $l;\n}\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnifhad45.php:47\n\
    Stack trace:\n#0 /tmp/tmpnifhad45.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnifhad45.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  // Your Code Here\n  $sorted = array();\n\
    \  $unsorted = array();\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i %\
    \ 3 == 0) {\n      $sorted[] = $l[$i];\n    } else {\n      $unsorted[] = $l[$i];\n\
    \    }\n  }\n  sort($sorted);\n  for ($i = 0; $i < count($sorted); $i++) {\n \
    \   $unsorted[] = $sorted[$i];\n  }\n  return $unsorted;\n}\necho \"sort_third([1,\
    \ 2, 3]) expected [1, 2, 3] result: \";\nprint_r(sort_third([1, 2, 3]));\necho\
    \ \"sort_third([5, 6, 3, 4, 8, 9, 2]) expected [2, 6, 3, 4, 8, 9, 5] result: \"\
    ;\nprint_r(sort_third([5, 6, 3, 4, 8, 9, 2]));\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sort_third([1, 2, 3]) expected [1, 2, 3] result: Array\n(\n    [0] => 2\n\
    \    [1] => 3\n    [2] => 1\n)\nsort_third([5, 6, 3, 4, 8, 9, 2]) expected [2,\
    \ 6, 3, 4, 8, 9, 5] result: Array\n(\n    [0] => 6\n    [1] => 3\n    [2] => 8\n\
    \    [3] => 9\n    [4] => 2\n    [5] => 4\n    [6] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7muzjw2o.php:35\nStack trace:\n#0 /tmp/tmp7muzjw2o.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7muzjw2o.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_result = array();\n\tfor ($i =\
    \ 0; $i < count($l); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$l_result[] = sort_list(array($l[$i],\
    \ $l[$i + 1], $l[$i + 2]));\n\t\t} else {\n\t\t\t$l_result[] = $l[$i];\n\t\t}\n\
    \t}\n\treturn $l_result;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpeemuzt1c.php:13\nStack trace:\n#0 /tmp/tmpeemuzt1c.php(22): sort_third(Array)\n\
    #1 /tmp/tmpeemuzt1c.php(26): candidate(Array)\n#2 /tmp/tmpeemuzt1c.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeemuzt1c.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $result = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $result[] =\
    \ sort_third_helper($l[$i]);\n        } else {\n            $result[] = $l[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmp_j5sgz33.php:13\nStack trace:\n#0 /tmp/tmp_j5sgz33.php(22): sort_third(Array)\n\
    #1 /tmp/tmp_j5sgz33.php(26): candidate(Array)\n#2 /tmp/tmp_j5sgz33.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_j5sgz33.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tforeach ($l\
    \ as $i => $value) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$result[] = sort_helper($value);\n\
    \t\t} else {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_helper()\
    \ in /tmp/tmpcly5qnkk.php:13\nStack trace:\n#0 /tmp/tmpcly5qnkk.php(22): sort_third(Array)\n\
    #1 /tmp/tmpcly5qnkk.php(26): candidate(Array)\n#2 /tmp/tmpcly5qnkk.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcly5qnkk.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l = [1, 2, 3];\n    $m = [];\n\
    \    $n = [];\n    $res = [];\n    $count = 0;\n    $count2 = 0;\n    foreach\
    \ ($l as $key => $val) {\n        if ($key%3==0) {\n            $m[$count]=$val;\n\
    \            $count++;\n        }\n        else {\n            $n[$count2]=$val;\n\
    \            $count2++;\n        }\n    }\n    $m = sort($m);\n    for ($i=0;\
    \ $i<count($m); $i++) {\n        array_push($res, $m[$i]);\n    }\n    for ($i=0;\
    \ $i<count($n); $i++) {\n        array_push($res, $n[$i]);\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjq71lb0g.php on line 27\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpjq71lb0g.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq71lb0g.php:40\n\
    Stack trace:\n#0 /tmp/tmpjq71lb0g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjq71lb0g.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l_count = count($l);\n\t$l_prime\
    \ = array();\n\tfor ($i = 0; $i < $l_count; $i++) {\n\t\tif ($i % 3 == 0) {\n\t\
    \t\t$l_prime[$i] = $l[$i];\n\t\t\tsort($l_prime[$i]);\n\t\t} else {\n\t\t\t$l_prime[$i]\
    \ = $l[$i];\n\t\t}\n\t}\n\treturn $l_prime;\n}\n$l = array(1, 2, 3);\nprint_r(sort_third($l));\n\
    echo \"</br>\";\n$l = array(5, 6, 3, 4, 8, 9, 2);\nprint_r(sort_third($l));\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpgpve7prb.php\
    \ on line 15\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n</br>\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpgpve7prb.php on\
    \ line 15\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpgpve7prb.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpgpve7prb.php on line 15\nArray\n(\n    [0] => 5\n    [1] => 6\n    [2]\
    \ => 3\n    [3] => 4\n    [4] => 8\n    [5] => 9\n    [6] => 2\n)\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpgpve7prb.php on\
    \ line 15\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpgpve7prb.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpgpve7prb.php on line 15\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgpve7prb.php:32\nStack trace:\n#0 /tmp/tmpgpve7prb.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgpve7prb.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $arr = array();\n    $sorted = array();\n\
    \    foreach ($l as $i => $item) {\n        if ($i % 3 === 0) {\n            array_push($arr,\
    \ $item);\n        }\n    }\n    sort($arr);\n    foreach ($l as $i => $item)\
    \ {\n        if ($i % 3 === 0) {\n            array_push($sorted, array_shift($arr));\n\
    \        } else {\n            array_push($sorted, $item);\n        }\n    }\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  // We need to only sort the elements\
    \ that are at indicies divisible by three.\n  // This is a task where we need\
    \ to index into our original list with a separate list.\n  // We can use array_filter()\
    \ to generate a list of indicies of $l that are divisible by three.\n  // We then\
    \ need to use this index to sort only the elements at those indicies.\n  // To\
    \ do this, we can use a combination of array_map() and array_filter() to map the\
    \ index list to its values, and then sort those values.\n  // We then will want\
    \ to assign these newly sorted values to the index list we created.\n  // We can\
    \ use array_combine() for this.\n  // Our final step will be to combine this list\
    \ with the list containing the rest of our elements, which we can generate by\
    \ using array_filter() to get a list of the indicies of $l that are not divisible\
    \ by three, and then indexing into $l with that list.\n  // We can then use array_merge()\
    \ to merge the results.\n  $indexes = array_filter(range(0, count($l) - 1), function($index)\
    \ { return $index % 3 == 0; });\n  $sorted = array_map(function($index) use ($l)\
    \ { return $l[$index]; }, $indexes);\n  sort($sorted);\n  $sorted = array_combine($indexes,\
    \ $sorted);\n  $rest = array_filter(range(0, count($l) - 1), function($index)\
    \ { return $index % 3 != 0; });\n  $rest = array_map(function($index) use ($l)\
    \ { return $l[$index]; }, $rest);\n  return array_merge($sorted, $rest);\n}\n\n\
    function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr4lcwl1.php:33\n\
    Stack trace:\n#0 /tmp/tmpmr4lcwl1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmr4lcwl1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l1 = [];\n    $l2 = [];\n    $l3\
    \ = [];\n    $l_index = 0;\n    foreach ($l as $value) {\n        if ($l_index\
    \ % 3 == 0) {\n            $l1[] = $value;\n        } else if ($l_index % 3 ==\
    \ 1) {\n            $l2[] = $value;\n        } else {\n            $l3[] = $value;\n\
    \        }\n        $l_index++;\n    }\n    $new_l = [];\n    for ($i = 0; $i\
    \ < $l_index; $i++) {\n        if ($i % 3 == 0) {\n            $new_l[] = $l1[intdiv($i,\
    \ 3)];\n        } else if ($i % 3 == 1) {\n            $new_l[] = $l2[intdiv($i,\
    \ 3)];\n        } else {\n            $new_l[] = $l3[intdiv($i, 3)];\n       \
    \ }\n    }\n    sort($l3);\n    $new_l3 = [];\n    $l3_index = 0;\n    for ($i\
    \ = 0; $i < $l_index; $i++) {\n        if ($i % 3 == 2) {\n            $new_l3[]\
    \ = $l3[$l3_index];\n            $l3_index++;\n        }\n    }\n    $l3_index\
    \ = 0;\n    for ($i = 0; $i < $l_index; $i++) {\n        if ($i % 3 == 2) {\n\
    \            $new_l[$i] = $new_l3[$l3_index];\n            $l3_index++;\n    \
    \    }\n    }\n    return $new_l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkq53mxg.php:58\n\
    Stack trace:\n#0 /tmp/tmpbkq53mxg.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpbkq53mxg.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ( $i % 3 == 0) {\n\t\t\t$sorted_part = sort_array(array_slice($l,\
    \ $i, 3));\n\t\t\tfor ($j = 0; $j < count($sorted_part); $j++) {\n\t\t\t\t$l[$i\
    \ + $j] = $sorted_part[$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpwq29kjcs.php:12\nStack trace:\n#0 /tmp/tmpwq29kjcs.php(22): sort_third(Array)\n\
    #1 /tmp/tmpwq29kjcs.php(26): candidate(Array)\n#2 /tmp/tmpwq29kjcs.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwq29kjcs.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $e = array();\n  $f = array();\n \
    \ $g = array();\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 3 == 0)\
    \ {\n      array_push($e, $l[$i]);\n    } else {\n      array_push($f, $l[$i]);\n\
    \    }\n  }\n  sort($e);\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i %\
    \ 3 == 0) {\n      array_push($g, $e[$i / 3]);\n    } else {\n      array_push($g,\
    \ $f[$i - (floor($i / 3) + 1)]);\n    }\n  }\n  return $g;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 2; $i < count($l); $i\
    \ += 3) {\n        $subl = array_slice($l, $i - 2, 3);\n        sort($subl);\n\
    \        array_splice($l, $i - 2, 3, $subl);\n    }\n    return $l;\n}\n\necho\
    \ var_dump(sort_third([1, 2, 3]));\necho \"<br>\";\necho var_dump(sort_third([5,\
    \ 6, 3, 4, 8, 9, 2]));\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n\
    <br>array(7) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(4)\n  [4]=>\n  int(8)\n  [5]=>\n  int(9)\n  [6]=>\n  int(2)\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpd0qas078.php:26\nStack trace:\n\
    #0 /tmp/tmpd0qas078.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd0qas078.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiblxl6oa.php:18\n\
    Stack trace:\n#0 /tmp/tmpiblxl6oa.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpiblxl6oa.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l2 = $l;\n\tfor ($i = 2; $i < count($l);\
    \ $i += 3) {\n\t\t$l2[$i] = sort_all([$l[$i - 2], $l[$i - 1], $l[$i]]);\n\t}\n\
    \treturn $l2;\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_all() in\
    \ /tmp/tmpdgqiyst8.php:12\nStack trace:\n#0 /tmp/tmpdgqiyst8.php(18): sort_third(Array)\n\
    #1 /tmp/tmpdgqiyst8.php(22): candidate(Array)\n#2 /tmp/tmpdgqiyst8.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdgqiyst8.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$pos = 1;\n\t$new_arr = array();\n\
    \tforeach ($l as $i) {\n\t\tif ($pos % 3 == 0) {\n\t\t\t$new_arr[] = sort_third_helper($l[$pos\
    \ - 1], $l[$pos], $l[$pos + 1]);\n\t\t\t$pos += 2;\n\t\t} else {\n\t\t\t$new_arr[]\
    \ = $i;\n\t\t}\n\t\t$pos++;\n\t}\n\treturn $new_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmpokdv4n93.php:14\nStack trace:\n#0 /tmp/tmpokdv4n93.php(25): sort_third(Array)\n\
    #1 /tmp/tmpokdv4n93.php(29): candidate(Array)\n#2 /tmp/tmpokdv4n93.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpokdv4n93.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  for ($i = 0; $i < count($l); $i =\
    \ $i + 3) {\n    $ls = $l;\n    for ($j = $i; $j < $i + 3; $j++) {\n      for\
    \ ($k = $j + 1; $k < $i + 3; $k++) {\n        if ($ls[$j] > $ls[$k]) {\n     \
    \     $tmp = $ls[$j];\n          $ls[$j] = $ls[$k];\n          $ls[$k] = $tmp;\n\
    \        }\n      }\n    }\n    for ($m = $i; $m < $i + 3; $m++) {\n      $l[$m]\
    \ = $ls[$m];\n    }\n  }\n  return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaaezgpw.php:33\n\
    Stack trace:\n#0 /tmp/tmpgaaezgpw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgaaezgpw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$result = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 3 != 0) {\n\t\t\t$result[$i] = $l[$i];\n\
    \t\t} else {\n\t\t\tsort($l);\n\t\t\t$result[$i] = $l[$i];\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgsq87xn.php:26\n\
    Stack trace:\n#0 /tmp/tmphgsq87xn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphgsq87xn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $n = count($l);\n  for ($i = 2; $i\
    \ < $n; $i += 3) {\n    $s = $l[$i];\n    for ($j = $i + 3; $j < $n; $j += 3)\
    \ {\n      if ($l[$j] < $s) {\n        $s = $l[$j];\n        $l[$j] = $l[$i];\n\
    \        $l[$i] = $s;\n      }\n    }\n  }\n  return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3me64bc.php:28\n\
    Stack trace:\n#0 /tmp/tmpb3me64bc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb3me64bc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $l[2] = sort($l[2]);\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpoqnb5dbl.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqnb5dbl.php:19\n\
    Stack trace:\n#0 /tmp/tmpoqnb5dbl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpoqnb5dbl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_prime = array();\n    $l_slice\
    \ = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $l_slice[] = $l[$i];\n        } else {\n            $l_prime[]\
    \ = $l[$i];\n        }\n    }\n    sort($l_slice);\n    return array_merge($l_prime,\
    \ $l_slice);\n}\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6ez271h.php:28\n\
    Stack trace:\n#0 /tmp/tmpf6ez271h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpf6ez271h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $length = count($l);\n    $result\
    \ = array();\n    for ($i = 0; $i < $length; $i++) {\n        if ($i % 3 == 0)\
    \ {\n            $tmp_l = array();\n            for ($j = $i; $j < $i + 3; $j++)\
    \ {\n                array_push($tmp_l, $l[$j]);\n            }\n            sort($tmp_l);\n\
    \            $result = array_merge($result, $tmp_l);\n        } else {\n     \
    \       array_push($result, $l[$i]);\n        }\n    }\n    return $result;\n\
    }\n$l = array(5, 6, 3, 4, 8, 9, 2);\nprint_r(sort_third($l));\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 6\n    [3] => 6\n    [4]\
    \ => 3\n    [5] => 4\n    [6] => 8\n    [7] => 9\n    [8] => 8\n    [9] => 9\n\
    \    [10] => \n    [11] => \n    [12] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8f90kusp.php:33\nStack trace:\n#0 /tmp/tmp8f90kusp.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8f90kusp.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l_sorted = $l;\n    $i = 0;\n \
    \   while ($i < count($l_sorted)) {\n        if ($i % 3 == 0) {\n            $i_next\
    \ = $i + 1;\n            $i_next_next = $i + 2;\n            if ($l_sorted[$i]\
    \ > $l_sorted[$i_next]) {\n                $temp = $l_sorted[$i];\n          \
    \      $l_sorted[$i] = $l_sorted[$i_next];\n                $l_sorted[$i_next]\
    \ = $temp;\n            }\n            if ($l_sorted[$i_next] > $l_sorted[$i_next_next])\
    \ {\n                $temp = $l_sorted[$i_next];\n                $l_sorted[$i_next]\
    \ = $l_sorted[$i_next_next];\n                $l_sorted[$i_next_next] = $temp;\n\
    \            }\n            if ($l_sorted[$i] > $l_sorted[$i_next]) {\n      \
    \          $temp = $l_sorted[$i];\n                $l_sorted[$i] = $l_sorted[$i_next];\n\
    \                $l_sorted[$i_next] = $temp;\n            }\n        }\n     \
    \   $i++;\n    }\n    return $l_sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpww0ujcb9.php:42\n\
    Stack trace:\n#0 /tmp/tmpww0ujcb9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpww0ujcb9.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\tfor ($i = 2; $i < count($l); $i+=3)\
    \ {\n\t\tsort_array($l, $i, $i);\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpij7chif0.php:11\nStack trace:\n#0 /tmp/tmpij7chif0.php(17): sort_third(Array)\n\
    #1 /tmp/tmpij7chif0.php(21): candidate(Array)\n#2 /tmp/tmpij7chif0.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpij7chif0.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $new_l = [];\n  for ($i = 0; $i <\
    \ count($l); $i++) {\n    $item = $l[$i];\n    if ($i % 3 === 0) {\n      // sort\n\
    \      $new_l[$i] = sort_helper($item);\n    } else {\n      $new_l[$i] = $item;\n\
    \    }\n  }\n  return $new_l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_helper()\
    \ in /tmp/tmpmokt151_.php:15\nStack trace:\n#0 /tmp/tmpmokt151_.php(24): sort_third(Array)\n\
    #1 /tmp/tmpmokt151_.php(28): candidate(Array)\n#2 /tmp/tmpmokt151_.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmokt151_.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  $i = 0;\n  $new = array();\n  foreach\
    \ ($l as $item) {\n    if ($i % 3 == 0) {\n      $i++;\n      $sorted = $l;\n\
    \      sort($sorted);\n      $new[] = $sorted[0];\n    } else {\n      $i++;\n\
    \      $new[] = $item;\n    }\n  }\n  return $new;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zpoi0wi.php:31\n\
    Stack trace:\n#0 /tmp/tmp8zpoi0wi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8zpoi0wi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t// TODO: Implement this function.\n\
    \t\n\tfor($i = 2; $i < sizeof($l); $i += 3) {\n\t\tfor($j = 0; $j < $i; $j++)\
    \ {\n\t\t\tif($l[$j] > $l[$i]) {\n\t\t\t\t$tmp = $l[$j];\n\t\t\t\t$l[$j] = $l[$i];\n\
    \t\t\t\t$l[$i] = $tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk874cr9n.php:28\n\
    Stack trace:\n#0 /tmp/tmpk874cr9n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk874cr9n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$keys = array_keys($l);\n\tfor ($i\
    \ = 2; $i < count($l); $i += 3) {\n\t\t$_ = $l[$keys[$i]];\n\t\tunset($l[$keys[$i]]);\n\
    \t\tasort($l);\n\t\t$l[$keys[$i]] = $_;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6xzpyap.php:25\n\
    Stack trace:\n#0 /tmp/tmpx6xzpyap.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx6xzpyap.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $l3 = array();\n    $index = 0;\n\
    \    foreach ($l as $i) {\n        if ($index % 3 == 0) {\n            array_push($l3,\
    \ $i);\n        }\n        $index++;\n    }\n    sort($l3);\n    $index = 0;\n\
    \    $count = 0;\n    foreach ($l as $i) {\n        if ($index % 3 == 0) {\n \
    \           $l[$index] = $l3[$count];\n            $count++;\n        }\n    \
    \    $index++;\n    }\n    return $l;\n}\n\necho implode(', ', sort_third([1,\
    \ 2, 3]));\necho \"\\n\";\necho implode(', ', sort_third([5, 6, 3, 4, 8, 9, 2]));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sort_third(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !==\
    \ array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4,\
    \ 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8,\
    \ 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 2, 3\n2, 6, 3, 4, 8, 9, 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n\t$l0 = array();\n\t$l1 = array();\n\
    \t$l2 = array();\n\tforeach ($l as $i => $e) {\n\t\tif ($i % 3 == 0) {\n\t\t\t\
    $l0[] = $e;\n\t\t} else if ($i % 3 == 1) {\n\t\t\t$l1[] = $e;\n\t\t} else {\n\t\
    \t\t$l2[] = $e;\n\t\t}\n\t}\n\t$l0 = merge_sort($l0);\n\t$l1 = merge_sort($l1);\n\
    \t$l2 = merge_sort($l2);\n\t$l = array();\n\tforeach ($l0 as $i => $e) {\n\t\t\
    $l[] = $e;\n\t\t$l[] = $l1[$i];\n\t\t$l[] = $l2[$i];\n\t}\n\treturn $l;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpvkko5sd2.php:22\nStack trace:\n#0 /tmp/tmpvkko5sd2.php(34): sort_third(Array)\n\
    #1 /tmp/tmpvkko5sd2.php(38): candidate(Array)\n#2 /tmp/tmpvkko5sd2.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvkko5sd2.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    $sublists = array_chunk($l, 3);\n\
    \    for ($i = 0; $i < count($sublists); $i++) {\n        if (count($sublists[$i])\
    \ == 3) {\n            sort($sublists[$i]);\n        }\n    }\n    return flatten($sublists);\n\
    }\nfunction candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6,\
    \ 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function flatten() in\
    \ /tmp/tmprfq71qur.php:16\nStack trace:\n#0 /tmp/tmprfq71qur.php(19): sort_third(Array)\n\
    #1 /tmp/tmprfq71qur.php(23): candidate(Array)\n#2 /tmp/tmprfq71qur.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmprfq71qur.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n  return array_map(function($val, $index)\
    \ use ($l) {\n    if ($index % 3 == 0) {\n      return sort_third_helper($val);\n\
    \    } else {\n      return $val;\n    }\n  }, $l, array_keys($l));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4,\
    \ 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2,\
    \ 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_third_helper()\
    \ in /tmp/tmprf4a1xzr.php:12\nStack trace:\n#0 [internal function]: {closure}(5,\
    \ 0)\n#1 /tmp/tmprf4a1xzr.php(16): array_map(Object(Closure), Array, Array)\n\
    #2 /tmp/tmprf4a1xzr.php(20): sort_third(Array)\n#3 /tmp/tmprf4a1xzr.php(24): candidate(Array)\n\
    #4 /tmp/tmprf4a1xzr.php(30): test()\n#5 {main}\n  thrown in /tmp/tmprf4a1xzr.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n// to the\
    \ values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3,\
    \ 4, 8, 9, 5]\nfunction sort_third($l) {\n    for ($i = 0; $i < count($l); $i\
    \ += 3) {\n        sort($l[$i]);\n    }\n    return $l;\n}\n$l = [1, 2, 3];\n\
    echo sort_third($l)[0] . \"\\n\";\necho sort_third($l)[1] . \"\\n\";\necho sort_third($l)[2]\
    \ . \"\\n\";\n$l = [5, 6, 3, 4, 8, 9, 2];\necho sort_third($l)[0] . \"\\n\";\n\
    echo sort_third($l)[1] . \"\\n\";\necho sort_third($l)[2] . \"\\n\";\necho sort_third($l)[3]\
    \ . \"\\n\";\necho sort_third($l)[4] . \"\\n\";\necho sort_third($l)[5] . \"\\\
    n\";\necho sort_third($l)[6] . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2,\
    \ 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2,\
    \ 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php\
    \ on line 11\n1\n\nWarning: sort() expects parameter 1 to be array, int given\
    \ in /tmp/tmpdbsm62tk.php on line 11\n2\n\nWarning: sort() expects parameter 1\
    \ to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n3\n\nWarning: sort()\
    \ expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n\
    \nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpdbsm62tk.php on line 11\n5\n\nWarning: sort() expects parameter 1 to\
    \ be array, int given in /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on\
    \ line 11\n6\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n3\n\n\
    Warning: sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpdbsm62tk.php on line 11\n4\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on\
    \ line 11\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php\
    \ on line 11\n8\n\nWarning: sort() expects parameter 1 to be array, int given\
    \ in /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects parameter 1 to\
    \ be array, int given in /tmp/tmpdbsm62tk.php on line 11\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpdbsm62tk.php on line 11\n9\n\n\
    Warning: sort() expects parameter "
  stderr: ''
  exit_code: 255
  status: Exception
