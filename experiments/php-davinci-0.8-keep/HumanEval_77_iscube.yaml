name: HumanEval_77_iscube
language: php
prompt: "<?php\n// Write a function that takes an integer a and returns True \n//\
  \ if this ingeger is a cube of some integer number.\n// Note: you may assume the\
  \ input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==>\
  \ False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n\
  // iscube(180) ==> False\nfunction iscube($a) {\n"
tests: "function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729)\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$d = pow($a, 1/3);\n\treturn floor($d) == $d;\n}\necho iscube(64);",
  "    return (bool)$a && is_int(pow($a, 1/3));\n}\n", "\tif (pow($a, 1/3) == round(pow($a,\
    \ 1/3))) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "\t$b =\
    \ sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c == $a) {\n\t\treturn 'True';\n\t}\
    \ else {\n\t\treturn 'False';\n\t}\n}\n\necho iscube(1);\necho \"<br>\";\necho\
    \ iscube(2);\necho \"<br>\";\necho iscube(-1);\necho \"<br>\";\necho iscube(64);\n\
    echo \"<br>\";\necho iscube(0);\necho \"<br>\";\necho iscube(180);\necho \"<br>\"\
    ;", "    return is_numeric(round(pow($a, 1/3), 0));\n}\n", "  return ((pow((int)abs($a),\
    \ 1 / 3) % 1) == 0);\n}", "\t$result = is_int(cbrt($a));\n\treturn $result;\n\
    }\nvar_dump(iscube(64));", "\tif ($a === 0) {\n\t\treturn True;\n\t} else {\n\t\
    \treturn is_int(pow($a, 1/3));\n\t}\n}\n\necho iscube(1);\necho iscube(2);\necho\
    \ iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);", "\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t} else if ($a == 1) {\n\t\treturn true;\n\t} else\
    \ if ($a == -1) {\n\t\treturn true;\n\t} else if (pow(round(pow($a, 1/3)), 3)\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "    return\
    \ ($a >= 0) ? ((pow($a, 1 / 3) % 1 == 0) ? TRUE : FALSE) : TRUE;\n}\necho iscube(180);",
  "  $numbers = range(0, abs($a));\n  return in_array(pow($a, 1/3), $numbers);\n}\n\
    \necho iscube(1);", "    return (pow($a, 1/3) - intval(pow($a, 1/3)) == 0);\n}",
  "    return $a == intval(pow($a, 1/3));\n}", "  if ($a < 0) {\n    $a = abs($a);\n\
    \  }\n  $i = 1;\n  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n\
    \      return true;\n    }\n    $i++;\n  }\n  return false;\n}\necho iscube(64)\
    \ . \"\\n\";", "\t$result = false;\n\tif ($a == 0) {\n\t\t$result = true;\n\t\
    } elseif ($a > 0) {\n\t\t$i = 1;\n\t\twhile ($i <= $a / 3) {\n\t\t\tif ($i * $i\
    \ * $i == $a) {\n\t\t\t\t$result = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\
    \t\t}\n\t} else {\n\t\t$i = -1;\n\t\twhile ($i >= $a / 3) {\n\t\t\tif ($i * $i\
    \ * $i == $a) {\n\t\t\t\t$result = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i--;\n\
    \t\t}\n\t}\n\treturn $result;\n}\necho iscube(81);\n", "  if ($a == 0) {\n   \
    \ return true;\n  }\n  $i = 1;\n  while ($i * $i * $i < abs($a)) {\n    $i++;\n\
    \  }\n  return $i * $i * $i == abs($a);\n}", "    return ($a == 0 || $a == 1 ||\
    \ $a == -1) ? True : sqrt($a) == intval(sqrt($a));\n}", "\tif ($a == 0) {\n\t\t\
    return true;\n\t}\n\tif ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\tfor ($i = 1; $i\
    \ < $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\
    }\n\treturn false;\n}\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho\
    \ iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho\
    \ iscube(180).\"\\n\";", "    if($a>0){\n        return isset(exp($a, 1/3)) &&\
    \ $a==exp($a, 1/3);\n    }\n    return true;\n}\necho iscube(64);\n\n", "    if\
    \ ($a < 0) $a = -1 * $a;\n    if ($a == 0) return true;\n    for ($i = 1; $i <\
    \ $a / 2; $i++) {\n        if ($i ** 3 == $a) return true;\n    }\n    return\
    \ false;\n}\necho iscube(0) . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(5)\
    \ . PHP_EOL;\necho iscube(27) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(100)\
    \ . PHP_EOL;", "    return $a !== 1 && $a !== 0 && $a % 2 !== 0 ? false : true;\n\
    }", "    $i = 1;\n    while($i * $i * $i <= $a) {\n        if ($i * $i * $i ==\
    \ $a) {\n            return true;\n        }\n        $i++;\n    }\n    return\
    \ false;\n}", "    $cube = pow($a, 1/3);\n    if(is_int($cube)){\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\necho iscube(0);", "  if($a<0)\
    \ $a*=-1;\n  return is_int(cbrt($a));\n}\n\necho iscube(0) ? 'TRUE' : 'FALSE';\n",
  "  return is_int(pow($a, 1/3));\n}\n", "    return is_numeric(pow($a, 1/3));\n}",
  "  return $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\n\
    echo iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"\
    <br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\n", "    return\
    \ ($a >= 0) ? ((int)pow($a, 1/3) == pow($a, 1/3)) : (abs($a) == 1);\n}", "  $power\
    \ = round(log($a, 3));\n  return ($a == pow($power, 3));\n}\necho iscube(64) .\
    \ \"<br>\";\necho iscube(65) . \"<br>\";\necho iscube(0) . \"<br>\";", "    if\
    \ ($a == 0) {\n        return true;\n    }\n    return ($a < 0) ? iscube(-$a)\
    \ : is_int(pow($a, 1 / 3));\n}\necho iscube(125);", "    return sqrt($a) == intval(sqrt($a));\n\
    }\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);", "    return is_numeric(pow($a, 1/3));\n}", " \
    \ return is_int(cbrt($a));\n}\n", '}', "    return is_int(cbrt($a));\n}", "  \
    \  // your code\n}\necho iscube(0);", "  return $a == pow($a, 1/3);\n}\n", " \
    \   if ($a < 0) {\n        $a = $a * -1;\n    }\n    $root = pow($a, 1/3);\n \
    \   $temp = intval($root);\n    $cube = pow($temp, 3);\n    if ($cube == $a) {\n\
    \        return \"True\";\n    } else {\n        return \"False\";\n    }\n}\n\
    echo iscube(0);", "    if($a < 0) {\n        $a = abs($a);\n    }\n    if(pow(round(pow($a,\
    \ 1/3)), 3) == $a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "    if ($a == 0) {\n        return true;\n    }\n    $b = $a / abs($a);\n\
    \    $b = $b * pow(abs($a), 1 / 3);\n    if (is_integer($b)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}", "\t$cube = pow($a, 1\
    \ / 3);\n\treturn is_int($cube);\n}", "  if ($a < 0) {\n    $a = -$a;\n  }\n \
    \ for ($i = 0; $i <= $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return\
    \ True;\n    }\n  }\n  return False;\n}", '//  if(pow($a, 1/3)%1 == 0){', "\t\
    if ($a == 0) {\n\t\treturn True;\n\t}\n\t$b = round(pow($a, 1 / 3));\n\tif (pow($b,\
    \ 3) == $a) {\n\t\treturn True;\n\t}\n\treturn False;\n}\necho(iscube(1) . \"\
    <br>\");\necho(iscube(0) . \"<br>\");\necho(iscube(180) . \"<br>\");", "\treturn\
    \ is_int(pow($a, 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "    if ($a == 1 || $a\
    \ == 0 || $a == -1) {\n        return True;\n    } elseif ($a < -1 || $a > 1)\
    \ {\n        $num = $a;\n        while ($num < 0) {\n            $num = $num +\
    \ 1;\n        }\n        for ($i = 1; $i < $num; $i++) {\n            if (pow($i,\
    \ 3) == $num) {\n                return True;\n            }\n        }\n    \
    \    return False;\n    }\n}", "    $cubed = pow($a, 1/3);\n    return ($cubed\
    \ % 1 == 0);\n}\n\necho iscube(0);", "  // Your code here\n}\n", "  $value = pow($a,\
    \ (1/3));\n  $dec = strstr($value, '.');\n  if(empty($dec)) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}", "  $result = False;\n  for ($i = 1; $i\
    \ <= $a; $i++) {\n    if ($i * $i * $i == $a) {\n      $result = True;\n    }\n\
    \  }\n  return $result;\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\necho iscube(8);\necho iscube(27);",
  "    $i = 1;\n    $a = abs($a);\n    while ($i * $i * $i < $a) {\n        $i++;\n\
    \    }\n    return $i * $i * $i == $a;\n}\necho iscube(1) ? \"True\\n\" : \"False\\\
    n\";\necho iscube(2) ? \"True\\n\" : \"False\\n\";\necho iscube(-1) ? \"True\\\
    n\" : \"False\\n\";\necho iscube(64) ? \"True\\n\" : \"False\\n\";\necho iscube(0)\
    \ ? \"True\\n\" : \"False\\n\";\necho iscube(180) ? \"True\\n\" : \"False\\n\"\
    ;", "    return $a && intval(pow($a, 1/3)) ** 3 == $a;\n}\n", "\tif ($a == 0)\
    \ {\n\t\treturn true;\n\t} elseif ($a > 0) {\n\t\treturn floor(cbrt($a)) ** 3\
    \ == $a;\n\t} else {\n\t\treturn floor(-cbrt(-$a)) ** 3 == $a;\n\t}\n}\necho iscube(6)\
    \ . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(4) . \"<br>\";\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(5) . \"<br>\";", "\tfor\
    \ ($i = 1; $i * $i * $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\t\
    return True;\n\t\t}\n\t}\n\treturn False;\n}", "  if ($a == 0) {\n    return true;\n\
    \  }\n  $i = 1;\n  while ($i * $i * $i < abs($a)) {\n    $i += 1;\n  }\n  return\
    \ $i * $i * $i == abs($a);\n}\necho iscube(9) ? 'true' : 'false';", "\treturn\
    \ is_int(pow($a, 1/3));\n}", "\tif($a == 0) {\n\t\treturn true;\n\t} elseif($a\
    \ < 0) {\n\t\treturn iscube(-1 * $a);\n\t} else {\n\t\t$root = 0;\n\t\twhile($root\
    \ * $root * $root < $a) {\n\t\t\t$root++;\n\t\t}\n\t\treturn $root * $root * $root\
    \ == $a;\n\t}\n}\n", "\treturn $a == 0 || sqrt($a) == (int)sqrt($a);\n}\necho\
    \ iscube(0);", "  $num = ceil(pow($a, 1/3));\n  if($num * $num * $num == $a) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "\treturn $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";", "\t$result = false;\n\tfor ($i = 0; $i <= $a;\
    \ $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\t$result = true;\n\t\t}\n\t}\n\t\
    return $result;\n}", "}\n\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\n\
    echo iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\n\
    echo iscube(180).\"\\n\";", "    $cube = round(pow($a,1/3));\n    if ($cube **\
    \ 3 == $a) {\n        return \"True\\n\";\n    } else {\n        return \"False\\\
    n\";\n    }\n}\necho iscube(64);\n", "    if($a >= 0) {\n        return is_int(pow($a,\
    \ 1/3));\n    } else {\n        return is_int(pow(abs($a), 1/3));\n    }\n}\n\
    echo iscube(0);", "    return is_int(cbrt($a));\n}", "\t$c = $a*$a*$a;\n\tif($c\
    \ == $a){\n\t\treturn true;\n\t}else {\n\t\treturn false;\n\t}\n}\necho iscube(2);",
  "    $answer = false;\n    $cubic = 1;\n    while ($cubic**3 < $a) {\n        $cubic\
    \ += 1;\n    }\n    if ($cubic**3 == $a) {\n        $answer = true;\n    }\n \
    \   return $answer;\n}", "    $temp = sqrt($a);\n    if($temp * $temp * $temp\
    \ == $a) {\n        return true;\n    }\n    return false;\n}\necho iscube(64);",
  "    return ($a == 0 ? true : $a % 2 == 0 ? false : pow($a, 1/3) == round(pow($a,\
    \ 1/3)));\n}\n\necho iscube(0);", "   if ($a >= 0) {\n      if ($a == 0) {\n \
    \        return true;\n      } else if ($a == 1) {\n         return true;\n  \
    \    } else {\n         return iscube(($a - 1));\n      }\n   } else {\n     \
    \ return iscube(($a * -1));\n   }\n}\necho iscube(0);", "    if ($a == 0) {\n\
    \        return True;\n    } elseif (abs($a) % 1 > 0) {\n        return False;\n\
    \    } else {\n        $a = sqrt(abs($a));\n        if ($a % 1 == 0) {\n     \
    \       return True;\n        } else {\n            return False;\n        }\n\
    \    }\n}\necho iscube(2);", "    return $a == pow($a, 1/3);\n}", "    return\
    \ is_int(cbrt($a));\n}", "\t$b = sqrt($a);\n\tif ($b == floor($b)) {\n\t\t$c =\
    \ $b * $b;\n\t\tif ($c == $a) {\n\t\t\treturn True;\n\t\t}\n\t}\n\treturn False;\n\
    }\necho iscube(0);\necho iscube(1);\necho iscube(2);\necho iscube(3);\necho iscube(8);\n\
    echo iscube(9);\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(65);\n\
    echo iscube(71);\necho iscube(100);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125", "    $c=pow($a,1/3);\n    if (is_int($c)){\n\
    \        return true;\n    }else {\n        return false;\n    }\n  }\n\n  echo\
    \ iscube(64);", "    return (bool)pow($a, 1/3);\n}\necho iscube(27) . PHP_EOL;",
  "\treturn pow($a, 1/3) == intval(pow($a, 1/3));\n}\n", "    if ($a % 1 == 0) {\n\
    \        $y = round(pow($a, 1/3));\n        if (pow($y, 3) == $a) {\n        \
    \    return true;\n        } else {\n            return false;\n        }\n  \
    \  } else {\n        return false;\n    }\n}\n\necho iscube(1) ==> True;\necho\
    \ iscube(2) ==> False;\necho iscube(-1) ==> True;\necho iscube(64) ==> True;\n\
    echo iscube(0) ==> True;\necho iscube(180) ==> False;", "    return ($a % 2 !=\
    \ 0) ? true : false;\n}\n", "    return (pow($a, 1/3) - (int)pow($a, 1/3) == 0);\n\
    }\necho iscube(2) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(0.0) .\
    \ \"<br>\";\necho iscube(1) . \"<br>\";\n", "  return $a >= 0 && $a == pow(round(pow($a,\
    \ 1 / 3)), 3);\n}\n", "\treturn (pow($a, 1/3) % 1 == 0);\n}", "\t// your code\
    \ here\n}\n", "    if ($a == 0) return true;\n    if ($a < 0) $a = abs($a);\n\
    \    for ($i = 1; $i <= $a; $i++) {\n        if ($i * $i * $i == $a) return true;\n\
    \    }\n    return false;\n}\n", "    return $a==0 ? true : $a>0 ? is_int(pow($a,1/3))\
    \ : is_int(pow(abs($a),1/3));\n}\n", "  $a = abs($a);\n  $c = pow($a, 1/3);\n\
    \  return ($c == intval($c));\n}\n\necho iscube(27);", "    $cube = pow($a, 1\
    \ / 3);\n    return floor($cube) == $cube;\n}\n", "    return sqrt($a) == floor(sqrt($a));\n\
    }", "    return  $a === 1 || is_int(pow($a, 1/3));\n}", "    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = $a * -1;\n    }\n\
    \    if ($a == 1) {\n        return true;\n    }\n    $num = 1;\n    while (pow($num,\
    \ 3) < $a) {\n        $num++;\n    }\n    if (pow($num, 3) == $a) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    if ($a == 0) {\n        return true;\n\
    \    } else if ($a < 0) {\n        $a = $a * -1;\n    }\n    $remainder = $a %\
    \ 3;\n    $a = ($a - $remainder) / 3;\n    if ($remainder == 0) {\n        return\
    \ iscube($a);\n    } else {\n        return false;\n    }\n}\necho iscube(3) .\
    \ \"\\n\"; // true\necho iscube(0) . \"\\n\"; // true\necho iscube(1) . \"\\n\"\
    ; // true\necho iscube(2) . \"\\n\"; // false\necho iscube(4) . \"\\n\"; // false\n\
    echo iscube(9) . \"\\n\"; // true\necho iscube(63) . \"\\n\"; // false\necho iscube(64)\
    \ . \"\\n\"; // true\necho iscube(65) . \"\\n\"; // false\necho iscube(66) . \"\
    \\n\"; // false\necho iscube(27) . \"\\n\"; // true\necho iscube(15625) . \"\\\
    n\"; // true\necho iscube(15624) . \"\\n\"; // false\necho iscube(15623) . \"\\\
    n\"; // false\necho iscube(15622) . \"\\n\"; // false\necho iscube(15621) . \"\
    \\n\"; // false\necho iscube(15620) . \"\\n\"; // false\necho iscube(15619) .\
    \ \"\\n\"; // false\necho iscube(15618) . \"\\n\"; // false\necho iscube(15617)\
    \ . \"\\n\"; // false\necho iscube(15616) . \"\\n\"; // false\necho iscube(15615)\
    \ . \"\\n\"; // false\necho iscube(15614) . \"\\n\"; // false\necho iscube(15613)\
    \ . \"\\n\"; // false\necho iscube(15612) . \"\\n\"; // false\necho iscube(15611)\
    \ . \"\\n\"; // false\necho iscube(15610) . \"\\n\"; // false\necho iscube(15609)\
    \ . \"\\n\"; // false\necho iscube(15608) . \"\\n\"; // false\necho iscube(15607)\
    \ . \"\\n\"; // false\necho", "  $b = cbrt($a);\n  return $b == round($b);\n}\n",
  "  return $a === 0 || abs($a) === round(pow(abs($a), 1/3));\n}", "    return $a\
    \ >= 0 && pow((int)pow($a, 1/3), 3) == $a;\n}\necho iscube(180) . \"\\n\";", " \
    \ return is_int(cbrt($a));\n}\n\necho iscube(0) . PHP_EOL;\necho iscube(64) .\
    \ PHP_EOL;\necho iscube(180) . PHP_EOL;\n", "  return is_int(pow($a, (1/3)));\n\
    }", "\tif ($a > 0) {\n\t\treturn is_int(pow($a, 1/3));\n\t}\n\telse {\n\t\treturn\
    \ is_int(pow(abs($a), 1/3));\n\t}\n}\necho iscube(1) . PHP_EOL;\necho iscube(2)\
    \ . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0)\
    \ . PHP_EOL;\necho iscube(180) . PHP_EOL;", "  // Your code here\n  return $a\
    \ == 0 ? true : sqrt($a) == floor(sqrt($a));\n}\n", "    // put your code here\n\
    }\n", "    $cur = 0;\n    $n = 1;\n    while ($cur < $a) {\n        $cur = $n\
    \ * $n * $n;\n        $n += 1;\n    }\n    return $cur == $a;\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);",
  "    if($a == 0) {\n        return true;\n    } else if($a == 1) {\n        return\
    \ true;\n    } else if($a == -1) {\n        return true;\n    } else {\n     \
    \   $root = sqrt($a);\n        $cube = $root * $root * $root;\n        if($cube\
    \ == $a) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    }\n}\n", "    return is_numeric(pow($a, 1/3));\n}", "    // Your\
    \ code here\n}\n", "  $num = sqrt($a);\n  return (bool) (($num * $num * $num)\
    \ == $a);\n}\n\necho iscube(1);\n", "\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif\
    \ ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\
    \necho iscube(1) . \"\\n\"; // True\necho iscube(2) . \"\\n\"; // False\necho\
    \ iscube(-1) . \"\\n\"; // True\necho iscube(64) . \"\\n\"; // True\necho iscube(0)\
    \ . \"\\n\"; // True\necho iscube(180) . \"\\n\"; // False\n", "  return ($a ==\
    \ 0 || $a > 0 && pow($a, 1 / 3) == round(pow($a, 1 / 3)));\n}", "    $i = 1;\n\
    \    while($i*$i*$i <= $a) {\n        if ($i*$i*$i == $a) {\n            return\
    \ True;\n        }\n        $i++;\n    }\n    return False;\n}\necho iscube(0);",
  "  return $a != 0 && isset(array_flip(range(1,1000))[round(pow($a, 1/3))]);\n}\n\
    echo iscube(1) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(2) ? 'TRUE' : 'FALSE';\n\
    echo \"\\n\";\necho iscube(-1) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(64)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(0) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(180) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(32)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(24) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(23) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(22)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(21) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(20) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(200)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(8) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(125) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(27)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(125) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(1000) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(625)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(216) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(729) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(343)\
    \ ? 'TRUE' :", "    $result = false;\n    for ($i = 1; $i <= $a; $i++) {\n   \
    \     if ($i * $i * $i == $a) {\n            $result = true;\n        }\n    }\n\
    \    return $result;\n}\n\necho iscube(8);", "\t$b = cbrt($a);\n\t$c = pow($b,\
    \ 3);\n\treturn $c == $a;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";", "  return ($a == pow($a,1/3)) ? true\
    \ : false;\n}\necho iscube(1);\n", "\t$a = abs($a);\n\tfor ($i = 0; $i < $a; $i++)\
    \ {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\necho iscube(1) ? 'True' : 'False';\necho \"<br>\";\necho iscube(2) ? 'True'\
    \ : 'False';\necho \"<br>\";\necho iscube(-1) ? 'True' : 'False';\necho \"<br>\"\
    ;\necho iscube(64) ? 'True' : 'False';\necho \"<br>\";\necho iscube(0) ? 'True'\
    \ : 'False';\necho \"<br>\";\necho iscube(180) ? 'True' : 'False';", "  $sq =\
    \ sqrt($a);\n  $cub = pow($sq, 3);\n  return $cub === $a;\n}", "\tif ($a == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\t$root = round(pow($a, 1/3));\n\t\treturn\
    \ $root*$root*$root == $a;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "  $b = 0;\n  for ($i =\
    \ 1; $i < $a + 1; $i++) {\n    $b += $i;\n    if ($b === $a) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\necho iscube(64);", "  return $a > 0 && pow(round(pow($a,\
    \ 1/3)), 3) == $a || $a == 0;\n}\n", "  return $a == pow(round(pow($a, 1/3)),\
    \ 3);\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);", "    $i = 1;\n    while ($i < $a) {\n   \
    \     $i = $i * 3;\n    }\n    if ($i == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho\
    \ iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a > 0) {\n        return is_int(cbrt($a));\n\
    \    }\n    if ($a < 0) {\n        return is_int(cbrt(abs($a)));\n    }\n}", " \
    \   return $a == (int)pow($a, 1/3);\n}\n", "  return is_int(pow($a, 1/3));\n}\n\
    \necho iscube(1); //=> True\necho iscube(2); //=> False\necho iscube(-1); //=>\
    \ True\necho iscube(64); //=> True\necho iscube(0); //=> True\necho iscube(180);\
    \ //=> False", "\t//todo\n}", "    return $a == pow(floor(pow($a, 1/3)), 3);\n\
    }\necho iscube(1); // True\necho \"\\n\";\necho iscube(2); // False\necho \"\\\
    n\";\necho iscube(-1); // True\necho \"\\n\";\necho iscube(64); // True\necho\
    \ \"\\n\";\necho iscube(0); // True\necho \"\\n\";\necho iscube(180); // False\n\
    echo \"\\n\";", "  \treturn (bool)sqrt($a) == sqrt($a);\n}\necho iscube(1) . '<br>';\n\
    echo iscube(2) . '<br>';\necho iscube(-1) . '<br>';\necho iscube(64) . '<br>';\n\
    echo iscube(0) . '<br>';\necho iscube(180) . '<br>';", "    return ($a >= 0 &&\
    \ floor(cbrt($a)) == cbrt($a));\n}\n", "    if ($a < 0) {\n        $a = abs($a);\n\
    \    }\n    if ($a == 0) {\n        return true;\n    }\n    $i = 1;\n    while\
    \ ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "\treturn\
    \ is_int(pow($a,1/3));\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\"\
    ;\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) .\
    \ \"<br>\";\necho iscube(180) . \"<br>\";", "    return $a == abs(pow(round(pow($a,\
    \ 1 / 3)), 3));\n}\necho iscube(1);", "    return $a != 0 && round(pow($a, 1/3))\
    \ == pow($a, 1/3);\n}\n", "\tif ($a == 0 || $a == 1) {\n\t\treturn true;\n\t}\
    \ elseif ($a == -1) {\n\t\treturn true;\n\t} elseif ($a < 0) {\n\t\treturn false;\n\
    \t} else {\n\t\tfor ($i = 1; $i <= $a; $i++) {\n\t\t\tif ($i ** 3 == $a) {\n\t\
    \t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\necho iscube(1);\n",
  "    return ($a == 0) ? true : (bool) (round(pow($a, 1/3)) ** 3 == $a);\n}\necho\
    \ iscube(180);", "    $i = 0;\n    while($i * $i * $i <= $a) {\n        if ($i\
    \ * $i * $i == $a) return true;\n        $i++;\n    }\n    return false;\n}\n\
    echo \"iscube(-1) = \";\nvar_dump(iscube(-1));\necho \"iscube(180) = \";\nvar_dump(iscube(180));\n\
    echo \"iscube(64) = \";\nvar_dump(iscube(64));", "  return ($a>=0) && ($a == pow(round(pow($a,1/3)),3));\n\
    }\n", "    $result = sqrt($a);\n    return (is_int($result)) ? true : false;\n\
    }\necho iscube(0);", "    if ($a >= 0) {\n        return (round(pow($a, 1 / 3))\
    \ ** 3 == $a);\n    } else {\n        return (-1 * round(pow(abs($a), 1 / 3))\
    \ ** 3 == $a);\n    }\n}\n\necho iscube(27);", "    return $a == 0 || (pow($a,\
    \ 1/3) - floor(pow($a, 1/3))) == 0;\n}", "\treturn (bool) is_int($a) && $a>=0\
    \ && round(pow($a,1/3))==pow($a,1/3);\n}\necho (iscube(1) ? 'TRUE' : 'FALSE').'<br>';\n\
    echo (iscube(2) ? 'TRUE' : 'FALSE').'<br>';\necho (iscube(-1) ? 'TRUE' : 'FALSE').'<br>';\n\
    echo (iscube(64) ? 'TRUE' : 'FALSE').'<br>';\necho (iscube(0) ? 'TRUE' : 'FALSE').'<br>';\n\
    echo (iscube(180) ? 'TRUE' : 'FALSE').'<br>';", "    if ($a < 0) {\n        $a\
    \ = -1 * $a;\n    }\n    if ($a == 0) {\n        return true;\n    }\n    if ($a\
    \ == 1) {\n        return true;\n    }\n    $temp = $a;\n    $result = 1;\n  \
    \  while ($result < $temp) {\n        $result *= 3;\n    }\n    if ($result ==\
    \ $temp) {\n        return true;\n    }\n    return false;\n}\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "  return\
    \ (isset($a) && (abs($a) == round(pow($a, 1/3))));\n}\nprint_r(iscube(27));",
  "  return pow($a, (1 / 3)) == floor(pow($a, (1 / 3)));\n}\n", "  if($a == 0){\n\
    \    return true;\n  }else if($a > 0){\n    return is_int(pow($a, 1 / 3));\n \
    \ }else{\n    return is_int(pow(abs($a), 1 / 3)) ? true : false;\n  }\n}", " \
    \   return $a == 0 || ($a * $a * $a) == abs($a);\n}\n\necho iscube(1) . \"<br>\"\
    ; // 1\necho iscube(8) . \"<br>\"; // 0\necho iscube(27) . \"<br>\"; // 1\necho\
    \ iscube(64) . \"<br>\"; // 1\necho iscube(26) . \"<br>\"; // 0\necho iscube(1728)\
    \ . \"<br>\"; // 1\necho iscube(-729) . \"<br>\"; // 1\necho iscube(-1) . \"<br>\"\
    ; // 1\necho iscube(0) . \"<br>\"; // 1\necho iscube(1.0) . \"<br>\"; // 1\necho\
    \ iscube(1.5) . \"<br>\"; // 0\n", "\t$b = $a * $a * $a;\n\treturn $a == $b;\n\
    }\necho \"iscube(1) ==> \".iscube(1).\"\\n\";\necho \"iscube(2) ==> \".iscube(2).\"\
    \\n\";\necho \"iscube(-1) ==> \".iscube(-1).\"\\n\";\necho \"iscube(64) ==> \"\
    .iscube(64).\"\\n\";\necho \"iscube(0) ==> \".iscube(0).\"\\n\";\necho \"iscube(180)\
    \ ==> \".iscube(180).\"\\n\";", "    return !fmod($a, pow($a, 1 / 3));\n}\necho\
    \ (int)iscube(0);", "\t// your code here\n}", "    return round(cbrt($a)) ** 3\
    \ == $a;\n}", "    if ($a==0) {\n        return true;\n    }\n    if ($a>0) {\n\
    \        $i = 1;\n        while ($i<$a) {\n            $i = $i + 1;\n        \
    \    if (pow($i,3) == $a) {\n                return true;\n            }\n   \
    \     }\n    }\n    if ($a<0) {\n        $i = -1;\n        while ($i>$a) {\n \
    \           $i = $i - 1;\n            if (pow($i,3) == $a) {\n               \
    \ return true;\n            }\n        }\n    }\n    return false;\n}\nprint_r\
    \ (iscube(27));", "    return is_numeric(pow($a, 1/3));\n}\n", "    return is_numeric(pow($a,\
    \ 1 / 3));\n}", "    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a == 0)\
    \ {\n        return true;\n    }\n    $lower = 0;\n    $upper = $a;\n    while\
    \ ($lower <= $upper) {\n        $mid = floor(($lower + $upper) / 2);\n       \
    \ $midCube = $mid * $mid * $mid;\n        if ($midCube < $a) {\n            $lower\
    \ = $mid + 1;\n        } else if ($midCube > $a) {\n            $upper = $mid\
    \ - 1;\n        } else {\n            return true;\n        }\n    }\n    return\
    \ false;\n}", '}', "    if ($a == 0) return true;\n    $c = round(pow($a, 1/3));\n\
    \    return $c * $c * $c == $a;\n}", "    if (abs($a) === 0) return true;\n  \
    \  if (abs($a) === 1) return true;\n    if ($a < 0) $a = abs($a);\n    $c = round(pow($a,\
    \ 1/3));\n    if ($c * $c * $c === $a) return true;\n    return false;\n}\n",
  "    $a = abs($a);\n    $res = floor(cbrt($a));\n    if (pow($res, 3) == $a) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "\t//\
    \ Your code here.\n\tfor ($i = 0; $i < abs($a); $i++) {\n\t\tif ($i * $i * $i\
    \ == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    $cubic\
    \ = pow(sqrt($a), 3);\n    if ($cubic == $a) {\n        return True;\n    } else\
    \ {\n        return False;\n    }\n}\necho iscube(64);", "    // edge cases when\
    \ input is 0 or 1\n    if ($a < 2) {\n        return true;\n    }\n    // set\
    \ the initial guess of the cube root to half of the input value\n    $guess =\
    \ $a / 2;\n    // continue to guess until guess is within 1 of the previous guess\n\
    \    while ($guess - 1 < $guess * $guess * $guess / $a) {\n        // $guess =\
    \ ($guess + $a / $guess / $guess) / 2;\n        $guess = ($guess + $a / $guess\
    \ / $guess) / 2;\n    }\n    // if the guess is within 1 of the previous guess,\n\
    \    // return whether the guess is equal to the input divided by the guess cubed\n\
    \    return $guess - 1 >= $guess * $guess * $guess / $a;\n}\n\necho '<pre>';\n\
    var_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\n\
    var_dump(iscube(0));\nvar_dump(iscube(180));\necho '</pre>';\n", "    // Your\
    \ code here\n}", "  return $a >= 0 && pow($a, 1/3) == floor(pow($a, 1/3));\n}\n",
  "\treturn isset(sqrt($a) % sqrt($a));\n}", "\treturn is_int(pow($a, 1/3));\n}\n\
    echo iscube(1);\n", "    //write your code here\n}", "    return is_int(pow($a,\
    \ 1/3));\n}", "  return isset(array_count_values([$a ** (1/3)])[$a ** (1/3)]);\n\
    }\n", "  $c = 0;\n  while ($c ** 3 < $a) {\n    $c++;\n  }\n  return $c ** 3 ==\
    \ $a;\n}\n", "\treturn is_int(cbrt($a));\n}\n\necho iscube(64);", "\t$c = false;\n\
    \tfor ($i = 0; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\t$c = true;\n\
    \t\t}\n\t}\n\treturn $c;\n}\n", "  if($a == 1) {\n  \treturn true;\n  } else if($a\
    \ <= 0) {\n  \treturn true;\n  } else {\n  \t$square = sqrt($a);\n  \t$whole =\
    \ floor($square);\n  \t$cubed = pow($whole, 3);\n  \tif($cubed == $a) {\n  \t\t\
    return true;\n  \t} else {\n  \t\treturn false;\n  \t}\n  }\n}\necho iscube(180);\n",
  "  if ($a < 0)\n    $a = -$a;\n  return (int)(pow($a, 1 / 3)) ** 3 == $a;\n}", " \
    \   return $a === 0 ? true : intval(round(pow($a, 1 / 3))) ** 3 === $a;\n}\necho\
    \ iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\n\
    echo \"\\n\";\necho iscube(64);\necho \"\\n\";\necho iscube(0);\necho \"\\n\"\
    ;\necho iscube(180);\necho \"\\n\";", "\treturn ($a === 0 || $a % (int)cbrt($a)\
    \ === 0) ? true : false;\n}", "  return round(pow($a, 1/3)) === $a;\n}\n", "\t\
    if ($a > 0) {\n\t\t$x = floor(pow($a, 1/3));\n\t\tif (pow($x, 3) == $a) {\n\t\t\
    \treturn True;\n\t\t}\n\t}\n\telseif ($a < 0) {\n\t\t$x = floor(pow($a, 1/3));\n\
    \t\tif (pow($x, 3) == $a) {\n\t\t\treturn True;\n\t\t}\n\t}\n\telse {\n\t\treturn\
    \ True;\n\t}\n\treturn False;\n}\necho iscube(1) . \"<br>\";\necho iscube(2) .\
    \ \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0)\
    \ . \"<br>\";\necho iscube(180) . \"<br>\";", "    if($a === 0) {\n        return\
    \ true;\n    }\n    $cube = 0;\n    while($cube <= abs($a)) {\n        if($cube\
    \ === abs($a)) {\n            return true;\n        }\n        $cube++;\n    \
    \    $cube *= $cube;\n    }\n    return false;\n}\necho iscube(1); // True\necho\
    \ iscube(2); // False\necho iscube(-1); // True\necho iscube(64); // True\necho\
    \ iscube(0); // True\necho iscube(180); // False", "    $result = false;\n   \
    \ for ($i = 1; $i < $a; $i++) {\n        if ($i * $i * $i == $a) {\n         \
    \   $result = true;\n        }\n    }\n    return $result;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "\t\
    $i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\t$i++;\n\t}\n\treturn $i * $i * $i\
    \ == $a;\n}\necho iscube(0);", "  $b = abs($a);\n  $x = pow($b, (1/3));\n  $y\
    \ = round($x);\n  if($b==0) {\n  \treturn \"True\";\n  }\n  elseif($b==$y*$y*$y)\
    \ {\n  \treturn \"True\";\n  }\n  else {\n  \treturn \"False\";\n  }\n}\necho\
    \ iscube(1) . \"<br/>\";\necho iscube(2) . \"<br/>\";\necho iscube(-1) . \"<br/>\"\
    ;\necho iscube(64) . \"<br/>\";\necho iscube(0) . \"<br/>\";\necho iscube(180)\
    \ . \"<br/>\";", "  if($a % $a == 0){\n    return true;\n  } else{\n    return\
    \ false;\n  }\n}\n", "  // your code here\n}\necho iscube(64) ? 'True' : 'False',\
    \ \"\\n\";\necho iscube(180) ? 'True' : 'False', \"\\n\";\necho iscube(0) ? 'True'\
    \ : 'False', \"\\n\";\necho iscube(1) ? 'True' : 'False', \"\\n\";", "\treturn\
    \ pow($a, 1 / 3) == (int) pow($a, 1 / 3);\n}\n", "    return $a == pow($a, 1/3);\n\
    }\n", "  if ($a < 0) {\n    $a = abs($a);\n  }\n  for ($i = 0; $i < $a; $i++)\
    \ {\n    if ($i * $i * $i == $a) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);", "    return ($a >= 0 && abs(pow($a, 1/3)) %\
    \ 1 == 0) ? true : false;\n}\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\"\
    ;\necho iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\"\
    ;\necho iscube(180).\"\\n\";", "    return $a == (int)pow($a, 1/3);\n}\n\nvar_dump(iscube(1));\n\
    var_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\nvar_dump(iscube(0));\n\
    var_dump(iscube(180));", "    return $a > 0 && ($a == pow(round(pow($a, 1/3)),\
    \ 3) || $a == pow(round(pow($a, 1/3)), 3));\n}\n\necho iscube(125);\necho iscube(90);\n\
    echo iscube(64);\necho iscube(63);", "    if ($a < 0) {\n        $a = $a * -1;\n\
    \    }\n    $c = pow($a, 1/3);\n    if ($c == floor($c)) {\n        return True;\n\
    \    } else {\n        return False;\n    }\n}\n", "    // Your code here\n}",
  "    return $a == pow($a, 1/3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "  return $a > 0 ? (bool)pow($a,\
    \ 1/3) : true;\n}\n", "  if ($a < 0) {\n    $a = -$a;\n  }\n  if ($a === 0) {\n\
    \    return True;\n  }\n  $root = pow($a, 1/3);\n  return $root * $root * $root\
    \ === $a;\n}\necho iscube(1) ? \"True<br>\" : \"False<br>\";\necho iscube(2) ?\
    \ \"True<br>\" : \"False<br>\";\necho iscube(-1) ? \"True<br>\" : \"False<br>\"\
    ;\necho iscube(64) ? \"True<br>\" : \"False<br>\";\necho iscube(0) ? \"True<br>\"\
    \ : \"False<br>\";\necho iscube(180) ? \"True<br>\" : \"False<br>\";", "    return\
    \ $a && intval(round(pow($a, 1/3))) ** 3 == $a;\n}", "  return $a == round(pow($a,\
    \ 1/3));\n}\necho iscube(64);", "\tif ($a > 0) {\n\t\treturn is_int(round(pow($a,\
    \ 1/3)));\n\t}\n\treturn is_int(round(pow(abs($a), 1/3)));\n}\n", "  if ($a <\
    \ 0) {\n    $a = abs($a);\n  }\n  if ($a > 0) {\n    $b = pow($a, 1/3);\n    $c\
    \ = round($b);\n    if ($c == $b) {\n      $ans = True;\n    } else {\n      $ans\
    \ = False;\n    }\n  } else {\n    $ans = True;\n  }\n  return $ans;\n}", "\t\
    $i = pow($a, 1/3);\n\tif(($i * $i * $i) == $a) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1); echo \"<br>\";\necho iscube(2); echo \"<br>\";\n\
    echo iscube(-1); echo \"<br>\";\necho iscube(64); echo \"<br>\";\necho iscube(0);\
    \ echo \"<br>\";\necho iscube(180); echo \"<br>\";", "    return (pow((int)pow($a,\
    \ 1/3), 3) == $a) ? true : false;\n}\n", "    $cube = $a * $a * $a;\n    if ($a\
    \ == 0) {\n        return true;\n    } else if ($a < 0) {\n        return true;\n\
    \    } else if ($a == $cube) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "\t$b = 1;\n\twhile ($b*$b*$b <= $a) {\n\t\tif ($b*$b*$b\
    \ == $a) return true;\n\t\t$b = $b + 1;\n\t}\n\treturn false;\n}", "\treturn floor(pow($a,\
    \ 1/3)) == pow($a, 1/3);\n}", "\treturn !($a % 2) && !(sqrt($a) % 1);\n}\necho\
    \ iscube(2) . \"<br>\";\necho iscube(1) . \"<br>\";\necho iscube(-1) . \"<br>\"\
    ;\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) .\
    \ \"<br>\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
