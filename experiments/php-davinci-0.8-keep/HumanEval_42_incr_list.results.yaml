name: HumanEval_42_incr_list
language: php
results:
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(\n\
    \        function($n) {\n            return $n + 1;\n        },\n        $l\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplozah70h.php:17\n\
    Stack trace:\n#0 /tmp/tmplozah70h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmplozah70h.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  if (empty($l)) {\n \
    \   return $l;\n  }\n  else {\n    $item = array_shift($l);\n    return [$item\
    \ + 1, ...incr_list($l)];\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($n)\
    \ {\n    return $n + 1;\n  }, $l);\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $item) {\n    $result[] = $item + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\treturn array_map(function($x)\
    \ {\n\t\treturn $x + 1;\n\t}, $l);\n}\necho 'incr_list([1, 2, 3]) is ';\nvar_dump(incr_list([1,\
    \ 2, 3]));\necho 'incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) is ';\nvar_dump(incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]));\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "incr_list([1, 2, 3]) is array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n}\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) is array(9) {\n\
    \  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n  int(3)\n\
    \  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n  int(1)\n\
    \  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\treturn array_map(function($x)\
    \ {\n\t\treturn $x + 1;\n\t}, $l);\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = array();\n  foreach\
    \ ($l as $e) {\n    $res[] = $e + 1;\n  }\n  return $res;\n}\n\n$res = incr_list(array(1,\
    \ 2, 3));\nvar_dump($res);\n$res = incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123));\n\
    var_dump($res);\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n\
    array(9) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n\
    \  int(1)\n  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l1 = [];\n\tforeach\
    \ ($l as $value) {\n\t\t$l1[] = $value + 1;\n\t}\n\treturn $l1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l = array_map(function($e)\
    \ { return $e + 1; }, $l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $value) {\n        $l[$key] = $value + 1;\n    }\n    return $l;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l2 = [];\n    foreach\
    \ ($l as $e) {\n        $l2[] = $e + 1;\n    }\n    return $l2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_list = [];\n\
    \    foreach ($l as $elem) {\n        $new_list[] = $elem + 1;\n    }\n    return\
    \ $new_list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $val) {\n        $result[] = $val + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$r = array();\n\tfor\
    \ ($i = 0; $i < count($l); $i++) {\n\t\t$r[] = $l[$i] + 1;\n\t}\n\treturn $r;\n\
    }\n\n$a = array(1, 2, 3);\nassert(incr_list($a) == array(2, 3, 4));\n\n$a = array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123);\nassert(incr_list($a) == array(6, 4, 6, 3, 4, 4,\
    \ 10, 1, 124));\n\necho \"Tests passed.\\n\";\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Tests passed.\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $nl = array();\n \
    \   for ($i = 0; $i < count($l); $i++) {\n        $nl[] = $l[$i] + 1;\n    }\n\
    \    return $nl;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $value) {\n    $result[] = $value + 1;\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$new_l = [];\n\tfor\
    \ ($i = 0; $i < count($l); $i++) {\n\t\t$new_l[] = $l[$i] + 1;\n\t}\n\treturn\
    \ $new_l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$new = [];\n\t$i = 0;\n\
    \tforeach ($l as $v) {\n\t\t$new[$i] = $v + 1;\n\t\t$i++;\n\t}\n\treturn $new;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l1 = [];\n\tforeach\
    \ ($l as $value) {\n\t\t$l1[] = $value + 1;\n\t}\n\treturn $l1;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $a = array();\n  \
    \  foreach ($l as $item) {\n        $a[] = $item + 1;\n    }\n    return $a;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return map($l, function($x)\
    \ { return $x + 1; });\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function map() in /tmp/tmpacdj4f5n.php:8\n\
    Stack trace:\n#0 /tmp/tmpacdj4f5n.php(12): incr_list(Array)\n#1 /tmp/tmpacdj4f5n.php(16):\
    \ candidate(Array)\n#2 /tmp/tmpacdj4f5n.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpacdj4f5n.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ {\n        return $x + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  if (empty($l)) return\
    \ [];\n  $hd = array_shift($l);\n  return array_merge([$hd + 1], incr_list($l));\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $output = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $output[] = $l[$i] + 1;\n  }\n  return\
    \ $output;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$i = 0;\n\t$c = count($l);\n\
    \twhile ($i < $c) {\n\t\t$l[$i] = $l[$i] + 1;\n\t\t$i = $i + 1;\n\t}\n\treturn\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($i)\
    \ {\n        return $i + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $incr = [];\n    foreach\
    \ ($l as $v) {\n        $incr[] = $v + 1;\n    }\n    return $incr;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = [];\n    foreach\
    \ ($l as $item) {\n        $ret[] = $item + 1;\n    }\n    return $ret;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $k\
    \ => $v) {\n        $l[$k] = $v + 1;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32zl9mab.php:14\n\
    Stack trace:\n#0 /tmp/tmp32zl9mab.php(19): test()\n#1 {main}\n  thrown in /tmp/tmp32zl9mab.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$result = array();\n\
    \tforeach ($l as $i) {\n\t\t$result[] = $i + 1;\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach ($l as $item) {\n        $r[] = $item + 1;\n    }\n    return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$result = array();\n\
    \tforeach ($l as $value) {\n\t\t$result[] = $value + 1;\n\t}\n\treturn $result;\n\
    }\n\n$l = array(1, 2, 3);\n$result = incr_list($l);\nvar_dump($result);\n\n$l\
    \ = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\n$result = incr_list($l);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n\
    array(9) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n\
    \  int(1)\n  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $l += 1;\n    return\
    \ $l;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmp1c0p0pdt.php:8\n\
    Stack trace:\n#0 /tmp/tmp1c0p0pdt.php(12): incr_list(Array)\n#1 /tmp/tmp1c0p0pdt.php(16):\
    \ candidate(Array)\n#2 /tmp/tmp1c0p0pdt.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1c0p0pdt.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$in = [];\n\tforeach\
    \ ($l as $val) {\n\t\t$in[] = $val + 1;\n\t}\n\treturn $in;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $inc_list = [];\n\
    \    foreach ($l as $element) {\n        $inc_list[] = $element + 1;\n    }\n\
    \    return $inc_list;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $incr = array_map(function($i)\
    \ {\n    return $i + 1;\n  }, $l);\n  return $incr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$n = array();\n\tforeach\
    \ ($l as $item) {\n\t\t$n[] = $item + 1;\n\t}\n\treturn $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$res = [];\n\tforeach\
    \ ($l as $v) {\n\t\t$res[] = $v + 1;\n\t}\n\treturn $res;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = [];\n  foreach\
    \ ($l as $i) {\n    $n[] = $i + 1;\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\t$l[$i]++;\n\t}\n\treturn $l;\n}\n\nvar_dump(incr_list([1, 2, 3]));\n\
    var_dump(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n\
    array(9) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n\
    \  int(1)\n  [8]=>\n  int(124)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ {\n        return $x + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = array();\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $res[] = $l[$i] + 1;\n  }\n  return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if (count($l) == 0)\
    \ {\n        return [];\n    }\n    $f = array_shift($l);\n    $r = incr_list($l);\n\
    \    return array_merge([$f + 1], $r);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($e)\
    \ { return $e + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $arr = array();\n\
    \    foreach ($l as $value) {\n        $arr[] = $value + 1;\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if ($l === []) {\n\
    \        return [];\n    }\n    $t = incr_list(array_slice($l, 1));\n    return\
    \ array_merge([$l[0] + 1], $t);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $value) {\n        $value = $value + 1;\n        $l[$key] = $value;\n   \
    \ }\n    return $l;\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach\
    \ ($l as $i) {\n    $r[] = $i + 1;\n  }\n  return $r;\n}\n$in = fopen('php://stdin',\
    \ 'r');\n$out = fopen('php://stdout', 'w');\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tforeach ($l as $key\
    \ => $value) {\n\t\t$l[$key]++;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $element) {\n        $result[] = $element + 1;\n    }\n    return\
    \ $result;\n}\n\nvar_dump(incr_list([1, 2, 3]));\nvar_dump(incr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]));\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n\
    array(9) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n\
    \  int(1)\n  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tif (empty($l)) {\n\t\
    \treturn $l;\n\t}\n\t$car = array_shift($l);\n\treturn array_merge([$car + 1],\
    \ incr_list($l));\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tif (empty($l)) return\
    \ [];\n\t$r = [];\n\tforeach ($l as $v) $r[] = $v + 1;\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach ($l as $i) {\n        $r[] = $i + 1;\n    }\n    return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($a)\
    \ {\n    return $a + 1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $x)\
    \ {\n        $x++;\n        $incr[] = $x;\n    }\n    return $incr;\n}\n$l = [1,\
    \ 2, 3];\necho implode(', ', incr_list($l)) . PHP_EOL;\n$l = [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123];\necho implode(', ', incr_list($l)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 3, 4\n6, 4, 6, 3, 4, 4, 10, 1, 124\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnxyj2i4r.php:23\nStack trace:\n#0 /tmp/tmpnxyj2i4r.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnxyj2i4r.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // Write your code\
    \ here\n    // To print results to the standard output you can use print\n   \
    \ // Example: print \"Hello world!\";\n    $result = array();\n    foreach ($l\
    \ as $key => $value) {\n        $result[] = $value + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = array();\n  foreach\
    \ ($l as $v) {\n    $r[] = $v + 1;\n  }\n  return $r;\n}\n\nprint_r(incr_list(array(1,\
    \ 2, 3)));\nprint_r(incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123)));\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0]\
    \ => 6\n    [1] => 4\n    [2] => 6\n    [3] => 3\n    [4] => 4\n    [5] => 4\n\
    \    [6] => 10\n    [7] => 1\n    [8] => 124\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\treturn array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $result[] = $l[$i] + 1;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($n)\
    \ {\n        return $n + 1;\n    }, $l);\n}\nprint_r(incr_list([1, 2, 3]));\n\
    print_r(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0]\
    \ => 6\n    [1] => 4\n    [2] => 6\n    [3] => 3\n    [4] => 4\n    [5] => 4\n\
    \    [6] => 10\n    [7] => 1\n    [8] => 124\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // YOUR CODE HERE\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct6ccrd9.php:16\n\
    Stack trace:\n#0 /tmp/tmpct6ccrd9.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpct6ccrd9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$keys = array_keys($l);\n\
    \tforeach ($keys as $k) {\n\t\t$l[$k] = $l[$k] + 1;\n\t}\n\treturn $l;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $b = array();\n  foreach\
    \ ($l as $item) {\n    $b[] = $item + 1;\n  }\n  return $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $val) {\n        $l[$key] = $val + 1;\n    }\n    return $l;\n}\n$list =\
    \ incr_list([1, 2, 3]);\nprint_r($list);\n\nfunction candidate(...$args) {\n \
    \   return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$ret = array();\n\t\
    foreach ($l as $e) {\n\t\t$ret[] = $e + 1;\n\t}\n\treturn $ret;\n}\n\necho implode(',\
    \ ', incr_list([1, 2, 3]));\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2, 3, 4
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ {\n        return $x + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $n = [];\n    foreach\
    \ ($l as $value) {\n        $n[] = $value + 1;\n    }\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // YOUR CODE HERE\n\
    \    $list = [];\n    foreach ($l as $value) {\n        $list[] = $value + 1;\n\
    \    }\n    return $list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$ret = array();\n\t\
    for ($i = 0; $i < count($l); $i += 1) {\n\t\t$ret[] = $l[$i] + 1;\n\t}\n\treturn\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $res[] = $l[$i] + 1;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = [];\n  for ($i\
    \ = 0; $i < count($l); $i++) {\n    $res[] = $l[$i] + 1;\n  }\n  return $res;\n\
    }\n\n$l = [1, 2, 3];\n$r = incr_list($l);\necho implode(', ', $r) . \"\\n\";\n\
    \n$l = [5, 3, 5, 2, 3, 3, 9, 0, 123];\n$r = incr_list($l);\necho implode(', ',\
    \ $r) . \"\\n\";\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 3, 4\n6, 4, 6, 3, 4, 4, 10, 1, 124\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $out = [];\n  foreach\
    \ ($l as $v) {\n    $out[] = $v + 1;\n  }\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $incr = array_map(function($x)\
    \ { return $x + 1; }, $l);\n    return $incr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  for ($i = 0; $i < count($l); $i++) {\n        $result[] = $l[$i] + 1;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $number) {\n    $result[] = $number + 1;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $new_list = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $new_list[] = $l[$i] + 1;\n  }\n  return\
    \ $new_list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$new_l = [];\n\tforeach\
    \ ($l as $value) {\n\t\t$new_l[] = $value + 1;\n\t}\n\treturn $new_l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $temp = array();\n\
    \    foreach ($l as $i => $v) {\n        $temp[$i] = $v + 1;\n    }\n    return\
    \ $temp;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return map($l, function($x)\
    \ { return $x + 1; });\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function map() in /tmp/tmp3jv320ye.php:8\n\
    Stack trace:\n#0 /tmp/tmp3jv320ye.php(12): incr_list(Array)\n#1 /tmp/tmp3jv320ye.php(16):\
    \ candidate(Array)\n#2 /tmp/tmp3jv320ye.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp3jv320ye.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_l = [];\n   \
    \ foreach ($l as $el) {\n        $new_l[] = $el + 1;\n    }\n    return $new_l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $val) {\n        $result[] = $val + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $value) {\n        $result[] = $value + 1;\n    }\n    return\
    \ $result;\n}\nprint_r(incr_list([1, 2, 3]));\nprint_r(incr_list([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]));\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0]\
    \ => 6\n    [1] => 4\n    [2] => 6\n    [3] => 3\n    [4] => 4\n    [5] => 4\n\
    \    [6] => 10\n    [7] => 1\n    [8] => 124\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function map() in /tmp/tmpleglsj8e.php:8\n\
    Stack trace:\n#0 /tmp/tmpleglsj8e.php(12): incr_list(Array)\n#1 /tmp/tmpleglsj8e.php(16):\
    \ candidate(Array)\n#2 /tmp/tmpleglsj8e.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpleglsj8e.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 0;\n    $len\
    \ = count($l);\n    while ($i < $len) {\n        $l[$i] = $l[$i] + 1;\n      \
    \  $i = $i + 1;\n    }\n    return $l;\n}\nfunction candidate(...$args) {\n  \
    \  return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $x) {\n    $result[] = $x + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    //...\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tsqy1_9.php:16\n\
    Stack trace:\n#0 /tmp/tmp2tsqy1_9.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp2tsqy1_9.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($a)\
    \ { return $a + 1; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $len = count($l);\n\
    \    $res = array();\n    for ($i = 0; $i < $len; $i++) {\n        $res[] = $l[$i]\
    \ + 1;\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\treturn array_map(function($v)\
    \ {\n\t\treturn $v + 1;\n\t}, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesz8xzca.php:16\n\
    Stack trace:\n#0 /tmp/tmpesz8xzca.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpesz8xzca.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nassert(\n  incr_list([1, 2, 3]) === [2, 3, 4]\n\
    );\nassert(\n  incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) === [6, 4, 6, 3, 4, 4,\
    \ 10, 1, 124]\n);\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $result = [];\n  foreach\
    \ ($l as $n) {\n    $result[] = $n + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkcysu5f.php:16\n\
    Stack trace:\n#0 /tmp/tmprkcysu5f.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprkcysu5f.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($n)\
    \ { return $n + 1; }, $l);\n}\necho \"incr_list([1, 2, 3])\\n\";\nvar_dump(incr_list([1,\
    \ 2, 3]));\necho \"incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\\n\";\nvar_dump(incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]));\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "incr_list([1, 2, 3])\narray(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n}\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\narray(9) {\n\
    \  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n  int(3)\n\
    \  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n  int(1)\n\
    \  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $ret = [];\n    foreach\
    \ ($l as $v) {\n        $ret[] = $v + 1;\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$s = [];\n\tforeach\
    \ ($l as $i) {\n\t\t$s[] = $i + 1;\n\t}\n\treturn $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $new_l = [];\n  foreach\
    \ ($l as $v) {\n    $new_l[] = $v + 1;\n  }\n  return $new_l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $n = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $n[] = $l[$i] + 1;\n    }\n    return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  for ($i = 0; $i < count($l); $i++) {\n        $result[] = $l[$i] + 1;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $n = count($l);\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $l[$i] = $l[$i] + 1;\n  }\n  return $l;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $r[] = $l[$i] + 1;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$result = array();\n\
    \tforeach ($l as $value) {\n\t\t$result[] = $value + 1;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_list = [];\n\
    \    foreach ($l as $item) {\n        $new_list[] = $item + 1;\n    }\n    return\
    \ $new_list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $v) {\n        $result[] = $v + 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $acc = array();\n\
    \    foreach ($l as $v) {\n        $acc[] = $v + 1;\n    }\n    return $acc;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $list = [];\n  foreach\
    \ ($l as $key => $value) {\n    $list[] = $value + 1;\n  }\n  return $list;\n\
    }\necho \"incr_list([1, 2, 3])\";\nvar_dump(incr_list([1, 2, 3]));\necho \"incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\";\nvar_dump(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "incr_list([1, 2, 3])array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(4)\n}\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])array(9) {\n  [0]=>\n\
    \  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n  int(3)\n  [4]=>\n\
    \  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n  int(1)\n  [8]=>\n\
    \  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tforeach ($l as $i =>\
    \ $v) {\n\t\t$l[$i] = $v + 1;\n\t}\n\treturn $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($i)\
    \ {\n        return $i + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($n)\
    \ {\n        return $n + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if (!is_array($l))\
    \ {\n        return false;\n    }\n    foreach ($l as $k => $v) {\n        $l[$k]++;\n\
    \    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $a = array();\n  foreach\
    \ ($l as $item) {\n    $a[] = $item + 1;\n  }\n  return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $i = 0;\n    while\
    \ ($i < count($l)) {\n        $l[$i] = $l[$i] + 1;\n        $i = $i + 1;\n   \
    \ }\n    return $l;\n}\necho json_encode(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '[6,4,6,3,4,4,10,1,124]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  for ($i = 0; $i < count($l); $i++) {\n        $result[] = $l[$i] + 1;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $output = [];\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    $output[] = $l[$i] + 1;\n  }\n  return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    foreach\
    \ ($l as $i) {\n        $res[] = $i + 1;\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // YOUR CODE HERE\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyux9m52t.php:16\n\
    Stack trace:\n#0 /tmp/tmpyux9m52t.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyux9m52t.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $p = array();\n  \
    \  foreach ($l as $e) {\n        $p[] = $e + 1;\n    }\n    return $p;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_l = [];\n   \
    \ foreach ($l as $item) {\n        $new_l[] = $item + 1;\n    }\n    return $new_l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$a = array();\n\tforeach\
    \ ($l as $v) {\n\t\t$a[] = $v + 1;\n\t}\n\treturn $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($e)\
    \ { return $e + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $newl = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        $newl[] = $l[$i] + 1;\n   \
    \ }\n    return $newl;\n}\necho implode(', ', incr_list([1, 2, 3])), \"\\n\";\n\
    echo implode(', ', incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])), \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 3, 4\n6, 4, 6, 3, 4, 4, 10, 1, 124\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg99155pm.php:16\n\
    Stack trace:\n#0 /tmp/tmpg99155pm.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpg99155pm.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $item) {\n        $result[] = $item + 1;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$newList = [];\n\tfor\
    \ ($i = 0; $i < count($l); $i++){\n\t\t$newList[] = $l[$i] + 1;\n\t}\n\treturn\
    \ $newList;\n}\necho \"<pre>\";\necho incr_list([1, 2, 3]);\necho \"</pre>\";\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <pre>Array</pre>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l2 = array();\n\tfor\
    \ ($i = 0; $i < count($l); $i++) {\n\t\t$l2[$i] = $l[$i] + 1;\n\t}\n\treturn $l2;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$n = array();\n\tfor\
    \ ($i = 0; $i < count($l); $i++) {\n\t\t$n[] = $l[$i] + 1;\n\t}\n\treturn $n;\n\
    }\necho json_encode(incr_list(array(1, 2, 3))), \"\\n\";\necho json_encode(incr_list(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))), \"\\n\";\n\nfunction candidate(...$args) {\n  \
    \  return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,3,4]\n[6,4,6,3,4,4,10,1,124]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$new = [];\n\tforeach\
    \ ($l as $i) {\n\t\t$new[] = $i + 1;\n\t}\n\treturn $new;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($e)\
    \ { return $e + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return map($l, function($x)\
    \ {\n        return $x + 1;\n    });\n}\n\nfunction candidate(...$args) {\n  \
    \  return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function map() in /tmp/tmpmv3ojawa.php:8\n\
    Stack trace:\n#0 /tmp/tmpmv3ojawa.php(14): incr_list(Array)\n#1 /tmp/tmpmv3ojawa.php(18):\
    \ candidate(Array)\n#2 /tmp/tmpmv3ojawa.php(23): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpmv3ojawa.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $item) {\n        $result[] = $item + 1;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$res = [];\n\tforeach\
    \ ($l as $x) {\n\t\t$res[] = $x + 1;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $el = $l[$i];\n        $el += 1;\n\
    \        $res[] = $el;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $item)\
    \ {\n        $item++;\n    }\n    return $l;\n}\n\necho '<pre>';\nprint_r(incr_list([1,\
    \ 2, 3]));\necho '</pre>';\n\necho '<pre>';\nprint_r(incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 3\n    [2] => 5\n    [3] => 2\n    [4] => 3\n    [5]\
    \ => 3\n    [6] => 9\n    [7] => 0\n    [8] => 123\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuhqpo60e.php:27\nStack trace:\n#0 /tmp/tmpuhqpo60e.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuhqpo60e.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($i)\
    \ {\n    return $i + 1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ {\n        return $x + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($a)\
    \ { return $a + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $out = [];\n    foreach\
    \ ($l as $val) {\n        $out[] = $val + 1;\n    }\n    return $out;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(\n\
    \        function($i) {\n            return $i + 1;\n        },\n        $l\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $res[] = $l[$i] + 1;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$new_l = array();\n\t\
    foreach ($l as $element) {\n\t\t$new_l[] = $element + 1;\n\t}\n\treturn $new_l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($n)\
    \ {\n    return $n + 1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    foreach\
    \ ($l as $item) {\n        $res[] = $item + 1;\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ {\n        return $x + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = array();\n  \
    \  foreach ($l as $v) {\n        $r[] = $v + 1;\n    }\n    return $r;\n}\n\n\
    function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$newList = [];\n\tforeach\
    \ ($l as $number) {\n\t\t$newList[] = $number + 1;\n\t}\n\treturn $newList;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $list = array();\n\
    \    foreach ($l as $number) {\n        $list[] = $number + 1;\n    }\n    return\
    \ $list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($n)\
    \ {\n        return $n + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l1 = [];\n\tfor ($i\
    \ = 0; $i < count($l); $i++) {\n\t\t$l1[] = $l[$i] + 1;\n\t}\n\treturn $l1;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $i =>\
    \ $v) {\n    $l[$i] = $v + 1;\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    //Your code here\n\
    \    $newList = [];\n    foreach ($l as $index => $el) {\n        array_push($newList,\
    \ $el + 1);\n    }\n    return $newList;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($e)\
    \ {\n        return $e + 1;\n    }, $l);\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$l = array_map(function($x)\
    \ { return $x + 1; }, $l);\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  for ($i = 0; $i < count($l); $i++) {\n        $result[] = $l[$i] + 1;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $incr_list = array();\n\
    \    foreach ($l as $element) {\n        $incr_list[] = $element + 1;\n    }\n\
    \    return $incr_list;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_l = [];\n   \
    \ for ($i = 0; $i < count($l); $i += 1) {\n        $element = $l[$i];\n      \
    \  $new_element = $element + 1;\n        $new_l[] = $new_element;\n    }\n   \
    \ return $new_l;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t// write your code here\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa70fvmn6.php:15\n\
    Stack trace:\n#0 /tmp/tmpa70fvmn6.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpa70fvmn6.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    foreach\
    \ ($l as $v) {\n        $res[] = $v + 1;\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$result = array();\n\
    \tforeach ($l as $item) {\n\t\t$result[] = $item + 1;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $res = array();\n  foreach\
    \ ($l as $i) {\n    $res[] = $i + 1;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $new_array = [];\n\
    \    foreach ($l as $value) {\n        $new_array[] = $value + 1;\n    }\n   \
    \ return $new_array;\n}\n$new_array = incr_list([1, 2, 3]);\nvar_dump($new_array);\n\
    $new_array = incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]);\nvar_dump($new_array);\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(4)\n}\n\
    array(9) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(4)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(3)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(10)\n  [7]=>\n\
    \  int(1)\n  [8]=>\n  int(124)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  // Write a function\
    \ that takes a list and returns a new list with each element incremented by 1.\n\
    \  // Example: incr_list([1, 2, 3]) == [2, 3, 4]\n  $ret = [];\n  foreach ($l\
    \ as $e) {\n    $ret[] = $e + 1;\n  }\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $i\
    \ => $v) {\n        $l[$i] = $v + 1;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\t$l[$i]++;\n\t}\n\treturn $l;\n}\necho \"<pre>\";\nprint_r(incr_list([1,\
    \ 2, 3]));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(incr_list([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n  \
    \  return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n)\n</pre><pre>Array\n\
    (\n    [0] => 6\n    [1] => 4\n    [2] => 6\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 4\n    [6] => 10\n    [7] => 1\n    [8] => 124\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if (empty($l)) {\n\
    \        return [];\n    }\n    return cons(car($l) + 1, incr_list(cdr($l)));\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cons() in /tmp/tmpz4t5ee0u.php:11\n\
    Stack trace:\n#0 /tmp/tmpz4t5ee0u.php(15): incr_list(Array)\n#1 /tmp/tmpz4t5ee0u.php(20):\
    \ candidate(Array)\n#2 /tmp/tmpz4t5ee0u.php(24): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpz4t5ee0u.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $r = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $r[] = $l[$i] + 1;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $value) {\n        $l[$key]++;\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    foreach\
    \ ($l as $el) {\n        $res[] = $el + 1;\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $value) {\n        $l[$key] = $value + 1;\n    }\n    return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$len = count($l);\n\t\
    for ($i = 0; $i < $len; $i++) {\n\t\t$l[$i] = $l[$i] + 1;\n\t}\n\treturn $l;\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  foreach ($l as $key\
    \ => $val) {\n    $result[$key] = $val + 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemxeum8e.php:19\n\
    Stack trace:\n#0 /tmp/tmpemxeum8e.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpemxeum8e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\treturn array_map(function($x)\
    \ {\n\t\treturn $x + 1;\n\t}, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t$newList = array();\n\
    \tforeach ($l as $i) {\n\t\t$newList[] = $i + 1;\n\t}\n\treturn $newList;\n}\n\
    \nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($a)\
    \ { return $a + 1; }, $l);\n}\n\n$incr_list = function($l) {\n    return array_map(function($a)\
    \ { return $a + 1; }, $l);\n};\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $res = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $res[] = $l[$i] + 1;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $result = [];\n  \
    \  foreach ($l as $element) {\n        $result[] = $element + 1;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8wx5wdi.php:16\n\
    Stack trace:\n#0 /tmp/tmpw8wx5wdi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpw8wx5wdi.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  $r = [];\n  foreach\
    \ ($l as $v) {\n    $r[] = $v + 1;\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t// PUT YOUR CODE HERE\n\
    }\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxifwv8hh.php:16\n\
    Stack trace:\n#0 /tmp/tmpxifwv8hh.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxifwv8hh.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if ($l == null) {\n\
    \        return null;\n    } else {\n        return cons(car($l) + 1, incr_list(cdr($l)));\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporlw0vw5.php:20\n\
    Stack trace:\n#0 /tmp/tmporlw0vw5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmporlw0vw5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    foreach ($l as $key\
    \ => $value) {\n        $l[$key] = $value + 1;\n    }\n    return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    $a = [];\n    for\
    \ ($i = 0; $i < count($l); $i++) {\n        $a[] = $l[$i] + 1;\n    }\n    return\
    \ $a;\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    if (!$l) return null;\n\
    \    return cons(head($l) + 1, incr_list(tail($l)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm415gx0.php:17\n\
    Stack trace:\n#0 /tmp/tmpcm415gx0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpcm415gx0.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n  return array_map(function($n)\
    \ {\n    return $n + 1;\n  }, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n    return array_map(function($x)\
    \ { return $x + 1; }, $l);\n}\n\nfunction candidate(...$args) {\n    return incr_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4,\
    \ 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list([1,\
    \ 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list($l) {\n\t// YOUR CODE HERE\n\t\
    $result = array();\n\tforeach ($l as $value) {\n\t\t$value += 1;\n\t\tarray_push($result,\
    \ $value);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
