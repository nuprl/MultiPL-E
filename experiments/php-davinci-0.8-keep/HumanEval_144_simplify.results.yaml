name: HumanEval_144_simplify
language: php
results:
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $Xarr =\
    \ explode(\"/\", $x);\n  $Narr = explode(\"/\", $n);\n  $val = $Xarr[0] * $Narr[1]\
    \ * $Narr[0] * $Xarr[1];\n  if($val % $Xarr[1] == 0) {\n    return True;\n  }\
    \ else {\n    return False;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcdrel7q.php:27\n\
    Stack trace:\n#0 /tmp/tmplcdrel7q.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplcdrel7q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator1\
    \ = strstr($x, '/', true);\n  $denominator1 = substr(strstr($x, '/'), 1);\n  $numerator2\
    \ = strstr($n, '/', true);\n  $denominator2 = substr(strstr($n, '/'), 1);\n  return\
    \ ($numerator1 * $denominator2) % ($denominator1 * $numerator2) == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyzdn59y.php:23\n\
    Stack trace:\n#0 /tmp/tmpzyzdn59y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzyzdn59y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $result = $x[0] * $n[1] / $x[1] * $n[0];\n\
    \  return is_int($result);\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpry70_v1w.php:21\n\
    Stack trace:\n#0 /tmp/tmpry70_v1w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpry70_v1w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    return $x[0]*$n[1]%$x[1]\
    \ == 0;\n}\necho simplify(\"1/5\", \"5/1\");\necho simplify(\"1/6\", \"2/1\");\n\
    echo simplify(\"7/10\", \"10/2\");\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_wlpiv_.php:23\n\
    Stack trace:\n#0 /tmp/tmpf_wlpiv_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf_wlpiv_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    list($n1,\
    \ $d1) = explode('/', $x);\n    list($n2, $d2) = explode('/', $n);\n    $check\
    \ = $n1 * $d2;\n    if ($check % $d1 == 0 && $check % $n2 == 0) {\n        return\
    \ 'True';\n    }\n    return 'False';\n}\n\nfunction candidate(...$args) {\n \
    \   return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg3b3bgl.php:25\n\
    Stack trace:\n#0 /tmp/tmpxg3b3bgl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxg3b3bgl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    list($x_num,\
    \ $x_den) = explode('/', $x);\n    list($n_num, $n_den) = explode('/', $n);\n\
    \    return is_int($x_num / $x_den * $n_num / $n_den);\n}\n\necho simplify(\"\
    1/6\", \"2/1\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7swxf66.php:22\n\
    Stack trace:\n#0 /tmp/tmpx7swxf66.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx7swxf66.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // return\
    \ $x === \"1/1\" || $n === \"1/1\" ? true : false;\n  // return $x === $n ? true\
    \ : false;\n  $x = fractionToDecimal($x);\n  $n = fractionToDecimal($n);\n  return\
    \ $x * $n === round($x * $n) ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function fractionToDecimal()\
    \ in /tmp/tmpxn74gom0.php:13\nStack trace:\n#0 /tmp/tmpxn74gom0.php(19): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmpxn74gom0.php(23): candidate('1/5', '5/1')\n#2 /tmp/tmpxn74gom0.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxn74gom0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numX\
    \ = (int)explode(\"/\", $x)[0];\n    $denX = (int)explode(\"/\", $x)[1];\n   \
    \ $numN = (int)explode(\"/\", $n)[0];\n    $denN = (int)explode(\"/\", $n)[1];\n\
    \    $product = $numX * $numN;\n    $gcd = gcd($product, $denX * $denN);\n   \
    \ return ($product / $gcd) % 1 == 0;\n}\n\nfunction candidate(...$args) {\n  \
    \  return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpcy47wa1t.php:16\n\
    Stack trace:\n#0 /tmp/tmpcy47wa1t.php(21): simplify('1/5', '5/1')\n#1 /tmp/tmpcy47wa1t.php(25):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpcy47wa1t.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpcy47wa1t.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0] / $x[1];\n   \
    \ $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return (floor($result) == $result)\
    \ ? true : false;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $a = explode('/',\
    \ $x);\n  $b = explode('/', $n);\n  $c = $a[0] * $b[1];\n  $d = $a[1] * $b[0];\n\
    \  return ($c % $d == 0) ? true : false;\n}\necho simplify(\"4/5\", \"4/6\").\"\
    \\n\";\necho simplify(\"1/6\", \"2/1\").\"\\n\";\necho simplify(\"7/10\", \"10/2\"\
    ).\"\\n\";\necho simplify(\"1/5\", \"5/1\").\"\\n\";\necho simplify(\"1/6\", \"\
    5/1\").\"\\n\";\necho simplify(\"2/5\", \"5/2\").\"\\n\";\necho simplify(\"2/4\"\
    , \"4/2\").\"\\n\";\necho simplify(\"3/4\", \"4/3\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_wywgp6.php:30\n\
    Stack trace:\n#0 /tmp/tmpq_wywgp6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpq_wywgp6.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_frac\
    \ = explode(\"/\", $x);\n  $n_frac = explode(\"/\", $n);\n  $x_num = (int)$x_frac[0];\n\
    \  $x_den = (int)$x_frac[1];\n  $n_num = (int)$n_frac[0];\n  $n_den = (int)$n_frac[1];\n\
    \  $x_whole = $x_num / $x_den;\n  $n_whole = $n_num / $n_den;\n  return (($x_whole\
    \ * $n_whole) % 1 == 0) ? true : false;\n}\nfunction candidate(...$args) {\n \
    \   return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52n16zw4.php:27\n\
    Stack trace:\n#0 /tmp/tmp52n16zw4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp52n16zw4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xArray\
    \ = explode('/', $x);\n    $nArray = explode('/', $n);\n    $resultNumerator =\
    \ $xArray[0] * $nArray[0];\n    $resultDenominator = $xArray[1] * $nArray[1];\n\
    \    for ($i = 2; $i <= $resultDenominator; $i++) {\n        if ($resultNumerator\
    \ % $i == 0 && $resultDenominator % $i == 0) {\n            $resultNumerator /=\
    \ $i;\n            $resultDenominator /= $i;\n            $i = 1;\n        }\n\
    \    }\n    return $resultNumerator == 1 && $resultDenominator == 1;\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbk9i3zo.php:31\n\
    Stack trace:\n#0 /tmp/tmpqbk9i3zo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqbk9i3zo.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_tokens\
    \ = explode('/', $x);\n  $n_tokens = explode('/', $n);\n  return (int)$x_tokens[0]\
    \ * (int)$n_tokens[1] % (int)$x_tokens[1] === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyopbx4c5.php:21\n\
    Stack trace:\n#0 /tmp/tmpyopbx4c5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyopbx4c5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_numerator\
    \ = explode(\"/\", $x)[0];\n    $x_denominator = explode(\"/\", $x)[1];\n    $n_numerator\
    \ = explode(\"/\", $n)[0];\n    $n_denominator = explode(\"/\", $n)[1];\n    $total_numerator\
    \ = $x_numerator * $n_numerator;\n    $total_denominator = $x_denominator * $n_denominator;\n\
    \    $result = $total_numerator / $total_denominator;\n    if ($result % 1 ==\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72gsa7h0.php:31\n\
    Stack trace:\n#0 /tmp/tmp72gsa7h0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp72gsa7h0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_arr\
    \ = explode('/', $x);\n    $n_arr = explode('/', $n);\n    $first = ($x_arr[0]\
    \ * $n_arr[1]) / ($x_arr[1] * $n_arr[0]);\n    $second = ($x_arr[0] * $n_arr[0])\
    \ / ($x_arr[1] * $n_arr[1]);\n    return $first + $second;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87vnkcgk.php:22\n\
    Stack trace:\n#0 /tmp/tmp87vnkcgk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp87vnkcgk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n//if the\
    \ product of the two fractions numerators divided by the product of their denominators\
    \ is an integer, return true, otherwise false.\n    $xArr = explode(\"/\", $x);\n\
    \    $nArr = explode(\"/\", $n);\n    $xInt = ($xArr[0] * $nArr[0]) / ($xArr[1]\
    \ * $nArr[1]);\n    return (is_int($xInt)) ? true : false;\n}\n\necho simplify(\"\
    1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numeratorX\
    \ = getNumerator($x);\n  $denominatorX = getDenominator($x);\n  $numeratorN =\
    \ getNumerator($n);\n  $denominatorN = getDenominator($n);\n  $resultNumerator\
    \ = $numeratorX * $numeratorN;\n  $resultDenominator = $denominatorX * $denominatorN;\n\
    \  $result = $resultNumerator / $resultDenominator;\n  if (is_int($result)) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getNumerator()\
    \ in /tmp/tmpqajnfnri.php:11\nStack trace:\n#0 /tmp/tmpqajnfnri.php(25): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmpqajnfnri.php(29): candidate('1/5', '5/1')\n#2 /tmp/tmpqajnfnri.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqajnfnri.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x1 = explode(\"\
    /\", $x);\n  $n1 = explode(\"/\", $n);\n  $value = $x1[0] * $n1[1] * $n1[0] *\
    \ $x1[1];\n  if($value % $x1[1] * $n1[1] == 0)\n    return True;\n  else\n   \
    \ return False;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkwhkh9r.php:25\n\
    Stack trace:\n#0 /tmp/tmphkwhkh9r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphkwhkh9r.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = (int) explode('/', $x)[0];\n  $denominator = (int) explode('/', $x)[1];\n\
    \  $wholeNumber = (int) ($numerator / $denominator);\n  $remainder = (int) $numerator\
    \ % $denominator;\n  $numerator = (int) explode('/', $n)[0];\n  $denominator =\
    \ (int) explode('/', $n)[1];\n  $result = (int) ($numerator / $denominator);\n\
    \  return $wholeNumber ? $result === $wholeNumber : !$remainder;\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60a4igew.php:25\n\
    Stack trace:\n#0 /tmp/tmp60a4igew.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp60a4igew.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_fracs\
    \ = explode('/', $x);\n    $n_fracs = explode('/', $n);\n    $res = $x_fracs[0]\
    \ * $n_fracs[1] * $n_fracs[0] * $x_fracs[1];\n    return $res % 2 === 0;\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92z9ouhd.php:22\n\
    Stack trace:\n#0 /tmp/tmp92z9ouhd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp92z9ouhd.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = strstr($x, '/', true);\n  $denominator = substr(strstr($x, '/'), 1);\n  $numerator1\
    \ = strstr($n, '/', true);\n  $denominator1 = substr(strstr($n, '/'), 1);\n  if($numerator1\
    \ * $denominator % $denominator1 == 0) {\n    return true;\n  }\n  return false;\n\
    }\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\"\
    ) . PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq42edyad.php:29\n\
    Stack trace:\n#0 /tmp/tmpq42edyad.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq42edyad.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_fraction\
    \ = explode('/', $x);\n    $n_fraction = explode('/', $n);\n    $div_result =\
    \ ($x_fraction[0] * $n_fraction[1]) / ($x_fraction[1] * $n_fraction[0]);\n   \
    \ if(is_int($div_result)) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcutzwcb.php:23\n\
    Stack trace:\n#0 /tmp/tmpxcutzwcb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxcutzwcb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_arr\
    \ = explode('/', $x);\n    $n_arr = explode('/', $n);\n    return ($x_arr[0]*$n_arr[1])%($x_arr[1]*$n_arr[0])\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpald7on05.php:21\n\
    Stack trace:\n#0 /tmp/tmpald7on05.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpald7on05.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xarr\
    \ = explode(\"/\", $x);\n    $narr = explode(\"/\", $n);\n    $num = $xarr[0]\
    \ * $narr[1];\n    $num *= $narr[0] * $xarr[1];\n    return $num % $xarr[1] *\
    \ $narr[1] == 0;\n}\necho simplify(\"1/5\", \"5/1\") ? \"True\" : \"False\";\n\
    echo \"<br>\";\necho simplify(\"1/6\", \"2/1\") ? \"True\" : \"False\";\necho\
    \ \"<br>\";\necho simplify(\"7/10\", \"10/2\") ? \"True\" : \"False\";\necho \"\
    <br>\";\necho simplify(\"4/4\", \"4/4\") ? \"True\" : \"False\";\necho \"<br>\"\
    ;\necho simplify(\"1/2\", \"2/1\") ? \"True\" : \"False\";\necho \"<br>\";\necho\
    \ simplify(\"1/3\", \"3/3\") ? \"True\" : \"False\";\necho \"<br>\";\necho simplify(\"\
    12/14\", \"7/9\") ? \"True\" : \"False\";\necho \"<br>\";\necho simplify(\"11/7\"\
    , \"1/1\") ? \"True\" : \"False\";\necho \"<br>\";\necho simplify(\"10/2\", \"\
    20/4\") ? \"True\" : \"False\";\necho \"<br>\";\necho simplify(\"3/3\", \"6/6\"\
    ) ? \"True\" : \"False\";\necho \"<br>\";\necho simplify(\"1/2\", \"1/2\") ? \"\
    True\" : \"False\";\necho \"<br>\";\necho simplify(\"1/3\", \"4/4\") ? \"True\"\
    \ : \"False\";\necho \"<br>\";\necho simplify(\"1/1\", \"9/9\") ? \"True\" : \"\
    False\";\necho \"<br>\";\necho simplify(\"1/1\", \"7/7\") ? \"True\" : \"False\"\
    ;\necho \"<br>\";\necho simplify(\"1/5\", \"2/2\") ? \"True\" : \"False\";\necho\
    \ \"<br>\";\necho simplify(\"1/2\", \"8/8\") ? \"True\" : \"False\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2_gsclcw.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\treturn\
    \ (int) $x * (int) $n % 1 === 0;\n}\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\n\
    echo simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\")\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo5o7p9z.php:23\n\
    Stack trace:\n#0 /tmp/tmpjo5o7p9z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjo5o7p9z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  return (($x * $n) % 1 === 0);\n}\n ?>\nfunction candidate(...$args) {\n   \
    \ return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $frac\
    \ = multiplyFractions($x, $n);\n    if ($frac[1] == 1) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function multiplyFractions()\
    \ in /tmp/tmpjq9wmst6.php:11\nStack trace:\n#0 /tmp/tmpjq9wmst6.php(18): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmpjq9wmst6.php(22): candidate('1/5', '5/1')\n#2 /tmp/tmpjq9wmst6.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjq9wmst6.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_num\
    \ = intval(explode(\"/\", $x)[0]);\n    $x_den = intval(explode(\"/\", $x)[1]);\n\
    \    $n_num = intval(explode(\"/\", $n)[0]);\n    $n_den = intval(explode(\"/\"\
    , $n)[1]);\n    if(($x_num * $n_den) % ($x_den * $n_num) === 0) return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkwuwwo1o.php:24\n\
    Stack trace:\n#0 /tmp/tmpkwuwwo1o.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkwuwwo1o.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = explode(\"/\", $x)[0];\n  $denominator = explode(\"/\", $x)[1];\n  return\
    \ $numerator / $denominator === (int) $n ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl54sk67e.php:20\n\
    Stack trace:\n#0 /tmp/tmpl54sk67e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl54sk67e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if (is_string($x)\
    \ && is_string($n)) {\n    list($xNumerator, $xDenominator) = explode('/', $x);\n\
    \    list($nNumerator, $nDenominator) = explode('/', $n);\n    return ($xNumerator\
    \ * $nDenominator) % ($xDenominator * $nNumerator) === 0;\n  }\n  return false;\n\
    }\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\"\
    ) . PHP_EOL;\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbit7k_2.php:26\n\
    Stack trace:\n#0 /tmp/tmpsbit7k_2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsbit7k_2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    if ($x[1] == $n[1]) {\n \
    \       if ($x[0] == $n[0]) {\n            return true;\n        }\n    }\n  \
    \  if ($x[1] == $n[0]) {\n        if ($x[0] == $n[1]) {\n            return true;\n\
    \        }\n    }\n    if ($x[0] == $n[1]) {\n        if ($x[1] == $n[0]) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvl4jx0rr.php:37\n\
    Stack trace:\n#0 /tmp/tmpvl4jx0rr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvl4jx0rr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\t$x = explode('/',\
    \ $x);\n\t$n = explode('/', $n);\n\t$numerator = $x[0] * $n[1];\n\t$denominator\
    \ = $x[1] * $n[0];\n\treturn $numerator % $denominator == 0;\n}\n\necho simplify(\"\
    1/5\", \"5/1\");\necho \"\\n\";\necho simplify(\"1/6\", \"2/1\");\necho \"\\n\"\
    ;\necho simplify(\"7/10\", \"10/2\");\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznsage7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpznsage7f.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpznsage7f.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xd =\
    \ explode(\"/\", $x);\n    $nd = explode(\"/\", $n);\n    $x = $xd[0] / $xd[1];\n\
    \    $n = $nd[0] / $nd[1];\n    $result = $x * $n;\n    if(($result - round($result))\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_array\
    \ = explode(\"/\", $x);\n  $n_array = explode(\"/\", $n);\n  $x_numerator = $x_array[0];\n\
    \  $x_denominator = $x_array[1];\n  $n_numerator = $n_array[0];\n  $n_denominator\
    \ = $n_array[1];\n  $result = $x_numerator * $n_numerator / ($x_denominator *\
    \ $n_denominator);\n  if (is_int($result)) {\n    return true;\n  } else {\n \
    \   return false;\n  }\n}\n\n$x = \"1/6\";\n$n = \"2/1\";\nvar_dump(simplify($x,\
    \ $n));\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $res\
    \ = (int)str_replace(\"/\", \"\", $x) * (int)str_replace(\"/\", \"\", $n);\n \
    \   if ($res % 2 == 0) return True;\n    return False;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2cnyogn.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2cnyogn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg2cnyogn.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if($x ===\
    \ '0') {\n    return true;\n  }\n  $x = explode('/', $x);\n  $n = explode('/',\
    \ $n);\n  $x = ((int)$x[0] / (int)$x[1]) * ((int)$n[0] / (int)$n[1]);\n  return\
    \ ($x - intval($x)) === 0;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmx0othx.php:24\n\
    Stack trace:\n#0 /tmp/tmptmx0othx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptmx0othx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xArr\
    \ = explode('/', $x);\n    $nArr = explode('/', $n);\n    $xNumerator = (int)$xArr[0];\n\
    \    $xDenominator = (int)$xArr[1];\n    $nNumerator = (int)$nArr[0];\n    $nDenominator\
    \ = (int)$nArr[1];\n    $xTimesn = (($xNumerator * $nNumerator) / ($xDenominator\
    \ * $nDenominator));\n    return is_int($xTimesn);\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_arr\
    \ = explode('/', $x);\n  $n_arr = explode('/', $n);\n  $res_numerator = (int)($x_arr[0]\
    \ * $n_arr[1]);\n  $res_denominator = (int)($x_arr[1] * $n_arr[0]);\n  $final_res\
    \ = $res_numerator / $res_denominator;\n  if(is_int($final_res)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ivxb8qx.php:27\n\
    Stack trace:\n#0 /tmp/tmp9ivxb8qx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9ivxb8qx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $xProduct = $x[0] * $n[1];\n  $nProduct =\
    \ $n[0] * $x[1];\n  return ($xProduct % $x[1] == 0 && $nProduct % $n[1] == 0)\
    \ ? 'True' : 'False';\n}\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"\
    1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\nFalse\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp6t11ckd6.php:26\nStack trace:\n#0 /tmp/tmp6t11ckd6.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6t11ckd6.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  if ($x[1] % $n[1] == 0) {\n    $x[0] *= $x[1]\
    \ / $n[1];\n    $x[1] = $n[1];\n  }\n  if ($n[1] % $x[1] == 0) {\n    $n[0] *=\
    \ $n[1] / $x[1];\n    $n[1] = $x[1];\n  }\n  if ($x[0] * $n[1] == $n[0] * $x[1])\
    \ {\n    return 'True';\n  }\n  return 'False';\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9le9i2p9.php:31\n\
    Stack trace:\n#0 /tmp/tmp9le9i2p9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9le9i2p9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // Write\
    \ your code here\n  $x = explode(\"/\", $x);\n  $n = explode(\"/\", $n);\n  $xNum\
    \ = $x[0];\n  $xDen = $x[1];\n  $nNum = $n[0];\n  $nDen = $n[1];\n  if ($xNum\
    \ == $nNum) {\n    if ($xDen == $nDen) {\n      return true;\n    }\n  } else\
    \ {\n    return false;\n  }\n}\n\necho simplify(\"1/5\", \"5/1\");\necho simplify(\"\
    1/6\", \"2/1\");\necho simplify(\"7/10\", \"10/2\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlov__nt.php:35\n\
    Stack trace:\n#0 /tmp/tmpnlov__nt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnlov__nt.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $num =\
    \ explode(\"/\", $x);\n  $den = explode(\"/\", $n);\n  return ! (intval($num[0])\
    \ * intval($den[1]) % intval($num[1]));\n}\n\necho simplify(\"1/5\", \"5/1\")\
    \ ? \"true\\n\" : \"false\\n\";\necho simplify(\"1/6\", \"2/1\") ? \"true\\n\"\
    \ : \"false\\n\";\necho simplify(\"7/10\", \"10/2\") ? \"true\\n\" : \"false\\\
    n\";\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "false\nfalse\nfalse\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpdk4zqg2z.php:25\nStack trace:\n#0 /tmp/tmpdk4zqg2z.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdk4zqg2z.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $result = $x[0] * $n[1] / $x[1] * $n[0];\n\
    \  return $result % 1 == 0;\n}\n\n$x = '1/5';\n$n = '5/1';\necho 'simplify(\"\
    1/5\", \"5/1\") = ' . simplify($x, $n) . PHP_EOL;\n\n$x = '1/6';\n$n = '2/1';\n\
    echo 'simplify(\"1/6\", \"2/1\") = ' . simplify($x, $n) . PHP_EOL;\n\n$x = '7/10';\n\
    $n = '10/2';\necho 'simplify(\"7/10\", \"10/2\") = ' . simplify($x, $n) . PHP_EOL;\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "simplify(\"1/5\", \"5/1\") = 1\nsimplify(\"1/6\", \"2/1\") = 1\nsimplify(\"\
    7/10\", \"10/2\") = 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvki28u2v.php:34\n\
    Stack trace:\n#0 /tmp/tmpvki28u2v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvki28u2v.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $fraction = [\n    $x[0] * $n[1],\n    $x[1]\
    \ * $n[0]\n  ];\n  return (($fraction[0] / $fraction[1]) % 1 === 0) ? 'True' :\
    \ 'False';\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnmygt8t.php:24\n\
    Stack trace:\n#0 /tmp/tmpmnmygt8t.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmnmygt8t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_arr\
    \ = explode('/', $x);\n    $n_arr = explode('/', $n);\n    $result = (int)$x_arr[0]\
    \ * (int)$n_arr[1] / ((int)$x_arr[1] * (int)$n_arr[0]);\n    return intval($result)\
    \ == $result;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft949yg7.php:22\n\
    Stack trace:\n#0 /tmp/tmpft949yg7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpft949yg7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $arrX =\
    \ explode('/', $x);\n  $arrN = explode('/', $n);\n  $result = '';\n  if (($arrX[0]/$arrX[1])\
    \ * ($arrN[0]/$arrN[1]) % 1 == 0) {\n    $result = true;\n  } else {\n    $result\
    \ = false;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps01pxl24.php:27\n\
    Stack trace:\n#0 /tmp/tmps01pxl24.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps01pxl24.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xNum\
    \ = floatval(substr($x, 0, strpos($x, '/')));\n    $xDen = floatval(substr($x,\
    \ strpos($x, '/') + 1));\n    $nNum = floatval(substr($n, 0, strpos($n, '/')));\n\
    \    $nDen = floatval(substr($n, strpos($n, '/') + 1));\n    return ($xNum * $nDen)\
    \ % ($xDen * $nNum) == 0;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h0ww2f0.php:23\n\
    Stack trace:\n#0 /tmp/tmp6h0ww2f0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6h0ww2f0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n//     return\
    \ intval($x) * intval($n) == intval($x * $n);\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3rrwn86k.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $denom = $x[1] * $n[1];\n  $num = $x[0] *\
    \ $n[1] + $n[0] * $x[1];\n  if ($num % $denom == 0) {\n    return True;\n  } else\
    \ {\n    return False;\n  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxqzl7jb.php:26\n\
    Stack trace:\n#0 /tmp/tmpfxqzl7jb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfxqzl7jb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    list($xn,\
    \ $xd) = explode('/', $x);\n    list($nn, $nd) = explode('/', $n);\n    return\
    \ is_int($xn * $nn / ($xd * $nd));\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($xN,\
    \ $xD) = explode('/', $x);\n  list($nN, $nD) = explode('/', $n);\n  return ((int)$xN\
    \ * (int)$nD) % ((int)$xD * (int)$nN) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9vb1bf_.php:21\n\
    Stack trace:\n#0 /tmp/tmpu9vb1bf_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu9vb1bf_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numerator1\
    \ = explode(\"/\", $x)[0];\n    $denominator1 = explode(\"/\", $x)[1];\n    $numerator2\
    \ = explode(\"/\", $n)[0];\n    $denominator2 = explode(\"/\", $n)[1];\n    $intResult\
    \ = $numerator1 * $numerator2 / $denominator1 / $denominator2;\n    return is_int($intResult);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  $res = $x * $n;\n  return (is_int($res)) ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpregqtays.php:23\n\
    Stack trace:\n#0 /tmp/tmpregqtays.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpregqtays.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $gcd = gcd($x[1], $n[1]);\n\
    \    $lcm = ($x[1] * $n[1]) / $gcd;\n    $x[0] = $x[0] * ($lcm / $x[1]);\n   \
    \ $n[0] = $n[0] * ($lcm / $n[1]);\n    return (($x[0] * $n[1]) % ($x[1] * $n[0])\
    \ == 0);\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpug_t_glz.php:13\n\
    Stack trace:\n#0 /tmp/tmpug_t_glz.php(20): simplify(Array, Array)\n#1 /tmp/tmpug_t_glz.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpug_t_glz.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpug_t_glz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  $result = $x * $n;\n  return (is_int($result)) ? true : false;\n}\necho simplify(\"\
    1/5\", \"5/1\");\necho \"<br>\";\necho simplify(\"1/6\", \"2/1\");\necho \"<br>\"\
    ;\necho simplify(\"7/10\", \"10/2\");\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4f9hvrl.php:29\n\
    Stack trace:\n#0 /tmp/tmpu4f9hvrl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu4f9hvrl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $product = ($x[0] * $n[0]) / ($x[1] * $n[1]);\n\
    \  return ($product == floor($product)) ? true : false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x1 =\
    \ explode(\"/\", $x);\n    $n1 = explode(\"/\", $n);\n    $x2 = (int)$x1[0] *\
    \ (int)$n1[1];\n    $n2 = (int)$x1[1] * (int)$n1[0];\n    $result = $x2 / $n2;\n\
    \    if(is_int($result)){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n\nprint_r(simplify(\"1/5\", \"5/1\"));\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2fop7jv.php:29\n\
    Stack trace:\n#0 /tmp/tmpj2fop7jv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj2fop7jv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $result = $x[0] / $x[1] *\
    \ $n[0] / $n[1];\n    if ($result % 1 != 0) {\n        return false;\n    } else\
    \ {\n        return true;\n    }\n}\necho \"<pre>\";\nprint_r(simplify(\"1/5\"\
    , \"5/1\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(simplify(\"1/6\", \"\
    2/1\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(simplify(\"7/10\", \"10/2\"\
    ));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>1</pre><pre>1</pre><pre>1</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwddl69ao.php:35\nStack trace:\n#0 /tmp/tmpwddl69ao.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwddl69ao.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_numerator\
    \ = intval(explode(\"/\", $x)[0]);\n    $x_denominator = intval(explode(\"/\"\
    , $x)[1]);\n    $n_numerator = intval(explode(\"/\", $n)[0]);\n    $n_denominator\
    \ = intval(explode(\"/\", $n)[1]);\n    return (($x_numerator * $n_denominator)\
    \ % ($x_denominator * $n_numerator)) == 0;\n}\n\n$test1 = simplify(\"1/5\", \"\
    5/1\");\n$test2 = simplify(\"1/6\", \"2/1\");\n$test3 = simplify(\"7/10\", \"\
    10/2\");\n$test4 = simplify(\"1/10\", \"2/5\");\necho \"simplify(\\\"1/5\\\",\
    \ \\\"5/1\\\") = \" . ($test1 ? \"True\" : \"False\") . \"\\n\";\necho \"simplify(\\\
    \"1/6\\\", \\\"2/1\\\") = \" . ($test2 ? \"True\" : \"False\") . \"\\n\";\necho\
    \ \"simplify(\\\"7/10\\\", \\\"10/2\\\") = \" . ($test3 ? \"True\" : \"False\"\
    ) . \"\\n\";\necho \"simplify(\\\"1/10\\\", \\\"2/5\\\") = \" . ($test4 ? \"True\"\
    \ : \"False\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "simplify(\"1/5\", \"5/1\") = False\nsimplify(\"1/6\", \"2/1\") = False\n\
    simplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/10\", \"2/5\") = False\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmplqdd3517.php:32\nStack\
    \ trace:\n#0 /tmp/tmplqdd3517.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplqdd3517.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xa = explode('/',\
    \ $x);\n  $na = explode('/', $n);\n  $num = ($xa[0] * $na[1]) / ($xa[1] * $na[0]);\n\
    \  return is_int($num);\n}\necho simplify(\"7/10\", \"10/2\").\"\\n\";\necho simplify(\"\
    1/6\", \"2/1\").\"\\n\";\necho simplify(\"1/5\", \"5/1\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j19emw1.php:24\n\
    Stack trace:\n#0 /tmp/tmp8j19emw1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8j19emw1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ str_replace(\"/\", \" \", $x);\n    $n = str_replace(\"/\", \" \", $n);\n  \
    \  $x = explode(\" \", $x);\n    $n = explode(\" \", $n);\n    $gcd = gcd($x[0],\
    \ $x[1]);\n    $a = $x[0] / $gcd;\n    $b = $x[1] / $gcd;\n    $gcd = gcd($n[0],\
    \ $n[1]);\n    $c = $n[0] / $gcd;\n    $d = $n[1] / $gcd;\n    if (($a * $d) ==\
    \ ($b * $c)) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmp1z_ygng2.php:15\n\
    Stack trace:\n#0 /tmp/tmp1z_ygng2.php(28): simplify(Array, Array)\n#1 /tmp/tmp1z_ygng2.php(32):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmp1z_ygng2.php(47): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp1z_ygng2.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $nx =\
    \ explode(\"/\", $x);\n    $nn = explode(\"/\", $n);\n    $result = $nx[0] / $nx[1]\
    \ * $nn[0] / $nn[1];\n    return (ceil($result) == $result);\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numbers\
    \ = explode('/', $x);\n    $numbers2 = explode('/', $n);\n    if (gcd($numbers[0],\
    \ $numbers[1]) === 1 && gcd($numbers2[0], $numbers2[1]) === 1) {\n        $x1\
    \ = $numbers[0] * $numbers2[1];\n        $x2 = $numbers[1] * $numbers2[0];\n \
    \       if (gcd($x1, $x2) === 1) {\n            return false;\n        } else\
    \ {\n            return true;\n        }\n    } else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmppk54p47d.php:13\n\
    Stack trace:\n#0 /tmp/tmppk54p47d.php(26): simplify('1/5', '5/1')\n#1 /tmp/tmppk54p47d.php(30):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmppk54p47d.php(45): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmppk54p47d.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $den\
    \ = str_replace('/', '', $x);\n    $num = str_replace('/', '', $n);\n    $x =\
    \ (int)explode('/', $x)[0]/$den;\n    $n = (int)explode('/', $n)[0]/$num;\n  \
    \  if($x * $n % 1 === 0) return true;\n    return false;\n}\nvar_dump(simplify(\"\
    1/5\", \"5/1\"));\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyfx5qou.php:25\n\
    Stack trace:\n#0 /tmp/tmpuyfx5qou.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuyfx5qou.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  $n = $x * $n;\n  if ($n == round($n)) {\n    return true;\n  } else {\n   \
    \ return false;\n  }\n}\necho simplify(\"1/5\", \"5/1\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    return ($x[0] * $n[1]) %\
    \ ($x[1] * $n[0]) === 0;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tqappdm.php:20\n\
    Stack trace:\n#0 /tmp/tmp0tqappdm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0tqappdm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  //$x =\
    \ explode(\"/\", $x);\n  //$n = explode(\"/\", $n);\n  //echo $x[0]/$x[1]*$n[0]/$n[1]\
    \ . \"<br>\";\n  //echo is_int($x[0]/$x[1]*$n[0]/$n[1]);\n  return (is_int($x[0]/$x[1]*$n[0]/$n[1]));\n\
    }\necho simplify(\"1/5\", \"5/1\") . \"<br>\";\necho simplify(\"1/6\", \"2/1\"\
    ) . \"<br>\";\necho simplify(\"7/10\", \"10/2\") . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpkdqhyvny.php on line\
    \ 15\n\nWarning: Division by zero in /tmp/tmpkdqhyvny.php on line 15\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpkdqhyvny.php on line 15\n\nWarning:\
    \ Division by zero in /tmp/tmpkdqhyvny.php on line 15\n<br>\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpkdqhyvny.php on line 15\n\nWarning: Division by\
    \ zero in /tmp/tmpkdqhyvny.php on line 15\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpkdqhyvny.php on line 15\n\nWarning: Division by zero in /tmp/tmpkdqhyvny.php\
    \ on line 15\n<br>\nWarning: A non-numeric value encountered in /tmp/tmpkdqhyvny.php\
    \ on line 15\n\nWarning: Division by zero in /tmp/tmpkdqhyvny.php on line 15\n\
    \nWarning: Division by zero in /tmp/tmpkdqhyvny.php on line 15\n<br>\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpkdqhyvny.php on line 15\n\nWarning:\
    \ Division by zero in /tmp/tmpkdqhyvny.php on line 15\n\nWarning: A non-numeric\
    \ value encountered in /tmp/tmpkdqhyvny.php on line 15\n\nWarning: Division by\
    \ zero in /tmp/tmpkdqhyvny.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkdqhyvny.php:25\nStack trace:\n#0 /tmp/tmpkdqhyvny.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkdqhyvny.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $result = ($x[0] * $n[1]) / ($x[1] * $n[0]);\n\
    \  return $result % 1 == 0;\n}\nprint_r(simplify(\"1/5\", \"5/1\"));\nprint_r(simplify(\"\
    1/6\", \"2/1\"));\nprint_r(simplify(\"7/10\", \"10/2\"));\n ?>\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111function candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // your\
    \ code\n    $xDenominator = intval(explode(\"/\", $x)[1]);\n    $nDenominator\
    \ = intval(explode(\"/\", $n)[1]);\n    $denominator = $xDenominator * $nDenominator;\n\
    \    $xNumerator = intval(explode(\"/\", $x)[0]);\n    $nNumerator = intval(explode(\"\
    /\", $n)[0]);\n    $numerator = $xNumerator * $nDenominator + $nNumerator * $xDenominator;\n\
    \    if ($numerator % $denominator == 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho simplify(\"1/5\", \"5/1\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8i5zu9e.php:30\n\
    Stack trace:\n#0 /tmp/tmpz8i5zu9e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpz8i5zu9e.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if (substr_count($x,\
    \ '/') == 1) {\n    $arrX = explode('/', $x);\n    $numeratorX = $arrX[0];\n \
    \   $denominatorX = $arrX[1];\n  }\n  if (substr_count($n, '/') == 1) {\n    $arrN\
    \ = explode('/', $n);\n    $numeratorN = $arrN[0];\n    $denominatorN = $arrN[1];\n\
    \  }\n  $result = $numeratorX / $denominatorX * $numeratorN / $denominatorN;\n\
    \  if (gettype($result) == 'integer') {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\necho simplify(\"1/6\", \"2/1\");\n ?>\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xArr =\
    \ explode('/', $x);\n  $nArr = explode('/', $n);\n  $divisor = gcd($xArr[1], $nArr[1]);\n\
    \  $xArr[1] /= $divisor;\n  $nArr[1] /= $divisor;\n  return isInteger($xArr[0]\
    \ * $nArr[1] / $xArr[1] * $nArr[0]);\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmps5knu1tw.php:13\n\
    Stack trace:\n#0 /tmp/tmps5knu1tw.php(19): simplify('1/5', '5/1')\n#1 /tmp/tmps5knu1tw.php(23):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmps5knu1tw.php(38): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmps5knu1tw.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($x_numerator,\
    \ $x_denominator) = explode('/', $x);\n  list($n_numerator, $n_denominator) =\
    \ explode('/', $n);\n  $result = $x_numerator * $n_numerator / $x_denominator\
    \ / $n_denominator;\n  return floor($result) == $result;\n}\necho simplify(\"\
    1/5\", \"5/1\") ? 'True' : 'False';\necho \"\\n\";\necho simplify(\"1/6\", \"\
    2/1\") ? 'True' : 'False';\necho \"\\n\";\necho simplify(\"7/10\", \"10/2\") ?\
    \ 'True' : 'False';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    //step\
    \ 1: reduce x and n\n    $x = reduce($x);\n    $n = reduce($n);\n    //step 2:\
    \ compare values\n    $xNum = getNumerator($x);\n    $xDen = getDenominator($x);\n\
    \    $nNum = getNumerator($n);\n    $nDen = getDenominator($n);\n    if($xNum\
    \ === $nNum && $xDen === $nDen) return \"True\";\n    if($xNum !== $nNum && $xDen\
    \ !== $nDen) return \"False\";\n    if($xNum !== $nNum && $xDen === $nDen) return\
    \ \"False\";\n    if($xNum === $nNum && $xDen !== $nDen) return \"False\";\n \
    \   //step 3: multiply and return result\n}\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reduce() in /tmp/tmpg7lm1u5p.php:12\n\
    Stack trace:\n#0 /tmp/tmpg7lm1u5p.php(26): simplify('1/5', '5/1')\n#1 /tmp/tmpg7lm1u5p.php(30):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpg7lm1u5p.php(45): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpg7lm1u5p.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $result = $x[0] * $n[1] /\
    \ $x[1] * $n[0];\n    return $result % 1 == 0;\n}\necho simplify(\"7/10\", \"\
    10/2\");\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdewsw83.php:23\n\
    Stack trace:\n#0 /tmp/tmpkdewsw83.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkdewsw83.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xParts\
    \ = explode('/', $x);\n    $nParts = explode('/', $n);\n    $result = $xParts[0]\
    \ * $nParts[1] / $xParts[1] / $nParts[0];\n    return is_int($result);\n}\n\n\
    var_dump(simplify(\"1/5\", \"5/1\")); // True\nvar_dump(simplify(\"1/6\", \"2/1\"\
    )); // False\nvar_dump(simplify(\"7/10\", \"10/2\")); // False\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw9ybduph.php:25\nStack trace:\n#0 /tmp/tmpw9ybduph.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw9ybduph.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  return floor($x[0] / $x[1] * $n[1] / $n[0])\
    \ == $x[0] / $x[1] * $n[1] / $n[0];\n}\n\nfunction candidate(...$args) {\n   \
    \ return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kn6rbx0.php:21\n\
    Stack trace:\n#0 /tmp/tmp6kn6rbx0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6kn6rbx0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numDenom\
    \ = explode('/', $x);\n    $denomX = $numDenom[1];\n    $numDenom = explode('/',\
    \ $n);\n    $denomN = $numDenom[1];\n    $denom = $denomX * $denomN;\n    $num\
    \ = ($denomX * $numDenom[0]) + ($denomN * $numDenom[0]);\n    if ($num % $denom\
    \ === 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7n885k7.php:31\n\
    Stack trace:\n#0 /tmp/tmpo7n885k7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo7n885k7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($xNum,\
    \ $xDen) = explode('/', $x);\n  list($nNum, $nDen) = explode('/', $n);\n  $multiple\
    \ = $xNum * $nNum / $xDen / $nDen;\n  $floor = floor($multiple);\n  return $multiple\
    \ == $floor;\n}\n\necho simplify(\"1/5\", \"5/1\") . \"\\n\"; // True\necho simplify(\"\
    1/6\", \"2/1\") . \"\\n\"; // False\necho simplify(\"7/10\", \"10/2\") . \"\\\
    n\"; // False\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_explode\
    \ = explode('/', $x);\n    $n_explode = explode('/', $n);\n    $x_numerator =\
    \ $x_explode[0];\n    $x_denominator = $x_explode[1];\n    $n_numerator = $n_explode[0];\n\
    \    $n_denominator = $n_explode[1];\n    if ($x_numerator * $n_denominator ==\
    \ $n_numerator * $x_denominator) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vulsdn1.php:28\n\
    Stack trace:\n#0 /tmp/tmp5vulsdn1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5vulsdn1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  if(($x[0] / $x[1]) * ($n[0] / $n[1]) % 1 ===\
    \ 0) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqs0buyby.php:24\n\
    Stack trace:\n#0 /tmp/tmpqs0buyby.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqs0buyby.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x1 = preg_split(\"\
    /\\//\", $x);\n  $n1 = preg_split(\"/\\//\", $n);\n  $result = $x1[0] * $n1[1]\
    \ % $x1[1] * $n1[0];\n  if ($result == 0) {\n    return true;\n  } else {\n  \
    \  return false;\n  }\n}\n$x = \"1/5\";\n$n = \"5/1\";\necho simplify($x, $n);\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bk3te4k.php:28\n\
    Stack trace:\n#0 /tmp/tmp1bk3te4k.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp1bk3te4k.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    if ($x[1] % $n[1] == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi38kkloy.php:25\n\
    Stack trace:\n#0 /tmp/tmpi38kkloy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi38kkloy.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // Write\
    \ your code here...\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvlijhbi.php:19\n\
    Stack trace:\n#0 /tmp/tmpnvlijhbi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvlijhbi.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    return\
    \ (int)$x % (int)$n == 0;\n}\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho\
    \ simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdibsuew.php:22\n\
    Stack trace:\n#0 /tmp/tmphdibsuew.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphdibsuew.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = str_replace('/', '', $x);\n  $denominator = str_replace('/', '', $n);\n  $simplify\
    \ = ($numerator / $denominator);\n  if (is_int($simplify)) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6n428jh.php:26\n\
    Stack trace:\n#0 /tmp/tmpo6n428jh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpo6n428jh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xNum\
    \ = explode(\"/\", $x);\n    $nNum = explode(\"/\", $n);\n    return ((int)$xNum[0]\
    \ * (int)$nNum[1]) % ((int)$xNum[1] * (int)$nNum[0]) === 0;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4e1qcsq.php:20\n\
    Stack trace:\n#0 /tmp/tmpd4e1qcsq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd4e1qcsq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  return is_int($x[0]/$x[1] * $n[0]/$n[1]);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8276iwl2.php:20\n\
    Stack trace:\n#0 /tmp/tmp8276iwl2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8276iwl2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  return floor($x * $n) == $x * $n;\n}\n\nfunction candidate(...$args) {\n  \
    \  return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xNum =\
    \ explode(\"/\", $x);\n  $nNum = explode(\"/\", $n);\n  if ($xNum[0] * $nNum[1]\
    \ % $xNum[1] == 0 && $xNum[0] * $nNum[1] / $xNum[1] == $nNum[0] * $xNum[1] / $nNum[1]){\n\
    \    return true;\n  }\n  return false;\n}\necho \"simplify(\\\"1/5\\\", \\\"\
    5/1\\\") = \". simplify(\"1/5\", \"5/1\").\"\\n\";\necho \"simplify(\\\"1/6\\\"\
    , \\\"2/1\\\") = \". simplify(\"1/6\", \"2/1\").\"\\n\";\necho \"simplify(\\\"\
    7/10\\\", \\\"10/2\\\") = \". simplify(\"7/10\", \"10/2\").\"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "simplify(\"1/5\", \"5/1\") = \nsimplify(\"1/6\", \"2/1\") = \nsimplify(\"\
    7/10\", \"10/2\") = \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9g7w_dp5.php:27\n\
    Stack trace:\n#0 /tmp/tmp9g7w_dp5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9g7w_dp5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($xN,\
    \ $xD) = explode('/', $x);\n  list($nN, $nD) = explode('/', $n);\n  $x = $xN /\
    \ $xD;\n  $n = $nN / $nD;\n  return is_int($x * $n);\n}\n\necho simplify(\"7/10\"\
    , \"10/2\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn66x8x0g.php:24\n\
    Stack trace:\n#0 /tmp/tmpn66x8x0g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn66x8x0g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $piecesX\
    \ = explode('/', $x);\n  $piecesN = explode('/', $n);\n  $denominator = ($piecesX[1]\
    \ * $piecesN[1]);\n  $numerator = ($piecesX[0] * $piecesN[0]);\n  $value = floatval($numerator\
    \ / $denominator);\n  if (is_int($value)) {\n    return true;\n  } else {\n  \
    \  return false;\n  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9pjdd01.php:27\n\
    Stack trace:\n#0 /tmp/tmpl9pjdd01.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl9pjdd01.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_num\
    \ = (int)explode(\"/\", $x)[0];\n    $x_den = (int)explode(\"/\", $x)[1];\n  \
    \  $n_num = (int)explode(\"/\", $n)[0];\n    $n_den = (int)explode(\"/\", $n)[1];\n\
    \    return ($x_num * $n_den) % ($x_den * $n_num) == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxco0wf39.php:22\n\
    Stack trace:\n#0 /tmp/tmpxco0wf39.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxco0wf39.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $fraction\
    \ = explode('/', $x);\n    $fractionN = explode('/', $n);\n    if ($fraction[1]\
    \ == 1) {\n        return True;\n    }\n    $result = $fraction[0] / $fraction[1]\
    \ * $fractionN[0] / $fractionN[1];\n    return is_int($result);\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p_n_jmi.php:24\n\
    Stack trace:\n#0 /tmp/tmp0p_n_jmi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0p_n_jmi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $a =\
    \ explode('/', $x);\n    $b = explode('/', $n);\n    $a = $a[0] / $a[1];\n   \
    \ $b = $b[0] / $b[1];\n    $res = $a * $b;\n    return ((int)$res === $res) ?\
    \ true : false;\n}\n\necho simplify(\"1/6\", \"2/1\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rfdsn1h.php:25\n\
    Stack trace:\n#0 /tmp/tmp2rfdsn1h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2rfdsn1h.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xArray\
    \ = explode('/', $x);\n  $nArray = explode('/', $n);\n  $xNumerator = $xArray[0];\n\
    \  $xDenominator = $xArray[1];\n  $nNumerator = $nArray[0];\n  $nDenominator =\
    \ $nArray[1];\n  $multiplyer = $xNumerator * $nDenominator;\n  $divider = $xDenominator\
    \ * $nNumerator;\n  if ($multiplyer % $divider === 0) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\necho simplify(\"1/5\", \"5/1\") . \"\\n\"\
    ;\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"7/10\", \"10/2\"\
    ) . \"\\n\";\n ?>\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // Get\
    \ the numerator and denominator for x\n  $xArr = explode('/', $x);\n  $xNumerator\
    \ = $xArr[0];\n  $xDenominator = $xArr[1];\n  // Get the numerator and denominator\
    \ for n\n  $nArr = explode('/', $n);\n  $nNumerator = $nArr[0];\n  $nDenominator\
    \ = $nArr[1];\n  // If the numerator for n is 1, then we can just do the multiplication\n\
    \  if ($nNumerator == 1) {\n    $result = ($xNumerator * $nDenominator) % $xDenominator;\n\
    \    return $result == 0 ? true : false;\n  }\n  // Otherwise, we can multiply\
    \ the fraction x with (numerator/denominator)\n  $result = ($xNumerator * $nNumerator)\
    \ / ($xDenominator * $nDenominator);\n  // If the result is a whole number, then\
    \ return true\n  return $result == intval($result) ? true : false;\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47bfd8or.php:46\n\
    Stack trace:\n#0 /tmp/tmp47bfd8or.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp47bfd8or.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $num = (int)$x[0] * (int)$n[1];\n  $den =\
    \ (int)$x[1] * (int)$n[0];\n  $gcd = gcd($num, $den);\n  return ($num / $gcd)\
    \ % ($den / $gcd) == 0;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpper7nd6p.php:15\n\
    Stack trace:\n#0 /tmp/tmpper7nd6p.php(20): simplify(Array, Array)\n#1 /tmp/tmpper7nd6p.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpper7nd6p.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpper7nd6p.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // find\
    \ the common denominator\n    $s = str_split($x);\n    $t = str_split($n);\n \
    \   $result = [\n        'x' => $s[0] / $s[2],\n        'n' => $t[0] / $t[2]\n\
    \    ];\n    // var_dump($result);\n    return $result['x'] * $result['n'] ===\
    \ round($result['x'] * $result['n']);\n}\n\nfunction candidate(...$args) {\n \
    \   return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3xq5h28.php:29\n\
    Stack trace:\n#0 /tmp/tmpl3xq5h28.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl3xq5h28.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $result = ($x[0] * $n[1]) / ($x[1] * $n[0]);\n\
    \  if (floor($result) == $result) {\n    return True;\n  } else {\n    return\
    \ False;\n  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9z4yhcp.php:25\n\
    Stack trace:\n#0 /tmp/tmpd9z4yhcp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd9z4yhcp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnr0_15j.php:19\n\
    Stack trace:\n#0 /tmp/tmptnr0_15j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptnr0_15j.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $output\
    \ = $x*$n;\n    if (is_int($output)) {\n        return true;\n    }\n    return\
    \ false;\n}\nvar_dump(simplify(\"1/5\", \"5/1\"));\nvar_dump(simplify(\"1/6\"\
    , \"2/1\"));\nvar_dump(simplify(\"7/10\", \"10/2\"));\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\nbool(true)\nbool(true)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwh33t2u3.php:26\nStack trace:\n#0 /tmp/tmpwh33t2u3.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwh33t2u3.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($xn,\
    \ $xd) = explode('/', $x);\n  list($nn, $nd) = explode('/', $n);\n  $res = $xn\
    \ * $nn / $xd * $nd;\n  return is_int($res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r41o7s0.php:25\n\
    Stack trace:\n#0 /tmp/tmp1r41o7s0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1r41o7s0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if (strpos($x,\
    \ \"/\") === false || strpos($n, \"/\") === false) {\n    return false;\n  }\n\
    \  $x_arr = explode(\"/\", $x);\n  $n_arr = explode(\"/\", $n);\n  $x_num = $x_arr[0];\n\
    \  $x_den = $x_arr[1];\n  $n_num = $n_arr[0];\n  $n_den = $n_arr[1];\n  return\
    \ fmod(($x_num * $n_den), ($x_den * $n_num)) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8wjj3gfo.php:28\n\
    Stack trace:\n#0 /tmp/tmp8wjj3gfo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8wjj3gfo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $arrX\
    \ = explode('/', $x);\n    $arrN = explode('/', $n);\n    $res = $arrX[0] * $arrN[1]\
    \ * $arrN[0] * $arrX[1];\n    if ($res % $arrX[1] == 0 && $res % $arrN[1] == 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho\
    \ simplify(\"1/5\", \"5/1\");\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevfyoreq.php:28\n\
    Stack trace:\n#0 /tmp/tmpevfyoreq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpevfyoreq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // returns\
    \ True if x * n evaluates to a whole number and False otherwise\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxjia8rc.php:19\n\
    Stack trace:\n#0 /tmp/tmpvxjia8rc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvxjia8rc.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n// Write\
    \ your code here...\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnyyb69r.php:18\n\
    Stack trace:\n#0 /tmp/tmpvnyyb69r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvnyyb69r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($num_x,\
    \ $den_x) = explode('/', $x);\n  list($num_n, $den_n) = explode('/', $n);\n  $product\
    \ = $num_x * $num_n;\n  return $product % $den_x == 0;\n}\n\necho simplify(\"\
    1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8btzgdfy.php:28\n\
    Stack trace:\n#0 /tmp/tmp8btzgdfy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8btzgdfy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $result\
    \ = strval(fmod(eval(\"return $x * $n;\"), 1));\n    return $result === '0';\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $a =\
    \ explode('/', $x);\n    $b = explode('/', $n);\n    if($a[1] > $b[1]){\n    \
    \    $i = $a[1];\n        $a[1] = $b[1];\n        $b[1] = $i;\n    }\n    $d =\
    \ $a[1] * $b[1];\n    $r = $a[0] * $b[1] + $b[0] * $a[1];\n    if($r % $d == 0){\n\
    \        return true;\n    }\n    return false;\n}\necho simplify(\"1/5\", \"\
    5/1\");\necho '<br>';\necho simplify(\"1/6\", \"2/1\");\necho '<br>';\necho simplify(\"\
    7/10\", \"10/2\");\necho '<br>';\necho simplify(\"1/3\", \"8/3\");\necho '<br>';\n\
    echo simplify(\"1/6\", \"1/3\");\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br>1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp9o2t6p.php:43\n\
    Stack trace:\n#0 /tmp/tmpzp9o2t6p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzp9o2t6p.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $product = ($x[0] * $n[0]) / ($x[1] * $n[1]);\n\
    \  if ($product % 1 == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nprint_r(simplify(\"1/5\", \"5/1\"));\nprint_r(simplify(\"1/6\", \"2/1\"\
    ));\nprint_r(simplify(\"7/10\", \"10/2\"));\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacksfm64.php:29\n\
    Stack trace:\n#0 /tmp/tmpacksfm64.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpacksfm64.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $denom = array_product($x) * array_product($n);\n\
    \  $numer = $x[0] * $n[1] + $n[0] * $x[1];\n  if ($numer % $denom == 0) {\n  \
    \  return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1aymqsr.php:26\n\
    Stack trace:\n#0 /tmp/tmpo1aymqsr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpo1aymqsr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $simplify\
    \ = simplify_fraction($x);\n  $simplify_array = array($simplify[0], $simplify[1]);\n\
    \  $simplify_n = simplify_fraction($n);\n  $simplify_n_array = array($simplify_n[0],\
    \ $simplify_n[1]);\n  // Convert fractions to just numerators\n  $simplify_x =\
    \ ($simplify_array[0] * $simplify_n_array[1]);\n  $simplify_n = ($simplify_array[1]\
    \ * $simplify_n_array[0]);\n  // Use GCD to simplify x and n\n  $result = simplify_fraction($simplify_x\
    \ . \"/\" . $simplify_n);\n  // Return True if denominator is 1 and false otherwise\n\
    \  return ($result[1] == 1) ? true : false;\n}\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function simplify_fraction()\
    \ in /tmp/tmpm6two5iq.php:11\nStack trace:\n#0 /tmp/tmpm6two5iq.php(24): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmpm6two5iq.php(28): candidate('1/5', '5/1')\n#2 /tmp/tmpm6two5iq.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm6two5iq.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator_x\
    \ = explode(\"/\", $x)[0];\n  $denominator_x = explode(\"/\", $x)[1];\n  $numerator_n\
    \ = explode(\"/\", $n)[0];\n  $denominator_n = explode(\"/\", $n)[1];\n  $number\
    \ = $numerator_x * $denominator_n;\n  if ($number % $denominator_x == 0) {\n \
    \   return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo5tu0oo.php:27\n\
    Stack trace:\n#0 /tmp/tmpvo5tu0oo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvo5tu0oo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = explode(\"/\", $x)[0];\n  $denominator = explode(\"/\", $x)[1];\n  if ($numerator\
    \ % $denominator == 0) {\n    return \"True\";\n  } else {\n    return \"False\"\
    ;\n  }\n}\necho simplify(\"1/5\", \"5/1\") . \"<br>\";\necho simplify(\"1/6\"\
    , \"2/1\") . \"<br>\";\necho simplify(\"7/10\", \"10/2\") . \"<br>\";\n ?>\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False<br>False<br>False<br>function candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xFraction\
    \ = explode('/', $x);\n  $nFraction = explode('/', $n);\n  if (($xFraction[0]\
    \ * $nFraction[1]) % ($xFraction[1] * $nFraction[0]) == 0)\n    return true;\n\
    \  return false;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zy5waff.php:22\n\
    Stack trace:\n#0 /tmp/tmp4zy5waff.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4zy5waff.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\t$x_arr\
    \ = explode('/', $x);\n\t$n_arr = explode('/', $n);\n\t$n_num = $x_arr[0] * $n_arr[1];\n\
    \t$d_num = $x_arr[1] * $n_arr[0];\n\tif ($n_num % $d_num == 0) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\necho simplify(\"3/10\", \"4/2\");\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kgffhc8.php:29\n\
    Stack trace:\n#0 /tmp/tmp4kgffhc8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4kgffhc8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $f1 = explode(\"\
    /\", $x);\n  $f2 = explode(\"/\", $n);\n  $f3 = (($f1[0] * $f2[1]) / ($f1[1] *\
    \ $f2[0]));\n  return ((int)$f3 == $f3);\n}\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx1tspqb.php:21\n\
    Stack trace:\n#0 /tmp/tmpbx1tspqb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbx1tspqb.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_numerator\
    \ = explode(\"/\", $x)[0];\n  $x_denominator = explode(\"/\", $x)[1];\n  $n_numerator\
    \ = explode(\"/\", $n)[0];\n  $n_denominator = explode(\"/\", $n)[1];\n  $numerator\
    \ = $x_numerator * $n_numerator;\n  $denominator = $x_denominator * $n_denominator;\n\
    \  return isWholeNumber($numerator, $denominator);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isWholeNumber()\
    \ in /tmp/tmphoo6y7pa.php:17\nStack trace:\n#0 /tmp/tmphoo6y7pa.php(21): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmphoo6y7pa.php(25): candidate('1/5', '5/1')\n#2 /tmp/tmphoo6y7pa.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphoo6y7pa.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xValues\
    \ = explode(\"/\", $x);\n  $nValues = explode(\"/\", $n);\n  $x = (int)$xValues[0]\
    \ / (int)$xValues[1];\n  $n = (int)$nValues[0] / (int)$nValues[1];\n  return is_int($x\
    \ * $n);\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg61tol5.php:22\n\
    Stack trace:\n#0 /tmp/tmpdg61tol5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdg61tol5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = explode(\"/\", $x)[0];\n  $denominator = explode(\"/\", $x)[1];\n  $wholeNumber\
    \ = explode(\"/\", $n)[0];\n  $result = $numerator * $wholeNumber / $denominator;\n\
    \  if ($result - floor($result) === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\necho simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"\
    1/6\", \"2/1\") . \"\\n\";\necho simplify(\"7/10\", \"10/2\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2_ftchg.php:29\n\
    Stack trace:\n#0 /tmp/tmpx2_ftchg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx2_ftchg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $a = $x[0] / $x[1];\n   \
    \ $b = $n[0] / $n[1];\n    return (ceil($a * $b) == $a * $b) ? true : false;\n\
    }\necho simplify(\"1/5\", \"5/1\").\"\\n\"; // true\necho simplify(\"1/6\", \"\
    2/1\").\"\\n\"; // false\necho simplify(\"7/10\", \"10/2\").\"\\n\"; // false\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $arr\
    \ = explode('/', $x);\n    $nom = $arr[0];\n    $denom = $arr[1];\n    $arr2 =\
    \ explode('/', $n);\n    $nom2 = $arr2[0];\n    $denom2 = $arr2[1];\n    $result\
    \ = $nom * $nom2;\n    $result2 = $denom * $denom2;\n    if (is_int($result /\
    \ $result2)) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // your\
    \ code goes here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc11i9q2.php:18\n\
    Stack trace:\n#0 /tmp/tmpqc11i9q2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqc11i9q2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $topX =\
    \ explode(\"/\", $x)[0];\n  $botX = explode(\"/\", $x)[1];\n  $topN = explode(\"\
    /\", $n)[0];\n  $botN = explode(\"/\", $n)[1];\n  $top = $topX * $topN;\n  $bot\
    \ = $botX * $botN;\n  return ($top % $bot === 0) ? true : false;\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $arr_x\
    \ = explode('/', $x);\n  $arr_n = explode('/', $n);\n  if ($arr_x[1] * $arr_n[1]\
    \ == 0) return false;\n  if (($arr_x[0] * $arr_n[1]) % ($arr_x[1] * $arr_n[0])\
    \ == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\necho simplify(\"\
    1/6\", \"2/1\");\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lagc7ls.php:27\n\
    Stack trace:\n#0 /tmp/tmp3lagc7ls.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3lagc7ls.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numbers\
    \ = explode('/', $x);\n    $x_num = $numbers[0];\n    $x_den = $numbers[1];\n\
    \    $numbers = explode('/', $n);\n    $n_num = $numbers[0];\n    $n_den = $numbers[1];\n\
    \    $den_gcd = gcd($x_den, $n_den);\n    if($den_gcd === 1) {\n        $den_lcm\
    \ = lcm($x_den, $n_den);\n        $mult_num = $x_num * $n_num;\n        if($mult_num\
    \ % $den_lcm === 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmp_u1bhi12.php:17\n\
    Stack trace:\n#0 /tmp/tmp_u1bhi12.php(29): simplify('1/5', '5/1')\n#1 /tmp/tmp_u1bhi12.php(33):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmp_u1bhi12.php(48): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp_u1bhi12.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    // First\
    \ we need to get the values of the fractions\n    $x_array = explode(\"/\", $x);\n\
    \    $n_array = explode(\"/\", $n);\n    // Then we multiply them together\n \
    \   $result = ($x_array[0] * $n_array[0]) / ($x_array[1] * $n_array[1]);\n   \
    \ // Now we check if the result is a whole number\n    if (is_int($result)) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $a = explode('/',\
    \ $x);\n  $b = explode('/', $n);\n  $a = $a[0] * $b[1];\n  $b = $b[0] * $a[1];\n\
    \  return $a === $b;\n}\n ?>\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_denominator\
    \ = substr($x, strpos($x, \"/\") + 1);\n    $x_numerator = substr($x, 0, strpos($x,\
    \ \"/\"));\n    $n_denominator = substr($n, strpos($n, \"/\") + 1);\n    $n_numerator\
    \ = substr($n, 0, strpos($n, \"/\"));\n    $x_numerator = $x_numerator * $n_denominator;\n\
    \    $n_numerator = $n_numerator * $x_denominator;\n    if ($x_numerator % $n_numerator\
    \ == 0) {\n        return \"True\";\n    } else {\n        return \"False\";\n\
    \    }\n}\necho simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\",\
    \ \"2/1\") . \"\\n\";\necho simplify(\"7/10\", \"10/2\") . \"\\n\";\necho simplify(\"\
    6/10\", \"10/2\") . \"\\n\";\necho simplify(\"11/10\", \"10/2\") . \"\\n\";\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpbvn1gcje.php:33\nStack trace:\n#0 /tmp/tmpbvn1gcje.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbvn1gcje.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $result = 1;\n    while ($result\
    \ > 0) {\n        $result = (int)$x[0] * (int)$n[1] - (int)$x[1] * (int)$n[0];\n\
    \        $x[0] *= 10;\n        $x[1] *= 10;\n        $n[0] *= 10;\n        $n[1]\
    \ *= 10;\n    }\n    return $result === 0;\n}\necho simplify(\"7/10\", \"10/2\"\
    );\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9oubjrkr.php:29\n\
    Stack trace:\n#0 /tmp/tmp9oubjrkr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9oubjrkr.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $arr1 =\
    \ explode('/', $x);\n  $arr2 = explode('/', $n);\n  $x = $arr1[0]/$arr1[1];\n\
    \  $n = $arr2[0]/$arr2[1];\n  return number_format($x * $n, 0, '', '') == $x *\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $firstFrac\
    \ = explode(\"/\", $x);\n    $secondFrac = explode(\"/\", $n);\n    $total = $firstFrac[0]\
    \ * $secondFrac[1];\n    $secondTotal = $firstFrac[1] * $secondFrac[0];\n    if\
    \ ($total % $secondTotal === 0) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\nprint_r(simplify(\"1/5\", \"5/1\"));\nprint_r(simplify(\"\
    1/6\", \"2/1\"));\nprint_r(simplify(\"7/10\", \"10/2\"));\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp979ju2wl.php:29\n\
    Stack trace:\n#0 /tmp/tmp979ju2wl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp979ju2wl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xArr =\
    \ explode('/', $x);\n  $nArr = explode('/', $n);\n  if ($xArr[0] == $nArr[0] &&\
    \ $xArr[1] == $nArr[1]) return true;\n  $temp = $xArr[0] * $nArr[1] * $nArr[0]\
    \ * $xArr[1];\n  if ($temp % ($xArr[1] * $nArr[1]) == 0) return true;\n  return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqgfd8br.php:25\n\
    Stack trace:\n#0 /tmp/tmptqgfd8br.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptqgfd8br.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\treturn\
    \ simplify_aux($x) * simplify_aux($n) % 1 == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function simplify_aux()\
    \ in /tmp/tmp6dq6ahhy.php:11\nStack trace:\n#0 /tmp/tmp6dq6ahhy.php(14): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmp6dq6ahhy.php(18): candidate('1/5', '5/1')\n#2 /tmp/tmp6dq6ahhy.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6dq6ahhy.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $n1 = explode(\"\
    /\", $x);\n  $n2 = explode(\"/\", $n);\n  $s = $n1[0] * $n2[1];\n  $t = $n1[1]\
    \ * $n2[0];\n  if($s == $t) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ufre1lp.php:26\n\
    Stack trace:\n#0 /tmp/tmp9ufre1lp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9ufre1lp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $denominator = $x[1] * $n[1];\n\
    \    $numerator = $x[0] * $n[1] + $n[0] * $x[1];\n    if ($numerator % $denominator\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd17mqq5z.php:26\n\
    Stack trace:\n#0 /tmp/tmpd17mqq5z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpd17mqq5z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = str_replace(\"\
    /\", \"\", $x);\n  $n = str_replace(\"/\", \"\", $n);\n  if($x % $n == 0) {\n\
    \    return true;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n \
    \   return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuo874p8j.php:23\n\
    Stack trace:\n#0 /tmp/tmpuo874p8j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuo874p8j.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_arr\
    \ = explode('/', $x);\n    $n_arr = explode('/', $n);\n    $x_num = $x_arr[0];\n\
    \    $x_den = $x_arr[1];\n    $n_num = $n_arr[0];\n    $n_den = $n_arr[1];\n \
    \   $den = $x_den * $n_den;\n    $num = $x_num * $n_num;\n    return ($num % $den\
    \ === 0) ? \"True\" : \"False\";\n}\necho simplify(\"1/6\", \"2/1\") . \"\\n\"\
    ;\necho simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"7/10\", \"10/2\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nTrue\nFalse\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp9y_jfeeo.php:29\nStack trace:\n#0 /tmp/tmp9y_jfeeo.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9y_jfeeo.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // TODO:\
    \ implement this function\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q4a2wus.php:19\n\
    Stack trace:\n#0 /tmp/tmp7q4a2wus.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7q4a2wus.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x_parts\
    \ = explode('/', $x);\n    $n_parts = explode('/', $n);\n    $common_denominator\
    \ = lcm($x_parts[1], $n_parts[1]);\n    $common_numerator = $x_parts[0] * ($common_denominator\
    \ / $x_parts[1]) + $n_parts[0] * ($common_denominator / $n_parts[1]);\n    $common_numerator\
    \ = abs($common_numerator);\n    return $common_numerator % $common_denominator\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function lcm() in /tmp/tmpjsuv9185.php:13\n\
    Stack trace:\n#0 /tmp/tmpjsuv9185.php(20): simplify('1/5', '5/1')\n#1 /tmp/tmpjsuv9185.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpjsuv9185.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpjsuv9185.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numeratorX\
    \ = explode(\"/\", $x)[0];\n  $denominatorX = explode(\"/\", $x)[1];\n  $numeratorN\
    \ = explode(\"/\", $n)[0];\n  $denominatorN = explode(\"/\", $n)[1];\n  if ($numeratorX\
    \ / $denominatorX * $numeratorN / $denominatorN == 1) {\n    return True;\n  }\
    \ else {\n    return False;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpup5_qwr1.php:28\n\
    Stack trace:\n#0 /tmp/tmpup5_qwr1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpup5_qwr1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $val = (int)$x[0] * (int)$n[1]\
    \ * (int)$n[0] * (int)$x[1];\n    if($val % ((int)$x[1] * (int)$n[1]) == 0) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmwxpzme.php:26\n\
    Stack trace:\n#0 /tmp/tmphmwxpzme.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphmwxpzme.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xArr =\
    \ explode('/', $x);\n  $nArr = explode('/', $n);\n  return ($xArr[0]*$nArr[1])%($xArr[1]*$nArr[0])===0;\n\
    }\necho \"simplify(\\\"1/5\\\", \\\"5/1\\\") = \" . simplify(\"1/5\", \"5/1\"\
    ) . \"\\n\";\necho \"simplify(\\\"1/6\\\", \\\"2/1\\\") = \" . simplify(\"1/6\"\
    , \"2/1\") . \"\\n\";\necho \"simplify(\\\"7/10\\\", \\\"10/2\\\") = \" . simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\necho \"simplify(\\\"3/3\\\", \\\"3/3\\\") = \" .\
    \ simplify(\"3/3\", \"3/3\") . \"\\n\";\necho \"simplify(\\\"11/15\\\", \\\"15/11\\\
    \") = \" . simplify(\"11/15\", \"15/11\") . \"\\n\";\necho \"simplify(\\\"1/8\\\
    \", \\\"16/1\\\") = \" . simplify(\"1/8\", \"16/1\") . \"\\n\";\necho \"simplify(\\\
    \"1/16\\\", \\\"1/16\\\") = \" . simplify(\"1/16\", \"1/16\") . \"\\n\";\necho\
    \ \"simplify(\\\"1/16\\\", \\\"4/4\\\") = \" . simplify(\"1/16\", \"4/4\") . \"\
    \\n\";\necho \"simplify(\\\"5/6\\\", \\\"1/1\\\") = \" . simplify(\"5/6\", \"\
    1/1\") . \"\\n\";\necho \"simplify(\\\"1/3\\\", \\\"1/4\\\") = \" . simplify(\"\
    1/3\", \"1/4\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "simplify(\"1/5\", \"5/1\") = \nsimplify(\"1/6\", \"2/1\") = \nsimplify(\"\
    7/10\", \"10/2\") = \nsimplify(\"3/3\", \"3/3\") = 1\nsimplify(\"11/15\", \"15/11\"\
    ) = \nsimplify(\"1/8\", \"16/1\") = \nsimplify(\"1/16\", \"1/16\") = 1\nsimplify(\"\
    1/16\", \"4/4\") = \nsimplify(\"5/6\", \"1/1\") = \nsimplify(\"1/3\", \"1/4\"\
    ) = \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jjvusg7.php:30\n\
    Stack trace:\n#0 /tmp/tmp4jjvusg7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4jjvusg7.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $arr1\
    \ = explode('/', $x);\n    $arr2 = explode('/', $n);\n    $res = $arr1[0] * $arr2[1]\
    \ / $arr1[1] / $arr2[0];\n    return (int)$res == $res;\n}\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2ilmmqh.php:24\n\
    Stack trace:\n#0 /tmp/tmpr2ilmmqh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr2ilmmqh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xSplit\
    \ = explode('/', $x);\n  $nSplit = explode('/', $n);\n  $xNumerator = $xSplit[0];\n\
    \  $xDenominator = $xSplit[1];\n  $nNumerator = $nSplit[0];\n  $nDenominator =\
    \ $nSplit[1];\n  $totalNumerator = $xNumerator * $nNumerator;\n  $totalDenominator\
    \ = $xDenominator * $nDenominator;\n  $reducedNumerator = $totalNumerator / gcd($totalNumerator,\
    \ $totalDenominator);\n  $reducedDenominator = $totalDenominator / gcd($totalNumerator,\
    \ $totalDenominator);\n  return ($reducedNumerator === $reducedDenominator);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpt7toq2jj.php:19\n\
    Stack trace:\n#0 /tmp/tmpt7toq2jj.php(25): simplify('1/5', '5/1')\n#1 /tmp/tmpt7toq2jj.php(29):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpt7toq2jj.php(44): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpt7toq2jj.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    return ($x[0] / $x[1]) *\
    \ ($n[0] / $n[1]) % 1 === 0;\n}\necho simplify(\"1/5\", \"5/1\") ? 'True' : 'False';\n\
    echo '<br>';\necho simplify(\"1/6\", \"2/1\") ? 'True' : 'False';\necho '<br>';\n\
    echo simplify(\"7/10\", \"10/2\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"\
    1/2\", \"2/2\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"1/4\", \"6/4\"\
    ) ? 'True' : 'False';\necho '<br>';\necho simplify(\"1/4\", \"6/3\") ? 'True'\
    \ : 'False';\necho '<br>';\necho simplify(\"1/4\", \"6/2\") ? 'True' : 'False';\n\
    echo '<br>';\necho simplify(\"1/5\", \"6/2\") ? 'True' : 'False';\necho '<br>';\n\
    echo simplify(\"1/5\", \"5/5\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"\
    1/5\", \"5/1\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"1/6\", \"2/1\"\
    ) ? 'True' : 'False';\necho '<br>';\necho simplify(\"1/6\", \"2/2\") ? 'True'\
    \ : 'False';\necho '<br>';\necho simplify(\"1/7\", \"2/1\") ? 'True' : 'False';\n\
    echo '<br>';\necho simplify(\"1/7\", \"2/7\") ? 'True' : 'False';\necho '<br>';\n\
    echo simplify(\"1/7\", \"2/3\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"\
    1/8\", \"6/4\") ? 'True' : 'False';\necho '<br>';\necho simplify(\"1/8\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp387k20er.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $a=explode(\"\
    /\",$x);\n  $b=explode(\"/\",$n);\n  $result= $a[0]*$b[1]/$a[1]*$b[0];\n  echo\
    \ $result.\"\\n\";\n  if ($result%1==0)\n  {\n    return true;\n  }\n  else {\n\
    \    return false;\n  }\n}\n\nsimplify(\"1/5\", \"5/1\");\nsimplify(\"1/6\", \"\
    2/1\");\nsimplify(\"7/10\", \"10/2\");\n ?>\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n0.33333333333333\n14\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numeratorX\
    \ = intval(explode(\"/\", $x)[0]);\n    $denominatorX = intval(explode(\"/\",\
    \ $x)[1]);\n    $numeratorN = intval(explode(\"/\", $n)[0]);\n    $denominatorN\
    \ = intval(explode(\"/\", $n)[1]);\n    $number1 = gcd($numeratorX, $denominatorX);\n\
    \    $number2 = gcd($numeratorN, $denominatorN);\n    return $number1 * $number2;\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpeacx8yuc.php:15\n\
    Stack trace:\n#0 /tmp/tmpeacx8yuc.php(20): simplify('1/5', '5/1')\n#1 /tmp/tmpeacx8yuc.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpeacx8yuc.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpeacx8yuc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  return (($x[0] * $n[1]) % ($x[1] * $n[0])\
    \ == 0) ? 'True' : 'False';\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhscdw84.php:20\n\
    Stack trace:\n#0 /tmp/tmpvhscdw84.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvhscdw84.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\tlist($numX,\
    \ $denX) = explode('/', $x);\n\tlist($numN, $denN) = explode('/', $n);\n\t$numX\
    \ = (int)$numX;\n\t$denX = (int)$denX;\n\t$numN = (int)$numN;\n\t$denN = (int)$denN;\n\
    \t$res = $numX * $numN / ($denX * $denN);\n\tif ($res == round($res)) return true;\n\
    \treturn false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $temp =\
    \ explode(\"/\", $x);\n  $x_num = $temp[0];\n  $x_den = $temp[1];\n  $temp = explode(\"\
    /\", $n);\n  $n_num = $temp[0];\n  $n_den = $temp[1];\n  if($x_num == 0 || $n_num\
    \ == 0) {\n    return false;\n  }\n  $result = $x_num * $n_num;\n  if(($result\
    \ % $x_den) == 0 && ($result % $n_den) == 0) {\n    return true;\n  }\n  return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkue56q8a.php:35\n\
    Stack trace:\n#0 /tmp/tmpkue56q8a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkue56q8a.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if($x ==\
    \ $n) return True;\n  $x = explode(\"/\", $x);\n  $n = explode(\"/\", $n);\n \
    \ if($x[0] == $n[0] || $x[1] == $n[1]) return True;\n  if($x[0] == $n[1] || $x[1]\
    \ == $n[0]) return True;\n  $product = $x[0] / $x[1] * $n[0] / $n[1];\n  if(ctype_digit($product))\
    \ return True;\n  return False;\n}\necho simplify(\"7/10\", \"10/2\");\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxv3671k.php:27\n\
    Stack trace:\n#0 /tmp/tmpcxv3671k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcxv3671k.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $chars\
    \ = [\"/\"];\n    $nums = explode($chars[0], $x);\n    $nums2 = explode($chars[0],\
    \ $n);\n    $n1 = (int)$nums[0];\n    $n2 = (int)$nums[1];\n    $n3 = (int)$nums2[0];\n\
    \    $n4 = (int)$nums2[1];\n    $result = $n1 / $n2 * $n3 / $n4;\n    if (is_int($result))\
    \ {\n        return True;\n    } else {\n        return False;\n    }\n}\nprint(simplify(\"\
    1/5\", \"5/1\"));\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cov_7tr.php:31\n\
    Stack trace:\n#0 /tmp/tmp5cov_7tr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5cov_7tr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    list($numeratorX,\
    \ $denominatorX) = explode('/', $x);\n    list($numeratorN, $denominatorN) = explode('/',\
    \ $n);\n    $numeratorTotal = $numeratorX * $numeratorN;\n    $denominatorTotal\
    \ = $denominatorX * $denominatorN;\n    return $numeratorTotal / $denominatorTotal;\n\
    }\necho simplify(\"1/5\", \"5/1\");\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7y2uga_.php:23\n\
    Stack trace:\n#0 /tmp/tmpk7y2uga_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk7y2uga_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // Your\
    \ code goes here!\n}\n\necho simplify(\"7/10\", \"10/2\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91rr0q3w.php:20\n\
    Stack trace:\n#0 /tmp/tmp91rr0q3w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp91rr0q3w.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\t$x = explode('/',\
    \ $x);\n\t$n = explode('/', $n);\n\t//if($x[0] * $n[1] === $x[1] * $n[0]) return\
    \ true;\n\tif($x[0] * $n[1] % $x[1] * $n[0] === 0) return true;\n\treturn false;\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xmhfqcz.php:22\n\
    Stack trace:\n#0 /tmp/tmp7xmhfqcz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7xmhfqcz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $denominator = $x[1] * $n[1];\n  $numerator\
    \ = $x[0] * $n[1] + $n[0] * $x[1];\n  return ($numerator % $denominator == 0);\n\
    }\n\n$answers = Array(\n  Array(\"1/5\", \"5/1\"),\n  Array(\"1/6\", \"2/1\"),\n\
    \  Array(\"7/10\", \"10/2\")\n);\n\nforeach ($answers as $value) {\n  echo $value[0]\
    \ . \" * \" . $value[1] . \" => \" . (simplify($value[0], $value[1]) ? \"True\"\
    \ : \"False\") . \"\\n\";\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1/5 * 5/1 => False\n1/6 * 2/1 => False\n7/10 * 10/2 => False\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6wbhnzzw.php:33\nStack trace:\n\
    #0 /tmp/tmp6wbhnzzw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6wbhnzzw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0] / $x[1];\n   \
    \ $n = $n[0] / $n[1];\n    return floor($x * $n) == $x * $n;\n}\necho simplify(\"\
    1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\necho simplify(\"1/6\", \"11/5\") . \"\\n\";\necho\
    \ simplify(\"4/4\", \"4/4\") . \"\\n\";\necho simplify(\"2/4\", \"4/4\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // your\
    \ code here\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwlsoeaj.php:18\n\
    Stack trace:\n#0 /tmp/tmpnwlsoeaj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnwlsoeaj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_arr\
    \ = explode('/', $x);\n  $n_arr = explode('/', $n);\n  $x_num = $x_arr[0];\n \
    \ $x_den = $x_arr[1];\n  $n_num = $n_arr[0];\n  $n_den = $n_arr[1];\n  $res_num\
    \ = $x_num * $n_num;\n  $res_den = $x_den * $n_den;\n  $res = $res_num / $res_den;\n\
    \  if ($res % 1 == 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\"\
    ) . PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1q4mfej.php:36\n\
    Stack trace:\n#0 /tmp/tmpe1q4mfej.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpe1q4mfej.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    return\
    \ (is_int(floatval($x) * floatval($n)));\n}\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq4ri7e_.php:18\n\
    Stack trace:\n#0 /tmp/tmpnq4ri7e_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnq4ri7e_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $first\
    \ = str_split($x);\n  $second = str_split($n);\n  $xNum = $first[0];\n  $xDen\
    \ = $first[2];\n  $nNum = $second[0];\n  $nDen = $second[2];\n  $mult = $xNum\
    \ * $nNum / $xDen * $nDen;\n  if (floor($mult) === $mult) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3b30tzf.php:29\n\
    Stack trace:\n#0 /tmp/tmpa3b30tzf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa3b30tzf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_array\
    \ = explode(\"/\", $x);\n  $n_array = explode(\"/\", $n);\n  $x_num = $x_array[0];\n\
    \  $x_den = $x_array[1];\n  $n_num = $n_array[0];\n  $n_den = $n_array[1];\n \
    \ if(($x_num * $n_den) % ($x_den * $n_num) == 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8h438jx.php:29\n\
    Stack trace:\n#0 /tmp/tmpf8h438jx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf8h438jx.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $simplify_x\
    \ = simplify_input($x);\n  $simplify_n = simplify_input($n);\n  if ($simplify_x['denominator']\
    \ * $simplify_n['numerator'] % $simplify_x['numerator'] == 0) {\n    return true;\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function simplify_input()\
    \ in /tmp/tmpbi0m2g8f.php:11\nStack trace:\n#0 /tmp/tmpbi0m2g8f.php(20): simplify('1/5',\
    \ '5/1')\n#1 /tmp/tmpbi0m2g8f.php(24): candidate('1/5', '5/1')\n#2 /tmp/tmpbi0m2g8f.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbi0m2g8f.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numbers\
    \ = [\n        explode('/', $x),\n        explode('/', $n)\n    ];\n    for ($i\
    \ = 0; $i < 2; $i++) {\n        for ($j = 2; $j <= $numbers[$i][0]; $j++) {\n\
    \            if ($numbers[$i][0] % $j == 0 && $numbers[$i][1] % $j == 0) {\n \
    \               $numbers[$i][0] /= $j;\n                $numbers[$i][1] /= $j;\n\
    \                $j = 1;\n            }\n        }\n    }\n    if ($numbers[0][0]\
    \ * $numbers[1][1] % $numbers[0][1] * $numbers[1][0] == 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nvar_dump(simplify(\"1/5\", \"5/1\"));\nvar_dump(simplify(\"\
    1/6\", \"2/1\"));\nvar_dump(simplify(\"7/10\", \"10/2\"));\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6lt5jy99.php:38\nStack trace:\n#0 /tmp/tmp6lt5jy99.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6lt5jy99.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $a = $x[0] * $n[1];\n   \
    \ $b = $x[1] * $n[0];\n    if($a % $b == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4frkadn.php:27\n\
    Stack trace:\n#0 /tmp/tmpp4frkadn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp4frkadn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xArr =\
    \ explode('/', $x);\n  $nArr = explode('/', $n);\n  if ( $xArr[0] == $nArr[0]\
    \ ) {\n    return True;\n  }\n  if ( $xArr[1] == $nArr[1] ) {\n    return True;\n\
    \  }\n  if ( $xArr[0] == $nArr[1] ) {\n    return True;\n  }\n  if ( $xArr[1]\
    \ == $nArr[0] ) {\n    return True;\n  }\n  return False;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cfr2lt3.php:34\n\
    Stack trace:\n#0 /tmp/tmp8cfr2lt3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8cfr2lt3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\t$x = explode('/',\
    \ $x);\n\t$n = explode('/', $n);\n\treturn $x[0] * $n[1] % $x[1] === 0 ? true\
    \ : false;\n}\necho simplify(\"1/6\", \"2/1\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_9eq8yp.php:21\n\
    Stack trace:\n#0 /tmp/tmpt_9eq8yp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpt_9eq8yp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if (strpos($x,\
    \ \"/\") === false || strpos($n, \"/\") === false) {\n    return true;\n  }\n\
    \  if (strpos($x, \"/\") === 0 || strpos($n, \"/\") === 0) {\n    return false;\n\
    \  }\n  $xN = explode(\"/\", $x);\n  $nN = explode(\"/\", $n);\n  $xNumerator\
    \ = $xN[0];\n  $xDenominator = $xN[1];\n  $nNumerator = $nN[0];\n  $nDenominator\
    \ = $nN[1];\n  $xNumeratorAsN = intval($xNumerator);\n  $xDenominatorAsN = intval($xDenominator);\n\
    \  $nNumeratorAsN = intval($nNumerator);\n  $nDenominatorAsN = intval($nDenominator);\n\
    \  $xMultiplied = $xNumeratorAsN * $nDenominatorAsN;\n  $nMultiplied = $nNumeratorAsN\
    \ * $xDenominatorAsN;\n  $Multiplied = $xMultiplied * $nMultiplied;\n  if ($Multiplied\
    \ % $xDenominatorAsN === 0) {\n    return true;\n  }\n  return false;\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyspmbg9.php:41\n\
    Stack trace:\n#0 /tmp/tmppyspmbg9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppyspmbg9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  // your\
    \ code here\n  return False;\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zly1uta.php:19\n\
    Stack trace:\n#0 /tmp/tmp9zly1uta.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9zly1uta.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xArray\
    \ = explode('/', $x);\n    $nArray = explode('/', $n);\n    $xFraction = $xArray[0]\
    \ / $xArray[1];\n    $nFraction = $nArray[0] / $nArray[1];\n    $result = $xFraction\
    \ * $nFraction;\n    return is_int($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyntto2t6.php:24\n\
    Stack trace:\n#0 /tmp/tmpyntto2t6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyntto2t6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_num\
    \ = (int)explode('/', $x)[0];\n  $x_den = (int)explode('/', $x)[1];\n  $n_num\
    \ = (int)explode('/', $n)[0];\n  $n_den = (int)explode('/', $n)[1];\n  $res_den\
    \ = $x_den * $n_den;\n  $res_num = $x_num * $n_num;\n  $simplified = fmod($res_num,\
    \ $res_den);\n  if ($simplified == 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n  $n = $n[0] / $n[1];\n\
    \  $res = $x * $n;\n  return ($res % 1 === 0) ? true : false;\n}\nprint_r(simplify(\"\
    1/6\", \"2/1\"));\n ?>\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1function candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($x_numerator,\
    \ $x_denominator) = explode('/', $x);\n  list($n_numerator, $n_denominator) =\
    \ explode('/', $n);\n  $numerator = $x_numerator * $n_numerator;\n  $denominator\
    \ = $x_denominator * $n_denominator;\n  return (0 === $numerator % $denominator);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_split\
    \ = explode('/', $x);\n  $n_split = explode('/', $n);\n  $denom = $x_split[1]\
    \ * $n_split[1];\n  $numer = $x_split[0] * $n_split[0];\n  return ($numer % $denom\
    \ === 0);\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $arrX\
    \ = explode('/', $x);\n    $arrN = explode('/', $n);\n    $lcm = lcm($arrX[1],\
    \ $arrN[1]);\n    $xSimplified = $lcm / $arrX[1] * $arrX[0];\n    $nSimplified\
    \ = $lcm / $arrN[1] * $arrN[0];\n    return $xSimplified === $nSimplified ? true\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function lcm() in /tmp/tmpj573lxsy.php:13\n\
    Stack trace:\n#0 /tmp/tmpj573lxsy.php(20): simplify('1/5', '5/1')\n#1 /tmp/tmpj573lxsy.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpj573lxsy.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpj573lxsy.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xSplit\
    \ = explode('/', $x);\n    $nSplit = explode('/', $n);\n    $result = bcdiv(bcmul($xSplit[0],\
    \ $nSplit[1]), bcmul($xSplit[1], $nSplit[0]));\n    if ($result - floor($result)\
    \ == 0) {\n        return 'True';\n    } else {\n        return 'False';\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcdiv() in /tmp/tmpupwv4v0x.php:13\n\
    Stack trace:\n#0 /tmp/tmpupwv4v0x.php(21): simplify('1/5', '5/1')\n#1 /tmp/tmpupwv4v0x.php(25):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpupwv4v0x.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpupwv4v0x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $numerator\
    \ = explode(\"/\", $x)[0];\n    $denominator = explode(\"/\", $x)[1];\n    return\
    \ ((int)$numerator * (int)$n === (int)$denominator * (int)$n) ? True : False;\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw9kfcls.php:21\n\
    Stack trace:\n#0 /tmp/tmphw9kfcls.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphw9kfcls.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  //explode\
    \ the strings and turns them into arrays\n  $x_array = explode(\"/\", $x);\n \
    \ $n_array = explode(\"/\", $n);\n  //multiply the numerators and denominators\n\
    \  $product = ($x_array[0] * $n_array[0]) / ($x_array[1] * $n_array[1]);\n  //if\
    \ the product is a whole number, return true, else false\n  if(is_int($product)){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    return (bool)round($x[0]\
    \ / $x[1] * $n[0] / $n[1]);\n}\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\n\
    echo simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\")\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuakosoat.php:27\n\
    Stack trace:\n#0 /tmp/tmpuakosoat.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuakosoat.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $result = $x[0] / $x[1] * $n[0] / $n[1];\n\
    \  return floor($result) == $result;\n}\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $xNum =\
    \ explode(\"/\", $x);\n  $nNum = explode(\"/\", $n);\n  $finalNum = $xNum[0] *\
    \ $nNum[1];\n  $finalDenom = $xNum[1] * $nNum[0];\n  $gcd = gcd($finalNum, $finalDenom);\n\
    \  if($gcd == 1) return true;\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpt396q4jy.php:15\n\
    Stack trace:\n#0 /tmp/tmpt396q4jy.php(20): simplify('1/5', '5/1')\n#1 /tmp/tmpt396q4jy.php(24):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpt396q4jy.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpt396q4jy.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $gcd = gcd($x[1], $n[1]);\n\
    \    return ($x[1] * $n[1]) / $gcd == $x[0] * $n[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpcheulrxw.php:13\n\
    Stack trace:\n#0 /tmp/tmpcheulrxw.php(18): simplify(Array, Array)\n#1 /tmp/tmpcheulrxw.php(22):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpcheulrxw.php(37): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpcheulrxw.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $gcd =\
    \ gcd(explode('/', $x)[0], explode('/', $x)[1]);\n  $xn = (explode('/', $x)[0]\
    \ / $gcd) * (explode('/', $n)[0] / explode('/', $n)[1]);\n  return is_int($xn);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpz4yx2od3.php:11\n\
    Stack trace:\n#0 /tmp/tmpz4yx2od3.php(17): simplify('1/5', '5/1')\n#1 /tmp/tmpz4yx2od3.php(21):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpz4yx2od3.php(36): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpz4yx2od3.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($x_num,\
    \ $x_den) = explode('/', $x);\n  list($n_num, $n_den) = explode('/', $n);\n  return\
    \ $x_num * $n_den % $x_den === 0 && $x_num * $n_den / $x_den % $n_den === 0;\n\
    }\n\necho simplify(\"1/5\", \"5/1\");\necho \"\\n\";\necho simplify(\"1/6\", \"\
    2/1\");\necho \"\\n\";\necho simplify(\"7/10\", \"10/2\");\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj2gjbwt.php:28\n\
    Stack trace:\n#0 /tmp/tmpqj2gjbwt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqj2gjbwt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numerator\
    \ = (int)$x;\n  $denominator = (int)$n;\n  $commonDenominator = $denominator *\
    \ $numerator;\n  $simplifiedNumerator = $numerator * $denominator;\n  if ($commonDenominator\
    \ % $simplifiedNumerator == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\necho simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"\
    2/1\") . \"\\n\";\necho simplify(\"7/10\", \"10/2\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq3i1y_7.php:31\n\
    Stack trace:\n#0 /tmp/tmpxq3i1y_7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxq3i1y_7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $numX =\
    \ explode(\"/\", $x);\n  $numN = explode(\"/\", $n);\n  $numX = $numX[0] * $numN[1];\n\
    \  $numN = $numN[0] * $numX[1];\n  return ($numX === $numN);\n}\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4e9rw9d.php:22\n\
    Stack trace:\n#0 /tmp/tmph4e9rw9d.php(37): test()\n#1 {main}\n  thrown in /tmp/tmph4e9rw9d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n\t$result\
    \ = 1;\n\tfor ($i = 0; $i < strlen($x); $i++) {\n\t\tif ($x[$i] == '/') {\n\t\t\
    \t$part1 = substr($x, 0, $i);\n\t\t\t$part2 = substr($x, $i + 1);\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor ($i = 0; $i < strlen($n); $i++) {\n\t\tif ($n[$i] == '/') {\n\
    \t\t\t$part3 = substr($n, 0, $i);\n\t\t\t$part4 = substr($n, $i + 1);\n\t\t\t\
    break;\n\t\t}\n\t}\n\t$result = $part1 * $part3;\n\t$result = $result / ($part2\
    \ * $part4);\n\tif ($result % 1 == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho simplify(\"1/6\", \"2/1\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk4b42zo.php:41\n\
    Stack trace:\n#0 /tmp/tmpjk4b42zo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjk4b42zo.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  list($x_numerator,\
    \ $x_denominator) = split('/', $x);\n  list($n_numerator, $n_denominator) = split('/',\
    \ $n);\n  $result = ($x_numerator * $n_numerator) / ($x_denominator * $n_denominator);\n\
    \  return ($result % 1 == 0) ? True : False;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmpnrtcfdyb.php:11\n\
    Stack trace:\n#0 /tmp/tmpnrtcfdyb.php(18): simplify('1/5', '5/1')\n#1 /tmp/tmpnrtcfdyb.php(22):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpnrtcfdyb.php(37): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpnrtcfdyb.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_frac\
    \ = explode(\"/\", $x);\n  $n_frac = explode(\"/\", $n);\n  $num = $x_frac[0]\
    \ * $n_frac[1];\n  $den = $x_frac[1] * $n_frac[0];\n  return ($num % $den ===\
    \ 0);\n}\n\n$numerators = array(1, 1, 2, 5, 7, 10, 2, 5, 7, 10);\n$denominators\
    \ = array(5, 6, 1, 1, 2, 2, 2, 2, 2, 2);\nfor ($i = 0; $i < 10; $i++) {\n  print(\"\
    simplify(\\\"{$numerators[$i]}/{$denominators[$i]}\\\", \\\"{$numerators[$i+1]}/{$denominators[$i+1]}\\\
    \") = \");\n  print(simplify(\"{$numerators[$i]}/{$denominators[$i]}\", \"{$numerators[$i+1]}/{$denominators[$i+1]}\"\
    ));\n  print(\"\\n\");\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "simplify(\"1/5\", \"1/6\") = \nsimplify(\"1/6\", \"2/1\") = \nsimplify(\"\
    2/1\", \"5/1\") = \nsimplify(\"5/1\", \"7/2\") = \nsimplify(\"7/2\", \"10/2\"\
    ) = \nsimplify(\"10/2\", \"2/2\") = 1\nsimplify(\"2/2\", \"5/2\") = \nsimplify(\"\
    5/2\", \"7/2\") = \nsimplify(\"7/2\", \"10/2\") = \nsimplify(\"10/2\", \"/\")\
    \ = \nWarning: A non-numeric value encountered in /tmp/tmpfsocndaj.php on line\
    \ 13\n\nWarning: A non-numeric value encountered in /tmp/tmpfsocndaj.php on line\
    \ 14\n\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpfsocndaj.php:15\n\
    Stack trace:\n#0 /tmp/tmpfsocndaj.php(22): simplify('10/2', '/')\n#1 {main}\n\
    \  thrown in /tmp/tmpfsocndaj.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]/$x[1];\n    $n\
    \ = $n[0]/$n[1];\n    $res = $x * $n;\n    return is_int($res);\n}\n\nprint_r(simplify(\"\
    1/5\", \"5/1\"));\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0apddasd.php:25\n\
    Stack trace:\n#0 /tmp/tmp0apddasd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0apddasd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    return ((int)$x[0] * (int)$n[1])\
    \ % ((int)$x[1] * (int)$n[0]) === 0;\n}\necho simplify(\"6/8\", \"1/2\") ? 'True'\
    \ : 'False';\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "False\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tkk6mye.php:21\n\
    Stack trace:\n#0 /tmp/tmp5tkk6mye.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5tkk6mye.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $sx = explode('/',\
    \ $x);\n  $sn = explode('/', $n);\n  if($sx[1] % $sn[1] == 0 && $sn[0] % $sx[0]\
    \ == 0) {\n    return true;\n  }\n  return false;\n}\nprint_r(simplify(\"1/6\"\
    , \"2/1\"));\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhl0g5k4.php:25\n\
    Stack trace:\n#0 /tmp/tmpnhl0g5k4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnhl0g5k4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $denom = $x[1] * $n[1];\n\
    \    $num = $x[0] * $n[1] + $n[0] * $x[1];\n    return !($num % $denom);\n}\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfqol0cr.php:22\n\
    Stack trace:\n#0 /tmp/tmpqfqol0cr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqfqol0cr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  if($x[2]\
    \ % $n[0] == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nprint_r(simplify(\"\
    1/5\", \"5/1\") . \"\\n\");\nprint_r(simplify(\"1/6\", \"2/1\") . \"\\n\");\n\
    print_r(simplify(\"7/10\", \"10/2\") . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kq_6iwb.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kq_6iwb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4kq_6iwb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $x =\
    \ explode('/', $x);\n    $n = explode('/', $n);\n    $result = gmp_div(gmp_mul($x[0],\
    \ $n[1]), gmp_mul($x[1], $n[0]));\n    return gmp_strval($result) === gmp_strval(gmp_div($result,\
    \ 1));\n}\n\necho var_dump(simplify(\"1/5\", \"5/1\")); //True\necho var_dump(simplify(\"\
    1/6\", \"2/1\")); //False\necho var_dump(simplify(\"7/10\", \"10/2\")); //False\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gmp_div() in\
    \ /tmp/tmppw582w_j.php:13\nStack trace:\n#0 /tmp/tmppw582w_j.php(17): simplify(Array,\
    \ Array)\n#1 {main}\n  thrown in /tmp/tmppw582w_j.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $nArray\
    \ = explode('/', $n);\n  if($nArray[0] != 1) {\n    $xArray = explode('/', $x);\n\
    \    $xArray[0] = $xArray[0] * $nArray[0];\n    $xArray[1] = $xArray[1] * $nArray[1];\n\
    \    if($xArray[0] % $xArray[1] == 0) {\n      return True;\n    } else {\n  \
    \    return False;\n    }\n  } else {\n    if($nArray[1] != 1) {\n      $xArray\
    \ = explode('/', $x);\n      $xArray[0] = $xArray[0] * $nArray[1];\n      $xArray[1]\
    \ = $xArray[1] * $nArray[0];\n      if($xArray[0] % $xArray[1] == 0) {\n     \
    \   return True;\n      } else {\n        return False;\n      }\n    } else {\n\
    \      return True;\n    }\n  }\n}\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\n\
    echo simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\", \"10/2\")\
    \ . PHP_EOL;\necho simplify(\"1/10\", \"2/1\") . PHP_EOL;\necho simplify(\"1/2\"\
    , \"2/2\") . PHP_EOL;\necho simplify(\"1/3\", \"3/1\") . PHP_EOL;\necho simplify(\"\
    1/4\", \"4/1\") . PHP_EOL;\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"\
    1/6\", \"6/1\") . PHP_EOL;\necho simplify(\"1/7\", \"7/1\") . PHP_EOL;\necho simplify(\"\
    1/8\", \"8/1\") . PHP_EOL;\necho simplify(\"1/9\", \"9/1\") . PHP_EOL;\necho simplify(\"\
    1/10\", \"10/1\") . PHP_EOL;\necho simplify(\"5/6\", \"6/1\")\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1xxi142t.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x = explode('/',\
    \ $x);\n  $n = explode('/', $n);\n  $x = $x[0]/$x[1];\n  $n = $n[0]/$n[1];\n \
    \ return is_int($x * $n);\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua1_2uu6.php:22\n\
    Stack trace:\n#0 /tmp/tmpua1_2uu6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpua1_2uu6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n    $xParts\
    \ = explode('/', $x);\n    $nParts = explode('/', $n);\n    $xNumerator = $xParts[0];\n\
    \    $xDenominator = $xParts[1];\n    $nNumerator = $nParts[0];\n    $nDenominator\
    \ = $nParts[1];\n    $fraction1 = $xNumerator * $nDenominator;\n    $fraction2\
    \ = $nNumerator * $xDenominator;\n    $result = $fraction1 / $fraction2;\n   \
    \ if (is_int($result)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nsimplify(\"1/5\", \"5/1\");\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_s8ypwq.php:32\n\
    Stack trace:\n#0 /tmp/tmp7_s8ypwq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7_s8ypwq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns True if x * n evaluates to a whole\
    \ number and False\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n//\
    \ simplify(\"7/10\", \"10/2\") = False\nfunction simplify($x, $n) {\n  $x_fraction\
    \ = explode('/', $x);\n  $n_fraction = explode('/', $n);\n  $denominator = $x_fraction[1]\
    \ * $n_fraction[1];\n  $numerator = $x_fraction[0] * $n_fraction[1] + $n_fraction[0]\
    \ * $x_fraction[1];\n  $gcd = gcd($numerator, $denominator);\n  if ($gcd !== 1)\
    \ {\n    $numerator /= $gcd;\n    $denominator /= $gcd;\n  }\n  return $numerator\
    \ / $denominator === floor($numerator / $denominator);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpd691kde0.php:15\n\
    Stack trace:\n#0 /tmp/tmpd691kde0.php(24): simplify('1/5', '5/1')\n#1 /tmp/tmpd691kde0.php(28):\
    \ candidate('1/5', '5/1')\n#2 /tmp/tmpd691kde0.php(43): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpd691kde0.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
