name: HumanEval_96_count_up_to
language: php
results:
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = array();\n    if ($n < 2) {\n        return $primes;\n    }\n\
    \    $primes[] = 2;\n    if ($n == 2) {\n        return $primes;\n    }\n    for\
    \ ($i = 3; $i < $n; $i += 2) {\n        if (is_prime($i)) {\n            $primes[]\
    \ = $i;\n        }\n    }\n    return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpniq4c9uq.php:21\nStack trace:\n#0 /tmp/tmpniq4c9uq.php(29): count_up_to(5)\n\
    #1 /tmp/tmpniq4c9uq.php(33): candidate(5)\n#2 /tmp/tmpniq4c9uq.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpniq4c9uq.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpw0dtpq2n.php:14\nStack trace:\n#0 /tmp/tmpw0dtpq2n.php(21): count_up_to(5)\n\
    #1 /tmp/tmpw0dtpq2n.php(25): candidate(5)\n#2 /tmp/tmpw0dtpq2n.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw0dtpq2n.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // your code goes here\n    if ($n < 0) {\n        return [];\n    }\n\
    \    $res = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $res[] = $i;\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuar7gxt4.php:18\nStack trace:\n#0 /tmp/tmpuar7gxt4.php(26): count_up_to(5)\n\
    #1 /tmp/tmpuar7gxt4.php(30): candidate(5)\n#2 /tmp/tmpuar7gxt4.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuar7gxt4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn6okvkk_.php:14\nStack trace:\n#0 /tmp/tmpn6okvkk_.php(22): count_up_to(5)\n\
    #1 /tmp/tmpn6okvkk_.php(26): candidate(5)\n#2 /tmp/tmpn6okvkk_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn6okvkk_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $prime_count = [];\n  if ($n < 2) {\n    return $prime_count;\n  }\n\n\
    \  for ($i = 2; $i < $n; $i++) {\n    $is_prime = TRUE;\n    for ($j = 2; $j <\
    \ $i; $j++) {\n      if ($i % $j == 0) {\n        $is_prime = FALSE;\n       \
    \ break;\n      }\n    }\n    if ($is_prime) {\n      $prime_count[] = $i;\n \
    \   }\n  }\n  return $prime_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdak169th.php:14\nStack trace:\n#0 /tmp/tmpdak169th.php(22): count_up_to(5)\n\
    #1 /tmp/tmpdak169th.php(26): candidate(5)\n#2 /tmp/tmpdak169th.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdak169th.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif($n == 0) {\n\t\treturn [];\n\t}\n\t$list = [];\n\tfor($i = 2; $i < $n;\
    \ $i++) {\n\t\tif(is_prime($i)) {\n\t\t\t$list[] = $i;\n\t\t}\n\t}\n\treturn $list;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqkm6k3tx.php:17\nStack trace:\n#0 /tmp/tmpqkm6k3tx.php(25): count_up_to(5)\n\
    #1 /tmp/tmpqkm6k3tx.php(29): candidate(5)\n#2 /tmp/tmpqkm6k3tx.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqkm6k3tx.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n < 2) {\n    return [];\n  }\n  $primes = [2];\n  for ($i = 3; $i\
    \ < $n; $i++) {\n    $prime = true;\n    foreach ($primes as $key => $value) {\n\
    \      if ($i % $value == 0) {\n        $prime = false;\n        break;\n    \
    \  }\n    }\n    if ($prime) {\n      $primes[] = $i;\n    }\n  }\n  return $primes;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$output = [];\n\tif ($n == 0) {\n\t\treturn $output;\n\t}\n\tfor ($i =\
    \ 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\t\t$output[] = $i;\n\t\t}\n\
    \t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpako4441y.php:17\nStack trace:\n#0 /tmp/tmpako4441y.php(25): count_up_to(5)\n\
    #1 /tmp/tmpako4441y.php(29): candidate(5)\n#2 /tmp/tmpako4441y.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpako4441y.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // Write your code here.\n  $result = [];\n  if ($n > 2) {\n    $result[]\
    \ = 2;\n  }\n  for ($i = 3; $i < $n; $i += 2) {\n    if (isPrime($i)) {\n    \
    \  $result[] = $i;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpog1vrwom.php:18\nStack trace:\n#0 /tmp/tmpog1vrwom.php(26): count_up_to(5)\n\
    #1 /tmp/tmpog1vrwom.php(30): candidate(5)\n#2 /tmp/tmpog1vrwom.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpog1vrwom.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$result = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpg420n0z2.php:14\nStack trace:\n#0 /tmp/tmpg420n0z2.php(22): count_up_to(5)\n\
    #1 /tmp/tmpg420n0z2.php(26): candidate(5)\n#2 /tmp/tmpg420n0z2.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg420n0z2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// TODO\n\tif ($n == 0) {\n\t\treturn [];\n\t}\n\telseif ($n == 1) {\n\t\
    \treturn [];\n\t}\n\telse {\n\t\tfor ($i = 2; $i < $n; $i++) {\n\t\t\t$arr = [];\n\
    \t\t\t$counter = 0;\n\t\t\tfor ($j = 1; $j <= $i; $j++) {\n\t\t\t\tif ($i % $j\
    \ == 0) {\n\t\t\t\t\t$counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($counter == 2)\
    \ {\n\t\t\t\tarray_push($arr, $i);\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78g7yjf6.php:41\n\
    Stack trace:\n#0 /tmp/tmp78g7yjf6.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp78g7yjf6.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $res = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i)) {\n\
    \      $res[] = $i;\n    }\n  }\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0oejt9g0.php:14\nStack trace:\n#0 /tmp/tmp0oejt9g0.php(21): count_up_to(5)\n\
    #1 /tmp/tmp0oejt9g0.php(25): candidate(5)\n#2 /tmp/tmp0oejt9g0.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0oejt9g0.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n\n    $result = [2];\n    for\
    \ ($i = 3; $i < $n; $i += 2) {\n        if (is_prime($i)) {\n            $result[]\
    \ = $i;\n        }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpr3e4xj88.php:18\nStack trace:\n#0 /tmp/tmpr3e4xj88.php(27): count_up_to(5)\n\
    #1 /tmp/tmpr3e4xj88.php(31): candidate(5)\n#2 /tmp/tmpr3e4xj88.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr3e4xj88.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyg4ri1b.php:20\n\
    Stack trace:\n#0 /tmp/tmpyyg4ri1b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyyg4ri1b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if ($i % 2\
    \ == 0) continue;\n        $isPrime = true;\n        for ($j = 2; $j <= sqrt($i);\
    \ $j++) {\n            if ($i % $j == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n        if ($isPrime) {\n \
    \           $result[] = $i;\n        }\n    }\n    return $result;\n}\n\ncount_up_to(5);\n\
    count_up_to(11);\ncount_up_to(0);\ncount_up_to(20);\ncount_up_to(1);\ncount_up_to(18);\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4_o8yiq.php:40\n\
    Stack trace:\n#0 /tmp/tmpe4_o8yiq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe4_o8yiq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $array[] = [];\n    if($n > 1){\n        for($i = 2; $i < $n; $i++){\n\
    \            $counter = 0;\n            for($j = 2; $j <= $i/2; $j++){\n     \
    \           if($i % $j == 0){\n                    $counter++;\n             \
    \       break;\n                }\n            }\n            if($counter == 0){\n\
    \                $array[] = $i;\n            }\n        }\n    }\n    return $array;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zgw0dym.php:34\n\
    Stack trace:\n#0 /tmp/tmp9zgw0dym.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9zgw0dym.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n == 1) {\n    return [];\n  }\n\n  $primes = [2];\n  $i = 3;\n  while\
    \ ($i < $n) {\n    $isPrime = true;\n    foreach ($primes as $prime) {\n     \
    \ if ($i % $prime == 0) {\n        $isPrime = false;\n        break;\n      }\n\
    \    }\n    if ($isPrime) {\n      $primes[] = $i;\n    }\n    $i++;\n  }\n  return\
    \ $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv5oiwi3.php:43\n\
    Stack trace:\n#0 /tmp/tmpmv5oiwi3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmv5oiwi3.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $list = [];\n  for ($i = 2; $i < $n; $i++) {\n    $list[] = $i;\n  }\n\
    \  $list = array_filter($list, 'is_prime');\n  return $list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'is_prime' not found or invalid function name in /tmp/tmpv2lmq_uv.php on line\
    \ 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2lmq_uv.php:25\n\
    Stack trace:\n#0 /tmp/tmpv2lmq_uv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv2lmq_uv.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $array = [];\n    $num = 2;\n    while ($num < $n) {\n        if ($num\
    \ < 2) {\n            $num++;\n            continue;\n        }\n        $factor\
    \ = 2;\n        while ($factor < $num) {\n            if ($num % $factor == 0)\
    \ {\n                break;\n            }\n            $factor++;\n        }\n\
    \        if ($factor == $num) {\n            $array[] = $num;\n        }\n   \
    \     $num++;\n    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    if ($i === 2) {\n \
    \     $result[] = $i;\n    } else {\n      for ($j = 2; $j < $i; $j++) {\n   \
    \     if ($i % $j === 0) {\n          break;\n        } elseif ($j === $i - 1)\
    \ {\n          $result[] = $i;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$result = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$result[] = $i;\n\t\
    }\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphh1re5w1.php:23\n\
    Stack trace:\n#0 /tmp/tmphh1re5w1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphh1re5w1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // your code here\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeerh1mfs.php:19\n\
    Stack trace:\n#0 /tmp/tmpeerh1mfs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeerh1mfs.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n == 0) return [];\n  if ($n == 1) return [];\n  if ($n == 2) return\
    \ [2];\n  if ($n == 3) return [2,3];\n  if ($n == 4) return [2,3];\n  if ($n ==\
    \ 5) return [2,3,5];\n  $a = [];\n  $s = 4;\n  $b = true;\n  while ($s < $n) {\n\
    \    for ($i = 2; $i < $s; $i++) {\n      if ($s % $i == 0) {\n        $b = false;\n\
    \        break;\n      }\n    }\n    if ($b) {\n      $a[] = $s;\n    }\n    $b\
    \ = true;\n    $s++;\n  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchp2pe7x.php:42\n\
    Stack trace:\n#0 /tmp/tmpchp2pe7x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpchp2pe7x.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime_numbers = [];\n    $number = 2;\n    while ($number < $n) {\n\
    \        $i = 2;\n        while ($i <= $number) {\n            if ($number % $i\
    \ == 0) {\n                if ($number == $i) {\n                    $prime_numbers[]\
    \ = $number;\n                }\n                break;\n            }\n     \
    \       $i++;\n        }\n        $number++;\n    }\n    return $prime_numbers;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n// Write your code here\n    if($n == 0) {\n        return [];\n    }\n \
    \   if($n == 1) {\n        return [];\n    }\n    if($n == 2) {\n        return\
    \ [2];\n    }\n    $result = [];\n    for($i = 2; $i <= $n; $i++) {\n        if(isPrime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpqodt8pwm.php:24\nStack trace:\n#0 /tmp/tmpqodt8pwm.php(32): count_up_to(5)\n\
    #1 /tmp/tmpqodt8pwm.php(36): candidate(5)\n#2 /tmp/tmpqodt8pwm.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqodt8pwm.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $prime = [];\n  $numbers = range(2, $n);\n  for ($i = 2; $i < $n; $i++)\
    \ {\n    if (in_array($i, $numbers)) {\n      $prime[] = $i;\n      for ($j =\
    \ 2; $j * $i < $n; $j++) {\n        unset($numbers[$j * $i]);\n      }\n    }\n\
    \  }\n  return $prime;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3getal5l.php:30\n\
    Stack trace:\n#0 /tmp/tmp3getal5l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3getal5l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime = [];\n    if($n == 0) {\n        return $prime;\n    }\n    for($i\
    \ = 2; $i < $n; $i++) {\n        $j = 2;\n        while($j <= $i) {\n        \
    \    if($i % $j == 0) {\n                break;\n            }\n            $j++;\n\
    \        }\n        if($j == $i) {\n            $prime[] = $i;\n        }\n  \
    \  }\n    return $prime;\n}\n$result = count_up_to(20);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4]\
    \ => 11\n    [5] => 13\n    [6] => 17\n    [7] => 19\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n\n    $result = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j = 2; $j\
    \ < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n        if ($isPrime) {\n \
    \           $result[] = $i;\n        }\n    }\n    return $result;\n}\necho json_encode(count_up_to(5))\
    \ . PHP_EOL; // [2,3]\necho json_encode(count_up_to(11)) . PHP_EOL; // [2,3,5,7]\n\
    echo json_encode(count_up_to(0)) . PHP_EOL; // []\necho json_encode(count_up_to(20))\
    \ . PHP_EOL; // [2,3,5,7,11,13,17,19]\necho json_encode(count_up_to(1)) . PHP_EOL;\
    \ // []\necho json_encode(count_up_to(18)) . PHP_EOL; // [2,3,5,7,11,13,17]\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,3]\n[2,3,5,7]\n[]\n[2,3,5,7,11,13,17,19]\n[]\n[2,3,5,7,11,13,17]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $i = 2;\n  $is_prime = true;\n  $primes = [];\n  while ($i < $n) {\n  \
    \  foreach ($primes as $prime) {\n      if ($i % $prime == 0) {\n        $is_prime\
    \ = false;\n        break;\n      }\n    }\n    if ($is_prime) {\n      $primes[]\
    \ = $i;\n    }\n    $is_prime = true;\n    $i++;\n  }\n  return $primes;\n}\n\
    echo \"max(\\\"hello\\\") = \" . max(\"hello\") . \"\\n\";\necho \"max(\\\"the\
    \ quick brown fox jumped over the lazy dog\\\") = \" . max(\"the quick brown fox\
    \ jumped over the lazy dog\") . \"\\n\";\necho \"max(\\\"\\\") = \" . max(\"\"\
    ) . \"\\n\";\necho \"max(5) = \" . max(5) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpchhbnf9t.php on line 30\nmax(\"hello\") = \n\nWarning: max(): When\
    \ only one parameter is given, it must be an array in /tmp/tmpchhbnf9t.php on\
    \ line 31\nmax(\"the quick brown fox jumped over the lazy dog\") = \n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpchhbnf9t.php\
    \ on line 32\nmax(\"\") = \n\nWarning: max(): When only one parameter is given,\
    \ it must be an array in /tmp/tmpchhbnf9t.php on line 33\nmax(5) = \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    $count = 0;\n    while ($count < $n) {\n        if\
    \ (is_prime($count)) {\n            $primes[] = $count;\n        }\n        $count++;\n\
    \    }\n    return $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpq1prtegy.php:15\nStack trace:\n#0 /tmp/tmpq1prtegy.php(23): count_up_to(5)\n\
    #1 /tmp/tmpq1prtegy.php(27): candidate(5)\n#2 /tmp/tmpq1prtegy.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq1prtegy.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // WRITE CODE HERE\n  $a=array();\n  for($i=2;$i<$n;$i++){\n    $j=2;\n\
    \    $res=true;\n    while(($j*$j)<=$i){\n      if($i%$j==0){\n        $res=false;\n\
    \        break;\n      }\n      $j++;\n    }\n    if($res){\n      array_push($a,$i);\n\
    \    }\n  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $output = [];\n  for ($i = 2; $i < $n; $i++) {\n    $mod_array = [];\n\
    \    for ($j = 2; $j < $i; $j++) {\n      $mod_array[] = $i % $j;\n    }\n   \
    \ if (!in_array(0, $mod_array)) {\n      $output[] = $i;\n    }\n  }\n  return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $a = [];\n  $i = 2;\n  while ($i < $n) {\n    if (is_prime($i)) $a[] =\
    \ $i;\n    $i++;\n  }\n  return $a;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpanutzeec.php:15\nStack trace:\n#0 /tmp/tmpanutzeec.php(22): count_up_to(5)\n\
    #1 /tmp/tmpanutzeec.php(26): candidate(5)\n#2 /tmp/tmpanutzeec.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpanutzeec.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if (!is_int($n) || $n < 0) {\n        throw new Exception(\"The input\
    \ n must be a non-negative integer.\");\n    }\n    // Create an empty array to\
    \ store the prime numbers.\n    $primes = [];\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++) {\n      \
    \      if ($i % $j == 0) {\n                $is_prime = false;\n             \
    \   break;\n            }\n        }\n        if ($is_prime) {\n            $primes[]\
    \ = $i;\n        }\n    }\n    return $primes;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = array();\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i))\
    \ {\n\t\t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5gokvdx_.php:14\nStack trace:\n#0 /tmp/tmp5gokvdx_.php(22): count_up_to(5)\n\
    #1 /tmp/tmp5gokvdx_.php(26): candidate(5)\n#2 /tmp/tmp5gokvdx_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5gokvdx_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// Write code here\n\t$primes = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\
    \t$prime = true;\n\t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\tif ($i % $j == 0) {\n\
    \t\t\t\t$prime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($prime) {\n\t\
    \t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// your implementation\n}\n\necho implode(',', count_up_to(0)) . \"\\n\"\
    ;\necho implode(',', count_up_to(1)) . \"\\n\";\necho implode(',', count_up_to(2))\
    \ . \"\\n\";\necho implode(',', count_up_to(3)) . \"\\n\";\necho implode(',',\
    \ count_up_to(4)) . \"\\n\";\necho implode(',', count_up_to(5)) . \"\\n\";\necho\
    \ implode(',', count_up_to(7)) . \"\\n\";\necho implode(',', count_up_to(11))\
    \ . \"\\n\";\necho implode(',', count_up_to(18)) . \"\\n\";\necho implode(',',\
    \ count_up_to(20)) . \"\\n\";\necho implode(',', count_up_to(30)) . \"\\n\";\n\
    echo implode(',', count_up_to(50)) . \"\\n\";\necho implode(',', count_up_to(100))\
    \ . \"\\n\";\necho implode(',', count_up_to(1000)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 15\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 16\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 17\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 18\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 19\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 20\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 21\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 22\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 23\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 24\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 25\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 26\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 27\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5amho0o0.php\
    \ on line 28\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5amho0o0.php:34\n\
    Stack trace:\n#0 /tmp/tmp5amho0o0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5amho0o0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // your code here\n\n  // loop through n\n  // if n is prime, push to result\
    \ array\n  // return result array\n}\n\necho implode(', ', count_up_to(5)) . \"\
    \\n\";\necho implode(', ', count_up_to(11)) . \"\\n\";\necho implode(', ', count_up_to(0))\
    \ . \"\\n\";\necho implode(', ', count_up_to(20)) . \"\\n\";\necho implode(',\
    \ ', count_up_to(1)) . \"\\n\";\necho implode(', ', count_up_to(18)) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 19\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 20\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 21\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 22\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 23\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpe6kscqi8.php\
    \ on line 24\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6kscqi8.php:30\n\
    Stack trace:\n#0 /tmp/tmpe6kscqi8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe6kscqi8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// your implementation\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq72m89k.php:20\n\
    Stack trace:\n#0 /tmp/tmpyq72m89k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyq72m89k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpo2rmz_ev.php:14\nStack trace:\n#0 /tmp/tmpo2rmz_ev.php(22): count_up_to(5)\n\
    #1 /tmp/tmpo2rmz_ev.php(26): candidate(5)\n#2 /tmp/tmpo2rmz_ev.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo2rmz_ev.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$return_array = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$check = 0;\n\
    \t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\tif ($i % $j == 0) {\n\t\t\t\t$check =\
    \ 1;\n\t\t\t}\n\t\t}\n\t\tif ($check == 0) {\n\t\t\tarray_push($return_array,\
    \ $i);\n\t\t}\n\t}\n\treturn $return_array;\n}\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ $result[] = $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuvkelfwc.php:14\nStack trace:\n#0 /tmp/tmpuvkelfwc.php(20): count_up_to(5)\n\
    #1 /tmp/tmpuvkelfwc.php(24): candidate(5)\n#2 /tmp/tmpuvkelfwc.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuvkelfwc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoz_hbxf.php:19\n\
    Stack trace:\n#0 /tmp/tmpdoz_hbxf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdoz_hbxf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if($n<2) {\n        return [];\n    }\n    $res = [];\n    for($i=2;$i<$n;$i++)\
    \ {\n        if(is_prime($i)) {\n            $res[] = $i;\n        }\n    }\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz5yop5ip.php:17\nStack trace:\n#0 /tmp/tmpz5yop5ip.php(25): count_up_to(5)\n\
    #1 /tmp/tmpz5yop5ip.php(29): candidate(5)\n#2 /tmp/tmpz5yop5ip.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz5yop5ip.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $arr = [];\n  for ($i = 2; $i < $n; $i++) {\n    if ($i == 2) {\n     \
    \ $arr[] = $i;\n    } else if ($i % 2 != 0) {\n      $arr[] = $i;\n    }\n  }\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwih3r8ya.php:31\n\
    Stack trace:\n#0 /tmp/tmpwih3r8ya.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwih3r8ya.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    $isPrime = true;\n\
    \    for ($j = 2; $j < $i; $j++) {\n      if ($i % $j == 0) {\n        $isPrime\
    \ = false;\n        break;\n      }\n    }\n    if ($isPrime) {\n      $result[]\
    \ = $i;\n    }\n  }\n  return $result;\n}\n\necho \"count_up_to(5) => \" . join(',',\
    \ count_up_to(5)) . \"\\n\";\necho \"count_up_to(11) => \" . join(',', count_up_to(11))\
    \ . \"\\n\";\necho \"count_up_to(0) => \" . join(',', count_up_to(0)) . \"\\n\"\
    ;\necho \"count_up_to(20) => \" . join(',', count_up_to(20)) . \"\\n\";\necho\
    \ \"count_up_to(1) => \" . join(',', count_up_to(1)) . \"\\n\";\necho \"count_up_to(18)\
    \ => \" . join(',', count_up_to(18)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "count_up_to(5) => 2,3\ncount_up_to(11) => 2,3,5,7\ncount_up_to(0) => \n\
    count_up_to(20) => 2,3,5,7,11,13,17,19\ncount_up_to(1) => \ncount_up_to(18) =>\
    \ 2,3,5,7,11,13,17\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        $isPrime =\
    \ true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j == 0)\
    \ {\n                $isPrime = false;\n                break;\n            }\n\
    \        }\n        if ($isPrime) {\n            $result[] = $i;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $output = [];\n    for ($i = 2; $i < $n; $i++) {\n        if ($i % 2\
    \ == 0) {\n            continue;\n        }\n        if ($i % 3 == 0) {\n    \
    \        continue;\n        }\n        if ($i % 5 == 0) {\n            continue;\n\
    \        }\n        if ($i % 7 == 0) {\n            continue;\n        }\n   \
    \     $output[] = $i;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp194tdmk6.php:36\n\
    Stack trace:\n#0 /tmp/tmp194tdmk6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp194tdmk6.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n <= 1) {\n        return [];\n    }\n    if ($n == 2) {\n     \
    \   return [2];\n    }\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if (is_prime($i)) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzo2pnukw.php:20\nStack trace:\n#0 /tmp/tmpzo2pnukw.php(28): count_up_to(5)\n\
    #1 /tmp/tmpzo2pnukw.php(32): candidate(5)\n#2 /tmp/tmpzo2pnukw.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzo2pnukw.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $res = [];\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $res[] = $i;\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2ue9u_w4.php:17\nStack trace:\n#0 /tmp/tmp2ue9u_w4.php(25): count_up_to(5)\n\
    #1 /tmp/tmp2ue9u_w4.php(29): candidate(5)\n#2 /tmp/tmp2ue9u_w4.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2ue9u_w4.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $out = [];\n  for ($i = 2; $i < $n; $i++) {\n    $isPrime = true;\n   \
    \ for ($j = 2; $j < $i; $j++) {\n      if ($i % $j == 0) {\n        $isPrime =\
    \ false;\n        break;\n      }\n    }\n    if ($isPrime) {\n      $out[] =\
    \ $i;\n    }\n  }\n  return $out;\n}\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $arr = [];\n  $is_prime = true;\n  $c = 2;\n  while ($c < $n) {\n    for\
    \ ($i = 2; $i < $c; $i++) {\n      if ($c % $i == 0) {\n        $is_prime = false;\n\
    \        break;\n      }\n    }\n    if ($is_prime) {\n      array_push($arr,\
    \ $c);\n    }\n    $is_prime = true;\n    $c++;\n  }\n  return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$prime = array();\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$counter = 0;\n\
    \t\tfor ($j = 1; $j <= $i; $j++) {\n\t\t\tif ($i % $j == 0) {\n\t\t\t\t$counter++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($counter == 2) {\n\t\t\tarray_push($prime, $i);\n\t\t\
    }\n\t}\n\treturn $prime;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n == 1) {\n        return [];\n    }\n\n    $result = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $result[]\
    \ = $i;\n        }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp23vcs005.php:18\nStack trace:\n#0 /tmp/tmp23vcs005.php(27): count_up_to(5)\n\
    #1 /tmp/tmp23vcs005.php(31): candidate(5)\n#2 /tmp/tmp23vcs005.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp23vcs005.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $arr = [];\n    if ($n < 0) {\n        return $arr;\n    } else if ($n\
    \ == 1) {\n        return $arr;\n    }\n    for ($i = 2; $i < $n; $i++) {\n  \
    \      $p = 0;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j\
    \ == 0) {\n                $p = 1;\n            }\n        }\n        if ($p ==\
    \ 0) {\n            array_push($arr, $i);\n        }\n    }\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if($n < 2) {\n    return [];\n  }\n  if($n == 2) {\n    return [2];\n \
    \ }\n  // ensure that 2 is the first element\n  $primes = [2];\n  // start at\
    \ 3, because we already have 2\n  for($i = 3; $i < $n; $i += 2) {\n    // j is\
    \ used to check if $i is a prime number\n    for($j = 2; $j < $i; $j++) {\n  \
    \    // if $i mod $j is 0, $i is a composite number and we should break out of\
    \ the loop\n      if($i % $j == 0) {\n        break;\n      }\n    }\n    // $i\
    \ is prime if $j is equal to $i, meaning we checked all numbers from 2 until $i\
    \ and none of them mod $i to 0\n    if($j == $i) {\n      // add to the list of\
    \ primes\n      $primes[] = $i;\n    }\n  }\n  return $primes;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primeNumbers = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (isPrime($i))\
    \ {\n\t\t\t$primeNumbers[] = $i;\n\t\t}\n\t}\n\treturn $primeNumbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp6yyk28id.php:14\nStack trace:\n#0 /tmp/tmp6yyk28id.php(22): count_up_to(5)\n\
    #1 /tmp/tmp6yyk28id.php(26): candidate(5)\n#2 /tmp/tmp6yyk28id.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6yyk28id.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $primeArr = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j = 2; $j\
    \ < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n        if ($isPrime) {\n \
    \           $primeArr[] = $i;\n        }\n    }\n    return $primeArr;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptwj0wx2s.php:14\nStack trace:\n#0 /tmp/tmptwj0wx2s.php(22): count_up_to(5)\n\
    #1 /tmp/tmptwj0wx2s.php(26): candidate(5)\n#2 /tmp/tmptwj0wx2s.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmptwj0wx2s.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// $numbers = range(2,$n);\n\t// $primes = [];\n\t// $p = 2;\n\t// while\
    \ ($p) {\n\t// \tif (!$numbers) {\n\t// \t\tbreak;\n\t// \t}\n\t// \t$primes[]\
    \ = $p;\n\t// \t$numbers = array_filter($numbers, function($number) use ($p) {\n\
    \t// \t\treturn $number % $p;\n\t// \t});\n\t// \t$p = array_shift($numbers);\n\
    \t// }\n\t// return $primes;\n\t$primes = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\
    \t\tif (is_prime($i)) {\n\t\t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwqpxadq5.php:28\nStack trace:\n#0 /tmp/tmpwqpxadq5.php(36): count_up_to(5)\n\
    #1 /tmp/tmpwqpxadq5.php(40): candidate(5)\n#2 /tmp/tmpwqpxadq5.php(52): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwqpxadq5.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    if ($i == 2) {\n  \
    \    $result[] = $i;\n    } else {\n      $divider = floor($i / 2);\n      $check\
    \ = true;\n      for ($j = 2; $j <= $divider; $j++) {\n        if ($i % $j ==\
    \ 0) {\n          $check = false;\n          break;\n        }\n      }\n    \
    \  if ($check) {\n        $result[] = $i;\n      }\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// Write your code here\n\t$primeArray = array();\n\tfor ($i = 2; $i <\
    \ $n; $i++) {\n\t\t$flag = true;\n\t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\tif\
    \ ($i % $j == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    \tif ($flag) {\n\t\t\tarray_push($primeArray, $i);\n\t\t}\n\t}\n\treturn $primeArray;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$output = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$output[] = $i;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpk00zbbbp.php:14\nStack trace:\n#0 /tmp/tmpk00zbbbp.php(22): count_up_to(5)\n\
    #1 /tmp/tmpk00zbbbp.php(26): candidate(5)\n#2 /tmp/tmpk00zbbbp.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk00zbbbp.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $arr = [];\n    if ($n > 1) {\n        $arr[] = 2;\n        for ($i =\
    \ 3; $i < $n; $i+=2) {\n            if (is_prime($i)) {\n                $arr[]\
    \ = $i;\n            }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphl_nyj31.php:16\nStack trace:\n#0 /tmp/tmphl_nyj31.php(25): count_up_to(5)\n\
    #1 /tmp/tmphl_nyj31.php(29): candidate(5)\n#2 /tmp/tmphl_nyj31.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmphl_nyj31.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n === 0) {\n    return [];\n  }\n  $prime_numbers = [];\n  if ($n\
    \ === 1) {\n    return $prime_numbers;\n  }\n  for ($i = 2; $i < $n; $i++) {\n\
    \    if ($i === 2) {\n      $prime_numbers[] = $i;\n    } else {\n      $is_prime\
    \ = true;\n      foreach ($prime_numbers as $prime_number) {\n        if ($i %\
    \ $prime_number === 0) {\n          $is_prime = false;\n          break;\n   \
    \     }\n      }\n      if ($is_prime) {\n        $prime_numbers[] = $i;\n   \
    \   }\n    }\n  }\n  return $prime_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // if $n is less than 2, nothing is prime\n  if ($n < 2) {\n    return\
    \ [];\n  }\n  // Create an array of all numbers less than $n\n  $primes = range(2,\
    \ $n - 1);\n  // Find the square root of $n\n  $sqrt = sqrt($n);\n  // For every\
    \ number less than the square root of $n,\n  // find all multiples of that number\
    \ and remove them from $primes\n  for ($i = 2; $i <= $sqrt; $i++) {\n    $primes\
    \ = array_filter($primes, function($num) use ($i) {\n      return $num % $i !==\
    \ 0;\n    });\n  }\n  return $primes;\n}\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxs9svd32.php:34\n\
    Stack trace:\n#0 /tmp/tmpxs9svd32.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxs9svd32.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = array();\n  if ($n < 2) {\n    return $primes;\n  }\n  for ($i\
    \ = 2; $i < $n; $i++) {\n    $isPrime = true;\n    for ($j = 2; $j < $i; $j++)\
    \ {\n      if ($i % $j == 0) {\n        $isPrime = false;\n        break;\n  \
    \    }\n    }\n    if ($isPrime) {\n      array_push($primes, $i);\n    }\n  }\n\
    \  return $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  \n  // your code goes here\n  $result = [];\n  if($n<=1){\n    return $result;\n\
    \  }\n  $result[] = 2;\n  for($i=3;$i<$n;$i++){\n      $is_prime = 1;\n      for($j=2;$j<=($i/2);$j++){\n\
    \          if($i%$j == 0){\n              $is_prime = 0;\n              break;\n\
    \          }\n      }\n      if($is_prime == 1){\n          $result[] = $i;\n\
    \      }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $res = [2];\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $res[] = $i;\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4q64hio1.php:17\nStack trace:\n#0 /tmp/tmp4q64hio1.php(25): count_up_to(5)\n\
    #1 /tmp/tmp4q64hio1.php(29): candidate(5)\n#2 /tmp/tmp4q64hio1.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4q64hio1.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = array();\n\tif ($n <= 0) return $primes;\n\tfor ($i = 2; $i <\
    \ $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\t\tarray_push($primes, $i);\n\t\t}\n\
    \t}\n\treturn $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpj5he9d06.php:15\nStack trace:\n#0 /tmp/tmpj5he9d06.php(23): count_up_to(5)\n\
    #1 /tmp/tmpj5he9d06.php(27): candidate(5)\n#2 /tmp/tmpj5he9d06.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj5he9d06.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    $result[] = $i;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuslyn4nc.php:24\n\
    Stack trace:\n#0 /tmp/tmpuslyn4nc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuslyn4nc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n < 2) {\n\t\treturn [];\n\t}\n\n\tfor ($i = 2; $i < $n; $i++) {\n\
    \t\t$counter = 0;\n\t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\tif ($i % $j == 0)\
    \ {\n\t\t\t\t$counter++;\n\t\t\t}\n\t\t}\n\t\tif ($counter == 0) {\n\t\t\t$arr[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $arr;\n}\n\necho \"<pre>\";\nprint_r(count_up_to(1));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(count_up_to(5));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(count_up_to(11));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(count_up_to(0));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(count_up_to(20));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(count_up_to(18));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] => 3\n)\n\
    </pre><pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] => 3\n \
    \   [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6] => 17\n    [7]\
    \ => 19\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n  \
    \  [3] => 7\n    [4] => 11\n    [5] => 13\n    [6] => 17\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  if ($n <= 1) {\n    return $result;\n  }\n  $result[]\
    \ = 2;\n  for ($i = 3; $i < $n; $i+=2) {\n    $isPrime = true;\n    for ($j =\
    \ 3; $j <= $i/2; $j+=2) {\n      if ($i % $j == 0) {\n        $isPrime = false;\n\
    \        break;\n      }\n    }\n    if ($isPrime) {\n      $result[] = $i;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // CODE HERE\n    $count_up_to = [];\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if (is_prime($i)) {\n            $count_up_to[] = $i;\n        }\n\
    \    }\n    return $count_up_to;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpfn9lyt09.php:15\nStack trace:\n#0 /tmp/tmpfn9lyt09.php(23): count_up_to(5)\n\
    #1 /tmp/tmpfn9lyt09.php(27): candidate(5)\n#2 /tmp/tmpfn9lyt09.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfn9lyt09.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $nums = range(2, $n);\n    $primes = [];\n    while (!empty($nums)) {\n\
    \        $p = array_shift($nums);\n        $primes[] = $p;\n        $nums = array_filter($nums,\
    \ function($x) use ($p) {\n            return $x % $p !== 0;\n        });\n  \
    \  }\n    return $primes;\n}\nvar_dump(count_up_to(5));\nvar_dump(count_up_to(11));\n\
    var_dump(count_up_to(0));\nvar_dump(count_up_to(20));\nvar_dump(count_up_to(1));\n\
    var_dump(count_up_to(18));\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n}\n\
    array(5) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n\
    \  int(7)\n  [4]=>\n  int(11)\n}\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n\
    }\narray(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n\
    \  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n  [7]=>\n\
    \  int(19)\n}\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(7) {\n\
    \  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n\
    \  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpiu2pzdj6.php:34\nStack trace:\n\
    #0 /tmp/tmpiu2pzdj6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpiu2pzdj6.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i)) {\n\
    \      $primes[] = $i;\n    }\n  }\n  return $primes;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpepax7ry4.php:14\nStack trace:\n#0 /tmp/tmpepax7ry4.php(21): count_up_to(5)\n\
    #1 /tmp/tmpepax7ry4.php(25): candidate(5)\n#2 /tmp/tmpepax7ry4.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpepax7ry4.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if($n < 2) return [];\n    $ret = [];\n    for($i = 2; $i < $n; $i++)\
    \ {\n        if(is_prime($i)) $ret[] = $i;\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp0hu1st4.php:15\nStack trace:\n#0 /tmp/tmpp0hu1st4.php(21): count_up_to(5)\n\
    #1 /tmp/tmpp0hu1st4.php(25): candidate(5)\n#2 /tmp/tmpp0hu1st4.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp0hu1st4.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // your code goes here\n    if($n == 1) {\n        return [];\n    }\n\
    \    $result = [];\n    $primeArr = [];\n    $pointer = 2;\n    while($pointer\
    \ <= $n) {\n        if(!$primeArr[$pointer]) {\n            $result[] = $pointer;\n\
    \            $primeArr[$pointer] = true;\n            $x = $pointer;\n       \
    \     while($x <= $n) {\n                $primeArr[$x] = true;\n             \
    \   $x += $pointer;\n            }\n        }\n        $pointer++;\n    }\n  \
    \  return $result;\n}\n\necho count_up_to(1);\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax67wcjx.php:40\n\
    Stack trace:\n#0 /tmp/tmpax67wcjx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpax67wcjx.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    if ($n == 2) {\n      \
    \  return [2];\n    }\n    $rst = [];\n    $first = 2;\n    $rst[] = $first;\n\
    \    while ($first <= $n) {\n        $first++;\n        $isPrime = true;\n   \
    \     foreach ($rst as $num) {\n            if ($first % $num == 0) {\n      \
    \          $isPrime = false;\n                break;\n            }\n        }\n\
    \        if ($isPrime) {\n            $rst[] = $first;\n        }\n    }\n   \
    \ return $rst;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp842pis5.php:41\n\
    Stack trace:\n#0 /tmp/tmpp842pis5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp842pis5.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n < 0) {\n\t\treturn \"n needs to be non-negative\";\n\t}\n\t$firstN\
    \ = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$isPrime = true;\n\t\tfor ($j =\
    \ 2; $j < $i; $j++) {\n\t\t\tif ($i % $j == 0) {\n\t\t\t\t$isPrime = false;\n\t\
    \t\t}\n\t\t}\n\t\tif ($isPrime) {\n\t\t\tarray_push($firstN, $i);\n\t\t}\n\t}\n\
    \treturn $firstN;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $sieve = array_fill(0, $n, true);\n    $primes = [];\n    $sieve[0] =\
    \ false;\n    $sieve[1] = false;\n    for ($i = 2; $i < $n; $i++) {\n        if\
    \ ($sieve[$i]) {\n            $primes[] = $i;\n            for ($j = $i * $i;\
    \ $j < $n; $j += $i) {\n                $sieve[$j] = false;\n            }\n \
    \       }\n    }\n    return $primes;\n}\n\n$tests = [\n    0 => [],\n    1 =>\
    \ [],\n    2 => [2],\n    3 => [2, 3],\n    4 => [2, 3],\n    5 => [2, 3],\n \
    \   6 => [2, 3, 5],\n    7 => [2, 3, 5],\n    8 => [2, 3, 5],\n    9 => [2, 3,\
    \ 5],\n    10 => [2, 3, 5, 7],\n    11 => [2, 3, 5, 7],\n    12 => [2, 3, 5, 7],\n\
    \    13 => [2, 3, 5, 7, 11],\n    14 => [2, 3, 5, 7, 11],\n    15 => [2, 3, 5,\
    \ 7, 11],\n    16 => [2, 3, 5, 7, 11, 13],\n    17 => [2, 3, 5, 7, 11, 13],\n\
    \    18 => [2, 3, 5, 7, 11, 13, 17],\n    19 => [2, 3, 5, 7, 11, 13, 17],\n  \
    \  20 => [2, 3, 5, 7, 11, 13, 17, 19],\n];\nforeach ($tests as $input => $expected)\
    \ {\n    $output = count_up_to($input);\n    echo \"$input: \";\n    if ($output\
    \ == $expected) {\n        echo \"SUCCESS\", PHP_EOL;\n    } else {\n        echo\
    \ \"FAILURE: $output should be $expected\", PHP_EOL;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "0: SUCCESS\n1: SUCCESS\n2: FAILURE: Array should be Array\n3: FAILURE:\
    \ Array should be Array\n4: SUCCESS\n5: SUCCESS\n6: SUCCESS\n7: SUCCESS\n8: FAILURE:\
    \ Array should be Array\n9: FAILURE: Array should be Array\n10: SUCCESS\n11: SUCCESS\n\
    12: FAILURE: Array should be Array\n13: SUCCESS\n14: FAILURE: Array should be\
    \ Array\n15: FAILURE: Array should be Array\n16: SUCCESS\n17: SUCCESS\n18: SUCCESS\n\
    19: SUCCESS\n20: SUCCESS\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $prime_numbers = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i))\
    \ {\n      $prime_numbers[] = $i;\n    }\n  }\n  return $prime_numbers;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpa2gg_3x0.php:14\nStack trace:\n#0 /tmp/tmpa2gg_3x0.php(22): count_up_to(5)\n\
    #1 /tmp/tmpa2gg_3x0.php(26): candidate(5)\n#2 /tmp/tmpa2gg_3x0.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa2gg_3x0.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes_array = [];\n    $i = 2;\n    while ($i < $n) {\n        $is_prime\
    \ = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j == 0)\
    \ {\n                $is_prime = false;\n                break;\n            }\n\
    \        }\n        if ($is_prime) {\n            array_push($primes_array, $i);\n\
    \        }\n        $i++;\n    }\n    return $primes_array;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = array();\n\t$is_prime = true;\n\tfor ($i = 2; $i < $n; $i++)\
    \ {\n\t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\tif ($i % $j == 0) {\n\t\t\t\t$is_prime\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_prime) {\n\t\t\tarray_push($primes,\
    \ $i);\n\t\t}\n\t\t$is_prime = true;\n\t}\n\treturn $primes;\n}\n\nvar_dump(count_up_to(5));\n\
    var_dump(count_up_to(11));\nvar_dump(count_up_to(0));\nvar_dump(count_up_to(20));\n\
    var_dump(count_up_to(1));\nvar_dump(count_up_to(18));\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n}\narray(0)\
    \ {\n}\narray(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n\
    \  [7]=>\n  int(19)\n}\narray(0) {\n}\narray(7) {\n  [0]=>\n  int(2)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n\
    \  int(13)\n  [6]=>\n  int(17)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    $count = 2;\n    while ($count < $n) {\n        $isPrime\
    \ = true;\n        for ($i = 2; $i < $count; $i++) {\n            if ($count %\
    \ $i == 0) {\n                $isPrime = false;\n                break;\n    \
    \        }\n        }\n        if ($isPrime) {\n            $primes[] = $count;\n\
    \        }\n        $count++;\n    }\n    return $primes;\n}\n\n$primes = count_up_to(11);\n\
    echo implode(\",\", $primes);\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 2,3,5,7
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primos = array();\n    for ($i = 2; $i < $n; $i++) {\n        $divisores\
    \ = 0;\n        for ($j = 1; $j <= $i; $j++) {\n            if ($i % $j == 0)\
    \ {\n                $divisores++;\n            }\n        }\n        if ($divisores\
    \ == 2) {\n            array_push($primos, $i);\n        }\n    }\n    return\
    \ $primos;\n}\n\nvar_dump(count_up_to(5));\nvar_dump(count_up_to(11));\nvar_dump(count_up_to(0));\n\
    var_dump(count_up_to(20));\nvar_dump(count_up_to(1));\nvar_dump(count_up_to(18));\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n}\narray(0)\
    \ {\n}\narray(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n\
    \  [7]=>\n  int(19)\n}\narray(0) {\n}\narray(7) {\n  [0]=>\n  int(2)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n\
    \  int(13)\n  [6]=>\n  int(17)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $prime_array = [2];\n \
    \   $current_number = 3;\n    while ($current_number < $n) {\n        if (is_prime($current_number))\
    \ {\n            $prime_array[] = $current_number;\n        }\n        $current_number++;\n\
    \    }\n    return $prime_array;\n}\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4wt1n874.php:18\nStack trace:\n#0 /tmp/tmp4wt1n874.php(26): count_up_to(5)\n\
    #1 /tmp/tmp4wt1n874.php(30): candidate(5)\n#2 /tmp/tmp4wt1n874.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4wt1n874.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if ($n <= 1) {\n        return $primes;\n    }\n\n\
    \    // Iterate through all numbers less than n, starting at 2.\n    for ($i =\
    \ 2; $i < $n; $i++) {\n        // Initialize the candidate to true.\n        $is_prime\
    \ = true;\n\n        // Iterate through all numbers less than $i to see if it\
    \ has any factors.\n        for ($factor = 2; $factor < $i; $factor++) {\n   \
    \         // If $i has a factor, then it is not prime.\n            if ($i % $factor\
    \ == 0) {\n                $is_prime = false;\n                break;\n      \
    \      }\n        }\n\n        // If the candidate is still prime, add it to the\
    \ $primes array.\n        if ($is_prime) {\n            $primes[] = $i;\n    \
    \    }\n    }\n\n    return $primes;\n}\n\nfunction candidate(...$args) {\n  \
    \  return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$countUpArray = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($i == 2)\
    \ {\n\t\t\tarray_push($countUpArray, $i);\n\t\t} else {\n\t\t\t$prime = true;\n\
    \t\t\tfor ($j = 2; $j < $i; $j++) {\n\t\t\t\tif ($i % $j == 0) {\n\t\t\t\t\t$prime\
    \ = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($prime) {\n\t\t\t\tarray_push($countUpArray,\
    \ $i);\n\t\t\t}\n\t\t}\n\t}\n\treturn $countUpArray;\n}\nprint_r(count_up_to(5));\n\
    echo \"\\n\";\nprint_r(count_up_to(11));\necho \"\\n\";\nprint_r(count_up_to(0));\n\
    echo \"\\n\";\nprint_r(count_up_to(20));\necho \"\\n\";\nprint_r(count_up_to(1));\n\
    echo \"\\n\";\nprint_r(count_up_to(18));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n)\n\nArray\n(\n    [0] => 2\n   \
    \ [1] => 3\n    [2] => 5\n    [3] => 7\n)\n\nArray\n(\n)\n\nArray\n(\n    [0]\
    \ => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n\
    \    [6] => 17\n    [7] => 19\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => 2\n  \
    \  [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6]\
    \ => 17\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $numbers = [];\n  for ($i = 2; $i < $n; $i++) {\n    $numbers[] = $i;\n\
    \  }\n  $max_divisor = floor(sqrt($n));\n  foreach ($numbers as $number) {\n \
    \   for ($i = 2; $i <= $max_divisor; $i++) {\n      if ($number % $i == 0) {\n\
    \        $number = 0;\n        break;\n      }\n    }\n  }\n  $numbers = array_values(array_filter($numbers));\n\
    \  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeveefhj7.php:34\n\
    Stack trace:\n#0 /tmp/tmpeveefhj7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeveefhj7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $rtrn = [];\n  if ($n > 1) {\n    for ($i = 2; $i < $n; $i++) {\n     \
    \ if (is_prime($i)) $rtrn[] = $i;\n    }\n  }\n  return $rtrn;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5q6wqpf1.php:15\nStack trace:\n#0 /tmp/tmp5q6wqpf1.php(22): count_up_to(5)\n\
    #1 /tmp/tmp5q6wqpf1.php(26): candidate(5)\n#2 /tmp/tmp5q6wqpf1.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5q6wqpf1.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $num = 2;\n    $is_prime = true;\n    $prime_numbers = [];\n    while\
    \ ($num < $n) {\n        for ($i = 2; $i < $num; $i++) {\n            if ($num\
    \ % $i == 0) {\n                $is_prime = false;\n                break;\n \
    \           }\n        }\n        if ($is_prime) {\n            $prime_numbers[]\
    \ = $num;\n        }\n        $is_prime = true;\n        $num++;\n    }\n    return\
    \ $prime_numbers;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if ($n >= 2) {\n        $primes[] = 2;\n    }\n  \
    \  for ($i = 3; $i < $n; $i += 2) {\n        if (is_prime($i)) {\n           \
    \ $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpubfqb30k.php:17\nStack trace:\n#0 /tmp/tmpubfqb30k.php(25): count_up_to(5)\n\
    #1 /tmp/tmpubfqb30k.php(29): candidate(5)\n#2 /tmp/tmpubfqb30k.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpubfqb30k.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // Check if number is greater than or equal to 2\n    // If it is less\
    \ than 2, return an empty array\n    if ($n < 2) {\n        return [];\n    }\n\
    \n    // Create an array to store the results\n    $primes = [];\n\n    // Loop\
    \ through all the numbers starting at 2 up to the number specified\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        // If number is less than 2, skip it\n      \
    \  if ($i < 2) {\n            continue;\n        }\n\n        // Set default value\
    \ of the flag\n        $isPrime = true;\n\n        // Check if number is divisible\
    \ by the numbers less than it\n        for ($j = 2; $j < $i; $j++) {\n       \
    \     // If number is divisible, change flag to false\n            if ($i % $j\
    \ == 0) {\n                $isPrime = false;\n                break;\n       \
    \     }\n        }\n\n        // If flag is still true, add number to the array\n\
    \        if ($isPrime) {\n            $primes[] = $i;\n        }\n    }\n\n  \
    \  // Return the array\n    return $primes;\n}\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i)) {\n\
    \      $primes[] = $i;\n    }\n  }\n  return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp9woqug5.php:14\nStack trace:\n#0 /tmp/tmpp9woqug5.php(22): count_up_to(5)\n\
    #1 /tmp/tmpp9woqug5.php(26): candidate(5)\n#2 /tmp/tmpp9woqug5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp9woqug5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  if ($n <= 1) {\n    return $result;\n  }\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if (is_prime($i)) {\n      $result[] = $i;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp499ry8q8.php:17\nStack trace:\n#0 /tmp/tmp499ry8q8.php(25): count_up_to(5)\n\
    #1 /tmp/tmp499ry8q8.php(29): candidate(5)\n#2 /tmp/tmp499ry8q8.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp499ry8q8.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n === 1) {\n    return [];\n  }\n\n  if ($n === 2) {\n    return [2];\n\
    \  }\n\n  $primes = [2];\n\n  for ($i = 3; $i < $n; $i += 2) {\n    $isPrime =\
    \ true;\n    for ($j = 0; $j < count($primes); $j++) {\n      if ($i % $primes[$j]\
    \ === 0) {\n        $isPrime = false;\n        break;\n      }\n    }\n    if\
    \ ($isPrime) {\n      $primes[] = $i;\n    }\n  }\n\n  return $primes;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50hedbzc.php:47\n\
    Stack trace:\n#0 /tmp/tmp50hedbzc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp50hedbzc.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$arr = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\
    \t\t$arr[] = $i;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpy6xeo20o.php:14\nStack trace:\n#0 /tmp/tmpy6xeo20o.php(22): count_up_to(5)\n\
    #1 /tmp/tmpy6xeo20o.php(26): candidate(5)\n#2 /tmp/tmpy6xeo20o.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy6xeo20o.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $count = 1;\n  $primes = [];\n  $i = 2;\n  $prime = true;\n  while ($count\
    \ < $n) {\n    for ($j = 2; $j < $i; $j++) {\n      if ($i % $j == 0) {\n    \
    \    $prime = false;\n      }\n    }\n    if ($prime) {\n      $primes[] = $i;\n\
    \      $count++;\n    }\n    $prime = true;\n    $i++;\n  }\n  return $primes;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37_lrcew.php:36\n\
    Stack trace:\n#0 /tmp/tmp37_lrcew.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp37_lrcew.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // YOUR CODE HERE\n  $prime = [];\n  if($n == 0)\n    return $prime;\n\
    \  for($i = 2; $i < $n; $i++){\n    if(is_prime($i))\n      array_push($prime,\
    \ $i);\n  }\n  return $prime;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8u0y3rmp.php:17\nStack trace:\n#0 /tmp/tmp8u0y3rmp.php(23): count_up_to(5)\n\
    #1 /tmp/tmp8u0y3rmp.php(27): candidate(5)\n#2 /tmp/tmp8u0y3rmp.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8u0y3rmp.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if($n > 1) {\n        for($i = 2; $i < $n; $i++) {\n\
    \            if(is_prime($i)) {\n                $primes[] = $i;\n           \
    \ }\n        }\n    }\n    return $primes;\n}\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpfsw_1cnv.php:15\nStack trace:\n#0 /tmp/tmpfsw_1cnv.php(23): count_up_to(5)\n\
    #1 /tmp/tmpfsw_1cnv.php(27): candidate(5)\n#2 /tmp/tmpfsw_1cnv.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfsw_1cnv.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $arr = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4gs7vrc6.php:14\nStack trace:\n#0 /tmp/tmp4gs7vrc6.php(22): count_up_to(5)\n\
    #1 /tmp/tmp4gs7vrc6.php(26): candidate(5)\n#2 /tmp/tmp4gs7vrc6.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4gs7vrc6.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$count_up_to = [];\n\tif ($n == 0) {\n\t\treturn $count_up_to;\n\t}\n\t\
    $number = 2;\n\twhile($number < $n) {\n\t\t$is_prime = true;\n\t\tfor ($i = 2;\
    \ $i < $number; $i++) {\n\t\t\tif ($number % $i == 0) {\n\t\t\t\t$is_prime = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_prime) {\n\t\t\t$count_up_to[] = $number;\n\
    \t\t}\n\t\t$number += 1;\n\t}\n\treturn $count_up_to;\n}\n\n$list_of_primes =\
    \ count_up_to(19);\nvar_dump($list_of_primes);\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(7) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n \
    \ [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n\
    }\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$array = [];\n\tif($n > 1){\n\t\tfor($i = 2; $i < $n; $i++){\n\t\t\tif(is_prime($i)){\n\
    \t\t\t\tarray_push($array, $i);\n\t\t\t}\n\t\t}\n\t}\n\treturn $array;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmps26jz1re.php:15\nStack trace:\n#0 /tmp/tmps26jz1re.php(23): count_up_to(5)\n\
    #1 /tmp/tmps26jz1re.php(27): candidate(5)\n#2 /tmp/tmps26jz1re.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmps26jz1re.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primeArray = [];\n    for ($i = 2; $i < $n; $i++) {\n        $divider\
    \ = 2;\n        $prime = true;\n        while ($divider < $i) {\n            if\
    \ ($i % $divider == 0) {\n                $prime = false;\n                break;\n\
    \            }\n            $divider++;\n        }\n        if ($prime) {\n  \
    \          $primeArray[] = $i;\n        }\n    }\n    return $primeArray;\n}\n\
    echo '<pre>';\nvar_dump(count_up_to(5));\nvar_dump(count_up_to(11));\nvar_dump(count_up_to(0));\n\
    var_dump(count_up_to(20));\nvar_dump(count_up_to(1));\nvar_dump(count_up_to(18));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\narray(4) {\n\
    \  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n\
    }\narray(0) {\n}\narray(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n\
    \  int(17)\n  [7]=>\n  int(19)\n}\narray(0) {\n}\narray(7) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n\
    \  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $arr = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i)) $arr[]\
    \ = $i;\n  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcurhzc28.php:14\nStack trace:\n#0 /tmp/tmpcurhzc28.php(20): count_up_to(5)\n\
    #1 /tmp/tmpcurhzc28.php(24): candidate(5)\n#2 /tmp/tmpcurhzc28.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcurhzc28.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    $notPrime = [];\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if (isset($notPrime[$i])) {\n            continue;\n        }\n     \
    \   $primes[] = $i;\n        for ($j = $i * 2; $j < $n; $j += $i) {\n        \
    \    $notPrime[$j] = 1;\n        }\n    }\n    return $primes;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // Write your code here:\n}\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmqqb0i1.php:19\n\
    Stack trace:\n#0 /tmp/tmpxmqqb0i1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxmqqb0i1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60kbahe5.php:20\n\
    Stack trace:\n#0 /tmp/tmp60kbahe5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp60kbahe5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // $primes = array();\n    // $is_prime = true;\n    // for ($i = 2;\
    \ $i < $n; $i++) {\n    //     for ($j = 2; $j < $i; $j++) {\n    //         if\
    \ ($i % $j == 0) {\n    //             $is_prime = false;\n    //            \
    \ break;\n    //         }\n    //     }\n    //     if ($is_prime) {\n    //\
    \         array_push($primes, $i);\n    //     }\n    //     $is_prime = true;\n\
    \    // }\n    // return $primes;\n    $primes = array();\n    for ($i = 2; $i\
    \ < $n; $i++) {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++)\
    \ {\n            if ($i % $j == 0) {\n                $is_prime = false;\n   \
    \             break;\n            }\n        }\n        if ($is_prime) {\n   \
    \         array_push($primes, $i);\n        }\n    }\n    return $primes;\n}\n\
    \necho var_dump(count_up_to(5));\necho \"<br>\";\necho var_dump(count_up_to(11));\n\
    echo \"<br>\";\necho var_dump(count_up_to(0));\necho \"<br>\";\necho var_dump(count_up_to(20));\n\
    echo \"<br>\";\necho var_dump(count_up_to(1));\necho \"<br>\";\necho var_dump(count_up_to(18));\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n<br>array(4) {\n \
    \ [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n}\n\
    <br>array(0) {\n}\n<br>array(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n\
    \  int(17)\n  [7]=>\n  int(19)\n}\n<br>array(0) {\n}\n<br>array(7) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n\
    \  int(11)\n  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5u3qf5ga.php:14\nStack trace:\n#0 /tmp/tmp5u3qf5ga.php(22): count_up_to(5)\n\
    #1 /tmp/tmp5u3qf5ga.php(26): candidate(5)\n#2 /tmp/tmp5u3qf5ga.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5u3qf5ga.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$result = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpav703mr0.php:14\nStack trace:\n#0 /tmp/tmpav703mr0.php(22): count_up_to(5)\n\
    #1 /tmp/tmpav703mr0.php(26): candidate(5)\n#2 /tmp/tmpav703mr0.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpav703mr0.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  if($n == 0) {\n    return $result;\n  }\n  $currentNumber\
    \ = 2;\n  while($currentNumber < $n) {\n    if(checkPrime($currentNumber)) {\n\
    \      $result[] = $currentNumber;\n    }\n    $currentNumber++;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function checkPrime()\
    \ in /tmp/tmp5bl3kvxk.php:18\nStack trace:\n#0 /tmp/tmp5bl3kvxk.php(27): count_up_to(5)\n\
    #1 /tmp/tmp5bl3kvxk.php(31): candidate(5)\n#2 /tmp/tmp5bl3kvxk.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5bl3kvxk.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $arr = [];\n  for ($i = 2; $i < $n; $i++) {\n    $isPrime = true;\n   \
    \ for ($j = 2; $j < $i; $j++) {\n      if ($i % $j == 0) {\n        $isPrime =\
    \ false;\n        break;\n      }\n    }\n    if ($isPrime) {\n      array_push($arr,\
    \ $i);\n    }\n  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime = function($n) use (&$prime) {\n        if ($n < 2) return false;\n\
    \        if ($n === 2) return true;\n        for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n            if ($n % $i === 0) return false;\n        }\n        return true;\n\
    \    };\n    if ($n <= 1) return [];\n    $result = [];\n    for ($i = 2; $i <\
    \ $n; $i++) {\n        if ($prime($i)) $result[] = $i;\n    }\n    return $result;\n\
    }\n\nprint_r(count_up_to(5));\nprint_r(count_up_to(11));\nprint_r(count_up_to(0));\n\
    print_r(count_up_to(20));\nprint_r(count_up_to(1));\nprint_r(count_up_to(18));\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n    [2] => 5\n    [3] => 7\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n \
    \   [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6]\
    \ => 17\n    [7] => 19\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n\
    \    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6] => 17\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n < 2) {\n\t\treturn [];\n\t}\n\n\t$primes = [];\n\tfor ($i = 2; $i\
    \ < $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\t\t$primes[] = $i;\n\t\t}\n\t}\n\n\
    \treturn $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz51aery4.php:18\nStack trace:\n#0 /tmp/tmpz51aery4.php(27): count_up_to(5)\n\
    #1 /tmp/tmpz51aery4.php(31): candidate(5)\n#2 /tmp/tmpz51aery4.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz51aery4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if ($n == 0) {\n        return $primes;\n    }\n \
    \   for ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j =\
    \ 2; $j < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime\
    \ = false;\n                break;\n            }\n        }\n        if ($isPrime)\
    \ {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n   // Your code here\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw20xxuw9.php:20\n\
    Stack trace:\n#0 /tmp/tmpw20xxuw9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw20xxuw9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $res = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $res[] = $i;\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp582epoal.php:14\nStack trace:\n#0 /tmp/tmp582epoal.php(22): count_up_to(5)\n\
    #1 /tmp/tmp582epoal.php(26): candidate(5)\n#2 /tmp/tmp582epoal.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp582epoal.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $prime_numbers = [];\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i))\
    \ {\n      $prime_numbers[] = $i;\n    }\n  }\n  return $prime_numbers;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpkkr5fmp_.php:14\nStack trace:\n#0 /tmp/tmpkkr5fmp_.php(22): count_up_to(5)\n\
    #1 /tmp/tmpkkr5fmp_.php(26): candidate(5)\n#2 /tmp/tmpkkr5fmp_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkkr5fmp_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) return [];\n    $primes = [2];\n    for ($i = 3; $i < $n;\
    \ $i += 2) {\n        $isPrime = true;\n        foreach ($primes as $prime) {\n\
    \            if ($i % $prime == 0) {\n                $isPrime = false;\n    \
    \            break;\n            }\n        }\n        if ($isPrime) {\n     \
    \       $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n$result =\
    \ count_up_to(5);\nassert($result === [2,3]);\n$result = count_up_to(11);\nassert($result\
    \ === [2,3,5,7]);\n$result = count_up_to(0);\nassert($result === []);\n$result\
    \ = count_up_to(20);\nassert($result === [2,3,5,7,11,13,17,19]);\n$result = count_up_to(1);\n\
    assert($result === []);\n$result = count_up_to(18);\nassert($result === [2,3,5,7,11,13,17]);\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n < 2) {\n    return [];\n  }\n  $returnArray = [];\n  for ($i = 2;\
    \ $i < $n; $i++) {\n    if (isPrime($i)) {\n      $returnArray[] = $i;\n    }\n\
    \  }\n  return $returnArray;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp1s992x7k.php:17\nStack trace:\n#0 /tmp/tmp1s992x7k.php(25): count_up_to(5)\n\
    #1 /tmp/tmp1s992x7k.php(29): candidate(5)\n#2 /tmp/tmp1s992x7k.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1s992x7k.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n < 2) {\n\t\treturn [];\n\t}\n\t$counter = 2;\n\t$arr = [];\n\twhile\
    \ ($counter < $n) {\n\t\tif (is_prime($counter)) {\n\t\t\t$arr[] = $counter;\n\
    \t\t}\n\t\t$counter++;\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphplfk4qc.php:18\nStack trace:\n#0 /tmp/tmphplfk4qc.php(27): count_up_to(5)\n\
    #1 /tmp/tmphplfk4qc.php(31): candidate(5)\n#2 /tmp/tmphplfk4qc.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmphplfk4qc.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// $factors = array();\n\t// for ($i = 1; $i <= $n; $i++) {\n\t// \t$factors[]\
    \ = $i;\n\t// }\n\t// return $factors;\n\t$factors = array();\n\tfor ($i = 2;\
    \ $i <= $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\t\t$factors[] = $i;\n\t\t}\n\t\
    }\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp24l1lsl_.php:19\nStack trace:\n#0 /tmp/tmp24l1lsl_.php(27): count_up_to(5)\n\
    #1 /tmp/tmp24l1lsl_.php(31): candidate(5)\n#2 /tmp/tmp24l1lsl_.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp24l1lsl_.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primos = [];\n  for ($i=1; $i < $n; $i++) {\n    if ($i == 1) {\n    \
    \  $primos[] = $i;\n    } else {\n      $primo = true;\n      for ($j=2; $j <\
    \ $i; $j++) {\n        if ($i % $j == 0) {\n          $primo = false;\n      \
    \  }\n      }\n      if ($primo) {\n        $primos[] = $i;\n      }\n    }\n\
    \  }\n  return $primos;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp654w7enp.php:35\n\
    Stack trace:\n#0 /tmp/tmp654w7enp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp654w7enp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n === 0) {\n        return [];\n    }\n    if ($n === 1) {\n   \
    \     return [];\n    }\n    $output = [];\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if (is_prime($i)) {\n            $output[] = $i;\n        }\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpm4gh5p88.php:20\nStack trace:\n#0 /tmp/tmpm4gh5p88.php(28): count_up_to(5)\n\
    #1 /tmp/tmpm4gh5p88.php(32): candidate(5)\n#2 /tmp/tmpm4gh5p88.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm4gh5p88.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n\n    $primeNumbers = [];\n\
    \    $number = 2;\n    while ($number < $n) {\n        if (isPrime($number)) {\n\
    \            $primeNumbers[] = $number;\n        }\n        $number++;\n    }\n\
    \n    return $primeNumbers;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpn1qahsr3.php:19\nStack trace:\n#0 /tmp/tmpn1qahsr3.php(29): count_up_to(5)\n\
    #1 /tmp/tmpn1qahsr3.php(33): candidate(5)\n#2 /tmp/tmpn1qahsr3.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn1qahsr3.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    if ($n >= 2) {\n        for ($i = 2; $i < $n; $i++)\
    \ {\n            $flag = true;\n            for ($j = 2; $j < $i; $j++) {\n  \
    \              if ($i % $j == 0) {\n                    $flag = false;\n     \
    \               break;\n                }\n            }\n            if ($flag)\
    \ {\n                $result[] = $i;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $array = [];\n    if($n < 2) {\n        return $array;\n    }\n    for($i\
    \ = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for($j = 2; $j < $i;\
    \ $j++) {\n            if($i % $j == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n        if($isPrime) {\n  \
    \          array_push($array, $i);\n        }\n    }\n    return $array;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n <= 1) {\n    return [];\n  }\n  $primes = [];\n  $numbers = range(2,\
    \ $n - 1);\n  foreach ($numbers as $number) {\n    $isPrime = true;\n    foreach\
    \ ($numbers as $divisor) {\n      if ($number != $divisor && $number % $divisor\
    \ == 0) {\n        $isPrime = false;\n        break;\n      }\n    }\n    if ($isPrime)\
    \ {\n      $primes[] = $number;\n    }\n  }\n  return $primes;\n}\necho \"\\nTesting\
    \ count_up_to(5):\\n\";\nvar_dump(count_up_to(5));\necho \"\\nTesting count_up_to(11):\\\
    n\";\nvar_dump(count_up_to(11));\necho \"\\nTesting count_up_to(0):\\n\";\nvar_dump(count_up_to(0));\n\
    echo \"\\nTesting count_up_to(20):\\n\";\nvar_dump(count_up_to(20));\necho \"\\\
    nTesting count_up_to(1):\\n\";\nvar_dump(count_up_to(1));\necho \"\\nTesting count_up_to(18):\\\
    n\";\nvar_dump(count_up_to(18));\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nTesting count_up_to(5):\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    }\n\nTesting count_up_to(11):\narray(4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n}\n\nTesting count_up_to(0):\narray(0)\
    \ {\n}\n\nTesting count_up_to(20):\narray(8) {\n  [0]=>\n  int(2)\n  [1]=>\n \
    \ int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n\
    \  int(13)\n  [6]=>\n  int(17)\n  [7]=>\n  int(19)\n}\n\nTesting count_up_to(1):\n\
    array(0) {\n}\n\nTesting count_up_to(18):\narray(7) {\n  [0]=>\n  int(2)\n  [1]=>\n\
    \  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n\
    \  int(13)\n  [6]=>\n  int(17)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = array();\n  for ($x = 2; $x < $n; $x++) {\n    if (is_prime($x))\
    \ {\n      array_push($primes, $x);\n    }\n  }\n  return $primes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5amwvi70.php:14\nStack trace:\n#0 /tmp/tmp5amwvi70.php(22): count_up_to(5)\n\
    #1 /tmp/tmp5amwvi70.php(26): candidate(5)\n#2 /tmp/tmp5amwvi70.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5amwvi70.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // TODO\n  $arr = [];\n  if($n == 0){\n    return $arr;\n  }\n  if($n ==\
    \ 1){\n    return $arr;\n  }\n  for($i = 2; $i < $n; $i++){\n    if(is_prime($i)){\n\
    \      array_push($arr, $i);\n    }\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0ghaeute.php:21\nStack trace:\n#0 /tmp/tmp0ghaeute.php(29): count_up_to(5)\n\
    #1 /tmp/tmp0ghaeute.php(33): candidate(5)\n#2 /tmp/tmp0ghaeute.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0ghaeute.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    for ($i = 2; $i < $n; $i++) {\n        $isPrime =\
    \ true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j == 0)\
    \ {\n                $isPrime = false;\n                break;\n            }\n\
    \        }\n        if ($isPrime) {\n            $primes[] = $i;\n        }\n\
    \    }\n    return $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n < 2) {\n\t\treturn [];\n\t}\n\t$primes = [];\n\t$candidate = 2;\n\
    \twhile ($candidate < $n) {\n\t\t$prime = true;\n\t\tforeach ($primes as $primeNumber)\
    \ {\n\t\t\tif ($candidate % $primeNumber == 0) {\n\t\t\t\t$prime = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($prime) {\n\t\t\t$primes[] = $candidate;\n\
    \t\t}\n\t\t$candidate += 1;\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    if ($n > 0) {\n        for ($i = 2; $i < $n; $i++)\
    \ {\n            if (is_prime($i)) {\n                $result[] = $i;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz7mi2k22.php:15\nStack trace:\n#0 /tmp/tmpz7mi2k22.php(24): count_up_to(5)\n\
    #1 /tmp/tmpz7mi2k22.php(28): candidate(5)\n#2 /tmp/tmpz7mi2k22.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz7mi2k22.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if($n === 1){\n    return [];\n  }\n  $numbers = range(2, $n);\n  $primes\
    \ = [];\n  foreach($numbers as $number){\n    for($i = 2; $i <= $number; $i++){\n\
    \      if($number % $i === 0 && $number !== $i){\n        break;\n      } elseif($number\
    \ === $i){\n        $primes[] = $number;\n      }\n    }\n  }\n  return $primes;\n\
    }\n\necho 'count_up_to(5):';\necho \"\\n\";\nvar_dump(count_up_to(5));\necho \"\
    \\n\";\necho 'count_up_to(11):';\necho \"\\n\";\nvar_dump(count_up_to(11));\n\
    echo \"\\n\";\necho 'count_up_to(0):';\necho \"\\n\";\nvar_dump(count_up_to(0));\n\
    echo \"\\n\";\necho 'count_up_to(20):';\necho \"\\n\";\nvar_dump(count_up_to(20));\n\
    echo \"\\n\";\necho 'count_up_to(1):';\necho \"\\n\";\nvar_dump(count_up_to(1));\n\
    echo \"\\n\";\necho 'count_up_to(18):';\necho \"\\n\";\nvar_dump(count_up_to(18));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "count_up_to(5):\narray(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n  [2]=>\n\
    \  int(5)\n}\n\ncount_up_to(11):\narray(5) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n}\n\ncount_up_to(0):\n\
    array(1) {\n  [0]=>\n  int(2)\n}\n\ncount_up_to(20):\narray(8) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(3)\n  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n\
    \  [5]=>\n  int(13)\n  [6]=>\n  int(17)\n  [7]=>\n  int(19)\n}\n\ncount_up_to(1):\n\
    array(0) {\n}\n\ncount_up_to(18):\narray(7) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n\
    \  [2]=>\n  int(5)\n  [3]=>\n  int(7)\n  [4]=>\n  int(11)\n  [5]=>\n  int(13)\n\
    \  [6]=>\n  int(17)\n}\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn74s_gh3.php:58\n\
    Stack trace:\n#0 /tmp/tmpn74s_gh3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpn74s_gh3.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // return an array of the first $n integers that are prime numbers\n\
    \    $output = [];\n    $count = 2;\n    while (count($output) < $n) {\n     \
    \   $isPrime = true;\n        for ($i = 2; $i < $count; $i++) {\n            if\
    \ ($count % $i == 0) {\n                $isPrime = false;\n            }\n   \
    \     }\n        if ($isPrime) {\n            $output[] = $count;\n        }\n\
    \        $count++;\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi5_8hr_.php:34\n\
    Stack trace:\n#0 /tmp/tmpxi5_8hr_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxi5_8hr_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n === 0) {\n    return [];\n  }\n  $primes = [];\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    if (is_prime($i)) {\n      $primes[] = $i;\n    }\n  }\n\
    \  return $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuzwkban7.php:17\nStack trace:\n#0 /tmp/tmpuzwkban7.php(25): count_up_to(5)\n\
    #1 /tmp/tmpuzwkban7.php(29): candidate(5)\n#2 /tmp/tmpuzwkban7.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuzwkban7.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n// Make an array of non-negative integers less than n, starting at 2 and\
    \ going up to n-1.\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkr8corqe.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $arr = [];\n  if($n <= 1) {\n    return $arr;\n  }\n  else {\n    $int\
    \ = 2;\n    while($int < $n) {\n      if(is_prime($int)) {\n        array_push($arr,\
    \ $int);\n      }\n      $int++;\n    }\n    return $arr;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprrdyifkd.php:19\nStack trace:\n#0 /tmp/tmprrdyifkd.php(29): count_up_to(5)\n\
    #1 /tmp/tmprrdyifkd.php(33): candidate(5)\n#2 /tmp/tmprrdyifkd.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmprrdyifkd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $return_array = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $return_array[] = $i;\n        }\n    }\n    return $return_array;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsp7vgug5.php:14\nStack trace:\n#0 /tmp/tmpsp7vgug5.php(22): count_up_to(5)\n\
    #1 /tmp/tmpsp7vgug5.php(26): candidate(5)\n#2 /tmp/tmpsp7vgug5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsp7vgug5.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $result = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        if (check_prime($i)) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_prime()\
    \ in /tmp/tmpaa2nyojl.php:17\nStack trace:\n#0 /tmp/tmpaa2nyojl.php(24): count_up_to(5)\n\
    #1 /tmp/tmpaa2nyojl.php(28): candidate(5)\n#2 /tmp/tmpaa2nyojl.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaa2nyojl.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $firstNPrimeNumbers = [];\n  if ($n < 2) {\n    return $firstNPrimeNumbers;\n\
    \  }\n  for ($i = 2; $i < $n; $i++) {\n    if (isPrime($i)) {\n      $firstNPrimeNumbers[]\
    \ = $i;\n    }\n  }\n  return $firstNPrimeNumbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpscb79wss.php:17\nStack trace:\n#0 /tmp/tmpscb79wss.php(25): count_up_to(5)\n\
    #1 /tmp/tmpscb79wss.php(29): candidate(5)\n#2 /tmp/tmpscb79wss.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpscb79wss.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  for ($i = 2; $i < $n; $i++) {\n    $result[] = is_prime($i)\
    \ ? $i : null;\n  }\n  return array_filter($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqiostg1_.php:14\nStack trace:\n#0 /tmp/tmpqiostg1_.php(20): count_up_to(5)\n\
    #1 /tmp/tmpqiostg1_.php(24): candidate(5)\n#2 /tmp/tmpqiostg1_.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqiostg1_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    // YOUR CODE HERE\n    $output = [];\n    $i = 2;\n    while ($i < $n)\
    \ {\n      if ($i == 2) {\n        array_push($output, $i);\n      } else {\n\
    \        if (checkPrime($i)) {\n          array_push($output, $i);\n        }\n\
    \      }\n      $i++;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function checkPrime()\
    \ in /tmp/tmpayg7argg.php:19\nStack trace:\n#0 /tmp/tmpayg7argg.php(29): count_up_to(5)\n\
    #1 /tmp/tmpayg7argg.php(33): candidate(5)\n#2 /tmp/tmpayg7argg.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpayg7argg.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $array = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            array_push($array, $i);\n        }\n    }\n    return $array;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzauo8srs.php:14\nStack trace:\n#0 /tmp/tmpzauo8srs.php(21): count_up_to(5)\n\
    #1 /tmp/tmpzauo8srs.php(25): candidate(5)\n#2 /tmp/tmpzauo8srs.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzauo8srs.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\tif ($n <= 1) {\n\t\treturn [];\n\t}\n\t$count = [];\n\tfor ($i = 2; $i\
    \ < $n; $i++) {\n\t\tif ($i == 2) {\n\t\t\t$count[] = $i;\n\t\t} else {\n\t\t\t\
    $isPrime = true;\n\t\t\tforeach ($count as $j) {\n\t\t\t\tif ($i % $j == 0) {\n\
    \t\t\t\t\t$isPrime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($isPrime)\
    \ {\n\t\t\t\t$count[] = $i;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $output = [];\n  if ($n <= 1) {\n    return $output;\n  }\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    $output[] = $i;\n  }\n  $out = [];\n  foreach ($output\
    \ as $value) {\n    if (is_prime($value)) {\n      $out[] = $value;\n    }\n \
    \ }\n  return $out;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpitsz57jh.php:21\nStack trace:\n#0 /tmp/tmpitsz57jh.php(28): count_up_to(5)\n\
    #1 /tmp/tmpitsz57jh.php(32): candidate(5)\n#2 /tmp/tmpitsz57jh.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpitsz57jh.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $prime = [];\n  if ($n < 2) {\n    return $prime;\n  }\n  for ($i = 2;\
    \ $i < $n; $i++) {\n    $isPrime = true;\n    $stop = sqrt($i);\n    for ($j =\
    \ 2; $j <= $stop; $j++) {\n      if ($i % $j == 0) {\n        $isPrime = false;\n\
    \        break;\n      }\n    }\n    if ($isPrime) {\n      $prime[] = $i;\n \
    \   }\n  }\n  return $prime;\n}\n$arr = count_up_to(5);\nforeach ($arr as $a)\
    \ {\n  echo \"$a \";\n}\necho \"\\n\";\n$arr = count_up_to(11);\nforeach ($arr\
    \ as $a) {\n  echo \"$a \";\n}\necho \"\\n\";\n$arr = count_up_to(0);\nforeach\
    \ ($arr as $a) {\n  echo \"$a \";\n}\necho \"\\n\";\n$arr = count_up_to(20);\n\
    foreach ($arr as $a) {\n  echo \"$a \";\n}\necho \"\\n\";\n$arr = count_up_to(1);\n\
    foreach ($arr as $a) {\n  echo \"$a \";\n}\necho \"\\n\";\n$arr = count_up_to(18);\n\
    foreach ($arr as $a) {\n  echo \"$a \";\n}\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2 3 \n2 3 5 7 \n\n2 3 5 7 11 13 17 19 \n\n2 3 5 7 11 13 17 \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t// TODO\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw7668nd.php:20\n\
    Stack trace:\n#0 /tmp/tmpjw7668nd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjw7668nd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n < 2) {\n    return [];\n  }\n  $res = [];\n  for ($i = 2; $i < $n;\
    \ $i++) {\n    if (is_prime($i)) {\n      $res[] = $i;\n    }\n  }\n  return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpq00wu0ez.php:17\nStack trace:\n#0 /tmp/tmpq00wu0ez.php(25): count_up_to(5)\n\
    #1 /tmp/tmpq00wu0ez.php(29): candidate(5)\n#2 /tmp/tmpq00wu0ez.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq00wu0ez.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $array = [];\n  if (is_integer($n) && $n > 0) {\n    for ($i = 2; $i <\
    \ $n; $i++) {\n      if (is_prime($i)) {\n        array_push($array, $i);\n  \
    \    }\n    }\n  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n  \
    \  return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6jfy2w6g.php:15\nStack trace:\n#0 /tmp/tmp6jfy2w6g.php(24): count_up_to(5)\n\
    #1 /tmp/tmp6jfy2w6g.php(28): candidate(5)\n#2 /tmp/tmp6jfy2w6g.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6jfy2w6g.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n === 0) {\n    return [];\n  }\n  $num = 2;\n  $primes = [];\n  while\
    \ ($num < $n) {\n    if (is_prime($num)) {\n      $primes[] = $num;\n    }\n \
    \   $num++;\n  }\n  return $primes;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4seged9i.php:18\nStack trace:\n#0 /tmp/tmp4seged9i.php(27): count_up_to(5)\n\
    #1 /tmp/tmp4seged9i.php(31): candidate(5)\n#2 /tmp/tmp4seged9i.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4seged9i.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $arr = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp15cjmn9w.php:14\nStack trace:\n#0 /tmp/tmp15cjmn9w.php(22): count_up_to(5)\n\
    #1 /tmp/tmp15cjmn9w.php(26): candidate(5)\n#2 /tmp/tmp15cjmn9w.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp15cjmn9w.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = array();\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i))\
    \ {\n      array_push($primes, $i);\n    }\n  }\n  return $primes;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpozdqd_vo.php:14\nStack trace:\n#0 /tmp/tmpozdqd_vo.php(22): count_up_to(5)\n\
    #1 /tmp/tmpozdqd_vo.php(26): candidate(5)\n#2 /tmp/tmpozdqd_vo.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpozdqd_vo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // your code here\n  $results = [];\n  if($n <= 1) {\n    return $results;\n\
    \  }\n  if($n == 2) {\n    $results[] = 2;\n    return $results;\n  }\n  for($i\
    \ = 2; $i < $n; $i++) {\n    $isPrime = true;\n    for($j = 2; $j < $i; $j++)\
    \ {\n      if($i % $j == 0) {\n        $isPrime = false;\n        break;\n   \
    \   }\n    }\n    if($isPrime) {\n      $results[] = $i;\n    }\n  }\n  return\
    \ $results;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime = array();\n    $all_primes = array();\n    if($n > 1) {\n   \
    \     $all_primes[] = 2;\n    }\n    for($i = 3; $i < $n; $i++) {\n        for($j\
    \ = 2; $j < $i; $j++) {\n            if($i % $j == 0) {\n                $prime[]\
    \ = 0;\n            } else {\n                $prime[] = 1;\n            }\n \
    \       }\n        if(array_sum($prime) == $i - 2) {\n            $all_primes[]\
    \ = $i;\n        }\n        $prime = array();\n    }\n    return $all_primes;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $i = 1;\n    $count = 0;\n    $divisor_count = 0;\n    $primes = [];\n\
    \    while ($count < $n) {\n        $i++;\n        $divisor_count = 0;\n     \
    \   for ($j = 1; $j <= $i; $j++) {\n            if ($i % $j == 0) {\n        \
    \        $divisor_count++;\n            }\n        }\n        if ($divisor_count\
    \ == 2) {\n            $primes[] = $i;\n            $count++;\n        }\n   \
    \ }\n    return $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v6u13kc.php:37\n\
    Stack trace:\n#0 /tmp/tmp3v6u13kc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3v6u13kc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // fill this\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5sa8rl6.php:20\n\
    Stack trace:\n#0 /tmp/tmpf5sa8rl6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf5sa8rl6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $f = [];\n    for ($i = 2; $i < $n; $i++) {\n        $f[$i] = true;\n\
    \    }\n    for ($i = 2; $i < $n; $i++) {\n        if ($f[$i]) {\n           \
    \ for ($j = $i; $j < $n; $j += $i) {\n                $f[$j] = false;\n      \
    \      }\n        }\n    }\n    $arr = [];\n    for ($i = 2; $i < $n; $i++) {\n\
    \        if ($f[$i]) $arr[] = $i;\n    }\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p370lsm.php:34\n\
    Stack trace:\n#0 /tmp/tmp_p370lsm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_p370lsm.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdf0y8phb.php:14\nStack trace:\n#0 /tmp/tmpdf0y8phb.php(22): count_up_to(5)\n\
    #1 /tmp/tmpdf0y8phb.php(26): candidate(5)\n#2 /tmp/tmpdf0y8phb.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdf0y8phb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $result = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j = 2; $j\
    \ < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n        if ($isPrime) {\n \
    \           $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 2) {\n        return [];\n    }\n    $primeArray = [];\n   \
    \ for ($i = 2; $i < $n; $i++) {\n        if ($i == 2) {\n            $primeArray[]\
    \ = $i;\n        } else {\n            for ($j = $i - 1; $j > 1; $j--) {\n   \
    \             if ($i % $j == 0) {\n                    break;\n              \
    \  }\n                if ($j == 2) {\n                    $primeArray[] = $i;\n\
    \                }\n            }\n        }\n    }\n    return $primeArray;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uo9uqrv.php:19\n\
    Stack trace:\n#0 /tmp/tmp8uo9uqrv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8uo9uqrv.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp931w50uo.php:14\nStack trace:\n#0 /tmp/tmp931w50uo.php(22): count_up_to(5)\n\
    #1 /tmp/tmp931w50uo.php(26): candidate(5)\n#2 /tmp/tmp931w50uo.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp931w50uo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = [];\n  for ($i = 2; $i < $n; $i++) {\n    if ($i % 2 != 0) {\n\
    \      $primes[] = $i;\n    }\n  }\n  return $primes;\n}\necho \"count_up_to(5):\\\
    n\";\nvar_dump(count_up_to(5));\necho \"count_up_to(11):\\n\";\nvar_dump(count_up_to(11));\n\
    echo \"count_up_to(0):\\n\";\nvar_dump(count_up_to(0));\necho \"count_up_to(20):\\\
    n\";\nvar_dump(count_up_to(20));\necho \"count_up_to(1):\\n\";\nvar_dump(count_up_to(1));\n\
    echo \"count_up_to(18):\\n\";\nvar_dump(count_up_to(18));\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "count_up_to(5):\narray(1) {\n  [0]=>\n  int(3)\n}\ncount_up_to(11):\narray(4)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n  [3]=>\n  int(9)\n\
    }\ncount_up_to(0):\narray(0) {\n}\ncount_up_to(20):\narray(9) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n  [3]=>\n  int(9)\n  [4]=>\n  int(11)\n\
    \  [5]=>\n  int(13)\n  [6]=>\n  int(15)\n  [7]=>\n  int(17)\n  [8]=>\n  int(19)\n\
    }\ncount_up_to(1):\narray(0) {\n}\ncount_up_to(18):\narray(8) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n  [3]=>\n  int(9)\n  [4]=>\n  int(11)\n\
    \  [5]=>\n  int(13)\n  [6]=>\n  int(15)\n  [7]=>\n  int(17)\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbkaw03x_.php:37\nStack trace:\n\
    #0 /tmp/tmpbkaw03x_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbkaw03x_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  $counter = 2;\n  while($counter <= $n) {\n    if(is_prime($counter))\
    \ {\n      $result[] = $counter;\n    }\n    $counter += 1;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpbstoqu3o.php:15\nStack trace:\n#0 /tmp/tmpbstoqu3o.php(23): count_up_to(5)\n\
    #1 /tmp/tmpbstoqu3o.php(27): candidate(5)\n#2 /tmp/tmpbstoqu3o.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbstoqu3o.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  if ($n < 2) {\n    return $result;\n  }\n  for ($i = 2;\
    \ $i < $n; $i++) {\n    $isPrime = true;\n    for ($j = 2; $j < $i; $j++) {\n\
    \      if ($i % $j == 0) {\n        $isPrime = false;\n        break;\n      }\n\
    \    }\n    if ($isPrime) {\n      $result[] = $i;\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if($n < 2) return [];\n    $primes = [2];\n    $x = 3;\n    while($x\
    \ < $n) {\n        if(is_prime($x)) $primes[] = $x;\n        $x += 2;\n    }\n\
    \    return $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpo83x7aat.php:16\nStack trace:\n#0 /tmp/tmpo83x7aat.php(23): count_up_to(5)\n\
    #1 /tmp/tmpo83x7aat.php(27): candidate(5)\n#2 /tmp/tmpo83x7aat.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo83x7aat.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = [];\n  if ($n <= 1) {\n    return $primes;\n  }\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if (is_prime($i)) {\n      $primes[] = $i;\n    }\n\
    \  }\n  return $primes;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp9qy_kmd.php:17\nStack trace:\n#0 /tmp/tmpp9qy_kmd.php(25): count_up_to(5)\n\
    #1 /tmp/tmpp9qy_kmd.php(29): candidate(5)\n#2 /tmp/tmpp9qy_kmd.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp9qy_kmd.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = array();\n  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i))\
    \ $primes[] = $i;\n  }\n  return $primes;\n}\n\nfunction candidate(...$args) {\n\
    \    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp418uuou_.php:14\nStack trace:\n#0 /tmp/tmp418uuou_.php(20): count_up_to(5)\n\
    #1 /tmp/tmp418uuou_.php(24): candidate(5)\n#2 /tmp/tmp418uuou_.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp418uuou_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = [];\n\tif ($n <= 1) {\n\t\treturn $primes;\n\t}\n\tfor ($i =\
    \ 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\t\t\t$primes[] = $i;\n\t\t}\n\
    \t}\n\treturn $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpldo6e6lw.php:17\nStack trace:\n#0 /tmp/tmpldo6e6lw.php(24): count_up_to(5)\n\
    #1 /tmp/tmpldo6e6lw.php(28): candidate(5)\n#2 /tmp/tmpldo6e6lw.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpldo6e6lw.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if($n <= 0) {\n    return [];\n  }\n  if($n <= 1) {\n    return [];\n \
    \ }\n  if($n == 2) {\n    return [2];\n  }\n  $toReturn = [2];\n  for($i = 3;\
    \ $i < $n; $i++) {\n    $isPrime = true;\n    for($j = 2; $j < $i; $j++) {\n \
    \     if($i % $j == 0) {\n        $isPrime = false;\n        break;\n      }\n\
    \    }\n    if($isPrime) {\n      $toReturn[] = $i;\n    }\n  }\n  return $toReturn;\n\
    }\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if ($n < 2) {\n        return $primes;\n    }\n  \
    \  // The strategy of the algorithm is to perform the modulo operation between\
    \ $n and all of the\n    // prime numbers that were previously discovered. If\
    \ the result of modulo is zero, then $n\n    // is not a prime number.\n    //\
    \ So, we iterate through all numbers between 2 and $n, and if it is not divisible\
    \ by any\n    // other prime number, then we add it to our list of prime numbers.\n\
    \    for ($i = 2; $i < $n; $i++) {\n        $is_prime = true;\n        foreach\
    \ ($primes as $prime) {\n            if ($i % $prime == 0) {\n               \
    \ $is_prime = false;\n                break;\n            }\n        }\n     \
    \   if ($is_prime) {\n            $primes[] = $i;\n        }\n    }\n    return\
    \ $primes;\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n<2) {\n    return [];\n  }\n  $array = [2];\n  for ($i=3; $i<$n;\
    \ $i+=2) {\n    $break = false;\n    foreach ($array as $element) {\n      if\
    \ ($i%$element == 0) {\n        $break = true;\n        break;\n      }\n    }\n\
    \    if (!$break) {\n      $array[] = $i;\n    }\n  }\n  return $array;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n == 0) {\n        return [];\n    }\n    if ($n == 1) {\n     \
    \   return [];\n    }\n    if ($n == 2) {\n        return [2];\n    }\n    if\
    \ ($n == 3) {\n        return [2,3];\n    }\n    $output = [2,3];\n    for ($i\
    \ = 4; $i < $n; $i++) {\n        $prime = true;\n        for ($j = 2; $j < $i;\
    \ $j++) {\n            if ($i % $j == 0) {\n                $prime = false;\n\
    \            }\n        }\n        if ($prime) {\n            $output[] = $i;\n\
    \        }\n    }\n    return $output;\n}\nfunction candidate(...$args) {\n  \
    \  return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    $prime = function($n) use (&$prime) {\n        if\
    \ ($n == 1) {\n            return false;\n        }\n        $s = sqrt($n);\n\
    \        for ($i = 2; $i <= $s; $i++) {\n            if ($n % $i == 0) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    \    };\n    for ($i = 2; $i < $n; $i++) {\n        if ($prime($i)) {\n      \
    \      $result[] = $i;\n        }\n    }\n    return $result;\n}\n$arr = count_up_to(20);\n\
    print_r($arr);\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4]\
    \ => 11\n    [5] => 13\n    [6] => 17\n    [7] => 19\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t\n}\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84khbom8.php:19\n\
    Stack trace:\n#0 /tmp/tmp84khbom8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp84khbom8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $result = [];\n  if ($n === 0) {\n    return $result;\n  }\n  for ($i =\
    \ 2; $i < $n; $i++) {\n    if (prime($i)) {\n      $result[] = $i;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime() in /tmp/tmp7upba4bl.php:17\n\
    Stack trace:\n#0 /tmp/tmp7upba4bl.php(25): count_up_to(5)\n#1 /tmp/tmp7upba4bl.php(29):\
    \ candidate(5)\n#2 /tmp/tmp7upba4bl.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp7upba4bl.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // Implement your solution here\n  $result = [];\n  if ($n == 0) {\n  \
    \  return $result;\n  }\n  for ($i = 2; $i < $n; $i++) {\n    if ($i == 2) {\n\
    \      array_push($result, $i);\n    } else {\n      $prime = 1;\n      for ($j\
    \ = 2; $j < $i; $j++) {\n        if ($i % $j == 0) {\n          $prime = 0;\n\
    \          break;\n        }\n      }\n      if ($prime == 1) {\n        array_push($result,\
    \ $i);\n      }\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    if ($n > 1) {\n        $primes[] = 2;\n        $is_prime\
    \ = false;\n        for ($i = 3; $i < $n; $i++) {\n            $is_prime = true;\n\
    \            for ($j = 2; $j < $i; $j++) {\n                if ($i % $j == 0)\
    \ {\n                    $is_prime = false;\n                    break;\n    \
    \            }\n            }\n            if ($is_prime) {\n                $primes[]\
    \ = $i;\n            }\n        }\n    }\n    return $primes;\n}\n\nprint_r(count_up_to(0));\n\
    print_r(count_up_to(5));\nprint_r(count_up_to(20));\nprint_r(count_up_to(1));\n\
    print_r(count_up_to(18));\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n\
    \    [6] => 17\n    [7] => 19\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6] => 17\n\
    )\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $array = [];\n    if ($n == 0 || $n == 1) {\n        return $array;\n\
    \    }\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n     \
    \       array_push($array, $i);\n        }\n    }\n    return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp2_lz1bp2.php:17\nStack trace:\n#0 /tmp/tmp2_lz1bp2.php(24): count_up_to(5)\n\
    #1 /tmp/tmp2_lz1bp2.php(28): candidate(5)\n#2 /tmp/tmp2_lz1bp2.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2_lz1bp2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $res = [];\n  $count = 2;\n  while ($count < $n) {\n    if (is_prime($count))\
    \ {\n      $res[] = $count;\n    }\n    $count++;\n  }\n  return $res;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpvyg6vfzx.php:15\nStack trace:\n#0 /tmp/tmpvyg6vfzx.php(24): count_up_to(5)\n\
    #1 /tmp/tmpvyg6vfzx.php(28): candidate(5)\n#2 /tmp/tmpvyg6vfzx.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvyg6vfzx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  $primes = [];\n  $factor = 2;\n  for ($i = 1; $i < $n; $i++) {\n    if\
    \ ($i % $factor === 0) {\n      $primes[] = $i;\n      $factor++;\n    }\n  }\n\
    \  return $primes;\n}\necho implode(\",\", count_up_to(5));\necho implode(\",\"\
    , count_up_to(11));\necho implode(\",\", count_up_to(0));\necho implode(\",\"\
    , count_up_to(20));\necho implode(\",\", count_up_to(1));\necho implode(\",\"\
    , count_up_to(18));\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2,3,42,3,4,5,6,7,8,9,102,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,192,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpskhdg2rj.php:33\nStack\
    \ trace:\n#0 /tmp/tmpskhdg2rj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpskhdg2rj.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  if ($n == 0) {\n    return [];\n  }\n  if ($n == 1) {\n    return [];\n\
    \  }\n  if ($n == 2) {\n    return [2];\n  }\n  $result_arr = [2];\n  for ($i\
    \ = 3; $i < $n; $i++) {\n    if (is_prime($i)) {\n      $result_arr[] = $i;\n\
    \    }\n  }\n  return $result_arr;\n}\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpddaatmvn.php:23\nStack trace:\n#0 /tmp/tmpddaatmvn.php(30): count_up_to(5)\n\
    #1 /tmp/tmpddaatmvn.php(34): candidate(5)\n#2 /tmp/tmpddaatmvn.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpddaatmvn.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    if ($n < 2) {\n        return $result;\n    }\n  \
    \  for ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j =\
    \ 2; $j < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime\
    \ = false;\n                break;\n            }\n        }\n        if ($isPrime)\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$result = [];\n\tif ($n > 1) {\n\t\tfor ($i = 2; $i < $n; $i++) {\n\t\t\
    \tif (is_prime($i)) {\n\t\t\t\t$result[] = $i;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6rom4avd.php:15\nStack trace:\n#0 /tmp/tmp6rom4avd.php(24): count_up_to(5)\n\
    #1 /tmp/tmp6rom4avd.php(28): candidate(5)\n#2 /tmp/tmp6rom4avd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6rom4avd.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // Validate input\n  if (!is_int($n) || $n < 0) {\n    return [];\n  }\n\
    \n  // Variables\n  $primes = [];\n  $count = 2;\n  $is_prime = true;\n\n  //\
    \ Loop to check every number up to n\n  while ($count < $n) {\n    // Loop to\
    \ check if a number is prime\n    for ($i = 2; $i < $count; $i++) {\n      if\
    \ ($count % $i == 0) {\n        $is_prime = false;\n        break;\n      }\n\
    \    }\n\n    // If is prime push to array\n    if ($is_prime) {\n      array_push($primes,\
    \ $count);\n    }\n\n    // Reset is_prime and increment count\n    $is_prime\
    \ = true;\n    $count++;\n  }\n\n  return $primes;\n}\n\nprint_r(count_up_to(5));\n\
    print_r(count_up_to(11));\nprint_r(count_up_to(0));\nprint_r(count_up_to(20));\n\
    print_r(count_up_to(1));\nprint_r(count_up_to(18));\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n    [2] => 5\n    [3] => 7\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n \
    \   [1] => 3\n    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6]\
    \ => 17\n    [7] => 19\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n\
    \    [2] => 5\n    [3] => 7\n    [4] => 11\n    [5] => 13\n    [6] => 17\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$primes = [];\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif (is_prime($i)) {\n\
    \t\t\t$primes[] = $i;\n\t\t}\n\t}\n\treturn $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpi8horev6.php:14\nStack trace:\n#0 /tmp/tmpi8horev6.php(22): count_up_to(5)\n\
    #1 /tmp/tmpi8horev6.php(26): candidate(5)\n#2 /tmp/tmpi8horev6.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi8horev6.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime_array = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            array_push($prime_array, $i);\n        }\n    }\n    return $prime_array;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpdqprqa64.php:14\nStack trace:\n#0 /tmp/tmpdqprqa64.php(22): count_up_to(5)\n\
    #1 /tmp/tmpdqprqa64.php(26): candidate(5)\n#2 /tmp/tmpdqprqa64.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdqprqa64.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n == 1) {\n        return [];\n    }\n    $arr = [];\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $arr[] = $i;\n\
    \        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpxibwltxc.php:17\nStack trace:\n#0 /tmp/tmpxibwltxc.php(25): count_up_to(5)\n\
    #1 /tmp/tmpxibwltxc.php(29): candidate(5)\n#2 /tmp/tmpxibwltxc.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxibwltxc.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n\t$arr = array();\n\tif ($n < 2) {\n\t\treturn $arr;\n\t}\n\tfor ($i = 2;\
    \ $i < $n; $i++) {\n\t\tif (check_prime($i)) {\n\t\t\tarray_push($arr, $i);\n\t\
    \t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_prime()\
    \ in /tmp/tmp_vy6kt7j.php:17\nStack trace:\n#0 /tmp/tmp_vy6kt7j.php(25): count_up_to(5)\n\
    #1 /tmp/tmp_vy6kt7j.php(29): candidate(5)\n#2 /tmp/tmp_vy6kt7j.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_vy6kt7j.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime_numbers = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $prime_numbers[] = $i;\n        }\n    }\n    return $prime_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpf2j8ezc3.php:14\nStack trace:\n#0 /tmp/tmpf2j8ezc3.php(22): count_up_to(5)\n\
    #1 /tmp/tmpf2j8ezc3.php(26): candidate(5)\n#2 /tmp/tmpf2j8ezc3.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf2j8ezc3.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = array();\n    for ($x = 1; $x < $n; $x++) {\n        $isPrime\
    \ = True;\n        for ($y = 2; $y < $x; $y++) {\n            if ($x % $y == 0)\
    \ {\n                $isPrime = False;\n                break;\n            }\n\
    \        }\n        if ($isPrime == True) {\n            array_push($primes, $x);\n\
    \        }\n    }\n    return $primes;\n}\n\nprint_r(count_up_to(5));\nprint_r(count_up_to(11));\n\
    print_r(count_up_to(0));\nprint_r(count_up_to(20));\nprint_r(count_up_to(1));\n\
    print_r(count_up_to(18));\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] => 7\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] =>\
    \ 7\n    [5] => 11\n    [6] => 13\n    [7] => 17\n    [8] => 19\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n    [4] =>\
    \ 7\n    [5] => 11\n    [6] => 13\n    [7] => 17\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy47_q9sb.php:39\nStack trace:\n#0 /tmp/tmpy47_q9sb.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy47_q9sb.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n  // TODO write the solution\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubop1e5b.php:20\n\
    Stack trace:\n#0 /tmp/tmpubop1e5b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpubop1e5b.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $prime = [];\n    if($n < 2) {\n        return $prime;\n    } else {\n\
    \        $prime[] = 2;\n        for($i = 3; $i < $n; $i++) {\n            if($i\
    \ % 2 != 0) {\n                $prime[] = $i;\n            }\n        }\n    \
    \    return $prime;\n    }\n}\n\nfunction candidate(...$args) {\n    return count_up_to(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2,\
    \ 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !==\
    \ array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5aufn7ro.php:34\n\
    Stack trace:\n#0 /tmp/tmp5aufn7ro.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5aufn7ro.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $result = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (prime($i))\
    \ {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime() in /tmp/tmpjyb002il.php:14\n\
    Stack trace:\n#0 /tmp/tmpjyb002il.php(22): count_up_to(5)\n#1 /tmp/tmpjyb002il.php(26):\
    \ candidate(5)\n#2 /tmp/tmpjyb002il.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpjyb002il.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    if ($n < 0) {\n        return \"n must be non-negative\";\n    }\n  \
    \  if ($n === 1) {\n        return [];\n    }\n    $primes = [];\n    for ($i\
    \ = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $primes[] =\
    \ $i;\n        }\n    }\n    return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10)\
    \ !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0)\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp4fggrp5.php:20\nStack trace:\n#0 /tmp/tmpp4fggrp5.php(28): count_up_to(5)\n\
    #1 /tmp/tmpp4fggrp5.php(32): candidate(5)\n#2 /tmp/tmpp4fggrp5.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp4fggrp5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Implement a function that takes an non-negative integer and\
    \ returns an array of the first n\n// integers that are prime numbers and less\
    \ than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) =>\
    \ [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
    // count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to($n)\
    \ {\n    $primes = [];\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i))\
    \ {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\nfunction\
    \ candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2,\
    \ 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47)\
    \ !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptv312nlf.php:14\nStack trace:\n#0 /tmp/tmptv312nlf.php(21): count_up_to(5)\n\
    #1 /tmp/tmptv312nlf.php(25): candidate(5)\n#2 /tmp/tmptv312nlf.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmptv312nlf.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
