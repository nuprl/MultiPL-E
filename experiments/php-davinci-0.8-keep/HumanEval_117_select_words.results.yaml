name: HumanEval_117_select_words
language: php
results:
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $result = [];\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $word) {\n    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels)) {\n     \
    \   $count++;\n      }\n    }\n    if ($count == $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n\necho json_encode(select_words(\"Mary had\
    \ a little lamb\", 4));\necho '<br>';\necho json_encode(select_words(\"Mary had\
    \ a little lamb\", 3));\necho '<br>';\necho json_encode(select_words(\"simple\
    \ white space\", 2));\necho '<br>';\necho json_encode(select_words(\"Hello world\"\
    , 4));\necho '<br>';\necho json_encode(select_words(\"Uncle sam\", 3));\necho\
    \ '<br>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"little\"]<br>[\"Mary\",\"lamb\"]<br>[]<br>[\"world\"]<br>[]<br>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp_xvgxsj_.php:50\nStack trace:\n\
    #0 /tmp/tmp_xvgxsj_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_xvgxsj_.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t// Your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmxxs8p8.php:22\n\
    Stack trace:\n#0 /tmp/tmphmxxs8p8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphmxxs8p8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = preg_replace('/[^a-z\\s]/', '', strtolower($s));\n\t$s = explode('\
    \ ', $s);\n\tforeach ($s as $key => $value) {\n\t\t$s[$key] = preg_replace('/[aeiou]/',\
    \ '', $value);\n\t\tif (strlen($s[$key]) != $n) unset($s[$key]);\n\t}\n\treturn\
    \ array_values($s);\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_4di_yv.php:27\n\
    Stack trace:\n#0 /tmp/tmpj_4di_yv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj_4di_yv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (countConsonants($word) === $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpgjoh1tis.php:17\nStack trace:\n#0 /tmp/tmpgjoh1tis.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpgjoh1tis.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpgjoh1tis.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpgjoh1tis.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $lower_s = strtolower($s);\n    $array_s = explode(\"\
    \ \", $lower_s);\n    $vowels = [\n        'a', 'e', 'i', 'o', 'u', 'y'\n    ];\n\
    \    for ($i = 0; $i < count($array_s); $i++) {\n        $cur_word = $array_s[$i];\n\
    \        $number_consonants = 0;\n        for ($j = 0; $j < strlen($cur_word);\
    \ $j++) {\n            if (!in_array($cur_word[$j], $vowels)) {\n            \
    \    $number_consonants++;\n            }\n        }\n        if ($number_consonants\
    \ == $n) {\n            array_push($result, $cur_word);\n        }\n    }\n  \
    \  return $result;\n}\n\n$s = \"Mary had a little lamb\";\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpp9_sns6u.php:44\nStack trace:\n#0 /tmp/tmpp9_sns6u.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp9_sns6u.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $subArr = [];\n  $subStr = \"\";\n  $nArr = [];\n  $a = str_split($s);\n\
    \  $array = count($a);\n  $result = array();\n  $splitted = explode(\" \", $s);\n\
    \  // $len = count($splitted);\n  foreach ($splitted as $substr) {\n    $substr\
    \ = str_split($substr);\n    // print_r($substr);\n    foreach ($substr as $subsubstr)\
    \ {\n      // print_r($subsubstr);\n      if ($subsubstr != \"a\" and $subsubstr\
    \ != \"e\" and $subsubstr != \"i\" and $subsubstr != \"o\" and $subsubstr != \"\
    u\") {\n        $subArr[] = $subsubstr;\n      }\n    }\n    // print_r($subArr);\n\
    \    $count = count($subArr);\n    // print_r($count);\n    if ($count == $n)\
    \ {\n      $nArr[] = implode(\"\", $subArr);\n    }\n    $subArr = [];\n  }\n\
    \  foreach ($nArr as $word) {\n    $result[] = $word;\n  }\n  print_r($result);\n\
    }\nselect_words(\"Mary had a little lamb\", 4);\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => lttl\n)\nArray\n(\n    [0] => lttl\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzfu_tifc.php:51\nStack trace:\n\
    #0 /tmp/tmpzfu_tifc.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpzfu_tifc.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = preg_split('/\\\
    s+/', $s);\n    $res = [];\n    for ($i = 0; $i < count($words); $i++) {\n   \
    \     $numConsonants = 0;\n        for ($j = 0; $j < strlen($words[$i]); $j++)\
    \ {\n            if (in_array($words[$i][$j], $consonants)) {\n              \
    \  $numConsonants++;\n            }\n        }\n        if ($numConsonants ==\
    \ $n) {\n            array_push($res, $words[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81wne5lp.php:37\n\
    Stack trace:\n#0 /tmp/tmp81wne5lp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp81wne5lp.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $numConsonants = [];\n    foreach ($words as $word) {\n        $numC = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $numC++;\n            }\n        }\n      \
    \  $numConsonants[] = $numC;\n    }\n    $result = [];\n    for ($i = 0; $i <\
    \ count($words); $i++) {\n        if ($numConsonants[$i] == $n) {\n          \
    \  $result[] = $words[$i];\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3f9d_51r.php:45\nStack trace:\n\
    #0 /tmp/tmp3f9d_51r.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3f9d_51r.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $arr = explode(' ',\
    \ $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $consonantCount\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount == $n) {\n            $res[] = $word;\n     \
    \   }\n    }\n    return $res;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpgq0ghte6.php:37\nStack trace:\n#0 /tmp/tmpgq0ghte6.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgq0ghte6.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n    $s =\
    \ explode(\" \", $s);\n    $result = [];\n    foreach ($s as $key => $value) {\n\
    \        $count = 0;\n        for ($i=0; $i < strlen($value); $i++) { \n     \
    \       if (!preg_match(\"/[aeiou]/i\", $value[$i])) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $value;\n        }\n    }\n    print_r($result);\n}\nselect_words(\"Mary had\
    \ a little lamb\", 4);\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => little\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp70rnnkwc.php:38\nStack trace:\n\
    #0 /tmp/tmp70rnnkwc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp70rnnkwc.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $s = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($s as $word) {\n        $letters = str_split($word);\n\
    \        $letter_count = 0;\n        foreach ($letters as $letter) {\n       \
    \     if (in_array($letter, $vowels)) {\n                $letter_count++;\n  \
    \          }\n        }\n        if ($letter_count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxk17gtu_.php:36\n\
    Stack trace:\n#0 /tmp/tmpxk17gtu_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxk17gtu_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(' ', $s);\n\t$result = [];\n\tforeach ($words as $word)\
    \ {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n)\n\t\t\t$result[]\
    \ = $word;\n\t}\n\treturn $result;\n}\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    simple white space\", 2));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Uncle\
    \ sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0]\
    \ => simple\n    [1] => white\n    [2] => space\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2jx4xa9.php:42\n\
    Stack trace:\n#0 /tmp/tmpg2jx4xa9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpg2jx4xa9.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = [];\n    if (strlen($s) == 0) {\n        return $arr;\n  \
    \  }\n    $wrd = \"\";\n    $cnt = 0;\n    $str = explode(\" \", $s);\n    for\
    \ ($i = 0; $i < count($str); $i++) {\n        $wrd = $str[$i];\n        $cons\
    \ = 0;\n        for ($j = 0; $j < strlen($wrd); $j++) {\n            $ch = $wrd[$j];\n\
    \            if (checkCon($ch)) {\n                $cons++;\n            }\n \
    \       }\n        if ($cons == $n) {\n            $arr[] = $wrd;\n        }\n\
    \    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function checkCon() in\
    \ /tmp/tmpkm6oqg36.php:26\nStack trace:\n#0 /tmp/tmpkm6oqg36.php(37): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpkm6oqg36.php(41): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpkm6oqg36.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpkm6oqg36.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $words = explode('\
    \ ', $s);\n    $result = array();\n    foreach ($words as $w) {\n        $c =\
    \ 0;\n        $l = strlen($w);\n        for ($i = 0; $i < $l; $i++) {\n      \
    \      if (!in_array($w[$i], $vowels)) {\n                $c++;\n            }\n\
    \        }\n        if ($c == $n) {\n            $result[] = $w;\n        }\n\
    \    }\n    return $result;\n}\necho json_encode(select_words(\"Mary had a little\
    \ lamb\", 4)) . \"\\n\";\necho json_encode(select_words(\"Mary had a little lamb\"\
    , 3)) . \"\\n\";\necho json_encode(select_words(\"simple white space\", 2)) .\
    \ \"\\n\";\necho json_encode(select_words(\"Hello world\", 4)) . \"\\n\";\necho\
    \ json_encode(select_words(\"Uncle sam\", 3)) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"little\"]\n[\"Mary\",\"lamb\"]\n[]\n[\"world\"]\n[]\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbfybdcw_.php:46\nStack trace:\n\
    #0 /tmp/tmpbfybdcw_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbfybdcw_.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $result = [];\n   \
    \ foreach (explode(\" \", $s) as $word) {\n        $cons_count = 0;\n        foreach\
    \ (str_split($word) as $char) {\n            if (strpos($consonants, strtolower($char))\
    \ !== false) {\n                $cons_count++;\n            }\n        }\n   \
    \     if ($cons_count == $n) {\n            $result[] = $word;\n        }\n  \
    \  }\n    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos(): Empty needle in /tmp/tmp62f890l6.php on line 19\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // add code here\n    $words = explode(\" \", $s);\n    $count_consonants\
    \ = function($word) {\n        $consonants = preg_replace(\"/[aeiou]/\", \"\"\
    , $word);\n        return strlen($consonants);\n    };\n    $filtered_words =\
    \ array_filter($words, function($word) use ($n, $count_consonants) {\n       \
    \ return $count_consonants($word) == $n;\n    });\n    return $filtered_words;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzcbuj8k.php:30\n\
    Stack trace:\n#0 /tmp/tmpjzcbuj8k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjzcbuj8k.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\"\
    \ \", $s);\n    $list = [];\n    for ($i = 0; $i < count($words); $i++) {\n  \
    \      $word = $words[$i];\n        $l = strlen($word);\n        $count = 0;\n\
    \        for ($j = 0; $j < $l; $j++) {\n            $c = $word[$j];\n        \
    \    if (strpos($consonants, $c) !== false) {\n                $count++;\n   \
    \         }\n        }\n        if ($count == $n) {\n            $list[] = $word;\n\
    \        }\n    }\n    return $list;\n}\n\n$tests = [\n    [\"Mary had a little\
    \ lamb\", 4, [\"little\"]],\n    [\"Mary had a little lamb\", 3, [\"Mary\", \"\
    lamb\"]],\n    [\"simple white space\", 2, []],\n    [\"Hello world\", 4, [\"\
    world\"]],\n    [\"Uncle sam\", 3, [\"Uncle\"]],\n];\n\nfor ($i = 0; $i < count($tests);\
    \ $i++) {\n    $test = $tests[$i];\n    $result = select_words($test[0], $test[1]);\n\
    \    if ($result === $test[2]) {\n        echo \"Test $i: PASSED\\n\";\n    }\
    \ else {\n        echo \"Test $i: FAILED\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 0: PASSED\nTest 1: FAILED\nTest 2: PASSED\nTest 3: PASSED\nTest 4:\
    \ PASSED\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp624cirrw.php:57\n\
    Stack trace:\n#0 /tmp/tmp624cirrw.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp624cirrw.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$arr = [];\n\tforeach ($s as $value) {\n\t\
    \tif (count_consonants($value) == $n) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\t\
    return $arr;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpxd699r_j.php:17\nStack trace:\n#0 /tmp/tmpxd699r_j.php(24): select_words(Array,\
    \ 4)\n#1 /tmp/tmpxd699r_j.php(28): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpxd699r_j.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxd699r_j.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    foreach ($words as $k => $v) {\n        $words[$k] = str_split($v);\n\
    \    }\n    foreach ($words as $k => $v) {\n        $counter = 0;\n        foreach\
    \ ($v as $v1) {\n            if (in_array($v1, $consonants)) {\n             \
    \   $counter++;\n            }\n        }\n        if ($counter !== $n) {\n  \
    \          unset($words[$k]);\n        }\n    }\n    return $words;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => Array\n        (\n            [0] => l\n         \
    \   [1] => i\n            [2] => t\n            [3] => t\n            [4] => l\n\
    \            [5] => e\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpddt1ewyv.php:38\nStack trace:\n#0 /tmp/tmpddt1ewyv.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpddt1ewyv.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = str_split($s);\n    $result = [];\n    $count = 0;\n    $temp\
    \ = \"\";\n    foreach ($s as $k => $value) {\n        if ($value != \" \") {\n\
    \            $temp .= $value;\n            if ($value == \"a\" || $value == \"\
    e\" || $value == \"i\" || $value == \"o\" || $value == \"u\") {\n            \
    \    $count = 0;\n            } else {\n                $count++;\n          \
    \  }\n        } else {\n            if ($count == $n) {\n                $result[]\
    \ = $temp;\n            }\n            $temp = \"\";\n            $count = 0;\n\
    \        }\n    }\n    if ($count == $n) {\n        $result[] = $temp;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_njyp5w1.php:44\n\
    Stack trace:\n#0 /tmp/tmp_njyp5w1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_njyp5w1.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $consonants =\
    \ [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n   \
    \ $nWords = [];\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array(strtolower($word[$i]), $consonants)) {\n       \
    \         $consonantCount++;\n            }\n        }\n        if ($consonantCount\
    \ == $n) {\n            array_push($nWords, $word);\n        }\n    }\n    return\
    \ $nWords;\n}\n$s = \"Mary had a little lamb\";\n$n = 4;\nvar_dump(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        $letters = str_split($word);\n        foreach ($letters as $letter) {\n\
    \            if (!in_array($letter, $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\n$s = \"Mary had a little\
    \ lamb\";\n$n = 4;\nprint_r(select_words($s, $n));\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5tcv_wb2.php:45\nStack trace:\n#0 /tmp/tmp5tcv_wb2.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5tcv_wb2.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if ($s == '') {\n        return [];\n    }\n    $list = [];\n   \
    \ $array_of_words = explode(' ', $s);\n    foreach ($array_of_words as $word)\
    \ {\n        $vowels = count_vowels($word);\n        $consonants = count_consonants($word);\n\
    \        if ($consonants == $n) {\n            $list[] = $word;\n        }\n \
    \   }\n    return $list;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_vowels()\
    \ in /tmp/tmpsm9rybqu.php:20\nStack trace:\n#0 /tmp/tmpsm9rybqu.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpsm9rybqu.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpsm9rybqu.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpsm9rybqu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$c = ['a', 'e', 'i', 'o', 'u'];\n\t$result = [];\n\t$words = explode('\
    \ ', $s);\n\tforeach ($words as $word) {\n\t\t$count = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($word); $i++) {\n\t\t\tif (!in_array($word[$i], $c)) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\
    \treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkfdry29.php:39\n\
    Stack trace:\n#0 /tmp/tmpzkfdry29.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzkfdry29.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $res = [];\n    if (empty($s)) return $res;\n    $s = str_replace(\"\
    \ \", \"_\", $s);\n    $words = explode(\"_\", $s);\n    foreach ($words as $word)\
    \ {\n        $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        $const =\
    \ str_split($word);\n        $count = 0;\n        foreach ($const as $value) {\n\
    \            if (!in_array($value, $vowels)) {\n                $count++;\n  \
    \          }\n        }\n        if ($count == $n) {\n            $res[] = $word;\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o0iddcy.php:43\n\
    Stack trace:\n#0 /tmp/tmp_o0iddcy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_o0iddcy.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$ret = [];\n\tforeach ($arr as $word)\
    \ {\n\t\t$consonants = str_split(preg_replace(\"/[aeiou]/\", \"\", $word));\n\t\
    \tif (count($consonants) == $n) {\n\t\t\t$ret[] = $word;\n\t\t}\n\t}\n\treturn\
    \ $ret;\n}\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 4));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptnxd5oiv.php:37\nStack trace:\n#0 /tmp/tmptnxd5oiv.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptnxd5oiv.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $strArr = explode(\" \", $s);\n    $answer = [];\n    foreach ($strArr\
    \ as $word) {\n        if (countConsonants($word) == $n) $answer[] = $word;\n\
    \    }\n    return $answer;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpwkejdq5f.php:17\nStack trace:\n#0 /tmp/tmpwkejdq5f.php(23): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpwkejdq5f.php(27): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpwkejdq5f.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpwkejdq5f.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $explodedS\
    \ = explode(' ', $s);\n    foreach ($explodedS as $word) {\n        $consonants\
    \ = 0;\n        $wordLength = strlen($word);\n        for ($i = 0; $i < $wordLength;\
    \ $i++) {\n            if (!in_array($word[$i], $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    simple white space\", 2));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Uncle\
    \ sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprxqzzjpy.php:55\nStack trace:\n#0 /tmp/tmprxqzzjpy.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmprxqzzjpy.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$arrayOfString = explode(\" \", $s);\n\t$result = [];\n\t$vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tfor ($i = 0; $i < count($arrayOfString);\
    \ $i++) {\n\t\t$countOfConsonants = 0;\n\t\tfor ($j = 0; $j < strlen($arrayOfString[$i]);\
    \ $j++) {\n\t\t\tif (!in_array($arrayOfString[$i][$j], $vowels)) {\n\t\t\t\t$countOfConsonants++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($countOfConsonants == $n) {\n\t\t\tarray_push($result,\
    \ $arrayOfString[$i]);\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5s8e89v2.php:40\n\
    Stack trace:\n#0 /tmp/tmp5s8e89v2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5s8e89v2.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n   $strArr = str_split($s);\n   $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \   $answer = [];\n   for ($i = 0; $i < count($strArr); $i++) {\n      $count\
    \ = 0;\n      if ($strArr[$i] == ' ') {\n         continue;\n      }\n      while\
    \ ($strArr[$i] != ' ') {\n         if (in_array($strArr[$i], $vowels)) {\n   \
    \         $i++;\n            continue;\n         }\n         if ($strArr[$i] ==\
    \ ' ') {\n            break;\n         }\n         $count++;\n         $i++;\n\
    \      }\n      if ($count == $n) {\n         array_push($answer, implode('',\
    \ $strArr));\n      }\n   }\n   return $answer;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $selectedWords = [];\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $words = explode(' ', $s);\n    foreach ($words as $word) {\n        $consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            array_push($selectedWords, $word);\n\
    \        }\n    }\n    return $selectedWords;\n}\n\necho implode(' ', select_words(\"\
    Mary had a little lamb\", 4)) . \"\\n\";\necho implode(' ', select_words(\"Mary\
    \ had a little lamb\", 3)) . \"\\n\";\necho implode(' ', select_words(\"simple\
    \ white space\", 2)) . \"\\n\";\necho implode(' ', select_words(\"Hello world\"\
    , 4)) . \"\\n\";\necho implode(' ', select_words(\"Uncle sam\", 3)) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary lamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppv4q2gj3.php:46\nStack trace:\n#0 /tmp/tmppv4q2gj3.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmppv4q2gj3.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$words = [];\n\tforeach ($s as $key => $word)\
    \ {\n\t\tif (consonants_count($word) == $n) {\n\t\t\t$words[] = $word;\n\t\t}\n\
    \t}\n\treturn $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmp6d497y55.php:17\nStack trace:\n#0 /tmp/tmp6d497y55.php(25): select_words(Array,\
    \ 4)\n#1 /tmp/tmp6d497y55.php(29): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp6d497y55.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6d497y55.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // ...\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0oymc74.php:21\n\
    Stack trace:\n#0 /tmp/tmpr0oymc74.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr0oymc74.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $s = str_split($s);\n  $words\
    \ = [];\n  $found_words = [];\n  $letter_counter = 0;\n  $word_counter = 0;\n\
    \  $word_length = 0;\n  foreach ($s as $letter) {\n    $letter_counter++;\n  \
    \  if (!ctype_alpha($letter)) {\n      if ($word_length > 0) {\n        $words[$word_counter]\
    \ = $word_length;\n        $word_counter++;\n        $word_length = 0;\n     \
    \ }\n    } else {\n      if (!in_array($letter, $vowels)) {\n        $word_length++;\n\
    \      }\n    }\n  }\n  if ($word_length > 0) {\n    $words[$word_counter] = $word_length;\n\
    \  }\n  $counter = 0;\n  foreach ($words as $word) {\n    if ($word == $n) {\n\
    \      $found_words[] = substr($s, $counter, $word);\n    }\n    $counter += $word;\n\
    \  }\n  print_r($found_words);\n}\nselect_words(\"Mary had a little lamb\", 4);\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: substr() expects parameter 1 to be string, array given in /tmp/tmpmkuvpzqt.php\
    \ on line 41\nArray\n(\n    [0] => \n)\n\nWarning: substr() expects parameter\
    \ 1 to be string, array given in /tmp/tmpmkuvpzqt.php on line 41\nArray\n(\n \
    \   [0] => \n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkuvpzqt.php:53\n\
    Stack trace:\n#0 /tmp/tmpmkuvpzqt.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpmkuvpzqt.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  // TODO\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0z7x_pu5.php:21\n\
    Stack trace:\n#0 /tmp/tmp0z7x_pu5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0z7x_pu5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t// your code here\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovpanx5j.php:21\n\
    Stack trace:\n#0 /tmp/tmpovpanx5j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpovpanx5j.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $valid_words = [];\n    foreach ($words\
    \ as $w) {\n        if (substr_count($w, 'a') + substr_count($w, 'e') + substr_count($w,\
    \ 'i') + substr_count($w, 'o') + substr_count($w, 'u') === $n) {\n           \
    \ $valid_words[] = $w;\n        }\n    }\n    return $valid_words;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4j34vfl.php:30\n\
    Stack trace:\n#0 /tmp/tmpp4j34vfl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp4j34vfl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // your code here\n    if ($s == \"\") {\n        return [];\n  \
    \  }\n    $founds = array();\n    $words = explode(\" \", $s);\n    $consonants\
    \ = array(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    );\n    foreach ($words as $word) {\n        $consonant_count = 0;\n        $word_arr\
    \ = str_split($word);\n        foreach ($word_arr as $char) {\n            if\
    \ (in_array($char, $consonants)) {\n                $consonant_count++;\n    \
    \        }\n        }\n        if ($consonant_count == $n) {\n            array_push($founds,\
    \ $word);\n        }\n    }\n    return $founds;\n}\n\nvar_dump(select_words(\"\
    Mary had a little lamb\", 4));\nvar_dump(select_words(\"Mary had a little lamb\"\
    , 3));\nvar_dump(select_words(\"simple white space\", 2));\nvar_dump(select_words(\"\
    Hello world\", 4));\nvar_dump(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(0) {\n}\narray(0) {\n}\narray(0) {\n}\narray(0) {\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcss4kok.php:46\n\
    Stack trace:\n#0 /tmp/tmpqcss4kok.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqcss4kok.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(empty($s)){\n        return [];\n    }\n    $data = [];\n    $input\
    \ = explode(' ', $s);\n    foreach($input as $i){\n        $data[] = check($i,\
    \ $n);\n    }\n    return array_filter($data);\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check() in /tmp/tmp3ejxm2gd.php:20\n\
    Stack trace:\n#0 /tmp/tmp3ejxm2gd.php(25): select_words('Mary had a litt...',\
    \ 4)\n#1 /tmp/tmp3ejxm2gd.php(29): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp3ejxm2gd.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3ejxm2gd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$res = [];\n\t$arr = explode(' ', $s);\n\tforeach ($arr as $val) {\n\
    \t\tif ($n == substr_count($val, 'b') + substr_count($val, 'c') + substr_count($val,\
    \ 'd') + substr_count($val, 'f') + substr_count($val, 'g') + substr_count($val,\
    \ 'h') + substr_count($val, 'j') + substr_count($val, 'k') + substr_count($val,\
    \ 'l') + substr_count($val, 'm') + substr_count($val, 'n') + substr_count($val,\
    \ 'p') + substr_count($val, 'q') + substr_count($val, 'r') + substr_count($val,\
    \ 's') + substr_count($val, 't') + substr_count($val, 'v') + substr_count($val,\
    \ 'w') + substr_count($val, 'x') + substr_count($val, 'z')) {\n\t\t\t$res[] =\
    \ $val;\n\t\t}\n\t}\n\treturn $res;\n}\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp930camjc.php:34\nStack trace:\n\
    #0 /tmp/tmp930camjc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp930camjc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word)\
    \ {\n    if (consonants($word) == $n) {\n      $result[] = $word;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpuhi9fqd1.php:17\nStack trace:\n#0 /tmp/tmpuhi9fqd1.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpuhi9fqd1.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpuhi9fqd1.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpuhi9fqd1.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    $word_array = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($word_array as $word) {\n        $num_consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (strpos($consonants,\
    \ strtolower($word[$i])) !== false) {\n                $num_consonants++;\n  \
    \          }\n        }\n        if ($num_consonants == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"<br>\";\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 3));\necho \"<br>\";\nprint_r(select_words(\"simple white space\"\
    , 2));\necho \"<br>\";\nprint_r(select_words(\"Hello world\", 4));\necho \"<br>\"\
    ;\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n<br>Array\n(\n    [0] => Mary\n    [1]\
    \ => lamb\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => world\n)\n<br>Array\n\
    (\n    [0] => Uncle\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $key => $value) {\n        $vowelCount = 0;\n\
    \        $consonantCount = 0;\n        for ($i = 0; $i < strlen($value); $i++)\
    \ {\n            if (in_array($value[$i], $vowels)) {\n                $vowelCount++;\n\
    \            } else {\n                $consonantCount++;\n            }\n   \
    \     }\n        if ($consonantCount !== $n) {\n            unset($words[$key]);\n\
    \        }\n    }\n    $final = [];\n    foreach ($words as $key => $value) {\n\
    \        $final[] = $value;\n    }\n    return $final;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_ykuyu9.php:46\n\
    Stack trace:\n#0 /tmp/tmp6_ykuyu9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6_ykuyu9.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = [];\n  $s = explode(' ', $s);\n  foreach ($s as $word) {\n \
    \   $word = str_split($word);\n    $num = 0;\n    foreach ($word as $letter) {\n\
    \      if (vowel($letter)) {\n        $num++;\n      }\n    }\n    if ($num ==\
    \ $n) {\n      $arr[] = implode($word);\n    }\n  }\n  return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function vowel() in /tmp/tmpkz2_c2m4.php:20\n\
    Stack trace:\n#0 /tmp/tmpkz2_c2m4.php(31): select_words(Array, 4)\n#1 /tmp/tmpkz2_c2m4.php(35):\
    \ candidate('Mary had a litt...', 4)\n#2 /tmp/tmpkz2_c2m4.php(44): test()\n#3\
    \ {main}\n  thrown in /tmp/tmpkz2_c2m4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $result = [];\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjleddlm.php:39\n\
    Stack trace:\n#0 /tmp/tmphjleddlm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphjleddlm.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $words_with_consonants = [];\n    foreach ($words as $word) {\n  \
    \      $consonants_count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $consonants_count++;\n\
    \            }\n        }\n        if ($consonants_count == $n) {\n          \
    \  $words_with_consonants[] = $word;\n        }\n    }\n    return $words_with_consonants;\n\
    }\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho\
    \ '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp802ddg66.php:39\nStack trace:\n#0 /tmp/tmp802ddg66.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp802ddg66.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $arr = explode(' ', $s);\n  foreach ($arr as $word)\
    \ {\n    if (preg_match_all('/[qwrtpsdfghjklzxcvbnm]/', $word, $match)) {\n  \
    \    if (count($match[0]) == $n) {\n        $result[] = $word;\n      }\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9optysi.php:31\n\
    Stack trace:\n#0 /tmp/tmpz9optysi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz9optysi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(strlen($s) == 0) {\n        return array();\n    }\n    $wordArr\
    \ = explode(\" \", $s);\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n    $consonants = array();\n    foreach($wordArr as $word) {\n        $wordConsonants\
    \ = \"\";\n        for($i = 0; $i < strlen($word); $i++) {\n            if(!in_array($word[$i],\
    \ $vowels)) {\n                $wordConsonants .= $word[$i];\n            }\n\
    \        }\n        if(strlen($wordConsonants) == $n) {\n            array_push($consonants,\
    \ $word);\n        }\n    }\n    return $consonants;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28exobzt.php:42\n\
    Stack trace:\n#0 /tmp/tmp28exobzt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp28exobzt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $s =\
    \ explode(' ', $s);\n    foreach ($s as $word) {\n        $consonants = 0;\n \
    \       for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\n$tests = [\n    [\"Mary had a little lamb\", 4,\
    \ [\"little\"]],\n    [\"Mary had a little lamb\", 3, [\"Mary\", \"lamb\"]],\n\
    \    [\"simple white space\", 2, []],\n    [\"Hello world\", 4, [\"world\"]],\n\
    \    [\"Uncle sam\", 3, [\"Uncle\"]],\n];\n\nfor ($i = 0; $i < count($tests);\
    \ $i++) {\n    $test = $tests[$i];\n    $result = select_words($test[0], $test[1]);\n\
    \    if ($result == $test[2]) {\n        echo \"Test $i: Pass<br>\";\n    } else\
    \ {\n        echo \"Test $i: Fail<br>\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 0: Pass<br>Test 1: Pass<br>Test 2: Pass<br>Test 3: Pass<br>Test 4:\
    \ Fail<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5xn4e_4.php:57\n\
    Stack trace:\n#0 /tmp/tmpu5xn4e_4.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpu5xn4e_4.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  if (empty($s)) {\n    return [];\n  }\n  $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n  $output = [];\n  $words = explode(\" \", $s);\n\
    \  foreach ($words as $word) {\n    $word_length = strlen($word);\n    $counter\
    \ = 0;\n    for ($i = 0; $i < $word_length; $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $counter++;\n      }\n    }\n    if ($counter == $n) {\n\
    \      $output[] = $word;\n    }\n  }\n  return $output;\n}\n$s = \"Mary had a\
    \ little lamb\";\n$n = 4;\nprint_r(select_words($s, $n));\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4d31xzfr.php:47\nStack trace:\n#0 /tmp/tmp4d31xzfr.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4d31xzfr.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\tpreg_match_all('/[^AEIOUaeiou\\s]+/', $s, $matches);\n\t$arr = [];\n\
    \tforeach ($matches[0] as $key => $value) {\n\t\tif (strlen($value) == $n) {\n\
    \t\t\t$arr[] = $value;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => ttl\n)\nArray\n(\n    [0] => wh\n   \
    \ [1] => sp\n)\nArray\n(\n)\nArray\n(\n    [0] => ncl\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbch8r6aw.php:33\nStack trace:\n#0 /tmp/tmpbch8r6aw.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbch8r6aw.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', str_replace(['.', ','], '', $s));\n    $arr = [];\n\
    \    foreach ($s as $key => $word) {\n        if ($n == count(array_intersect(str_split($word),\
    \ ['a', 'e', 'i', 'o', 'u']))) {\n            $arr[] = $word;\n        }\n   \
    \ }\n    return $arr;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpef2rce_7.php:30\n\
    Stack trace:\n#0 /tmp/tmpef2rce_7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpef2rce_7.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $string = preg_replace('/[aeiou]/i', '', $s);\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $key => $word) {\n    $words[$key] = trim($word);\n\
    \    if (strlen($words[$key]) !== $n) {\n      unset($words[$key]);\n    }\n \
    \ }\n  return $words;\n}\necho \"<pre>\";\nvar_dump(select_words(\"Mary had a\
    \ little lamb\", 4));\nvar_dump(select_words(\"Mary had a little lamb\", 3));\n\
    var_dump(select_words(\"simple white space\", 2));\nvar_dump(select_words(\"Hello\
    \ world\", 4));\nvar_dump(select_words(\"Uncle sam\", 3));\necho \"</pre>\";\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(2) {\n  [0]=>\n  string(4) \"Mary\"\n  [4]=>\n  string(4) \"\
    lamb\"\n}\narray(1) {\n  [1]=>\n  string(3) \"had\"\n}\narray(0) {\n}\narray(0)\
    \ {\n}\narray(1) {\n  [1]=>\n  string(3) \"sam\"\n}\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2xw65d30.php:37\nStack trace:\n#0 /tmp/tmp2xw65d30.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2xw65d30.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$s = explode(' ', $s);\n\t\
    $output = [];\n\tforeach ($s as $word) {\n\t\t$consonants = 0;\n\t\tfor ($i =\
    \ 0; $i < strlen($word); $i++) {\n\t\t\tif (!in_array($word[$i], $vowels)) {\n\
    \t\t\t\t$consonants++;\n\t\t\t}\n\t\t}\n\t\tif ($consonants == $n) {\n\t\t\t$output[]\
    \ = $word;\n\t\t}\n\t}\n\treturn $output;\n}\necho json_encode(select_words(\"\
    Mary had a little lamb\", 4)).PHP_EOL;\necho json_encode(select_words(\"Mary had\
    \ a little lamb\", 3)).PHP_EOL;\necho json_encode(select_words(\"simple white\
    \ space\", 2)).PHP_EOL;\necho json_encode(select_words(\"Hello world\", 4)).PHP_EOL;\n\
    echo json_encode(select_words(\"Uncle sam\", 3)).PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"little\"]\n[\"Mary\",\"lamb\"]\n[]\n[\"world\"]\n[]\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp1_6lli2p.php:44\nStack trace:\n\
    #0 /tmp/tmp1_6lli2p.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1_6lli2p.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  // your code here\n  $arr = explode(\" \", $s);\n  $result = [];\n\
    \  foreach($arr as $word) {\n    $count = 0;\n    for($i = 0; $i < strlen($word);\
    \ $i++) {\n      if(!isVowel($word[$i])) $count++;\n    }\n    if($count == $n)\
    \ $result[] = $word;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isVowel() in\
    \ /tmp/tmpr1oo6939.php:20\nStack trace:\n#0 /tmp/tmpr1oo6939.php(28): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpr1oo6939.php(32): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpr1oo6939.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpr1oo6939.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = preg_replace('/[^a-zA-Z ]/', '', $s);\n\t$arr = explode(' ', $s);\n\
    \t$result = [];\n\tforeach ($arr as $i) {\n\t\tif (preg_match_all('/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/',\
    \ $i) == $n) {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\necho\
    \ \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  \n  $words = explode(\" \", $s);\n  $result = [];\n  foreach ($words\
    \ as $word) {\n    if (vowel_count($word) == $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function vowel_count()\
    \ in /tmp/tmp9a5qh7eb.php:18\nStack trace:\n#0 /tmp/tmp9a5qh7eb.php(26): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp9a5qh7eb.php(30): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp9a5qh7eb.php(39): test()\n#3 {main}\n  thrown in /tmp/tmp9a5qh7eb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud5s6mje.php:21\n\
    Stack trace:\n#0 /tmp/tmpud5s6mje.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpud5s6mje.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $filtered = array_filter($arr, function($a)\
    \ use ($n) {\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $tmp = str_split($a);\n\
    \    $count = 0;\n    foreach ($tmp as $value) {\n      if (!in_array($value,\
    \ $vowels)) {\n        $count++;\n      }\n    }\n    return $count == $n;\n \
    \ });\n  return $filtered;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3emp0ke.php:33\n\
    Stack trace:\n#0 /tmp/tmpb3emp0ke.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb3emp0ke.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\tif ($s == '') {\n\t\treturn $result;\n\t}\n\t$arr\
    \ = explode(' ', $s);\n\tforeach ($arr as $word) {\n\t\t$count = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($word); $i++) {\n\t\t\tif ($word[$i] != 'a' && $word[$i] !=\
    \ 'e' && $word[$i] != 'i' && $word[$i] != 'o' && $word[$i] != 'u') {\n\t\t\t\t\
    $count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[] = $word;\n\
    \t\t}\n\t}\n\treturn $result;\n}\necho implode(', ', select_words(\"Mary had a\
    \ little lamb\", 4)) . \"\\n\";\necho implode(', ', select_words(\"Mary had a\
    \ little lamb\", 3)) . \"\\n\";\necho implode(', ', select_words(\"simple white\
    \ space\", 2)) . \"\\n\";\necho implode(', ', select_words(\"Hello world\", 4))\
    \ . \"\\n\";\necho implode(', ', select_words(\"Uncle sam\", 3)) . \"\\n\";\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary, lamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpirsq2mwo.php:46\nStack trace:\n#0 /tmp/tmpirsq2mwo.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpirsq2mwo.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(empty($s)) {\n        return [];\n    }\n    $s = preg_replace('#\\\
    s+#', ' ', $s);\n    $s = explode(' ', $s);\n    $s = array_filter($s, function($v)\
    \ use ($n) {\n        $i = 0;\n        $length = strlen($v);\n        $v = str_split($v);\n\
    \        $v = array_filter($v, function($val) use (&$i, $length) {\n         \
    \   if(in_array($val, ['a', 'e', 'i', 'o', 'u', 'y'])) {\n                $i++;\n\
    \                if($i > $length - $length / 2) {\n                    return\
    \ $val;\n                }\n            }\n        });\n        if(count($v) ==\
    \ $n) {\n            return $v;\n        }\n    });\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao7reujx.php:43\n\
    Stack trace:\n#0 /tmp/tmpao7reujx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpao7reujx.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (countConsonants($value) == $n) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpp7sntx24.php:17\nStack trace:\n#0 /tmp/tmpp7sntx24.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpp7sntx24.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpp7sntx24.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpp7sntx24.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyxs61kj.php:22\n\
    Stack trace:\n#0 /tmp/tmplyxs61kj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplyxs61kj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $result = [];\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $word) {\n    $word_consonants = 0;\n    for ($i\
    \ = 0; $i < strlen($word); $i++) {\n      if (in_array($word[$i], $consonants))\
    \ {\n        $word_consonants++;\n      }\n    }\n    if ($word_consonants ==\
    \ $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7drtken2.php:37\n\
    Stack trace:\n#0 /tmp/tmp7drtken2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7drtken2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    for ($i = 0; $i < count($words); $i++) {\n        $consonants\
    \ = 0;\n        for ($j = 0; $j < strlen($words[$i]); $j++) {\n            if\
    \ (!in_array($words[$i][$j], $vowels)) $consonants++;\n        }\n        if ($consonants\
    \ == $n) $result[] = $words[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkyiiefx.php:35\n\
    Stack trace:\n#0 /tmp/tmpdkyiiefx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdkyiiefx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $words = explode(' ', $s);\n\
    \  $res = [];\n  foreach ($words as $word) {\n    $c = 0;\n    for ($i = 0; $i\
    \ < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels)) {\n     \
    \   $c++;\n      }\n    }\n    if ($c == $n) {\n      $res[] = $word;\n    }\n\
    \  }\n  return $res;\n}\n\nvar_dump(select_words(\"Mary had a little lamb\", 4));\n\
    var_dump(select_words(\"Mary had a little lamb\", 3));\nvar_dump(select_words(\"\
    simple white space\", 2));\nvar_dump(select_words(\"Hello world\", 4));\nvar_dump(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\narray(2) {\n  [0]=>\n \
    \ string(4) \"Mary\"\n  [1]=>\n  string(4) \"lamb\"\n}\narray(0) {\n}\narray(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6pxw9bgh.php:45\nStack trace:\n#0 /tmp/tmp6pxw9bgh.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6pxw9bgh.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\tif(empty($s)) return [];\n\t$str = str_split($s);\n\t$result = [];\n\
    \t$word = \"\";\n\t$consonants = 0;\n\t$vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"\
    ];\n\tfor($i = 0; $i < count($str); $i++) {\n\t\tif($str[$i] == \" \") {\n\t\t\
    \tif($consonants == $n) $result[] = $word;\n\t\t\t$word = \"\";\n\t\t\t$consonants\
    \ = 0;\n\t\t} else {\n\t\t\t$word .= $str[$i];\n\t\t\tif(!in_array($str[$i], $vowels))\
    \ $consonants++;\n\t\t}\n\t}\n\tif($consonants == $n) $result[] = $word;\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsuxk9v9.php:42\n\
    Stack trace:\n#0 /tmp/tmpzsuxk9v9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzsuxk9v9.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $length = strlen($word);\n\
    \        $count = 0;\n        for ($i = 0; $i < $length; $i++) {\n           \
    \ if (!in_array($word[$i], $vowels)) {\n                $count++;\n          \
    \  }\n        }\n        if ($count == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp02efmqgf.php:45\nStack trace:\n#0 /tmp/tmp02efmqgf.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02efmqgf.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $narr = explode(\" \", $s);\n    $result = [];\n    $vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    foreach ($narr as $word) {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            array_push($result, $word);\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgub3ext.php:40\n\
    Stack trace:\n#0 /tmp/tmpbgub3ext.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbgub3ext.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $res = [];\n    if (!empty($s)) {\n        $words = explode(' ',\
    \ $s);\n        foreach ($words as $key => $value) {\n            if (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i',\
    \ $value, $matches) == $n) {\n                $res[] = $value;\n            }\n\
    \        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n   \
    \ return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $word_array = explode(\" \", $s);\n  $result = [];\n  foreach ($word_array\
    \ as $word) {\n    if (number_of_consonants($word) == $n) {\n      array_push($result,\
    \ $word);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function number_of_consonants()\
    \ in /tmp/tmp7uydx9sw.php:17\nStack trace:\n#0 /tmp/tmp7uydx9sw.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp7uydx9sw.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp7uydx9sw.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp7uydx9sw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $res = [];\n    for ($i = 0; $i < count($words); $i++) {\n        $word =\
    \ $words[$i];\n        $consonants = 0;\n        for ($j = 0; $j < strlen($word);\
    \ $j++) {\n            if (!in_array($word[$j], $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            $res[]\
    \ = $word;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zrpjlhc.php:41\n\
    Stack trace:\n#0 /tmp/tmp5zrpjlhc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5zrpjlhc.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // Your code here\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpkxhtxv.php:21\n\
    Stack trace:\n#0 /tmp/tmphpkxhtxv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphpkxhtxv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"\
    </br>\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\necho \"</br>\"\
    ;\nprint_r(select_words(\"simple white space\", 2));\necho \"</br>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</br>\";\nprint_r(select_words(\"Uncle sam\", 3));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n</br>Array\n(\n)\n</br>Array\n(\n    [0] => simple\n    [1]\
    \ => white\n    [2] => space\n)\n</br>Array\n(\n)\n</br>Array\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9rlwultf.php:38\nStack trace:\n\
    #0 /tmp/tmp9rlwultf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9rlwultf.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = preg_split('/ /', $s);\n  $result = [];\n  foreach ($words\
    \ as $word) {\n    if (strlen($word) == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\necho '<pre>';\nprint_r(select_words(\"Mary had a\
    \ little lamb\", 4));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Mary\n    [1] => lamb\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpgkmsg7ce.php:32\nStack trace:\n\
    #0 /tmp/tmpgkmsg7ce.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgkmsg7ce.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(empty($s)) return [];\n    $arr = explode(' ',$s);\n    $count_a\
    \ = [];\n    foreach($arr as $key => $value){\n        $count_a[$key] = countConsonants($value);\n\
    \    }\n    $result = [];\n    foreach($count_a as $key => $value){\n        if($value\
    \ == $n){\n            $result[] = $arr[$key];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp1laa6o3n.php:18\nStack trace:\n#0 /tmp/tmp1laa6o3n.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1laa6o3n.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1laa6o3n.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp1laa6o3n.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $words = explode(' ',\
    \ $s);\n  $output = array();\n  foreach ($words as $word) {\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n  \
    \    $output[] = $word;\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4dv5pp4.php:39\n\
    Stack trace:\n#0 /tmp/tmpw4dv5pp4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw4dv5pp4.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  if (empty($s)) {\n    return $result;\n  }\n\n  $s\
    \ = str_replace(' ', '', $s);\n  $len = strlen($s);\n  $consonants = ['B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z'];\n  $numOfConsonants = [];\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $numOfConsonants[$i] = 0;\n    for ($j = 0; $j < count($consonants); $j++)\
    \ {\n      if ($s[$i] == $consonants[$j]) {\n        $numOfConsonants[$i]++;\n\
    \      }\n    }\n  }\n\n  $buffer = '';\n  for ($i = 0; $i < $len; $i++) {\n \
    \   if ($numOfConsonants[$i] == $n) {\n      $buffer .= $s[$i];\n    } else {\n\
    \      if (!empty($buffer)) {\n        array_push($result, $buffer);\n       \
    \ $buffer = '';\n      }\n    }\n  }\n  if (!empty($buffer)) {\n    array_push($result,\
    \ $buffer);\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1fhh1cb.php:55\n\
    Stack trace:\n#0 /tmp/tmpp1fhh1cb.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpp1fhh1cb.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $s = preg_split('/[\\s]+/',\
    \ $s);\n  $r = [];\n  foreach ($s as $w) {\n    $w = str_split($w);\n    $c =\
    \ 0;\n    foreach ($w as $l) {\n      if (!in_array($l, $vowels)) {\n        $c++;\n\
    \      }\n    }\n    if ($c == $n) {\n      $r[] = implode($w);\n    }\n  }\n\
    \  return $r;\n}\necho implode(', ', select_words(\"Mary had a little lamb\",\
    \ 4)) . '<br>';\necho implode(', ', select_words(\"Mary had a little lamb\", 3))\
    \ . '<br>';\necho implode(', ', select_words(\"simple white space\", 2)) . '<br>';\n\
    echo implode(', ', select_words(\"Hello world\", 4)) . '<br>';\necho implode(',\
    \ ', select_words(\"Uncle sam\", 3)) . '<br>';\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "little<br>Mary, lamb<br><br>world<br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxio7cvo4.php:45\nStack trace:\n#0 /tmp/tmpxio7cvo4.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxio7cvo4.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $total = [];\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        $temp = array_count_values(str_split($arr[$i]));\n\
    \        if (isset($temp['a']) + isset($temp['e']) + isset($temp['i']) + isset($temp['o'])\
    \ + isset($temp['u']) == $n) {\n            array_push($total, $arr[$i]);\n  \
    \      }\n    }\n    return $total;\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvclugq46.php:29\n\
    Stack trace:\n#0 /tmp/tmpvclugq46.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvclugq46.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = 'qwrtypsdfghjklzxcvbnm';\n    $wordConsonants = array();\n\
    \    $words = explode(' ', $s);\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        $letters = str_split($word);\n        foreach ($letters as $letter)\
    \ {\n            if (strpos($consonants, $letter) !== false) {\n             \
    \   $consonantCount++;\n            }\n        }\n        if ($consonantCount\
    \ == $n) {\n            $wordConsonants[] = $word;\n        }\n    }\n    return\
    \ $wordConsonants;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjvgpqto8.php:44\nStack trace:\n\
    #0 /tmp/tmpjvgpqto8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjvgpqto8.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou7tdnho.php:20\n\
    Stack trace:\n#0 /tmp/tmpou7tdnho.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpou7tdnho.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $validWords = [];\n  $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n  foreach ($words as $word) {\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels))\
    \ {\n        $count++;\n      }\n    }\n    if ($count === $n) {\n      $validWords[]\
    \ = $word;\n    }\n  }\n  return $validWords;\n}\n\nvar_dump(select_words(\"Mary\
    \ had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8b6j6yw7.php:41\nStack trace:\n#0 /tmp/tmp8b6j6yw7.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8b6j6yw7.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  if ($s === '') {\n    return [];\n  }\n  $s = explode(' ', $s);\n \
    \ $return_string = [];\n  foreach ($s as $value) {\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($value); $i++) {\n      $character = strtolower($value[$i]);\n\
    \      if (!in_array($character, ['a', 'e', 'i', 'o', 'u'])) {\n        $count++;\n\
    \      }\n    }\n    if ($count === $n) {\n      $return_string[] = $value;\n\
    \    }\n  }\n  return $return_string;\n}\nfunction candidate(...$args) {\n   \
    \ return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $r = [];\n    foreach ($words as\
    \ $word) {\n        if (numConsonants($word) == $n) {\n            $r[] = $word;\n\
    \        }\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function numConsonants()\
    \ in /tmp/tmp4_qvfjyb.php:17\nStack trace:\n#0 /tmp/tmp4_qvfjyb.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp4_qvfjyb.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp4_qvfjyb.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp4_qvfjyb.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\");\n    $arr = explode(\" \", $s);\n    $result = array();\n\
    \    foreach ($arr as $word) {\n        $count = 0;\n        for ($i = 0; $i <\
    \ strlen($word); $i++) {\n            if (in_array($word[$i], $consonants)) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            array_push($result, $word);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprf6_y20.php:36\n\
    Stack trace:\n#0 /tmp/tmpprf6_y20.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpprf6_y20.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $s = explode(' ', $s);\n  $result\
    \ = [];\n  foreach ($s as $word) {\n    $consonants = 0;\n    $letters = str_split($word);\n\
    \    foreach ($letters as $letter) {\n      if (!in_array($letter, $vowels)) {\n\
    \        $consonants++;\n      }\n    }\n    if ($consonants == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\necho \"<pre>\";\necho select_words(\"\
    Mary had a little lamb\", 4);\necho \"</pre>\";\n\necho \"<pre>\";\necho select_words(\"\
    Mary had a little lamb\", 3);\necho \"</pre>\";\n\necho \"<pre>\";\necho select_words(\"\
    simple white space\", 2);\necho \"</pre>\";\n\necho \"<pre>\";\necho select_words(\"\
    Hello world\", 4);\necho \"</pre>\";\n\necho \"<pre>\";\necho select_words(\"\
    Uncle sam\", 3);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array</pre><pre>Array</pre><pre>Array</pre><pre>Array</pre><pre>Array</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnhmgk4th.php:60\nStack\
    \ trace:\n#0 /tmp/tmpnhmgk4th.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpnhmgk4th.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = explode(' ', $s);\n  $a = [];\n  foreach ($s as $v) {\n    if\
    \ (strlen($v) === $n) {\n      $a[] = $v;\n    }\n  }\n  return $a;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Mary\n    [1] => lamb\n)\nArray\n(\n    [0] => had\n\
    )\nArray\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => sam\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpa2i7g20x.php:33\nStack trace:\n#0 /tmp/tmpa2i7g20x.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa2i7g20x.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = str_split($s);\n    $words = [];\n    $consonants = [];\n  \
    \  $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($s as $key => $value) {\n\
    \        if ($value == ' ') {\n            if (count($consonants) == $n) {\n \
    \               $words[] = strtolower(implode('', $consonants));\n           \
    \ }\n            $consonants = [];\n        } else {\n            if (!in_array($value,\
    \ $vowels)) {\n                $consonants[] = $value;\n            }\n      \
    \  }\n    }\n    if (count($consonants) == $n) {\n        $words[] = strtolower(implode('',\
    \ $consonants));\n    }\n    return $words;\n}\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k_umqcu.php:40\n\
    Stack trace:\n#0 /tmp/tmp1k_umqcu.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1k_umqcu.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $word = str_split($word);\n\
    \        $count = 0;\n        foreach ($word as $letter) {\n            if (!in_array($letter,\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = implode('', $word);\n        }\n \
    \   }\n    return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf48vw4us.php:46\nStack trace:\n#0 /tmp/tmpf48vw4us.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf48vw4us.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  $words = explode(\"\
    \ \", $s);\n  $selected = array();\n  foreach ($words as $word) {\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n  \
    \    array_push($selected, $word);\n    }\n  }\n  return $selected;\n}\necho var_dump(select_words(\"\
    Mary had a little lamb\", 4)) . \"<br>\";\necho var_dump(select_words(\"Mary had\
    \ a little lamb\", 3)) . \"<br>\";\necho var_dump(select_words(\"simple white\
    \ space\", 2)) . \"<br>\";\necho var_dump(select_words(\"Hello world\", 4)) .\
    \ \"<br>\";\necho var_dump(select_words(\"Uncle sam\", 3)) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n<br>array(2) {\n  [0]=>\n\
    \  string(4) \"Mary\"\n  [1]=>\n  string(4) \"lamb\"\n}\n<br>array(0) {\n}\n<br>array(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\n<br>array(0) {\n}\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpsyb14eoo.php:44\nStack trace:\n\
    #0 /tmp/tmpsyb14eoo.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpsyb14eoo.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$consonants = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n\t$a = explode(' ', $s);\n\
    \t$result = array();\n\tforeach ($a as $key => $value) {\n\t\t$counter = 0;\n\t\
    \t$value = strtolower($value);\n\t\tfor ($i=0; $i < strlen($value); $i++) { \n\
    \t\t\tif (in_array($value[$i], $consonants)) {\n\t\t\t\t$counter++;\n\t\t\t}\n\
    \t\t}\n\t\tif ($counter == $n) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u3_pfry.php:38\n\
    Stack trace:\n#0 /tmp/tmp2u3_pfry.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2u3_pfry.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $words = explode(' ', $s);\n\
    \  $list = [];\n  foreach ($words as $word) {\n    $c = 0;\n    foreach (str_split($word)\
    \ as $letter) {\n      if (in_array($letter, $consonants)) {\n        $c++;\n\
    \      }\n    }\n    if ($c == $n) {\n      $list[] = $word;\n    }\n  }\n  return\
    \ $list;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklcq1pr9.php:36\n\
    Stack trace:\n#0 /tmp/tmpklcq1pr9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpklcq1pr9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  if (empty($s)) return [];\n  $result = [];\n  $words = explode(' ',\
    \ $s);\n  foreach ($words as $word) {\n    if (consonants($word) == $n) array_push($result,\
    \ $word);\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpl87ua_wd.php:18\nStack trace:\n#0 /tmp/tmpl87ua_wd.php(23): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpl87ua_wd.php(27): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpl87ua_wd.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpl87ua_wd.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $consonants =\
    \ 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2i3jpcw.php:39\n\
    Stack trace:\n#0 /tmp/tmpp2i3jpcw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp2i3jpcw.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\necho implode(', ', select_words(\"Mary had a little lamb\"\
    , 4));\necho '<br>';\necho implode(', ', select_words(\"Mary had a little lamb\"\
    , 3));\necho '<br>';\necho implode(', ', select_words(\"simple white space\",\
    \ 2));\necho '<br>';\necho implode(', ', select_words(\"Hello world\", 4));\n\
    echo '<br>';\necho implode(', ', select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little<br>lamb<br><br>world<br>Uncle\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpit1ks0fv.php:45\nStack trace:\n#0 /tmp/tmpit1ks0fv.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpit1ks0fv.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $s = explode(\" \"\
    , $s);\n    $results = [];\n    foreach ($s as $value) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($value); $i++) {\n            if (strpos($consonants,\
    \ strtolower($value[$i])) !== false) {\n                $count++;\n          \
    \  }\n        }\n        if ($count == $n) {\n            $results[] = $value;\n\
    \        }\n    }\n    return $results;\n}\n\necho implode(\", \", select_words(\"\
    Mary had a little lamb\", 4)) . \"\\n\";\necho implode(\", \", select_words(\"\
    Mary had a little lamb\", 3)) . \"\\n\";\necho implode(\", \", select_words(\"\
    simple white space\", 2)) . \"\\n\";\necho implode(\", \", select_words(\"Hello\
    \ world\", 4)) . \"\\n\";\necho implode(\", \", select_words(\"Uncle sam\", 3))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary, lamb\n\nworld\nUncle\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\treturn [];\n}\n\n$res = select_words(\"Mary had a little lamb\", 4);\n\
    $a = count($res) > 0 ? $res[0] : null;\nassert(\"little\" == $a);\n$res = select_words(\"\
    Mary had a little lamb\", 3);\n$a = count($res) > 0 ? $res[0] : null;\n$b = count($res)\
    \ > 1 ? $res[1] : null;\nassert(\"Mary\" == $a);\nassert(\"lamb\" == $b);\n$res\
    \ = select_words(\"simple white space\", 2);\nassert(0 == count($res));\n$res\
    \ = select_words(\"Hello world\", 4);\n$a = count($res) > 0 ? $res[0] : null;\n\
    assert(\"world\" == $a);\n$res = select_words(\"Uncle sam\", 3);\n$a = count($res)\
    \ > 0 ? $res[0] : null;\nassert(\"Uncle\" == $a);\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert('little' == $a) failed in /tmp/tmp9f4n2g27.php\
    \ on line 19\n\nWarning: assert(): assert('Mary' == $a) failed in /tmp/tmp9f4n2g27.php\
    \ on line 23\n\nWarning: assert(): assert('lamb' == $b) failed in /tmp/tmp9f4n2g27.php\
    \ on line 24\n\nWarning: assert(): assert('world' == $a) failed in /tmp/tmp9f4n2g27.php\
    \ on line 29\n\nWarning: assert(): assert('Uncle' == $a) failed in /tmp/tmp9f4n2g27.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f4n2g27.php:38\n\
    Stack trace:\n#0 /tmp/tmp9f4n2g27.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9f4n2g27.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $list = [];\n    $list_item = \"\";\n    $consonants = [\n      \
    \  \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n    ];\n\
    \    $s = strtolower($s);\n    for ($i = 0; $i < strlen($s); $i++) {\n       \
    \ if (ctype_alpha($s[$i])) {\n            $list_item .= $s[$i];\n        } else\
    \ {\n            if (count_consonants($list_item) == $n) {\n                array_push($list,\
    \ $list_item);\n            }\n            $list_item = \"\";\n        }\n   \
    \ }\n    if (count_consonants($list_item) == $n) {\n        array_push($list,\
    \ $list_item);\n    }\n    return $list;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpvhd53gvj.php:24\nStack trace:\n#0 /tmp/tmpvhd53gvj.php(37): select_words('mary\
    \ had a litt...', 4)\n#1 /tmp/tmpvhd53gvj.php(41): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpvhd53gvj.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpvhd53gvj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (vowel_count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function vowel_count()\
    \ in /tmp/tmpyvvjkzz_.php:17\nStack trace:\n#0 /tmp/tmpyvvjkzz_.php(24): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpyvvjkzz_.php(28): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpyvvjkzz_.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpyvvjkzz_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $res = [];\n    foreach ($words as $word) {\n        $count = 0;\n      \
    \  foreach (str_split($word) as $ch) {\n            if (!in_array($ch, $vowels))\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            $res[] = $word;\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppod9hptl.php:40\n\
    Stack trace:\n#0 /tmp/tmppod9hptl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppod9hptl.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $res = [];\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if (preg_match_all('/[^aeiou\\s]/i', $arr[$i])\
    \ == $n) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 3));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"simple\
    \ white space\", 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n    [0] => Uncle\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  \tif (empty($s)) {\n      return [];\n    }\n    $words = explode('\
    \ ', $s);\n    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\"];\n    $filtered = [];\n    foreach ($words as $word) {\n     \
    \ $letters = str_split($word);\n      $counter = 0;\n      foreach ($letters as\
    \ $letter) {\n        if (in_array($letter, $consonants)) {\n          $counter++;\n\
    \        }\n      }\n      if ($counter == $n) {\n        $filtered[] = $word;\n\
    \      }\n    }\n    return $filtered;\n}\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk339zir.php:40\n\
    Stack trace:\n#0 /tmp/tmpgk339zir.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgk339zir.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\t$vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\t$words\
    \ = explode(\" \", $s);\n\tforeach ($words as $word) {\n\t\t$count = 0;\n\t\t\
    for ($i=0; $i < strlen($word); $i++) { \n\t\t\tif (!in_array($word[$i], $vowels))\
    \ {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[]\
    \ = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    simple white space\", 2));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp70fqc650.php:59\nStack trace:\n#0 /tmp/tmp70fqc650.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmp70fqc650.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $wordArr = explode(\" \", $s);\n    $finalArr = [];\n    foreach($wordArr\
    \ as $word) {\n        if(consonantCount($word) == $n) {\n            array_push($finalArr,\
    \ $word);\n        }\n    }\n    return $finalArr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonantCount()\
    \ in /tmp/tmpuv2hi_0e.php:17\nStack trace:\n#0 /tmp/tmpuv2hi_0e.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpuv2hi_0e.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpuv2hi_0e.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpuv2hi_0e.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = trim($s);\n  $result = [];\n  if(empty($s)) return $result;\n\
    \  $arr_s = explode(' ', $s);\n  foreach($arr_s as $val) {\n    $leng = strlen($val);\n\
    \    $count = 0;\n    for($i = 0; $i < $leng; $i++) {\n      if(isConsonant($val[$i]))\
    \ {\n        $count++;\n      }\n    }\n    if($count == $n) {\n      $result[]\
    \ = $val;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isConsonant()\
    \ in /tmp/tmp7p3zsvxh.php:22\nStack trace:\n#0 /tmp/tmp7p3zsvxh.php(33): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp7p3zsvxh.php(37): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp7p3zsvxh.php(46): test()\n#3 {main}\n  thrown in /tmp/tmp7p3zsvxh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $arr = explode(' ', $s);\n  foreach ($arr as $val)\
    \ {\n    if (strlen($val) - substr_count($val, 'a') - substr_count($val, 'e')\
    \ - substr_count($val, 'i') - substr_count($val, 'o') - substr_count($val, 'u')\
    \ === $n) $result[] = $val;\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0k_ama2.php:30\n\
    Stack trace:\n#0 /tmp/tmpq0k_ama2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq0k_ama2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = [];\n    $exploded = explode(' ', $s);\n    foreach ($exploded\
    \ as $word) {\n        if (substr_count($word, 'a') == 0 && substr_count($word,\
    \ 'e') == 0 && substr_count($word, 'i') == 0 && substr_count($word, 'o') == 0\
    \ && substr_count($word, 'u') == 0) {\n            if (strlen($word) == $n) {\n\
    \                $words[] = $word;\n            }\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_nm7pqh.php:31\n\
    Stack trace:\n#0 /tmp/tmpi_nm7pqh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi_nm7pqh.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  if(empty($s)) return [];\n  $vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n  $res = [];\n  $s = explode(\" \", $s);\n  foreach($s as $val) {\n\
    \    $count = 0;\n    for($i = 0; $i < strlen($val); $i++) {\n      if(!in_array($val[$i],\
    \ $vowels)) {\n        $count++;\n      }\n    }\n    if($count == $n) {\n   \
    \   $res[] = $val;\n    }\n  }\n  return $res;\n}\nprint_r(select_words(\"Hello\
    \ world\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => world\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmlpsaco1.php:41\nStack trace:\n#0 /tmp/tmpmlpsaco1.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmlpsaco1.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) === $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\necho \"<pre>select_words(\\\"Mary\
    \ had a little lamb\\\", 4)\\r\\n\";\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\necho \"</pre>\";\n\necho \"<pre>select_words(\\\"Mary had a little\
    \ lamb\\\", 3)\\r\\n\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    echo \"</pre>\";\n\necho \"<pre>select_words(\\\"simple white space\\\", 2)\\\
    r\\n\";\nprint_r(select_words(\"simple white space\", 2));\necho \"</pre>\";\n\
    \necho \"<pre>select_words(\\\"Hello world\\\", 4)\\r\\n\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\n\necho \"<pre>select_words(\\\"Uncle sam\\\
    \", 3)\\r\\n\";\nprint_r(select_words(\"Uncle sam\", 3));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>select_words(\"Mary had a little lamb\", 4)\nArray\n(\n    [0] =>\
    \ Mary\n    [1] => lamb\n)\n</pre><pre>select_words(\"Mary had a little lamb\"\
    , 3)\nArray\n(\n    [0] => had\n)\n</pre><pre>select_words(\"simple white space\"\
    , 2)\nArray\n(\n)\n</pre><pre>select_words(\"Hello world\", 4)\nArray\n(\n)\n\
    </pre><pre>select_words(\"Uncle sam\", 3)\nArray\n(\n    [0] => sam\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpit9v9_1c.php:48\nStack\
    \ trace:\n#0 /tmp/tmpit9v9_1c.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpit9v9_1c.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants($word) == $n) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp1r9oq790.php:17\nStack trace:\n#0 /tmp/tmp1r9oq790.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1r9oq790.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1r9oq790.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp1r9oq790.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        $w = $arr[$i];\n        $c = 0;\n        for\
    \ ($j = 0; $j < strlen($w); $j++) {\n            if (isConsonant($w[$j])) {\n\
    \                $c++;\n            }\n        }\n        if ($c == $n) {\n  \
    \          array_push($result, $w);\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isConsonant()\
    \ in /tmp/tmpul0701nl.php:20\nStack trace:\n#0 /tmp/tmpul0701nl.php(32): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpul0701nl.php(36): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpul0701nl.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpul0701nl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  // Your code here!\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp8_l3y7.php:21\n\
    Stack trace:\n#0 /tmp/tmpzp8_l3y7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzp8_l3y7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    $consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    foreach ($words as $word) {\n        $count\
    \ = 0;\n        $wordArr = str_split($word);\n        foreach ($wordArr as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    simple white space\", 2));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => lamb\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n)\n</pre><pre>Array\n\
    (\n    [0] => Uncle\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjok7z384.php:56\nStack trace:\n#0 /tmp/tmpjok7z384.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjok7z384.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $r = [];\n    $w = explode(' ', $s);\n    foreach ($w as $v) {\n\
    \        if (preg_match('/^[aeiou]{0,}[^aeiou]{'.$n.'}[aeiou]{0,}$/i', $v)) $r[]\
    \ = $v;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__fpy3ee.php:27\n\
    Stack trace:\n#0 /tmp/tmp__fpy3ee.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp__fpy3ee.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $selected = [];\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) === $n) {\n            $selected[] =\
    \ $word;\n        }\n    }\n    return $selected;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ewmxeca.php:28\n\
    Stack trace:\n#0 /tmp/tmp_ewmxeca.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_ewmxeca.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $val)\
    \ {\n        $consonants = substr_count($val, 'B') + substr_count($val, 'C') +\
    \ substr_count($val, 'D') + substr_count($val, 'F') + substr_count($val, 'G')\
    \ + substr_count($val, 'H') + substr_count($val, 'J') + substr_count($val, 'K')\
    \ + substr_count($val, 'L') + substr_count($val, 'M') + substr_count($val, 'N')\
    \ + substr_count($val, 'P') + substr_count($val, 'Q') + substr_count($val, 'R')\
    \ + substr_count($val, 'S') + substr_count($val, 'T') + substr_count($val, 'V')\
    \ + substr_count($val, 'W') + substr_count($val, 'X') + substr_count($val, 'Y')\
    \ + substr_count($val, 'Z');\n        if ($consonants == $n) {\n            $result[]\
    \ = $val;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2n41x0z.php:30\n\
    Stack trace:\n#0 /tmp/tmpw2n41x0z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw2n41x0z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $ary = explode(\" \",$s);\n  $result = [];\n  foreach($ary as $word)\
    \ {\n    if(vowelCount($word) == $n) {\n      $result[] = $word;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function vowelCount()\
    \ in /tmp/tmpbufqczp5.php:17\nStack trace:\n#0 /tmp/tmpbufqczp5.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpbufqczp5.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpbufqczp5.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpbufqczp5.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $newArr = [];\n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    for ($i = 0; $i < count($arr); $i++) {\n        $consonants\
    \ = 0;\n        for ($j = 0; $j < strlen($arr[$i]); $j++) {\n            if (!in_array($arr[$i][$j],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            array_push($newArr, $arr[$i]);\n  \
    \      }\n    }\n    return $newArr;\n}\necho implode(', ', select_words(\"Mary\
    \ had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpau131gn7.php:40\n\
    Stack trace:\n#0 /tmp/tmpau131gn7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpau131gn7.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $word = strtolower($word);\n\
    \        $length = strlen($word);\n        $count = 0;\n        for ($i = 0; $i\
    \ < $length; $i++) {\n            if (strpos($consonants, $word[$i]) !== false)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ===\
    \ $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"\\n\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"\\n\";\nprint_r(select_words(\"simple white\
    \ space\", 2));\necho \"\\n\";\nprint_r(select_words(\"Hello world\", 4));\necho\
    \ \"\\n\";\nprint_r(select_words(\"Uncle sam\", 3));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nArray\n(\n    [0] => mary\n    [1] =>\
    \ lamb\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => world\n)\n\nArray\n(\n    [0]\
    \ => uncle\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsykecj_.php:49\n\
    Stack trace:\n#0 /tmp/tmpdsykecj_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdsykecj_.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $consonants = preg_replace(\"/[aeiouAEIOU\\\
    s]/\", '', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $word_consonants\
    \ = preg_replace(\"/[aeiouAEIOU\\s]/\", '', $word);\n    if (strlen($word_consonants)\
    \ == $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\necho\
    \ implode(', ', select_words(\"Mary had a little lamb\", 4));\necho \"<br>\";\n\
    echo implode(', ', select_words(\"Mary had a little lamb\", 3));\necho \"<br>\"\
    ;\necho implode(', ', select_words(\"simple white space\", 2));\necho \"<br>\"\
    ;\necho implode(', ', select_words(\"Hello world\", 4));\necho \"<br>\";\necho\
    \ implode(', ', select_words(\"Uncle sam\", 3));\necho \"<br>\";\necho implode(',\
    \ ', select_words(\"\", 3));\necho \"<br>\";\necho implode(', ', select_words(\"\
    Jack and Jill\", 2));\necho \"<br>\";\necho implode(', ', select_words(\"Jack\
    \ and Jill\", 3));\necho \"<br>\";\necho implode(', ', select_words(\"Jack and\
    \ Jill\", 1));\necho \"<br>\";\necho implode(', ', select_words(\"Jack and Jill\"\
    , 0));\necho \"<br>\";\necho implode(', ', select_words(\"Jack and Jill\", 5));\n\
    echo \"<br>\";\necho implode(', ', select_words(\"Jack and Jill\", 4));\necho\
    \ \"<br>\";\necho implode(', ', select_words(\"Jack and Jill\", 6));\necho \"\
    <br>\";\necho implode(', ', select_words(\"Jack and Jill\", 7));\necho \"<br>\"\
    ;\necho implode(', ', select_words(\"Jill and Jack\", 3));\necho \"<br>\";\necho\
    \ implode(', ', select_words(\"Jill and Jack\", 4));\necho \"<br>\";\necho implode(',\
    \ ', select_words\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprmyk1kxx.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n  $result = [];\n  $words = explode(\" \", $s);\n  foreach ($words\
    \ as $word) {\n    $wordConsonants = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (in_array($word[$i], $consonants)) {\n        $wordConsonants++;\n\
    \      }\n    }\n    if ($wordConsonants == $n) {\n      array_push($result, $word);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7b6pc66.php:37\n\
    Stack trace:\n#0 /tmp/tmpp7b6pc66.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp7b6pc66.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $selected = [];\n    $tokens = explode(' ', $s);\n    foreach ($tokens\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $selected[] = $word;\n\
    \        }\n    }\n    return $selected;\n}\necho var_export(select_words(\"Mary\
    \ had a little lamb\", 4), true), \"\\n\";\necho var_export(select_words(\"Mary\
    \ had a little lamb\", 3), true), \"\\n\";\necho var_export(select_words(\"simple\
    \ white space\", 2), true), \"\\n\";\necho var_export(select_words(\"Hello world\"\
    , 4), true), \"\\n\";\necho var_export(select_words(\"Uncle sam\", 3), true),\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n  0 => 'Mary',\n  1 => 'lamb',\n)\narray (\n  0 => 'had',\n)\n\
    array (\n)\narray (\n)\narray (\n  0 => 'sam',\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzhswc0vm.php:33\nStack trace:\n#0 /tmp/tmpzhswc0vm.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzhswc0vm.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonantsCount($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonantsCount()\
    \ in /tmp/tmp2bmcsr2a.php:17\nStack trace:\n#0 /tmp/tmp2bmcsr2a.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp2bmcsr2a.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp2bmcsr2a.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp2bmcsr2a.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$words = [];\n\t$word = '';\n\tfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n\t\tif (ctype_alpha($s[$i])) {\n\t\t\t$word .= $s[$i];\n\t\t} else {\n\t\t\
    \tif (ctype_upper($word[0])) {\n\t\t\t\tif (consonants($word) == $n) {\n\t\t\t\
    \t\t$words[] = $word;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$word = '';\n\t\t}\n\t}\n\treturn\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpiw1gwo8e.php:21\nStack trace:\n#0 /tmp/tmpiw1gwo8e.php(32): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpiw1gwo8e.php(36): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpiw1gwo8e.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpiw1gwo8e.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if ($s == \"\") {\n        return [];\n    }\n    $consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    $consonants = str_split($consonants);\n    $s =\
    \ str_split($s);\n    $result = [];\n    $buffer = \"\";\n    $count = 0;\n  \
    \  for ($i = 0; $i < count($s); $i++) {\n        if (in_array($s[$i], $consonants))\
    \ {\n            $count++;\n        }\n        if ($s[$i] != \" \") {\n      \
    \      $buffer .= $s[$i];\n        } else {\n            if ($count == $n) {\n\
    \                array_push($result, $buffer);\n            }\n            $buffer\
    \ = \"\";\n            $count = 0;\n        }\n    }\n    if ($count == $n) {\n\
    \        array_push($result, $buffer);\n    }\n    return $result;\n}\n\necho\
    \ \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"simple white space\"\
    , 2));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"Hello world\"\
    , 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"Uncle sam\"\
    , 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => lamb\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n)\n</pre><pre>Array\n\
    (\n    [0] => Uncle\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5d7cxs3m.php:68\nStack trace:\n#0 /tmp/tmp5d7cxs3m.php(76): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5d7cxs3m.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $arr = explode(' ', $s);\n    foreach ($arr as\
    \ $value) {\n        if (substr_count($value, 'a') + substr_count($value, 'e')\
    \ + \n            substr_count($value, 'i') + substr_count($value, 'o') + \n \
    \           substr_count($value, 'u') == $n) {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\n\necho \"<pre>select_words(\\\"Mary\
    \ had a little lamb\\\", 4)\\r\\n\";\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\necho \"</pre>\";\n\necho \"<pre>select_words(\\\"Mary had a little\
    \ lamb\\\", 3)\\r\\n\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    echo \"</pre>\";\n\necho \"<pre>select_words(\\\"simple white space\\\", 2)\\\
    r\\n\";\nprint_r(select_words(\"simple white space\", 2));\necho \"</pre>\";\n\
    \necho \"<pre>select_words(\\\"Hello world\\\", 4)\\r\\n\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\n\necho \"<pre>select_words(\\\"Uncle sam\\\
    \", 3)\\r\\n\";\nprint_r(select_words(\"Uncle sam\", 3));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>select_words(\"Mary had a little lamb\", 4)\nArray\n(\n)\n</pre><pre>select_words(\"\
    Mary had a little lamb\", 3)\nArray\n(\n)\n</pre><pre>select_words(\"simple white\
    \ space\", 2)\nArray\n(\n    [0] => simple\n    [1] => white\n    [2] => space\n\
    )\n</pre><pre>select_words(\"Hello world\", 4)\nArray\n(\n)\n</pre><pre>select_words(\"\
    Uncle sam\", 3)\nArray\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0cam9z4g.php:50\nStack trace:\n#0 /tmp/tmp0cam9z4g.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0cam9z4g.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $s = explode(' ',$s);\n  foreach($s as $s){\n    $count\
    \ = 0;\n    $s = str_split($s);\n    foreach($s as $s){\n      if(!ctype_alpha($s)){\n\
    \        continue;\n      }\n      if(!ctype_lower($s)){\n        $s = strtolower($s);\n\
    \      }\n      if($s == 'a' || $s == 'e' || $s == 'i' || $s == 'o' || $s == 'u'){\n\
    \        continue;\n      }\n      $count++;\n    }\n    if($count == $n){\n \
    \     $result[] = implode($s);\n    }\n  }\n  return $result;\n}\n\n$test1 = \"\
    Mary had a little lamb\";\n$test2 = \"Mary had a little lamb\";\n$test3 = \"simple\
    \ white space\";\n$test4 = \"Hello world\";\n$test5 = \"Uncle sam\";\n\necho select_words($test1,\
    \ 4);\necho \"<br>\";\necho select_words($test2, 3);\necho \"<br>\";\necho select_words($test3,\
    \ 2);\necho \"<br>\";\necho select_words($test4, 4);\necho \"<br>\";\necho select_words($test5,\
    \ 3);\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Argument must be an array in /tmp/tmpb77g4nkp.php\
    \ on line 32\nArray<br>\nWarning: implode(): Argument must be an array in /tmp/tmpb77g4nkp.php\
    \ on line 32\n\nWarning: implode(): Argument must be an array in /tmp/tmpb77g4nkp.php\
    \ on line 32\nArray<br>Array<br>\nWarning: implode(): Argument must be an array\
    \ in /tmp/tmpb77g4nkp.php on line 32\nArray<br>\nWarning: implode(): Argument\
    \ must be an array in /tmp/tmpb77g4nkp.php on line 32\nArray<br>\nWarning: implode():\
    \ Argument must be an array in /tmp/tmpb77g4nkp.php on line 32\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb77g4nkp.php:60\nStack trace:\n\
    #0 /tmp/tmpb77g4nkp.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpb77g4nkp.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\t$words = explode(' ', $s);\n\tforeach ($words as $word)\
    \ {\n\t\tif (substr_count($word, 'a')+substr_count($word, 'e')+substr_count($word,\
    \ 'i')+substr_count($word, 'o')+substr_count($word, 'u') == $n) {\n\t\t\t$result[]\
    \ = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] =>\
    \ white\n    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgbx9o3hz.php:36\nStack trace:\n#0 /tmp/tmpgbx9o3hz.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgbx9o3hz.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = explode(' ', $s);\n  $consonants = [\n    'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'\n\
    \  ];\n  $words = [];\n  foreach ($s as $word) {\n    $consonant_counter = 0;\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      $letter = $word[$i];\n  \
    \    if (in_array($letter, $consonants)) {\n        $consonant_counter++;\n  \
    \    }\n    }\n    if ($consonant_counter === $n) {\n      $words[] = $word;\n\
    \    }\n  }\n  return $words;\n}\n\necho '<pre>';\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpgdlxlzwv.php:47\nStack trace:\n\
    #0 /tmp/tmpgdlxlzwv.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgdlxlzwv.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    if ($s != \"\") {\n        $string = str_replace(\"\
    \ \", \"\", $s);\n        $string_len = strlen($string);\n        $consonants\
    \ = [\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"\
    N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\
    \        for ($i = 0; $i < $string_len; $i++) {\n            if (in_array($string[$i],\
    \ $consonants)) {\n                $string[$i] = \"1\";\n            } else {\n\
    \                $string[$i] = \"0\";\n            }\n        }\n        $string\
    \ = str_split($string);\n        foreach ($string as $item) {\n            if\
    \ ($item == 1) {\n                $counter++;\n            }\n        }\n    \
    \    if ($counter == $n) {\n            array_push($result, $s);\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyc_yv8r.php:43\n\
    Stack trace:\n#0 /tmp/tmpcyc_yv8r.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcyc_yv8r.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\tif(empty($s)) return [];\n\t$consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \t$array = [];\n\t$arr = explode(' ', $s);\n\tforeach($arr as $v) {\n\t\t$count\
    \ = 0;\n\t\tfor($i = 0; $i < strlen($v); $i++) {\n\t\t\tif(in_array($v[$i], $consonants))\
    \ {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif($count == $n) {\n\t\t\t$array[]\
    \ = $v;\n\t\t}\n\t}\n\treturn $array;\n}\n\nprint_r(select_words(\"simple white\
    \ space\", 2));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwfy8w27l.php:39\n\
    Stack trace:\n#0 /tmp/tmpwfy8w27l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwfy8w27l.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if (strlen($s) == 0) {\n        return [];\n    }\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $words = explode(' ', $s);\n    $result\
    \ = [];\n    for ($i = 0; $i < count($words); $i++) {\n        $count = 0;\n \
    \       for ($j = 0; $j < strlen($words[$i]); $j++) {\n            if (in_array(strtolower($words[$i][$j]),\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            array_push($result, $words[$i]);\n      \
    \  }\n    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    simple white space\", 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n    [0] => Uncle\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\tif (strlen($s) == 0) {\n\t\treturn array();\n\t}\n\t$result = array();\n\
    \t$s = preg_replace('/\\s+/', ' ', $s);\n\t$words = explode(' ', $s);\n\tforeach\
    \ ($words as $word) {\n\t\tif (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i', $word,\
    \ $matches) == $n) {\n\t\t\tarray_push($result, $word);\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $result = [];\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n \
    \       $len = strlen($word);\n        $count = 0;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if (!in_array($word[$i], $vowels)) {\n          \
    \      $count++;\n            }\n        }\n        if ($count == $n) {\n    \
    \        $result[] = $word;\n        }\n    }\n    return $result;\n}\necho \"\
    <pre>\";\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6q9wgkkh.php:44\nStack trace:\n#0 /tmp/tmp6q9wgkkh.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6q9wgkkh.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(empty($s)) return [];\n    $out = [];\n    $arr = explode(' ',\
    \ $s);\n    foreach($arr as $val) {\n        $vowels = 0;\n        for($i = 0;\
    \ $i < strlen($val); $i++) {\n            if(strtolower($val[$i]) == 'a' || strtolower($val[$i])\
    \ == 'e' || strtolower($val[$i]) == 'i' || strtolower($val[$i]) == 'o' || strtolower($val[$i])\
    \ == 'u')\n                $vowels++;\n        }\n        if(strlen($val) - $vowels\
    \ == $n)\n            $out[] = $val;\n    }\n    return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $regex = \"/\\w*(?<=[bcdfghjklmnpqrstvwxyz]{{$n}})\\w*/i\";\n   \
    \ $matches = [];\n    preg_match_all($regex, $s, $matches);\n    return $matches[0];\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpseuupnhw.php:25\n\
    Stack trace:\n#0 /tmp/tmpseuupnhw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpseuupnhw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  foreach ($words as $word) {\n    $wordLength = strlen($word);\n\
    \    $consonants = 0;\n    for ($i = 0; $i < $wordLength; $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $consonants++;\n      }\n    }\n    if ($consonants ===\
    \ $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$s = \"\
    Mary had a little lamb\";\n$n = 4;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp10oejuby.php:44\nStack trace:\n#0 /tmp/tmp10oejuby.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp10oejuby.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $list = explode(\" \", $s);\n  $res = [];\n  foreach ($list as $item)\
    \ {\n    if (count_consonants($item) == $n)\n      $res[] = $item;\n  }\n  return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpdoqu9i3d.php:17\nStack trace:\n#0 /tmp/tmpdoqu9i3d.php(23): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpdoqu9i3d.php(27): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpdoqu9i3d.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpdoqu9i3d.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n  $res = [];\n  $words = explode(\" \", $s);\n  foreach ($words\
    \ as $word) {\n    $count = 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n\
    \      if (in_array($word[$i], $consonants)) {\n        $count++;\n      }\n \
    \   }\n    if ($count == $n) {\n      $res[] = $word;\n    }\n  }\n  return $res;\n\
    }\n\necho implode(\", \", select_words(\"Mary had a little lamb\", 4)) . \"\\\
    n\";\necho implode(\", \", select_words(\"Mary had a little lamb\", 3)) . \"\\\
    n\";\necho implode(\", \", select_words(\"simple white space\", 2)) . \"\\n\"\
    ;\necho implode(\", \", select_words(\"Hello world\", 4)) . \"\\n\";\necho implode(\"\
    , \", select_words(\"Uncle sam\", 3)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nlamb\n\nworld\nUncle\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp83vcl5rq.php:42\nStack trace:\n#0 /tmp/tmp83vcl5rq.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmp83vcl5rq.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = preg_replace('/[^a-z ]/i', '', $s);\n    $a = explode(' ', $s);\n\
    \    $result = [];\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $c = str_split($a[$i]);\n        $c = array_filter($c,\
    \ function($e) use ($consonants) {\n            return strpos($consonants, $e)\
    \ !== false;\n        });\n        if (count($c) == $n) {\n            $result[]\
    \ = $a[$i];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0e1dvue.php:36\n\
    Stack trace:\n#0 /tmp/tmpb0e1dvue.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpb0e1dvue.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $count = [];\n    foreach ($s as $val)\
    \ {\n        $cons = 0;\n        foreach (str_split($val) as $char) {\n      \
    \      if (!in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $cons++;\n\
    \            }\n        }\n        if ($cons == $n) {\n            $count[] =\
    \ $val;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbrir2gd.php:38\n\
    Stack trace:\n#0 /tmp/tmpbbrir2gd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbbrir2gd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$chars = str_split($s);\n\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t\
    $consonants = [];\n\t$words = [];\n\t$word = '';\n\t$consonantCount = 0;\n\tforeach\
    \ ($chars as $char) {\n\t\tif ($char == ' ') {\n\t\t\tif ($consonantCount == $n)\
    \ {\n\t\t\t\t$words[] = $word;\n\t\t\t}\n\t\t\t$word = '';\n\t\t\t$consonantCount\
    \ = 0;\n\t\t} else {\n\t\t\t$word .= $char;\n\t\t\tif (!in_array($char, $vowels))\
    \ {\n\t\t\t\t$consonantCount++;\n\t\t\t}\n\t\t}\n\t}\n\tif ($consonantCount ==\
    \ $n) {\n\t\t$words[] = $word;\n\t}\n\treturn $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpukaxpgiq.php:49\n\
    Stack trace:\n#0 /tmp/tmpukaxpgiq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpukaxpgiq.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (preg_match_all('/[^aeiou]/i', $word) == $n) {\n      $result[] =\
    \ $word;\n    }\n  }\n  return $result;\n}\n\n$s = 'Mary had a little lamb';\n\
    $n = 4;\n$result = select_words($s, $n);\necho \"$s \\nwith $n consonants: \\\
    n\";\nvar_dump($result);\n\n$s = 'Mary had a little lamb';\n$n = 3;\n$result =\
    \ select_words($s, $n);\necho \"$s \\nwith $n consonants: \\n\";\nvar_dump($result);\n\
    \n$s = 'simple white space';\n$n = 2;\n$result = select_words($s, $n);\necho \"\
    $s \\nwith $n consonants: \\n\";\nvar_dump($result);\n\n$s = 'Hello world';\n\
    $n = 4;\n$result = select_words($s, $n);\necho \"$s \\nwith $n consonants: \\\
    n\";\nvar_dump($result);\n\n$s = 'Uncle sam';\n$n = 3;\n$result = select_words($s,\
    \ $n);\necho \"$s \\nwith $n consonants: \\n\";\nvar_dump($result);\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Mary had a little lamb \nwith 4 consonants: \narray(1) {\n  [0]=>\n  string(6)\
    \ \"little\"\n}\nMary had a little lamb \nwith 3 consonants: \narray(2) {\n  [0]=>\n\
    \  string(4) \"Mary\"\n  [1]=>\n  string(4) \"lamb\"\n}\nsimple white space \n\
    with 2 consonants: \narray(0) {\n}\nHello world \nwith 4 consonants: \narray(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\nUncle sam \nwith 3 consonants: \narray(1)\
    \ {\n  [0]=>\n  string(5) \"Uncle\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s1 = preg_replace('/[aeiouAEIOU]/', '', $s);\n\t$a = explode(' ',\
    \ $s);\n\tforeach ($a as $k => $v) {\n\t\tif (strlen($v) != strlen($s1[$k])) {\n\
    \t\t\tunset($a[$k]);\n\t\t}\n\t}\n\t$a = array_values($a);\n\t$arr = [];\n\tforeach\
    \ ($a as $v) {\n\t\tif (substr_count($v, 'a') + substr_count($v, 'e') + substr_count($v,\
    \ 'i') + substr_count($v, 'o') + substr_count($v, 'u') + substr_count($v, 'A')\
    \ + substr_count($v, 'E') + substr_count($v, 'I') + substr_count($v, 'O') + substr_count($v,\
    \ 'U') == strlen($v) - $n) {\n\t\t\t$arr[] = $v;\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpseynlcfb.php:35\n\
    Stack trace:\n#0 /tmp/tmpseynlcfb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpseynlcfb.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = str_replace(\" \",\"\",$s);\n  $vowels = ['a','e','i','o','u'];\n\
    \  $consonants = [];\n  for($i=0;$i<strlen($s);$i++){\n    if(!in_array($s[$i],$vowels))\
    \ $consonants[] = $s[$i];\n  }\n  return $consonants;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposzuosot.php:28\n\
    Stack trace:\n#0 /tmp/tmposzuosot.php(37): test()\n#1 {main}\n  thrown in /tmp/tmposzuosot.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = str_split($s);\n    $consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $count = 0;\n    $res = [];\n    for ($i = 0; $i < count($s); $i++) {\n \
    \       if ($s[$i] === ' ') {\n            if ($count === $n) {\n            \
    \    $res[] = implode(array_slice($s, 0, $i));\n            }\n            $count\
    \ = 0;\n            $s = array_slice($s, $i + 1);\n            $i = 0;\n     \
    \   } else if (in_array($s[$i], $consonants)) {\n            $count++;\n     \
    \   }\n    }\n    if ($count === $n) {\n        $res[] = implode($s);\n    }\n\
    \    return $res;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => little\n)\nArray\n(\n    [0] => white\n\
    \    [1] => space\n)\nArray\n(\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxzvlsnt9.php:45\nStack trace:\n\
    #0 /tmp/tmpxzvlsnt9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxzvlsnt9.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $str = '';\n    $arr = [];\n    $consonants = 0;\n    $vowels = 0;\n\
    \    if(!empty($s)){\n        $str = str_split($s);\n        for($i = 0; $i <\
    \ count($str); $i++){\n            if($str[$i] == ' '){\n                if($vowels\
    \ == 0){\n                    if($consonants == $n){\n                       \
    \ $arr[] = str_replace(' ', '', $s);\n                    }\n                }\n\
    \                else{\n                    if($consonants == $n){\n         \
    \               $arr[] = substr($s, 0, $i);\n                    }\n         \
    \       }\n                $consonants = 0;\n                $vowels = 0;\n  \
    \              $s = substr($s, $i+1);\n                $str = str_split($s);\n\
    \                $i = 0;\n            }\n            else if($str[$i] == 'a' ||\
    \ $str[$i] == 'e' || $str[$i] == 'i' || $str[$i] == 'o' || $str[$i] == 'u'){\n\
    \                $vowels++;\n            }\n            else{\n              \
    \  $consonants++;\n            }\n        }\n        if($vowels == 0){\n     \
    \       if($consonants == $n){\n                $arr[] = str_replace(' ', '',\
    \ $s);\n            }\n        }\n        else{\n            if($consonants ==\
    \ $n){\n                $arr[] = substr($s, 0, $i);\n            }\n        }\n\
    \    }\n    return $arr;\n}\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => Mary\n    [1] => little\n)\nArray\n(\n\
    \    [0] => white\n    [1] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdvud1_1t.php:68\nStack trace:\n\
    #0 /tmp/tmpdvud1_1t.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpdvud1_1t.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = explode(' ', $s);\n  $result = [];\n  foreach ($s as $word) {\n\
    \    $count = 0;\n    $letters = preg_split('//u', $word, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    foreach ($letters as $letter) {\n      if (!in_array($letter, ['a', 'e',\
    \ 'i', 'o', 'u'])) {\n        $count++;\n      }\n    }\n    if ($count === $n)\
    \ {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpcyeggfyg.php:40\nStack trace:\n#0 /tmp/tmpcyeggfyg.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcyeggfyg.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $words = explode(\"\
    \ \", $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\necho select_words(\"Mary had a little lamb\", 4);\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxed564k.php:41\n\
    Stack trace:\n#0 /tmp/tmpbxed564k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbxed564k.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = preg_split('/\\s+/', $s);\n    $consonants = 0;\n    $filtered\
    \ = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n        $letters\
    \ = str_split($word);\n        foreach ($letters as $letter) {\n            if\
    \ (preg_match('/[^aeiou]/i', $letter)) $consonants++;\n        }\n        if ($consonants\
    \ == $n) $filtered[] = $word;\n    }\n    return $filtered;\n}\necho implode('\
    \ ', select_words(\"Mary had a little lamb\", 4));\necho \"\\n\";\necho implode('\
    \ ', select_words(\"Mary had a little lamb\", 3));\necho \"\\n\";\necho implode('\
    \ ', select_words(\"simple white space\", 2));\necho \"\\n\";\necho implode('\
    \ ', select_words(\"Hello world\", 4));\necho \"\\n\";\necho implode(' ', select_words(\"\
    Uncle sam\", 3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary lamb\n\nworld\nUncle\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = str_replace(' ', '', $s);\n    $words = str_split($s);\n   \
    \ $result = [];\n    $currentWord = '';\n    $counter = 0;\n    for ($i = 0; $i\
    \ < count($words); $i++) {\n        if (preg_match('/[aeiou]/i', $words[$i]))\
    \ {\n            continue;\n        }\n        $currentWord .= $words[$i];\n \
    \       $counter++;\n        if ($i === count($words) - 1) {\n            if ($counter\
    \ === $n) {\n                $result[] = $currentWord;\n            }\n      \
    \  }\n        if (preg_match('/[aeiou]/i', $words[$i + 1])) {\n            if\
    \ ($counter === $n) {\n                $result[] = $currentWord;\n           \
    \ }\n            $currentWord = '';\n            $counter = 0;\n        }\n  \
    \  }\n    return $result;\n}\n\necho '<pre>select_words(\"Mary had a little lamb\"\
    , 4) ==> ';\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho '</pre>';\n\
    echo '<pre>select_words(\"Mary had a little lamb\", 3) ==> ';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\necho '<pre>select_words(\"simple\
    \ white space\", 2) ==> ';\nprint_r(select_words(\"simple white space\", 2));\n\
    echo '</pre>';\necho '<pre>select_words(\"Hello world\", 4) ==> ';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\necho '<pre>select_words(\"Uncle sam\", 3)\
    \ ==> ';\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>select_words(\"Mary had a little lamb\", 4) ==> Array\n(\n)\n</pre><pre>select_words(\"\
    Mary had a little lamb\", 3) ==> Array\n(\n    [0] => ryh\n    [1] => ttl\n)\n\
    </pre><pre>select_words(\"simple white space\", 2) ==> Array\n(\n    [0] => wh\n\
    \    [1] => sp\n)\n</pre><pre>select_words(\"Hello world\", 4) ==> Array\n(\n\
    )\n</pre><pre>select_words(\"Uncle sam\", 3) ==> Array\n(\n    [0] => ncl\n)\n\
    </pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jpt44ww.php:61\n\
    Stack trace:\n#0 /tmp/tmp4jpt44ww.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4jpt44ww.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\tif(empty($s)) {\n\t\treturn [];\n\t}\n\t$array = [];\n\t$array = explode(\"\
    \ \", $s);\n\t$arr = [];\n\t$arr2 = [];\n\t$consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n\tforeach($array as $key) {\n\t\t$array2 = str_split($key);\n\t\t$result\
    \ = array_intersect($array2, $consonants);\n\t\tif(count($result) == $n) {\n\t\
    \t\t$arr[] = $key;\n\t\t}\n\t}\n\treturn $arr;\n}\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    simple white space\", 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => lamb\n\
    )\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n)\n</pre><pre>Array\n\
    (\n    [0] => Uncle\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpq3pybzwe.php:52\nStack trace:\n#0 /tmp/tmpq3pybzwe.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq3pybzwe.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $value)\
    \ {\n    if (strlen($value) - count_vowels($value) == $n) {\n      $result[] =\
    \ $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_vowels()\
    \ in /tmp/tmp58jl_ag9.php:17\nStack trace:\n#0 /tmp/tmp58jl_ag9.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp58jl_ag9.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp58jl_ag9.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp58jl_ag9.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $key\
    \ => $word) {\n    $counter = 0;\n    foreach (str_split($word) as $char) {\n\
    \      if (ctype_lower($char)) {\n        $counter++;\n      }\n    }\n    if\
    \ ($counter === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt43utud.php:35\n\
    Stack trace:\n#0 /tmp/tmpzt43utud.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzt43utud.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t// your code here\n\t$words = explode(\" \", $s);\n\t$result = [];\n\
    \tforeach ($words as $word) {\n\t\tif (strlen($word) - substr_count($word, \"\
    a\") - substr_count($word, \"e\") - substr_count($word, \"i\") - substr_count($word,\
    \ \"o\") - substr_count($word, \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h1aermz.php:34\n\
    Stack trace:\n#0 /tmp/tmp4h1aermz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4h1aermz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $a = [];\n  $s = explode(' ', $s);\n  foreach ($s as $i) {\n    if\
    \ (substr_count($i, 'a') + substr_count($i, 'e') + substr_count($i, 'i') + substr_count($i,\
    \ 'o') + substr_count($i, 'u') == $n) $a[] = $i;\n  }\n  return $a;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4y4zo46.php:26\n\
    Stack trace:\n#0 /tmp/tmpy4y4zo46.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpy4y4zo46.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$consonants = str_split(\"bcdfghjklmnpqrstvwxyz\");\n\t$result = [];\n\
    \t$words = explode(\" \", $s);\n\tforeach ($words as $word) {\n\t\t$letters =\
    \ str_split($word);\n\t\t$consonantCount = 0;\n\t\tforeach ($letters as $letter)\
    \ {\n\t\t\tif (in_array($letter, $consonants)) {\n\t\t\t\t$consonantCount++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($consonantCount == $n) {\n\t\t\t$result[] = $word;\n\t\
    \t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx79gd7r8.php:37\n\
    Stack trace:\n#0 /tmp/tmpx79gd7r8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx79gd7r8.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $words = explode(' ', $s);\n  $consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n  foreach ($words as $word) {\n    $consonantCount = 0;\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      $char = strtolower($word[$i]);\n\
    \      if (in_array($char, $consonants)) {\n        $consonantCount++;\n     \
    \ }\n    }\n    if ($consonantCount === $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $s = preg_replace('/\\s+/', ' ', $s);\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $letters = str_split($word);\n\
    \        $count = 0;\n        foreach ($letters as $letter) {\n            $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n            if (!in_array($letter, $vowels)) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0qph0dd.php:42\n\
    Stack trace:\n#0 /tmp/tmpb0qph0dd.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpb0qph0dd.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants_count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpdn8l5gh6.php:17\nStack trace:\n#0 /tmp/tmpdn8l5gh6.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpdn8l5gh6.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpdn8l5gh6.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpdn8l5gh6.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if (empty($s)) {\n        return [];\n    }\n\n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $chars = str_split($s);\n    $result = [];\n    $temp\
    \ = [];\n    $vowelCount = 0;\n    $consonantCount = 0;\n    foreach ($chars as\
    \ $char) {\n        if ($char == ' ') {\n            if ($consonantCount == $n)\
    \ {\n                $result[] = implode($temp);\n            }\n            $vowelCount\
    \ = 0;\n            $consonantCount = 0;\n            $temp = [];\n        } else\
    \ if (in_array($char, $vowels)) {\n            $vowelCount++;\n            $temp[]\
    \ = $char;\n        } else {\n            $consonantCount++;\n            $temp[]\
    \ = $char;\n        }\n    }\n\n    if ($consonantCount == $n) {\n        $result[]\
    \ = implode($temp);\n    }\n\n    return $result;\n}\n\necho implode(', ', select_words(\"\
    Mary had a little lamb\", 4)) . PHP_EOL;\necho implode(', ', select_words(\"Mary\
    \ had a little lamb\", 3)) . PHP_EOL;\necho implode(', ', select_words(\"simple\
    \ white space\", 2)) . PHP_EOL;\necho implode(', ', select_words(\"Hello world\"\
    , 4)) . PHP_EOL;\necho implode(', ', select_words(\"Uncle sam\", 3)) . PHP_EOL;\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary, lamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmprcocvn43.php:62\nStack trace:\n#0 /tmp/tmprcocvn43.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprcocvn43.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $return = [];\n    foreach ($words\
    \ as $word) {\n        $word = str_split($word);\n        $consonants = 0;\n \
    \       foreach ($word as $letter) {\n            if (!in_array($letter, ['a',\
    \ 'e', 'i', 'o', 'u'])) {\n                $consonants++;\n            }\n   \
    \     }\n        if ($consonants == $n) {\n            $return[] = implode('',\
    \ $word);\n        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_h6k0rm.php:40\n\
    Stack trace:\n#0 /tmp/tmpk_h6k0rm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk_h6k0rm.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\t$string = explode(' ', $s);\n\
    \t$result = [];\n\tforeach ($string as $value) {\n\t\t$sum = 0;\n\t\tfor ($i =\
    \ 0; $i < strlen($value); $i++) {\n\t\t\tif (in_array($value[$i], $consonants))\
    \ {\n\t\t\t\t$sum++;\n\t\t\t}\n\t\t}\n\t\tif ($sum == $n) {\n\t\t\t$result[] =\
    \ $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\", 4));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6w9quuy.php:37\n\
    Stack trace:\n#0 /tmp/tmpj6w9quuy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj6w9quuy.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$r = str_split($s);\n\t$result = [];\n\t$count = 0;\n\t$word = '';\n\
    \t$consonants = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\tfor ($i = 0; $i < count($r);\
    \ $i++) {\n\t\tif ($r[$i] == ' ') {\n\t\t\tif ($count == $n) {\n\t\t\t\tarray_push($result,\
    \ $word);\n\t\t\t}\n\t\t\t$count = 0;\n\t\t\t$word = '';\n\t\t} else {\n\t\t\t\
    $word .= $r[$i];\n\t\t\tif (in_array($r[$i], $consonants)) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif ($count == $n) {\n\t\tarray_push($result, $word);\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9wowb57.php:45\n\
    Stack trace:\n#0 /tmp/tmph9wowb57.php(53): test()\n#1 {main}\n  thrown in /tmp/tmph9wowb57.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\t$words = explode(' ', $s);\n\tforeach ($words as $word)\
    \ {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9u_tq1w9.php:28\n\
    Stack trace:\n#0 /tmp/tmp9u_tq1w9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9u_tq1w9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $a = explode(' ', $s);\n  $r = [];\n  foreach ($a as $w) {\n    $r[]\
    \ = substr_count($w, 'a') + substr_count($w, 'e') + substr_count($w, 'i') +\n\
    \           substr_count($w, 'o') + substr_count($w, 'u');\n  }\n  $res = [];\n\
    \  for ($i = 0; $i < count($a); $i++) {\n    if ($r[$i] == $n) {\n      $res[]\
    \ = $a[$i];\n    }\n  }\n  return $res;\n}\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0g0y38m9.php:36\nStack trace:\n#0 /tmp/tmp0g0y38m9.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0g0y38m9.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $res = [];\n  $arr = explode(' ',$s);\n  foreach($arr as $e) {\n  \
    \  if (consonants_count($e) == $n) {\n      $res[] = $e;\n    }\n  }\n  return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpruk29e_l.php:17\nStack trace:\n#0 /tmp/tmpruk29e_l.php(24): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpruk29e_l.php(28): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpruk29e_l.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpruk29e_l.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$newArr = [];\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$count = 0;\n\t\t$word = $arr[$i];\n\t\tfor ($j = 0; $j < strlen($word);\
    \ $j++) {\n\t\t\tif (!isVowel($word[$j])) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t\
    }\n\t\tif ($count == $n) {\n\t\t\tarray_push($newArr, $word);\n\t\t}\n\t}\n\t\
    return $newArr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isVowel() in\
    \ /tmp/tmpi6bbuef_.php:20\nStack trace:\n#0 /tmp/tmpi6bbuef_.php(32): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpi6bbuef_.php(36): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpi6bbuef_.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpi6bbuef_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n    $list = [];\n    if ($s == \"\") return $list;\n    foreach\
    \ (explode(\" \", $s) as $word) {\n        $count = 0;\n        foreach (str_split($word)\
    \ as $letter) {\n            if (in_array($letter, $consonants)) {\n         \
    \       $count++;\n            }\n        }\n        if ($count == $n) {\n   \
    \         $list[] = $word;\n        }\n    }\n    return $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp6rrgou.php:37\n\
    Stack trace:\n#0 /tmp/tmpkp6rrgou.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkp6rrgou.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = str_replace(' ', '', $s);\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  $words = [];\n  $alphabets = str_split($s);\n  $letters = [];\n  foreach ($alphabets\
    \ as $alpha) {\n    if (!in_array($alpha, $vowels)) {\n      $letters[] = $alpha;\n\
    \    }\n  }\n  if (count($letters) == $n) {\n    $words[] = $s;\n  }\n  return\
    \ $words;\n}\necho implode(', ', select_words(\"Mary had a little lamb\", 4));\n\
    echo implode(', ', select_words(\"Mary had a little lamb\", 3));\necho implode(',\
    \ ', select_words(\"simple white space\", 2));\necho implode(', ', select_words(\"\
    Hello world\", 4));\necho implode(', ', select_words(\"Uncle sam\", 3));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5es6y9z.php:39\n\
    Stack trace:\n#0 /tmp/tmps5es6y9z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmps5es6y9z.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = str_replace(\" \", \"\", $s);\n\t$vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n\t$result = [];\n\t$words = str_split($s);\n\t$word_length =\
    \ strlen($s);\n\t$word_count = 0;\n\t$letters = \"\";\n\tfor ($i = 0; $i < $word_length;\
    \ $i++) {\n\t\t$letter = $words[$i];\n\t\tif (in_array($letter, $vowels)) {\n\t\
    \t\tcontinue;\n\t\t}\n\t\t$word_count++;\n\t\t$letters .= $letter;\n\t\tif ($word_count\
    \ == $n) {\n\t\t\t$result[] = $letters;\n\t\t\t$word_count = 0;\n\t\t\t$letters\
    \ = \"\";\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Mryh\n    [1] => dltt\n    [2] => llmb\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2b6vvx0n.php:44\nStack\
    \ trace:\n#0 /tmp/tmp2b6vvx0n.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2b6vvx0n.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$result = array();\n\t\
    $words = explode(' ', $s);\n\tforeach ($words as $word) {\n\t\t$consonants = 0;\n\
    \t\tfor ($i = 0; $i < strlen($word); $i++) {\n\t\t\tif (!in_array($word[$i], $vowels))\
    \ {\n\t\t\t\t$consonants++;\n\t\t\t}\n\t\t}\n\t\tif ($consonants == $n) {\n\t\t\
    \t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\necho implode(', ', select_words(\"\
    Mary had a little lamb\", 4));\necho '<br>';\necho implode(', ', select_words(\"\
    Mary had a little lamb\", 3));\necho '<br>';\necho implode(', ', select_words(\"\
    simple white space\", 2));\necho '<br>';\necho implode(', ', select_words(\"Hello\
    \ world\", 4));\necho '<br>';\necho implode(', ', select_words(\"Uncle sam\",\
    \ 3));\necho '<br>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little<br>Mary, lamb<br><br>world<br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpd6au32k4.php:49\nStack trace:\n#0 /tmp/tmpd6au32k4.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd6au32k4.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\t$words = explode(' ', $s);\n\tforeach ($words as $word)\
    \ {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh9mtsfu.php:29\n\
    Stack trace:\n#0 /tmp/tmpfh9mtsfu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfh9mtsfu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  if(!empty($s)) {\n    $words = explode(' ', $s);\n\
    \    foreach($words as $word) {\n      if(strlen($word) == preg_match('/[a,e,i,o,u]/i',\
    \ $word, $match) + $n) {\n        $result[] = $word;\n      }\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2eclrcr.php:31\n\
    Stack trace:\n#0 /tmp/tmph2eclrcr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph2eclrcr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$s = str_split($s);\n\t$consonants = 'bcdfghjklmnpqrstvwxyz';\n\t$results\
    \ = [];\n\t$word = '';\n\tfor ($i = 0; $i < count($s); $i++) {\n\t\tif ($s[$i]\
    \ == ' ') {\n\t\t\t$consonant_count = 0;\n\t\t\t$word_array = str_split($word);\n\
    \t\t\tfor ($j = 0; $j < count($word_array); $j++) {\n\t\t\t\tif (strpos($consonants,\
    \ $word_array[$j]) !== false) {\n\t\t\t\t\t$consonant_count++;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tif ($consonant_count == $n) {\n\t\t\t\tarray_push($results, $word);\n\
    \t\t\t}\n\t\t\t$word = '';\n\t\t} else {\n\t\t\t$word .= $s[$i];\n\t\t}\n\t}\n\
    \treturn $results;\n}\n$ans = select_words(\"Mary had a little lamb\", 4);\nforeach\
    \ ($ans as $a) {\n\techo $a . ' ';\n}\necho \"<br>\";\n$ans = select_words(\"\
    Mary had a little lamb\", 3);\nforeach ($ans as $a) {\n\techo $a . ' ';\n}\necho\
    \ \"<br>\";\n$ans = select_words(\"simple white space\", 2);\nforeach ($ans as\
    \ $a) {\n\techo $a . ' ';\n}\necho \"<br>\";\n$ans = select_words(\"Hello world\"\
    , 4);\nforeach ($ans as $a) {\n\techo $a . ' ';\n}\necho \"<br>\";\n$ans = select_words(\"\
    Uncle sam\", 3);\nforeach ($ans as $a) {\n\techo $a . ' ';\n}\necho \"<br>\";\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little <br><br><br><br>Uncle <br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9qwir6_t.php:68\nStack trace:\n#0 /tmp/tmp9qwir6_t.php(76):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9qwir6_t.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $is_consonant = function($ch) {\n        return !in_array($ch, ['a',\
    \ 'e', 'i', 'o', 'u']);\n    };\n    $cnt = function($s) use ($is_consonant) {\n\
    \        $t = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if\
    \ ($is_consonant($s[$i])) {\n                $t++;\n            }\n        }\n\
    \        return $t;\n    };\n    $ss = explode(' ', $s);\n    return array_filter($ss,\
    \ function($x) use ($n, $cnt) { return $cnt($x) == $n; });\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y9zggac.php:35\n\
    Stack trace:\n#0 /tmp/tmp0y9zggac.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0y9zggac.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $filteredWords = [];\n  $words = explode(\" \", $s);\n  foreach ($words\
    \ as $word) {\n    if (substr_count($word, \"aeiou\") === $n) array_push($filteredWords,\
    \ $word);\n  }\n  return $filteredWords;\n}\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ivqiavw.php:26\n\
    Stack trace:\n#0 /tmp/tmp1ivqiavw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1ivqiavw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if (strlen($s) === 0) {\n        return [];\n    }\n    $result =\
    \ [];\n    $resultTemp = explode(\" \", $s);\n    foreach ($resultTemp as $v)\
    \ {\n        if (substr_count($v, \"a\") + substr_count($v, \"e\") + substr_count($v,\
    \ \"i\") + substr_count($v, \"o\") + substr_count($v, \"u\") === $n) {\n     \
    \       $result[] = $v;\n        }\n    }\n    return $result;\n}\n\n$result =\
    \ select_words(\"Mary had a little lamb\", 4);\nprint_r($result);\necho \"\\n\"\
    ;\n$result = select_words(\"Mary had a little lamb\", 3);\nprint_r($result);\n\
    echo \"\\n\";\n$result = select_words(\"simple white space\", 2);\nprint_r($result);\n\
    echo \"\\n\";\n$result = select_words(\"Hello world\", 4);\nprint_r($result);\n\
    echo \"\\n\";\n$result = select_words(\"Uncle sam\", 3);\nprint_r($result);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsa_f0o2c.php:48\nStack trace:\n#0 /tmp/tmpsa_f0o2c.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsa_f0o2c.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if (empty($s)) return [];\n    $pattern = str_repeat('([^aeiou]+)',\
    \ $n);\n    preg_match_all(\"/{$pattern}/i\", $s, $matches);\n    return $matches[0];\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ry h\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_uaif6xp.php:25\nStack trace:\n#0 /tmp/tmp_uaif6xp.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_uaif6xp.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (getNumberOfConsonants($word) == $n) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getNumberOfConsonants()\
    \ in /tmp/tmpc4t48lt4.php:17\nStack trace:\n#0 /tmp/tmpc4t48lt4.php(25): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc4t48lt4.php(29): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc4t48lt4.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpc4t48lt4.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if (empty($s)) {\n        return [];\n    }\n    $words = explode('\
    \ ', $s);\n    $res = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'A') + substr_count($word, 'E') + substr_count($word, 'I') + substr_count($word,\
    \ 'O') + substr_count($word, 'U') == strlen($word) - $n) {\n            $res[]\
    \ = $word;\n        }\n    }\n    return $res;\n}\necho implode('<br>', select_words(\"\
    Mary had a little lamb\", 4));\necho '<br>';\necho implode('<br>', select_words(\"\
    Mary had a little lamb\", 3));\necho '<br>';\necho implode('<br>', select_words(\"\
    simple white space\", 2));\necho '<br>';\necho implode('<br>', select_words(\"\
    Hello world\", 4));\necho '<br>';\necho implode('<br>', select_words(\"Uncle sam\"\
    , 3));\necho '<br>';\necho implode('<br>', select_words(\"\", 2));\necho '<br>';\n\
    echo implode('<br>', select_words(\"UNCLE SAM\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Mary<br>lamb<br>had<br><br><br>sam<br><br>UNCLE\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptsq4ynub.php:44\nStack trace:\n#0 /tmp/tmptsq4ynub.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptsq4ynub.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $c = \"bcdfghjklmnpqrstvwxyz\";\n\
    \    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $cc =\
    \ str_split($arr[$i]);\n        $ccc = 0;\n        for ($j = 0; $j < count($cc);\
    \ $j++) {\n            if (strpos($c, $cc[$j]) !== false) {\n                $ccc++;\n\
    \            }\n        }\n        if ($ccc == $n) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppao3z9fb.php:38\nStack trace:\n#0 /tmp/tmppao3z9fb.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppao3z9fb.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $arr = [];\n  $consonants = 0;\n  foreach\
    \ ($words as $word) {\n    $consonants = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!in_array($word[$i], ['a', 'e', 'i', 'o', 'u'])) {\n    \
    \    $consonants++;\n      }\n    }\n    if ($consonants == $n) {\n      $arr[]\
    \ = $word;\n    }\n  }\n  return $arr;\n}\necho json_encode(select_words(\"Mary\
    \ had a little lamb\", 4)) . \"\\n\";\necho json_encode(select_words(\"Mary had\
    \ a little lamb\", 3)) . \"\\n\";\necho json_encode(select_words(\"simple white\
    \ space\", 2)) . \"\\n\";\necho json_encode(select_words(\"Hello world\", 4))\
    \ . \"\\n\";\necho json_encode(select_words(\"Uncle sam\", 3)) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"little\"]\n[\"Mary\",\"lamb\"]\n[]\n[\"world\"]\n[]\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdaqy3civ.php:44\nStack trace:\n\
    #0 /tmp/tmpdaqy3civ.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdaqy3civ.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$output = [];\n\t$s = explode(' ', $s);\n\tforeach ($s as $word) {\n\
    \t\t$vowels = 0;\n\t\t$consonants = 0;\n\t\t$characters = str_split($word);\n\t\
    \tforeach ($characters as $character) {\n\t\t\t$character = strtolower($character);\n\
    \t\t\t$vowels = array_search($character, ['a', 'e', 'i', 'o', 'u']) !== false\
    \ ? $vowels + 1 : $vowels;\n\t\t\t$consonants = array_search($character, ['a',\
    \ 'e', 'i', 'o', 'u']) === false ? $consonants + 1 : $consonants;\n\t\t}\n\t\t\
    if ($consonants === $n) {\n\t\t\t$output[] = $word;\n\t\t}\n\t}\n\treturn $output;\n\
    }\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(select_words(\"simple white space\", 2));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(select_words(\"Hello world\", 4));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n    [0] => Uncle\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $res = [];\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $word) {\n    $con_num = 0;\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      if (in_array($word[$i], $consonants)) {\n\
    \        $con_num++;\n      }\n    }\n    if ($con_num == $n) {\n      $res[]\
    \ = $word;\n    }\n  }\n  return $res;\n}\n\necho '<pre>';\nvar_dump(select_words(\"\
    Mary had a little lamb\", 4));\necho '</pre>';\n\necho '<pre>';\nvar_dump(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\n\necho '<pre>';\nvar_dump(select_words(\"\
    simple white space\", 2));\necho '</pre>';\n\necho '<pre>';\nvar_dump(select_words(\"\
    Hello world\", 4));\necho '</pre>';\n\necho '<pre>';\nvar_dump(select_words(\"\
    Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n</pre><pre>array(1)\
    \ {\n  [0]=>\n  string(4) \"lamb\"\n}\n</pre><pre>array(0) {\n}\n</pre><pre>array(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\n</pre><pre>array(1) {\n  [0]=>\n  string(5)\
    \ \"Uncle\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvigdcuo.php:56\n\
    Stack trace:\n#0 /tmp/tmphvigdcuo.php(64): test()\n#1 {main}\n  thrown in /tmp/tmphvigdcuo.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = 'qwrtypsdfghjklzxcvbnm';\n    $array = explode(' ',\
    \ $s);\n    $result = [];\n    for ($i = 0; $i < count($array); $i++) {\n    \
    \    $c = str_split($array[$i]);\n        $counter = 0;\n        for ($j = 0;\
    \ $j < count($c); $j++) {\n            if (strpos($consonants, $c[$j]) !== false)\
    \ {\n                $counter++;\n            }\n        }\n        if ($counter\
    \ == $n) {\n            array_push($result, $array[$i]);\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0786rbtk.php:38\n\
    Stack trace:\n#0 /tmp/tmp0786rbtk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0786rbtk.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n    $words = explode(\" \", $s);\n    $words_with_n_consonants =\
    \ [];\n    foreach ($words as $word) {\n        $word_length = strlen($word);\n\
    \        $num_consonants = 0;\n        for ($i = 0; $i < $word_length; $i++) {\n\
    \            if (in_array($word[$i], $consonants)) {\n                $num_consonants++;\n\
    \            }\n        }\n        if ($num_consonants == $n) {\n            array_push($words_with_n_consonants,\
    \ $word);\n        }\n    }\n    return $words_with_n_consonants;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6futw5v.php:38\n\
    Stack trace:\n#0 /tmp/tmpv6futw5v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv6futw5v.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if (count(array_intersect(str_split($value), array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"))) == $n) {\n    \
    \        $result[] = $value;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwgm0p0_g.php:30\nStack trace:\n#0 /tmp/tmpwgm0p0_g.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwgm0p0_g.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(' ', $s);\n\t$consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \t$result = [];\n\t\n\tforeach ($words as $word) {\n\t\t$count = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($word); $i++) {\n\t\t\tif (strpos($consonants, strtolower($word[$i]))\
    \ !== false) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count === $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho implode(', ',\
    \ select_words(\"Mary had a little lamb\", 4)) . \"\\n\";\necho implode(', ',\
    \ select_words(\"Mary had a little lamb\", 3)) . \"\\n\";\necho implode(', ',\
    \ select_words(\"simple white space\", 2)) . \"\\n\";\necho implode(', ', select_words(\"\
    Hello world\", 4)) . \"\\n\";\necho implode(', ', select_words(\"Uncle sam\",\
    \ 3)) . \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "little\nMary, lamb\n\nworld\nUncle\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n   $vowels = array('a', 'e', 'i', 'o', 'u');\n   $list = explode(' ',\
    \ $s);\n   $result = array();\n   foreach ($list as $word) {\n       $count =\
    \ 0;\n       for ($i = 0; $i < strlen($word); $i++) {\n           if (!in_array($word[$i],\
    \ $vowels)) {\n               $count++;\n           }\n       }\n       if ($count\
    \ == $n) {\n           $result[] = $word;\n       }\n   }\n   return $result;\n\
    }\necho(implode(', ', select_words(\"Mary had a little lamb\", 4)));\necho(implode(',\
    \ ', select_words(\"Mary had a little lamb\", 3)));\necho(implode(', ', select_words(\"\
    simple white space\", 2)));\necho(implode(', ', select_words(\"Hello world\",\
    \ 4)));\necho(implode(', ', select_words(\"Uncle sam\", 3)));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "littleMary, lambworld\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmptoobw8_d.php:44\nStack trace:\n#0 /tmp/tmptoobw8_d.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmptoobw8_d.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz';\n\
    \  $new_words = [];\n  foreach ($words as $word) {\n    $word_consonants = 0;\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      if (stripos($consonants,\
    \ $word[$i]) !== false) {\n        $word_consonants++;\n      }\n    }\n    if\
    \ ($word_consonants === $n) {\n      $new_words[] = $word;\n    }\n  }\n  return\
    \ $new_words;\n}\nprint_r(select_words(\"simple white space\", 2));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    if(trim($s) == '') {\n        return [];\n    }\n    $words = explode('\
    \ ', $s);\n    $selectedWords = [];\n    foreach($words as $word) {\n        $consonantsCount\
    \ = 0;\n        $word = str_split($word);\n        foreach($word as $letter) {\n\
    \            if(strtolower($letter) != 'a' && strtolower($letter) != 'e' && strtolower($letter)\
    \ != 'i' && strtolower($letter) != 'o' && strtolower($letter) != 'u') {\n    \
    \            $consonantsCount++;\n            }\n        }\n        if($consonantsCount\
    \ == $n) {\n            $selectedWords[] = implode('', $word);\n        }\n  \
    \  }\n    return $selectedWords;\n}\n\nvar_dump(select_words(\"Mary had a little\
    \ lamb\", 4) == [\"little\"]);\nvar_dump(select_words(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"]);\nvar_dump(select_words(\"simple white space\",\
    \ 2) == []);\nvar_dump(select_words(\"Hello world\", 4) == [\"world\"]);\nvar_dump(select_words(\"\
    Uncle sam\", 3) == [\"Uncle\"]);\nvar_dump(select_words(\"\", 3) == []);\nvar_dump(select_words(\"\
    \", 0) == []);\nvar_dump(select_words(\"\", 1) == []);\nvar_dump(select_words(\"\
    \", 2) == []);\nvar_dump(select_words(\"\", 3) == []);\nvar_dump(select_words(\"\
    \", 4) == []);\nvar_dump(select_words(\"\", 5) == []);\nvar_dump(select_words(\"\
    \ \", 0) == []);\nvar_dump(select_words(\" \", 1) == []);\nvar_dump(select_words(\"\
    \ \", 2) == []);\nvar_dump(select_words(\" \", 3) == []);\nvar_dump(select_words(\"\
    \ \", 4) == []);\nvar_dump(select_words(\" \", 5) == []);\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbnj1ihlf.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  $result = [];\n  for ($i =\
    \ 0; $i < count($arr); $i++) {\n    $count = 0;\n    for ($j = 0; $j < strlen($arr[$i]);\
    \ $j++) {\n      if (in_array(strtolower($arr[$i][$j]), $consonants)) {\n    \
    \    $count++;\n      }\n    }\n    if ($count == $n) {\n      array_push($result,\
    \ $arr[$i]);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    // WRITE YOUR CODE HERE\n    // please don't touch anything above\
    \ this line\n    $consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n    $arr = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $a)\
    \ {\n        $counter = 0;\n        $len = strlen($a);\n        for ($i = 0; $i\
    \ < $len; $i++) {\n            if (strpos($consonants, $a[$i]) !== false) {\n\
    \                $counter++;\n            }\n        }\n        if ($counter ==\
    \ $n) {\n            array_push($new_arr, $a);\n        }\n    }\n    return $new_arr;\n\
    \    // please don't touch anything below this line\n}\n$s = \"Today Is A BeautiFul\
    \ DAY\";\n$n = 5;\nprint_r(select_words($s, $n));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  if (empty($s)) {\n    return [];\n  }\n  $words = explode(' ', $s);\n\
    \  $res = [];\n  foreach ($words as $w) {\n    if (count_consonants($w) == $n)\
    \ {\n      $res[] = $w;\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpxm8vvu7x.php:20\nStack trace:\n#0 /tmp/tmpxm8vvu7x.php(28): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpxm8vvu7x.php(32): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpxm8vvu7x.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpxm8vvu7x.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arrayS = explode(\" \", $s);\n  $words = [];\n  $y = 0;\n  foreach\
    \ ($arrayS as $key => $value) {\n    $consonants = preg_replace(\"/[^b-df-hj-np-tv-z]/i\"\
    , \"\", $value);\n    if (strlen($consonants) == $n) {\n      $words[$y] = $value;\n\
    \      $y++;\n    }\n  }\n  return $words;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n\t$array = explode(\" \", $s);\n\t$result = [];\n\tforeach ($array as\
    \ $key => $value) {\n\t\tif (substr_count($value, \"a\") + substr_count($value,\
    \ \"e\") + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppo6lbn51.php:28\n\
    Stack trace:\n#0 /tmp/tmppo6lbn51.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppo6lbn51.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $str = preg_replace('/[aeiouAEIOU]/', '', $s);\n    $str = preg_replace('/[\\\
    s]/', '', $str);\n    $array = str_split($str);\n    $array1 = explode(' ', $s);\n\
    \    $array2 = [];\n    foreach ($array1 as $key => $value) {\n        $array3\
    \ = preg_replace('/[aeiouAEIOU]/', '', $value);\n        $array4 = str_split($array3);\n\
    \        if (count($array4) == $n) {\n            $array2[] = $value;\n      \
    \  }\n    }\n    return $array2;\n}\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez1fwub9.php:44\nStack\
    \ trace:\n#0 /tmp/tmpez1fwub9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpez1fwub9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $s = str_replace(' ', '', $s);\n  $arr = str_split($s);\n  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $consonants = array_diff($arr, $vowels);\n\
    \  $result = array();\n  foreach($consonants as $i) {\n    $result[] = preg_grep(\"\
    /^$i+$/\", str_split($s));\n  }\n  return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => M\n        )\n\
    \n    [1] => Array\n        (\n            [2] => r\n        )\n\n    [2] => Array\n\
    \        (\n            [3] => y\n        )\n\n    [3] => Array\n        (\n \
    \           [4] => h\n        )\n\n    [4] => Array\n        (\n            [6]\
    \ => d\n        )\n\n    [5] => Array\n        (\n            [8] => l\n     \
    \       [12] => l\n            [14] => l\n        )\n\n    [6] => Array\n    \
    \    (\n            [10] => t\n            [11] => t\n        )\n\n    [7] =>\
    \ Array\n        (\n            [10] => t\n            [11] => t\n        )\n\n\
    \    [8] => Array\n        (\n            [8] => l\n            [12] => l\n  \
    \          [14] => l\n        )\n\n    [9] => Array\n        (\n            [8]\
    \ => l\n            [12] => l\n            [14] => l\n        )\n\n    [10] =>\
    \ Array\n        (\n            [16] => m\n        )\n\n    [11] => Array\n  \
    \      (\n            [17] => b\n        )\n\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa7auriil.php:31\nStack trace:\n#0 /tmp/tmpa7auriil.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa7auriil.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
