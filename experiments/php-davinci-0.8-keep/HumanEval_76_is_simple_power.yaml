name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
  \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
  // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power($x,\
  \ $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  if ($x == $n) {\n    return true;\n  }\n  $multi = 1;\n  while (true)\
    \ {\n    $multi *= $n;\n    if ($multi == $x) {\n      return true;\n    }\n \
    \   if ($multi > $x) {\n      return false;\n    }\n  }\n}\n ?>", "  // do something\n\
    \  $k = 0;\n  while ($x > 1){\n    $i = 0;\n    while($x > 1){\n      $x /= $n;\n\
    \      $i++;\n    }\n    if ($i > 1 && $k > 0) return false;\n    $k++;\n  }\n\
    \  return true;\n}", "  $pow = log($x) / log($n);\n  return floor($pow) == $pow;\n\
    }\n", "  if($x == 1 && $n == 1) {\n    return true;\n  }\n  for($i = 1; $i <=\
    \ $x; $i++) {\n    if(pow($n, $i) == $x) {\n      return true;\n    }\n  }\n \
    \ return false;\n}", "  for ($i = 0; $i < 6; $i++) {\n    if ($x == pow($n, $i))\
    \ {\n      return true;\n    }\n  }\n  return false;\n}", "  $x = log($x) / log($n);\n\
    \  return floor($x) == $x;\n}", "    if ($x === 0) {\n        return false;\n\
    \    }\n    if ($x === 1) {\n        return true;\n    }\n    $x = log($x) / log($n);\n\
    \    return (is_int($x));\n}", "  if ($x < $n) {\n    return $x == 1;\n  }\n \
    \ return is_simple_power($x / $n, $n);\n}\n\necho is_simple_power(9, 3);", " \
    \ if (log($x, $n) == round(log($x, $n))) {\n    return true;\n  } else {\n   \
    \ return false;\n  }\n}\n\n$a = is_simple_power(1, 4);\nvar_dump($a);\n$a = is_simple_power(2,\
    \ 2);\nvar_dump($a);\n$a = is_simple_power(8, 2);\nvar_dump($a);\n$a = is_simple_power(3,\
    \ 2);\nvar_dump($a);\n$a = is_simple_power(3, 1);\nvar_dump($a);\n$a = is_simple_power(5,\
    \ 3);\nvar_dump($a);", "    return !(sqrt($x) % $n) ? true : false;\n}", "   \
    \ $power = 0;\n    while ($n**$power < $x) {\n        $power++;\n    }\n    return\
    \ $n**$power == $x;\n}\n", "    if ($x === 1) {\n        return true;\n    }\n\
    \    if (intval(sqrt($x)) === sqrt($x)) {\n        return intval(sqrt($x)) ===\
    \ $n;\n    }\n    return false;\n}\n", "  $res = $n ** (log($x) / log($n));\n\
    \  return $res == $x;\n}", "  if ($x == $n) {\n    return true;\n  } elseif ($x\
    \ > $n) {\n    return is_simple_power($x / $n, $n);\n  } else {\n    return false;\n\
    \  }\n}", "\t// your code\n}", "\t$x = (string)$x;\n\t$n = (string)$n;\n\treturn\
    \ ($x==$n.\"0\") ? true : false;\n}", "  if ($x == $n) return true;\n  if ($x\
    \ % $n != 0) return false;\n  return is_simple_power($x / $n, $n);\n}\n", "  $i\
    \ = 0;\n  while ($n**$i <= $x) {\n    if ($n**$i == $x) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n ?>", "  return (log($x, $n) == intval(log($x,\
    \ $n))) ? true : false;\n}", "  return log($x, $n) == round(log($x, $n)) ? true\
    \ : false;\n}\n", "  if (log($x, $n) % 1 == 0) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    if ($x == 1) {\n        return true;\n   \
    \ }\n    $int = intval(log($x, $n));\n    return pow($n, $int) == $x;\n}\n", " \
    \ $i = 1;\n  while(pow($n, $i) <= $x) {\n    if(pow($n, $i) == $x) {\n      return\
    \ true;\n    }\n    $i++;\n  }\n  return false;\n}", "    if($x == $n) {\n   \
    \     return true;\n    }\n    for($i = 2; $i <= $x; $i++) {\n        $res = pow($n,\
    \ $i);\n        if($res == $x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}", "  if($x < 1 || $n < 1) return false;\n  if($x == 1) return\
    \ true;\n  $result = 1;\n  while($result <= $x) {\n    if($result == $x) return\
    \ true;\n    $result *= $n;\n  }\n  return false;\n}\necho is_simple_power(1,\
    \ 4); // => true\necho is_simple_power(2, 2); // => true\necho is_simple_power(8,\
    \ 2); // => true\necho is_simple_power(3, 2); // => false\necho is_simple_power(3,\
    \ 1); // => false\necho is_simple_power(5, 3); // => false", "    $pow = pow($n,\
    \ intval(log($x, $n)));\n    return $pow == $x;\n}\necho is_simple_power(1, 4)\
    \ === true ? 'correct' : 'incorrect';\necho PHP_EOL;\necho is_simple_power(2,\
    \ 2) === true ? 'correct' : 'incorrect';\necho PHP_EOL;\necho is_simple_power(8,\
    \ 2) === true ? 'correct' : 'incorrect';\necho PHP_EOL;\necho is_simple_power(3,\
    \ 2) === false ? 'correct' : 'incorrect';\necho PHP_EOL;\necho is_simple_power(3,\
    \ 1) === false ? 'correct' : 'incorrect';\necho PHP_EOL;\necho is_simple_power(5,\
    \ 3) === false ? 'correct' : 'incorrect';\necho PHP_EOL;", "  // w3schools PHP\
    \ built-in functions\n  // http://www.w3schools.com/php/php_ref_math.asp\n  //\
    \ round() - Rounds a float\n  // pow() - Returns x raised to the power of y\n\
    \  // log() - Natural logarithm\n  // http://www.php.net/manual/en/ref.math.php\n\
    \  // abs() - Absolute value\n  // http://www.w3schools.com/php/php_operators.asp\n\
    \  // == - equal to\n  // === - identical\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\
    \  return $x == pow($n, round(log($x, $n))) ? true : false;\n}\n", "  if ($x ==\
    \ $n ** (int)log($x, $n)) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  if($x == $n) {\n    return true;\n  } else if($x % $n != 0) {\n\
    \    return false;\n  } else {\n    return is_simple_power($x / $n, $n);\n  }\n\
    }\n\necho is_simple_power(8, 2);", "\treturn (int)log($x, $n)==log($x, $n);\n}",
  "  $y = 1;\n  while($y <= $x) {\n    if($y == $x) {\n      return true;\n    }\n\
    \    $y *= $n;\n  }\n  return false;\n}", "    if($x % $n != 0) {\n        return\
    \ false;\n    }\n    $count = 0;\n    while($x >= $n) {\n        $x = $x / $n;\n\
    \        $count++;\n    }\n    if($x == 1) {\n        return true;\n    }\n  \
    \  return false;\n}", "  $result = pow($n, floor(log($x, $n)));\n  return $result\
    \ == $x;\n}", "  if ($x == 1) return true;\n  $p = 1;\n  for ($i = 1; $i < PHP_INT_MAX;\
    \ $i++) {\n    $p *= $n;\n    if ($p == $x) return true;\n    if ($p > $x) return\
    \ false;\n  }\n}\n", "    if($x == 1) {\n        return true;\n    }\n    $int\
    \ = 0;\n    $power = $n;\n    while($power <= $x) {\n        $power *= $n;\n \
    \       $int++;\n    }\n    if($power == $x) {\n        return true;\n    }\n\
    \    return false;\n}", "    return pow($n, intval(log($x, $n))) == $x;\n}\n",
  "  return (log($x, $n) == floor(log($x, $n))) ? true : false;\n}", "  return pow($n,\
    \ floor(log($x)/log($n))) == $x;\n}\n\necho is_simple_power(8, 2).\"\\n\";\necho\
    \ is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5,\
    \ 3).\"\\n\";\necho is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2, 2).\"\
    \\n\";\n", "  return pow($n, round(log($x) / log($n))) == $x;\n}", "    if ($x\
    \ == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return false;\n\
    \    }\n    if ($x == $n) {\n        return true;\n    }\n    if ($x == pow($n,\
    \ 2)) {\n        return true;\n    }\n    $i = 1;\n    $res = pow($n, $i);\n \
    \   $i++;\n    while ($res < $x) {\n        $res = pow($n, $i);\n        $i++;\n\
    \    }\n    if ($res == $x) {\n        return true;\n    }\n    return false;\n\
    }", "    if ($x == 0) return true;\n    $r = $x;\n    while($r%$n == 0){\n   \
    \     $r /= $n;\n    }\n    return $r == 1;\n}\necho is_simple_power(1, 4);",
  "  for ($i = 0; $i < $x; $i++) {\n    if ($x == ($n ** $i)) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  // $y = $n ** $x;\n  // return $y === $x;\n\
    \  return $x / $n === round($x / $n);\n}\n", "  return pow($n, round(log($x, $n)))\
    \ === $x;\n}", "    // https://stackoverflow.com/questions/15056472/php-check-if-a-number-is-power-of-another-number\n\
    \    // Solution:\n    // pow(intval($x), 1/$n) == $x;\n    // is_integer(pow(intval($x),\
    \ 1/$n));\n    // !(pow(intval($x), 1/$n)%1);\n    return (is_integer(pow(intval($x),\
    \ 1/$n)));\n}", "\tif ($x == 1) {\n\t\treturn true;\n\t}\n\t$power = 1;\n\t$nextPower\
    \ = $n;\n\twhile ($nextPower <= $x) {\n\t\tif ($nextPower == $x) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\t$power = $nextPower;\n\t\t$nextPower *= $n;\n\t}\n\treturn\
    \ false;\n}\n\necho is_simple_power(8, 2);\necho is_simple_power(3, 2);\necho\
    \ is_simple_power(5, 3);\necho is_simple_power(9, 3);", "  $isPower = false;\n\
    \  $pow = $n;\n  $i = 0;\n  while(!$isPower && $pow <= $x) {\n    if($pow == $x)\
    \ $isPower = true;\n    else {\n      $pow *= $n;\n      $i++;\n    }\n  }\n \
    \ return $isPower;\n}\necho is_simple_power(25, 5) . \"\\n\";\necho is_simple_power(9,\
    \ 3) . \"\\n\";\necho is_simple_power(33, 11) . \"\\n\";\necho is_simple_power(9,\
    \ 2) . \"\\n\";\necho is_simple_power(125, 3) . \"\\n\";\necho is_simple_power(9,\
    \ 1) . \"\\n\";", "    return $x == pow($n, (int) log($x, $n));\n}", "    if ($x\
    \ == 1) return true;\n    for ($i = 0; $i < $x; $i++) {\n        if ($n ** $i\
    \ == $x) return true;\n    }\n    return false;\n}", "  if(log($x, $n) == floor(log($x,\
    \ $n))) {\n    return true;\n  }\n  return false;\n}", "  $power = 1;\n  while\
    \ ($power <= $x) {\n    if ($power == $x) {\n      return true;\n    }\n    $power\
    \ *= $n;\n  }\n  return false;\n}", "  $check = false;\n  $int = 0;\n  while($check\
    \ == false) {\n    if ($n ** $int == $x) {\n      $check = true;\n    } elseif\
    \ ($n ** $int > $x) {\n      $check = true;\n      $int = 0;\n    }\n    $int++;\n\
    \  }\n  return $int;\n}", "  return $x % (1/log($n))==0;\n}\n ?>", "    if ($x\
    \ == 1) {\n        return true;\n    }\n    if ($x < $n) {\n        return false;\n\
    \    }\n    if ($x % $n == 0) {\n        return is_simple_power($x / $n, $n);\n\
    \    }\n    return false;\n}\n\necho is_simple_power(1, 4) . PHP_EOL; // true\n\
    echo is_simple_power(2, 2) . PHP_EOL; // true\necho is_simple_power(8, 2) . PHP_EOL;\
    \ // true\necho is_simple_power(3, 2) . PHP_EOL; // false\necho is_simple_power(3,\
    \ 1) . PHP_EOL; // false\necho is_simple_power(5, 3) . PHP_EOL; // false", " \
    \   $int = 1;\n    $pow = $n;\n    while ($pow <= $x) {\n        if ($pow == $x)\
    \ {\n            return true;\n        }\n        $pow *= $n;\n        $int++;\n\
    \    }\n    return false;\n}\n", "  $power = $n;\n  while ($power < $x) {\n  \
    \  $power *= $n;\n  }\n  return $power == $x;\n}\n", "    if(!$x) return false;\n\
    \    if($x == 1) return true;\n    $pow = 1;\n    while($pow < $x) {\n       \
    \ $pow *= $n;\n    }\n    return $pow == $x;\n}", "  return log($x, $n) == intval(log($x,\
    \ $n));\n}", "    return $x == pow($n, round(log($x, $n)));\n}", "    return pow($n,\
    \ intval(log($x, $n))) == $x;\n}\necho is_simple_power(64, 2);", "    return $x\
    \ == pow($n, intval(log($x, $n)));\n}\n\necho is_simple_power(8, 2);", "  if ($x\
    \ <= 0 || $n <= 0) return false;\n  while($x >= 1) {\n    if ($x === 1) return\
    \ true;\n    $x /= $n;\n  }\n  return false;\n}", "  return log($x, $n) == round(log($x,\
    \ $n));\n}", "  return pow($n, intval(log($x, $n))) == $x;\n}\n", "    $pow =\
    \ 1;\n    while ($pow < $x) {\n        $pow *= $n;\n    }\n    return $pow ==\
    \ $x;\n}\n", "    // Your code here\n    $power = 0;\n    while($n**$power < $x)\
    \ {\n      $power++;\n    }\n    if($n**$power == $x) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n}", "    if($x == 1) return true;\n\
    \    $power = 0;\n    $base = $n;\n    while($base < $x) {\n        $base *= $n;\n\
    \        $power++;\n    }\n    return $base == $x;\n}\n", "    $log = log($x,\
    \ $n);\n    if(is_int($log)){\n        return true;\n    }\n    return false;\n\
    }\n", "    if ($x > 0 && $n > 0) {\n        if ($x === 1 && $n === 1) {\n    \
    \        return true;\n        }\n        $number = $n;\n        while ($number\
    \ < $x) {\n            $number *= $n;\n        }\n        if ($number === $x)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "  return\
    \ (log($x, $n) - intval(log($x, $n)) == 0);\n}", "    return pow($n, round(log($x,\
    \ $n))) == $x;\n}", "\t$i = 1;\n\t$count = 0;\n\tif ($x == 1) {\n\t\treturn true;\n\
    \t} else {\n\t\twhile ($count < $x) {\n\t\t\t$count = $n ** $i;\n\t\t\tif ($count\
    \ == $x) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t$i ++;\n\t\t}\n\t}\n\treturn\
    \ false;\n}", "  $exp = ceil(log($x, $n));\n  return $n ** $exp == $x;\n}\n\n\
    is_simple_power(1, 4); // => true\nis_simple_power(2, 2); // => true\nis_simple_power(8,\
    \ 2); // => true\nis_simple_power(3, 2); // => false\nis_simple_power(3, 1); //\
    \ => false\nis_simple_power(5, 3); // => false", "    $y = log($x, $n);\n    if\
    \ ($y == round($y)){\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    $y = pow($n, intval(log($x)/log($n)));\n    return ($y == $x);\n\
    }", "  return (log($x, $n)%1 == 0) ? true : false;\n}", "  $i = 0;\n  if($x >\
    \ 0) {\n    while(pow($n, $i) < $x) {\n      $i++;\n    }\n    return pow($n,\
    \ $i) == $x;\n  }\n  return false;\n}\n\nvar_dump(is_simple_power(1, 4));\nvar_dump(is_simple_power(2,\
    \ 2));\nvar_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3, 2));\nvar_dump(is_simple_power(3,\
    \ 1));\nvar_dump(is_simple_power(5, 3));", "  $pow = $n;\n  while ($pow <= $x)\
    \ {\n    if ($pow == $x) {\n      return true;\n    }\n    $pow *= $n;\n  }\n\
    \  return false;\n}", "    return $x === pow($n,round(log($x,$n)));\n}\n\necho\
    \ is_simple_power(1, 4);\necho \"\\n\";\necho is_simple_power(2, 2);\necho \"\\\
    n\";\necho is_simple_power(8, 2);\necho \"\\n\";\necho is_simple_power(3, 2);\n\
    echo \"\\n\";\necho is_simple_power(3, 1);\necho \"\\n\";\necho is_simple_power(5,\
    \ 3);\necho \"\\n\";", "  for ($i = 1; $i <= $x; $i++) {\n    if ($n ** $i ==\
    \ $x) {\n      return true;\n    }\n  }\n  return false;\n}", "    if (pow($n,(int)log($x,$n))\
    \ === $x){\n        return true;\n    }\n    return false;\n}\n", "  if(log($x,\
    \ $n) % 1 == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}", " \
    \ $int = log($x, $n);\n  return $int == floor($int);\n}\n", "  if ($x === 1) {\n\
    \    return true;\n  }\n  if ($x === $n) {\n    return true;\n  }\n  while ($x\
    \ % $n === 0) {\n    $x /= $n;\n  }\n  return $x === 1;\n}\necho is_simple_power(1,\
    \ 4);\necho \"\\n\";\necho is_simple_power(2, 2);\necho \"\\n\";\necho is_simple_power(8,\
    \ 2);\necho \"\\n\";\necho is_simple_power(3, 2);\necho \"\\n\";\necho is_simple_power(3,\
    \ 1);\necho \"\\n\";\necho is_simple_power(5, 3);\necho \"\\n\";", "  return $x\
    \ == 1 ? true : pow($n, floor(log($x) / log($n))) == $x;\n}\n", "  return (log($x)\
    \ / log($n)) == round(log($x) / log($n));\n}", "  if ($x == 1) {\n    return true;\n\
    \  } else {\n    $result = $n;\n    $counter = 1;\n    while ($result < $x) {\n\
    \      $result *= $n;\n      $counter++;\n    }\n    if ($result == $x) {\n  \
    \    return true;\n    } else {\n      return false;\n    }\n  }\n}", "  // Your\
    \ code here\n}\n\nis_simple_power(1, 4);\nis_simple_power(2, 2);\nis_simple_power(8,\
    \ 2);\nis_simple_power(3, 2);\nis_simple_power(3, 1);\nis_simple_power(5, 3);",
  "    $m=log($x,$n);\n    if(($m*100)%100==0)\n        return true;\n    else return\
    \ false;\n}", "    return (pow($n, (log($x) / log($n))) == $x) ? true : false;\n\
    }\n", "    $pow = log($x, $n);\n    if (round($pow) == $pow) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "  for ($i = 0; $i\
    \ < 20; $i++) {\n    if (pow($n, $i) == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\necho \"is_simple_power(1, 4) => true: \".is_simple_power(1,\
    \ 4);\necho \"<br>\";\necho \"is_simple_power(2, 2) => true: \".is_simple_power(2,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(8, 2) => true: \".is_simple_power(8,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(3, 2) => false: \".is_simple_power(3,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(3, 1) => false: \".is_simple_power(3,\
    \ 1);\necho \"<br>\";\necho \"is_simple_power(5, 3) => false: \".is_simple_power(5,\
    \ 3);\necho \"<br>\";\necho \"is_simple_power(256, 2) => true: \".is_simple_power(256,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(4, 4) => true: \".is_simple_power(4,\
    \ 4);\necho \"<br>\";\necho \"is_simple_power(243, 3) => true: \".is_simple_power(243,\
    \ 3);\necho \"<br>\";\necho \"is_simple_power(14, 1) => true: \".is_simple_power(14,\
    \ 1);\necho \"<br>\";\necho \"is_simple_power(1024, 2) => true: \".is_simple_power(1024,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(4, 1) => true: \".is_simple_power(4,\
    \ 1);\necho \"<br>\";\necho \"is_simple_power(80, 2) => false: \".is_simple_power(80,\
    \ 2);\necho \"<br>\";\necho \"is_simple_power(81, 3) => true: \".is_simple_power(81,\
    \ 3);\necho \"<", "  if($x==1)\n    return true;\n  $i=1;\n  while(pow($n,$i)<=$x){\n\
    \    if(pow($n,$i)==$x)\n      return true;\n    $i++;\n  }\n  return false;\n\
    }\n", "    if ($x==1) {\n        return true;\n    }\n    if ($x<=0||$n<=0) {\n\
    \        return false;\n    }\n    if (pow($n,intval(log($x,$n)))==$x) {\n   \
    \     return true;\n    }\n    return false;\n}\n\necho is_simple_power(1, 4).\"\
    \\n\";\necho is_simple_power(2, 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\"\
    ;\necho is_simple_power(3, 2).\"\\n\";\necho is_simple_power(3, 1).\"\\n\";\n\
    echo is_simple_power(5, 3).\"\\n\";", "    $i = 1;\n    while ($i <= $x) {\n \
    \       if (pow($n, $i) == $x) {\n            return true;\n        }\n      \
    \  $i++;\n    }\n    return false;\n}", "\t$int = log($x, $n);\n\treturn ($int\
    \ == floor($int))? true : false;\n}\n\necho is_simple_power(3, 1);\n", "    if\
    \ ($x == $n) return true;\n    $res = $n;\n    for ($i = 1; $res < $x; $i++) {\n\
    \        $res *= $n;\n        if ($res == $x) return true;\n    }\n    return\
    \ false;\n}", "  // ...\n}\n ?>", "    $result = pow($n, (int) log($x, $n));\n\
    \    return $result == $x;\n}\n\necho is_simple_power(27, 3) . \"\\n\";\necho\
    \ is_simple_power(27, 4) . \"\\n\";\necho is_simple_power(256, 4) . \"\\n\";\n\
    echo is_simple_power(2, 10) . \"\\n\";\necho is_simple_power(2, 8) . \"\\n\";\n\
    echo is_simple_power(10, 5) . \"\\n\";\necho is_simple_power(10, 3) . \"\\n\"\
    ;\necho is_simple_power(81, 3) . \"\\n\";\necho is_simple_power(27, 3) . \"\\\
    n\";\necho is_simple_power(3, 3) . \"\\n\";\necho is_simple_power(2, 4) . \"\\\
    n\";\necho is_simple_power(16, 2) . \"\\n\";\necho is_simple_power(28, 2) . \"\
    \\n\";\necho is_simple_power(25, 5) . \"\\n\";\necho is_simple_power(3, 5) . \"\
    \\n\";\necho is_simple_power(24, 2) . \"\\n\";\necho is_simple_power(32, 2) .\
    \ \"\\n\";\necho is_simple_power(27, 3) . \"\\n\";\necho is_simple_power(3, 2)\
    \ . \"\\n\";\necho is_simple_power(10, 2) . \"\\n\";\necho is_simple_power(5,\
    \ 2) . \"\\n\";\necho is_simple_power(7, 2) . \"\\n\";\necho is_simple_power(7,\
    \ 3) . \"\\n\";\necho is_simple_power(7, 4) . \"\\n\";\necho is_simple_power(27,\
    \ 3) . \"\\n\";\necho is_simple_power(27, 2) . \"\\n\";\necho is_simple_power(27,\
    \ 1) . \"\\n\";\necho is_simple_power(3, 3) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\n", "    if ($x == 0) {\n\
    \        return false;\n    }\n    for ($i = 0; pow($n, $i) <= $x; $i++) {\n \
    \       if (pow($n, $i) == $x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}", "    $i = 0;\n    while ($x > $n) {\n        $x = $x /\
    \ $n;\n        $i++;\n    }\n    return $x == $n;\n}", "    if ($x == 1 && $n\
    \ == 0) {\n        return true;\n    }\n    if ($x == 0 && $n == 0) {\n      \
    \  return false;\n    }\n    if ($x == 0) {\n        return true;\n    }\n   \
    \ if ($n == 0) {\n        return false;\n    }\n    $p = log($x, $n);\n    if\
    \ (floor($p) == $p) {\n        return true;\n    }\n    return false;\n}", " \
    \   // TODO: Your code here!\n    $div = floor($x / $n);\n    if($div == 1){\n\
    \      return true;\n    } else if($div < 1) {\n      return false;\n    } else\
    \ {\n      return is_simple_power($div, $n);\n    }\n}", "  $number = log($x,\
    \ $n);\n  return floor($number) == $number ? true : false;\n}", "  if ($x == $n){\n\
    \    return true;\n  }\n  if ($x < $n){\n    return false;\n  }\n  if (pow($n,\
    \ floor(log($x, $n))) == $x){\n    return true;\n  }\n  return false;\n}", " \
    \   if(($n !=0) && ($x%$n == 0)){\n      if($x == 1){\n        return true;\n\
    \      }\n      if(($x/$n)%$n == 0){\n        $x = $x/$n;\n        return is_simple_power($x,\
    \ $n);\n      }\n    }\n    return false;\n}", "  $int = log($x, $n);\n  return\
    \ $int == intval($int);\n}\n", "    return (bool)pow($n, $x);\n}\n", "    if ($x\
    \ === $n) {\n        return true;\n    }\n    for ($i = 2; $i <= $x; $i++) {\n\
    \        if ($n ** $i === $x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nvar_dump(is_simple_power(1, 4));\nvar_dump(is_simple_power(2,\
    \ 2));\nvar_dump(is_simple_power(8, 2));\nvar_dump(is_simple_power(3, 2));\nvar_dump(is_simple_power(3,\
    \ 1));\nvar_dump(is_simple_power(5, 3));", "  $i = $n;\n  while($i < $x) {\n \
    \   $i *= $n;\n  }\n  return $i == $x;\n}\n", "  return pow($n, round(log($x,\
    \ $n))) == $x;\n}", "    if ($x == 1) return true;\n    while ($x > 1) {\n   \
    \     if ($x % $n !== 0) return false;\n        $x /= $n;\n    }\n    return true;\n\
    }\n", "  $pow = log($x) / log($n);\n  return floor($pow) == $pow;\n}", "  $int\
    \ = intval(log($x, $n));\n  return pow($n, $int) == $x;\n}", "    $result = pow($n,\
    \ round(log($x, $n)));\n    return $result == $x;\n}", "  $result = false;\n \
    \ $int = intval(log($x, $n));\n  if($n**$int == $x) {\n    $result = true;\n \
    \ }\n  return $result;\n}", "    if($x === 1) {\n        return true;\n    }\n\
    \    if($x === $n) {\n        return true;\n    }\n    $exp = 0;\n    $x_val =\
    \ $x;\n    $n_val = $n;\n    while($x_val > 1) {\n        $x_val = $x_val / $n_val;\n\
    \        $exp++;\n    }\n    return (1 / $x_val) % 1 === 0;\n}\n", "  $i = 1;\n\
    \  $y = $n;\n  while ($y < $x) {\n    $y *= $n;\n    $i++;\n  }\n  return $y ==\
    \ $x ? $i : false;\n}", "  for ($i = 1; ; $i++) {\n    if (pow($n, $i) == $x)\
    \ {\n      return true;\n    } elseif (pow($n, $i) > $x) {\n      return false;\n\
    \    }\n  }\n}", "  if($x == $n ** (int)log($x, $n)) {\n    return true;\n  }\n\
    \  return false;\n}\necho is_simple_power(5, 5);", "  for ($i = 0; $i < $x; $i++)\
    \ {\n    if ($n ** $i == $x) {\n      return true;\n    }\n  }\n  return false;\n\
    }", "    $int = log($x, $n);\n    if(is_int($int)){\n        return true;\n  \
    \  }else{\n        return false;\n    }\n}", "  $count = 0;\n  for ($i = 0; $i\
    \ < $x; $i++) {\n    if ($x == $n ** $i) {\n      $count++;\n    }\n  }\n  if\
    \ ($count == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    echo is_simple_power(1, 4);\necho '<br />';\necho is_simple_power(2, 2);\necho\
    \ '<br />';\necho is_simple_power(8, 2);\necho '<br />';\necho is_simple_power(3,\
    \ 2);\necho '<br />';\necho is_simple_power(3, 1);\necho '<br />';\necho is_simple_power(5,\
    \ 3);\necho '<br />';", "  $i = 1;\n  while (pow($n, $i) <= $x) {\n    if (pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n}",
  "  if ($x == 1) return true;\n  for ($i = 2; $i < $x; $i++) {\n    if (pow($n, $i)\
    \ == $x) return true;\n  }\n  return false;\n}", "    if ($x == 1 && $n > 1) return\
    \ false;\n    if ($x == $n) return true;\n    return ($x % $n == 0 && is_simple_power($x\
    \ / $n, $n));\n}", "  return log($x) / log($n) == round(log($x) / log($n));\n\
    }\n", "  if(floor(log($x)/log($n)) == log($x)/log($n)) {\n    return true;\n \
    \ } else {\n    return false;\n  }\n}", "    $n = log($x, $n);\n    return $n\
    \ == (int)$n;\n}", "    //your code here\n    return $x == $n ** (int)log($x,\
    \ $n);\n}\n\nis_simple_power(3, 2);", "  return is_integer(log($x, $n));\n}",
  "    $val = pow($n, round(log($x, $n)));\n    return $val == $x;\n}\n", "    return\
    \ !log($x, $n) % 1;\n}\n", "  $x = sqrt($x);\n  if($x == round($x)) {\n    if($x\
    \ == round($x/$n)) {\n      return true;\n    }\n  }\n  return false;\n}", " \
    \ if ($x == 1 && $n == 1) {\n    return true;\n  }\n  $x = log($x) / log($n);\n\
    \  return (int)$x == $x;\n}", "    $count = 0;\n    $i = 1;\n    if ($x == $n)\
    \ {\n        return true;\n    }\n    while ($i != $x) {\n        $i *= $n;\n\
    \        $count++;\n    }\n    return $i == $x ? true : false;\n}", "  return\
    \ $x==pow($n, round(log($x)/log($n)));\n}\necho is_simple_power(2,2);", "  if\
    \ ($x == 1) {\n    return true;\n  }\n  $i = 1;\n  while ($n ** $i <= $x) {\n\
    \    if ($n ** $i == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return\
    \ false;\n}", "  // Good luck!\n  if ($x === 1 && $n === 1) {\n    return true;\n\
    \  }\n  if ($x === 0 || $n === 0) {\n    return false;\n  }\n  for ($i = 0; $i\
    \ < PHP_INT_MAX; $i++) {\n    if ($n ** $i === $x) {\n      return true;\n   \
    \ }\n    if ($n ** $i > $x) {\n      return false;\n    }\n  }\n}\n\nis_simple_power(1,\
    \ 4);\nis_simple_power(2, 2);\nis_simple_power(8, 2);\nis_simple_power(3, 2);\n\
    is_simple_power(3, 1);\nis_simple_power(5, 3);", "  if ($x==1) return true;\n\
    \  while ($x > 1) {\n    if (is_int($x/$n)){\n      $x /= $n;\n    }\n    else\
    \ return false;\n  }\n  return true;\n}", "  $pow = log($x, $n);\n  return (pow($n,\
    \ floor($pow)) == $x);\n}\n\necho is_simple_power(1, 4).\"\\n\";\necho is_simple_power(2,\
    \ 2).\"\\n\";\necho is_simple_power(8, 2).\"\\n\";\necho is_simple_power(3, 2).\"\
    \\n\";\necho is_simple_power(3, 1).\"\\n\";\necho is_simple_power(5, 3).\"\\n\"\
    ;", "  $num = 1;\n  while($num < $x) {\n    $num *= $n;\n  }\n  return $num ==\
    \ $x;\n}", "    $a = log($x) / log($n);\n    return floor($a) == $a;\n}", "\t\
    $val = pow($n,intval(log($x,$n)));\n\treturn ($val == $x ? true : false);\n}",
  "    if ($x == 1 || $x == $n) return true;\n    $i = 2;\n    $res = pow($n, $i);\n\
    \    while ($res <= $x) {\n        if ($res == $x) return true;\n        $i++;\n\
    \        $res = pow($n, $i);\n    }\n    return false;\n}\n", "  if ($x == $n)\
    \ {\n    return true;\n  } elseif ($x < $n) {\n    return false;\n  }\n  $x =\
    \ $x / $n;\n  return is_simple_power($x, $n);\n}\n\necho is_simple_power(1, 4);",
  "    if ($x == 1) {\n        return true;\n    }\n    if ($x < $n) {\n        return\
    \ false;\n    }\n    $pow = 0;\n    while ((pow($n, $pow) * $n) <= $x) {\n   \
    \     if (pow($n, $pow) * $n == $x) {\n            return true;\n        }\n \
    \       $pow++;\n    }\n    return false;\n}", "  if(pow($n, floor(log($x, $n)))\
    \ === $x) return true;\n  return false;\n}\n\necho is_simple_power(4,4);\necho\
    \ is_simple_power(4,2);\necho is_simple_power(8,2);\necho is_simple_power(3,2);\n\
    echo is_simple_power(3,1);\necho is_simple_power(5,3);\n", "    return (log($x)\
    \ / log($n)) % 1 == 0;\n}", "  if ($x == 1) return true;\n  $pow = pow($n, 1);\n\
    \  $i = 1;\n  while ($pow < $x) {\n    $i++;\n    $pow = pow($n, $i);\n  }\n \
    \ return $pow == $x;\n}", "  for ($i = 0; $i < 100; $i++) {\n    if ($x === pow($n,\
    \ $i)) {\n      return true;\n    }\n  }\n  return false;\n}\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);\n ?>", "  if($x == 1) {\n    return true;\n  }\n  if($x < $n) {\n    return\
    \ false;\n  }\n  if($x % $n !== 0) {\n    return false;\n  }\n  if($x / $n !==\
    \ 1) {\n    return is_simple_power($x / $n, $n);\n  }\n  return true;\n}\necho\
    \ is_simple_power(1, 4);\necho is_simple_power(2, 2);\necho is_simple_power(8,\
    \ 2);\necho is_simple_power(3, 2);\necho is_simple_power(3, 1);\necho is_simple_power(5,\
    \ 3);", "    if ( pow($n, intval(log($x, $n))) == $x ) return true;\n    return\
    \ false;\n}\n", "\tif($x == 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\t$result\
    \ = $n;\n\t\twhile($result < $x) {\n\t\t\t$result *= $n;\n\t\t}\n\t\tif($result\
    \ == $x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2, 2) .\
    \ \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3, 2)\
    \ . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5, 3)\
    \ . \"\\n\";\n", "  return pow($n, floor(log($x)/log($n))) == $x;\n}", "\t$i =\
    \ 1;\n\twhile ($n ** $i < $x) {\n\t\t$i++;\n\t}\n\tif ($n ** $i == $x) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}", "    return $x == pow($n,\
    \ round(log($x, $n)));\n}\n", "  $i = $x;\n  while ($i > 1) {\n    $i /= $n;\n\
    \  }\n  return ($i === 1);\n}\n", "  if ($x === 1 && $n === 1) {\n    return true;\n\
    \  }\n  $y = $n;\n  while ($y < $x) {\n    $y *= $n;\n  }\n  return $y === $x;\n\
    }", "  if ($x == 1) {\n    return true;\n  } else {\n    return pow($n, floor(log($x,\
    \ $n))) == $x;\n  }\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";\n", "  if ($x == 1) {\n    return true;\n  }\n  $int = log($x,\
    \ $n);\n  return $int == floor($int);\n}", "    $i = 1;\n    $cur = pow($n, $i);\n\
    \    while ($cur < $x) {\n        $i++;\n        $cur = pow($n, $i);\n    }\n\
    \    return $cur == $x;\n}\n", "  // your code here...\n}", "    // good luck\n\
    \    $power = log($x, $n);\n    return $power == intval($power);\n}\n", "  $pow\
    \ = pow($n, round(log($x, $n)));\n  return ($pow == $x) ? TRUE : FALSE;\n}", " \
    \ $z = pow($n, floor(log($x)/log($n)));\n  if ($z == $x) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  if($x === 1 && $n === 1) return\
    \ true;\n  $divided = $x / $n;\n  return $divided % $n === 0 && is_simple_power($divided,\
    \ $n);\n}\n", "  if ( $x === 1 ) {\n    return true;\n  }\n  for ($i = 2; $i <=\
    \ $x; $i++) {\n    $q = intval($x/$i);\n    if ($q * $i === $x) {\n      return\
    \ is_simple_power($q, $n);\n    }\n  }\n  return false;\n}\n ?>", "  $l = log($x,\
    \ $n);\n  if (round($l) == $l) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n ?>", "\t$y = 0;\n\tif ($x == 1) {\n\t\treturn true;\n\t}\n\tif ($n ==\
    \ 1) {\n\t\treturn false;\n\t}\n\tfor ($i = 1; $i < PHP_INT_MAX; $i++) {\n\t\t\
    $y = pow($n, $i);\n\t\tif ($y > $x) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($y\
    \ == $x) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nprint is_simple_power(10, 2)\
    \ . \"\\n\";", "  if ($x <= 0 || $n <= 0) return false;\n  if ($x == 1) return\
    \ true;\n  if ($x % $n != 0) return false;\n  return is_simple_power($x / $n,\
    \ $n);\n}\n\n$a = is_simple_power(1, 4); //true\n$b = is_simple_power(2, 2); //true\n\
    $c = is_simple_power(8, 2); //true\n$d = is_simple_power(3, 2); //false\n$e =\
    \ is_simple_power(3, 1); //false\n$f = is_simple_power(5, 3); //false\necho json_encode([$a,\
    \ $b, $c, $d, $e, $f]);", "  if ($x == 1 && $n > 1) {\n    return false;\n  }\
    \ else if ($x == 1 && $n == 1) {\n    return true;\n  } else if ($x == 0 && $n\
    \ > 1) {\n    return false;\n  } else if ($x == 0 && $n == 1) {\n    return true;\n\
    \  }\n  while ($x > 1) {\n    if ($x % $n == 0) {\n      $x = $x / $n;\n    }\
    \ else {\n      return false;\n    }\n  }\n  return true;\n}", "  if ($x < $n)\
    \ return false;\n  for ($i = 1; $i < 10; $i++) {\n    if ($n ** $i == $x) return\
    \ true;\n  }\n  return false;\n}\n\necho is_simple_power(1, 4); //true\necho is_simple_power(2,\
    \ 2); //true\necho is_simple_power(8, 2); //true\necho is_simple_power(3, 2);\
    \ //false\necho is_simple_power(3, 1); //false\necho is_simple_power(5, 3); //false\n\
    echo is_simple_power(27, 3); //true\necho is_simple_power(28, 3); //false\necho\
    \ is_simple_power(26, 3); //false\necho is_simple_power(125, 5); //true\necho\
    \ is_simple_power(126, 5); //false\necho is_simple_power(124, 5); //false", " \
    \ return ($x%$n===0 && pow($n,floor(log($x,$n)))===$x) ? true : false;\n}", " \
    \ if ($x == $n) {\n    return true;\n  } elseif ($x % $n == 0) {\n    return is_simple_power($x\
    \ / $n, $n);\n  } else {\n    return false;\n  }\n}\n\necho is_simple_power(1,\
    \ 4) . PHP_EOL;\necho is_simple_power(2, 2) . PHP_EOL;\necho is_simple_power(8,\
    \ 2) . PHP_EOL;\necho is_simple_power(3, 2) . PHP_EOL;\necho is_simple_power(3,\
    \ 1) . PHP_EOL;\necho is_simple_power(5, 3) . PHP_EOL;", "    $result = log($x,\
    \ $n);\n    if (preg_match('/^\\d+$/', $result)) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}", "  return preg_match(\"/^$n*$/\"\
    , pow($x,1/$n));\n}", "\t$int = 0;\n\twhile (true) {\n\t\tif ($x === pow($n, $int))\
    \ {\n\t\t\treturn true;\n\t\t} else if ($x < pow($n, $int)) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$int++;\n\t}\n}\n\necho is_simple_power(1, 4) . \"\\n\";\necho is_simple_power(2,\
    \ 2) . \"\\n\";\necho is_simple_power(8, 2) . \"\\n\";\necho is_simple_power(3,\
    \ 2) . \"\\n\";\necho is_simple_power(3, 1) . \"\\n\";\necho is_simple_power(5,\
    \ 3) . \"\\n\";", "  if ($x === 1) {\n    return true;\n  } elseif ($x % $n !=\
    \ 0) {\n    return false;\n  } else {\n    return is_simple_power($x / $n, $n);\n\
    \  }\n}\n\nis_simple_power(16, 2);", "    if ($x < 0) {\n        return false;\n\
    \    }\n    for ($i = 0; $i < 100; $i++) {\n        if ($x == pow($n, $i)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}", "    if($x\
    \ == $n) return true;\n    return ( log($x, $n) - floor(log($x, $n)) == 0 ) ?\
    \ true : false;\n}", "    $check = pow($n,intval(log($x,$n)));\n    return $check\
    \ == $x ? true : false;\n}", "  $result = pow($n, intval(log($x, $n)));\n  return\
    \ $result == $x;\n}", "\t$result = false;\n\t$int = round(log($x, $n));\n\tif\
    \ ($n ** $int == $x) $result = true;\n\treturn $result;\n}\n\necho is_simple_power(5,\
    \ 3);\necho is_simple_power(9, 3);\necho is_simple_power(8, 2);\necho is_simple_power(7,\
    \ 2);\necho is_simple_power(81, 3);\necho is_simple_power(81, 2);", "    $y =\
    \ $n;\n    while ($y < $x) {\n        $y *= $n;\n    }\n    return $y == $x;\n\
    }\n", "    if ($x === 0) return false;\n    if ($x === 1) return true;\n    for\
    \ ($i = 1; pow($n, $i) <= $x; $i++) {\n        if (pow($n, $i) === $x) return\
    \ true;\n    }\n    return false;\n}\n\necho is_simple_power(1, 4);\necho '<br>';\n\
    echo is_simple_power(2, 2);\necho '<br>';\necho is_simple_power(8, 2);\necho '<br>';\n\
    echo is_simple_power(3, 2);\necho '<br>';\necho is_simple_power(3, 1);\necho '<br>';\n\
    echo is_simple_power(5, 3);\necho '<br>';\necho is_simple_power(0, 3);\necho '<br>';\n\
    echo is_simple_power(1, 1);\necho '<br>';\necho is_simple_power(2, 3);\necho '<br>';\n\
    echo is_simple_power(4, 2);\necho '<br>';\necho is_simple_power(27, 3);\necho\
    \ '<br>';\necho is_simple_power(16, 2);\necho '<br>';\necho is_simple_power(39,\
    \ 4);\necho '<br>';\necho is_simple_power(256, 2);\necho '<br>';\necho is_simple_power(66,\
    \ 3);\necho '<br>';\necho is_simple_power(4096, 2);\necho '<br>';\necho is_simple_power(1089,\
    \ 3);\necho '<br>';\necho is_simple_power(9765625, 5);\necho '<br>';\necho is_simple_power(6,\
    \ 2);\necho '<br>';\necho is_simple_power(9, 2);\necho '<br>';\necho is_simple_power(16,\
    \ 4);\necho '<br>';\necho is_simple_power(27, 3);\necho '<br>';\necho is_simple_power(36,\
    \ 2);\necho '", "    $num = (int)log($x) / (int)log($n);\n    return $n ** $num\
    \ == $x;\n}", "  $res = log($x, $n);\n  return is_int($res);\n}\necho is_simple_power(1,\
    \ 4) ? 'true' : 'false';\necho \"\\n\";\necho is_simple_power(2, 2) ? 'true' :\
    \ 'false';\necho \"\\n\";\necho is_simple_power(8, 2) ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_simple_power(3, 2) ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_simple_power(3, 1) ? 'true' : 'false';\necho \"\\n\";\necho is_simple_power(5,\
    \ 3) ? 'true' : 'false';\necho \"\\n\";", "  return log($x, $n) == round(log($x,\
    \ $n));\n}", "    return (bool) $x && $x % pow($n, ($x/$n)) == 0;\n}", "    $i\
    \ = 1;\n    $res = $n ** $i;\n    while ($res <= $x) {\n        if ($res == $x)\
    \ {\n            return true;\n        }\n        $i++;\n        $res = $n **\
    \ $i;\n    }\n    return false;\n}\n", "  $pow = 0;\n  while (pow($n, $pow) <=\
    \ $x) {\n    if (pow($n, $pow) == $x) {\n      return true;\n    }\n    $pow++;\n\
    \  }\n  return false;\n}\n", "  if ($x === 1) {\n    return true;\n  }\n  $result\
    \ = 1;\n  while ($result < $x) {\n    $result *= $n;\n  }\n  return $result ===\
    \ $x;\n}\n", "    $int = log($x, $n);\n    return (int)$int == $int;\n}\necho\
    \ is_simple_power(2, 2);", "    //your code here\n}", "    $power = 1;\n    while($power\
    \ <= $x) {\n        if($power == $x) {\n            return true;\n        }\n\
    \        $power *= $n;\n    }\n    return false;\n}", "  $r = round(log($x) /\
    \ log($n));\n  return $r == log($x) / log($n);\n}\n", "  if(!is_int($x) || !is_int($n))\
    \ return false;\n  return !preg_match('/[^1-9]/', base_convert($x, 10, $n));\n\
    }", "  return round(log($x, $n),2)%1 == 0;\n}\n\necho is_simple_power(1, 4);\n\
    echo is_simple_power(2, 2);\necho is_simple_power(8, 2);\necho is_simple_power(3,\
    \ 2);\necho is_simple_power(3, 1);\necho is_simple_power(5, 3);\n ?>", "    $exponent\
    \ = round(log($x, $n));\n    return ($n ** $exponent == $x);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
