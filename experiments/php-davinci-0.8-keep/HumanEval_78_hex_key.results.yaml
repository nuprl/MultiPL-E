name: HumanEval_78_hex_key
language: php
results:
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_key = array(\n\t\t\t\t\t'0' => '0',\n\t\t\t\t\t'1' => '1',\n\t\t\t\
    \t\t'2' => '2',\n\t\t\t\t\t'3' => '3',\n\t\t\t\t\t'4' => '4',\n\t\t\t\t\t'5' =>\
    \ '5',\n\t\t\t\t\t'6' => '6',\n\t\t\t\t\t'7' => '7',\n\t\t\t\t\t'8' => '8',\n\t\
    \t\t\t\t'9' => '9',\n\t\t\t\t\t'A' => '10',\n\t\t\t\t\t'B' => '11',\n\t\t\t\t\t\
    'C' => '12',\n\t\t\t\t\t'D' => '13',\n\t\t\t\t\t'E' => '14',\n\t\t\t\t\t'F' =>\
    \ '15'\n\t\t\t\t);\n\treturn $hex_key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9u4j1ie7.php:44\n\
    Stack trace:\n#0 /tmp/tmp9u4j1ie7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9u4j1ie7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $count = 0;\n  $hexKey = array(\"2\",\"3\",\"5\",\"7\",\"B\",\"D\");\n\
    \  for ($i=0; $i < strlen($num); $i++) { \n    if (in_array($num[$i], $hexKey))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $new_num = \"\";\n    $input = array(\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\");\n    $output = array(\"10\",\"11\",\"12\",\"13\",\"14\",\"15\");\n    $num\
    \ = str_replace($input, $output, $num);\n    $len = strlen($num);\n    for ($i=0;\
    \ $i < $len; $i++) { \n        if ($num[$i] == 1 || $num[$i] == 0) {\n       \
    \     $new_num = $new_num.$num[$i];\n        }\n    }\n    return $new_num;\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95lhmhja.php:36\n\
    Stack trace:\n#0 /tmp/tmp95lhmhja.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp95lhmhja.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_array = array(\n\t\t\"0\" => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\
    \t\t\"3\" => 3,\n\t\t\"4\" => 4,\n\t\t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\"\
    \ => 7,\n\t\t\"8\" => 8,\n\t\t\"9\" => 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\
    \t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t);\n\t\
    return $hex_array[$num];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi6xa9m7.php:44\n\
    Stack trace:\n#0 /tmp/tmpfi6xa9m7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfi6xa9m7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    return $hex_key;\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy08zp9ir.php:27\n\
    Stack trace:\n#0 /tmp/tmpy08zp9ir.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpy08zp9ir.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $count = 0;\n    $num = strtoupper($num);\n    $arr = str_split($num);\n\
    \    $prime = array(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n    foreach ($arr\
    \ as $value) {\n        if (in_array($value, $prime)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n\t$count = 0;\n\t\
    for ($i = 0; $i < strlen($num); $i++) {\n\t\t$test = strpos($primes, $num[$i]);\n\
    \t\tif ($test !== false) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    echo hex_key(\"AB\") . \"<br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"\
    ABED1A33\") . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho\
    \ hex_key(\"2020\") . \"<br>\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php\
    \ on line 22\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpq7yolux3.php on line 22\n2<br>\nWarning: strpos() expects parameter\
    \ 1 to be string, array given in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php on line\
    \ 22\n\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php\
    \ on line 22\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos() expects parameter 1\
    \ to be string, array given in /tmp/tmpq7yolux3.php on line 22\n5<br>\nWarning:\
    \ strpos() expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php\
    \ on line 22\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos() expects parameter 1\
    \ to be string, array given in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php on line\
    \ 22\n\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php\
    \ on line 22\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos() expects parameter 1\
    \ to be string, array given in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php on line\
    \ 22\n8<br>\nWarning: strpos() expects parameter 1 to be string, array given in\
    \ /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos() expects parameter 1 to\
    \ be string, array given in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php on line\
    \ 22\n\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpq7yolux3.php\
    \ on line 22\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpq7yolux3.php on line 22\n\nWarning: strpos() expects parame"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F'\
    \ => 15];\n    return $hex_key[$num];\n}\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegrqp0h9.php:27\n\
    Stack trace:\n#0 /tmp/tmpegrqp0h9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpegrqp0h9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$arr = str_split($num);\n\t$cnt = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif (\n\t\t\tin_array($value, [2, 3, 5, 7, 'B', 'D'])\n\t\t) {\n\t\t\t\
    $cnt++;\n\t\t}\n\t}\n\treturn $cnt;\n}\n\nprint_r(hex_key(\"AB\"));\necho \"<br>\"\
    ;\nprint_r(hex_key(\"1077E\"));\necho \"<br>\";\nprint_r(hex_key(\"ABED1A33\"\
    ));\necho \"<br>\";\nprint_r(hex_key(\"123456789ABCDEF0\"));\necho \"<br>\";\n\
    print_r(hex_key(\"2020\"));\necho \"<br>\";\nprint_r(hex_key(\"20\"));\necho \"\
    <br>\";\nprint_r(hex_key(\"\"));\necho \"<br>\";\nprint_r(hex_key(\"1\"));\necho\
    \ \"<br>\";\nprint_r(hex_key(\"ABCD\"));\necho \"<br>\";\nprint_r(hex_key(\"0\"\
    ));\necho \"<br>\";\nprint_r(hex_key(\"FF\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    00\"));\necho \"<br>\";\nprint_r(hex_key(\"000\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    00000\"));\necho \"<br>\";\nprint_r(hex_key(\"1A\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    2A\"));\necho \"<br>\";\nprint_r(hex_key(\"3A\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    4A\"));\necho \"<br>\";\nprint_r(hex_key(\"5A\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    6A\"));\necho \"<br>\";\nprint_r(hex_key(\"7A\"));\necho \"<br>\";\nprint_r(hex_key(\"\
    8A\"));\necho \"<br>\";\nprint\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptwasi2br.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_prime = ['2','3','5','7','B','D'];\n    $num_array = str_split($num);\n\
    \    $count = 0;\n    foreach ($num_array as $value) {\n        if (in_array($value,\
    \ $hex_prime)) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nprint_r(hex_key(\"AB\"));\nprint_r(hex_key(\"1077E\"));\nprint_r(hex_key(\"\
    ABED1A33\"));\nprint_r(hex_key(\"123456789ABCDEF0\"));\nprint_r(hex_key(\"2020\"\
    ));\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '12462'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\n        '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5'\
    \ => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,\n        'A' => 10, 'B' => 11,\
    \ 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15\n    ];\n    $key = '';\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        $key = $key . $hex[$num[$i]];\n\
    \    }\n    return $key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5gicxa_.php:34\n\
    Stack trace:\n#0 /tmp/tmpz5gicxa_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpz5gicxa_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n\t$prime_digits = [\"2\",\"3\",\"5\"\
    ,\"7\",\"B\",\"D\"];\n\t$count = 0;\n\t$i = 0;\n\t$num = str_split($num);\n\t\
    foreach ($num as $num_digit) {\n\t\tforeach ($hex_digits as $hex_digit) {\n\t\t\
    \tif ($num_digit == $hex_digit) {\n\t\t\t\tforeach ($prime_digits as $prime_digit)\
    \ {\n\t\t\t\t\tif ($num_digit == $prime_digit) {\n\t\t\t\t\t\t$count++;\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"AB\"\
    );\necho \"<br/>\";\necho hex_key(\"1077E\");\necho \"<br/>\";\necho hex_key(\"\
    ABED1A33\");\necho \"<br/>\";\necho hex_key(\"123456789ABCDEF0\");\necho \"<br/>\"\
    ;\necho hex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br/>2<br/>4<br/>6<br/>2
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array('2' => true, '3' => true, '5' => true, '7' => true, 'B'\
    \ => true, 'D' => true);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (isset($key[$num[$i]])) $count++;\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array(10 => 'A', 11 => 'B', 12 => 'C', 13 => 'D', 14 => 'E', 15\
    \ => 'F');\n    $result = 0;\n    $number = str_split($num);\n    foreach ($number\
    \ as $key => $value) {\n        if(is_numeric($value)) {\n            if($value\
    \ == 2 || $value == 3 || $value == 5 || $value == 7) {\n                $result++;\n\
    \            }\n        } else {\n            foreach ($hex as $k => $v) {\n \
    \               if($value == $v) {\n                    if($k == 10 || $k == 11\
    \ || $k == 13 || $k == 15) {\n                        $result++;\n           \
    \         }\n                }\n            }\n        }\n    }\n    return $result;\n\
    }\necho hex_key(\"AB\").\"\\n\"; //1\necho hex_key(\"1077E\").\"\\n\"; //2\necho\
    \ hex_key(\"ABED1A33\").\"\\n\"; //4\necho hex_key(\"123456789ABCDEF0\").\"\\\
    n\"; //6\necho hex_key(\"2020\").\"\\n\"; //2\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n2\n6\n8\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlpxegq1.php:49\n\
    Stack trace:\n#0 /tmp/tmpzlpxegq1.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzlpxegq1.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array(\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\"\
    \ => 14, \"F\" => 15);\n    $digits = str_split($num);\n    $primes = 0;\n   \
    \ foreach ($digits as $digit) {\n        if (in_array($digit, array(2, 3, 5, 7,\
    \ 11, 13))) {\n            $primes++;\n        } elseif (isset($hex[$digit]))\
    \ {\n            if (in_array($hex[$digit], array(11, 13))) {\n              \
    \  $primes++;\n            }\n        }\n    }\n    return $primes;\n}\n$num =\
    \ \"AB\";\necho hex_key($num) . \"\\n\";\n$num = \"1077E\";\necho hex_key($num)\
    \ . \"\\n\";\n$num = \"ABED1A33\";\necho hex_key($num) . \"\\n\";\n$num = \"123456789ABCDEF0\"\
    ;\necho hex_key($num) . \"\\n\";\n$num = \"2020\";\necho hex_key($num) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = array(\n        \"0\" => 0,\n        \"1\" => 1,\n       \
    \ \"2\" => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n\
    \        \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\"\
    \ => 9,\n        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n  \
    \      \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    );\n    return\
    \ $hex_key[$num];\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfrozyx3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjfrozyx3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjfrozyx3.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [2, 3, 5, 7, 11, 13];\n    $num = str_split($num);\n    $count\
    \ = 0;\n    foreach ($num as $letter) {\n        if (in_array(hexdec($letter),\
    \ $hex)) {\n            $count += 1;\n        }\n    }\n    return $count;\n}\n\
    print_r(hex_key(\"AB\") . PHP_EOL);\nprint_r(hex_key(\"1077E\") . PHP_EOL);\n\
    print_r(hex_key(\"ABED1A33\") . PHP_EOL);\nprint_r(hex_key(\"123456789ABCDEF0\"\
    ) . PHP_EOL);\nprint_r(hex_key(\"2020\") . PHP_EOL);\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_key = [\n    '0' => 0,\n    '1' => 1,\n    '2' => 2,\n    '3' => 3,\n\
    \    '4' => 4,\n    '5' => 5,\n    '6' => 6,\n    '7' => 7,\n    '8' => 8,\n \
    \   '9' => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' => 12,\n    'D' => 13,\n\
    \    'E' => 14,\n    'F' => 15\n  ];\n  return $hex_key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrhyqf5u.php:44\n\
    Stack trace:\n#0 /tmp/tmpfrhyqf5u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfrhyqf5u.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n\t$count = 0;\n\tfor\
    \ ($i = 0; $i < strlen($num); $i++) {\n\t\tif (in_array($num[$i], $hex)) {\n\t\
    \t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nprint_r(hex_key(\"AB\") . PHP_EOL);\n\
    print_r(hex_key(\"1077E\") . PHP_EOL);\nprint_r(hex_key(\"ABED1A33\") . PHP_EOL);\n\
    print_r(hex_key(\"123456789ABCDEF0\") . PHP_EOL);\nprint_r(hex_key(\"2020\") .\
    \ PHP_EOL);\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return strlen(preg_replace(\"/[2,3,5,7,B,D]/\", \"\", $num));\n}\n\n\
    $answer = hex_key(\"A\");\necho $answer;\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo7yh6i1.php:30\n\
    Stack trace:\n#0 /tmp/tmpvo7yh6i1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvo7yh6i1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // Checking key to hexadecimal format\n    $key = true;\n    $split =\
    \ str_split($num);\n    foreach ($split as $s) {\n        if (!in_array($s, array(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"))) {\n            $key = false;\n        }\n \
    \   }\n    return $key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7br4y_i.php:34\n\
    Stack trace:\n#0 /tmp/tmpe7br4y_i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe7br4y_i.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $str = \"012D456789ABCDEF\";\n    $arr = str_split($str);\n    $arr2\
    \ = str_split($num);\n    $count = 0;\n    foreach ($arr2 as $value) {\n     \
    \   if (in_array($value, $arr)) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}\necho hex_key(\"AB\");\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_pb4y4v.php:36\n\
    Stack trace:\n#0 /tmp/tmpi_pb4y4v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpi_pb4y4v.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' =>\
    \ 15];\n    $arr = str_split($num);\n    $count = 0;\n    foreach ($arr as $key\
    \ => $char) {\n        $value = $hex[$char] ?? $char;\n        if ($value ===\
    \ '0') {\n            continue;\n        }\n        $count += is_prime($value);\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp9l20j0zx.php:27\nStack trace:\n#0 /tmp/tmp9l20j0zx.php(32): hex_key('AB')\n\
    #1 /tmp/tmp9l20j0zx.php(36): candidate('AB')\n#2 /tmp/tmp9l20j0zx.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9l20j0zx.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // Create array of prime numbers in hexadecimal\n    $prime_numbers =\
    \ ['2', '3', '5', '7', 'B', 'D'];\n    // Set initial sum value to 0\n    $sum\
    \ = 0;\n    // Loop through input string\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        // Set initial flag value to false\n        $flag = false;\n\
    \        // Loop through prime numbers array\n        for ($j = 0; $j < count($prime_numbers);\
    \ $j++) {\n            // Check if input string character matches current prime\
    \ numbers array element\n            if ($num[$i] == $prime_numbers[$j]) {\n \
    \               // Set flag to true and break loop\n                $flag = true;\n\
    \                break;\n            }\n        }\n        // If flag is true\n\
    \        if ($flag) {\n            // Add 1 to sum\n            $sum++;\n    \
    \    }\n    }\n    // Return sum\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_prime = array(2, 3, 5, 7, 11, 13);\n    $hex_digits = array(0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n    $count\
    \ = 0;\n    $num = str_split($num);\n    for ($i = 0; $i < count($num); $i++)\
    \ {\n        if (in_array($num[$i], $hex_digits)) {\n            for ($j = 0;\
    \ $j < count($hex_prime); $j++) {\n                if ($num[$i] == $hex_prime[$j])\
    \ {\n                    $count++;\n                }\n            }\n       \
    \ }\n    }\n    return $count;\n}\necho \"<pre>\";\necho hex_key(\"AB\") . \"\
    <br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"ABED1A33\") . \"\
    <br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho hex_key(\"2020\"\
    ) . \"<br>\";\necho \"</pre>\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>0<br>2<br>2<br>4<br>2<br></pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp18ps6_bu.php:46\nStack trace:\n#0 /tmp/tmp18ps6_bu.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp18ps6_bu.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    ];\n    $out = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        $digit = $arr[$num[$i]];\n        if ($digit > 1) {\n     \
    \       $a = 0;\n            for ($j = 2; $j < $digit; $j++) {\n             \
    \   if ($digit % $j == 0) {\n                    $a++;\n                }\n  \
    \          }\n            if ($a == 0) {\n                $out++;\n          \
    \  }\n        }\n    }\n    return $out;\n}\n\necho hex_key(\"ABED1A33\");\necho\
    \ '<br>';\necho hex_key(\"1077E\");\necho '<br>';\necho hex_key(\"2020\");\necho\
    \ '<br>';\necho hex_key(\"123456789ABCDEF0\");\necho '<br>';\necho hex_key(\"\
    AB\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 4<br>2<br>2<br>6<br>1
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = \"1077E\";\n    $hex_split = str_split($hex);\n    $key = array_keys($hex_split);\n\
    \    echo $key;\n}\nhex_key(\"1077E\");\n\nfunction candidate(...$args) {\n  \
    \  return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "ArrayArray\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h95rbdc.php:31\n\
    Stack trace:\n#0 /tmp/tmp8h95rbdc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8h95rbdc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_array = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" ];\n    $hex_to_dec =\
    \ [ \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"\
    6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\"\
    \ => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15 ];\n    $dec_to_hex = [ 0 => \"\
    0\", 1 => \"1\", 2 => \"2\", 3 => \"3\", 4 => \"4\", 5 => \"5\", 6 => \"6\", 7\
    \ => \"7\", 8 => \"8\", 9 => \"9\", 10 => \"A\", 11 => \"B\", 12 => \"C\", 13\
    \ => \"D\", 14 => \"E\", 15 => \"F\" ];\n    $dec_value = 0;\n    $hex_length\
    \ = strlen($num);\n    for ($i = 0; $i < $hex_length; $i++) {\n        $dec_value\
    \ += $hex_to_dec[$num[$i]] * pow(16, $hex_length - $i - 1);\n    }\n    $new_num\
    \ = \"\";\n    while ($dec_value > 0) {\n        $new_num = $dec_to_hex[$dec_value\
    \ % 10] . $new_num;\n        $dec_value = floor($dec_value / 10);\n    }\n   \
    \ return $new_num;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx69fb9k.php:39\n\
    Stack trace:\n#0 /tmp/tmpzx69fb9k.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzx69fb9k.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F'];\n  $primes = [2, 3, 5, 7, 11, 13];\n  $count = 0;\n  for\
    \ ($i = 0; $i < strlen($num); $i++) {\n    $key = array_search($num[$i], $digits);\n\
    \    if (in_array($key, $primes)) {\n      $count++;\n    }\n  }\n  return $count;\n\
    }\necho hex_key(\"AB\") . \"<br />\";\necho hex_key(\"1077E\") . \"<br />\";\n\
    echo hex_key(\"ABED1A33\") . \"<br />\";\necho hex_key(\"123456789ABCDEF0\") .\
    \ \"<br />\";\necho hex_key(\"2020\") . \"<br />\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br />2<br />4<br />6<br />2<br />
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return ($num == \"A\" || $num == \"B\" || $num == \"D\" || $num == \"\
    E\") ? 1 : 0;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb52cm2xn.php:26\n\
    Stack trace:\n#0 /tmp/tmpb52cm2xn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb52cm2xn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $primes = ['2','3','5','7','B','D'];\n    $res = 0;\n    for ($i = 0;\
    \ $i < strlen($num); $i++) {\n        $char = $num[$i];\n        if (in_array($char,\
    \ $primes)) {\n            $res++;\n        }\n    }\n    return $res;\n}\n$tests\
    \ = [\"AB\", \"1077E\", \"ABED1A33\", \"123456789ABCDEF0\", \"2020\"];\nforeach\
    \ ($tests as $test) {\n    echo \"\\ntest: $test\\n\";\n    echo \"result: \"\
    \ . hex_key($test);\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\ntest: AB\nresult: 1\ntest: 1077E\nresult: 2\ntest: ABED1A33\nresult:\
    \ 4\ntest: 123456789ABCDEF0\nresult: 6\ntest: 2020\nresult: 2"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$keys = [\n\t\t'0' => 0,\n\t\t'1' => 1,\n\t\t'2' => 2,\n\t\t'3' => 3,\n\
    \t\t'4' => 4,\n\t\t'5' => 5,\n\t\t'6' => 6,\n\t\t'7' => 7,\n\t\t'8' => 8,\n\t\t\
    '9' => 9,\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D' => 13,\n\t\t\
    'E' => 14,\n\t\t'F' => 15\n\t];\n\treturn $keys[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqby31221.php:44\n\
    Stack trace:\n#0 /tmp/tmpqby31221.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqby31221.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$keys = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"];\n\t$r = 0;\n\tforeach (str_split($num)\
    \ as $key) {\n\t\tif (in_array($key, $keys)) {\n\t\t\t$r++;\n\t\t}\n\t}\n\treturn\
    \ $r;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    foreach(str_split($num)\
    \ as $value) {\n        if(in_array(hexdec($value), $key)){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$num = strtoupper($num);\n\t$arr = str_split($num);\n\t$hex_prime = ['2',\
    \ '3', '5', '7', 'B', 'D'];\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr); $i++)\
    \ {\n\t\tif (in_array($arr[$i], $hex_prime)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\t\
    return $count;\n}\n\necho hex_key(\"AB\");\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex = array('A' => '10', 'B' => '11', 'C' => '12', 'D' => '13', 'E' =>\
    \ '14', 'F' => '15');\n  $return = \"\";\n  for ($i = 0; $i < strlen($num); $i++)\
    \ {\n    if ($num[$i] == 0 || $num[$i] == 1 || $num[$i] == 2 || $num[$i] == 3\
    \ || $num[$i] == 4 || $num[$i] == 5 || $num[$i] == 6 || $num[$i] == 7 || $num[$i]\
    \ == 8 || $num[$i] == 9) {\n      $return .= $num[$i];\n    } else {\n      $return\
    \ .= $hex[$num[$i]];\n    }\n  }\n  return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprursmyf.php:35\n\
    Stack trace:\n#0 /tmp/tmpprursmyf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpprursmyf.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F'\
    \ => 15];\n    $key = [];\n    foreach($hex_key as $k => $v) {\n        $key[$v]\
    \ = $k;\n    }\n    return $key;\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t7rir20.php:31\n\
    Stack trace:\n#0 /tmp/tmp_t7rir20.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_t7rir20.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    ];\n    $result = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        $digit = $hex[$num[$i]];\n        $k = 2;\n        while ($k\
    \ <= $digit / 2) {\n            if ($digit % $k == 0) {\n                break;\n\
    \            }\n            $k++;\n        }\n        if ($k > $digit / 2) {\n\
    \            $result++;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjojka56w.php:59\n\
    Stack trace:\n#0 /tmp/tmpjojka56w.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpjojka56w.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = '0123456789ABCDEF';\n    return strpos($hex_key, $num);\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ri2zb8h.php:28\n\
    Stack trace:\n#0 /tmp/tmp6ri2zb8h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6ri2zb8h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime = ['0','1','2','3','5','7','B','D'];\n    $count = 0;\n    $hex_array\
    \ = str_split($num);\n    foreach ($hex_array as $val) {\n        if (in_array($val,\
    \ $prime)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . PHP_EOL;\necho hex_key(\"1077E\") . PHP_EOL;\necho hex_key(\"\
    ABED1A33\") . PHP_EOL;\necho hex_key(\"123456789ABCDEF0\") . PHP_EOL;\necho hex_key(\"\
    2020\") . PHP_EOL;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n4\n5\n8\n4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4d82ejc.php:41\n\
    Stack trace:\n#0 /tmp/tmpy4d82ejc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpy4d82ejc.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $res = 0;\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = [\n      \
    \  'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n  \
    \      'E' => 14,\n        'F' => 15\n    ];\n    $num = str_split($num);\n  \
    \  foreach ($num as $value) {\n        if(in_array($value, $primes)) {\n     \
    \       $res++;\n        }\n        if(array_key_exists($value, $hex)) {\n   \
    \         if(in_array($hex[$value], $primes)) {\n                $res++;\n   \
    \         }\n        }\n    }\n    return $res;\n}\necho hex_key(\"AB\") . \"\\\
    n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\"\
    ;\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $dec = hexdec($num);\n    $hex = dechex($dec);\n    $hex_arr = [];\n\
    \    for ($i = 0; $i < strlen($hex); $i++) {\n        $hex_arr[] = $hex[$i];\n\
    \    }\n    return count(array_unique($hex_arr));\n}\n$num = \"AB\";\nprint_r(hex_key($num));\n\
    echo \"\\n\";\n$num = \"1077E\";\nprint_r(hex_key($num));\necho \"\\n\";\n$num\
    \ = \"ABED1A33\";\nprint_r(hex_key($num));\necho \"\\n\";\n$num = \"123456789ABCDEF0\"\
    ;\nprint_r(hex_key($num));\necho \"\\n\";\n$num = \"2020\";\nprint_r(hex_key($num));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n4\n6\n16\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky193upk.php:48\n\
    Stack trace:\n#0 /tmp/tmpky193upk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpky193upk.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $p = 0;\n    $i = 0;\n    while ($i < strlen($num)) {\n        if ($num[$i]\
    \ == \"2\" || $num[$i] == \"3\" || $num[$i] == \"5\" || $num[$i] == \"7\" || $num[$i]\
    \ == \"B\" || $num[$i] == \"D\") {\n            $p++;\n        }\n        $i++;\n\
    \    }\n    return $p;\n}\necho hex_key(\"123456789ABCDEF0\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    $res = [];\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            $res[] = $num[$i];\n\
    \        }\n    }\n    for ($i = 0; $i < count($res); $i++) {\n        if (in_array($res[$i],\
    \ ['2', '3', '5', '7', 'B', 'D'])) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\necho hex_key(\"123456789ABCDEF0\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15,\n    ];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjyzgon6.php:43\n\
    Stack trace:\n#0 /tmp/tmpjjyzgon6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjjyzgon6.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $alpha = array(\n        \"A\" => 10,\n        \"B\" => 11,\n       \
    \ \"C\" => 12,\n        \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15,\n\
    \    );\n    $prime = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    foreach\
    \ (str_split($num) as $key => $value) {\n        if (in_array($value, $prime))\
    \ {\n            $count++;\n        } elseif (in_array($value, array_keys($alpha)))\
    \ {\n            $value = $alpha[$value];\n            if (in_array($value, $prime))\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $arr = ['A', 'B', 'C', 'D', 'E', 'F'];\n  $hex = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $hex[$value] = 10 + $key;\n  }\n  return $hex;\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7wvhfi5.php:31\n\
    Stack trace:\n#0 /tmp/tmpa7wvhfi5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa7wvhfi5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = [\"A\" => 11, \"B\" => 13, \"C\" => 17, \"D\" => 19, \"E\" =>\
    \ 23, \"F\" => 29];\n    $count = 0;\n    $hex = [\"0\", \"1\", \"2\", \"3\",\
    \ \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"];\n    for ($i = 0; $i < strlen($num); $i++) {\n        $key = array_search($num[$i],\
    \ $hex);\n        if ($key % 2 != 0 && $key != \"A\" && $key != \"B\" && $key\
    \ != \"C\" && $key != \"D\" && $key != \"E\" && $key != \"F\") {\n           \
    \ $count++;\n        } else if ($num[$i] == \"A\" || $num[$i] == \"B\" || $num[$i]\
    \ == \"C\" || $num[$i] == \"D\" || $num[$i] == \"E\" || $num[$i] == \"F\") {\n\
    \            $value = $arr[$num[$i]];\n            for ($j = 2; $j < $value; $j++)\
    \ {\n                if ($value % $j == 0) {\n                    break;\n   \
    \             } else if ($j == $value - 1) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ hex_key(\"AB\") . \"<br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"\
    ABED1A33\") . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho\
    \ hex_key(\"2020\") . \"<br>\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2<br>4<br>8<br>11<br>0<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkd2betap.php:49\nStack trace:\n#0 /tmp/tmpkd2betap.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkd2betap.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = array(0,1,2,3,4,5,6,7,8,9,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"\
    );\n    $a = array();\n    for ($i=0; $i < count($arr); $i++) { \n        if(in_array($i,\
    \ array(2,3,5,7,11,13))) {\n            $a[$arr[$i]] = $i;\n        }\n    }\n\
    \    return $a;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh_luafw.php:33\n\
    Stack trace:\n#0 /tmp/tmpdh_luafw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdh_luafw.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hexadecimal = \"0123456789ABCDEF\";\n  $primes = array(2, 3, 5, 7, 11,\
    \ 13);\n  $hex_num = str_split($num);\n  $result = 0;\n  for ($i = 0; $i < count($hex_num);\
    \ $i++) {\n    $char = $hex_num[$i];\n    $index = strpos($hexadecimal, $char);\n\
    \    if (in_array($index, $primes)) {\n      $result++;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    return array_search($num,\
    \ $hex);\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvi26u4g.php:27\n\
    Stack trace:\n#0 /tmp/tmpqvi26u4g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqvi26u4g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hexKeys = [2, 3, 5, 7, 11, 13];\n    $hexDigits = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n    $hexDigits = array_map('strtoupper',\
    \ $hexDigits);\n    $numLength = strlen($num);\n    $counter = 0;\n    for ($i\
    \ = 0; $i < $numLength; $i++) {\n        if (in_array($num[$i], $hexKeys)) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}\necho hex_key(\"\
    AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\";\necho hex_key(\"\
    ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\");\necho \"<br>\"\
    ;\necho hex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0<br>2<br>2<br>4<br>2\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpy0yjtbrl.php:45\nStack trace:\n#0 /tmp/tmpy0yjtbrl.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy0yjtbrl.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$arr_numbers_check = array('2', '3', '5', '7', 'B', 'D');\n\t$arr_num =\
    \ str_split($num);\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr_num); $i++)\
    \ {\n\t\tif (in_array($arr_num[$i], $arr_numbers_check)) {\n\t\t\t$count++;\n\t\
    \t}\n\t}\n\treturn $count;\n}\necho hex_key(\"2020\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"AB\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n2\n6\n4\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = str_split($num);\n    $keys = [];\n    foreach ($hex as $key =>\
    \ $value) {\n        if (hexdec($value) > 0 && hexdec($value) <= 17) {\n     \
    \       if ($value == '1' || $value == '3' || $value == '5' || $value == '7' ||\
    \ $value == 'B' || $value == 'D') {\n                $keys[] = $key;\n       \
    \     }\n        }\n    }\n    return count($keys);\n}\n$num = 'AB';\necho hex_key($num);\n\
    echo \"\\n\";\n$num = '1077E';\necho hex_key($num);\necho \"\\n\";\n$num = 'ABED1A33';\n\
    echo hex_key($num);\necho \"\\n\";\n$num = '123456789ABCDEF0';\necho hex_key($num);\n\
    echo \"\\n\";\n$num = '2020';\necho hex_key($num);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n3\n5\n6\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zwtzuje.php:51\n\
    Stack trace:\n#0 /tmp/tmp6zwtzuje.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6zwtzuje.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if ($num >= 0 && $num <= 9) {\n        return $num;\n    } else {\n \
    \       switch ($num) {\n            case 'A':\n                return 10;\n \
    \               break;\n            case 'B':\n                return 11;\n  \
    \              break;\n            case 'C':\n                return 12;\n   \
    \             break;\n            case 'D':\n                return 13;\n    \
    \            break;\n            case 'E':\n                return 14;\n     \
    \           break;\n            case 'F':\n                return 15;\n      \
    \          break;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbpj4pyw.php:49\n\
    Stack trace:\n#0 /tmp/tmpnbpj4pyw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnbpj4pyw.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return array_flip(array(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"));\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucz4d5e_.php:26\n\
    Stack trace:\n#0 /tmp/tmpucz4d5e_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpucz4d5e_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_arr = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime_arr = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex_arr)) {\n            if (in_array(hexdec($num[$i]),\
    \ $prime_arr)) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $count;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // Trim whitespace\n    $num = str_replace(' ', '', $num);\n    $num\
    \ = strtoupper($num);\n    $num = str_split($num);\n    $primes = ['2', '3', '5',\
    \ '7', 'B', 'D'];\n    $counter = 0;\n    foreach ($num as $key => $val) {\n \
    \       if (in_array($val, $primes)) {\n            $counter++;\n        }\n \
    \   }\n    return $counter;\n}\n$num = \"AB\";\necho hex_key($num);\necho \"<br>\"\
    ;\n$num = \"1077E\";\necho hex_key($num);\necho \"<br>\";\n$num = \"ABED1A33\"\
    ;\necho hex_key($num);\necho \"<br>\";\n$num = \"123456789ABCDEF0\";\necho hex_key($num);\n\
    echo \"<br>\";\n$num = \"2020\";\necho hex_key($num);\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = [\n        '0' => '0',\n        '1' => '1',\n        '2' => '2',\n\
    \        '3' => '3',\n        '4' => '4',\n        '5' => '5',\n        '6' =>\
    \ '6',\n        '7' => '7',\n        '8' => '8',\n        '9' => '9',\n      \
    \  'A' => '10',\n        'B' => '11',\n        'C' => '12',\n        'D' => '13',\n\
    \        'E' => '14',\n        'F' => '15',\n    ];\n    $arr2 = [\n        '0'\
    \ => '0',\n        '1' => '1',\n        '2' => '2',\n        '3' => '3',\n   \
    \     '4' => '4',\n        '5' => '5',\n        '6' => '6',\n        '7' => '7',\n\
    \        '8' => '8',\n        '9' => '9',\n        '10' => 'A',\n        '11'\
    \ => 'B',\n        '12' => 'C',\n        '13' => 'D',\n        '14' => 'E',\n\
    \        '15' => 'F',\n    ];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $sum =\
    \ 0;\n    foreach (str_split($num) as $value) {\n        if (in_array($arr[$value],\
    \ $primes)) {\n            $sum++;\n        }\n    }\n    return $sum;\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_digits = [\n        'A' => 11,\n        'B' => 12,\n        'C'\
    \ => 13,\n        'D' => 14,\n        'E' => 15,\n        'F' => 16\n    ];\n\
    \    $num = str_split($num);\n    $count = 0;\n    foreach ($num as $hex_digit)\
    \ {\n        if (array_key_exists($hex_digit, $hex_digits)) {\n            $count\
    \ += in_array($hex_digits[$hex_digit], [2, 3, 5, 7, 11, 13]) ? 1 : 0;\n      \
    \  } else {\n            $count += in_array($hex_digit, [2, 3, 5, 7, 11, 13])\
    \ ? 1 : 0;\n        }\n    }\n    return $count;\n}\n\n$num = \"AB\";\n$count\
    \ = hex_key($num);\necho $count;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $num = strtoupper($num);\n    $hex_key = array(\n        '0' => '0',\n\
    \        '1' => '1',\n        '2' => '2',\n        '3' => '3',\n        '4' =>\
    \ '4',\n        '5' => '5',\n        '6' => '6',\n        '7' => '7',\n      \
    \  '8' => '8',\n        '9' => '9',\n        'A' => '10',\n        'B' => '11',\n\
    \        'C' => '12',\n        'D' => '13',\n        'E' => '14',\n        'F'\
    \ => '15'\n    );\n    $new_num = '';\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n        $new_num .= $hex_key[$num[$i]];\n    }\n    return $new_num;\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapa8mvjw.php:49\n\
    Stack trace:\n#0 /tmp/tmpapa8mvjw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpapa8mvjw.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_dec = array(\n        '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4'\
    \ => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,\n        'A' => 10,\
    \ 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15\n    );\n    $dec_primes\
    \ = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($hex_dec[$num[$i]], $dec_primes)) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"1077E\"\
    ) . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$arr = array(\n\t\t\t\t0 => \"0\",\n\t\t\t\t1 => \"1\",\n\t\t\t\t2 => \"\
    2\",\n\t\t\t\t3 => \"3\",\n\t\t\t\t4 => \"4\",\n\t\t\t\t5 => \"5\",\n\t\t\t\t\
    6 => \"6\",\n\t\t\t\t7 => \"7\",\n\t\t\t\t8 => \"8\",\n\t\t\t\t9 => \"9\",\n\t\
    \t\t\t10 => \"A\",\n\t\t\t\t11 => \"B\",\n\t\t\t\t12 => \"C\",\n\t\t\t\t13 =>\
    \ \"D\",\n\t\t\t\t14 => \"E\",\n\t\t\t\t15 => \"F\",\n\t\t\t\t16 => \"G\",\n\t\
    \t\t\t17 => \"H\",\n\t\t\t\t18 => \"I\",\n\t\t\t\t19 => \"J\",\n\t\t\t\t20 =>\
    \ \"K\",\n\t\t\t\t21 => \"L\",\n\t\t\t\t22 => \"M\",\n\t\t\t\t23 => \"N\",\n\t\
    \t\t\t24 => \"O\",\n\t\t\t\t25 => \"P\",\n\t\t\t\t26 => \"Q\",\n\t\t\t\t27 =>\
    \ \"R\",\n\t\t\t\t28 => \"S\",\n\t\t\t\t29 => \"T\",\n\t\t\t\t30 => \"U\",\n\t\
    \t\t\t31 => \"V\",\n\t\t\t\t32 => \"W\",\n\t\t\t\t33 => \"X\",\n\t\t\t\t34 =>\
    \ \"Y\",\n\t\t\t\t35 => \"Z\",\n\t\t\t\t36 => \"a\",\n\t\t\t\t37 => \"b\",\n\t\
    \t\t\t38 => \"c\",\n\t\t\t\t39 => \"d\",\n\t\t\t\t40 => \"e\",\n\t\t\t\t41 =>\
    \ \"f\",\n\t\t\t\t42 => \"g\",\n\t\t\t\t43 => \"h\",\n\t\t\t\t44 => \"i\",\n\t\
    \t\t\t45 => \"j\",\n\t\t\t\t46 => \"k\",\n\t\t\t\t47 => \"l\",\n\t\t\t\t48 =>\
    \ \"m\",\n\t\t\t\t49 => \"n\",\n\t\t\t\t\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe2kvypxj.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$keys = [\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15];\n\treturn $keys[$num];\n}\nfunction candidate(...$args) {\n  \
    \  return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_oyvl7lr.php:27\n\
    Stack trace:\n#0 /tmp/tmp_oyvl7lr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_oyvl7lr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_key = array(\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n\
    \    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  );\n  return $hex_key[$num];\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpypqicl.php:35\n\
    Stack trace:\n#0 /tmp/tmpgpypqicl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgpypqicl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$num = strtoupper($num);\n\t$key = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \t$val = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n\t$hex = array_combine($key,\
    \ $val);\n\treturn $hex;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrkjw8qo.php:30\n\
    Stack trace:\n#0 /tmp/tmptrkjw8qo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptrkjw8qo.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    ];\n    $arr = array_keys($hex);\n    $sum = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        $key = array_search($num[$i], $arr);\n\
    \        $sum += $hex[$arr[$key]];\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmkkegot.php:50\n\
    Stack trace:\n#0 /tmp/tmpnmkkegot.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpnmkkegot.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = '0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F';\n    $hex_key = explode(',',\
    \ $hex_key);\n    $num = str_split($num);\n    foreach ($num as $key => $value)\
    \ {\n        $num[$key] = array_search($value, $hex_key);\n    }\n    return $num;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsxsacvr.php:33\n\
    Stack trace:\n#0 /tmp/tmplsxsacvr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplsxsacvr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $primes_array = array();\n    $primes_array = array_merge($primes_array,\
    \ range(2, 9));\n    $primes_array = array_merge($primes_array, range('A', 'F'));\n\
    \    $primes_array = array_merge($primes_array, array(11, 13));\n    $hex_key\
    \ = array_flip($primes_array);\n    return $hex_key;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8mgjcau.php:31\n\
    Stack trace:\n#0 /tmp/tmpw8mgjcau.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw8mgjcau.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_key = [\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D' =>\
    \ 13,\n\t\t'E' => 14,\n\t\t'F' => 15\n\t];\n\treturn $hex_key[$num];\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqcq6vqq.php:34\n\
    Stack trace:\n#0 /tmp/tmpzqcq6vqq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzqcq6vqq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_array = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    $key = array_search($num,\
    \ $hex_array);\n    return $key;\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgays006.php:29\n\
    Stack trace:\n#0 /tmp/tmpdgays006.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdgays006.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $ans = 0;\n  $arr = [\n      '0' => 0,\n      '1' => 1,\n      '2' => 2,\n\
    \      '3' => 3,\n      '4' => 4,\n      '5' => 5,\n      '6' => 6,\n      '7'\
    \ => 7,\n      '8' => 8,\n      '9' => 9,\n      'A' => 10,\n      'B' => 11,\n\
    \      'C' => 12,\n      'D' => 13,\n      'E' => 14,\n      'F' => 15\n  ];\n\
    \  for ($i = 0; $i < strlen($num); $i++) {\n      if ($arr[$num[$i]] == 2 || $arr[$num[$i]]\
    \ == 3 || $arr[$num[$i]] == 5 || $arr[$num[$i]] == 7 || $arr[$num[$i]] == 11 ||\
    \ $arr[$num[$i]] == 13) {\n          $ans++;\n      }\n  }\n  return $ans;\n}\n\
    \n$num = \"AB\";\necho hex_key($num);\necho \"<br>\";\n$num = \"1077E\";\necho\
    \ hex_key($num);\necho \"<br>\";\n$num = \"ABED1A33\";\necho hex_key($num);\n\
    echo \"<br>\";\n$num = \"123456789ABCDEF0\";\necho hex_key($num);\necho \"<br>\"\
    ;\n$num = \"2020\";\necho hex_key($num);\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_digits = str_split($num);\n\t$key = 0;\n\tfor ($i = 0; $i < count($hex_digits);\
    \ $i++) {\n\t\tif ($hex_digits[$i] === \"A\" || $hex_digits[$i] === \"B\" || $hex_digits[$i]\
    \ === \"D\") {\n\t\t\t$key++;\n\t\t}\n\t}\n\treturn $key;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1qu1rbz.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1qu1rbz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpd1qu1rbz.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_keys = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n   \
    \ $hex_primes = array(2,3,5,7,11,13);\n    $count = 0;\n    $num_arr = str_split($num);\n\
    \    foreach ($num_arr as $key => $value) {\n        if (in_array($value, $hex_primes))\
    \ {\n            $count += 1;\n        }\n    }\n    return $count;\n}\necho 'For\
    \ num = \"AB\" the output should be 1: ' . hex_key('AB') . PHP_EOL;\necho 'For\
    \ num = \"1077E\" the output should be 2: ' . hex_key('1077E') . PHP_EOL;\necho\
    \ 'For num = \"ABED1A33\" the output should be 4: ' . hex_key('ABED1A33') . PHP_EOL;\n\
    echo 'For num = \"123456789ABCDEF0\" the output should be 6: ' . hex_key('123456789ABCDEF0')\
    \ . PHP_EOL;\necho 'For num = \"2020\" the output should be 2: ' . hex_key('2020')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "For num = \"AB\" the output should be 1: 0\nFor num = \"1077E\" the output\
    \ should be 2: 2\nFor num = \"ABED1A33\" the output should be 4: 2\nFor num =\
    \ \"123456789ABCDEF0\" the output should be 6: 4\nFor num = \"2020\" the output\
    \ should be 2: 2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qy9k5uy.php:40\n\
    Stack trace:\n#0 /tmp/tmp1qy9k5uy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1qy9k5uy.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    $count = 0;\n    $size = strlen($num);\n    for ($i = 0;\
    \ $i < $size; $i++) {\n        if (in_array($num[$i], $arr)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1_iatko.php:34\n\
    Stack trace:\n#0 /tmp/tmpi1_iatko.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpi1_iatko.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\tif($num == 'A' || $num == 'B' || $num == 'D' || $num == 'E'){\n\t\treturn\
    \ 1;\n\t} else if($num > 0 && $num < 9){\n\t\treturn $num;\n\t} else {\n\t\treturn\
    \ 0;\n\t}\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jrrms8d.php:33\n\
    Stack trace:\n#0 /tmp/tmp_jrrms8d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_jrrms8d.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"];\n  $count = 0;\n  $arr =\
    \ str_split($num);\n  foreach ($arr as $key => $value) {\n    if (in_array($value,\
    \ $hex)) {\n      $count++;\n    }\n  }\n  return $count;\n}\necho hex_key(\"\
    AB\").\"\\n\";\necho hex_key(\"1077E\").\"\\n\";\necho hex_key(\"ABED1A33\").\"\
    \\n\";\necho hex_key(\"123456789ABCDEF0\").\"\\n\";\necho hex_key(\"2020\").\"\
    \\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $num_key = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    $num_array\
    \ = str_split($num);\n    $num_count = 0;\n    foreach ($num_array as $i) {\n\
    \        if (in_array($i, $num_key)) {\n            $num_count++;\n        }\n\
    \    }\n    return $num_count;\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $key = array(\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"\
    4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n\
    \    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"\
    D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15,\n    \"0\" => 0\n  );\n  return\
    \ $key[$num];\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphho2rl1x.php:45\n\
    Stack trace:\n#0 /tmp/tmphho2rl1x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphho2rl1x.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $numbers = \"0123456789ABCDEF\";\n  $primes = array(2, 3, 5, 7, 11, 13);\n\
    \  $key = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    $index = strpos($numbers,\
    \ $num[$i]);\n    if (in_array($index, $primes)) {\n      $key++;\n    }\n  }\n\
    \  return $key;\n}\necho hex_key(\"AB\") . \"<br>\";\necho hex_key(\"1077E\")\
    \ . \"<br>\";\necho hex_key(\"ABED1A33\") . \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"<br>\";\necho hex_key(\"2020\") . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$array = [\n\t\t\"0\" => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"3\"\
    \ => 3,\n\t\t\"4\" => 4,\n\t\t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\t\
    \t\"8\" => 8,\n\t\t\"9\" => 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\"\
    \ => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t];\n\treturn\
    \ array_key_exists($num, $array) ? $array[$num] : null;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydyj5pm1.php:44\n\
    Stack trace:\n#0 /tmp/tmpydyj5pm1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpydyj5pm1.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = [\n        \"2\" => \"0\",\n        \"3\" => \"0\",\n        \"\
    5\" => \"0\",\n        \"7\" => \"0\",\n        \"B\" => \"0\",\n        \"D\"\
    \ => \"0\",\n    ];\n    $arr = str_split($num);\n    foreach ($arr as $key =>\
    \ $value) {\n        if (array_key_exists($value, $key)) {\n            $key[$value]++;\n\
    \        }\n    }\n    return $key;\n}\nprint_r(hex_key(\"1077E\"));\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_key_exists() expects parameter 2 to be array, int given\
    \ in /tmp/tmph27s2j_q.php on line 29\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, int given in /tmp/tmph27s2j_q.php on line 29\n\nWarning: array_key_exists()\
    \ expects parameter 2 to be array, int given in /tmp/tmph27s2j_q.php on line 29\n\
    \nWarning: array_key_exists() expects parameter 2 to be array, int given in /tmp/tmph27s2j_q.php\
    \ on line 29\n\nWarning: array_key_exists() expects parameter 2 to be array, int\
    \ given in /tmp/tmph27s2j_q.php on line 29\n4\nWarning: array_key_exists() expects\
    \ parameter 2 to be array, int given in /tmp/tmph27s2j_q.php on line 29\n\nWarning:\
    \ array_key_exists() expects parameter 2 to be array, int given in /tmp/tmph27s2j_q.php\
    \ on line 29\n\nWarning: array_key_exists() expects parameter 2 to be array, int\
    \ given in /tmp/tmph27s2j_q.php on line 29\n\nWarning: array_key_exists() expects\
    \ parameter 2 to be array, int given in /tmp/tmph27s2j_q.php on line 29\n\nWarning:\
    \ array_key_exists() expects parameter 2 to be array, int given in /tmp/tmph27s2j_q.php\
    \ on line 29\n\nWarning: array_key_exists() expects parameter 2 to be array, int\
    \ given in /tmp/tmph27s2j_q.php on line 29\n\nWarning: array_key_exists() expects\
    \ parameter 2 to be array, int given in /tmp/tmph27s2j_q.php on line 29\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmph27s2j_q.php:42\nStack trace:\n\
    #0 /tmp/tmph27s2j_q.php(49): test()\n#1 {main}\n  thrown in /tmp/tmph27s2j_q.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if (strlen($num) == 0) {\n        return 0;\n    }\n    $hex = [\n  \
    \      '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n  \
    \      '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n  \
    \      '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15\n\
    \    ];\n    $prime_hex = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]], $prime_hex))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = ['0' => '0', '1' => '1', '2' => '2', '3' => '3', '4' => '4',\
    \ '5' => '5',\n                '6' => '6', '7' => '7', '8' => '8', '9' => '9',\
    \ 'A' => '10', 'B' => '11',\n                'C' => '12', 'D' => '13', 'E' =>\
    \ '14', 'F' => '15'];\n    return $hex_key[$num];\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cw1np84.php:30\n\
    Stack trace:\n#0 /tmp/tmp0cw1np84.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0cw1np84.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$arr = ['2', '3', '5', '7', 'B', 'D'];\n\t$count = 0;\n\tfor ($i = 0; $i\
    \ < strlen($num); $i++) {\n\t\t$char = $num[$i];\n\t\tif (in_array($char, $arr))\
    \ {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n$test1 = 'AB';\n$test2\
    \ = '1077E';\n$test3 = 'ABED1A33';\n$test4 = '123456789ABCDEF0';\n$test5 = '2020';\n\
    echo hex_key($test1) . \"\\n\";\necho hex_key($test2) . \"\\n\";\necho hex_key($test3)\
    \ . \"\\n\";\necho hex_key($test4) . \"\\n\";\necho hex_key($test5) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $hex_prime = ['B','D'];\n    $arr = str_split($num);\n    $count = 0;\n \
    \   foreach ($arr as $key => $value) {\n        if (in_array($value, $hex_prime))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"\
    AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\";\necho hex_key(\"\
    ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\");\necho \"<br>\"\
    ;\necho hex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>0<br>2<br>2<br>0\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpt0720ph0.php:45\nStack trace:\n#0 /tmp/tmpt0720ph0.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt0720ph0.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hexes = array(\"A\" => \"10\", \"B\" => \"11\", \"C\" => \"12\", \"\
    D\" => \"13\", \"E\" => \"14\", \"F\" => \"15\");\n    $key_array = str_split($num);\n\
    \    $result = 0;\n    foreach ($key_array as $key) {\n        if (in_array($key,\
    \ array(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"))) {\n            $result++;\n\
    \        } else if (array_key_exists($key, $hexes)) {\n            if (in_array($hexes[$key],\
    \ array(\"11\", \"13\"))) {\n                $result++;\n            }\n     \
    \   }\n    }\n    return $result;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = ['0' => 0,\n\t\t\t'1' => 1,\n\t\t\t'2' => 2,\n\t\t\t'3' => 3,\n\t\
    \t\t'4' => 4,\n\t\t\t'5' => 5,\n\t\t\t'6' => 6,\n\t\t\t'7' => 7,\n\t\t\t'8' =>\
    \ 8,\n\t\t\t'9' => 9,\n\t\t\t'A' => 10,\n\t\t\t'B' => 11,\n\t\t\t'C' => 12,\n\t\
    \t\t'D' => 13,\n\t\t\t'E' => 14,\n\t\t\t'F' => 15];\n\t$convert_to_num = 0;\n\t\
    $len = strlen($num);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$convert_to_num +=\
    \ $key[$num[$i]] * pow(16, $len - $i - 1);\n\t}\n\treturn $convert_to_num;\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkepbets0.php:47\n\
    Stack trace:\n#0 /tmp/tmpkepbets0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpkepbets0.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if ($num <= 9) {\n        return $num;\n    }\n    $hex = [\n       \
    \ 'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n   \
    \     'E' => 14,\n        'F' => 15\n    ];\n    return $hex[$num];\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lavikpm.php:37\n\
    Stack trace:\n#0 /tmp/tmp7lavikpm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7lavikpm.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $h = [\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15];\n    $hex = str_split($num);\n    $key = 0;\n    foreach ($hex\
    \ as $i) {\n        if (isset($h[$i])) {\n            $key += $h[$i];\n      \
    \  } else {\n            $key += $i;\n        }\n    }\n    return $key;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmproa_7kqp.php:37\n\
    Stack trace:\n#0 /tmp/tmproa_7kqp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmproa_7kqp.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    //\u5B57\u7B26\u4E32\u8F6C16\u8FDB\u5236\n    $num = hexdec($num);\n\
    \    $num = decbin($num);\n    $num = str_split($num);\n    return $num;\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv3y2kut.php:30\n\
    Stack trace:\n#0 /tmp/tmpvv3y2kut.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvv3y2kut.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  return array_map(function($a) {\n    return str_pad(base_convert($a, 16,\
    \ 10), 2, '0', STR_PAD_LEFT);\n  }, str_split($num));\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_owyueln.php:29\n\
    Stack trace:\n#0 /tmp/tmp_owyueln.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_owyueln.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = \"0213456789ABDE\";\n\treturn $key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Illegal string offset 'AB' in /tmp/tmpbhwin3hi.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhwin3hi.php:27\nStack\
    \ trace:\n#0 /tmp/tmpbhwin3hi.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbhwin3hi.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = str_split($num);\n    $hex_prime = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j\
    \ = 0; $j < count($hex_prime); $j++) {\n            if ($arr[$i] == $hex_prime[$j])\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n$num = \"123456789ABCDEF0\";\necho hex_key($num);\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$dec_key = array(\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t\
    'D' => 13,\n\t\t'E' => 14,\n\t\t'F' => 15,\n\t);\n\treturn isset($dec_key[$num])\
    \ ? $dec_key[$num] : $num;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9xu_jf9.php:34\n\
    Stack trace:\n#0 /tmp/tmpv9xu_jf9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpv9xu_jf9.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = \"0123456789ABCDEF\";\n    $hex = str_split($hex);\n    $prime\
    \ = array(2, 3, 5, 7, 11, 13);\n    $cnt = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        for ($j = 0; $j < count($hex); $j++) {\n            if ($num[$i]\
    \ == $hex[$j]) {\n                for ($k = 0; $k < count($prime); $k++) {\n \
    \                   if ($j == $prime[$k]) {\n                        $cnt++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return $cnt;\n}\necho hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\"\
    );\necho \"<br>\";\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"<br>\";\necho hex_key(\"2020\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_arr = array(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n\t$num_arr\
    \ = array(11, 12, 13, 14, 15);\n\t$sum = 0;\n\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\tif ((int)$num[$i] % 2 != 0 && (int)$num[$i] != 1) {\n\t\t\tif (in_array($num[$i],\
    \ $hex_arr)) {\n\t\t\t\t$sum += $num_arr[array_search($num[$i], $hex_arr)];\n\t\
    \t\t} else {\n\t\t\t\t$sum += (int)$num[$i];\n\t\t\t}\n\t\t}\n\t}\n\techo $sum;\n\
    }\nhex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "00\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiklxy_if.php:39\n\
    Stack trace:\n#0 /tmp/tmpiklxy_if.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpiklxy_if.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    $prime = [2, 3, 5, 7, 11, 13];\n    $result = 0;\n    foreach\
    \ ($hex as $hex_key => $hex_value) {\n        if (in_array($hex_key, $prime))\
    \ {\n            if (strpos($num, $hex_value) !== false) {\n                $result\
    \ += substr_count($num, $hex_value);\n            }\n        }\n    }\n    return\
    \ $result;\n}\necho hex_key(\"123456789ABCDEF0\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $prime_hex_num = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n  \
    \      $hex_num = hexdec($num[$i]);\n        if ($hex_num == 2 || $hex_num ==\
    \ 3 || $hex_num == 5 || $hex_num == 7 || $hex_num == 11 || $hex_num == 13) {\n\
    \            $prime_hex_num++;\n        }\n    }\n    return $prime_hex_num;\n\
    }\necho hex_key(\"AB\"); // 1\necho \"<br/>\";\necho hex_key(\"1077E\"); // 2\n\
    echo \"<br/>\";\necho hex_key(\"ABED1A33\"); // 4\necho \"<br/>\";\necho hex_key(\"\
    123456789ABCDEF0\"); // 6\necho \"<br/>\";\necho hex_key(\"2020\"); // 2\necho\
    \ \"<br/>\";\necho hex_key(\"\"); // 0\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br/>2<br/>4<br/>6<br/>2<br/>0
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // return an array with the key of the elements in $num\n    $num_key\
    \ = [];\n    $char_value = ['0' => '0', '1' => '1', '2' => '2', '3' => '3', '4'\
    \ => '4', '5' => '5', '6' => '6', '7' => '7', '8' => '8', '9' => '9', 'A' => '10',\
    \ 'B' => '11', 'C' => '12', 'D' => '13', 'E' => '14', 'F' => '15'];\n    for ($i\
    \ = 0; $i < strlen($num); $i++) {\n        array_push($num_key, $char_value[$num[$i]]);\n\
    \    }\n    return $num_key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6d5x09g.php:32\n\
    Stack trace:\n#0 /tmp/tmpj6d5x09g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj6d5x09g.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $nums_key = array(\n        \"2\" => 1,\n        \"3\" => 1,\n      \
    \  \"5\" => 1,\n        \"7\" => 1,\n        \"B\" => 1,\n        \"D\" => 1,\n\
    \    );\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n      \
    \  if (isset($nums_key[$num[$i]])) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array(\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n\
    \        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n\
    \        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    );\n    return $key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm7a9mja.php:44\n\
    Stack trace:\n#0 /tmp/tmpnm7a9mja.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnm7a9mja.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $nums = array(\"2\",\"3\",\"5\",\"7\",\"B\",\"D\");\n    $result = array_intersect(str_split($num),\
    \ $nums);\n    return count($result);\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n\
    \        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n\
    \        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n    $hexToDec\
    \ = array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\n    $decToHex = array_combine($hexToDec,\
    \ $hex);\n    $hexPrimeNumbers = array(0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0);\n   \
    \ $sum = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n   \
    \     $key = array_search($value, $hex);\n        $sum += $hexPrimeNumbers[$key];\n\
    \    }\n    return $sum;\n}\n$test1 = hex_key(\"AB\");\n$test2 = hex_key(\"1077E\"\
    );\n$test3 = hex_key(\"ABED1A33\");\n$test4 = hex_key(\"123456789ABCDEF0\");\n\
    $test5 = hex_key(\"2020\");\n\nvar_dump($test1);\nvar_dump($test2);\nvar_dump($test3);\n\
    var_dump($test4);\nvar_dump($test5);\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(0)\nint(2)\nint(2)\nint(4)\nint(2)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3cyx67qt.php:48\nStack trace:\n#0 /tmp/tmp3cyx67qt.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3cyx67qt.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_arr = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \  $hex_key = array_combine($hex_arr, [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);\n\
    \  return $hex_key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6n128jh.php:28\n\
    Stack trace:\n#0 /tmp/tmpz6n128jh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpz6n128jh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = [\n        \"0\" => 0,\n        \"1\" => 1,\n        \"2\"\
    \ => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n     \
    \   \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n\
    \        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n        \"\
    D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    ];\n    return $hex_key[$num];\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbycjiyh.php:44\n\
    Stack trace:\n#0 /tmp/tmpqbycjiyh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqbycjiyh.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\t$key = array_search($num,\
    \ $hex);\n\treturn $key;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vs9gndi.php:29\n\
    Stack trace:\n#0 /tmp/tmp2vs9gndi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2vs9gndi.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\
    ,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n\t$prime = array(\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\");\n\t$count = 0;\n\tfor ($i=0; $i < strlen($num); $i++) { \n\t\
    \tfor ($j=0; $j < 16; $j++) { \n\t\t\tif($num[$i] == $hex[$j]){\n\t\t\t\tfor ($k=0;\
    \ $k < 6; $k++) { \n\t\t\t\t\tif($hex[$j] == $prime[$k]){\n\t\t\t\t\t\t$count++;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"\
    1077E\").\"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hexArr = ['A', 'B', 'C', 'D', 'E', 'F'];\n  $num = array_reverse(str_split($num));\n\
    \  $r = 0;\n  $key = 0;\n  foreach ($num as $n) {\n    $n = strtoupper($n);\n\
    \    if (in_array($n, $hexArr)) {\n      $key += (array_search($n, $hexArr) +\
    \ 10) * pow(16, $r);\n    } else {\n      $key += $n * pow(16, $r);\n    }\n \
    \   $r++;\n  }\n  return $key;\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2g0nd043.php:39\n\
    Stack trace:\n#0 /tmp/tmp2g0nd043.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2g0nd043.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $counter = 0;\n  $hex = ['2','3','5','7','B','D'];\n  $arr = str_split($num);\n\
    \  foreach ($arr as $v) {\n    if (in_array($v, $hex)) {\n      $counter++;\n\
    \    }\n  }\n  return $counter;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $number = strlen($num);\n    $primes = [2, 3, 5, 7, 11, 13];\n    $keys\
    \ = [];\n    $prime = '';\n    for ($i = 0; $i < $number; $i++) {\n        for\
    \ ($j = 0; $j < count($primes); $j++) {\n            if (hexdec($num[$i]) == $primes[$j])\
    \ {\n                $prime = $prime.$num[$i];\n            }\n        }\n   \
    \ }\n    $prime_number = strlen($prime);\n    return $prime_number;\n}\necho hex_key(\"\
    ABED1A33\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '4'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_array = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $counter = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        for ($j\
    \ = 0; $j < 16; $j++) {\n            if ($num[$i] == $hex_array[$j]) {\n     \
    \           if ($num[$i] == $hex_array[2] || $num[$i] == $hex_array[3] || $num[$i]\
    \ == $hex_array[5] || $num[$i] == $hex_array[7] || $num[$i] == $hex_array[11]\
    \ || $num[$i] == $hex_array[13]) {\n                    $counter++;\n        \
    \        }\n            }\n        }\n    }\n    return $counter;\n}\necho hex_key(\"\
    AB\") . \"<br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"ABED1A33\"\
    ) . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho hex_key(\"\
    2020\") . \"<br>\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_array = [10, 11, 12, 13, 14, 15];\n    $key = '';\n    foreach (str_split($num)\
    \ as $character) {\n        if (ctype_alpha($character)) {\n            $key .=\
    \ ' ' . array_search(strtoupper($character), ['A', 'B', 'C', 'D', 'E', 'F']);\n\
    \        } else {\n            $key .= ' ' . $character;\n        }\n    }\n \
    \   return explode(' ', trim($key));\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp18iif7.php:35\n\
    Stack trace:\n#0 /tmp/tmpzp18iif7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzp18iif7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // add 1 to the index of the the array $numbers to get the key that the\
    \ value is at in the array $hex_numbers\n    $numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n\
    \    $hex_numbers = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    $prime_numbers = [\"2\",\"3\",\"\
    5\",\"7\",\"B\",\"D\"];\n    $count = 0;\n    for ($i=0; $i < strlen($num); $i++)\
    \ { \n        if (in_array($num[$i], $prime_numbers)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n$num = \"AB\";\necho hex_key($num);\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\n    \"2\" => 2,\n    \"3\" => 3,\n    \"5\" => 5,\n    \"7\"\
    \ => 7,\n    \"B\" => 11,\n    \"D\" => 13,\n    ];\n    $result = 0;\n    foreach\
    \ ($hex as $key => $value) {\n        if (substr_count($num, $key) != 0) {\n \
    \           $result += substr_count($num, $key);\n        }\n    }\n    return\
    \ $result;\n}\n$num = \"AB\";\necho hex_key($num) . \"<br>\";\n$num = \"1077E\"\
    ;\necho hex_key($num) . \"<br>\";\n$num = \"ABED1A33\";\necho hex_key($num) .\
    \ \"<br>\";\n$num = \"123456789ABCDEF0\";\necho hex_key($num) . \"<br>\";\n$num\
    \ = \"2020\";\necho hex_key($num) . \"<br>\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>2<br>4<br>6<br>2<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = array(\n        \"2\" => \"2\",\n        \"3\" => \"3\",\n\
    \        \"5\" => \"5\",\n        \"7\" => \"7\",\n        \"B\" => \"11\",\n\
    \        \"D\" => \"13\"\n    );\n    return $hex_key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxsfhpco.php:34\n\
    Stack trace:\n#0 /tmp/tmpdxsfhpco.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdxsfhpco.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t// Your code here\n\t$hexa = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13,\
    \ 'E' => 14, 'F' => 15];\n\t$str = str_split($num);\n\t$array = [];\n\tfor ($i=0;\
    \ $i < count($str); $i++) { \n\t\tif (isset($hexa[$str[$i]])) {\n\t\t\t$array[]\
    \ = $hexa[$str[$i]];\n\t\t} else {\n\t\t\t$array[] = $str[$i];\n\t\t}\n\t}\n\t\
    $prime = 0;\n\t$number = array_map('intval', $array);\n\t$num = array_map('intval',\
    \ $number);\n\tfor ($i=0; $i < count($num); $i++) { \n\t\t$flag = 0;\n\t\tfor\
    \ ($j=2; $j < $num[$i]; $j++) { \n\t\t\tif ($num[$i] % $j == 0) {\n\t\t\t\t$flag\
    \ = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\t$prime +=\
    \ 1;\n\t\t}\n\t}\n\treturn $prime;\n}\n\necho hex_key(\"AB\");\necho hex_key(\"\
    1077E\");\necho hex_key(\"ABED1A33\");\necho hex_key(\"123456789ABCDEF0\");\n\
    echo hex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "14584\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vri7eiq.php:59\n\
    Stack trace:\n#0 /tmp/tmp0vri7eiq.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp0vri7eiq.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if (strlen($num) === 0) {\n        return 0;\n    }\n    $arr = str_split($num);\n\
    \    $count = 0;\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ 2 || $value == 3 || $value == 5 || $value == 7 || $value == 11 || $value ==\
    \ 13) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho\
    \ hex_key(\"AB\") . \"<br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"\
    ABED1A33\") . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho\
    \ hex_key(\"2020\") . \"<br>\";\necho hex_key(\"\") . \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0<br>2<br>2<br>4<br>2<br>0<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpq7oc19cm.php:43\nStack trace:\n#0 /tmp/tmpq7oc19cm.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq7oc19cm.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if($num === \"\") return 0;\n    $hex = array(\n        \"0\" => 0,\n\
    \        \"1\" => 1,\n        \"2\" => 2,\n        \"3\" => 3,\n        \"4\"\
    \ => 4,\n        \"5\" => 5,\n        \"6\" => 6,\n        \"7\" => 7,\n     \
    \   \"8\" => 8,\n        \"9\" => 9,\n        \"A\" => 10,\n        \"B\" => 11,\n\
    \        \"C\" => 12,\n        \"D\" => 13,\n        \"E\" => 14,\n        \"\
    F\" => 15\n    );\n    $count = 0;\n    for($i = 0; $i < strlen($num); $i++) {\n\
    \        if($hex[$num[$i]] === 2 || $hex[$num[$i]] === 3 || $hex[$num[$i]] ===\
    \ 5 ||\n        $hex[$num[$i]] === 7 || $hex[$num[$i]] === 11 || $hex[$num[$i]]\
    \ === 13) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"1077E\");\necho \"\\n\";\n\
    echo hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_key = array (\n    '0' => 0,\n    '1' => 1,\n    '2' => 2,\n    '3'\
    \ => 3,\n    '4' => 4,\n    '5' => 5,\n    '6' => 6,\n    '7' => 7,\n    '8' =>\
    \ 8,\n    '9' => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' => 12,\n    'D' =>\
    \ 13,\n    'E' => 14,\n    'F' => 15,\n  );\n  return $hex_key;\n}\n\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9qnd_8j.php:45\n\
    Stack trace:\n#0 /tmp/tmpy9qnd_8j.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy9qnd_8j.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = array(\n\t\t'0' => 0,\n\t\t'1' => 1,\n\t\t'2' => 2,\n\t\t'3' =>\
    \ 3,\n\t\t'4' => 4,\n\t\t'5' => 5,\n\t\t'6' => 6,\n\t\t'7' => 7,\n\t\t'8' => 8,\n\
    \t\t'9' => 9,\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D' => 13,\n\
    \t\t'E' => 14,\n\t\t'F' => 15\n\t);\n\treturn $key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3pujo8d.php:44\n\
    Stack trace:\n#0 /tmp/tmpk3pujo8d.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpk3pujo8d.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    $arr_2 = [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"];\n    $count = 0;\n    for ($i=0; $i < strlen($num); $i++) { \n   \
    \     for ($j=0; $j < count($arr); $j++) { \n            if ($num[$i] == $arr[$j])\
    \ {\n                for ($k=0; $k < count($arr_2); $k++) { \n               \
    \     if ($num[$i] == $arr_2[$k]) {\n                        $count++;\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho hex_key(\"AB\");\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvpvyjdp.php:26\n\
    Stack trace:\n#0 /tmp/tmpmvpvyjdp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmvpvyjdp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_digits = [\n\t\t'0' => 0,\n\t\t'1' => 1,\n\t\t'2' => 2,\n\t\t'3' =>\
    \ 3,\n\t\t'4' => 4,\n\t\t'5' => 5,\n\t\t'6' => 6,\n\t\t'7' => 7,\n\t\t'8' => 8,\n\
    \t\t'9' => 9,\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D' => 13,\n\
    \t\t'E' => 14,\n\t\t'F' => 15\n\t];\n\t$count = 0;\n\tforeach (str_split($num)\
    \ as $numeral) {\n\t\tif (array_key_exists($numeral, $hex_digits)) {\n\t\t\tif\
    \ (in_array($hex_digits[$numeral], [2, 3, 5, 7, 11, 13])) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$res = 0;\n\t$primes = array(2, 3, 5, 7, 11, 13);\n\t$array = array_merge(range(0,\
    \ 9), range('A', 'F'));\n\t$convert = array_flip($array);\n\tforeach (str_split($num)\
    \ as $char) {\n\t\tif (in_array($convert[$char], $primes)) {\n\t\t\t$res++;\n\t\
    \t}\n\t}\n\treturn $res;\n}\necho hex_key(\"AB\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = [\n\t\t\"0\" => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"3\"\
    \ => 3,\n\t\t\"4\" => 4,\n\t\t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\t\
    \t\"8\" => 8,\n\t\t\"9\" => 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\"\
    \ => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t];\n\treturn\
    \ $key[$num];\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9pvctm9.php:45\n\
    Stack trace:\n#0 /tmp/tmpk9pvctm9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk9pvctm9.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $str = \"0123456789ABCDEF\";\n  $arr = str_split($str);\n  $hex_arr = str_split($num);\n\
    \  $value = array_flip($arr);\n  $result = 0;\n  foreach ($hex_arr as $element)\
    \ {\n    if (in_array($element, $arr)) {\n      if ($value[$element] === 0 ||\
    \ $value[$element] === 1) {\n        continue;\n      } elseif ($value[$element]\
    \ === 2 || $value[$element] === 3) {\n        $result += 1;\n      } elseif ($value[$element]\
    \ === 5 || $value[$element] === 7) {\n        $result += 1;\n      } elseif ($value[$element]\
    \ === 11 || $value[$element] === 13) {\n        $result += 1;\n      }\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = array(\n\t\t'2' => 2,\n\t\t'3' => 3,\n\t\t'5' => 5,\n\t\t'7' =>\
    \ 7,\n\t\t'B' => 11,\n\t\t'D' => 13,\n\t);\n\t$result = array();\n\tfor ($i =\
    \ 0; $i < strlen($num); $i++) {\n\t\tif (array_key_exists($num[$i], $key)) {\n\
    \t\t\t$result[] = $key[$num[$i]];\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu98oxt0.php:40\n\
    Stack trace:\n#0 /tmp/tmpbu98oxt0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbu98oxt0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex = [\n    0 => false,\n    1 => false,\n    2 => true,\n    3 => true,\n\
    \    4 => false,\n    5 => true,\n    6 => false,\n    7 => true,\n    8 => false,\n\
    \    9 => false,\n    'A' => true,\n    'B' => true,\n    'C' => false,\n    'D'\
    \ => true,\n    'E' => false,\n    'F' => false,\n  ];\n  $count = 0;\n  for ($i\
    \ = 0; $i < strlen($num); $i++) {\n    if ($hex[$num[$i]]) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\necho hex_key(\"AB\"); // 1\necho \"\\n\";\n\
    echo hex_key(\"1077E\"); // 2\necho \"\\n\";\necho hex_key(\"ABED1A33\"); // 4\n\
    echo \"\\n\";\necho hex_key(\"123456789ABCDEF0\"); // 6\necho \"\\n\";\necho hex_key(\"\
    2020\"); // 2\necho \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n2\n6\n7\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmple6fkay8.php:60\n\
    Stack trace:\n#0 /tmp/tmple6fkay8.php(68): test()\n#1 {main}\n  thrown in /tmp/tmple6fkay8.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_num = str_split($num);\n    $prime_num = [2, 3, 5, 7, 11, 13];\n\
    \    $prime_hexa = ['2', '3', '5', '7', 'B', 'D'];\n    $num_prime = 0;\n    foreach\
    \ ($hex_num as $hexa) {\n        if (in_array($hexa, $prime_hexa)) {\n       \
    \     $num_prime++;\n        }\n    }\n    return $num_prime;\n}\necho hex_key(\"\
    123456789ABCDEF0\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = str_split($num);\n\t$count = 0;\n\tforeach ($hex as $key => $value)\
    \ {\n\t\tif ($value == '0' || $value == '1' || $value == '2' || $value == '3'\
    \ || $value == '4' || $value == '5' || $value == '6' || $value == '7' || $value\
    \ == '8' || $value == '9' || $value == 'B' || $value == 'D') {\n\t\t\t$count +=\
    \ 1;\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"AB\") . \"<br>\";\necho\
    \ hex_key(\"1077E\") . \"<br>\";\necho hex_key(\"ABED1A33\") . \"<br>\";\necho\
    \ hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho hex_key(\"2020\") . \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>4<br>5<br>12<br>4<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppu18tzgj.php:39\nStack trace:\n#0 /tmp/tmppu18tzgj.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmppu18tzgj.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_digits = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"\
    8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    $hex_primes = array(\"0\"\
    ,\"0\",\"1\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\"\
    ,\"0\",\"0\");\n    $total = 0;\n    $num_len = strlen($num);\n    for ($i = 0;\
    \ $i < $num_len; $i++) {\n        $num_hex = strtoupper($num[$i]);\n        $num_key\
    \ = array_search($num_hex, $hex_digits);\n        if ($hex_primes[$num_key] ==\
    \ 1) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\n$num\
    \ = \"123456789ABCDEF0\";\necho \"Number of hexadecimal primes: \" . hex_key($num);\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'Number of hexadecimal primes: 6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $a = array('2', '3', '5', '7', 'B', 'D');\n    $string = str_split($num);\n\
    \    $count = 0;\n    for ($i = 0; $i < count($string); $i++) {\n        if (in_array($string[$i],\
    \ $a)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nprint_r(hex_key(\"\
    AB\"));\nprint_r(hex_key(\"1077E\"));\nprint_r(hex_key(\"ABED1A33\"));\nprint_r(hex_key(\"\
    123456789ABCDEF0\"));\nprint_r(hex_key(\"2020\"));\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '12462'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex = [\n    '0' => true,\n    '1' => true,\n    '2' => true,\n    '3'\
    \ => true,\n    '4' => true,\n    '5' => true,\n    '6' => true,\n    '7' => true,\n\
    \    '8' => true,\n    '9' => true,\n    'A' => true,\n    'B' => true,\n    'C'\
    \ => true,\n    'D' => true,\n    'E' => true,\n    'F' => true,\n  ];\n  $count\
    \ = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if (isset($hex[$num[$i]]))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\necho hex_key(\"AB\");\n\
    echo \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\";\necho hex_key(\"ABED1A33\"\
    );\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\");\necho \"<br>\";\necho\
    \ hex_key(\"2020\");\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2<br>5<br>8<br>16<br>4<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdfdx0e1g.php:60\nStack trace:\n#0 /tmp/tmpdfdx0e1g.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdfdx0e1g.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = [\n        'A' => 10,\n        'B' => 11,\n        'C' =>\
    \ 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15\n    ];\n   \
    \ return $hex_key[$num];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67cgdt0k.php:34\n\
    Stack trace:\n#0 /tmp/tmp67cgdt0k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp67cgdt0k.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $array = [\n        '2' => 1,\n        '3' => 1,\n        '5' => 1,\n\
    \        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    ];\n    $result\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (isset($array[$num[$i]]))\
    \ {\n            $result++;\n        }\n    }\n    return $result;\n}\nprint_r(hex_key(\"\
    AB\"));\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $characters = \"0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F\";\n  $a = explode(\",\"\
    , $characters);\n  $b = array();\n  for ($i=0; $i < count($a); $i++) { \n    if\
    \ (in_array($a[$i], array(\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"))) {\n      array_push($b,\
    \ $a[$i]);\n    }\n  }\n  $r = count(array_intersect(str_split($num), $b));\n\
    \  echo $r;\n}\nhex_key(\"1077E\");\necho \"<br>\";\nhex_key(\"ABED1A33\");\n\
    echo \"<br>\";\nhex_key(\"123456789ABCDEF0\");\necho \"<br>\";\nhex_key(\"2020\"\
    );\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2<br>4<br>6<br>21\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38ar29d1.php:42\n\
    Stack trace:\n#0 /tmp/tmp38ar29d1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp38ar29d1.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array('A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F'\
    \ => 15);\n    return is_numeric($num) ? $num : $hex[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuckns_p.php:27\n\
    Stack trace:\n#0 /tmp/tmpiuckns_p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpiuckns_p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $result = 0;\n    $hex = array(\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $hex))\
    \ {\n            for ($y = 0; $y < count($hex); $y++) {\n                if ($num[$i]\
    \ == $hex[$y]) {\n                    if ($y == 1 || $y == 3 || $y == 5 || $y\
    \ == 7 || $y == 11 || $y == 13) {\n                        $result++;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}\necho hex_key(\"0xA\");\necho \"\\n\";\necho hex_key(\"AB\");\n\
    echo \"\\n\";\necho hex_key(\"1077E\");\necho \"\\n\";\necho hex_key(\"ABED1A33\"\
    );\necho \"\\n\";\necho hex_key(\"123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"\
    2020\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n1\n3\n5\n6\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l42vw_t.php:52\n\
    Stack trace:\n#0 /tmp/tmp4l42vw_t.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp4l42vw_t.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // \u043D\u0430\u0445\u043E\u0434\u0438\u043C \u043A\u043E\u043B\u0438\
    \u0447\u0435\u0441\u0442\u0432\u043E \u043F\u0440\u043E\u0441\u0442\u044B\u0445\
    \ \u0447\u0438\u0441\u0435\u043B \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435\
    \n    $prime_keys = 0;\n    //\u041C\u0430\u0441\u0441\u0438\u0432 \u043F\u0440\
    \u043E\u0441\u0442\u044B\u0445 \u0447\u0438\u0441\u0435\u043B\n    $hex_digits\
    \ = array(1, 2, 3, 5, 7, 11, 13);\n    //\u041C\u0430\u0441\u0441\u0438\u0432\
    \ \u0431\u0443\u043A\u0432\u0435\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\
    \u0435\u043D\u0438\u0439\n    $alphabet = array('A', 'B', 'C', 'D', 'E', 'F');\n\
    \    // \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u0443\u0435\u043C \u0441\
    \u0442\u0440\u043E\u043A\u0443 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\
    \ \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0438\u043C \u0431\u0443\u043A\u0432\
    \u0435\u043D\u043D\u044B\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\
    \ \u0432 \u0447\u0438\u0441\u043B\u043E\u0432\u044B\u0435\n    $split_num = str_split($num);\n\
    \    foreach ($split_num as $key => $value) {\n        if (in_array($value, $alphabet))\
    \ {\n            $split_num[$key] = array_search($value, $alphabet) + 10;\n  \
    \      }\n    }\n    foreach ($split_num as $value) {\n        if (in_array($value,\
    \ $hex_digits)) {\n            $prime_keys++;\n        }\n    }\n    return $prime_keys;\n\
    }\n$num = \"AB\";\necho hex_key($num);\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcrq5b2z.php:47\n\
    Stack trace:\n#0 /tmp/tmprcrq5b2z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprcrq5b2z.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $arr = [2, 3, 5, 7, 11, 13];\n  $res = 0;\n  $num = str_split($num);\n\
    \  foreach ($num as $val) {\n    $val = hexdec($val);\n    if (in_array($val,\
    \ $arr)) {\n      $res++;\n    }\n  }\n  return $res;\n}\nprint_r(hex_key(\"AB\"\
    ));\nprint_r(hex_key(\"1077E\"));\nprint_r(hex_key(\"ABED1A33\"));\nprint_r(hex_key(\"\
    123456789ABCDEF0\"));\nprint_r(hex_key(\"2020\"));\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '12462'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key = array(\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D'\
    \ => 13,\n\t\t'E' => 14,\n\t\t'F' => 15\n\t);\n\treturn $key[$num];\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcjd3_6b.php:34\n\
    Stack trace:\n#0 /tmp/tmprcjd3_6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprcjd3_6b.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return strtoupper($num);\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ea8ma7c.php:26\n\
    Stack trace:\n#0 /tmp/tmp3ea8ma7c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3ea8ma7c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_array = [\n\t\t'0' => 0,\n\t\t'1' => 1,\n\t\t'2' => 2,\n\t\t'3' =>\
    \ 3,\n\t\t'4' => 4,\n\t\t'5' => 5,\n\t\t'6' => 6,\n\t\t'7' => 7,\n\t\t'8' => 8,\n\
    \t\t'9' => 9,\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t'D' => 13,\n\
    \t\t'E' => 14,\n\t\t'F' => 15\n\t];\n\treturn $hex_array[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29l5ik7a.php:44\n\
    Stack trace:\n#0 /tmp/tmp29l5ik7a.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp29l5ik7a.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15,\n    ];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0f8010h.php:43\n\
    Stack trace:\n#0 /tmp/tmpf0f8010h.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpf0f8010h.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_key = array( \n    '0' => 0, \n    '1' => 1, \n    '2' => 2, \n  \
    \  '3' => 3, \n    '4' => 4, \n    '5' => 5, \n    '6' => 6, \n    '7' => 7, \n\
    \    '8' => 8, \n    '9' => 9, \n    'A' => 10, \n    'B' => 11, \n    'C' =>\
    \ 12, \n    'D' => 13, \n    'E' => 14, \n    'F' => 15 \n  );\n  return $hex_key[$num];\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo8dmqpp.php:44\n\
    Stack trace:\n#0 /tmp/tmpyo8dmqpp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyo8dmqpp.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $count = 0;\n    $hex = ['A', 'B', 'C', 'D', 'E', 'F'];\n    $key = array_search($num,\
    \ $hex);\n    if ($key >= 0) {\n        $key += 10;\n    } else {\n        $key\
    \ = $num;\n    }\n    return $key;\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyhp_4f8.php:34\n\
    Stack trace:\n#0 /tmp/tmpbyhp_4f8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbyhp_4f8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $digits = [\n        \"A\" => 11,\n        \"B\" => 12,\n        \"C\"\
    \ => 13,\n        \"D\" => 14,\n        \"E\" => 15,\n        \"F\" => 16\n  \
    \  ];\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        $digit\
    \ = substr($num, $i, 1);\n        if (is_numeric($digit)) {\n            $digit\
    \ = (int)$digit;\n        } else {\n            $digit = $digits[$digit];\n  \
    \      }\n        for ($j = 2; $j <= 16; $j++) {\n            if ($digit == $j)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"<br>\";\necho hex_key(\"1077E\") . \"<br>\";\necho\
    \ hex_key(\"ABED1A33\") . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\"\
    ;\necho hex_key(\"2020\") . \"<br>\";\necho \"<hr>\";\n\n\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2<br>3<br>7<br>14<br>2<br><hr>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpsre6mjso.php:57\nStack trace:\n#0 /tmp/tmpsre6mjso.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsre6mjso.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array('A' => '10', 'B' => '11', 'C' => '12', 'D' => '13', 'E'\
    \ => '14', 'F' => '15');\n    $key = array();\n    $key_str = \"\";\n    for ($i\
    \ = 0; $i < strlen($num); $i++) {\n        if (array_key_exists($num[$i], $hex))\
    \ {\n            $key_str .= $hex[$num[$i]];\n        } else {\n            $key_str\
    \ .= $num[$i];\n        }\n    }\n    $key = str_split($key_str);\n    return\
    \ $key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4aqy6px.php:37\n\
    Stack trace:\n#0 /tmp/tmpo4aqy6px.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpo4aqy6px.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = str_split($num);\n    $result = 0;\n    foreach ($hex as $key\
    \ => $value) {\n        if ($value==\"2\" || $value==\"3\" || $value==\"5\" ||\
    \ $value==\"7\" || $value==\"B\" || $value==\"D\") {\n            $result++;\n\
    \        }\n    }\n    return $result;\n}\necho hex_key(\"1077E\").\"\\n\";\n\
    echo hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\").\"\\n\"\
    ;\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$prim = array(0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0);\n\t$cnt = 0;\n\tfor ($i=0;\
    \ $i < strlen($num); $i++) { \n\t\t$key = hexdec($num[$i]);\n\t\t$cnt += $prim[$key];\n\
    \t}\n\treturn $cnt;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $digits = [\n        'A' => 10,\n        'B' => 11,\n        'C' => 12,\n\
    \        'D' => 13,\n        'E' => 14,\n        'F' => 15\n    ];\n    $hex_arr\
    \ = [];\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (preg_match('/[A-F]/',\
    \ $num[$i])) {\n            $hex_arr[] = $digits[$num[$i]];\n        } else {\n\
    \            $hex_arr[] = $num[$i];\n        }\n    }\n    return array_map('intval',\
    \ $hex_arr);\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xlsb96l.php:43\n\
    Stack trace:\n#0 /tmp/tmp3xlsb96l.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3xlsb96l.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_digits = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D',\
    \ 'E', 'F');\n    $primes = array(2, 3, 5, 7, 11, 13, 17);\n    $count = 0;\n\
    \    $num = str_split($num);\n    foreach ($num as $hex) {\n        foreach ($hex_digits\
    \ as $key => $digit) {\n            if ($hex == $digit) {\n                if\
    \ (in_array($key, $primes)) {\n                    $count++;\n               \
    \ }\n            }\n        }\n    }\n    return $count;\n}\n\nprint(hex_key(\"\
    AB\") . PHP_EOL);\nprint(hex_key(\"1077E\") . PHP_EOL);\nprint(hex_key(\"ABED1A33\"\
    ) . PHP_EOL);\nprint(hex_key(\"123456789ABCDEF0\") . PHP_EOL);\nprint(hex_key(\"\
    2020\") . PHP_EOL);\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $nums = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \  return str_split($num);\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzpxzgmx.php:28\n\
    Stack trace:\n#0 /tmp/tmptzpxzgmx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptzpxzgmx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    ];\n    return $key[$num];\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxehndz2.php:45\n\
    Stack trace:\n#0 /tmp/tmpuxehndz2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpuxehndz2.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = [\n        \"0\" => 0,\n        \"1\" => 1,\n        \"2\"\
    \ => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n     \
    \   \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n\
    \        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n        \"\
    D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    ];\n    return $hex_key[$num];\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnvelwhc.php:45\n\
    Stack trace:\n#0 /tmp/tmphnvelwhc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphnvelwhc.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array('A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F'\
    \ => 15);\n    $hex_array = str_split($num);\n    $hex_array = array_map(function($n)\
    \ use ($key) {\n        return (int) isset($key[$n]) ? $key[$n] : $n;\n    },\
    \ $hex_array);\n    return array_sum($hex_array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopm4z8to.php:32\n\
    Stack trace:\n#0 /tmp/tmpopm4z8to.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpopm4z8to.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $prime_numbers = array(2, 3, 5, 7, 11, 13);\n    $hex_numbers = array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    $hex_key = array();\n\
    \    $digits = str_split($num);\n    $digits_hex = [];\n    $result = 0;\n   \
    \ foreach ($digits as $value) {\n        $digits_hex[] = hexdec($value);\n   \
    \ }\n    foreach ($digits_hex as $key => $value) {\n        if (in_array($value,\
    \ $prime_numbers)) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\n$num = \"2020\";\necho hex_key($num);\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '2'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $arr = [2, 3, 5, 7, 11, 13];\n  $solution = array_intersect($arr, str_split($num));\n\
    \  return count($solution);\n}\nprint_r(hex_key(\"AB\")); // 1\nprint_r(hex_key(\"\
    1077E\")); // 2\nprint_r(hex_key(\"ABED1A33\")); // 4\nprint_r(hex_key(\"123456789ABCDEF0\"\
    )); // 6\nprint_r(hex_key(\"2020\")); // 2\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "01141\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nueqqzn.php:33\n\
    Stack trace:\n#0 /tmp/tmp5nueqqzn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5nueqqzn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = array('A' => '10', 'B' => '11', 'C' => '12', 'D' => '13',\
    \ 'E' => '14', 'F' => '15');\n    if (array_key_exists($num, $hex_key)) {\n  \
    \      return $hex_key[$num];\n    } else {\n        return $num;\n    }\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqsa728g.php:31\n\
    Stack trace:\n#0 /tmp/tmpmqsa728g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmqsa728g.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = array(\n        \"0\" => 0,\n        \"1\" => 1,\n       \
    \ \"2\" => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n\
    \        \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\"\
    \ => 9,\n        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n  \
    \      \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    );\n    return\
    \ $hex_key[$num];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5219h8ae.php:44\n\
    Stack trace:\n#0 /tmp/tmp5219h8ae.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5219h8ae.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_list = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F'\
    \ => 15];\n    $hex_key = str_split($num);\n    $hex_val = [];\n    foreach ($hex_key\
    \ as $key => $val) {\n        if (in_array($val, array_keys($hex_list))) {\n \
    \           $hex_val[] = $hex_list[$val];\n        } else {\n            $hex_val[]\
    \ = $val;\n        }\n    }\n    return $hex_val;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpriccmpi7.php:37\n\
    Stack trace:\n#0 /tmp/tmpriccmpi7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpriccmpi7.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    $hex = str_split($num);\n    $output\
    \ = 0;\n    foreach ($hex as $h) {\n        if ($h == \"A\" || $h == \"B\" ||\
    \ $h == \"D\") {\n            $output++;\n        }\n    }\n    return $output;\n\
    }\n\necho hex_key(\"1077E\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7djj6maf.php:36\n\
    Stack trace:\n#0 /tmp/tmp7djj6maf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7djj6maf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $hex_key = [\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n  \
    \  \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  ];\n  return $hex_key[$num];\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmploahrlop.php:34\n\
    Stack trace:\n#0 /tmp/tmploahrlop.php(42): test()\n#1 {main}\n  thrown in /tmp/tmploahrlop.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n\
    \    $dec = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    $hexdec\
    \ = array_combine($hex, $dec);\n    $result = 0;\n    $arr = str_split($num);\n\
    \    foreach ($arr as $key => $value) {\n        if ($hexdec[$value] % 2 != 0\
    \ && $hexdec[$value] % 3 != 0 && $hexdec[$value] % 5 != 0 && $hexdec[$value] !=\
    \ 1) {\n            $result++;\n        }\n    }\n    return $result;\n}\necho\
    \ hex_key(\"1077E\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcokzihgn.php:39\n\
    Stack trace:\n#0 /tmp/tmpcokzihgn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcokzihgn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array( \n        '0' => 0,\n        '1' => 1,\n        '2' =>\
    \ 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' =>\
    \ 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' =>\
    \ 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E'\
    \ => 14,\n        'F' => 15\n    );\n    return $key[$num];\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0__4m85t.php:44\n\
    Stack trace:\n#0 /tmp/tmp0__4m85t.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0__4m85t.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n    $primes = array(\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n    return (in_array($num, $primes)\
    \ ? 1 : 0);\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpistzdz5p.php:29\n\
    Stack trace:\n#0 /tmp/tmpistzdz5p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpistzdz5p.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$num = strtoupper($num);\n\t$arr = ['2', '3', '5', '7', 'B', 'D'];\n\t\
    $result = 0;\n\t$size = strlen($num);\n\tfor ($i = 0; $i < $size; $i++) {\n\t\t\
    if (in_array($num[$i], $arr)) {\n\t\t\t$result++;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  //$num = strtoupper($num);\n  $arr_num = str_split($num);\n  $count = 0;\n\
    \  foreach ($arr_num as $hex_digit) {\n    if ($hex_digit === '2' || $hex_digit\
    \ === '3' || $hex_digit === '5' || $hex_digit === '7' || $hex_digit === 'B' ||\
    \ $hex_digit === 'D') {\n      $count++;\n    }\n  }\n  return $count;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = ['0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' =>\
    \ 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12,\
    \ 'D' => 13, 'E' => 14, 'F' => 15];\n    return $hex_key[$num];\n}\n\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpha77ognx.php:28\n\
    Stack trace:\n#0 /tmp/tmpha77ognx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpha77ognx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_key = [\n        'A' => 10,\n        'B' => 11,\n        'C' =>\
    \ 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15\n    ];\n   \
    \ return $hex_key[$num];\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyuqxqkd0.php:34\n\
    Stack trace:\n#0 /tmp/tmpyuqxqkd0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyuqxqkd0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_arr = [\"A\" => \"10\", \"B\" => \"11\", \"C\" => \"12\", \"D\"\
    \ => \"13\", \"E\" => \"14\", \"F\" => \"15\"];\n    $hex_key = array_keys($hex_arr);\n\
    \    return $hex_key;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfimppnq.php:28\n\
    Stack trace:\n#0 /tmp/tmpnfimppnq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnfimppnq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // code here\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkshyuu9.php:27\n\
    Stack trace:\n#0 /tmp/tmppkshyuu9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppkshyuu9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \t$hex_prime = array('2','3','5','7','B','D');\n\t$count = 0;\n\tfor ($i=0; $i\
    \ < strlen($num); $i++) { \n\t\tif (in_array($num[$i], $hex_prime)) {\n\t\t\t\
    $count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"AB\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex_number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',\
    \ 'B', 'C', 'D', 'E', 'F'];\n    $dec_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    $result =\
    \ 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_qa1kezd.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $keys = [\n        'A' => 10,\n        'B' => 11,\n        'C' => 12,\n\
    \        'D' => 13,\n        'E' => 14,\n        'F' => 15\n    ];\n    $arr =\
    \ str_split($num);\n    $count = 0;\n    foreach ($arr as $key => $value) {\n\
    \        if ($value == 2 || $value == 3 || $value == 5 || $value == 7 || $value\
    \ == 11 || $value == 13) {\n            $count++;\n        }\n        if (array_key_exists($value,\
    \ $keys)) {\n            if ($keys[$value] == 11 || $keys[$value] == 13) {\n \
    \               $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"];\n\t$count = 0;\n\tfor ($i=0;\
    \ $i < strlen($num); $i++) { \n\t\t$curr_key = $num[$i];\n\t\tif (in_array($curr_key,\
    \ $hex)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"\
    AB\").\"\\n\";\necho hex_key(\"1077E\").\"\\n\";\necho hex_key(\"ABED1A33\").\"\
    \\n\";\necho hex_key(\"123456789ABCDEF0\").\"\\n\";\necho hex_key(\"2020\").\"\
    \\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = [\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n \
    \       '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n \
    \       '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    ];\n    return $key[$num];\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp713hf3y0.php:45\n\
    Stack trace:\n#0 /tmp/tmp713hf3y0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp713hf3y0.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    // your code here\n    $hex_prime = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    $count = 0;\n    $arr = str_split($num);\n    foreach ($arr as $k => $v)\
    \ {\n        if (in_array($v, $hex_prime)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\necho hex_key(\"123456789ABCDEF0\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $output = array();\n  $hex_array = str_split($num);\n  foreach ($hex_array\
    \ as $hex) {\n    if ($hex == \"2\" || $hex == \"3\" || $hex == \"5\" || $hex\
    \ == \"7\" || $hex == \"B\" || $hex == \"D\") {\n      array_push($output, $hex);\n\
    \    }\n  }\n  return count($output);\n}\necho hex_key(\"AB\") . \"\\n\";\necho\
    \ hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $result = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        $hex\
    \ = strtoupper($num[$i]);\n        $dec = hexdec($hex);\n        if ($dec == 2\
    \ || $dec == 3 || $dec == 5 || $dec == 7 || $dec == 11 || $dec == 13) {\n    \
    \        $result++;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $num_array = str_split($num);\n    $num_array = array_reverse($num_array);\n\
    \    $dec_num = 0;\n    $hex_num = 0;\n    $hex_key = array(0,1,2,3,4,5,6,7,8,9,\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    $primes = array(2,3,5,7,11,13);\n   \
    \ $prime_counter = 0;\n    for ($i=0; $i < count($num_array); $i++) { \n     \
    \   $dec_num = array_search($num_array[$i], $hex_key);\n        $hex_num += $dec_num\
    \ * (16 ** $i);\n    }\n    $prime_string = '';\n    while ($hex_num > 0) {\n\
    \        $prime_string = ($hex_num % 10).$prime_string;\n        $hex_num = intval($hex_num\
    \ / 10);\n    }\n    for ($i=0; $i < strlen($prime_string); $i++) { \n       \
    \ if (in_array($prime_string[$i], $primes)) {\n            $prime_counter++;\n\
    \        }\n    }\n    return $prime_counter;\n}\nprint_r(hex_key(\"2020\"));\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm3u7xud.php:48\n\
    Stack trace:\n#0 /tmp/tmpdm3u7xud.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdm3u7xud.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $prime_key = array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n    $hex_key =\
    \ array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\
    \ \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n    $counter = 0;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $prime_key)) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}\necho \"<br>\"\
    ;\necho \"I'm not good in maths, so I don't know how to solve it in an other way.<br>\"\
    ;\necho \"The answer is: \" . hex_key(\"AB\");\necho \"<br>\";\necho \"The answer\
    \ is: \" . hex_key(\"1077E\");\necho \"<br>\";\necho \"The answer is: \" . hex_key(\"\
    ABED1A33\");\necho \"<br>\";\necho \"The answer is: \" . hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho \"The answer is: \" . hex_key(\"2020\");\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br>I'm not good in maths, so I don't know how to solve it in an other\
    \ way.<br>The answer is: 2<br>The answer is: 5<br>The answer is: 8<br>The answer\
    \ is: 16<br>The answer is: 4<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpsx66d3a2.php:46\nStack trace:\n#0 /tmp/tmpsx66d3a2.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsx66d3a2.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$key=[\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"\
    7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"\
    F\"=>15];\n\treturn $key[$num];\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8w5a8va.php:28\n\
    Stack trace:\n#0 /tmp/tmpy8w5a8va.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy8w5a8va.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $primes = ['2','3','5','7','B','D'];\n    $count = 0;\n    for ($i=0;\
    \ $i < strlen($num); $i++) { \n        $char = substr($num, $i, 1);\n        if\
    \ (in_array($char, $primes)) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n\n$num = \"123456789ABCDEF0\";\n$num2 = \"2020\";\n$num3 = \"AB\"\
    ;\n$num4 = \"1077E\";\n$num5 = \"ABED1A33\";\n\necho hex_key($num) . \"\\n\";\n\
    echo hex_key($num2) . \"\\n\";\necho hex_key($num3) . \"\\n\";\necho hex_key($num4)\
    \ . \"\\n\";\necho hex_key($num5) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n2\n1\n2\n4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    if(strlen($num) > 0) {\n        $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \        $primes = array('B', 'D');\n        $keys = array_keys($hex, $num);\n\
    \        $count = 0;\n        foreach($keys as $v) {\n            if(in_array($hex[$v],\
    \ $primes)) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n    return 0;\n}\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2mhahi2.php:38\n\
    Stack trace:\n#0 /tmp/tmpk2mhahi2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpk2mhahi2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n  $num = strtoupper($num);\n  $primes = array(2, 3, 5, 7, 11, 13);\n  $sum\
    \ = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    $temp = ord($num[$i]);\n\
    \    if ($temp >= 48 && $temp <= 57) {\n      if (in_array($temp - 48, $primes))\
    \ {\n        $sum++;\n      }\n    } else if ($temp >= 65 && $temp <= 70) {\n\
    \      if (in_array($temp - 55, $primes)) {\n        $sum++;\n      }\n    }\n\
    \  }\n  return $sum;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$num = strtoupper($num);\n\t$arr = str_split($num);\n\t$hexadecimal = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \t$prime = ['2','3','5','7','B','D'];\n\t$number = array_intersect($arr, $prime);\n\
    \treturn count($number);\n}\n$num = \"1077E\";\necho hex_key($num);\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '2'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_values = [\n\t\t\t\t\t'A' => 10,\n\t\t\t\t\t'B' => 11,\n\t\t\t\t\t\
    'C' => 12,\n\t\t\t\t\t'D' => 13,\n\t\t\t\t\t'E' => 14,\n\t\t\t\t\t'F' => 15\n\t\
    \t\t\t\t];\n\t$count = 0;\n\t$hex_len = strlen($num);\n\tfor ($i=0; $i < $hex_len;\
    \ $i++) { \n\t\tif (isset($hex_values[$num[$i]])) {\n\t\t\tif ($hex_values[$num[$i]]\
    \ == 11 || $hex_values[$num[$i]] == 13) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\
    \t\telseif ($num[$i] == '2' || $num[$i] == '3' || $num[$i] == '5' || $num[$i]\
    \ == '7') {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"\
    ABED1A33\") . \"<br>\";\necho hex_key(\"2020\") . \"<br>\";\necho hex_key(\"1077E\"\
    ) . \"<br>\";\necho hex_key(\"123456789ABCDEF0\") . \"<br>\";\necho hex_key(\"\
    AB\") . \"<br>\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 4<br>2<br>2<br>6<br>1<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $length = strlen($num);\n    $key = 0;\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if($num[$i] == '2' || $num[$i] == '3' || $num[$i] == '5' ||\
    \ $num[$i] == '7' || $num[$i] == 'B' || $num[$i] == 'D') {\n            $key +=\
    \ 1;\n        }\n    }\n    return $key;\n}\necho hex_key(\"AB\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $arr = str_split($num);\n    $count = 0;\n    $digits = array('2', '3',\
    \ '5', '7', 'B', 'D');\n    foreach ($arr as $a) {\n        if (in_array($a, $digits))\
    \ $count++;\n    }\n    return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho\
    \ hex_key(\"1077E\").\"\\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\").\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex_keys = array(\n\t\t0 => '0',\n\t\t1 => '1',\n\t\t2 => '2',\n\t\t3\
    \ => '3',\n\t\t4 => '4',\n\t\t5 => '5',\n\t\t6 => '6',\n\t\t7 => '7',\n\t\t8 =>\
    \ '8',\n\t\t9 => '9',\n\t\t10 => 'A',\n\t\t11 => 'B',\n\t\t12 => 'C',\n\t\t13\
    \ => 'D',\n\t\t14 => 'E',\n\t\t15 => 'F'\n\t);\n\treturn $hex_keys[$num];\n}\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx64i1t33.php:44\n\
    Stack trace:\n#0 /tmp/tmpx64i1t33.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpx64i1t33.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $key = array(\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\"\
    \ => 14, \"F\" => 15);\n    $arr = str_split($num);\n    $count = 0;\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if (array_key_exists($arr[$i], $key))\
    \ {\n            $arr[$i] = $key[$arr[$i]];\n        }\n        if ($arr[$i] ==\
    \ 2 || $arr[$i] == 3 || $arr[$i] == 5 || $arr[$i] == 7 || $arr[$i] == 11 || $arr[$i]\
    \ == 13) {\n            $count++;\n        }\n    }\n    return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n\t$hex = array(\n\t\t\"0\" => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"\
    3\" => 3,\n\t\t\"4\" => 4,\n\t\t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\
    \t\t\"8\" => 8,\n\t\t\"9\" => 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\"\
    \ => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t);\n\t$nums =\
    \ str_split($num);\n\t$prime_count = 0;\n\tfor ($i=0; $i < count($nums); $i++)\
    \ { \n\t\tif ($hex[$nums[$i]] == 2 || $hex[$nums[$i]] == 3 || $hex[$nums[$i]]\
    \ == 5 || $hex[$nums[$i]] == 7 || $hex[$nums[$i]] == 11 || $hex[$nums[$i]] ==\
    \ 13) {\n\t\t\t$prime_count++;\n\t\t}\n\t}\n\treturn $prime_count;\n}\necho hex_key(\"\
    AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\"\
    ) . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n6\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $alpha = array(\n        \"1\" => 1,\n        \"2\" => 2,\n        \"\
    3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n        \"6\" => 6,\n   \
    \     \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n        \"A\" =>\
    \ 10,\n        \"B\" => 11,\n        \"C\" => 12,\n        \"D\" => 13,\n    \
    \    \"E\" => 14,\n        \"F\" => 15\n    );\n    $key = array_keys($alpha,$num);\n\
    \    return $key[0];\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppb04y7je.php:45\n\
    Stack trace:\n#0 /tmp/tmppb04y7je.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppb04y7je.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hash = array(\n        '0' => 0,\n        '1' => 1,\n        '2' =>\
    \ 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' =>\
    \ 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' =>\
    \ 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E'\
    \ => 14,\n        'F' => 15\n    );\n    $hex_num = str_split($num);\n    $result\
    \ = 0;\n    for ($i = 0; $i < count($hex_num); $i++) {\n        if ($hash[$hex_num[$i]]\
    \ == 2 || $hash[$hex_num[$i]] == 3 || $hash[$hex_num[$i]] == 5 || $hash[$hex_num[$i]]\
    \ == 7 || $hash[$hex_num[$i]] == 11 || $hash[$hex_num[$i]] == 13) {\n        \
    \    $result++;\n        }\n    }\n    return $result;\n}\nprint_r(hex_key(\"\
    AB\"));\nprint_r(hex_key(\"1077E\"));\nprint_r(hex_key(\"ABED1A33\"));\nprint_r(hex_key(\"\
    123456789ABCDEF0\"));\nprint_r(hex_key(\"2020\"));\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '12462'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hex = [\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" =>\
    \ 14, \"F\" => 15];\n    $result = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n        if (in_array($num[$i], array_keys($hex))) {\n            $value =\
    \ $hex[$num[$i]];\n        } else {\n            $value = $num[$i];\n        }\n\
    \        if ($value == 2 || $value == 3 || $value == 5 || $value == 7 || $value\
    \ == 11 || $value == 13) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\necho hex_key(\"AB\");\necho hex_key(\"1077E\");\necho hex_key(\"\
    ABED1A33\");\necho hex_key(\"123456789ABCDEF0\");\necho hex_key(\"2020\");\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '12462'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    $hexs = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',\
    \ 'B', 'C', 'D', 'E', 'F');\n    $hex_key = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hexs)) {\n            $hex_key++;\n\
    \        }\n    }\n    return $hex_key;\n}\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6r1uye9e.php:33\n\
    Stack trace:\n#0 /tmp/tmp6r1uye9e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6r1uye9e.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output\
    \ should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"\
    ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output\
    \ should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key($num)\
    \ {\n    return array_keys(array_map(function ($item) {\n        return intval($item,\
    \ 16);\n    }, str_split($num)), 2, true);\n}\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7h6aq9o.php:28\n\
    Stack trace:\n#0 /tmp/tmpz7h6aq9o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpz7h6aq9o.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
