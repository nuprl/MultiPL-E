name: HumanEval_4_mean_absolute_deviation
language: php
results:
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  $deviations = array();\n\
    \  foreach ($numbers as $number) {\n    $deviations[] = abs($number - $mean);\n\
    \  }\n  return array_sum($deviations) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ Compute mean\n\t$mean = array_sum($numbers) / count($numbers);\n\t// Now, work\
    \ out the sum of the absolute difference between each\n\t// element and the mean\n\
    \t$absolute_differences = array();\n\tforeach ($numbers as $number) {\n\t\t$absolute_differences[]\
    \ = abs($number - $mean);\n\t}\n\t// Now, return the mean of the absolute differences\n\
    \treturn array_sum($absolute_differences) / count($absolute_differences);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the mean.\n    $sum = 0;\n    $total_count = count($numbers);\n  \
    \  foreach ($numbers as $number) {\n        $sum += $number;\n    }\n    $mean\
    \ = $sum / $total_count;\n\n    // Calculate MAD\n    $sum = 0;\n    foreach ($numbers\
    \ as $number) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / $total_count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $length = count($numbers);\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $numbers[$i] = abs($numbers[$i] - $mean);\n  }\n  return mean($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpkzj6vvx4.php:10\n\
    Stack trace:\n#0 /tmp/tmpkzj6vvx4.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpkzj6vvx4.php(23): candidate(Array)\n#2 /tmp/tmpkzj6vvx4.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkzj6vvx4.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        throw new Exception('The input needs to be\
    \ an array');\n    }\n    if (count($numbers) === 0) {\n        throw new Exception('The\
    \ input array is empty');\n    }\n    // Calculate mean of input dataset\n   \
    \ $mean = array_sum($numbers) / count($numbers);\n    // Calculate absolute deviation\
    \ from the mean\n    $deviations = array();\n    foreach ($numbers as $number)\
    \ {\n        $deviations[] = abs($number - $mean);\n    }\n    // Calculate mean\
    \ of deviations\n    return array_sum($deviations) / count($deviations);\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    trigger_error(\"mean_absolute_deviation() requires\
    \ at least 2 numbers\");\n    return FALSE;\n  }\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  foreach ($numbers as $number) {\n    $absolute_deviations[]\
    \ = abs($number - $mean);\n  }\n  return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Mean.\n  $mean = array_sum($numbers) / count($numbers);\n  // Differences.\n\
    \  $diffs = array();\n  foreach ($numbers as $number) {\n    $diffs[] = abs($number\
    \ - $mean);\n  }\n  // Mean absolute difference.\n  return array_sum($diffs) /\
    \ count($diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $total\
    \ = 0;\n    $n = count($numbers);\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $total += abs($numbers[$i]);\n    }\n    return $total / $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9gxpbxt.php:23\n\
    Stack trace:\n#0 /tmp/tmpk9gxpbxt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpk9gxpbxt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $deviations = array();\n    foreach\
    \ ($numbers as $number) {\n        $deviations[] = abs($number - $mean);\n   \
    \ }\n    return array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $sum = 0;\n  $sum_of_squares = 0;\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $sum_of_squares += $number * $number;\n\
    \  }\n  $mean = $sum / $n;\n  $squared_deviations = [];\n  foreach ($numbers as\
    \ $number) {\n    $squared_deviations[] = pow($number - $mean, 2);\n  }\n  $mean_squared_deviation\
    \ = array_sum($squared_deviations) / $n;\n  return sqrt($mean_squared_deviation);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq22cs6b.php:32\n\
    Stack trace:\n#0 /tmp/tmpnq22cs6b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnq22cs6b.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $x_mean = array_sum($numbers) / $n;\n    $abs_differences\
    \ = array_map(function($x) use ($x_mean) {\n        return abs($x - $x_mean);\n\
    \    }, $numbers);\n    return array_sum($abs_differences) / $n;\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ This can be anything, really\n  $centerpoint = array_sum($numbers) / count($numbers);\n\
    \  // Now take the absolute value of the distance of each number to the center\n\
    \  $absolute_deviations = array_map(function($num) use ($centerpoint) {\n    return\
    \ abs($num - $centerpoint);\n  }, $numbers);\n  // Now take the average of those\
    \ absolute values\n  return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array();\n  foreach\
    \ ($numbers as $num) {\n    $deviations[] = abs($num - $mean);\n  }\n  return\
    \ array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $diff = [];\n    foreach ($numbers as $number) {\n  \
    \      $diff[] = abs($number - $mean);\n    }\n    return mean($diff);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpeh3tx3kl.php:10\n\
    Stack trace:\n#0 /tmp/tmpeh3tx3kl.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpeh3tx3kl.php(23): candidate(Array)\n#2 /tmp/tmpeh3tx3kl.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeh3tx3kl.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $absolute_deviations\
    \ = array();\n    foreach ($numbers as $x) {\n        $absolute_deviations[] =\
    \ abs($x - $mean);\n    }\n    return array_sum($absolute_deviations) / $n;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $mean = mean($numbers);\n    foreach ($numbers as $number) {\n   \
    \     $sum += abs($number - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpptdmepgo.php:11\n\
    Stack trace:\n#0 /tmp/tmpptdmepgo.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpptdmepgo.php(23): candidate(Array)\n#2 /tmp/tmpptdmepgo.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpptdmepgo.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = mean($numbers);\n\t$absolute_deviations = array();\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\t$absolute_deviations[] = abs($numbers[$i] - $mean);\n\t}\n\treturn\
    \ mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp7mi1pp_c.php:10\n\
    Stack trace:\n#0 /tmp/tmp7mi1pp_c.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp7mi1pp_c.php(23): candidate(Array)\n#2 /tmp/tmp7mi1pp_c.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7mi1pp_c.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $absolute_deviations = array();\n  foreach ($numbers as\
    \ $value) {\n    $absolute_deviations[] = abs($value - $mean);\n  }\n  return\
    \ mean($absolute_deviations);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpfemwnn4h.php:10\n\
    Stack trace:\n#0 /tmp/tmpfemwnn4h.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpfemwnn4h.php(22): candidate(Array)\n#2 /tmp/tmpfemwnn4h.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfemwnn4h.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $diffs = array();\n\
    \    foreach ($numbers as $number) {\n        $diffs[] = abs($number - $mean);\n\
    \    }\n    return array_sum($diffs) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $count = count($numbers);\n  foreach ($numbers as $value) {\n    $sum\
    \ += $value;\n  }\n  $mean = $sum / $count;\n  $absolute_deviations = array();\n\
    \  foreach ($numbers as $value) {\n    $absolute_deviations[] = abs($value - $mean);\n\
    \  }\n  return mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpd5lr45hh.php:20\n\
    Stack trace:\n#0 /tmp/tmpd5lr45hh.php(24): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpd5lr45hh.php(28): candidate(Array)\n#2 /tmp/tmpd5lr45hh.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd5lr45hh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $count = count($numbers);\n    foreach ($numbers as $number) {\n \
    \       $sum += $number;\n    }\n    $mean = $sum / $count;\n    $sum = 0;\n \
    \   foreach ($numbers as $number) {\n        $sum += abs($number - $mean);\n \
    \   }\n    return $sum / $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_size\
    \ = count($numbers);\n    if ($numbers_size == 0) return 0;\n    $mean = average($numbers);\n\
    \    $deviations = array();\n    foreach ($numbers as $number) {\n        $deviations[]\
    \ = abs($number - $mean);\n    }\n    return average($deviations);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function average() in\
    \ /tmp/tmpfs0c_k41.php:12\nStack trace:\n#0 /tmp/tmpfs0c_k41.php(21): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpfs0c_k41.php(25): candidate(Array)\n#2 /tmp/tmpfs0c_k41.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfs0c_k41.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $sum = 0;\n    $sum_of_squares = 0;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $sum += $numbers[$i];\n        $sum_of_squares +=\
    \ $numbers[$i] * $numbers[$i];\n    }\n    $x_mean = $sum / $n;\n    $sum = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $sum += abs($numbers[$i] - $x_mean);\n\
    \    }\n    return $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) == 0) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $differences = array();\n    foreach ($numbers as $number)\
    \ {\n        $differences[] = abs($number - $mean);\n    }\n    return array_sum($differences)\
    \ / count($differences);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) <= 1) {\n    throw new Exception(\"MAD requires at least 2\
    \ values\");\n  }\n  $mean = array_sum($numbers) / count($numbers);\n  $deviations\
    \ = array();\n  foreach ($numbers as $number) {\n    $deviations[] = abs($number\
    \ - $mean);\n  }\n  return array_sum($deviations) / count($deviations);\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    throw new \\Exception('Invalid input.');\n  }\n\
    \  $mean = array_sum($numbers) / count($numbers);\n  $abs_diffs = array_map(function($x)\
    \ use ($mean) {\n    return abs($x - $mean);\n  }, $numbers);\n  return array_sum($abs_diffs)\
    \ / count($abs_diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    foreach ($numbers as $number) {\n        $absolute_differences[]\
    \ = abs($number - $mean);\n    }\n    return mean($absolute_differences);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpcgeo6g41.php:10\n\
    Stack trace:\n#0 /tmp/tmpcgeo6g41.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpcgeo6g41.php(22): candidate(Array)\n#2 /tmp/tmpcgeo6g41.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcgeo6g41.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $num_numbers\
    \ = count($numbers);\n  if ($num_numbers === 0) {\n    throw new Exception('Cannot\
    \ calculate mean absolute deviation for empty dataset');\n  }\n  $sum = 0;\n \
    \ foreach ($numbers as $number) {\n    $sum += $number;\n  }\n  $mean = $sum /\
    \ $num_numbers;\n  $sum_of_deviations = 0;\n  foreach ($numbers as $number) {\n\
    \    $sum_of_deviations += abs($number - $mean);\n  }\n  return $sum_of_deviations\
    \ / $num_numbers;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_count\
    \ = count($numbers);\n    $numbers_sum = array_sum($numbers);\n    $numbers_mean\
    \ = $numbers_sum / $numbers_count;\n    $numbers_differences = array();\n    foreach\
    \ ($numbers as $number) {\n        $numbers_differences[] = abs($number - $numbers_mean);\n\
    \    }\n    return array_sum($numbers_differences) / $numbers_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) == 0) {\n    return 0;\n  }\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $absolute_deviations = array();\n  foreach ($numbers as\
    \ $number) {\n    $absolute_deviations[] = abs($number - $mean);\n  }\n  return\
    \ array_sum($absolute_deviations) / count($absolute_deviations);\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $absolute_deviations = [];\n    foreach ($numbers as\
    \ $number) {\n        $absolute_deviations[] = abs($number - $mean);\n    }\n\
    \    return mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpq6w3idi2.php:10\n\
    Stack trace:\n#0 /tmp/tmpq6w3idi2.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpq6w3idi2.php(23): candidate(Array)\n#2 /tmp/tmpq6w3idi2.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq6w3idi2.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  $differences = array();\n\
    \  foreach ($numbers as $number) {\n    $differences[] = abs($number - $mean);\n\
    \  }\n  return array_sum($differences) / $n;\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$n\
    \ = count($numbers);\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\t$mean = array_sum($numbers)\
    \ / $n;\n\t$absolute_deviations = array();\n\tforeach ($numbers as $number) {\n\
    \t\t$absolute_deviations[] = abs($number - $mean);\n\t}\n\treturn array_sum($absolute_deviations)\
    \ / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ calculate mean\n\t$sum = 0;\n\tforeach ($numbers as $number) {\n\t\t$sum +=\
    \ $number;\n\t}\n\t$mean = $sum / count($numbers);\n\t// calculate sum of absolute\
    \ differences\n\t$sum = 0;\n\tforeach ($numbers as $number) {\n\t\t$sum += abs($number\
    \ - $mean);\n\t}\n\treturn $sum / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $abs_deviations = array_map(function($n)\
    \ use ($mean) { return abs($n - $mean); }, $numbers);\n    return array_sum($abs_deviations)\
    \ / count($abs_deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $abs_deviations\
    \ = array();\n    foreach ($numbers as $number) {\n        $abs_deviations[] =\
    \ abs($number - $mean);\n    }\n    return array_sum($abs_deviations) / $n;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n    }\n\
    \    $n = count($numbers);\n    $mean = $sum / $n;\n    $mad = 0;\n    foreach\
    \ ($numbers as $number) {\n        $mad += abs($number - $mean);\n    }\n    return\
    \ $mad / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Compute mean\n    $mean = array_sum($numbers) / count($numbers);\n    // Calculate\
    \ difference from mean for each element\n    foreach ($numbers as $key => $value)\
    \ {\n        $numbers[$key] = abs($value - $mean);\n    }\n    // Return mean\
    \ of these deviations\n    return array_sum($numbers) / count($numbers);\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$sum=0;\n\
    \t$count=0;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t\t$count++;\n\
    \t}\n\t$mean = $sum / $count;\n\t$abs_sum = 0;\n\tforeach ($numbers as $number)\
    \ {\n\t\t$abs_sum += abs($number - $mean);\n\t}\n\treturn $abs_sum / $count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $differences = array_map(function($number) use ($mean)\
    \ {\n        return abs($number - $mean);\n    }, $numbers);\n    return mean($differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpb1l0haz5.php:10\n\
    Stack trace:\n#0 /tmp/tmpb1l0haz5.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpb1l0haz5.php(22): candidate(Array)\n#2 /tmp/tmpb1l0haz5.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb1l0haz5.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum_x\
    \ = array_sum($numbers);\n    $mean_x = $sum_x / count($numbers);\n    $sum_x_x_mean\
    \ = 0;\n    foreach ($numbers as $number) {\n        $sum_x_x_mean += abs($number\
    \ - $mean_x);\n    }\n    return $sum_x_x_mean / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) < 2) {\n        echo \"MAD is not defined for less than 2 values.\\\
    n\";\n        return;\n    }\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    $absolute_deviations = array();\n    foreach ($numbers as $number) {\n  \
    \      $absolute_deviations[] = abs($number - $mean);\n    }\n    return array_sum($absolute_deviations)\
    \ / count($absolute_deviations);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) < 2) {\n        return 0;\n    }\n    $n = count($numbers);\n\
    \    $sum = 0;\n    $mean = mean($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / $n;\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp12e2cfa1.php:15\n\
    Stack trace:\n#0 /tmp/tmp12e2cfa1.php(23): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp12e2cfa1.php(27): candidate(Array)\n#2 /tmp/tmp12e2cfa1.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp12e2cfa1.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Check args\n  if (count($numbers) == 0) {\n    return 0;\n  }\n  // Calculate\
    \ mean\n  $x_mean = array_sum($numbers) / count($numbers);\n  // Calculate deviation\
    \ from mean\n  foreach ($numbers as $number) {\n    $deviations[] = abs($number\
    \ - $x_mean);\n  }\n  // Return mean of deviations\n  return array_sum($deviations)\
    \ / count($deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_count\
    \ = count($numbers);\n    if ($numbers_count < 2) return 0;\n\n    $numbers_sum\
    \ = array_sum($numbers);\n    $numbers_mean = $numbers_sum / $numbers_count;\n\
    \n    $sum_diff = 0;\n    foreach ($numbers as $number) {\n        $sum_diff +=\
    \ abs($number - $numbers_mean);\n    }\n\n    return $sum_diff / $numbers_count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $abs_distances\
    \ = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n  \
    \  }, $numbers);\n    return array_sum($abs_distances) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $abs_differences[] = abs($number - $mean);\n    }\n    return array_sum($abs_differences)\
    \ / count($abs_differences);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n  $numbers_absolute_deviation = array();\n\
    \  foreach ($numbers as $n) {\n    $numbers_absolute_deviation[] = abs($n - $numbers_mean);\n\
    \  }\n  return array_sum($numbers_absolute_deviation) / count($numbers_absolute_deviation);\n\
    }\n\n$data = array(1.0, 2.0, 3.0, 4.0);\nprintf(\"MAD(%s) = %s\\n\", implode(',\
    \ ', $data), mean_absolute_deviation($data));\n\n$data = array(1.0, 1.0, 1.0,\
    \ 1.0);\nprintf(\"MAD(%s) = %s\\n\", implode(', ', $data), mean_absolute_deviation($data));\n\
    \n$data = array(3.0, 3.0, 3.0, 3.0);\nprintf(\"MAD(%s) = %s\\n\", implode(', ',\
    \ $data), mean_absolute_deviation($data));\n\n$data = array(\n  -2.0,\n  -1.0,\n\
    \  0.0,\n  1.0,\n  2.0,\n);\nprintf(\"MAD(%s) = %s\\n\", implode(', ', $data),\
    \ mean_absolute_deviation($data));\n\n$data = array(\n  -2.0,\n  -1.0,\n  0.0,\n\
    \  1.0,\n  2.0,\n  3.0,\n  4.0,\n  5.0,\n  6.0,\n  7.0,\n  8.0,\n  9.0,\n  10.0,\n\
    \  11.0,\n  12.0,\n  13.0,\n  14.0,\n  15.0,\n  16.0,\n  17.0,\n  18.0,\n  19.0,\n\
    \  20.0,\n  21.0,\n  22.0,\n  23.0,\n  24.0,\n  25.\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpubzrf5ps.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Find mean of input array of numbers\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    // For each element in the array, calculate the absolute difference\n   \
    \ // between that element and the mean\n    foreach ($numbers as $num) {\n   \
    \     $diffs[] = abs($num - $mean);\n    }\n    // Take the average of the absolute\
    \ differences\n    return array_sum($diffs) / count($diffs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$numbers_sum\
    \ = array_sum($numbers);\n\t$numbers_count = count($numbers);\n\t$mean = $numbers_sum\
    \ / $numbers_count;\n\t$abs_differences = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$abs_differences[] = abs($number - $mean);\n\t}\n\treturn array_sum($abs_differences)\
    \ / $numbers_count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  foreach ($numbers as $number) {\n    $absolute_deviations[]\
    \ = abs($number - $mean);\n  }\n  return mean($absolute_deviations);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpq655bd3h.php:10\n\
    Stack trace:\n#0 /tmp/tmpq655bd3h.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpq655bd3h.php(22): candidate(Array)\n#2 /tmp/tmpq655bd3h.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq655bd3h.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (count($numbers) == 0) return 0;\n\t\n\t$mean = array_sum($numbers) / count($numbers);\n\
    \t\n\t$deviations = array();\n\t\n\tforeach ($numbers as $n) {\n\t\t$deviations[]\
    \ = abs($n - $mean);\n\t}\n\t\n\treturn array_sum($deviations) / count($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum_of_numbers\
    \ = 0;\n    foreach ($numbers as $number) {\n        $sum_of_numbers += $number;\n\
    \    }\n    $mean = $sum_of_numbers / count($numbers);\n    $absolute_differences\
    \ = array();\n    foreach ($numbers as $number) {\n        $absolute_differences[]\
    \ = abs($number - $mean);\n    }\n    $sum_of_absolute_differences = 0;\n    foreach\
    \ ($absolute_differences as $absolute_difference) {\n        $sum_of_absolute_differences\
    \ += $absolute_difference;\n    }\n    return $sum_of_absolute_differences / count($absolute_differences);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$number_count\
    \ = count($numbers);\n\t$mean = mean($numbers);\n\t$absolute_deviations = array();\n\
    \tforeach ($numbers as $number) {\n\t\t$absolute_deviations[] = abs($number -\
    \ $mean);\n\t}\n\treturn mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpge49wgbs.php:11\n\
    Stack trace:\n#0 /tmp/tmpge49wgbs.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpge49wgbs.php(24): candidate(Array)\n#2 /tmp/tmpge49wgbs.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpge49wgbs.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (count($numbers) == 0) return 0;\n\n\t$total = 0;\n\t$count = 0;\n\tforeach\
    \ ($numbers as $number) {\n\t\t$total += $number;\n\t\t$count++;\n\t}\n\t$mean\
    \ = $total / $count;\n\n\t$total = 0;\n\tforeach ($numbers as $number) {\n\t\t\
    $total += abs($number - $mean);\n\t}\n\treturn $total / $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $absolute_deviations = array();\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $absolute_deviations[] = abs($numbers[$i]\
    \ - $mean);\n    }\n    return mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpfrg1ppq0.php:10\n\
    Stack trace:\n#0 /tmp/tmpfrg1ppq0.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpfrg1ppq0.php(23): candidate(Array)\n#2 /tmp/tmpfrg1ppq0.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfrg1ppq0.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $deviations = array();\n    foreach\
    \ ($numbers as $number) {\n        $deviations[] = abs($number - $mean);\n   \
    \ }\n    return array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$absolute_deviations\
    \ = array();\n\t$numbers_mean = array_sum($numbers) / count($numbers);\n\tforeach\
    \ ($numbers as $number) {\n\t\t$absolute_deviations[] = abs($number - $numbers_mean);\n\
    \t}\n\treturn array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $count = count($numbers);\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n  }\n  $mean = $sum / $count;\n  $sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $sum += abs($number - $mean);\n  }\n  return $sum / $count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        throw new Exception(\"Input must be an array\"\
    );\n    }\n    $average = mean($numbers);\n    $mean_absolute_deviation = 0;\n\
    \    foreach ($numbers as $number) {\n        $mean_absolute_deviation += abs($number\
    \ - $average);\n    }\n    return $mean_absolute_deviation / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpdnv_myo0.php:13\n\
    Stack trace:\n#0 /tmp/tmpdnv_myo0.php(22): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpdnv_myo0.php(26): candidate(Array)\n#2 /tmp/tmpdnv_myo0.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdnv_myo0.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$total\
    \ = 0;\n\tforeach ($numbers as $number) {\n\t\t$total += $number;\n\t}\n\t$mean\
    \ = $total / count($numbers);\n\t$mad = 0;\n\tforeach ($numbers as $number) {\n\
    \t\t$mad += abs($number - $mean);\n\t}\n\treturn $mad / count($numbers);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $sum = 0;\n    foreach ($numbers as $number) {\n    \
    \    $sum += abs($number - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0);\n\necho \"Mean Absolute Deviation:\
    \ \" . mean_absolute_deviation($numbers) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpmc3mjm2n.php:10\n\
    Stack trace:\n#0 /tmp/tmpmc3mjm2n.php(20): mean_absolute_deviation(Array)\n#1\
    \ {main}\n  thrown in /tmp/tmpmc3mjm2n.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean\n  $mean = mean($numbers);\n  // Iterate over each item\n  foreach\
    \ ($numbers as $item) {\n    // Subtract it from the mean\n    $deltas[] = abs($item\
    \ - $mean);\n  }\n  // Return average\n  return mean($deltas);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpoh_u_u4s.php:11\n\
    Stack trace:\n#0 /tmp/tmpoh_u_u4s.php(22): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpoh_u_u4s.php(26): candidate(Array)\n#2 /tmp/tmpoh_u_u4s.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh_u_u4s.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$sum\
    \ = 0;\n\t$count = count($numbers);\n\tif($count) {\n\t\t$mean = array_sum($numbers)\
    \ / $count;\n\t\tforeach($numbers as $n) {\n\t\t\t$sum += abs($n - $mean);\n\t\
    \t}\n\t\treturn $sum / $count;\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    // Use array_map to iterate through\
    \ each number\n    // and subtract it from the mean, and then calculate\n    //\
    \ the average (mean) of the resulting numbers.\n    return array_sum(array_map(function($number)\
    \ use ($mean) {\n        return abs($number - $mean);\n    }, $numbers)) / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    return FALSE;\n  }\n  $n = count($numbers);\n \
    \ if ($n == 0) {\n    return FALSE;\n  }\n  $mean = (float)array_sum($numbers)\
    \ / $n;\n  $abs_deviations = array();\n  foreach ($numbers as $x) {\n    $abs_deviations[]\
    \ = abs($x - $mean);\n  }\n  return (float)array_sum($abs_deviations) / $n;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $absolute_deviations = [];\n  foreach ($numbers as $number)\
    \ {\n    $absolute_deviations[] = abs($number - $mean);\n  }\n  return mean($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmprlyeiziz.php:10\n\
    Stack trace:\n#0 /tmp/tmprlyeiziz.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmprlyeiziz.php(23): candidate(Array)\n#2 /tmp/tmprlyeiziz.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmprlyeiziz.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  if ($n == 0) return 0;\n  $sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n  }\n  $mean = $sum / $n;\n  $dev_sum =\
    \ 0;\n  foreach ($numbers as $number) {\n    $dev_sum += abs($number - $mean);\n\
    \  }\n  return $dev_sum / $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $length\
    \ = count($numbers);\n  if ($length == 0) {\n    return 0;\n  }\n  $mean = (array_sum($numbers)\
    \ / $length);\n  $deviations = array();\n  foreach ($numbers as $number) {\n \
    \   $deviations[] = abs($number - $mean);\n  }\n  return (array_sum($deviations)\
    \ / $length);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$sum\
    \ = 0;\n\tforeach ($numbers as $number) {\n\t\t$sum += $number;\n\t}\n\t$x_mean\
    \ = $sum / count($numbers);\n\t$sum = 0;\n\tforeach ($numbers as $number) {\n\t\
    \t$sum += abs($number - $x_mean);\n\t}\n\treturn $sum / count($numbers);\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $N\
    \ = count($numbers);\n  $sum = 0;\n  $square_sum = 0;\n  for ($i = 0; $i < $N;\
    \ $i++) {\n    $sum += $numbers[$i];\n    $square_sum += pow($numbers[$i], 2);\n\
    \  }\n  $mean = $sum / $N;\n  $variance = $square_sum / $N - pow($mean, 2);\n\
    \  return sqrt($variance);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vvqdslv.php:27\n\
    Stack trace:\n#0 /tmp/tmp2vvqdslv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2vvqdslv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (count($numbers) == 0) return 0;\n\t$sum = 0;\n\t$mean = array_sum($numbers)\
    \ / count($numbers);\n\tforeach ($numbers as $number) {\n\t\t$sum += abs($number\
    \ - $mean);\n\t}\n\treturn $sum / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (sizeof($numbers) == 0) {\n\t\treturn 0;\n\t}\n\t$mean = array_sum($numbers)\
    \ / sizeof($numbers);\n\t$diffs = array();\n\tforeach ($numbers as $number) {\n\
    \t\t$diffs[] = abs($number - $mean);\n\t}\n\treturn array_sum($diffs) / sizeof($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n\t$deviations = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$deviations[] = abs($number - $numbers_mean);\n\
    \t}\n\treturn array_sum($deviations) / count($deviations);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $mean = mean($numbers);\n    foreach ($numbers as $n) {\n        $sum\
    \ += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp575bdm6w.php:11\n\
    Stack trace:\n#0 /tmp/tmp575bdm6w.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp575bdm6w.php(23): candidate(Array)\n#2 /tmp/tmp575bdm6w.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp575bdm6w.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $abs_differences = array_map(function($value)\
    \ use ($mean) {\n    return abs($value - $mean);\n  }, $numbers);\n  return array_sum($abs_differences)\
    \ / count($abs_differences);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $average\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array();\n  foreach ($numbers\
    \ as $n) {\n    $diffs[] = abs($n - $average);\n  }\n  return array_sum($diffs)\
    \ / count($diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$n\
    \ = count($numbers);\n\tif ($n == 0) return 0;\n\t// Calculate the mean.\n\t$mean\
    \ = array_sum($numbers) / $n;\n\t// Calculate the difference between each element\
    \ and the mean.\n\t$sum = 0;\n\tforeach ($numbers as $e) {\n\t\t$sum += abs($e\
    \ - $mean);\n\t}\n\t// Average the absolute differences.\n\treturn $sum / $n;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) == 0) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $deviations = array();\n    foreach ($numbers as $number)\
    \ {\n        $deviations[] = abs($number - $mean);\n    }\n    return array_sum($deviations)\
    \ / count($deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n    $mean_absolute_deviation = 0.0;\n\
    \    foreach ($numbers as $number) {\n        $mean_absolute_deviation += abs($number\
    \ - $numbers_mean);\n    }\n    return $mean_absolute_deviation / count($numbers);\n\
    }\n\n$numbers = array(4, 4, 4, 9, 10, 11, 12);\necho mean_absolute_deviation($numbers);\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '3.1836734693878'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $abs_distances = array_map(function($n)\
    \ use ($mean) {\n        return abs($n - $mean);\n    }, $numbers);\n    return\
    \ array_sum($abs_distances) / count($abs_distances);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $count = count($numbers);\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n  }\n  $mean = $sum / $count;\n  $sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $sum += abs($number - $mean);\n  }\n  return $sum / $count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    // Square all distances from mean.\n    $distances_from_mean\
    \ = array_map(function($number) use ($mean) {\n        return abs($number - $mean);\n\
    \    }, $numbers);\n    // Calculate mean of these distances.\n    return mean($distances_from_mean);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpwrj8sm4e.php:10\n\
    Stack trace:\n#0 /tmp/tmpwrj8sm4e.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpwrj8sm4e.php(24): candidate(Array)\n#2 /tmp/tmpwrj8sm4e.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwrj8sm4e.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ Calculate mean\n\t$sum = 0;\n\tforeach ($numbers as $number) {\n\t\t$sum +=\
    \ $number;\n\t}\n\t$mean = $sum / count($numbers);\n\n\t// Calculate absolute\
    \ differences and accumulate sum\n\t$sum = 0;\n\tforeach ($numbers as $number)\
    \ {\n\t\t$sum += abs($number - $mean);\n\t}\n\n\t// Return mean of absolute differences\n\
    \treturn $sum / count($numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate the mean\n  $n = count($numbers);\n  $mean = array_sum($numbers) /\
    \ $n;\n\n  // Now calculate the absolute difference between each element and the\
    \ mean\n  // and return the mean of those differences.\n  $abs_diffs = array();\n\
    \  foreach ($numbers as $number) {\n    $abs_diffs[] = abs($number - $mean);\n\
    \  }\n  return array_sum($abs_diffs) / $n;\n}\n\n$my_numbers = array(1.0, 2.0,\
    \ 3.0, 4.0);\n$my_deviation = mean_absolute_deviation($my_numbers);\necho $my_deviation;\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $total\
    \ = array_sum($numbers);\n    $count = count($numbers);\n    $mean = $total /\
    \ $count;\n    foreach ($numbers as $number) {\n        $differences[] = abs($number\
    \ - $mean);\n    }\n    return array_sum($differences) / count($differences);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate the mean of the dataset\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  // For each element, subtract the mean and take the absolute value.\n  // Add\
    \ all of these up and divide by the number of elements.\n  $total = 0;\n  foreach\
    \ ($numbers as $number) {\n    $total += abs($number - $mean);\n  }\n  return\
    \ $total / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = (array_sum($numbers) / count($numbers));\n  $deviations = array();\n  foreach\
    \ ($numbers as $number) {\n    $deviations[] = abs($number - $mean);\n  }\n  return\
    \ (array_sum($deviations) / count($deviations));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $mean = 0;\n    foreach ($numbers as $x) {\n        $sum += $x;\n\
    \    }\n    $mean = $sum / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $x) {\n        $sum += abs($x - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\n$numbers = [1.0, 2.0, 3.0, 4.0];\nprint (mean_absolute_deviation($numbers));\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ For a given list of numbers, calculate the mean of the values.\n  $mean = mean($numbers);\n\
    \  // Initialize the sum of absolute differences at 0.\n  $sum_of_absolute_differences\
    \ = 0;\n  // For each number in the given list of numbers,\n  // add the absolute\
    \ difference from the mean of all numbers\n  // to the running sum.\n  foreach\
    \ ($numbers as $number) {\n    $absolute_difference = abs($number - $mean);\n\
    \    $sum_of_absolute_differences += $absolute_difference;\n  }\n  // Divide the\
    \ sum of the absolute differences by the number of elements\n  // in the list\
    \ of numbers, and return this number.\n  return $sum_of_absolute_differences /\
    \ count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpylequfdp.php:11\n\
    Stack trace:\n#0 /tmp/tmpylequfdp.php(27): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpylequfdp.php(31): candidate(Array)\n#2 /tmp/tmpylequfdp.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpylequfdp.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$count\
    \ = count($numbers);\n\t$sum = array_sum($numbers);\n\t$mean = $sum / $count;\n\
    \t$deviations = array();\n\tforeach ($numbers as $number) {\n\t\t$deviations[]\
    \ = abs($number - $mean);\n\t}\n\treturn array_sum($deviations) / $count;\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $num_items = count($numbers);\n  $mean = 0;\n  for ($i = 0; $i < $num_items;\
    \ $i++) {\n    $mean += $numbers[$i];\n  }\n  $mean /= $num_items;\n  for ($i\
    \ = 0; $i < $num_items; $i++) {\n    $sum += abs($numbers[$i] - $mean);\n  }\n\
    \  return $sum / $num_items;\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $sum += $numbers[$i];\n    }\n    $mean = $sum / $n;\n    $abs_deviations\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $abs_deviations[] = abs($numbers[$i]\
    \ - $mean);\n    }\n    return mean($abs_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp2w4bbkl8.php:20\n\
    Stack trace:\n#0 /tmp/tmp2w4bbkl8.php(24): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp2w4bbkl8.php(28): candidate(Array)\n#2 /tmp/tmp2w4bbkl8.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2w4bbkl8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  foreach ($numbers as $i => $number) {\n    $sum += $number;\n  }\n \
    \ $mean = $sum / count($numbers);\n  $sum = 0;\n  foreach ($numbers as $i => $number)\
    \ {\n    $sum += abs($number - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $result\
    \ = 0;\n    $centerpoint = mean($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $result += abs($number - $centerpoint);\n    }\n    return $result\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmppv25qy1x.php:11\n\
    Stack trace:\n#0 /tmp/tmppv25qy1x.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmppv25qy1x.php(23): candidate(Array)\n#2 /tmp/tmppv25qy1x.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmppv25qy1x.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean.\n  $mean = array_sum($numbers) / count($numbers);\n  // Calculate\
    \ difference for each element.\n  $differences = array();\n  foreach ($numbers\
    \ as $number) {\n    $differences[] = abs($number - $mean);\n  }\n  // Calculate\
    \ and return average of the differences.\n  return array_sum($differences) / count($differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate and return the Mean Absolute Deviation\n    $mean = mean($numbers);\n\
    \    $absolute_deviations = array();\n    foreach ($numbers as $number) {\n  \
    \      $absolute_deviations[] = abs($number - $mean);\n    }\n    return mean($absolute_deviations);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpxsen4xq6.php:11\n\
    Stack trace:\n#0 /tmp/tmpxsen4xq6.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpxsen4xq6.php(23): candidate(Array)\n#2 /tmp/tmpxsen4xq6.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxsen4xq6.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $sum += $numbers[$i];\n    }\n    $mean = $sum / $n;\n    $deviations = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $deviations[] = abs($numbers[$i] -\
    \ $mean);\n    }\n    return mean($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp3mg_30sh.php:20\n\
    Stack trace:\n#0 /tmp/tmp3mg_30sh.php(24): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp3mg_30sh.php(28): candidate(Array)\n#2 /tmp/tmp3mg_30sh.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3mg_30sh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $differences = array_map(function($value) use ($mean)\
    \ {\n        return abs($value - $mean);\n    }, $numbers);\n    return mean($differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpx2cf44tm.php:10\n\
    Stack trace:\n#0 /tmp/tmpx2cf44tm.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpx2cf44tm.php(22): candidate(Array)\n#2 /tmp/tmpx2cf44tm.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx2cf44tm.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = array_sum($numbers) / count($numbers);\n\t$deviations = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$deviations[] = abs($number - $mean);\n\t}\n\t\
    return array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $mean = mean($numbers);\n    $n = count($numbers);\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $sum += abs($numbers[$i] - $mean);\n    }\n   \
    \ return $sum / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpybuvgs6v.php:11\n\
    Stack trace:\n#0 /tmp/tmpybuvgs6v.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpybuvgs6v.php(23): candidate(Array)\n#2 /tmp/tmpybuvgs6v.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpybuvgs6v.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $deviations\
    \ = array();\n  $mean = mean($numbers);\n  foreach ($numbers as $number) {\n \
    \   $deviations[] = abs($number - $mean);\n  }\n  return mean($deviations);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp8bh6xsjh.php:11\n\
    Stack trace:\n#0 /tmp/tmp8bh6xsjh.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp8bh6xsjh.php(22): candidate(Array)\n#2 /tmp/tmp8bh6xsjh.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8bh6xsjh.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $total\
    \ = 0;\n  foreach ($numbers as $number) {\n    $total += $number;\n  }\n  $average\
    \ = $total / count($numbers);\n  $mad = 0;\n  foreach ($numbers as $number) {\n\
    \    $mad += abs($number - $average);\n  }\n  return $mad / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $distance = array_map(function($e)\
    \ use ($mean) {\n        return abs($e - $mean);\n    }, $numbers);\n    return\
    \ array_sum($distance) / count($distance);\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (!is_array($numbers)) {\n\t\treturn 0;\n\t}\n\t$count = count($numbers);\n\t\
    if ($count < 2) {\n\t\treturn 0;\n\t}\n\t$mean = mean($numbers);\n\t$abs_diffs\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\t$abs_diffs[] = abs($number\
    \ - $mean);\n\t}\n\treturn mean($abs_diffs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp4ru7sm54.php:17\n\
    Stack trace:\n#0 /tmp/tmp4ru7sm54.php(26): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp4ru7sm54.php(30): candidate(Array)\n#2 /tmp/tmp4ru7sm54.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ru7sm54.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $absolute_deviations\
    \ = array();\n    foreach ($numbers as $number) {\n        $absolute_deviations[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($absolute_deviations) /\
    \ $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Mean\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \    }\n    $x_mean = $sum / count($numbers);\n\n    // MAD\n    $absolute_deviations\
    \ = array();\n    foreach ($numbers as $number) {\n        $absolute_deviations[]\
    \ = abs($number - $x_mean);\n    }\n    $sum = 0;\n    foreach ($absolute_deviations\
    \ as $absolute_deviation) {\n        $sum += $absolute_deviation;\n    }\n   \
    \ return $sum / count($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$numbers_sum\
    \ = array_sum($numbers);\n\t$numbers_mean = $numbers_sum / count($numbers);\n\t\
    $numbers_absolute_differences = array();\n\tforeach ($numbers as $number) {\n\t\
    \t$numbers_absolute_differences[] = abs($number - $numbers_mean);\n\t}\n\treturn\
    \ array_sum($numbers_absolute_differences) / count($numbers_absolute_differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $absolute_deviations = array();\n    foreach ($numbers\
    \ as $num) {\n        $absolute_deviations[] = abs($num - $mean);\n    }\n   \
    \ return mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n  \
    \  return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpi38qe9hr.php:10\n\
    Stack trace:\n#0 /tmp/tmpi38qe9hr.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpi38qe9hr.php(23): candidate(Array)\n#2 /tmp/tmpi38qe9hr.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi38qe9hr.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $count\
    \ = count($numbers);\n    if ($count == 0) {\n        throw new Exception('Cannot\
    \ find MAD for an empty list');\n    }\n\n    $mean = array_sum($numbers) / $count;\n\
    \    $diffs = array();\n    foreach ($numbers as $number) {\n        $diffs[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($diffs) / $count;\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum_of_absolute_differences\
    \ = 0;\n    $number_of_numbers = count($numbers);\n    $mean = array_sum($numbers)\
    \ / $number_of_numbers;\n    foreach ($numbers as $number) {\n        $sum_of_absolute_differences\
    \ += abs($number - $mean);\n    }\n    return $sum_of_absolute_differences / $number_of_numbers;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    // The array_map function applies\
    \ the function to every item in the\n    // array, returning an array of absolute\
    \ differences.\n    $deviations = array_map(function($number) use ($mean) {\n\
    \        return abs($number - $mean);\n    }, $numbers);\n    return array_sum($deviations)\
    \ / count($deviations);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $total\
    \ = 0;\n    $n = 0;\n    foreach ($numbers as $numb) {\n        $total += $numb;\n\
    \        $n++;\n    }\n    $mean = $total / $n;\n    $deviations = array();\n\
    \    foreach ($numbers as $numb) {\n        $deviations[] = abs($numb - $mean);\n\
    \    }\n    return array_sum($deviations) / count($deviations);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$length\
    \ = count($numbers);\n\t$sum = 0;\n\tforeach ($numbers as $n) {\n\t\t$sum += $n;\n\
    \t}\n\t$mean = $sum / $length;\n\t$sum = 0;\n\tforeach ($numbers as $n) {\n\t\t\
    $sum += abs($n - $mean);\n\t}\n\treturn $sum / $length;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $numbers_mean\
    \ = mean($numbers);\n  $absolute_deviations = array();\n  foreach ($numbers as\
    \ $number) {\n    $absolute_deviations[] = abs($number - $numbers_mean);\n  }\n\
    \  return mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n \
    \   return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpwbmoie8h.php:10\n\
    Stack trace:\n#0 /tmp/tmpwbmoie8h.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpwbmoie8h.php(23): candidate(Array)\n#2 /tmp/tmpwbmoie8h.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwbmoie8h.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $average\
    \ = array_sum($numbers) / count($numbers);\n  $abs = array_map(function($x) use\
    \ ($average) {\n    return abs($x - $average);\n  }, $numbers);\n  return array_sum($abs)\
    \ / count($abs);\n}\n\n$input = array(1.0, 2.0, 3.0, 4.0);\necho \"Input: [\"\
    ;\nforeach ($input as $elem) {\n  echo $elem;\n  if ($elem != end($input)) {\n\
    \    echo \", \";\n  }\n}\necho \"]\\n\";\necho \"Mean Absolute Deviation: \"\
    \ . mean_absolute_deviation($input) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: [1, 2, 3, 4]\nMean Absolute Deviation: 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$n\
    \ = count($numbers);\n\t$sum = 0;\n\t$x_mean = 0;\n\t$deviations = array();\n\t\
    foreach ($numbers as $number) {\n\t\t$sum += $number;\n\t}\n\t$x_mean = $sum /\
    \ $n;\n\tforeach ($numbers as $number) {\n\t\t$deviations[] = abs($number - $x_mean);\n\
    \t}\n\t$sum = 0;\n\tforeach ($deviations as $deviation) {\n\t\t$sum += $deviation;\n\
    \t}\n\treturn $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = array_sum($numbers) / count($numbers);\n\t$sum = 0;\n\tforeach ($numbers as\
    \ $number) {\n\t\t$sum += abs($number - $mean);\n\t}\n\treturn $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $n = count($numbers);\n  $mean = mean($numbers);\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $diff = abs($numbers[$i] - $mean);\n    $sum += $diff;\n\
    \  }\n  return $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpxi_g7eme.php:12\n\
    Stack trace:\n#0 /tmp/tmpxi_g7eme.php(21): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpxi_g7eme.php(25): candidate(Array)\n#2 /tmp/tmpxi_g7eme.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxi_g7eme.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++) {\n   \
    \     $sum += $numbers[$i];\n    }\n    $mean = $sum / $len;\n    $sum_diffs =\
    \ 0;\n    for ($i = 0; $i < $len; $i++) {\n        $sum_diffs += abs($numbers[$i]\
    \ - $mean);\n    }\n    return $sum_diffs / $len;\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $x_mean = array_sum($numbers) / $n;\n    $s = 0;\n \
    \   foreach ($numbers as $x) {\n        $s += abs($x - $x_mean);\n    }\n    return\
    \ $s / $n;\n}\n\n$fh = fopen('php://stdin', 'r');\n\n$numbers = fgets($fh);\n\
    $numbers = trim($numbers);\n$numbers = explode(' ', $numbers);\n\n$mad = mean_absolute_deviation($numbers);\n\
    \nprint($mad);\n\nfclose($fh);\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpm7iutw2p.php on line\
    \ 14\n0"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $absolute_deviations = array_map(function($x)\
    \ use ($mean) {\n    return abs($x - $mean);\n  }, $numbers);\n  return array_sum($absolute_deviations)\
    \ / count($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  $differences = array();\n\
    \  foreach ($numbers as $number) {\n    $differences[] = abs($number - $mean);\n\
    \  }\n  return array_sum($differences) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate mean of data set.\n    $mean = mean($numbers);\n    // Initialize\
    \ accumulator variable.\n    $accumulator = 0;\n    // Iterate over data, calculating\
    \ absolute deviation from mean.\n    foreach ($numbers as $number) {\n       \
    \ $accumulator += abs($number - $mean);\n    }\n    // Return average absolute\
    \ deviation.\n    return $accumulator / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp3rqy_r66.php:11\n\
    Stack trace:\n#0 /tmp/tmp3rqy_r66.php(23): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp3rqy_r66.php(27): candidate(Array)\n#2 /tmp/tmp3rqy_r66.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3rqy_r66.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n\t$deviations = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$deviations[] = abs($number - $numbers_mean);\n\
    \t}\n\treturn array_sum($deviations) / count($deviations);\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0);\n$numbers_mean = array_sum($numbers) / count($numbers);\n$numbers_variance\
    \ = 0.0;\nforeach ($numbers as $number) {\n\t$numbers_variance += pow($number\
    \ - $numbers_mean, 2);\n}\n$numbers_variance /= count($numbers);\n\necho \"Average:\
    \ \" . $numbers_mean . \"<br />\";\necho \"Variance: \" . $numbers_variance .\
    \ \"<br />\";\necho \"Standard Deviation: \" . sqrt($numbers_variance) . \"<br\
    \ />\";\necho \"Mean Absolute Deviation: \" . mean_absolute_deviation($numbers)\
    \ . \"<br />\";\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: 'Average: 2.5<br />Variance: 1.25<br />Standard Deviation: 1.1180339887499<br
    />Mean Absolute Deviation: 1<br />'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    foreach ($numbers as $index =>\
    \ $value) {\n        $numbers[$index] = abs($value - $mean);\n    }\n    return\
    \ array_sum($numbers) / count($numbers);\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $sum += $numbers[$i];\n    }\n    $mean = $sum / $n;\n    $squared_deviations\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $squared_deviations[]\
    \ = pow($numbers[$i] - $mean, 2);\n    }\n    $sum = 0;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $sum += $squared_deviations[$i];\n    }\n    $variance\
    \ = $sum / $n;\n    return sqrt($variance);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpci524kip.php:34\n\
    Stack trace:\n#0 /tmp/tmpci524kip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpci524kip.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ This will hold the sum of all absolute deviations, it's being initialized\n\t\
    // here to make sure it's numeric value is 0, since we are going to use\n\t//\
    \ addition on it.\n\t$sum_absolute_deviations = 0;\n\t// Calculate the mean of\
    \ the input numbers array and round it.\n\t$x_mean = round(array_sum($numbers)\
    \ / count($numbers), 2);\n\t// For each number in the array, subtract the mean,\
    \ take absolute value\n\t// and add it to $sum_absolute_deviations.\n\tforeach\
    \ ($numbers as $x) {\n\t\t$sum_absolute_deviations += abs($x - $x_mean);\n\t}\n\
    \t// Return mean absolute deviation rounded to 2 decimal places.\n\treturn round($sum_absolute_deviations\
    \ / count($numbers), 2);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $num_elements\
    \ = count($numbers);\n    if ($num_elements < 2) {\n        return 0;\n    }\n\
    \    $mean = array_sum($numbers) / $num_elements;\n    $mean_absolute_differences\
    \ = array();\n    foreach ($numbers as $number) {\n        $mean_absolute_differences[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($mean_absolute_differences)\
    \ / $num_elements;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) === 0) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $differences = array_map(function($n) use ($mean) {\n\
    \        return abs($n - $mean);\n    }, $numbers);\n    return array_sum($differences)\
    \ / count($differences);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $differences = array_map(function($n)\
    \ use ($mean) { return abs($n - $mean); }, $numbers);\n  return array_sum($differences)\
    \ / count($differences);\n}\n$a = array(1.0, 2.0, 3.0, 4.0);\n$m = mean_absolute_deviation($a);\n\
    echo \"In array: \";\nprint_r($a);\necho \"\\nMean Absolute Deviation: \" . $m\
    \ . \"\\n\";\n\n$r = new Random();\n$numbers = $r->getRandomIntegers(1000, -1000000,\
    \ 1000000);\n$m = mean_absolute_deviation($numbers);\necho \"In array: \";\nprint_r($numbers);\n\
    echo \"\\nMean Absolute Deviation: \" . $m . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "In array: Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] =>\
    \ 4\n)\n\nMean Absolute Deviation: 1\n\nFatal error: Uncaught Error: Class 'Random'\
    \ not found in /tmp/tmp2vzd_6cy.php:20\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp2vzd_6cy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the mean of the given numbers.\n    $mean = array_sum($numbers) /\
    \ count($numbers);\n    // Initialize the mean absolute deviation.\n    $mad =\
    \ 0.0;\n    // For each given number,\n    foreach ($numbers as $number) {\n \
    \       // increment mean absolute deviation by the absolute difference\n    \
    \    // between the current number and the mean.\n        $mad += abs($number\
    \ - $mean);\n    }\n    // Calculate the average absolute difference.\n    $mad\
    \ /= count($numbers);\n    // Return the result.\n    return $mad;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\tif\
    \ (empty($numbers)) {\n\t\treturn 0;\n\t}\n\t$mean = array_sum($numbers) / count($numbers);\n\
    \t$deviations = array();\n\tforeach ($numbers as $number) {\n\t\t$deviations[]\
    \ = abs($number - $mean);\n\t}\n\treturn array_sum($deviations) / count($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    foreach ($numbers as $n) {\n \
    \       $absolute_deviations[] = abs($n - $mean);\n    }\n    return array_sum($absolute_deviations)\
    \ / count($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $sum_of_distances = 0;\n  foreach ($numbers as $number)\
    \ {\n    $sum_of_distances += abs($number - $mean);\n  }\n  return $sum_of_distances\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpp59jdj8j.php:10\n\
    Stack trace:\n#0 /tmp/tmpp59jdj8j.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpp59jdj8j.php(23): candidate(Array)\n#2 /tmp/tmpp59jdj8j.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp59jdj8j.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ 'numbers' is assumed to be an array of real numbers.\n    $total = 0;\n    $count\
    \ = count($numbers);\n    $mean = mean($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $total += abs($number - $mean);\n    }\n    return $total / $count;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpviuoglrg.php:13\n\
    Stack trace:\n#0 /tmp/tmpviuoglrg.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpviuoglrg.php(24): candidate(Array)\n#2 /tmp/tmpviuoglrg.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpviuoglrg.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    $absolute_deviations\
    \ = array();\n    foreach ($numbers as $number) {\n        $absolute_deviations[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($absolute_deviations) /\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $deltas = array();\n    foreach\
    \ ($numbers as $number) {\n        $deltas[] = abs($number - $mean);\n    }\n\
    \    return array_sum($deltas) / count($deltas);\n}\n\n$array = array(1.0, 2.0,\
    \ 3.0, 4.0);\n$mad = mean_absolute_deviation($array);\n\nprintf(\"The mean absolute\
    \ deviation of %s is %f\\n\", join(', ', $array), $mad);\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The mean absolute deviation of 1, 2, 3, 4 is 1.000000\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$sum\
    \ = 0;\n\t$count = count($numbers);\n\tforeach ($numbers as $number) {\n\t\t$sum\
    \ += $number;\n\t}\n\t$mean = $sum / $count;\n\t$sum = 0;\n\tforeach ($numbers\
    \ as $number) {\n\t\t$sum += abs($number - $mean);\n\t}\n\treturn $sum / $count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $absolute_deviations = array();\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $absolute_deviations[] = abs($numbers[$i] - $mean);\n  }\n  return\
    \ mean($absolute_deviations);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpnqz0og91.php:10\n\
    Stack trace:\n#0 /tmp/tmpnqz0og91.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpnqz0og91.php(22): candidate(Array)\n#2 /tmp/tmpnqz0og91.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnqz0og91.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_sum\
    \ = array_sum($numbers);\n    $numbers_mean = $numbers_sum / count($numbers);\n\
    \    $numbers_deviation = array();\n    foreach ($numbers as $number) {\n    \
    \    $numbers_deviation[] = abs($number - $numbers_mean);\n    }\n    return array_sum($numbers_deviation)\
    \ / count($numbers_deviation);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ Get the count of numbers and the mean of the dataset:\n\t$count = count($numbers);\n\
    \t$mean = array_sum($numbers) / $count;\n\t// Calculate the absolute difference\
    \ of each element from mean:\n\t$absolute_deviations = array();\n\tforeach ($numbers\
    \ as $n) {\n\t\t$absolute_deviations[] = abs($n - $mean);\n\t}\n\t// Sum up the\
    \ absolute deviations and divide by the count:\n\treturn array_sum($absolute_deviations)\
    \ / $count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $absolute_differences = [];\n    foreach ($numbers as\
    \ $number) {\n        $absolute_differences[] = abs($number - $mean);\n    }\n\
    \    return mean($absolute_differences);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpmwjlok_c.php:10\n\
    Stack trace:\n#0 /tmp/tmpmwjlok_c.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpmwjlok_c.php(23): candidate(Array)\n#2 /tmp/tmpmwjlok_c.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmwjlok_c.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $x_sum\
    \ = 0;\n  $n = count($numbers);\n  foreach ($numbers as $x) {\n    $x_sum += $x;\n\
    \  }\n  $x_mean = $x_sum / $n;\n  $mae_sum = 0;\n  foreach ($numbers as $x) {\n\
    \    $mae_sum += abs($x - $x_mean);\n  }\n  return $mae_sum / $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $abs_deviations = array_map(function($x)\
    \ use ($mean) { return abs($x - $mean); }, $numbers);\n    return array_sum($abs_deviations)\
    \ / count($abs_deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array();\n  foreach ($numbers\
    \ as $value) {\n    $diffs[] = abs($value - $mean);\n  }\n  return array_sum($diffs)\
    \ / count($diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $deviations = array();\n  foreach ($numbers as $number)\
    \ {\n    $deviations[] = abs($number - $mean);\n  }\n  return mean($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpsme_l88u.php:10\n\
    Stack trace:\n#0 /tmp/tmpsme_l88u.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpsme_l88u.php(23): candidate(Array)\n#2 /tmp/tmpsme_l88u.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsme_l88u.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) == 0) {\n        return 0;\n    }\n    $mean = mean($numbers);\n\
    \    $deviations = array();\n    foreach ($numbers as $num) {\n        $deviations[]\
    \ = abs($num - $mean);\n    }\n    return mean($deviations);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpcl_7saoc.php:13\n\
    Stack trace:\n#0 /tmp/tmpcl_7saoc.php(21): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpcl_7saoc.php(25): candidate(Array)\n#2 /tmp/tmpcl_7saoc.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcl_7saoc.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = mean($numbers);\n  $absolute_deviations = array();\n\
    \  foreach ($numbers as $value) {\n    $absolute_deviations[] = abs($value - $mean);\n\
    \  }\n  return mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpkhn364yz.php:11\n\
    Stack trace:\n#0 /tmp/tmpkhn364yz.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpkhn364yz.php(24): candidate(Array)\n#2 /tmp/tmpkhn364yz.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkhn364yz.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    if ($n == 0) {\n        return FALSE;\n    }\n\n   \
    \ $mean = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $mean += $numbers[$i];\n\
    \    }\n    $mean /= $n;\n\n    $diff_sum = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $diff_sum += abs($numbers[$i] - $mean);\n    }\n\n    return $diff_sum\
    \ / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ First we must find the mean\n    $mean = mean($numbers);\n    // Next we must\
    \ find the absolute difference of each element from the mean\n    $absolute_deviations\
    \ = array();\n    foreach ($numbers as $number) {\n        array_push($absolute_deviations,\
    \ abs($number - $mean));\n    }\n    // Lastly we calculate the mean of the absolute\
    \ differences\n    return mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmph3k_zcbs.php:11\n\
    Stack trace:\n#0 /tmp/tmph3k_zcbs.php(22): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmph3k_zcbs.php(26): candidate(Array)\n#2 /tmp/tmph3k_zcbs.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmph3k_zcbs.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ calculate mean\n    $mean = array_sum($numbers) / count($numbers);\n    // calculate\
    \ absolute differences between mean and input values\n    $abs_differences = array_map(function($n)\
    \ use ($mean) { return abs($n - $mean); }, $numbers);\n    // calculate mean of\
    \ absolute differences\n    return array_sum($abs_differences) / count($abs_differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) == 0) {\n        return \"EMPTY\";\n    }\n\n    // Calculate\
    \ mean:\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \    }\n    $mean = $sum / count($numbers);\n\n    // Calculate sum of absolute\
    \ differences\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum\
    \ += abs($number - $mean);\n    }\n\n    // Return MAD\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $total\
    \ = 0;\n  $n = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $total += abs($numbers[$i] - $mean);\n  }\n  return\
    \ $total / $n;\n}\n$arr = array(2,4,4,4,5,5,7,9);\n$mad = mean_absolute_deviation($arr);\n\
    echo $mad . \"\\n\";\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1.5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n  $numbers_deviation = array();\n\
    \  foreach ($numbers as $number) {\n    $numbers_deviation[] = abs($number - $numbers_mean);\n\
    \  }\n  return array_sum($numbers_deviation) / count($numbers_deviation);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $average\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array();\n  foreach ($numbers\
    \ as $n) {\n    $diffs[] = abs($n - $average);\n  }\n  return array_sum($diffs)\
    \ / count($diffs);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $abs_deviations = array_map(function($x)\
    \ use ($mean) { return abs($x - $mean); }, $numbers);\n  return array_sum($abs_deviations)\
    \ / count($abs_deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    foreach ($numbers as $number) {\n        $deviations[]\
    \ = abs($number - $mean);\n    }\n    return mean($deviations);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp1fd6qdu_.php:10\n\
    Stack trace:\n#0 /tmp/tmp1fd6qdu_.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp1fd6qdu_.php(22): candidate(Array)\n#2 /tmp/tmp1fd6qdu_.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1fd6qdu_.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $deviations\
    \ = array();\n  $mean = mean($numbers);\n  foreach ($numbers as $n) {\n    $deviations[]\
    \ = abs($n - $mean);\n  }\n  return mean($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpcgfct1ym.php:11\n\
    Stack trace:\n#0 /tmp/tmpcgfct1ym.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpcgfct1ym.php(23): candidate(Array)\n#2 /tmp/tmpcgfct1ym.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcgfct1ym.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $mean = mean($numbers);\n  foreach ($numbers as $number) {\n    $sum\
    \ += abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpdgnk6knu.php:11\n\
    Stack trace:\n#0 /tmp/tmpdgnk6knu.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpdgnk6knu.php(23): candidate(Array)\n#2 /tmp/tmpdgnk6knu.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdgnk6knu.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = mean($numbers);\n\t$total = 0;\n\tforeach ($numbers as $num) {\n\t\t$total\
    \ += abs($num - $mean);\n\t}\n\treturn $total / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpa88_cz_t.php:10\n\
    Stack trace:\n#0 /tmp/tmpa88_cz_t.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpa88_cz_t.php(23): candidate(Array)\n#2 /tmp/tmpa88_cz_t.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpa88_cz_t.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $number) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $absolute_deviations = array();\n\
    \    foreach ($numbers as $number) {\n        $absolute_deviations[] = abs($number\
    \ - $mean);\n    }\n    return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean\n  $mean = array_sum($numbers) / count($numbers);\n  // Subtract\
    \ from each number, square the result, then add these together\n  $sum = 0;\n\
    \  foreach ($numbers as $number) {\n    $sum += pow(abs($number - $mean), 2);\n\
    \  }\n  // Return the square root of the result divided by the number of elements\n\
    \  return sqrt($sum / count($numbers));\n}\nfunction candidate(...$args) {\n \
    \   return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidu_gw28.php:26\n\
    Stack trace:\n#0 /tmp/tmpidu_gw28.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpidu_gw28.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $differences = array_map(function($value) use ($mean)\
    \ {\n        return abs($value - $mean);\n    }, $numbers);\n    return mean($differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpuvf76wgx.php:10\n\
    Stack trace:\n#0 /tmp/tmpuvf76wgx.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpuvf76wgx.php(22): candidate(Array)\n#2 /tmp/tmpuvf76wgx.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuvf76wgx.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $x_mean\
    \ = array_sum($numbers) / count($numbers);\n    $differences = array();\n    foreach\
    \ ($numbers as $value) {\n        $differences[] = abs($value - $x_mean);\n  \
    \  }\n    return array_sum($differences) / count($differences);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the mean\n    $sum = 0;\n    foreach ($numbers as $n) {\n        $sum\
    \ += $n;\n    }\n    $mean = $sum / count($numbers);\n\n    // Calculate the absolute\
    \ difference between each number and the mean\n    $abs_differences = array();\n\
    \    foreach ($numbers as $n) {\n        $abs_differences[] = abs($n - $mean);\n\
    \    }\n\n    // Return the mean of the abs differences\n    return array_sum($abs_differences)\
    \ / count($abs_differences);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!count($numbers)) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $absolute_deviations = array();\n    foreach ($numbers\
    \ as $number) {\n        $absolute_deviations[] = abs($number - $mean);\n    }\n\
    \    return array_sum($absolute_deviations) / count($absolute_deviations);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $average\
    \ = array_sum($numbers) / count($numbers);\n  $absolute_deviations = array();\n\
    \  foreach ($numbers as $n) {\n    $absolute_deviations[] = abs($n - $average);\n\
    \  }\n  return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) == 0) return 0;\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  $deviation = 0;\n  foreach ($numbers as $number) {\n    $deviation += abs($number\
    \ - $mean);\n  }\n  return $deviation / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $absolute_deviations = array();\n\
    \    foreach ($numbers as $n) {\n        $absolute_deviations[] = abs($n - $mean);\n\
    \    }\n    return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ First, calculate mean of input list of numbers.\n\t$count = count($numbers);\n\
    \t$sum = 0;\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$sum += $numbers[$i];\n\t\
    }\n\t$mean = $sum / $count;\n\n\t// Next, calculate the absolute difference between\
    \ each element and the\n\t// mean.\n\t$differences = array();\n\tfor ($i = 0;\
    \ $i < $count; $i++) {\n\t\t$differences[] = abs($numbers[$i] - $mean);\n\t}\n\
    \n\t// Finally, take the average of the differences.\n\t$sum = 0;\n\tfor ($i =\
    \ 0; $i < $count; $i++) {\n\t\t$sum += $differences[$i];\n\t}\n\treturn $sum /\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $abs_deviations = array_map(function($num)\
    \ use ($mean) {\n        return abs($num - $mean);\n    }, $numbers);\n    return\
    \ array_sum($abs_deviations) / count($abs_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $numbers_mean\
    \ = array_sum($numbers) / count($numbers);\n    $absolute_deviations = array();\n\
    \    foreach ($numbers as $number) {\n        $absolute_deviations[] = abs($number\
    \ - $numbers_mean);\n    }\n    return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $count\
    \ = count($numbers);\n  if ($count === 0) {\n    return 0;\n  }\n  $mean = array_sum($numbers)\
    \ / $count;\n  $absolute_deviations = array_map(function($e) use ($mean) {\n \
    \   return abs($e - $mean);\n  }, $numbers);\n  return array_sum($absolute_deviations)\
    \ / $count;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        die(\"The argument to mean_absolute_deviation()\
    \ must be an array of numbers\\n\");\n    }\n\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $absolute_deviations = array();\n    foreach ($numbers\
    \ as $number) {\n        $absolute_deviations[] = abs($number - $mean);\n    }\n\
    \    return array_sum($absolute_deviations) / count($absolute_deviations);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $abs_deviations = array_map(function($number)\
    \ use ($mean) {\n    return abs($number - $mean);\n  }, $numbers);\n  return array_sum($abs_deviations)\
    \ / count($abs_deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum_abs_diff\
    \ = 0;\n    $count = count($numbers);\n    if ($count > 0) {\n        $mean =\
    \ array_sum($numbers) / $count;\n        foreach ($numbers as $x) {\n        \
    \    $sum_abs_diff += abs($x - $mean);\n        }\n        return $sum_abs_diff\
    \ / $count;\n    } else {\n        return 0;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  foreach ($numbers as $number) {\n    $sum += $number;\n  }\n  $mean\
    \ = $sum / count($numbers);\n  $sum = 0;\n  foreach ($numbers as $number) {\n\
    \    $sum += abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean($numbers);\n  $absolute_deviations = array();\n  foreach ($numbers as\
    \ $number) {\n    $absolute_deviations[] = abs($number - $mean);\n  }\n  return\
    \ mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpfurde3ja.php:10\n\
    Stack trace:\n#0 /tmp/tmpfurde3ja.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpfurde3ja.php(23): candidate(Array)\n#2 /tmp/tmpfurde3ja.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfurde3ja.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  foreach ($numbers as $key => $value)\
    \ {\n    $differences[$key] = abs($value - $mean);\n  }\n  return array_sum($differences)\
    \ / count($differences);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $N\
    \ = count($numbers);\n  if($N == 0) {\n    return 0;\n  }\n\n  $mean = 0;\n  for($i\
    \ = 0; $i < $N; $i++) {\n    $mean += $numbers[$i];\n  }\n  $mean /= $N;\n\n \
    \ $absolute_deviations = array();\n  for($i = 0; $i < $N; $i++) {\n    $absolute_deviations[]\
    \ = abs($numbers[$i] - $mean);\n  }\n\n  return array_sum($absolute_deviations)\
    \ / $N;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    $sum = 0;\n    $mean = mean($numbers);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $sum += abs($numbers[$i] - $mean);\n    }\n \
    \   return $sum / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpk65qeg6e.php:12\n\
    Stack trace:\n#0 /tmp/tmpk65qeg6e.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpk65qeg6e.php(23): candidate(Array)\n#2 /tmp/tmpk65qeg6e.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk65qeg6e.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean\n  $mean = array_sum($numbers) / count($numbers);\n  // Calculate\
    \ absolute deviations\n  $absolute_deviations = array_map(function($x) use ($mean)\
    \ {\n    return abs($x - $mean);\n  }, $numbers);\n  // Calculate mean absolute\
    \ deviation\n  return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $sum = 0;\n  foreach ($numbers as $x) {\n    $sum += $x;\n\
    \  }\n  $mean = $sum / $n;\n  $deviations = array();\n  foreach ($numbers as $x)\
    \ {\n    $deviations[] = abs($x - $mean);\n  }\n  return mean($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpriq4_72r.php:20\n\
    Stack trace:\n#0 /tmp/tmpriq4_72r.php(24): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpriq4_72r.php(28): candidate(Array)\n#2 /tmp/tmpriq4_72r.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpriq4_72r.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $n\
    \ = count($numbers);\n    if ($n == 0) return 0;\n    // Calculate mean\n    $mean\
    \ = 0;\n    foreach ($numbers as $x) {\n        $mean += $x;\n    }\n    $mean\
    \ /= $n;\n    // Calculate MAD\n    $mad = 0;\n    foreach ($numbers as $x) {\n\
    \        $mad += abs($x - $mean);\n    }\n    $mad /= $n;\n    return $mad;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $total\
    \ = 0;\n  $count = count($numbers);\n  $mean = mean($numbers);\n  foreach ($numbers\
    \ as $number) {\n    $total += abs($number - $mean);\n  }\n  return $total / $count;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp_3hchcgj.php:12\n\
    Stack trace:\n#0 /tmp/tmp_3hchcgj.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp_3hchcgj.php(24): candidate(Array)\n#2 /tmp/tmp_3hchcgj.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_3hchcgj.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $count\
    \ = count($numbers);\n    if ($count == 0) {\n        return 0;\n    }\n    $sum\
    \ = array_sum($numbers);\n    $mean = $sum / $count;\n    $accum = 0.0;\n    foreach\
    \ ($numbers as $n) {\n        $accum += abs($n - $mean);\n    }\n    return $accum\
    \ / $count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $count = count($numbers);\n  for ($i = 0; $i < $count; $i++) {\n   \
    \ $sum += $numbers[$i];\n  }\n  $mean = $sum / $count;\n  $sum = 0;\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    $sum += abs($numbers[$i] - $mean);\n  }\n  return\
    \ $sum / $count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = mean($numbers);\n\t$absolute_differences = array();\n\tforeach ($numbers as\
    \ $number) {\n\t\t$absolute_differences[] = abs($number - $mean);\n\t}\n\treturn\
    \ mean($absolute_differences);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmph0m0ftef.php:10\n\
    Stack trace:\n#0 /tmp/tmph0m0ftef.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmph0m0ftef.php(23): candidate(Array)\n#2 /tmp/tmph0m0ftef.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmph0m0ftef.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $average\
    \ = mean($numbers);\n    $absolute_deviations = array();\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $absolute_deviations[] = abs($numbers[$i]\
    \ - $average);\n    }\n    return mean($absolute_deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpuwwno4y0.php:10\n\
    Stack trace:\n#0 /tmp/tmpuwwno4y0.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpuwwno4y0.php(23): candidate(Array)\n#2 /tmp/tmpuwwno4y0.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuwwno4y0.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  foreach ($numbers as $i => $number) {\n    $sum += $number;\n  }\n \
    \ $mean = $sum / count($numbers);\n  $abs_diff_sum = 0;\n  foreach ($numbers as\
    \ $i => $number) {\n    $abs_diff_sum += abs($number - $mean);\n  }\n  return\
    \ $abs_diff_sum / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = mean($numbers);\n\tforeach ($numbers as $key => $value) {\n\t\t$numbers[$key]\
    \ = abs($value - $mean);\n\t}\n\treturn mean($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp0zy5_mhz.php:10\n\
    Stack trace:\n#0 /tmp/tmp0zy5_mhz.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp0zy5_mhz.php(22): candidate(Array)\n#2 /tmp/tmp0zy5_mhz.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0zy5_mhz.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the mean of the input data.\n    $mean = array_sum($numbers) / count($numbers);\n\
    \    // Calculate the absolute difference between each element and the mean.\n\
    \    $absolute_differences = array_map(function($number) use ($mean) {\n     \
    \   return abs($number - $mean);\n    }, $numbers);\n    // Calculate the mean\
    \ of the absolute differences.\n    return array_sum($absolute_differences) /\
    \ count($absolute_differences);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ $mean = mean($numbers);\n    // $deviations = map(function($x) use ($mean) {\
    \ return abs($x - $mean); }, $numbers);\n    // return mean($deviations);\n  \
    \  return standard_deviation($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function standard_deviation()\
    \ in /tmp/tmp16pf3g1x.php:13\nStack trace:\n#0 /tmp/tmp16pf3g1x.php(17): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp16pf3g1x.php(21): candidate(Array)\n#2 /tmp/tmp16pf3g1x.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp16pf3g1x.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t//\
    \ Calculate the mean of the dataset.\n\t$numbers_sum = array_sum($numbers);\n\t\
    $numbers_count = count($numbers);\n\t$numbers_mean = $numbers_sum / $numbers_count;\n\
    \t\n\t// Calculate the absolute difference between each element and the mean.\n\
    \t$differences = array();\n\tforeach ($numbers as $number) {\n\t\t$differences[]\
    \ = abs($number - $numbers_mean);\n\t}\n\t\n\t// Get the mean of the differences\
    \ list.\n\t$differences_sum = array_sum($differences);\n\t$differences_count =\
    \ count($differences);\n\t$differences_mean = $differences_sum / $differences_count;\n\
    \t\n\treturn $differences_mean;\n}\n\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $differences = array_map(function($num) use ($mean) {\n\
    \        return abs($num - $mean);\n    }, $numbers);\n    return mean($differences);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpvo686up3.php:10\n\
    Stack trace:\n#0 /tmp/tmpvo686up3.php(18): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpvo686up3.php(22): candidate(Array)\n#2 /tmp/tmpvo686up3.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvo686up3.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \  mean of the numbers\n    $mean = array_sum($numbers) / count($numbers);\n \
    \   // Calculate the absolute difference between each element and the mean\n \
    \   $absolute_differences = array_map(function($number) use ($mean) {\n      \
    \  return abs($number - $mean);\n    }, $numbers);\n    // Calculate and return\
    \ the mean of the differences\n    return array_sum($absolute_differences) / count($absolute_differences);\n\
    }\n\necho mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $deviations = array();\n    foreach\
    \ ($numbers as $num) {\n        $deviations[] = abs($num - $mean);\n    }\n  \
    \  return array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = mean($numbers);\n\t$absolute_deviations = array();\n\t\n\tforeach ($numbers\
    \ as $number) {\n\t\t$absolute_deviations[] = abs($number - $mean);\n\t}\n\t\n\
    \treturn mean($absolute_deviations);\n}\n\nfunction candidate(...$args) {\n  \
    \  return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmp9d89k5no.php:10\n\
    Stack trace:\n#0 /tmp/tmp9d89k5no.php(21): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmp9d89k5no.php(25): candidate(Array)\n#2 /tmp/tmp9d89k5no.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9d89k5no.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
