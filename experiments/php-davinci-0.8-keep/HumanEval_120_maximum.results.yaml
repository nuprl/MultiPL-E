name: HumanEval_120_maximum
language: php
results:
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $k = min($k, count($arr));\n    for ($i = floor($k / 2) - 1; $i >=\
    \ 0; $i--) {\n        heapify($arr, $k, $i);\n    }\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $arr[0]) {\n            $arr[0] = $arr[$i];\n\
    \            heapify($arr, $k, 0);\n        }\n    }\n    return array_slice($arr,\
    \ 0, $k);\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapify() in\
    \ /tmp/tmpvnkpp0d7.php:20\nStack trace:\n#0 /tmp/tmpvnkpp0d7.php(31): maximum(Array,\
    \ 3)\n#1 /tmp/tmpvnkpp0d7.php(35): candidate(Array, 3)\n#2 /tmp/tmpvnkpp0d7.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpvnkpp0d7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max_heap = new SplMaxHeap();\n    foreach ($arr as $a) {\n     \
    \   $max_heap->insert($a);\n    }\n    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $result[] = $max_heap->extract();\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1b5p_3vn.php:45\nStack trace:\n#0 /tmp/tmp1b5p_3vn.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1b5p_3vn.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // sort with max heap to find out top k max numbers\n    $maxHeap\
    \ = new SplMaxHeap();\n    foreach ($arr as $val) {\n        $maxHeap->insert($val);\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $maxHeap->extract();\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj08o3a3v.php:35\n\
    Stack trace:\n#0 /tmp/tmpj08o3a3v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj08o3a3v.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Create an array of pairs [value, index]\n    $pairs = array_map(function($i)\
    \ use ($arr) {\n        return [$arr[$i], $i];\n    }, array_keys($arr));\n  \
    \  // Sort them in descending order by value\n    usort($pairs, function($pair1,\
    \ $pair2) {\n        return $pair2[0] - $pair1[0];\n    });\n    // Remove any\
    \ duplicates that aren't first in the array.\n    $distinct = [];\n    foreach\
    \ ($pairs as $pair) {\n        if (!in_array($pair[0], $distinct)) {\n       \
    \     $distinct[] = $pair[0];\n        }\n    }\n    // Now we have the largest\
    \ k numbers in value order.\n    // We need to return their original index order.\n\
    \    sort($distinct);\n    $indexes = array_map(function($value) use ($pairs)\
    \ {\n        return $pairs[array_search($value, $pairs)][1];\n    }, $distinct);\n\
    \    // Now return just the values.\n    return array_map(function($i) use ($arr)\
    \ {\n        return $arr[$i];\n    }, $indexes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_7q8dqm.php:50\n\
    Stack trace:\n#0 /tmp/tmpn_7q8dqm.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpn_7q8dqm.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // O(n*log(n))\n    sort($arr);\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6h6o4jo.php:32\n\
    Stack trace:\n#0 /tmp/tmpf6h6o4jo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf6h6o4jo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // max heap\n    $heap = new SplMaxHeap();\n    foreach ($arr as\
    \ $val) {\n        if ($heap->count() < $k) {\n            $heap->insert($val);\n\
    \        } else {\n            if ($val > $heap->top()) {\n                $heap->extract();\n\
    \                $heap->insert($val);\n            }\n        }\n    }\n    $res\
    \ = [];\n    while (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n\
    \    }\n    return array_reverse($res);\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxfo5xab.php:43\n\
    Stack trace:\n#0 /tmp/tmpuxfo5xab.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuxfo5xab.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Solution1\n    // sort($arr);\n    // return array_slice($arr,\
    \ -$k);\n    // Solution2\n    sort($arr);\n    $count = count($arr);\n    $result\
    \ = [];\n    $i = $count - 1;\n    while ($k != 0) {\n        $result[] = $arr[$i];\n\
    \        $i--;\n        $k--;\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpitwg9uhy.php:41\nStack trace:\n\
    #0 /tmp/tmpitwg9uhy.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpitwg9uhy.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Write your code here\n    $result = [];\n    foreach ($arr as\
    \ $value) {\n        $result[] = $value;\n        sort($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if ($k == 0) {\n        return [];\n\
    \    }\n    if ($k == $length) {\n        return $arr;\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = null;\n        $index = null;\n\
    \        for ($j = 0; $j < $length; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        $arr[$index] = null;\n \
    \   }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzbyvbb3d.php:49\nStack trace:\n\
    #0 /tmp/tmpzbyvbb3d.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpzbyvbb3d.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    foreach ($arr as $num) {\n        array_push($res,\
    \ $num);\n        $count = count($res);\n        for ($i = $count - 1; $i > 0;\
    \ $i--) {\n            if ($res[$i] > $res[$i - 1]) {\n                $tmp =\
    \ $res[$i];\n                $res[$i] = $res[$i - 1];\n                $res[$i\
    \ - 1] = $tmp;\n            } else {\n                break;\n            }\n\
    \        }\n        if ($count > $k) {\n            array_shift($res);\n     \
    \   }\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => -3\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpumdpgpwd.php:56\nStack trace:\n\
    #0 /tmp/tmpumdpgpwd.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpumdpgpwd.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    $max = $arr[0];\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n        }\n        if ($arr[$i] < $min)\
    \ {\n            $min = $arr[$i];\n        }\n    }\n    $bucket = array_fill(0,\
    \ $max - $min + 1, 0);\n    for ($i = 0; $i < count($arr); $i++) {\n        $bucket[$arr[$i]\
    \ - $min]++;\n    }\n    $result = [];\n    for ($i = $max - $min; $i >= 0; $i--)\
    \ {\n        if ($bucket[$i] != 0) {\n            for ($j = 0; $j < $bucket[$i];\
    \ $j++) {\n                $result[] = $i + $min;\n                if (count($result)\
    \ == $k) {\n                    return $result;\n                }\n         \
    \   }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo74qjkd4.php:62\nStack trace:\n#0 /tmp/tmpo74qjkd4.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo74qjkd4.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    for ($i = 0; $i < $k; $i++) {\n        $idx = $i;\n        for ($j\
    \ = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$j] > $arr[$idx])\
    \ {\n                $idx = $j;\n            }\n        }\n        $temp = $arr[$i];\n\
    \        $arr[$i] = $arr[$idx];\n        $arr[$idx] = $temp;\n    }\n    return\
    \ array_slice($arr, 0, $k);\n}\n\n$input = [4, -4, 4];\n$input2 = [-3, -4, 5];\n\
    $input3 = [-3, 2, 1, 2, -1, -2, 1];\nprint_r(maximum($input, 2));\nprint_r(maximum($input2,\
    \ 3));\nprint_r(maximum($input3, 1));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 5\n    [1]\
    \ => -3\n    [2] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpau8inknr.php:43\nStack trace:\n#0 /tmp/tmpau8inknr.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpau8inknr.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $size = count($arr);\n    if ($size == 0 || $k > $size) return [];\n\
    \    $nums = [];\n    for ($i = 0; $i < $size; $i++) {\n        $nums[] = $arr[$i];\n\
    \    }\n    sort($nums);\n    return array_slice($nums, $size - $k);\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    for ($i = 0; $i < $k; $i++) {\n        echo $arr[count($arr)\
    \ - 1 - $i] . \" \";\n    }\n}\n$arr = [-3, -4, 5];\n$k = 3;\nmaximum($arr, $k);\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nmaximum($arr, $k);\necho \"\\n\";\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nmaximum($arr, $k);\necho \"\\n\";\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "5 -3 -4 \n4 4 \n2 \n5 -3 -4 \nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpt6vsv1xe.php:40\nStack trace:\n#0 /tmp/tmpt6vsv1xe.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt6vsv1xe.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = array_unique($arr);\n    sort($arr);\n    return array_reverse(array_slice($arr,\
    \ -$k));\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpovkiwks0.php:30\nStack trace:\n\
    #0 /tmp/tmpovkiwks0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpovkiwks0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // add all elements\n    $pq = new SplPriorityQueue();\n    foreach\
    \ ($arr as $num) {\n        $pq->insert($num, $num);\n    }\n    // pop out k\
    \ elements\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $pq->extract();\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7wngy_3.php:36\n\
    Stack trace:\n#0 /tmp/tmpf7wngy_3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf7wngy_3.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = array();\n    $tempArr = array();\n    $num = count($arr);\n\
    \    if ($num == 0) {\n        return $res;\n    }\n    if ($num == 1) {\n   \
    \     return $arr;\n    }\n    $index = 0;\n    $tempNum = $num;\n    while ($index\
    \ < $k) {\n        $max = $arr[0];\n        $maxIndex = 0;\n        $index1 =\
    \ 0;\n        while ($index1 < $tempNum) {\n            if ($arr[$index1] > $max)\
    \ {\n                $max = $arr[$index1];\n                $maxIndex = $index1;\n\
    \            }\n            $index1++;\n        }\n        $res[$index] = $max;\n\
    \        $index++;\n        $tempArr = array();\n        $tempIndex = 0;\n   \
    \     while ($tempIndex < $maxIndex) {\n            $tempArr[$tempIndex] = $arr[$tempIndex];\n\
    \            $tempIndex++;\n        }\n        $tempIndex2 = $maxIndex;\n    \
    \    while ($tempIndex2 < $tempNum - 1) {\n            $tempArr[$tempIndex2] =\
    \ $arr[$tempIndex2 + 1];\n            $tempIndex2++;\n        }\n        $arr\
    \ = $tempArr;\n        $tempNum--;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4za0buh.php:64\n\
    Stack trace:\n#0 /tmp/tmpd4za0buh.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpd4za0buh.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $result = [];\n    if($len < $k) return\
    \ $result;\n    $result = array_fill(0, $k, null);\n    for($i = 0; $i < $len;\
    \ $i++) {\n        if($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n\
    \            for($j = 1; $j < $k; $j++) {\n                if($result[$j] < $result[$j\
    \ - 1]) {\n                    $tmp = $result[$j];\n                    $result[$j]\
    \ = $result[$j - 1];\n                    $result[$j - 1] = $tmp;\n          \
    \      }\n            }\n        }\n    }\n    return $result;\n}\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqktk2xeb.php:48\nStack trace:\n\
    #0 /tmp/tmpqktk2xeb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqktk2xeb.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $heap = new SplMaxHeap();\n    foreach ($arr as $val) {\n       \
    \ $heap->insert($val);\n    }\n    $res = [];\n    while ($k > 0) {\n        $res[]\
    \ = $heap->extract();\n        $k--;\n    }\n    return $res;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\necho maximum($arr, $k);\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kuekgwm.php:38\n\
    Stack trace:\n#0 /tmp/tmp4kuekgwm.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4kuekgwm.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\necho \"<pre>\
    \ maximum([-3, -4, 5], 3)\";\nprint_r(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\n\
    echo \"</pre>\";\necho \"<pre> maximum([4, -4, 4], 2)\";\nprint_r(maximum([4,\
    \ -4, 4], 2)); // [4, 4]\necho \"</pre>\";\necho \"<pre> maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1)\";\nprint_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre> maximum([-3, -4, 5], 3)Array\n(\n    [0] => 5\n    [1] => -3\n  \
    \  [2] => -4\n)\n</pre><pre> maximum([4, -4, 4], 2)Array\n(\n    [0] => 4\n  \
    \  [1] => 4\n)\n</pre><pre> maximum([-3, 2, 1, 2, -1, -2, 1], 1)Array\n(\n   \
    \ [0] => 2\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuff7g50w.php:35\n\
    Stack trace:\n#0 /tmp/tmpuff7g50w.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuff7g50w.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\tif ($k > count($arr)) {\n\t\t$k = count($arr);\n\t}\n\t$pq = new SplMaxHeap();\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$pq->insert($arr[$i]);\n\t}\n\tfor ($i =\
    \ $k; $i < count($arr); $i++) {\n\t\tif ($arr[$i] > $pq->top()) {\n\t\t\t$pq->extract();\n\
    \t\t\t$pq->insert($arr[$i]);\n\t\t}\n\t}\n\t$result = [];\n\twhile (!$pq->isEmpty())\
    \ {\n\t\t$result[] = $pq->extract();\n\t}\n\treturn $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\n$arr = [4, -4, 4];\n$k = 2;\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\n$arr = [-3, -4, 5, -1, 0, -5, -6, 5, -7, -8, 5, -9, -10, 5, -11,\
    \ -12, 5, -13, -14, 5, -15, -16, 5, -17, -18, 5, -19, -20, 5, -21, -22, 5, -23,\
    \ -24, 5, -25, -26, 5, -27, -28, 5, -29, -30, 5, -31, -32, 5, -33, -34, 5, -35,\
    \ -36, 5, -37, -38, 5, -39, -40, 5, -41, -42, 5, -43, -44, 5, -45, -46, 5, -47,\
    \ -48, 5, -49, -50, 5, -51, -52, 5, -53, -54, 5, -55, -56, 5, -57, -58, 5, -59,\
    \ -60, 5, -61, -62, 5, -63, -64, 5, -65, -66,\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsjr99k4j.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    // foreach($arr as $value) {\n    //     if(count($result)\
    \ < $k) {\n    //         $result[] = $value;\n    //     } else {\n    //   \
    \      $key = getKey($result, $value);\n    //         if($key > -1) {\n    //\
    \             $result[$key] = $value;\n    //         }\n    //     }\n    //\
    \ }\n    for($i = 0; $i < count($arr); $i++) {\n        if(count($result) < $k)\
    \ {\n            $result[] = $arr[$i];\n        } else {\n            $key = getKey($result,\
    \ $arr[$i]);\n            if($key > -1) {\n                $result[$key] = $arr[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoh9_zs_q.php:46\n\
    Stack trace:\n#0 /tmp/tmpoh9_zs_q.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoh9_zs_q.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    $max = [];\n\
    \    $used = [];\n    $result = [];\n    $max[0] = 0;\n    $used[0] = false;\n\
    \    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] > $arr[$max[0]]) {\n\
    \            $max[0] = $i;\n        }\n    }\n    $used[$max[0]] = true;\n   \
    \ array_push($result, $arr[$max[0]]);\n    for ($i = 1; $i < $k; $i++) {\n   \
    \     $max[$i] = 0;\n        $used[$max[$i]] = false;\n        for ($j = 1; $j\
    \ < $n; $j++) {\n            if ($arr[$j] > $arr[$max[$i]] && !$used[$j]) {\n\
    \                $max[$i] = $j;\n            }\n        }\n        $used[$max[$i]]\
    \ = true;\n        array_push($result, $arr[$max[$i]]);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbkus9vh.php:51\n\
    Stack trace:\n#0 /tmp/tmppbkus9vh.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppbkus9vh.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == $k) return $arr;\n    $max = $arr[0];\n    $key\
    \ = 0;\n    $array = [];\n    while ($k > 0) {\n        foreach ($arr as $i =>\
    \ $v) {\n            if ($v > $max) {\n                $max = $v;\n          \
    \      $key = $i;\n            }\n        }\n        $array[] = $max;\n      \
    \  $arr[$key] = null;\n        $max = -1;\n        $k--;\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4wk4sp6.php:42\n\
    Stack trace:\n#0 /tmp/tmph4wk4sp6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmph4wk4sp6.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $heap = new SplMaxHeap();\n    foreach ($arr as $item) {\n      \
    \  $heap->insert($item);\n    }\n    $ans = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $ans[] = $heap->extract();\n    }\n    return $ans;\n}\n\necho \"\
    <pre>maximum([-3, -4, 5], 3)\\r\\n\";\nprint_r(maximum([-3, -4, 5], 3));\necho\
    \ \"</pre>\";\n\necho \"<pre>maximum([4, -4, 4], 2)\\r\\n\";\nprint_r(maximum([4,\
    \ -4, 4], 2));\necho \"</pre>\";\n\necho \"<pre>maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\\r\\n\";\nprint_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>maximum([-3, -4, 5], 3)\nArray\n(\n    [0] => 5\n    [1] => -3\n \
    \   [2] => -4\n)\n</pre><pre>maximum([4, -4, 4], 2)\nArray\n(\n    [0] => 4\n\
    \    [1] => 4\n)\n</pre><pre>maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nArray\n(\n\
    \    [0] => 2\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5veq_4cp.php:45\n\
    Stack trace:\n#0 /tmp/tmp5veq_4cp.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5veq_4cp.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    return array_slice($arr, -$k);\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7k12gwlq.php:39\nStack trace:\n\
    #0 /tmp/tmp7k12gwlq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7k12gwlq.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $ans = array();\n    if($len < $k) {\n \
    \       return $ans;\n    }\n    $ans = $arr;\n    // $k = 3;\n    $k_ = $k;\n\
    \    while($k > 0) {\n        $k--;\n        // $ans = sort($ans);\n        rsort($ans);\n\
    \        array_pop($ans);\n    }\n    // sort($ans);\n    rsort($ans);\n    return\
    \ $ans;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nvar_dump(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\narray(1) {\n  [0]=>\n  int(4)\n}\narray(6) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n  [3]=>\n  int(1)\n  [4]=>\n\
    \  int(-1)\n  [5]=>\n  int(-2)\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpq2a5_w62.php:52\nStack trace:\n#0 /tmp/tmpq2a5_w62.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq2a5_w62.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = array_slice($arr, 0, $k);\n    sort($max);\n    for ($i =\
    \ $k; $i < count($arr); $i++) {\n        if ($arr[$i] > $max[0]) {\n         \
    \   $max[0] = $arr[$i];\n            sort($max);\n        }\n    }\n    return\
    \ $max;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxdkzfab5.php:47\nStack trace:\n\
    #0 /tmp/tmpxdkzfab5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxdkzfab5.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = array_unique($arr);\n    arsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkk8eajj7.php:32\nStack trace:\n\
    #0 /tmp/tmpkk8eajj7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkk8eajj7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$len = count($arr);\n\tif ($len == 0) return [];\n\tif ($len == 1)\
    \ return $arr;\n\tsort($arr);\n\t$result = [];\n\tfor ($i=0; $i < $k; $i++) {\
    \ \n\t\t$result[] = $arr[$len-$i-1];\n\t}\n\treturn $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nvar_dump(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nvar_dump(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(-4)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lf7dapt.php:42\n\
    Stack trace:\n#0 /tmp/tmp2lf7dapt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2lf7dapt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $bucket = [];\n    foreach ($arr as $v) {\n        if (isset($bucket[$v]))\
    \ {\n            $bucket[$v]++;\n        } else {\n            $bucket[$v] = 1;\n\
    \        }\n    }\n    krsort($bucket);\n    $res = [];\n    foreach ($bucket\
    \ as $k => $v) {\n        for ($i = 0; $i < $v; $i++) {\n            if (count($res)\
    \ < $k) {\n                $res[] = $k;\n            } else {\n              \
    \  break 2;\n            }\n        }\n    }\n    return $res;\n}\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkxm0pq2l.php:47\nStack trace:\n#0 /tmp/tmpkxm0pq2l.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkxm0pq2l.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $ans = [];\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n\
    \    foreach ($arr as $a) {\n        $pq->insert($a, -$a);\n        if ($pq->count()\
    \ > $k) $pq->extract();\n    }\n    while (!$pq->isEmpty()) $ans[] = $pq->extract()['data'];\n\
    \    return $ans;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = array_unique($arr);\n    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpm9uam3fu.php:39\nStack trace:\n\
    #0 /tmp/tmpm9uam3fu.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm9uam3fu.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    // Sort the array in ascending order\n\
    \    sort($arr);\n    // Return an array with the last $k elements of the array\n\
    \    return array_slice($arr, $length - $k);\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n\
    print_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\n\
    print_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ $arr[0];\n        $maxIndex = 0;\n        for ($j = 1; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0g74til.php:38\n\
    Stack trace:\n#0 /tmp/tmpa0g74til.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpa0g74til.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $maxHeap = new SplMaxHeap();\n    foreach ($arr as $num) {\n    \
    \    $maxHeap->insert($num);\n    }\n    $res = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $res[] = $maxHeap->extract();\n    }\n    return $res;\n}\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28cn7jce.php:33\n\
    Stack trace:\n#0 /tmp/tmp28cn7jce.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp28cn7jce.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    $len = count($arr);\n    $result = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$len - $i - 1];\n    }\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpw7mabavh.php:35\nStack trace:\n\
    #0 /tmp/tmpw7mabavh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpw7mabavh.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // // 1. Sort function\n    // $n = count($arr);\n    // sort($arr);\n\
    \    // return array_slice($arr, $n - $k, $k);\n\n    // // 2. Min-heap\n    //\
    \ $heap = new SplMinHeap();\n    // foreach ($arr as $n) {\n    //     if ($heap->count()\
    \ < $k) {\n    //         $heap->insert($n);\n    //     } else {\n    //    \
    \     if ($n > $heap->top()) {\n    //             $heap->extract();\n    // \
    \            $heap->insert($n);\n    //         }\n    //     }\n    // }\n  \
    \  // return iterator_to_array($heap);\n\n    // 3. Max-heap\n    $heap = new\
    \ SplMaxHeap();\n    foreach ($arr as $n) {\n        if ($heap->count() < $k)\
    \ {\n            $heap->insert($n);\n        } else {\n            if ($n < $heap->top())\
    \ {\n                $heap->extract();\n                $heap->insert($n);\n \
    \           }\n        }\n    }\n    return iterator_to_array($heap);\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5xvj1so.php:56\n\
    Stack trace:\n#0 /tmp/tmpt5xvj1so.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpt5xvj1so.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = 0;\n    $tail = 0;\n    $len = count($arr);\n\
    \    while($tail < $len && $count < $k) {\n        $toInsert = $arr[$tail];\n\
    \        $insertAt = $count;\n        $count++;\n        for($i = $count - 1;\
    \ $i >= 0; $i--) {\n            if($result[$i] > $toInsert) {\n              \
    \  $result[$i + 1] = $result[$i];\n                $insertAt = $i;\n         \
    \   } else {\n                break;\n            }\n        }\n        $result[$insertAt]\
    \ = $toInsert;\n        $tail++;\n    }\n    return $result;\n}\n\necho \"expect\
    \ [-4, -3, 5]: \";\nvar_dump(maximum([-3, -4, 5], 3));\necho \"expect [4, 4]:\
    \ \";\nvar_dump(maximum([4, -4, 4], 2));\necho \"expect [2]: \";\nvar_dump(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "expect [-4, -3, 5]: array(3) {\n  [0]=>\n  int(-3)\n  [1]=>\n  int(-4)\n\
    \  [2]=>\n  int(5)\n}\nexpect [4, 4]: array(2) {\n  [0]=>\n  int(4)\n  [1]=>\n\
    \  int(-4)\n}\nexpect [2]: array(1) {\n  [0]=>\n  int(-3)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkgo1get3.php:51\nStack trace:\n#0 /tmp/tmpkgo1get3.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkgo1get3.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\u51FA\u524Dk\u4E2A\u6570\
    \u5373\u53EF\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjzvbxu6.php:28\n\
    Stack trace:\n#0 /tmp/tmppjzvbxu6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppjzvbxu6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    // if ($k < $n / 2) {\n    //     $arr = array_flip($arr);\n\
    \    //     krsort($arr);\n    //     array_splice($arr, $k);\n    //     $arr\
    \ = array_keys($arr);\n    // } else {\n    //     arsort($arr);\n    //     array_splice($arr,\
    \ $k);\n    // }\n    // return $arr;\n    $arr = array_combine($arr, range(0,\
    \ $n - 1));\n    krsort($arr);\n    $arr = array_splice($arr, 0, $k);\n    $arr\
    \ = array_keys($arr);\n    sort($arr);\n    return $arr;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    var_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nvar_dump(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\narray(1) {\n  [0]=>\n  int(0)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1jc8s7s.php:53\n\
    Stack trace:\n#0 /tmp/tmpd1jc8s7s.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpd1jc8s7s.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $i = 0;\n    $result = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $result[$i] = $arr[$i];\n    }\n    $i = $k -\
    \ 1;\n    while ($i >= 0) {\n        if (2 * $i + 1 <= $len - 1) {\n         \
    \   if ($result[$i] < $result[2 * $i + 1]) {\n                if (2 * $i + 2 <=\
    \ $len - 1) {\n                    if ($result[2 * $i + 1] < $result[2 * $i +\
    \ 2]) {\n                        $temp = $result[$i];\n                      \
    \  $result[$i] = $result[2 * $i + 2];\n                        $result[2 * $i\
    \ + 2] = $temp;\n                        $i = 2 * $i + 2;\n                  \
    \  } else {\n                        $temp = $result[$i];\n                  \
    \      $result[$i] = $result[2 * $i + 1];\n                        $result[2 *\
    \ $i + 1] = $temp;\n                        $i = 2 * $i + 1;\n               \
    \     }\n                } else {\n                    $temp = $result[$i];\n\
    \                    $result[$i] = $result[2 * $i + 1];\n                    $result[2\
    \ * $i + 1] = $temp;\n                    $i = 2 * $i + 1;\n                }\n\
    \            } else if (2 * $i + 2 <= $len - 1) {\n                if ($result[$i]\
    \ < $result[2 * $i + 2]) {\n                    $temp = $result[$i];\n       \
    \             $result[$i] = $result[2 * $i + 2];\n                    $result[2\
    \ * $i + 2] = $temp;\n                    $i = 2 * $i + 2;\n                }\
    \ else {\n                    $i = -1;\n                }\n            } else\
    \ {\n                $i = -1;\n            }\n        } else {\n            $i\
    \ = -1;\n        }\n    }\n    $i = $k;\n    for ($i = $k\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgvvk30ri.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ 0;\n        $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $index = $j;\n            }\n        }\n        $result[] = $max;\n \
    \       unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 0\n    [2] => 0\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 0\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1kuey1rv.php:50\nStack trace:\n#0 /tmp/tmp1kuey1rv.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1kuey1rv.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $stack = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $cur = $arr[$i];\n        if ($i >= $k) {\n            array_shift($stack);\n\
    \        }\n        while (!empty($stack) && $cur > $stack[0]) {\n           \
    \ array_shift($stack);\n        }\n        $stack[] = $cur;\n    }\n    return\
    \ $stack;\n}\n$arr = [-3, -4, 5];\n$k = 3;\necho implode(\",\", maximum($arr,\
    \ $k)) . PHP_EOL;\n$arr = [4, -4, 4];\n$k = 2;\necho implode(\",\", maximum($arr,\
    \ $k)) . PHP_EOL;\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho implode(\"\
    ,\", maximum($arr, $k)) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n4\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppktc7ls8.php:46\n\
    Stack trace:\n#0 /tmp/tmppktc7ls8.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppktc7ls8.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $map = [];\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        if (!array_key_exists($arr[$i], $map)) {\n            $map[$arr[$i]]\
    \ = 1;\n        } else {\n            $map[$arr[$i]]++;\n        }\n    }\n  \
    \  $keys = array_keys($map);\n    $total = sizeof($keys);\n    for ($i = 0; $i\
    \ < $total; $i++) {\n        $key = $keys[$i];\n        $count = $map[$key];\n\
    \        for ($j = 0; $j < $count; $j++) {\n            $result[] = $key;\n  \
    \      }\n    }\n    for ($i = $k; $i < sizeof($arr); $i++) {\n        $candidate\
    \ = $arr[$i];\n        if ($candidate > $result[0]) {\n            $result[0]\
    \ = $candidate;\n            $left = 0;\n            $right = 1;\n           \
    \ while ($right < $k) {\n                if ($result[$left] < $result[$right])\
    \ {\n                    $temp = $result[$left];\n                    $result[$left]\
    \ = $result[$right];\n                    $result[$right] = $temp;\n         \
    \       }\n                $left++;\n                $right++;\n            }\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvsjaua8.php:60\n\
    Stack trace:\n#0 /tmp/tmpxvsjaua8.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpxvsjaua8.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k === 1) {\n        $max = -1000;\n        for ($i = 0; $i <\
    \ count($arr); $i++) {\n            if ($arr[$i] > $max) {\n                $max\
    \ = $arr[$i];\n            }\n        }\n        return [$max];\n    }\n    $i\
    \ = 0;\n    $j = $k - 1;\n    $max_arr = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max_arr[$i] = $arr[$i];\n    }\n    while ($j < count($arr)) {\n\
    \        // find the max number\n        $max = -1000;\n        $max_i = -1;\n\
    \        for ($i = 0; $i < $k; $i++) {\n            if ($max_arr[$i] > $max) {\n\
    \                $max = $max_arr[$i];\n                $max_i = $i;\n        \
    \    }\n        }\n        // replace the max number with j\n        if ($arr[$j]\
    \ > $max) {\n            $max_arr[$max_i] = $arr[$j];\n        }\n        $j++;\n\
    \    }\n    return $max_arr;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9p470mad.php:68\nStack trace:\n#0 /tmp/tmp9p470mad.php(81):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9p470mad.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    array_splice($arr, 0, count($arr) - $k);\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$n = count($arr);\n\tif ($n == 0) {\n\t\treturn [];\n\t}\n\tif ($k\
    \ > $n) {\n\t\t$k = $n;\n\t}\n\t$result = [];\n\tfor ($i = 0; $i < $k; $i++) {\n\
    \t\t$max = PHP_INT_MIN;\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\
    \t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\
    \t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\
    \t\t$n--;\n\t}\n\treturn $result;\n}\necho \"<pre>maximum([-3, -4, 5], 3)\\r\\\
    n\";\nprint_r(maximum([-3, -4, 5], 3));\necho \"</pre>\";\necho \"<pre>maximum([4,\
    \ -4, 4], 2)\\r\\n\";\nprint_r(maximum([4, -4, 4], 2));\necho \"</pre>\";\necho\
    \ \"<pre>maximum([-3, 2, 1, 2, -1, -2, 1], 1)\\r\\n\";\nprint_r(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>maximum([-3, -4, 5], 3)\nArray\n(\n    [0] => 5\n    [1] => -3\n \
    \   [2] => -4\n)\n</pre><pre>maximum([4, -4, 4], 2)\nArray\n(\n    [0] => 4\n\
    \    [1] => 4\n)\n</pre><pre>maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nArray\n(\n\
    \    [0] => 2\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc45sod5.php:56\n\
    Stack trace:\n#0 /tmp/tmplc45sod5.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplc45sod5.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if($k >= $length) {\n        return $arr;\n\
    \    }\n    $heap = new SplMaxHeap();\n    for($i = 0; $i < $k; $i++) {\n    \
    \    $heap->insert($arr[$i]);\n    }\n    for($i = $k; $i < $length; $i++) {\n\
    \        if($arr[$i] < $heap->top()) {\n            $heap->extract();\n      \
    \      $heap->insert($arr[$i]);\n        }\n    }\n    $result = [];\n    while(!$heap->isEmpty())\
    \ {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpe6w46q8i.php:47\nStack trace:\n\
    #0 /tmp/tmpe6w46q8i.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpe6w46q8i.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if(count($arr) == $k) return $arr;\n    if($k == 1) return max($arr);\n\
    \    $arr = mergeSort($arr);\n    $max = [];\n    $i = count($arr) - 1;\n    while(count($max)\
    \ < $k){\n        $max[] = $arr[$i];\n        $i--;\n    }\n    return $max;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplixah5ji.php:34\n\
    Stack trace:\n#0 /tmp/tmplixah5ji.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplixah5ji.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    $len = count($arr);\n    $i = 0;\n    while ($k >\
    \ 0) {\n        $max = $arr[$i];\n        $maxI = $i;\n        for ($j = $i; $j\
    \ < $len; $j++) {\n            if ($arr[$j] > $max) {\n                $max =\
    \ $arr[$j];\n                $maxI = $j;\n            }\n        }\n        $res[]\
    \ = $max;\n        $i = $maxI + 1;\n        $k--;\n    }\n    return $res;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => \n    [2] => \n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_s614a7u.php:45\nStack trace:\n#0 /tmp/tmp_s614a7u.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_s614a7u.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    $max = min_heapify($max);\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $max[0]) {\n          \
    \  $max[0] = $arr[$i];\n            $max = min_heapify($max);\n        }\n   \
    \ }\n    return $max;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function min_heapify()\
    \ in /tmp/tmp96trzlbu.php:23\nStack trace:\n#0 /tmp/tmp96trzlbu.php(33): maximum(Array,\
    \ 3)\n#1 /tmp/tmp96trzlbu.php(37): candidate(Array, 3)\n#2 /tmp/tmp96trzlbu.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp96trzlbu.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $topK = [];\n    foreach ($arr as $el) {\n        array_push($topK,\
    \ $el);\n        if (count($topK) > $k) {\n            array_shift($topK);\n \
    \       }\n    }\n    sort($topK);\n    return $topK;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15l8awy7.php:34\n\
    Stack trace:\n#0 /tmp/tmp15l8awy7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp15l8awy7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\n/**\n *\
    \ This is slower than using sort\n * \n * Keeps a sorted list of integers of length\
    \ k in the array $maxVals\n * (Originally filled with -infinity).\n * For each\
    \ element of the array $arr, if it is less than the smallest \n * (most negative)\
    \ element of $maxVals, skip it.  Otherwise, find its correct \n * position in\
    \ $maxVals and insert it.\n * Return $maxVals.\n */\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf2winyk.php:37\n\
    Stack trace:\n#0 /tmp/tmpbf2winyk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbf2winyk.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $bucket = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (isset($bucket[$arr[$i]])) {\n            $bucket[$arr[$i]] += 1;\n   \
    \     } else {\n            $bucket[$arr[$i]] = 1;\n        }\n    }\n    $sort_arr\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = 0;\n        $max_idx\
    \ = 0;\n        foreach ($bucket as $key => $value) {\n            if ($value\
    \ > $max) {\n                $max = $value;\n                $max_idx = $key;\n\
    \            }\n        }\n        $sort_arr[] = $max_idx;\n        unset($bucket[$max_idx]);\n\
    \    }\n    return $sort_arr;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavv60uay.php:46\n\
    Stack trace:\n#0 /tmp/tmpavv60uay.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpavv60uay.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $maxHeap = new SplMaxHeap();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $maxHeap->insert($arr[$i]);\n    }\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n  \
    \  }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqctiiedj.php:33\n\
    Stack trace:\n#0 /tmp/tmpqctiiedj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqctiiedj.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $ret = [];\n    sort($arr);\n    $ret = array_slice($arr, -$k);\n\
    \    return $ret;\n}\necho implode(',', maximum([-3, 2, 1, 2, -1, -2, 1], 1))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky744kot.php:39\n\
    Stack trace:\n#0 /tmp/tmpky744kot.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpky744kot.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$res = array();\n\tsort($arr);\n\t$a = 0;\n\t$b = count($arr)-1;\n\t\
    while ($k) {\n\t\t$res[] = ($arr[$a] > $arr[$b]) ? $arr[$a++] : $arr[$b--];\n\t\
    \t$k--;\n\t}\n\tsort($res);\n\treturn $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // heap of size k\n    $heap = new SplMaxHeap();\n    // build heap\
    \ with first k items\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    // push new items into heap\n    for ($i = $k; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n \
    \           $heap->insert($arr[$i]);\n        }\n    }\n    // return sorted list\n\
    \    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp95vm_yzb.php:46\nStack trace:\n\
    #0 /tmp/tmp95vm_yzb.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp95vm_yzb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if($k == 0) return [];\n    return _maximum($arr, $k);\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function _maximum() in\
    \ /tmp/tmp4j5lzf9e.php:19\nStack trace:\n#0 /tmp/tmp4j5lzf9e.php(23): maximum(Array,\
    \ 3)\n#1 /tmp/tmp4j5lzf9e.php(27): candidate(Array, 3)\n#2 /tmp/tmp4j5lzf9e.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4j5lzf9e.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n < $k) {\n        return;\n    }\n \
    \   rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpc516fv59.php:41\nStack trace:\n#0 /tmp/tmpc516fv59.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc516fv59.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    if (count($arr) == 0) return $res;\n    if (count($arr)\
    \ == 1) return $arr;\n    $len = count($arr);\n    if ($k == 0) return $res;\n\
    \    if ($k >= $len) return $arr;\n    $hp = new SplMaxHeap();\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        if ($i < $k) {\n            $hp->insert($arr[$i]);\n\
    \        } else {\n            if ($arr[$i] > $hp->top()) {\n                $hp->extract();\n\
    \                $hp->insert($arr[$i]);\n            }\n        }\n    }\n   \
    \ while (!$hp->isEmpty()) {\n        $res[] = $hp->extract();\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$arr = [4, -4, 4];\n$k = 2;\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$arr = [-3, -4, 5, -3, -3, 2, -1, -2, -1,\
    \ -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1, -2,\
    \ -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1,\
    \ -2, -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2,\
    \ -1, -2, -1, -4, -3, -3, 2, -1, -2, -1, -4, -3, -3, 2, -1, -\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu4jqr7ut.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    $r = [];\n    for ($i = count($arr) - 1; $i >= count($arr)\
    \ - $k; $i--) {\n        $r[] = $arr[$i];\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7itjjb43.php:31\n\
    Stack trace:\n#0 /tmp/tmp7itjjb43.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7itjjb43.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    if ($count < $k) {\n        return $arr;\n\
    \    }\n\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $heap->insert($arr[$i]);\n    }\n\n    for ($i = $k; $i < $count; $i++)\
    \ {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n \
    \           $heap->insert($arr[$i]);\n        }\n    }\n\n    $result = [];\n\
    \    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n\
    \n    return $result;\n}\n\nprint_r(maximum([-3, -4, 5], 3));\nprint_r(maximum([4,\
    \ -4, 4], 2));\nprint_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ RuntimeException: Can't peek at an empty heap in /tmp/tmpplp4dmir.php:29\nStack\
    \ trace:\n#0 /tmp/tmpplp4dmir.php(29): SplHeap->top()\n#1 /tmp/tmpplp4dmir.php(47):\
    \ maximum(Array, 0)\n#2 /tmp/tmpplp4dmir.php(61): candidate(Array, 0)\n#3 /tmp/tmpplp4dmir.php(64):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpplp4dmir.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = array_count_values($arr);\n    arsort($count);\n    $result\
    \ = [];\n    foreach ($count as $key => $value) {\n        if ($k > 0) {\n   \
    \         $result[] = $key;\n            $k--;\n        } else {\n           \
    \ break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7iomk5vr.php:37\n\
    Stack trace:\n#0 /tmp/tmp7iomk5vr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp7iomk5vr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $output = array();\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $max = -INF;\n        $max_idx = -1;\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $max_idx = $j;\n            }\n        }\n    \
    \    $output[] = $max;\n        $arr[$max_idx] = -INF;\n    }\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuecvj1go.php:39\n\
    Stack trace:\n#0 /tmp/tmpuecvj1go.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuecvj1go.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // sort the array in descending order using a user defined function\n\
    \    usort($arr, function($a, $b) {\n        return $b <=> $a;\n    });\n    //\
    \ use array_slice to grab the first $k elements\n    return array_slice($arr,\
    \ 0, $k);\n}\n$arr1 = [-3, -4, 5];\n$arr2 = [4, -4, 4];\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\nprint_r(maximum($arr1, 3));\nprint_r(maximum($arr2, 2));\nprint_r(maximum($arr3,\
    \ 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu7zniv62.php:36\nStack trace:\n#0 /tmp/tmpu7zniv62.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu7zniv62.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $pq = new SplMaxHeap();\n    foreach ($arr as $num) {\n        $pq->insert($num);\n\
    \        if ($pq->count() > $k) {\n            $pq->extract();\n        }\n  \
    \  }\n    $result = [];\n    while (!$pq->isEmpty()) {\n        $result[] = $pq->extract();\n\
    \    }\n    return array_reverse($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgz_f5fs1.php:38\n\
    Stack trace:\n#0 /tmp/tmpgz_f5fs1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgz_f5fs1.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = -1000;\n    foreach ($arr as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n    }\n\
    \    $result[] = $max;\n    $k--;\n    while ($k > 0) {\n        $max = -1000;\n\
    \        foreach ($arr as $number) {\n            if ($number != $result[count($result)\
    \ - 1] && $number > $max) {\n                $max = $number;\n            }\n\
    \        }\n        $result[] = $max;\n        $k--;\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\nprint_r(maximum($arr, 3));\n$arr = [4, -4, 4];\nprint_r(maximum($arr,\
    \ 2));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\nprint_r(maximum($arr, 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxc5y40as.php:50\nStack trace:\n#0 /tmp/tmpxc5y40as.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxc5y40as.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $this->quickSelect($arr, 0, count($arr) - 1, $k);\n    return array_slice($arr,\
    \ 0, $k);\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpweiinam1.php:18\nStack trace:\n#0 /tmp/tmpweiinam1.php(22): maximum(Array,\
    \ 3)\n#1 /tmp/tmpweiinam1.php(26): candidate(Array, 3)\n#2 /tmp/tmpweiinam1.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpweiinam1.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    foreach ($arr as $a) {\n        if (count($max) <\
    \ $k) {\n            $max[] = $a;\n        } else {\n            rsort($max);\n\
    \            $max[0] = $a;\n        }\n    }\n    rsort($max);\n    return $max;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nvar_dump(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nvar_dump(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(-4)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(-4)\n}\narray(1) {\n  [0]=>\n\
    \  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpom_47v_5.php:45\n\
    Stack trace:\n#0 /tmp/tmpom_47v_5.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpom_47v_5.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr2 = [];\n    for ($i = 0; $i < count($arr); $i++) {\n       \
    \ $inserted = false;\n        $inserted_index = 0;\n        for ($j = 0; $j <\
    \ count($arr2); $j++) {\n            if ($arr[$i] > $arr2[$j]) {\n           \
    \     $inserted = true;\n                $inserted_index = $j;\n             \
    \   break;\n            }\n        }\n        if ($inserted) {\n            $arr2[$inserted_index]\
    \ = $arr[$i];\n        } else {\n            array_push($arr2, $arr[$i]);\n  \
    \      }\n        if (count($arr2) > $k) {\n            array_pop($arr2);\n  \
    \      }\n    }\n    return $arr2;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n)\n\nArray\n(\n    [0] => 4\n  \
    \  [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa0944rer.php:57\nStack trace:\n#0 /tmp/tmpa0944rer.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa0944rer.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if (!in_array($j, $res) && $arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n   \
    \     $res[] = $maxIndex;\n    }\n    $result = [];\n    foreach ($res as $r)\
    \ {\n        $result[] = $arr[$r];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_08oabr0.php:42\n\
    Stack trace:\n#0 /tmp/tmp_08oabr0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_08oabr0.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = max($arr);\n    $pos = array_search($max, $arr);\n    unset($arr[$pos]);\n\
    \    $arr = array_merge([$max], $arr);\n    return array_slice($arr, 0, $k);\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkucg2yj9.php:41\nStack trace:\n\
    #0 /tmp/tmpkucg2yj9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkucg2yj9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $sort = quickSort($arr);\n    $sort = array_reverse($sort);\n\
    \    while ($k > 0) {\n        $result[] = array_shift($sort);\n        $k--;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quickSort() in\
    \ /tmp/tmplrfd61tw.php:19\nStack trace:\n#0 /tmp/tmplrfd61tw.php(28): maximum(Array,\
    \ 3)\n#1 /tmp/tmplrfd61tw.php(32): candidate(Array, 3)\n#2 /tmp/tmplrfd61tw.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplrfd61tw.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    if ($count < $k) {\n        return $arr;\n\
    \    }\n    sort($arr);\n    $min = $count - $k;\n    return array_slice($arr,\
    \ $min);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // $arr = [-3, -4, 5]; $k = 3;\n    // $arr = [4, -4, 4]; $k = 2;\n\
    \    // $arr = [-3, 2, 1, 2, -1, -2, 1]; $k = 1;\n    $n = count($arr);\n    if($k\
    \ >= $n) {\n        return $arr;\n    }\n    $max = array_fill(0, $k, PHP_INT_MIN);\n\
    \    $max_idx = [];\n    for($i = 0; $i < $n; $i++) {\n        if($i < $k) {\n\
    \            $max[$i] = $arr[$i];\n            $max_idx[$i] = $i;\n        } else\
    \ {\n            $max_min = $max[0];\n            $max_min_idx = 0;\n        \
    \    for($j = 1; $j < $k; $j++) {\n                if($max[$j] < $max_min) {\n\
    \                    $max_min = $max[$j];\n                    $max_min_idx =\
    \ $j;\n                }\n            }\n            if($arr[$i] > $max_min) {\n\
    \                $max[$max_min_idx] = $arr[$i];\n                $max_idx[$max_min_idx]\
    \ = $i;\n            }\n        }\n    }\n    $result = [];\n    foreach($max_idx\
    \ as $idx) {\n        $result[] = $arr[$idx];\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\n$arr = [-3, -4, 5]; $k = 3;\nprint_r(maximum($arr, $k));\n\
    $arr = [4, -4, 4]; $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1]; $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph06jaypj.php:65\nStack trace:\n#0 /tmp/tmph06jaypj.php(78):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph06jaypj.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $maxArr = [];\n    while ($k > 0) {\n        $max = NULL;\n     \
    \   $maxIndex = NULL;\n        for ($i = 0; $i < count($arr); $i++) {\n      \
    \      if (!in_array($arr[$i], $maxArr)) {\n                if ($max === NULL\
    \ || $arr[$i] > $max) {\n                    $max = $arr[$i];\n              \
    \      $maxIndex = $i;\n                }\n            }\n        }\n        $maxArr[]\
    \ = $max;\n        unset($arr[$maxIndex]);\n        $k--;\n    }\n    sort($maxArr);\n\
    \    return $maxArr;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo PHP_EOL;\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ PHP_EOL;\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7kr2bvn3.php:54\nStack trace:\n#0 /tmp/tmp7kr2bvn3.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7kr2bvn3.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = mergeSort($arr);\n    $arr = array_reverse($arr);\n    return\
    \ array_slice($arr, 0, $k);\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mergeSort() in\
    \ /tmp/tmp63jk75vp.php:18\nStack trace:\n#0 /tmp/tmp63jk75vp.php(23): maximum(Array,\
    \ 3)\n#1 /tmp/tmp63jk75vp.php(27): candidate(Array, 3)\n#2 /tmp/tmp63jk75vp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp63jk75vp.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMinHeap();\n    foreach ($arr\
    \ as $a) {\n        $heap->insert($a);\n        if ($heap->count() > $k) {\n \
    \           $heap->extract();\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty())\
    \ {\n        $res[] = $heap->extract();\n    }\n    return array_reverse($res);\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0lv8oy9.php:37\n\
    Stack trace:\n#0 /tmp/tmpt0lv8oy9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpt0lv8oy9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n            }\n        }\n        $res[]\
    \ = $max;\n        array_splice($arr, array_search($max, $arr), 1);\n    }\n \
    \   return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf81gnjv.php:36\n\
    Stack trace:\n#0 /tmp/tmpyf81gnjv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpyf81gnjv.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == 0) return null;\n    $count = count($arr);\n \
    \   if ($count == 1) return $arr;\n    if ($count <= $k) return $arr;\n    $result\
    \ = array_slice($arr, $count - $k, $k);\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpam5pyzu9.php:40\nStack trace:\n#0 /tmp/tmpam5pyzu9.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpam5pyzu9.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = array_unique($arr);\n    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpiqrr_c26.php:30\nStack trace:\n\
    #0 /tmp/tmpiqrr_c26.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiqrr_c26.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    foreach ($arr as $number) {\n        if (empty($result))\
    \ {\n            $result[] = $number;\n        } else {\n            // if $number\
    \ is greater than any one of the numbers in $result, insert it in $result\n  \
    \          // if $number is smaller than any one of the numbers in $result, insert\
    \ it in $result\n            // if $number is between any two numbers in $result,\
    \ insert it in $result\n            foreach ($result as $key => $value) {\n  \
    \              if ($number >= $value) {\n                    array_splice($result,\
    \ $key, 0, $number);\n                    $result = array_slice($result, 0, $k);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp93z8k9t.php:43\n\
    Stack trace:\n#0 /tmp/tmpp93z8k9t.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpp93z8k9t.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // get maximum number in the array\n    $max = $arr[0];\n    foreach\
    \ ($arr as $num) {\n        if ($num > $max) {\n            $max = $num;\n   \
    \     }\n    }\n    // get the number of digits\n    $digits = count(str_split($max));\n\
    \    // create buckets\n    $buckets = array_fill(0, 10, []);\n    for ($i = 0;\
    \ $i < $digits; $i++) {\n        foreach ($arr as $num) {\n            $buckets[($num\
    \ % 10 ** ($i + 1)) / 10 ** $i][] = $num;\n        }\n        $arr = [];\n   \
    \     foreach ($buckets as $bucket) {\n            foreach ($bucket as $num) {\n\
    \                $arr[] = $num;\n            }\n        }\n        $buckets =\
    \ array_fill(0, 10, []);\n    }\n    // get maximum $k numbers\n    $k_max = [];\n\
    \    $i = count($arr) - 1;\n    while ($k > 0) {\n        $k_max[] = $arr[$i];\n\
    \        $i--;\n        $k--;\n    }\n    return $k_max;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdwye9thl.php:60\nStack trace:\n\
    #0 /tmp/tmpdwye9thl.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpdwye9thl.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = array();\n    $heap = new SplMinHeap();\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i =\
    \ $k; $i < count($arr); $i++) {\n        if ($arr[$i] > $heap->top()) {\n    \
    \        $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n\
    \    }\n    while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught RuntimeException: Can't peek at an empty heap in /tmp/tmp9p1cbyop.php:24\n\
    Stack trace:\n#0 /tmp/tmp9p1cbyop.php(24): SplHeap->top()\n#1 /tmp/tmp9p1cbyop.php(38):\
    \ maximum(Array, 0)\n#2 /tmp/tmp9p1cbyop.php(52): candidate(Array, 0)\n#3 /tmp/tmp9p1cbyop.php(55):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp9p1cbyop.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // maxHeap\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $result = [];\n \
    \   while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpao9_ouwv.php:44\nStack trace:\n\
    #0 /tmp/tmpao9_ouwv.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpao9_ouwv.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if($len < $k) {\n        return [];\n  \
    \  }\n    $result = array_slice($arr, 0, $k);\n    $heapify($result);\n    for($i\
    \ = $k; $i < $len; $i++) {\n        if($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            maxHeapify($result, 0);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp98weaxqh.php:23\n\
    Stack trace:\n#0 /tmp/tmp98weaxqh.php(34): maximum(Array, 3)\n#1 /tmp/tmp98weaxqh.php(38):\
    \ candidate(Array, 3)\n#2 /tmp/tmp98weaxqh.php(51): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp98weaxqh.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) == 0) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            // Find the right insert location\n            // If arr[i] is\
    \ larger than the last element of the result, append it\n            // Otherwise,\
    \ insert it to the right location\n            if ($arr[$i] >= $result[count($result)\
    \ - 1]) {\n                $result[] = $arr[$i];\n            } else {\n     \
    \           $left = 0;\n                $right = count($result) - 1;\n       \
    \         while ($left <= $right) {\n                    $mid = floor(($left +\
    \ $right) / 2);\n                    if ($result[$mid] < $arr[$i]) {\n       \
    \                 $left = $mid + 1;\n                    } else {\n          \
    \              $right = $mid - 1;\n                    }\n                }\n\
    \                // $left = $right + 1 is the insert location\n              \
    \  $arrCopy = [];\n                for ($j = 0; $j < $left; $j++) {\n        \
    \            $arrCopy[] = $result[$j];\n                }\n                $arrCopy[]\
    \ = $arr[$i];\n                for ($j = $left; $j < count($result); $j++) {\n\
    \                    $arrCopy[] = $result[$j];\n                }\n          \
    \      $result = $arrCopy;\n            }\n        }\n        if (count($result)\
    \ > $k) {\n            array_pop($result);\n        }\n    }\n    return $result;\n\
    }\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 = [4, -4, 4];\n$k2 = 2;\n$arr3 = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr1, $k1));\nprint_r(maximum($arr2,\
    \ $k2));\nprint_r(maximum($arr3, $k3));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => -3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk9vpcyhr.php:72\nStack trace:\n#0 /tmp/tmpk9vpcyhr.php(84):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk9vpcyhr.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) <= $k) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    $min = max($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = max($arr);\n        $result[] = $max;\n        $index = array_search($max,\
    \ $arr);\n        $arr[$index] = $min;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplw3j2y9.php:37\n\
    Stack trace:\n#0 /tmp/tmpplw3j2y9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpplw3j2y9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $size = count($arr);\n    if ($size < $k) return false;\n    $out\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $out[] = $arr[$i];\n    }\n\
    \    foreach ($out as $k => $v) {\n        $out[$k] = $v * -1;\n    }\n    $heap\
    \ = new Heap($out);\n    for ($i = $k; $i < $size; $i++) {\n        if ($arr[$i]\
    \ > $heap->top()) {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n\
    \        }\n    }\n    foreach ($heap->getArray() as $k => $v) {\n        $heap->getArray()[$k]\
    \ = $v * -1;\n    }\n    return $heap->getArray();\n}\nclass Heap {\n    private\
    \ $array;\n    private $size;\n    public function __construct($arr) {\n     \
    \   $this->array = $arr;\n        $this->size = count($arr);\n        $this->buildHeap();\n\
    \    }\n    public function getArray() {\n        return $this->array;\n    }\n\
    \    public function top() {\n        return $this->array[0];\n    }\n    public\
    \ function buildHeap() {\n        for ($i = floor($this->size / 2); $i >= 0; $i--)\
    \ {\n            $this->heapify($i);\n        }\n    }\n    public function heapify($i)\
    \ {\n        $l = $this->left($i);\n        $r = $this->right($i);\n        $largest\
    \ = $i;\n        if ($l < $this->size && $this->array[$l] > $this->array[$i])\
    \ {\n            $largest = $l;\n        }\n        if ($r < $this->size && $this->array[$r]\
    \ > $this->array[$largest]) {\n            $largest = $r;\n        }\n       \
    \ if ($largest != $i) {\n            $this->swap($i\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpic2pgdcx.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if(count($arr) == 0 || $k == 0) return [];\n    sort($arr);\n   \
    \ return array_slice($arr, count($arr) - $k);\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nvar_dump(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nvar_dump(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $i = 0;\n    while ($i < $k) {\n        $result[]\
    \ = getMax($arr);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getMax() in /tmp/tmpqmeff_dr.php:21\n\
    Stack trace:\n#0 /tmp/tmpqmeff_dr.php(28): maximum(Array, 3)\n#1 /tmp/tmpqmeff_dr.php(32):\
    \ candidate(Array, 3)\n#2 /tmp/tmpqmeff_dr.php(45): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpqmeff_dr.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // // O(NlogK)\n    // $heap = new SplMaxHeap();\n    // foreach\
    \ ($arr as $val) {\n    //     $heap->insert($val);\n    //     if ($heap->count()\
    \ > $k) {\n    //         $heap->extract();\n    //     }\n    // }\n    // return\
    \ iterator_to_array($heap);\n\n    // O(N)\n    $output = [];\n    foreach ($arr\
    \ as $val) {\n        while (count($output) > 0 && $output[0] < $val && count($output)\
    \ + count($arr) - $k >= 0) {\n            array_shift($output);\n        }\n \
    \       if (count($output) < $k) {\n            array_unshift($output, $val);\n\
    \        }\n    }\n    return $output;\n}\nprint_r(maximum([-3, -4, 5], 3));\n\
    print_r(maximum([4, -4, 4], 2));\nprint_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n)\nArray\n\
    (\n    [0] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7o24o67v.php:48\n\
    Stack trace:\n#0 /tmp/tmp7o24o67v.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7o24o67v.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\tusort($arr, function($a, $b) { return ($a < $b) ? 1 : (($a > $b) ?\
    \ -1 : 0); });\n\treturn array_slice($arr, 0, $k);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx0jshqc.php:27\n\
    Stack trace:\n#0 /tmp/tmpvx0jshqc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvx0jshqc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $pq = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $pq->insert($arr[$i]);\n    }\n    for ($i = $k; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] > $pq->top()) {\n            $pq->extract();\n     \
    \       $pq->insert($arr[$i]);\n        }\n    }\n    $max = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max[] = $pq->extract();\n    }\n    return $max;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1thusych.php:48\nStack trace:\n#0 /tmp/tmp1thusych.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1thusych.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n\
    \    }\n\n    for ($i = 0; $i < $k; $i++) {\n        for ($j = $i + 1; $j < $len;\
    \ $j++) {\n            if ($arr[$i] < $arr[$j]) {\n                $t = $arr[$i];\n\
    \                $arr[$i] = $arr[$j];\n                $arr[$j] = $t;\n      \
    \      }\n        }\n    }\n\n    return array_slice($arr, 0, $k);\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k\
    \ = 1;\nvar_dump(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-3)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjc9_dg9k.php:52\n\
    Stack trace:\n#0 /tmp/tmpjc9_dg9k.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjc9_dg9k.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    $i = 0;\n    while($i < $k) {\n        $max[] = max($arr);\n\
    \        unset($arr[array_search(max($arr), $arr)]);\n        $i++;\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b9_77mm.php:33\n\
    Stack trace:\n#0 /tmp/tmp4b9_77mm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4b9_77mm.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // write your code here.\n    $n = count($arr);\n    $hash = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $hash[$arr[$i]] = $i;\n    }\n   \
    \ krsort($hash);\n    $count = 0;\n    $result = [];\n    foreach ($hash as $key\
    \ => $val) {\n        if ($count == $k) {\n            break;\n        }\n   \
    \     $result[] = $key;\n        $count++;\n    }\n    return $result;\n}\n\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwfvqfb6w.php:45\nStack trace:\n\
    #0 /tmp/tmpwfvqfb6w.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwfvqfb6w.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $stack = [];\n    for ($i = 0; $i < count($arr); $i++) {\n      \
    \  $cur = $arr[$i];\n        while (count($stack) && $cur > $stack[count($stack)\
    \ - 1] && count($stack) + count($arr) - $i > $k) {\n            array_pop($stack);\n\
    \        }\n        if (count($stack) < $k) {\n            array_push($stack,\
    \ $cur);\n        }\n    }\n    return $stack;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    echo json_encode(maximum($arr, $k)) . PHP_EOL;\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    echo json_encode(maximum($arr, $k)) . PHP_EOL;\n\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\necho json_encode(maximum($arr, $k)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[-3,-4,5]\n[4,4]\n[2]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7ey87b6x.php:46\nStack trace:\n#0 /tmp/tmp7ey87b6x.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7ey87b6x.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if(count($arr) < 1) {\n        return [];\n    }\n    $res = [];\n\
    \    for($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxI = 0;\n\
    \        for($j = 0; $j < count($arr); $j++) {\n            if($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxI = $j;\n         \
    \   }\n        }\n        $res[] = $max;\n        array_splice($arr, $maxI, 1);\n\
    \    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f_4dud.php:41\n\
    Stack trace:\n#0 /tmp/tmpr4f_4dud.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr4f_4dud.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$n = count($arr);\n\tif($n <= $k) return $arr;\n\t$res = [];\n\t$left\
    \ = 0;\n\t$right = $n-1;\n\tfor($i=0; $i<$k; $i++) {\n\t\t$val = $arr[$left];\n\
    \t\tfor($j=$left+1; $j<=$right; $j++) {\n\t\t\tif($arr[$j] > $val) {\n\t\t\t\t\
    $val = $arr[$j];\n\t\t\t}\n\t\t}\n\t\t$res[] = $val;\n\t\t$left++;\n\t\t$right--;\n\
    \t}\n\treturn $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi1zn8u5j.php:53\nStack trace:\n#0 /tmp/tmpi1zn8u5j.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi1zn8u5j.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    usort($arr, function($a, $b) {\n        return $a < $b;\n    });\n\
    \    return array_slice($arr, 0, $k);\n}\nfunction candidate(...$args) {\n   \
    \ return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjt23q0c7.php:28\n\
    Stack trace:\n#0 /tmp/tmpjt23q0c7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjt23q0c7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    if ($k <= 0) {\n        return $result;\n    }\n\
    \    if ($k >= count($arr)) {\n        return $arr;\n    }\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $j = 0;\n        while ($j < count($arr)) {\n       \
    \     if (empty($result) || $arr[$j] > end($result)) {\n                $result[]\
    \ = $arr[$j];\n            }\n            $j++;\n        }\n        array_pop($result);\n\
    \    }\n    rsort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\n$r = maximum($arr, $k);\nvar_dump($r);\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-3)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(5)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72lvgjgl.php:48\n\
    Stack trace:\n#0 /tmp/tmp72lvgjgl.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp72lvgjgl.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = array();\n    foreach ($arr as $num) {\n        while (count($result)\
    \ > 0 && $result[count($result) - 1] < $num && count($result) + count($arr) -\
    \ $k > 0) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            array_push($result, $num);\n        }\n    }\n    return\
    \ $result;\n}\necho implode(', ', maximum([-3, -4, 5], 3)) . PHP_EOL;\necho implode(',\
    \ ', maximum([4, -4, 4], 2)) . PHP_EOL;\necho implode(', ', maximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)) . PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "5\n4, 4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8t312pc.php:37\n\
    Stack trace:\n#0 /tmp/tmpm8t312pc.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpm8t312pc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == $k) {\n        return $arr;\n  \
    \  }\n    $list = [];\n    for ($i = 0; $i < $n; $i++) {\n        if (count($list)\
    \ < $k) {\n            $list[] = $arr[$i];\n        } else {\n            sort($list);\n\
    \            $minimum = $list[0];\n            if ($arr[$i] > $minimum) {\n  \
    \              $list[0] = $arr[$i];\n            }\n        }\n    }\n    sort($list);\n\
    \    return $list;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\n\
    print_r($result);\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k\
    \ = 1;\n$result = maximum($arr, $k);\nprint_r($result);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpv0mso981.php:57\nStack trace:\n#0 /tmp/tmpv0mso981.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv0mso981.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // sorting O(nlogn)\n    sort($arr);\n    // get the first k elements\
    \ O(n)\n    return array_slice($arr, count($arr) - $k);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    $maxArr = [];\n    if($count == 0 || $k\
    \ <= 0) return $maxArr;\n    if($k >= $count) {\n        sort($arr);\n       \
    \ return $arr;\n    }\n    for($i = 0; $i < $k; $i++) {\n        array_push($maxArr,\
    \ $arr[$i]);\n    }\n    $i = $k;\n    while($i < $count) {\n        sort($maxArr);\n\
    \        if($arr[$i] > $maxArr[0]) {\n            array_shift($maxArr);\n    \
    \        array_push($maxArr, $arr[$i]);\n        }\n        $i++;\n    }\n   \
    \ sort($maxArr);\n    return $maxArr;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Sort $arr descending\n    usort($arr, function($a, $b) {\n   \
    \     return $b - $a;\n    });\n    // Slice the $arr to length of $k\n    return\
    \ array_slice($arr, 0, $k);\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fee7ixt.php:31\n\
    Stack trace:\n#0 /tmp/tmp9fee7ixt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9fee7ixt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $l = count($arr);\n    for ($i = $l - 1; $i >= $l - $k; $i--) {\n\
    \        for ($j = 0; $j < $i; $j++) {\n            if ($arr[$j] > $arr[$j + 1])\
    \ {\n                $temp = $arr[$j];\n                $arr[$j] = $arr[$j + 1];\n\
    \                $arr[$j + 1] = $temp;\n            }\n        }\n    }\n    return\
    \ array_slice($arr, $l - $k);\n}\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = 0;\n    $count = count($arr);\n    if\
    \ ($count === 0) {\n        return [];\n    }\n    if ($count < $k) {\n      \
    \  sort($arr);\n        return $arr;\n    }\n    $len = $count - $k;\n    for\
    \ ($i = $count - 1; $i >= $len; $i--) {\n        array_push($result, $arr[$i]);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9iyv0tc.php:39\n\
    Stack trace:\n#0 /tmp/tmpg9iyv0tc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpg9iyv0tc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // // Time: O(n^2) - Space: O(n)\n    // $max = [];\n    // $len\
    \ = count($arr);\n    // for ($i = 0; $i < $k; $i++) {\n    //     $max_index\
    \ = 0;\n    //     for ($j = 1; $j < $len - $i; $j++) {\n    //         if ($arr[$j]\
    \ > $arr[$max_index]) {\n    //             $max_index = $j;\n    //         }\n\
    \    //     }\n    //     $max[] = $arr[$max_index];\n    //     array_splice($arr,\
    \ $max_index, 1);\n    // }\n    // return $max;\n\n    // Time: O(n*logk) - Space:\
    \ O(k)\n    $max = new SplMaxHeap();\n    foreach ($arr as $el) {\n        $max->insert($el);\n\
    \        if ($max->count() > $k) {\n            $max->extract();\n        }\n\
    \    }\n    return iterator_to_array($max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdc0l7k42.php:49\n\
    Stack trace:\n#0 /tmp/tmpdc0l7k42.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpdc0l7k42.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k === 0) {\n        return [];\n    }\n    $n = count($arr);\n\
    \    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $j_max = 0;\n        for ($j = 0; $j < $n; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $j_max = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$j_max] = -1001;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwde_7u9.php:42\n\
    Stack trace:\n#0 /tmp/tmpfwde_7u9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfwde_7u9.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$len = count($arr);\n\t$ans = array();\n\tif ($len <= $k) return $arr;\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$pos = 0;\n\t\tfor ($j = 0; $j < $len - $i;\
    \ $j++) {\n\t\t\tif ($arr[$j] > $arr[$pos]) {\n\t\t\t\t$pos = $j;\n\t\t\t}\n\t\
    \t}\n\t\t$ans[] = $arr[$pos];\n\t\tarray_splice($arr, $pos, 1);\n\t}\n\treturn\
    \ $ans;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5q19ruxn.php:50\nStack trace:\n#0 /tmp/tmp5q19ruxn.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5q19ruxn.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len < 1 || $k < 1 || $k > $len) {\n\
    \        return null;\n    }\n    $result = array_fill(0, $k, null);\n    $i =\
    \ 0;\n    while ($i < $k) {\n        $index = $i;\n        for ($j = $i + 1; $j\
    \ < $len; $j++) {\n            if ($arr[$j] > $arr[$index]) {\n              \
    \  $index = $j;\n            }\n        }\n        $result[$i] = $arr[$index];\n\
    \        $i++;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n)\n\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpb_oljx66.php:56\nStack trace:\n#0 /tmp/tmpb_oljx66.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb_oljx66.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    $res = [];\n    for ($i=count($arr)-1; $i>=count($arr)-$k;\
    \ $i--) {\n        $res[] = $arr[$i];\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmr65u42.php:30\n\
    Stack trace:\n#0 /tmp/tmpbmr65u42.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbmr65u42.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $i = 0;\n    $j = count($arr) - 1;\n    $newArr = array();\n    for($count\
    \ = 0; $count < $k; $count++){\n        $newArr[] = $arr[$i++];\n        $newArr[]\
    \ = $arr[$j--];\n    }\n    sort($newArr);\n    return array_slice($newArr, 0,\
    \ $k);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4,\
    \ -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -4\n    [2] => -3\n)\nArray\n(\n  \
    \  [0] => -4\n    [1] => -4\n)\nArray\n(\n    [0] => -3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpt3f7wdqi.php:42\nStack trace:\n#0 /tmp/tmpt3f7wdqi.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt3f7wdqi.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $heap = new SplMinHeap();\n    foreach ($arr as $value) {\n     \
    \   $heap->insert($value);\n        if ($heap->count() > $k) {\n            $heap->extract();\n\
    \        }\n    }\n    return iterator_to_array($heap);\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [2] => -4\n    [1] => -3\n    [0] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjyydvzy7.php:35\nStack trace:\n\
    #0 /tmp/tmpjyydvzy7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjyydvzy7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    return array_slice($arr, -$k);\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6dlpvr2q.php:39\nStack trace:\n\
    #0 /tmp/tmp6dlpvr2q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6dlpvr2q.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Sort array\n    sort($arr);\n    // Get max k numbers\n    $result\
    \ = array_slice($arr, -$k);\n    // Sort result\n    sort($result);\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77sulggd.php:41\n\
    Stack trace:\n#0 /tmp/tmp77sulggd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp77sulggd.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $maxNum\
    \ = null;\n        $maxIdx = null;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($maxNum === null || $arr[$j] > $maxNum) {\n             \
    \   $maxNum = $arr[$j];\n                $maxIdx = $j;\n            }\n      \
    \  }\n        array_push($result, $maxNum);\n        array_splice($arr, $maxIdx,\
    \ 1);\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzt8b_sk1.php:41\nStack trace:\n\
    #0 /tmp/tmpzt8b_sk1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzt8b_sk1.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$i] < $arr[$j])\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    $res\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n\
    \    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7wk9gpyh.php:42\nStack trace:\n\
    #0 /tmp/tmp7wk9gpyh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7wk9gpyh.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // max heap.\n    $hp = new SplMaxHeap();\n    foreach ($arr as $n)\
    \ {\n        if ($hp->count() == $k) {\n            if ($n > $hp->top()) {\n \
    \               $hp->extract();\n                $hp->insert($n);\n          \
    \  }\n        } else {\n            $hp->insert($n);\n        }\n    }\n    return\
    \ iterator_to_array($hp);\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [2] => 5\n    [1] => -3\n    [0] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpsfp6zz9q.php:41\nStack trace:\n\
    #0 /tmp/tmpsfp6zz9q.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsfp6zz9q.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $bucket = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $tmp = $arr[$i];\n        if (empty($bucket[$tmp])) {\n   \
    \         $bucket[$tmp] = 1;\n        } else {\n            $bucket[$tmp]++;\n\
    \        }\n    }\n    $result = [];\n    krsort($bucket);\n    foreach ($bucket\
    \ as $key => $value) {\n        for ($i = 0; $i < $value; $i++) {\n          \
    \  $result[] = $key;\n        }\n    }\n    return array_slice($result, 0, $k);\n\
    }\n$arr = [-3, -4, 5];\nprint_r(maximum($arr, 3));\n$arr = [4, -4, 4];\nprint_r(maximum($arr,\
    \ 2));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\nprint_r(maximum($arr, 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkinfydie.php:48\nStack trace:\n#0 /tmp/tmpkinfydie.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkinfydie.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $queue = new SplPriorityQueue();\n    foreach ($arr as $n) {\n  \
    \      $queue->insert($n, $n);\n        if ($queue->count() > $k) {\n        \
    \    $queue->extract();\n        }\n    }\n    $ret = [];\n    while (!$queue->isEmpty())\
    \ {\n        $ret[] = $queue->extract();\n    }\n    return array_reverse($ret);\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\n$ret = maximum($arr, $k);\nvar_dump($ret);\n\
    $arr = [4, -4, 4];\n$k = 2;\n$ret = maximum($arr, $k);\nvar_dump($ret);\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$ret = maximum($arr, $k);\nvar_dump($ret);\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(-3)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lqkxntx.php:49\n\
    Stack trace:\n#0 /tmp/tmp3lqkxntx.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3lqkxntx.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $i = 0;\n    $j = count($arr)-1;\n    $cnt = 0;\n\
    \    while ($cnt < $k) {\n        if ($arr[$i] < $arr[$j]) {\n            $result[]\
    \ = $arr[$j];\n            $j--;\n        } else {\n            $result[] = $arr[$i];\n\
    \            $i++;\n        }\n        $cnt++;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuofs4fxt.php:40\n\
    Stack trace:\n#0 /tmp/tmpuofs4fxt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpuofs4fxt.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) < $k) {\n        return [];\n    }\n\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n\
    \            if ($arr[$i] < $arr[$j]) {\n                $tmp = $arr[$i];\n  \
    \              $arr[$i] = $arr[$j];\n                $arr[$j] = $tmp;\n      \
    \      }\n        }\n    }\n\n    return array_slice($arr, 0, $k);\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vos519l.php:40\n\
    Stack trace:\n#0 /tmp/tmp3vos519l.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3vos519l.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k <= 0) {\n        return [];\n    }\n    if ($k > count($arr))\
    \ {\n        return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = max($arr);\n        array_push($result, $max);\n   \
    \     array_splice($arr, array_search($max, $arr), 1);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkpiydsr.php:37\n\
    Stack trace:\n#0 /tmp/tmpdkpiydsr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdkpiydsr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    $result = array();\n    if ($k == 0)\
    \ {\n        return $result;\n    }\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (count($result) < $k) {\n            $result[] = $arr[$i];\n     \
    \   } else {\n            $index = getMinIndex($result);\n            if ($result[$index]\
    \ < $arr[$i]) {\n                $result[$index] = $arr[$i];\n            }\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdgjlbal.php:40\n\
    Stack trace:\n#0 /tmp/tmpfdgjlbal.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfdgjlbal.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // max heap\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n\
    \    foreach ($arr as $val) {\n        $heap->insert($val);\n    }\n    $ret =\
    \ [];\n    for ($i = 0; $i < $k; $i++) {\n        $ret[] = $heap->extract();\n\
    \    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd_f1_67.php:35\n\
    Stack trace:\n#0 /tmp/tmpcd_f1_67.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcd_f1_67.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n     \
    \   $p = partition($arr, $i, $j);\n        if ($p == $k - 1) {\n            break;\n\
    \        } else if ($p < $k - 1) {\n            $i = $p + 1;\n        } else {\n\
    \            $j = $p - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmprr0ot9pk.php:21\nStack trace:\n#0 /tmp/tmprr0ot9pk.php(33): maximum(Array,\
    \ 3)\n#1 /tmp/tmprr0ot9pk.php(37): candidate(Array, 3)\n#2 /tmp/tmprr0ot9pk.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprr0ot9pk.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = array();\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if\
    \ ($arr[$i] > $arr[$j]) {\n                $temp = $arr[$i];\n               \
    \ $arr[$i] = $arr[$j];\n                $arr[$j] = $temp;\n            }\n   \
    \     }\n        if ($count < $k) {\n            $result[] = $arr[$i];\n     \
    \       $count++;\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi2r4k2i2.php:45\nStack trace:\n\
    #0 /tmp/tmpi2r4k2i2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi2r4k2i2.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n < $k) {\n        return $arr;\n   \
    \ }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] =\
    \ $arr[$i];\n    }\n    $result = heap_sort($result);\n    for ($i = $k; $i <\
    \ $n; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0] =\
    \ $arr[$i];\n            $result = heap_sort($result);\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heap_sort() in\
    \ /tmp/tmp9v3itutz.php:26\nStack trace:\n#0 /tmp/tmp9v3itutz.php(37): maximum(Array,\
    \ 3)\n#1 /tmp/tmp9v3itutz.php(41): candidate(Array, 3)\n#2 /tmp/tmp9v3itutz.php(54):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp9v3itutz.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $arr_length = count($arr);\n    if ($arr_length\
    \ < $k) {\n        return $result;\n    }\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($result as $n) {\n        $heap->insert($n);\n    }\n    for ($i = $k; $i <\
    \ $arr_length; $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return $heap->toArray();\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\necho var_export(maximum($arr, $k)), PHP_EOL;\n\
    $arr = [4, -4, 4];\n$k = 2;\necho var_export(maximum($arr, $k)), PHP_EOL;\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho var_export(maximum($arr, $k)), PHP_EOL;\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined method SplMaxHeap::toArray()\
    \ in /tmp/tmpqakw9xqq.php:36\nStack trace:\n#0 /tmp/tmpqakw9xqq.php(40): maximum(Array,\
    \ 3)\n#1 {main}\n  thrown in /tmp/tmpqakw9xqq.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $result = [];\n    if ($k > $n) {\n      \
    \  return $result;\n    }\n    $begin = 0;\n    $end = $n - 1;\n    while ($begin\
    \ <= $end) {\n        $mid = ($begin + $end) / 2;\n        if ($arr[$mid] < 0)\
    \ {\n            $begin = $mid + 1;\n        } else {\n            $end = $mid\
    \ - 1;\n        }\n    }\n    $i = $begin;\n    $j = $end;\n    while ($k > 0)\
    \ {\n        if ($i >= $n) {\n            $result[] = $arr[$j];\n            $j--;\n\
    \        } else if ($j < 0) {\n            $result[] = $arr[$i];\n           \
    \ $i++;\n        } else if (abs($arr[$i]) < abs($arr[$j])) {\n            $result[]\
    \ = $arr[$j];\n            $j--;\n        } else {\n            $result[] = $arr[$i];\n\
    \            $i++;\n        }\n        $k--;\n    }\n    return $result;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n    [2] => -3\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => -3\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfqztxkbs.php:70\nStack trace:\n\
    #0 /tmp/tmpfqztxkbs.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpfqztxkbs.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $size = count($arr);\n    if ($size <= $k) {\n        rsort($arr);\n\
    \        return $arr;\n    }\n    $arr = quickSort($arr);\n    return array_slice($arr,\
    \ $size - $k);\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsol0hqw.php:32\n\
    Stack trace:\n#0 /tmp/tmprsol0hqw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprsol0hqw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $maxArr = array();\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -INF;\n        $index = -1;\n        for ($j =\
    \ 0; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $index = $j;\n            }\n        }\n      \
    \  $maxArr[] = $max;\n        $arr[$index] = -INF;\n    }\n    sort($maxArr);\n\
    \    return $maxArr;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $q = new SplMaxHeap();\n    $q->setExtractFlags(SplHeap::EXTR_BOTH);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($q->count() < $k) {\n      \
    \      $q->insert($arr[$i]);\n        } elseif ($arr[$i] > $q->top()) {\n    \
    \        $q->extract();\n            $q->insert($arr[$i]);\n        }\n    }\n\
    \    $res = [];\n    while (!$q->isEmpty()) {\n        $res[] = $q->extract();\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined method SplMaxHeap::setExtractFlags()\
    \ in /tmp/tmpgf20wqcq.php:20\nStack trace:\n#0 /tmp/tmpgf20wqcq.php(38): maximum(Array,\
    \ 3)\n#1 {main}\n  thrown in /tmp/tmpgf20wqcq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $maxHeap = new \\Ds\\PriorityQueue();\n    foreach ($arr as $v) {\n\
    \        $maxHeap->push($v);\n        if ($maxHeap->count() > $k) $maxHeap->pop();\n\
    \    }\n    return $maxHeap->toArray();\n}\nfunction candidate(...$args) {\n \
    \   return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'Ds\\PriorityQueue' not found in /tmp/tmp_v4eutf6.php:18\n\
    Stack trace:\n#0 /tmp/tmp_v4eutf6.php(26): maximum(Array, 3)\n#1 /tmp/tmp_v4eutf6.php(30):\
    \ candidate(Array, 3)\n#2 /tmp/tmp_v4eutf6.php(43): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp_v4eutf6.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    rsort($arr);\n    $arr = array_slice($arr, 0, $k);\n    sort($arr);\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Find the $k largest numbers in O(n)\n    // T = O(n), S = O(n)\n\
    \    // $heap = new SplHeap();\n    // foreach ($arr as $item) {\n    //     $heap->insert($item);\n\
    \    //     if ($heap->count() > $k) {\n    //         $heap->extract();\n   \
    \ //     }\n    // }\n    // $res = [];\n    // while (!$heap->isEmpty()) {\n\
    \    //     $res[] = $heap->extract();\n    // }\n    // return array_reverse($res);\n\
    \n    // Find the $k largest numbers in O(n + klogn)\n    // T = O(n + klogn),\
    \ S = O(1)\n    $pos = partition($arr);\n    $count = count($arr);\n    if ($pos\
    \ === $k - 1) {\n        return array_slice($arr, 0, $k);\n    } else if ($pos\
    \ > $k - 1) {\n        return maximum(array_slice($arr, 0, $pos), $k);\n    }\
    \ else {\n        return array_merge(array_slice($arr, 0, $pos + 1), maximum(array_slice($arr,\
    \ $pos + 1), $k - $pos - 1));\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpkt2tjio9.php:35\nStack trace:\n#0 /tmp/tmpkt2tjio9.php(47): maximum(Array,\
    \ 3)\n#1 /tmp/tmpkt2tjio9.php(51): candidate(Array, 3)\n#2 /tmp/tmpkt2tjio9.php(64):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkt2tjio9.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k == 1) {\n        return [max($arr)];\n    }\n    $len = count($arr);\n\
    \    if ($k >= $len) {\n        return $arr;\n    }\n    $res = array_slice($arr,\
    \ 0, $k);\n    sort($res);\n    for ($i = $k; $i < $len; $i++) {\n        $last\
    \ = count($res) - 1;\n        if ($arr[$i] > $res[$last]) {\n            $j =\
    \ $last;\n            while ($j >= 0 && $arr[$i] > $res[$j]) {\n             \
    \   $res[$j + 1] = $res[$j];\n                $j--;\n            }\n         \
    \   $res[$j + 1] = $arr[$i];\n        }\n    }\n    return $res;\n}\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\n$res = maximum($arr, $k);\nvar_dump($res);\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\n$res = maximum($arr, $k);\nvar_dump($res);\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\n$res = maximum($arr, $k);\nvar_dump($res);\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-3)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7hudqp9.php:59\n\
    Stack trace:\n#0 /tmp/tmpo7hudqp9.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpo7hudqp9.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == $k) return $arr;\n    sort($arr);\n    $output\
    \ = [];\n    for ($i = count($arr) - 1; $i >= 0; $i--) {\n        $output[] =\
    \ $arr[$i];\n        if (count($output) == $k) return $output;\n    }\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\necho implode(', ', maximum($arr, $k)) . PHP_EOL;\n\
    $arr = [4, -4, 4];\n$k = 2;\necho implode(', ', maximum($arr, $k)) . PHP_EOL;\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho implode(', ', maximum($arr, $k))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "-3, -4, 5\n4, 4\n2\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpj_4cpp27.php:40\nStack trace:\n#0 /tmp/tmpj_4cpp27.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj_4cpp27.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\tif(count($arr) < $k) return $arr;\n\t$maxes = [];\n\tfor($i = 0; $i\
    \ < $k; $i++) {\n\t\t$maxIndex = -1;\n\t\tfor($j = 0; $j < count($arr); $j++)\
    \ {\n\t\t\tif($maxIndex == -1 || $arr[$j] > $arr[$maxIndex]) {\n\t\t\t\t$maxIndex\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$maxes[] = $arr[$maxIndex];\n\t\tunset($arr[$maxIndex]);\n\
    \t\t$arr = array_values($arr);\n\t}\n\treturn $maxes;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\necho \"[\";\nfor($i = 0; $i < count($arr); $i++) {\n\techo $arr[$i];\n\
    \tif($i < count($arr) - 1) echo \", \";\n}\necho \"]\";\necho \"\\n\";\necho $k;\n\
    echo \"\\n\";\n$ans = maximum($arr, $k);\necho \"[\";\nfor($i = 0; $i < count($ans);\
    \ $i++) {\n\techo $ans[$i];\n\tif($i < count($ans) - 1) echo \", \";\n}\necho\
    \ \"]\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[-3, -4, 5]\n3\n[5, -3, -4]\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpg2zri732.php:57\nStack trace:\n#0 /tmp/tmpg2zri732.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmpg2zri732.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    array_reverse($arr);\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xuewmb9.php:32\n\
    Stack trace:\n#0 /tmp/tmp6xuewmb9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6xuewmb9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    $n = count($arr);\n    if ($k > $n) {\n        $res\
    \ = array_slice($arr, $n - $k);\n    } else {\n        $res = array_slice($arr,\
    \ $n - $k, $k);\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) < $k) return \"k is bigger than array length\";\n\
    \    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max_idx = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $arr[$max_idx])\
    \ {\n                $max_idx = $j;\n            }\n        }\n        $result[]\
    \ = $arr[$max_idx];\n        unset($arr[$max_idx]);\n        $arr = array_values($arr);\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\necho json_encode(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[5,-3,-4]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvwwsh0_.php:41\n\
    Stack trace:\n#0 /tmp/tmpsvwwsh0_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsvwwsh0_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) > 0 && count($res) + count($arr) - $i > $k && $res[count($res)\
    \ - 1] < $arr[$i]) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp687v1954.php:37\nStack trace:\n\
    #0 /tmp/tmp687v1954.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp687v1954.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if ($k > $length) {\n        return -1;\n\
    \    }\n    for ($i = 0; $i < $k; $i++) {\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            if ($arr[$i] < $arr[$j]) {\n                $tmp = $arr[$i];\n\
    \                $arr[$i] = $arr[$j];\n                $arr[$j] = $tmp;\n    \
    \        }\n        }\n    }\n    return array_slice($arr, 0, $k);\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = [4,\
    \ -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = [-3, 2,\
    \ 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n<br>Array\n(\n\
    \    [0] => 4\n    [1] => 4\n)\n<br>Array\n(\n    [0] => 2\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpe8fp67pd.php:50\nStack trace:\n\
    #0 /tmp/tmpe8fp67pd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpe8fp67pd.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // a negative number will be put into the negative stack \n    //\
    \ and a positive number will be put into the positive stack.\n    // The negative\
    \ stack stores the numbers in an increasing order.\n    // The positive stack\
    \ stores the numbers in a decreasing order.\n    $negative = new SplStack();\n\
    \    $positive = new SplStack();\n    foreach ($arr as $value) {\n        if ($value\
    \ >= 0) {\n            if ($positive->count() < $k) {\n                $positive->push($value);\n\
    \            } elseif ($positive->top() < $value) {\n                $positive->pop();\n\
    \                $positive->push($value);\n            }\n        } else {\n \
    \           if ($negative->count() < $k) {\n                $negative->push($value);\n\
    \            } elseif ($negative->top() > $value) {\n                $negative->pop();\n\
    \                $negative->push($value);\n            }\n        }\n    }\n \
    \   $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        if ($negative->isEmpty())\
    \ {\n            $result[] = $positive->pop();\n        } elseif ($positive->isEmpty())\
    \ {\n            $result[] = $negative->pop();\n        } elseif ($negative->top()\
    \ > $positive->top()) {\n            $result[] = $negative->pop();\n        }\
    \ else {\n            $result[] = $positive->pop();\n        }\n    }\n    return\
    \ array_reverse($result);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8el748y9.php:63\nStack trace:\n\
    #0 /tmp/tmp8el748y9.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp8el748y9.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $size = count($arr);\n    if ($size == 0 || $k > $size) {\n     \
    \   return [];\n    }\n    $minHeap = new MinHeap();\n    foreach ($arr as $num)\
    \ {\n        $minHeap->insert($num);\n        if ($minHeap->size() > $k) {\n \
    \           $minHeap->extractMin();\n        }\n    }\n    $output = [];\n   \
    \ while ($minHeap->size() > 0) {\n        $output[] = $minHeap->extractMin();\n\
    \    }\n    return array_reverse($output);\n}\nclass MinHeap {\n    private $data;\n\
    \    private $size;\n    public function __construct() {\n        $this->data\
    \ = [];\n        $this->size = 0;\n    }\n    public function insert($value) {\n\
    \        $this->data[$this->size] = $value;\n        $this->siftUp($this->size);\n\
    \        $this->size++;\n    }\n    public function extractMin() {\n        $min\
    \ = $this->data[0];\n        $this->size--;\n        $this->data[0] = $this->data[$this->size];\n\
    \        $this->siftDown(0);\n        return $min;\n    }\n    public function\
    \ size() {\n        return $this->size;\n    }\n    private function siftUp($index)\
    \ {\n        while ($index > 0) {\n            $parent = ($index - 1) / 2;\n \
    \           if ($this->data[$parent] > $this->data[$index]) {\n              \
    \  $this->swap($parent, $index);\n                $index = $parent;\n        \
    \    } else {\n                break;\n            }\n        }\n    }\n    private\
    \ function siftDown($index) {\n        $size = $this->size;\n        while ($index\
    \ < $size) {\n            $left = 2 * $index + 1;\n            $right = 2 * $index\
    \ + 2;\n            $smallest = $index;\n            if ($left < $size && $this->data[$left]\
    \ < $this->data[$smallest]) {\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9g984gg6.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if(count($arr)<$k) return;\n    $result=[];\n    for($i=0;$i<$k;$i++){\n\
    \        $temp=max($arr);\n        $result[]=$temp;\n        $temp_i=array_search($temp,$arr);\n\
    \        unset($arr[$temp_i]);\n    }\n    return $result;\n}\n\n$a=[4, -4, 4];\n\
    $r=maximum($a, 2);\necho implode(\",\",$r).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4,4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbmgjp03.php:37\n\
    Stack trace:\n#0 /tmp/tmpfbmgjp03.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfbmgjp03.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // sort($arr);\n    // return array_slice($arr, 0 - $k);\n    $sort\
    \ = [];\n    foreach ($arr as $v) {\n        $sort[$v] = $v;\n    }\n    krsort($sort);\n\
    \    return array_slice($sort, 0, $k);\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqjm_kmfp.php:36\nStack trace:\n\
    #0 /tmp/tmpqjm_kmfp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqjm_kmfp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $queue = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $queue->insert($arr[$i]);\n    }\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $queue->top()) {\n            $queue->extract();\n\
    \            $queue->insert($arr[$i]);\n        }\n    }\n    $result = [];\n\
    \    while (!$queue->isEmpty()) {\n        $result[] = $queue->extract();\n  \
    \  }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3sjh6fsk.php:51\nStack trace:\n\
    #0 /tmp/tmp3sjh6fsk.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp3sjh6fsk.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k == 0) return [];\n    $r = [];\n    $index = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        for ($j = $i; $j <\
    \ count($arr); $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $index = $j;\n            }\n        }\n      \
    \  $r[] = $max;\n        $t = $arr[$i];\n        $arr[$i] = $max;\n        $arr[$index]\
    \ = $t;\n    }\n    return $r;\n}\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lna272x.php:41\n\
    Stack trace:\n#0 /tmp/tmp0lna272x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0lna272x.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == $k) {\n        sort($arr);\n        return $arr;\n\
    \    }\n    $minHeap = new SplMinHeap();\n    $i = 0;\n    while ($i < $k) {\n\
    \        $minHeap->insert($arr[$i]);\n        $i++;\n    }\n    while ($i < count($arr))\
    \ {\n        if ($arr[$i] > $minHeap->top()) {\n            $minHeap->extract();\n\
    \            $minHeap->insert($arr[$i]);\n        }\n        $i++;\n    }\n  \
    \  $output = [];\n    while (!$minHeap->isEmpty()) {\n        $output[] = $minHeap->extract();\n\
    \    }\n    return $output;\n}\nprint_r(maximum([-3, -4, 5], 3) . PHP_EOL);\n\
    print_r(maximum([4, -4, 4], 2) . PHP_EOL);\nprint_r(maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) . PHP_EOL);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\n\nFatal error: Uncaught RuntimeException: Can't peek\
    \ at an empty heap in /tmp/tmp4oh58vv6.php:29\nStack trace:\n#0 /tmp/tmp4oh58vv6.php(29):\
    \ SplHeap->top()\n#1 /tmp/tmp4oh58vv6.php(45): maximum(Array, 0)\n#2 /tmp/tmp4oh58vv6.php(59):\
    \ candidate(Array, 0)\n#3 /tmp/tmp4oh58vv6.php(62): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp4oh58vv6.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n < $k) return [];\n    for ($i = ($n\
    \ - $k); $i >= 0; $i--) {\n        $maxIndex = $i;\n        for ($j = $i + 1;\
    \ $j < $n - $k + 1; $j++) {\n            if ($arr[$j] > $arr[$maxIndex]) {\n \
    \               $maxIndex = $j;\n            }\n        }\n        [$arr[$i],\
    \ $arr[$maxIndex]] = [$arr[$maxIndex], $arr[$i]];\n    }\n    return array_slice($arr,\
    \ 0, $k);\n}\n\n$testCases = [\n    ['arr' => [-3, -4, 5], 'k' => 3, 'expected'\
    \ => [-4, -3, 5]],\n    ['arr' => [4, -4, 4], 'k' => 2, 'expected' => [4, 4]],\n\
    \    ['arr' => [-3, 2, 1, 2, -1, -2, 1], 'k' => 1, 'expected' => [2]],\n];\n\n\
    $solution = function ($arr, $k) {\n    $len = count($arr);\n    if ($len < $k)\
    \ return [];\n    for ($i = 0; $i < $k; $i++) {\n        $maxIndex = $i;\n   \
    \     for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $arr[$maxIndex])\
    \ {\n                $maxIndex = $j;\n            }\n        }\n        [$arr[$i],\
    \ $arr[$maxIndex]] = [$arr[$maxIndex], $arr[$i]];\n    }\n    return array_slice($arr,\
    \ 0, $k);\n};\n\nforeach ($testCases as $testCase) {\n    extract($testCase);\n\
    \    $result = $solution($arr, $k);\n    if ($result === $expected) {\n      \
    \  echo \"\u2705 {$arr} {$k}<br>\";\n    } else {\n        echo \"\U0001F534\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv8r6j69l.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $bucket = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   $bucket[$arr[$i]] = isset($bucket[$arr[$i]]) ? $bucket[$arr[$i]] + 1 : 1;\n\
    \    }\n    krsort($bucket);\n    $result = [];\n    $count = 0;\n    foreach\
    \ ($bucket as $key => $value) {\n        for ($i = 0; $i < $value; $i++) {\n \
    \           $result[] = $key;\n            $count++;\n            if ($count >=\
    \ $k) {\n                return $result;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpylw2htnw.php:45\nStack trace:\n\
    #0 /tmp/tmpylw2htnw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpylw2htnw.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k === 0) {\n        return [];\n    }\n    $count = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $count; $i++) {\n        while ($count\
    \ - $i > $k - count($res) && count($res) > 0 && $res[count($res) - 1] < $arr[$i])\
    \ {\n            array_pop($res);\n        }\n        if (count($res) < $k) {\n\
    \            $res[] = $arr[$i];\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\necho implode(',', maximum($arr, $k)) . PHP_EOL;\n\n\
    $arr = [4, -4, 4];\n$k = 2;\necho implode(',', maximum($arr, $k)) . PHP_EOL;\n\
    \n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho implode(',', maximum($arr, $k))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "-3,-4,5\n4,4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pa7qfsu.php:50\n\
    Stack trace:\n#0 /tmp/tmp2pa7qfsu.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2pa7qfsu.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = sort_array($arr);\n    $max_elements = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $max_elements[] = $arr[$i];\n    }\n    return\
    \ $max_elements;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmp89_juzyb.php:18\nStack trace:\n#0 /tmp/tmp89_juzyb.php(26): maximum(Array,\
    \ 3)\n#1 /tmp/tmp89_juzyb.php(30): candidate(Array, 3)\n#2 /tmp/tmp89_juzyb.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp89_juzyb.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $l = 0;\n    $r = count($arr) - 1;\n    while ($l <= $r) {\n    \
    \    $p = partition($arr, $l, $r);\n        if ($p == $k - 1) {\n            break;\n\
    \        } else if ($p < $k - 1) {\n            $l = $p + 1;\n        } else {\n\
    \            $r = $p - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpble5rr45.php:21\nStack trace:\n#0 /tmp/tmpble5rr45.php(33): maximum(Array,\
    \ 3)\n#1 /tmp/tmpble5rr45.php(37): candidate(Array, 3)\n#2 /tmp/tmpble5rr45.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpble5rr45.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $i = 0;\n    $j = count($arr) - 1;\n    $target = $j - $k + 1;\n\
    \    $target_pivot_pos = 0;\n    while($i <= $j) {\n        $pivot_pos = partition($arr,\
    \ $i, $j);\n        if ($pivot_pos == $target) {\n            $target_pivot_pos\
    \ = $pivot_pos;\n            break;\n        } else if ($pivot_pos < $target)\
    \ {\n            $i = $pivot_pos + 1;\n        } else {\n            $j = $pivot_pos\
    \ - 1;\n        }\n    }\n    $result = array_slice($arr, $target_pivot_pos, $k);\n\
    \    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpy53tyfb_.php:23\nStack trace:\n#0 /tmp/tmpy53tyfb_.php(39): maximum(Array,\
    \ 3)\n#1 /tmp/tmpy53tyfb_.php(43): candidate(Array, 3)\n#2 /tmp/tmpy53tyfb_.php(56):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpy53tyfb_.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k === 0) {\n        return [];\n    }\n    $pq = new SplPriorityQueue();\n\
    \    foreach ($arr as $i) {\n        $pq->insert($i, -$i);\n        if ($pq->count()\
    \ > $k) {\n            $pq->extract();\n        }\n    }\n    $res = [];\n   \
    \ while (!$pq->isEmpty()) {\n        $res[] = $pq->extract();\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // $res = [];\n    // for ($i = 0; $i < $k; $i++) {\n    //     $curr\
    \ = max($arr);\n    //     $res[] = $curr;\n    //     unset($arr[array_search($curr,\
    \ $arr)]);\n    // }\n    // return $res;\n    sort($arr);\n    return array_slice($arr,\
    \ -$k);\n}\n$arr = [-3, -4, 5];\nprint_r(maximum($arr, 3));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpcev3v5rg.php:45\nStack trace:\n\
    #0 /tmp/tmpcev3v5rg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcev3v5rg.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) <= $k) {\n        return $arr;\n    }\n    $max_heap\
    \ = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $max_heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        if ($arr[$i] > $max_heap->top())\
    \ {\n            $max_heap->extract();\n            $max_heap->insert($arr[$i]);\n\
    \        }\n    }\n    $output = [];\n    while (!$max_heap->isEmpty()) {\n  \
    \      $output[] = $max_heap->extract();\n    }\n    return $output;\n}\n$arr\
    \ = [-3, -4, 5];\necho json_encode(maximum($arr, 3)), \"\\n\";\n$arr = [4, -4,\
    \ 4];\necho json_encode(maximum($arr, 2)), \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\necho json_encode(maximum($arr, 1)), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[-3,-4,5]\n[4,-4]\n[2]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgm202b_2.php:48\nStack trace:\n#0 /tmp/tmpgm202b_2.php(61): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgm202b_2.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = array_count_values($arr);\n    arsort($count);\n    $keys\
    \ = array_keys($count);\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[] = $keys[$i];\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_11x2ig6.php:41\nStack trace:\n#0 /tmp/tmp_11x2ig6.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_11x2ig6.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $result = array();\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if (count($result) < $k) {\n            $result = maxInsert($result,\
    \ $arr[$i]);\n        } else {\n            if ($arr[$i] > $result[0]) {\n   \
    \             $result = maxInsert($result, $arr[$i]);\n                array_shift($result);\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function maxInsert() in\
    \ /tmp/tmp45ci0if_.php:22\nStack trace:\n#0 /tmp/tmp45ci0if_.php(33): maximum(Array,\
    \ 3)\n#1 /tmp/tmp45ci0if_.php(37): candidate(Array, 3)\n#2 /tmp/tmp45ci0if_.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp45ci0if_.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $res[$i] = $arr[$i];\n    }\n    // \u5FEB\u6392\u601D\u60F3\
    \uFF0C\u627E\u51FA\u6570\u7EC4\u4E2D\u7B2Ck\u4E2A\u5927\u7684\u6570\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = $res[$i];\n        $maxIndex = $i;\n \
    \       for ($j = $i + 1; $j < $len; $j++) {\n            if ($res[$j] > $max)\
    \ {\n                $max = $res[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $temp = $res[$i];\n        $res[$i] = $res[$maxIndex];\n\
    \        $res[$maxIndex] = $temp;\n    }\n    $output = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $output[$i] = $res[$i];\n    }\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomau935y.php:48\n\
    Stack trace:\n#0 /tmp/tmpomau935y.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpomau935y.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    sort($arr);\n    return array_slice($arr, count($arr) - $k);\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn0r52_y.php:26\n\
    Stack trace:\n#0 /tmp/tmpcn0r52_y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcn0r52_y.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if ($k <= 0 || $k > $length) {\n    \
    \    return [];\n    }\n\n    $res = [-INF];\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($arr[$i] > $res[0]) {\n            if (count($res) >= $k) {\n\
    \                array_pop($res);\n            }\n            $res = insert($res,\
    \ $arr[$i]);\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function insert() in /tmp/tmpqyyftjsf.php:29\n\
    Stack trace:\n#0 /tmp/tmpqyyftjsf.php(36): maximum(Array, 3)\n#1 /tmp/tmpqyyftjsf.php(40):\
    \ candidate(Array, 3)\n#2 /tmp/tmpqyyftjsf.php(53): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpqyyftjsf.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = $arr[0];\n    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        foreach ($arr as $key => $value) {\n            if ($value > $max)\
    \ {\n                $max = $value;\n                $index = $key;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $max = $arr[0];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7bbpewd.php:39\n\
    Stack trace:\n#0 /tmp/tmpq7bbpewd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpq7bbpewd.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $min = PHP_INT_MAX;\n    $index = -1;\n    $count\
    \ = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        for ($j = 0; $j < $count; $j++) {\n            if ($arr[$j] > $max &&\
    \ $arr[$j] < $min) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        $min = $max;\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp43zbdjf7.php:45\nStack trace:\n\
    #0 /tmp/tmp43zbdjf7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp43zbdjf7.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    if (count($arr) < $k) return $result;\n    if\
    \ (count($arr) == $k) return $arr;\n    $hash = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if (array_key_exists($arr[$i], $hash)) $hash[$arr[$i]]++;\n\
    \        else $hash[$arr[$i]] = 1;\n    }\n    arsort($hash);\n    return array_keys(array_slice($hash,\
    \ 0, $k));\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 0\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjow0u1rf.php:43\nStack trace:\n#0 /tmp/tmpjow0u1rf.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjow0u1rf.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k == 0) return [];\n    if ($k == 1) return [max($arr)];\n \
    \   $pq = new SplPriorityQueue();\n    foreach ($arr as $a) {\n        $pq->insert($a,\
    \ -$a);\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $result[] = $pq->extract();\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nprint_r(maximum([4, -4, 4], 2));\n\
    print_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zxgii3b.php:41\nStack trace:\n#0 /tmp/tmp5zxgii3b.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zxgii3b.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n\
    \    }\n    // use a max heap\n    $queue = new SplMaxHeap();\n    foreach ($arr\
    \ as $item) {\n        if ($queue->count() < $k) {\n            $queue->insert($item);\n\
    \        } else {\n            if ($item > $queue->top()) {\n                $queue->extract();\n\
    \                $queue->insert($item);\n            }\n        }\n    }\n   \
    \ $result = [];\n    while ($queue->count() > 0) {\n        $result[] = $queue->extract();\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjcybpht.php:45\n\
    Stack trace:\n#0 /tmp/tmpbjcybpht.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbjcybpht.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) <= $k) {\n        return $arr;\n    }\n    return\
    \ quickSelect($arr, 0, count($arr) - 1, $k);\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_1f__b3.php:29\n\
    Stack trace:\n#0 /tmp/tmpa_1f__b3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa_1f__b3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\t$k = min($k, count($arr));\n\t$heap = new \\Ds\\PriorityQueue(function($a,\
    \ $b) {\n\t\treturn $a < $b;\n\t});\n\tforeach ($arr as $number) {\n\t\t$heap->push($number);\n\
    \t\tif ($heap->count() > $k) {\n\t\t\t$heap->pop();\n\t\t}\n\t}\n\treturn array_reverse($heap->toArray());\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'Ds\\PriorityQueue' not found in /tmp/tmpzqb_pf8o.php:19\n\
    Stack trace:\n#0 /tmp/tmpzqb_pf8o.php(31): maximum(Array, 3)\n#1 /tmp/tmpzqb_pf8o.php(35):\
    \ candidate(Array, 3)\n#2 /tmp/tmpzqb_pf8o.php(48): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpzqb_pf8o.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // Sorting algorithm\n    $len = count($arr);\n    $temp = [];\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        array_push($temp,\
    \ $arr[$i]);\n        $j = $i - 1;\n        while ($j >= 0 && $temp[$j] < $temp[$j\
    \ + 1]) {\n            $temp = swap($temp, $j, $j + 1);\n            $j--;\n \
    \       }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        array_push($result,\
    \ $temp[$i]);\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function swap() in /tmp/tmpvvcjqru4.php:26\n\
    Stack trace:\n#0 /tmp/tmpvvcjqru4.php(36): maximum(Array, 3)\n#1 /tmp/tmpvvcjqru4.php(40):\
    \ candidate(Array, 3)\n#2 /tmp/tmpvvcjqru4.php(53): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpvvcjqru4.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        $heap->insert($arr[$i]);\n    }\n    $result = [];\n    while ($k\
    \ > 0) {\n        $result[] = $heap->extract();\n        $k--;\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdbnailgu.php:37\nStack trace:\n\
    #0 /tmp/tmpdbnailgu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdbnailgu.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $tmp = [];\n    $arr = array_merge($arr, $tmp);\n    $len = count($arr);\n\
    \    for ($i = 1; $i < $len; $i++) {\n        $e = $arr[$i];\n        $j = $i;\n\
    \        while ($j > 0 && $arr[$j - 1] < $e) {\n            $arr[$j] = $arr[$j\
    \ - 1];\n            $j--;\n        }\n        $arr[$j] = $e;\n    }\n    $res\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n\
    \    return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz900v_s.php:41\n\
    Stack trace:\n#0 /tmp/tmpxz900v_s.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxz900v_s.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    //return the sorted array with the maximum k numbers in arr\n   \
    \ $count = count($arr);\n    $output = array();\n    //return arr if $k equals\
    \ to the number of elements in $arr\n    if($k == $count)\n        return $arr;\n\
    \    //if $k is not equal to the number of elements in $arr\n    //push the first\
    \ $k elements into the result array\n    for($i = 0; $i < $k; $i++)\n        array_push($output,\
    \ $arr[$i]);\n    //sort the result array in ascending order\n    sort($output);\n\
    \    //for the rest of elements in $arr\n    for($i = $k; $i < $count; $i++){\n\
    \        //if the current element is bigger than the smallest element in the $output\n\
    \        //remove the smallest element in the $output\n        //and push the\
    \ current element into the $output\n        if($arr[$i] > $output[0]){\n     \
    \       array_shift($output);\n            array_push($output, $arr[$i]);\n  \
    \      }\n    }\n    //sort the $output in descending order\n    rsort($output);\n\
    \    return $output;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\necho implode(',', $result);\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-3,-4,5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5egiefe_.php:53\n\
    Stack trace:\n#0 /tmp/tmp5egiefe_.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp5egiefe_.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    $result = [];\n    if($count <= 0 || $k\
    \ <= 0 || $k > $count) {\n        return $result;\n    }\n    for($i = 0; $i <\
    \ $k; $i++) {\n        $result[$i] = $arr[$i];\n    }\n    for($i = $k; $i < $count;\
    \ $i++) {\n        rsort($result);\n        if($arr[$i] < $result[$k - 1]) {\n\
    \            $result[$k - 1] = $arr[$i];\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpucr98wmg.php:45\nStack trace:\n\
    #0 /tmp/tmpucr98wmg.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpucr98wmg.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $list = [];\n    // \u5904\u7406\u7279\u6B8A\u60C5\u51B5\n    if\
    \ (count($arr) < $k) {\n        return $arr;\n    }\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $list[] = array_shift($arr);\n    }\n    // \u5806\u6392\u5E8F\
    \n    $headSize = count($list);\n    for ($i = ($headSize - 1 - 1) / 2; $i >=\
    \ 0; $i--) {\n        heapAdjust($list, $i, $headSize);\n    }\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value > $list[0]) {\n            $list[0]\
    \ = $value;\n            heapAdjust($list, 0, $headSize);\n        }\n    }\n\
    \    return $list;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapAdjust()\
    \ in /tmp/tmpa18kalz1.php:29\nStack trace:\n#0 /tmp/tmpa18kalz1.php(41): maximum(Array,\
    \ 3)\n#1 /tmp/tmpa18kalz1.php(45): candidate(Array, 3)\n#2 /tmp/tmpa18kalz1.php(58):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa18kalz1.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n\
    \    }\n    for ($i = 0; $i < $k; $i++) {\n        $index = $i;\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $arr[$index]) {\n \
    \               $index = $j;\n            }\n        }\n        if ($index !=\
    \ $i) {\n            list($arr[$i], $arr[$index]) = [$arr[$index], $arr[$i]];\n\
    \        }\n    }\n    return array_slice($arr, 0, $k);\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\n$result = maximum($arr, $k);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(-3)\n  [1]=>\n  int(-4)\n  [2]=>\n  int(5)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2ua2n38.php:45\n\
    Stack trace:\n#0 /tmp/tmpd2ua2n38.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpd2ua2n38.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if ($k == 0) return [];\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($arr as $num) {\n        if ($heap->count() < $k) {\n            $heap->insert($num);\n\
    \        } else {\n            if ($num > $heap->top()) {\n                $heap->extract();\n\
    \                $heap->insert($num);\n            }\n        }\n    }\n    return\
    \ iterator_to_array($heap);\n}\n$arr = [-3, -4, 5];\nprint_r(maximum($arr, 3));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [2] => 5\n    [1] => -3\n    [0] => -4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6k1fwmgr.php:39\nStack trace:\n\
    #0 /tmp/tmp6k1fwmgr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp6k1fwmgr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (empty($arr)) {\n        return [];\n    }\n    $prev = [];\n\
    \    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $prev[]\
    \ = $arr[$i];\n        sort($prev);\n        if (count($prev) > $k) {\n      \
    \      array_shift($prev);\n        }\n        $result[] = $prev;\n    }\n   \
    \ return $result[count($arr) - 1];\n}\n\n$result = maximum([-3, -4, 5], 3);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if ($k < 1 || $k > $length) {\n     \
    \   throw new Exception(\"Invalid k\");\n    }\n    $minHeap = new SplMinHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $minHeap->insert($arr[$i]);\n    }\n\
    \    for ($i = $k; $i < $length; $i++) {\n        if ($arr[$i] > $minHeap->top())\
    \ {\n            $minHeap->extract();\n            $minHeap->insert($arr[$i]);\n\
    \        }\n    }\n    $ans = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $ans[] = $minHeap->extract();\n    }\n    return $ans;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\n$ans = maximum($arr, $k);\nprint_r($ans);\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Invalid k in /tmp/tmpcw0hyh19.php:20\nStack trace:\n#0 /tmp/tmpcw0hyh19.php(44):\
    \ maximum(Array, 0)\n#1 /tmp/tmpcw0hyh19.php(58): candidate(Array, 0)\n#2 /tmp/tmpcw0hyh19.php(61):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcw0hyh19.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $min = -1 * PHP_INT_MAX;\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $max = -1 * PHP_INT_MAX;\n        $max_index = 0;\n        for ($j = 0;\
    \ $j < count($arr); $j++) {\n            if ($arr[$j] > $max && $arr[$j] < $min)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $min = $max;\n        $arr[$max_index] = -1 * PHP_INT_MAX;\n\
    \    }\n    return $min;\n}\n$arr = [-3, -4, 5];\n$k = 3;\necho maximum($arr,\
    \ $k) . PHP_EOL;\n$arr = [4, -4, 4];\n$k = 2;\necho maximum($arr, $k) . PHP_EOL;\n\
    $arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho maximum($arr, $k) . PHP_EOL;\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "-9223372036854775807\n-9223372036854775807\n-9223372036854775807\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmppkcfubxu.php:47\nStack trace:\n\
    #0 /tmp/tmppkcfubxu.php(60): test()\n#1 {main}\n  thrown in /tmp/tmppkcfubxu.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $pq = new SplPriorityQueue();\n    $pq->setExtractFlags(SplPriorityQueue::EXTR_BOTH);\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $pq->insert($arr[$i], 0 -\
    \ $arr[$i]);\n    }\n    $list = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    array_push($list, $pq->extract()['data']);\n    }\n    sort($list);\n   \
    \ return $list;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => -3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpno1boagg.php:45\nStack trace:\n#0 /tmp/tmpno1boagg.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpno1boagg.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $arr = array_slice($arr, 0, $k);\n    rsort($arr);\n    return $arr;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpgojk24.php:27\n\
    Stack trace:\n#0 /tmp/tmpjpgojk24.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjpgojk24.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (empty($arr)) return [];\n    sort($arr);\n    $n = count($arr);\n\
    \    return array_slice($arr, $n - $k, $k);\n}\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    // \u66B4\u529B\u89E3\u6CD5\n    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\necho '<pre>';\nprint_r(maximum([-3, -4, 5], 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpojrt2uf4.php:30\nStack\
    \ trace:\n#0 /tmp/tmpojrt2uf4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpojrt2uf4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $sorted = array_unique($arr);\n    sort($sorted);\n    $size = count($sorted);\n\
    \    $newArr = [];\n    for ($i = $size - 1; $i >= $size - $k; $i--) {\n     \
    \   array_push($newArr, $sorted[$i]);\n    }\n    return $newArr;\n}\n\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\n$ans = maximum($arr, $k);\nvar_dump($ans);\n\n$arr =\
    \ [4, -4, 4];\n$k = 2;\n$ans = maximum($arr, $k);\nvar_dump($ans);\n\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\n$ans = maximum($arr, $k);\nvar_dump($ans);\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(-4)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(-4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xaa5r3a.php:47\n\
    Stack trace:\n#0 /tmp/tmp8xaa5r3a.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8xaa5r3a.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        } else {\n            rsort($res);\n            if ($res[$k - 1] < $arr[$i])\
    \ {\n                $res[$k - 1] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($res);\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp33ps5kel.php:51\nStack trace:\n\
    #0 /tmp/tmp33ps5kel.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp33ps5kel.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = array();\n    $i = 0;\n    while ($i < $k) {\n        $currMax\
    \ = -10001;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $currMax) {\n                $currMax = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $res[] = $currMax;\n\
    \        unset($arr[$index]);\n        $i++;\n    }\n    return $res;\n}\n$a =\
    \ array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($a, $k));\n\n$a = array(4, -4, 4);\n\
    $k = 2;\nprint_r(maximum($a, $k));\n\n$a = array(-3, 2, 1, 2, -1, -2, 1);\n$k\
    \ = 1;\nprint_r(maximum($a, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -10001\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7afailh8.php:51\nStack trace:\n#0 /tmp/tmp7afailh8.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7afailh8.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $temp = [];\n    for ($i = 0; $i < count($arr); $i++) {\n       \
    \ $i = insert($temp, $arr[$i]);\n    }\n    $arr = [];\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $arr[] = array_pop($temp);\n    }\n    rsort($arr);\n \
    \   return $arr;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function insert() in /tmp/tmp7x2z4ecs.php:20\n\
    Stack trace:\n#0 /tmp/tmp7x2z4ecs.php(30): maximum(Array, 3)\n#1 /tmp/tmp7x2z4ecs.php(34):\
    \ candidate(Array, 3)\n#2 /tmp/tmp7x2z4ecs.php(47): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp7x2z4ecs.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n\tsort($arr);\n\t$slice = array_slice($arr, -$k);\n\tsort($slice);\n\t\
    return $slice;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\necho json_encode(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\necho json_encode(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\necho json_encode(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[-4,-3,5]\n[4,4]\n[2]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8knaz_tp.php:51\nStack trace:\n#0 /tmp/tmp8knaz_tp.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8knaz_tp.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $head = $tail = $arr[0];\n    for ($i = 1; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] > $tail) {\n            $tail = $arr[$i];\n        }\
    \ else if ($arr[$i] < $head) {\n            $head = $arr[$i];\n        }\n   \
    \ }\n    $buckets = [];\n    $separate = ($tail - $head) / ($k - 1);\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        $index = (int)(($arr[$i] - $head)\
    \ / $separate);\n        if ($index == $k - 1) {\n            $index = $k - 2;\n\
    \        }\n        if (!isset($buckets[$index])) {\n            $buckets[$index]\
    \ = [];\n        }\n        $buckets[$index][] = $arr[$i];\n    }\n    $result\
    \ = [];\n    $length = 0;\n    for ($i = $k - 2; $i >= 0; $i--) {\n        if\
    \ (!isset($buckets[$i])) {\n            continue;\n        }\n        sort($buckets[$i]);\n\
    \        for ($j = 0; $j < count($buckets[$i]); $j++) {\n            if ($length\
    \ == $k) {\n                break;\n            }\n            $result[] = $buckets[$i][$j];\n\
    \            $length++;\n        }\n    }\n    if ($length < $k) {\n        for\
    \ ($i = 0; $i < count($buckets[$k - 1]); $i++) {\n            if ($length == $k)\
    \ {\n                break;\n            }\n            $result[] = $buckets[$k\
    \ - 1][$i];\n            $length++;\n        }\n    }\n    return $result;\n}\n\
    $arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 = [4, -4, 4];\n$k2 = 2;\n$arr3 = [-3, 2,\
    \ 1, 2, -1, -2\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpncbj_4y9.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    if ($count < $k) return $arr;\n    $max_heap\
    \ = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $max_heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $max_heap->top())\
    \ {\n            $max_heap->extract();\n            $max_heap->insert($arr[$i]);\n\
    \        }\n    }\n    $res = [];\n    while (!$max_heap->isEmpty()) {\n     \
    \   $res[] = $max_heap->extract();\n    }\n    return $res;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nprint_r(maximum([4, -4, 4], 2));\n\
    print_r(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpmdbpp9gs.php:46\nStack trace:\n#0 /tmp/tmpmdbpp9gs.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmdbpp9gs.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
