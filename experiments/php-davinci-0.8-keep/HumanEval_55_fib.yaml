name: HumanEval_55_fib
language: php
prompt: "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
  // 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n"
tests: "function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11)\
  \ !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !==\
  \ 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\tif ($n < 2) {\n\t\treturn $n;\n\t}\n\treturn fib($n - 1) + fib($n\
    \ - 2);\n}\n\necho fib(10);\necho fib(1);\necho fib(8);", "    if ($n == 0) {\n\
    \        return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n\
    \        return fib($n - 1) + fib($n - 2);\n    }\n}", "    if ($n <= 1) {\n \
    \       return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if\
    \ ($n < 2) {\n        return $n;\n    }\n    $n1 = 0;\n    $n2 = 1;\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        $n3 = $n1 + $n2;\n        $n1 = $n2;\n     \
    \   $n2 = $n3;\n    }\n    return $n2;\n}\n", "\t$f = 1;\n\tfor ($i = 2; $i <=\
    \ $n; $i++) {\n\t\t$f = ($f * $i) % 1E9;\n\t}\n\treturn $f;\n}\n", "  if ($n <=\
    \ 1) {\n    return $n;\n  }\n  $prev1 = 1;\n  $prev2 = 0;\n  for ($i = 2; $i <=\
    \ $n; $i++) {\n    $curr = $prev1 + $prev2;\n    $prev2 = $prev1;\n    $prev1\
    \ = $curr;\n  }\n  return $curr;\n}\n", "    $n1 = 0;\n    $n2 = 1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $n3 = $n1 + $n2;\n        $n1 = $n2;\n      \
    \  $n2 = $n3;\n    }\n    return $n1;\n}\n", "    if ($n === 0) {\n        return\
    \ 0;\n    }\n    if ($n === 1) {\n        return 1;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\necho fib(10);\necho fib(1);\necho fib(8);", "\t$v =\
    \ array(0, 1);\n\tif ($n > 1) {\n\t\tfor ($i = 2; $i <= $n; $i++) {\n\t\t\t$v[$i]\
    \ = $v[$i - 1] + $v[$i - 2];\n\t\t}\n\t}\n\treturn $v[$n];\n}\n", "\tif ($n ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 1;\n\t}\n\treturn fib($n\
    \ - 1) + fib($n - 2);\n}\n", "    if ($n <= 2) {\n        return 1;\n    }\n \
    \   return fib($n - 1) + fib($n - 2);\n}\necho fib(10);", "  return $n <= 1 ?\
    \ $n : fib($n - 1) + fib($n - 2);\n}\n\necho fib(10) . \"\\n\";\necho fib(1) .\
    \ \"\\n\";\necho fib(8) . \"\\n\";", "  if ($n == 0) return 0;\n  if ($n == 1)\
    \ return 1;\n  return fib($n - 1) + fib($n - 2);\n}\n\n<<__EntryPoint>>", "  \
    \  if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n <= 2) {\n\
    \        return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n\
    \    }\n}", "\tif($n<3)\n\t\treturn 1;\n\treturn fib($n-1)+fib($n-2);\n}\necho\
    \ fib(10); //55\necho \"<br>\";\necho fib(1); //1\necho \"<br>\";\necho fib(8);\
    \ //21\necho \"<br>\";\n", "  if ($n <= 1) {\n    return $n;\n  }\n  return fib($n\
    \ - 1) + fib($n - 2);\n}\n\n$fib_n = 10;\n$result = fib($fib_n);\n\necho \"fib($fib_n)\
    \ = $result\";", "  if ($n < 2) return $n;\n  return fib($n - 1) + fib($n - 2);\n\
    }\n\nvar_dump(fib(10));\nvar_dump(fib(1));\nvar_dump(fib(8));", "  return (($n\
    \ < 3) ? 1 : fib($n - 1) + fib($n - 2));\n}\n\n<<__EntryPoint>>", "  if ($n <\
    \ 2) {\n    return $n;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n\
    }\n\nvar_dump(fib(10));\nvar_dump(fib(1));\nvar_dump(fib(8));", "    if ($n ==\
    \ 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n    }\
    \ else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "  return $n\
    \ < 2 ? $n : fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\necho PHP_EOL;\necho\
    \ fib(1);\necho PHP_EOL;\necho fib(8);\necho PHP_EOL;", "    if ($n == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    $a\
    \ = 0;\n    $b = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $c = $a + $b;\n\
    \        $a = $b;\n        $b = $c;\n    }\n    return $c;\n}\n", "  $fibs = array(0,\
    \ 1);\n  for ($i = 0; $i < $n; $i++) {\n    $fibs[] = $fibs[0] + $fibs[1];\n \
    \   array_shift($fibs);\n  }\n  return $fibs[0];\n}\n", "\tif ($n <= 2) {\n\t\t\
    return 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "  if\
    \ ($n <= 2) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n",
  "  if ($n < 3) return 1;\n  return fib($n - 1) + fib($n - 2);\n}\n\necho fib(8);\n\
    echo \"\\n\";", "  if ($n < 0) {\n    return \"Can't find fibonacci number with\
    \ negative value.\";\n  }\n  elseif ($n == 0) {\n    return 0;\n  }\n  elseif\
    \ ($n == 1) {\n    return 1;\n  }\n  else {\n    return fib($n - 1) + fib($n -\
    \ 2);\n  }\n}", "    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\necho fib(20);", "\tif ($n <= 2) {\n\t\treturn\
    \ 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}", "  if ($n <= 2) {\n    return\
    \ 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n\necho fib(10)\
    \ . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "  if ($n < 2)\
    \ return $n;\n  return fib($n - 1) + fib($n - 2);\n}\n", "    if($n <= 2) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}", "  if ($n\
    \ < 2) return $n;\n  return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\necho\
    \ '<br>';\necho fib(1);\necho '<br>';\necho fib(8);\necho '<br>';\n", "    return\
    \ ($n < 2) ? $n : fib($n - 1) + fib($n - 2);\n}\n", "    if ($n <= 1) {\n    \
    \    return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "    $a =\
    \ 0;\n    $b = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $tmp = $a;\n   \
    \     $a = $b;\n        $b = $tmp + $b;\n    }\n    return $a;\n}", "    if ($n\
    \ < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\
    echo \">>> fib(10)\\n\";\necho fib(10) . \"\\n\";\necho \">>> fib(1)\\n\";\necho\
    \ fib(1) . \"\\n\";\necho \">>> fib(8)\\n\";\necho fib(8) . \"\\n\";\n", "   \
    \ if ($n < 2) {\n        return $n;\n    } else {\n        return fib($n - 1)\
    \ + fib($n - 2);\n    }\n}\n\necho fib(10);\necho \"\\n\";\necho fib(1);\necho\
    \ \"\\n\";\necho fib(8);\necho \"\\n\";", "\tif ($n === 0) return 0;\n\tif ($n\
    \ === 1) return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}", "  if ($n == 0) {\n\
    \    return 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n    return\
    \ fib($n - 1) + fib($n - 2);\n  }\n}\n\nfor ($i = 0; $i < 10; $i++) {\n  echo\
    \ \"fib(\" . $i . \") = \" . fib($i) . \"\\n\";\n}", "    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n   \
    \ }\n}\n\nif (isset($argv[1])) {\n    $n = $argv[1];\n} else {\n    $n = rand(1,10);\n\
    }\n\necho fib($n);\necho \"\\n\";", "    if ($n <= 1) {\n        return $n;\n\
    \    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if\
    \ ($n == 0) return 0;\n    if ($n == 1) return 1;\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1)\
    \ {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n\
    \    }\n}", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n -\
    \ 1) + fib($n - 2);\n}\n$fib = new FunctionDecorator('fib');\n$fib->dummy(1, 2);\
    \ // Do nothing.\n$fib->memory_cache(); // Memoize.\n$fib->dummy(1, 3); // Do\
    \ nothing.\n$fib->file_cache('./fib.php'); // Serialize to file.\n$fib->dummy(1,\
    \ 4); // Do nothing.\necho $fib(10), \"\\n\"; // 55\necho $fib(8), \"\\n\"; //\
    \ 21\necho $fib(1), \"\\n\"; // 1\necho $fib(10), \"\\n\"; // 55\n$fib->memory_cache_clear();\
    \ // Clear cache data in memory.\necho $fib(10), \"\\n\"; // 55\n", "    //..\n\
    }", "    if ($n <= 2) {\n        return 1;\n    } else {\n        return fib($n\
    \ - 1) + fib($n - 2);\n    }\n}\n\nprint fib(8);", "    return($n < 2) ? $n :\
    \ fib($n - 1) + fib($n - 2);\n}\n", "  if ($n == 0) {\n    return 0;\n  }\n  $x\
    \ = 0;\n  $y = 1;\n  for ($i = 1; $i < $n; $i++) {\n    $temp = $x;\n    $x =\
    \ $y;\n    $y = $temp + $y;\n  }\n  return $y;\n}\n", "  if ($n == 0) return 0;\n\
    \  if ($n == 1) return 1;\n  return fib($n - 1) + fib($n - 2);\n}\n", "  return\
    \ 0;\n}\n\n$expected = array(\n  0 => 0,\n  1 => 1,\n  2 => 1,\n  3 => 2,\n  4\
    \ => 3,\n  5 => 5,\n  6 => 8,\n  7 => 13,\n  8 => 21,\n  9 => 34,\n  10 => 55,\n\
    );\n", "    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n \
    \       return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n \
    \   }\n}\n", "    if ($n < 3) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if ($n < 0) {\n        return\
    \ -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n\
    \        return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n$n = 1;\n\
    for ($i = 0; $i < 10; $i++) {\n    echo fib($n) . \"\\n\";\n    $n++;\n}", "\t\
    if ($n == 0) return 0;\n\tif ($n == 1) return 1;\n\treturn fib($n - 1) + fib($n\
    \ - 2);\n}", "    if ($n < 0) {\n        return NULL;\n    } else if ($n === 0)\
    \ {\n        return 0;\n    } else if ($n === 1) {\n        return 1;\n    } else\
    \ {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    return $n <\
    \ 2 ? $n : fib($n - 1) + fib($n - 2);\n}\n\n$res = fib(10);\n$test = 55;\nif ($res\
    \ != $test) {\n    printf(\"fib(10) is not %d!\\n\", $test);\n    exit(1);\n}\n\
    \n$res = fib(1);\n$test = 1;\nif ($res != $test) {\n    printf(\"fib(1) is not\
    \ %d!\\n\", $test);\n    exit(1);\n}\n\n$res = fib(8);\n$test = 21;\nif ($res\
    \ != $test) {\n    printf(\"fib(8) is not %d!\\n\", $test);\n    exit(1);\n}\n\
    \necho \"OK\\n\";", "\tif ($n == 0) return 0;\n\tif ($n == 1) return 1;\n\treturn\
    \ fib($n - 1) + fib($n - 2);\n}\necho fib(9);", "    if($n <= 1)\n        return\
    \ $n;\n    else\n        return fib($n-1) + fib($n-2);\n}\necho \"Fibonacci:\"\
    .fib(10);\necho \"</br>\";\n", "  if ($n == 0) {\n    return 0;\n  } else if ($n\
    \ == 1) {\n    return 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n\
    \  }\n}\n", "\tif ($n == 0) {\n\t\treturn 0;\n\t} else if ($n == 1) {\n\t\treturn\
    \ 1;\n\t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "  if ($n\
    \ < 2) {\n    return $n;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n\
    \  }\n}\n", "  if ($n <= 1) {\n    return $n;\n  }\n  $previous = 0;\n  $current\
    \ = 1;\n  for ($i = 1; $i < $n; $i++) {\n    $tmp = $current;\n    $current =\
    \ $previous + $current;\n    $previous = $tmp;\n  }\n  return $current;\n}\n",
  "  if ($n == 0) return 0;\n  if ($n == 1) return 1;\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "  if ($n == 0) {\n    return 0;\n  }\n  $array = array(0, 1);\n\
    \  for ($i = 1; $i < $n; $i++) {\n    $array[$i + 1] = $array[$i] + $array[$i\
    \ - 1];\n  }\n  return $array[$n];\n}\n", "\tif($n == 0) return 0;\n\tif($n ==\
    \ 1) return 1;\n\treturn fib($n-1) + fib($n-2);\n}\n\necho fib(10); // 55\necho\
    \ \"\\n\";\necho fib(1); // 1\necho \"\\n\";\necho fib(8); // 21\necho \"\\n\"\
    ;\n", "\t// No recursion.\n\t//$fib_nums = array(0, 1);\n\t//while (count($fib_nums)\
    \ < $n) {\n\t//\t$fib_nums[] = $fib_nums[count($fib_nums) - 1] + $fib_nums[count($fib_nums)\
    \ - 2];\n\t//}\n\t//return $fib_nums[$n - 1];\n\n\t// Recursion.\n\tif ($n < 3)\
    \ return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\n", "    if ($n === 0) {\n\
    \        return 0;\n    }\n    if ($n === 1) {\n        return 1;\n    }\n   \
    \ return fib($n - 1) + fib($n - 2);\n}\n", "  if ($n < 0)\n    return -1;\n  if\
    \ ($n == 0)\n    return 0;\n  if ($n == 1)\n    return 1;\n  $prev = 0;\n  $curr\
    \ = 1;\n  $next = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    $next = $prev + $curr;\n\
    \    $prev = $curr;\n    $curr = $next;\n  }\n  return $next;\n}\n\n$n = mt_rand(0,\
    \ 20);\nprint \"Fib($n) = \" . fib($n) . \"\\n\";", "    if ($n < 2) {\n     \
    \   return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n\
    }\n\necho fib(8);", "    $arr = [0, 1];\n    for ($i = 1; $i < $n; $i++) {\n \
    \       $arr[] = $arr[$i - 1] + $arr[$i];\n    }\n    return $arr[$n];\n}\n",
  "  return $n < 2 ? $n : fib($n - 1) + fib($n - 2);\n}\n$fib = new Benchmark('fib',\
    \ 'fib');\n$fib->run(10);\n", "    $n = intval($n);\n    $f = 0;\n    $f1 = 1;\n\
    \    $f2 = 1;\n    if ($n == 0) {\n        return 0;\n    }\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $f = $f1 + $f2;\n        $f1 = $f2;\n        $f2\
    \ = $f;\n    }\n    return $f;\n}\necho fib(8) . \"\\n\";", "    // YOUR CODE\
    \ HERE\n    $num1 = 0;\n    $num2 = 1;\n    $num3 = 1;\n    if ($n == 1) {\n \
    \       return $num1;\n    } elseif ($n == 2) {\n        return $num2;\n    }\
    \ else {\n        for ($i = 3; $i <= $n; $i++) {\n            $num3 = $num1 +\
    \ $num2;\n            $num1 = $num2;\n            $num2 = $num3;\n        }\n\
    \        return $num3;\n    }\n}\n", "  if ($n <= 1) return $n;\n  return fib($n\
    \ - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n \
    \   return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n        return\
    \ $n;\n    }\n    $result = 0;\n    $prev = 1;\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        $result += $prev;\n        $prev = $result - $prev;\n    }\n    return\
    \ $result;\n}\n", "    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\n", "    return (int) ((pow((1 + sqrt(5)) / 2, $n) -\
    \ pow((1 - sqrt(5)) / 2, $n)) / sqrt(5));\n}\n", "    if ($n < 2) return $n;\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);", "    if($n == 0)\
    \ {\n        return 0;\n    } else if($n == 1) {\n        return 1;\n    } else\
    \ {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\n$n = rand(0, 25);\n\
    echo(\"fib(\" . $n . \") = \" . fib($n) . \"\\n\");\n", "  if ($n < 2) {\n   \
    \ return $n;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n == 0)\
    \ {\n\t\treturn 0;\n\t}\n\telse if ($n == 1) {\n\t\treturn 1;\n\t}\n\telse {\n\
    \t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "    $x = 1;\n    $y = 1;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $z = $x + $y;\n        $x = $y;\n\
    \        $y = $z;\n    }\n    return $x;\n}\n", "  if ($n == 0) {\n    return\
    \ 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "\t$first = 0;\n\t$second = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\
    \t\t$tmp = $first;\n\t\t$first = $second;\n\t\t$second = $tmp + $second;\n\t}\n\
    \treturn $first;\n}\n\nvar_dump(fib(3));", "    if($n <= 2) {\n        return\
    \ 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}\n", "  return\
    \ $n < 2 ? $n : fib($n - 1) + fib($n - 2);\n}\n\nprint(fib(10));", "    if ($n\
    \ == 0) return 0;\n    if ($n == 1) return 1;\n    return fib($n - 1) + fib($n\
    \ - 2);\n}\n", "  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return\
    \ 1;\n  }\n  $n--;\n  $a = 0;\n  $b = 1;\n  while ($n > 0) {\n    $temp = $a +\
    \ $b;\n    $a = $b;\n    $b = $temp;\n    $n--;\n  }\n  return $b;\n}\n", "  \
    \  if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\n", " \
    \ if ($n == 0) return 0;\n  if ($n == 1) return 1;\n  return fib($n - 1) + fib($n\
    \ - 2);\n}\n\necho fib(7);\necho \"\\n\";\n", "  if ($n < 2) {\n    return $n;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}", "    $last = 0;\n\
    \    $curr = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $next = $last + $curr;\n\
    \        $last = $curr;\n        $curr = $next;\n    }\n    return $curr;\n}\n",
  "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\t\
    if ($n == 0) {\n\t\treturn 0;\n\t} else if ($n == 1) {\n\t\treturn 1;\n\t} else\
    \ {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\necho fib(1) . \"\\n\";\necho\
    \ fib(2) . \"\\n\";\necho fib(3) . \"\\n\";\necho fib(4) . \"\\n\";\necho fib(5)\
    \ . \"\\n\";\necho fib(6) . \"\\n\";\necho fib(7) . \"\\n\";\necho fib(8) . \"\
    \\n\";\necho fib(9) . \"\\n\";\necho fib(10) . \"\\n\";\n", "\tif ($n <= 2) {\n\
    \t\treturn 1;\n\t}\n\treturn fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n == 0)\
    \ return 0;\n\tif ($n == 1) return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\n",
  "    if($n < 3) {\n        return 1;\n    } else {\n        return fib($n - 1) +\
    \ fib($n - 2);\n    }\n}\n", "  if ($n < 2) {\n    return $n;\n  } else {\n  \
    \  return fib($n - 1) + fib($n - 2);\n  }\n}\n$args = array(10, 1, 8);\nforeach\
    \ ($args as $arg) {\n  var_dump(fib($arg));\n}", "    if ($n < 2) {\n        return\
    \ $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}", " \
    \   if ($n < 0) {\n        return null;\n    } else if ($n == 0) {\n        return\
    \ 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return\
    \ fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if ($n < 2) return $n;\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\\
    n\";\necho fib(8) . \"\\n\";", "    if ($n < 2) {\n        return $n;\n    } else\
    \ {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if ($n < 0)\
    \ {\n        echo \"n can't be negative.\\n\";\n        return;\n    }\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n    $n1 = 0;\n    $n2 = 1;\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        $sum = $n1 + $n2;\n        $n1 = $n2;\n     \
    \   $n2 = $sum;\n    }\n    return $n2;\n}\n", "    if ($n == 0) {\n        return\
    \ 0;\n    }\n    $a = 1;\n    $b = 1;\n    for ($i = 3; $i <= $n; $i++) {\n  \
    \      $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $b;\n\
    }\necho fib(10);", "    if ($n == 0) {\n        return 0;\n    } else if ($n ==\
    \ 1) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n -\
    \ 2);\n    }\n}\n", "\tif ($n < 2) {\n\t\treturn $n;\n\t} else {\n\t\treturn fib($n\
    \ - 1) + fib($n - 2);\n\t}\n}\n", "  if ($n <= 2) {\n    return 1;\n  }\n  return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n        return $n;\n \
    \   } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    return\
    \ ($n < 2) ? $n : fib($n - 1) + fib($n - 2);\n}", "    $a = 0;\n    $b = 1;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $temp = $a;\n        $a = $b;\n  \
    \      $b = $temp + $b;\n    }\n    return $a;\n}\n", "\tif($n==0 || $n==1) {\n\
    \t\treturn $n;\n\t}\n\t$a=0;\n\t$b=1;\n\tfor($i=2;$i<=$n;$i++) {\n\t\t$res = $a+$b;\n\
    \t\t$a=$b;\n\t\t$b=$res;\n\t}\n\treturn $res;\n}", "    if ($n <= 1) return $n;\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n\n$fib_num = fib(5);\necho \"The 5th\
    \ Fibonacci number is $fib_num.\" . PHP_EOL;", "    $a = 0;\n    $b = 1;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $b = $a + $b;\n        $a = $b - $a;\n\
    \    }\n    return $a;\n}\n\nfor ($i = 1; $i <= 10; $i++) {\n    echo fib($i)\
    \ . \" \";\n}\necho \"\\n\";", "    if($n <= 1) {\n        return $n;\n    }\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n", "    return ($n < 2) ? $n : fib($n\
    \ - 1) + fib($n - 2);\n}\n\necho fib(10);", "    if ($n < 3) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", " \
    \ if ($n < 2) {\n    return $n;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n\
    \n$f = fib(10);\nvar_dump($f);", "    if ($n == 0) return 0;\n    if ($n == 1)\
    \ return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n", "  $x = 0;\n  $y = 1;\n\
    \  while ($n > 0) {\n    $x = $x + $y;\n    $y = $x - $y;\n    $n--;\n  }\n  return\
    \ $x;\n}", "\tif ($n < 2)\n\t\treturn $n;\n\telse\n\t\treturn fib($n - 1) + fib($n\
    \ - 2);\n}\n", "    if ($n <= 1) {\n        return $n;\n    } else {\n       \
    \ return fib($n - 1) + fib($n - 2);\n    }\n}\necho fib(5);", "    $fibs = [0,\
    \ 1];\n    for ($i = 2; $i <= $n; $i++) {\n        $fibs[$i] = $fibs[$i - 1] +\
    \ $fibs[$i - 2];\n    }\n    return $fibs[$n];\n}\n", "    if ($n == 0) {\n  \
    \      return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n\
    \        return fib($n - 1) + fib($n - 2);\n    }\n}", "    if ($n == 0) {\n \
    \       return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return\
    \ fib($n - 1) + fib($n - 2);\n}", "\tif ($n <= 2) {\n\t\treturn 1;\n\t} else {\n\
    \t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n", "    if ($n == 0) {\n      \
    \  return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n   \
    \     return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\tif ($n == 0) return 0;\n\
    \tif ($n == 1) return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\n\necho fib(10)\
    \ . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";", "  if($n == 0 ||\
    \ $n == 1) {\n    return $n;\n  }\n  else {\n    return fib($n - 1) + fib($n -\
    \ 2);\n  }\n}\n", "\tif($n == 0) {\n\t\treturn 0;\n\t}\n\telse if($n == 1) {\n\
    \t\treturn 1;\n\t}\n\telse {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n",
  "\tif($n < 2) {\n\t\treturn $n;\n\t}\n\telse {\n\t\treturn fib($n - 1) + fib($n\
    \ - 2);\n\t}\n}\n\necho fib(10);\necho PHP_EOL;\n\necho fib(1);\necho PHP_EOL;\n\
    \necho fib(8);\necho PHP_EOL;", "    if ($n == 0) {\n        return 0;\n    }\n\
    \    $a = 0;\n    $b = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $c = $a\
    \ + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $b;\n}\n", "  if\
    \ ($n <= 2) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n",
  "    $i = 0;\n    $f = 0;\n    $m = 1;\n    while ($i < $n) {\n        $i = $i +\
    \ 1;\n        $tmp = $f;\n        $f = $f + $m;\n        $m = $tmp;\n    }\n \
    \   return $f;\n}\n", "    $a = 0;\n    $b = 1;\n    while ($n > 0) {\n      \
    \  $b = $a + $b;\n        $a = $b - $a;\n        $n = $n - 1;\n    }\n    return\
    \ $a;\n}\n", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n\
    \ - 1) + fib($n - 2);\n}\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\n\
    echo fib(8) . \"\\n\";", "    if ($n < 3) return 1;\n    return fib($n - 1) +\
    \ fib($n - 2);\n}\n$trace = new Trace();\n$trace->start();\nfib(10);\n$trace->end();\n\
    $trace->render();", "    if ($n == 0) {\n        return 0;\n    } else if ($n\
    \ == 1) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n\
    \ - 2);\n    }\n}\n\necho 'fib(10): ' . fib(10) . PHP_EOL;\necho 'fib(1): ' .\
    \ fib(1) . PHP_EOL;\necho 'fib(8): ' . fib(8) . PHP_EOL;", "\tif ($n == 0) return\
    \ 0;\n\tif ($n == 1) return 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\necho fib(10)\
    \ . PHP_EOL;\necho fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;", "  return $n <\
    \ 2 ? $n : fib($n - 1) + fib($n - 2);\n}\n", "\tif ($n < 2) {\n\t\treturn $n;\n\
    \t} else {\n\t\treturn fib($n - 1) + fib($n - 2);\n\t}\n}\n\n$n = 10;\n$fib =\
    \ fib($n);\necho \"fib($n) is $fib\\n\";\necho str_repeat('*', 10) . \"\\n\";\n",
  "    if ($n < 3) {\n        return 1;\n    }\n    return fib($n - 1) + fib($n -\
    \ 2);\n}\n", "    // Fill me in.\n    return $n;\n}\n\nprint fib(10);", "    if\
    \ ($n <= 2) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n\
    \ - 2);\n    }\n}\n\n$n = $argv[1];\nprint fib($n);\nprint \"\\n\";", "    if\
    \ ($n <= 2) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n\
    \ - 2);\n    }\n}\n", "    if ($n < 2) {\n        return $n;\n    } else {\n \
    \       return fib($n - 1) + fib($n - 2);\n    }\n}\n", "\t// To be implemented.\n\
    }\n", "    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n\
    \ - 1) + fib($n - 2);\n    }\n}\n\n$n = (int)$argv[1];\necho fib($n);", "  return\
    \ 1;\n}\n", "  if ($n == 0) {\n    return 0;\n  } else if ($n == 1) {\n    return\
    \ 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}", "    if ($n\
    \ == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n \
    \   } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", "    if\
    \ ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n\
    \    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\necho fib(10);\n\
    echo \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";\n", "\t\
    if($n==0) return 0;\n\tif($n==1) return 1;\n\treturn fib($n-1) + fib($n-2);\n\
    }\n\necho fib(10) . \"\\n\";\necho fib(1) . \"\\n\";\necho fib(8) . \"\\n\";",
  "    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1)\
    \ + fib($n - 2);\n    }\n}\n", "    if ($n < 2) {\n        return $n;\n    } else\
    \ {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\necho fib(10);\necho\
    \ \"\\n\";\necho fib(1);\necho \"\\n\";\necho fib(8);\necho \"\\n\";\n", "  if\
    \ ($n < 0) {\n    throw new InvalidArgumentException('Number must be positive.');\n\
    \  } else if ($n == 0) {\n    return 0;\n  } else if ($n == 1) {\n    return 1;\n\
    \  } else {\n    return fib($n - 1) + fib($n - 2);\n  }\n}\n", "    if ($n < 2)\
    \ {\n        return $n;\n    }\n    $a = 1;\n    $b = 1;\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n\
    \    }\n    return $b;\n}\n", "\tif ($n == 0) return 0;\n\tif ($n == 1) return\
    \ 1;\n\treturn fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\necho \"\\n\";\n",
  "\tif ($n <= 2) return 1;\n\telse return fib($n - 1) + fib($n - 2);\n}\n", "  if\
    \ ($n < 3) {\n    return 1;\n  } else {\n    return fib($n - 1) + fib($n - 2);\n\
    \  }\n}\n\necho fib(10) . PHP_EOL;\necho fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;",
  "\t$fibs = array(0, 1);\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$fibs[$i] = $fibs[$i\
    \ - 1] + $fibs[$i - 2];\n\t}\n\treturn $fibs[$n];\n}\n", "    if ($n < 2) {\n\
    \        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\necho 'fib(10)\
    \ = ' . fib(10) . PHP_EOL;\necho 'fib(1) = ' . fib(1) . PHP_EOL;\necho 'fib(8)\
    \ = ' . fib(8) . PHP_EOL;", "\treturn $n <= 1 ? $n : fib($n - 1) + fib($n - 2);\n\
    }\n", "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) +\
    \ fib($n - 2);\n}\n\n$argv = $GLOBALS['argv'];\n$n = intval($argv[1]);\n$result\
    \ = fib($n);\nprint_r($result);", "\tif ($n < 2)\n\t\treturn $n;\n\treturn fib($n\
    \ - 1) + fib($n - 2);\n}\n", "  if ($n == 0) {\n    return 0;\n  }\n  if ($n ==\
    \ 1) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n\n$N = 8;\n\
    echo \"fib($N) = \" . fib($N) . \"\\n\";", "    $a = 1;\n    $b = 1;\n    while\
    \ ($n-- > 1) {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n  \
    \  }\n    return $a;\n}\n$n = 10;\nprintf(\"%d\\n\", fib($n));", "    if ($n ==\
    \ 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n    }\
    \ else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\necho fib(10)\
    \ . PHP_EOL;\necho fib(1) . PHP_EOL;\necho fib(8) . PHP_EOL;", "    $a = 0;\n\
    \    $b = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $tmp = $a;\n        $a\
    \ = $b;\n        $b = $a + $tmp;\n    }\n    return $a;\n}\n", "  if ($n < 2)\
    \ {\n    return $n;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n\nfor ($i =\
    \ 0; $i < 10; $i++) {\n  echo fib($i) . \"\\n\";\n}", "  if ($n <= 2) {\n    return\
    \ 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) return\
    \ $n;\n    return fib($n - 1) + fib($n - 2);\n}\n$n = 10;\nprint(\"$n-th Fibonacci\
    \ number is: \" . fib($n) . \"\\n\");", "    if ($n <= 1) {\n        return $n;\n\
    \    }\n    return fib($n - 1) + fib($n - 2);\n}\n\n$stdin = fopen(\"php://stdin\"\
    , \"r\");\n\nfscanf($stdin, \"%d\\n\", $n);\n\nprintf(\"%d\\n\", fib($n));\n\n\
    fclose($stdin);", "  $zero = bcpow('0', '1');\n  $one = bcpow('1', '1');\n  $two\
    \ = bcpow('2', '1');\n  $three = bcpow('3', '1');\n  $f = array(0 => $zero, 1\
    \ => $one);\n  for ($i = 2; $i <= $n; $i++) {\n    $f[$i] = bcadd($f[$i - 1],\
    \ $f[$i - 2]);\n  }\n  return $f[$n];\n}\n", "  if ($n == 0) {\n    return 0;\n\
    \  }\n  if ($n == 1) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n\
    }\n", "    $a = 0;\n    $b = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $c\
    \ = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $a;\n}", " \
    \   if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n", " \
    \   if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "  if ($n === 0) {\n\
    \    return 0;\n  } else if ($n === 1) {\n    return 1;\n  } else {\n    return\
    \ fib($n - 1) + fib($n - 2);\n  }\n}\n", "    if ($n == 0) {\n        return 0;\n\
    \    }\n    $cur = 1;\n    $prev = 0;\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      $cur = $cur + $prev;\n        $prev = $cur - $prev;\n    }\n    return\
    \ $cur;\n}\n\necho \"\\n** TESTING fib **\\n\";\nassert(55 == fib(10));\nassert(1\
    \ == fib(1));\nassert(21 == fib(8));\necho \"** All asserts passed. **\\n\";",
  "  $a = 0;\n  $b = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $b = $a + $b;\n    $a\
    \ = $b - $a;\n  }\n  return $a;\n}\n\necho fib(5).\"\\n\";", "    return ($n ==\
    \ 0 || $n == 1) ? $n : fib($n - 1) + fib($n - 2);\n}", "    $previous = 0;\n \
    \   $current = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $tmp = $current;\n\
    \        $current = $previous + $current;\n        $previous = $tmp;\n    }\n\
    \    return $current;\n}\n", "    if ($n < 0) {\n        throw new Exception(\"\
    Negative number\");\n    } else if ($n == 0) {\n        return 0;\n    } else\
    \ if ($n == 1) {\n        return 1;\n    } else {\n        return fib($n - 1)\
    \ + fib($n - 2);\n    }\n}\n\nassertEquals(1, fib(1));\nassertEquals(55, fib(10));\n\
    assertEquals(21, fib(8));\n", "    return $n < 2 ? $n : fib($n - 1) + fib($n -\
    \ 2);\n}\n", "    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n        return $n;\n \
    \   } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\n$ans = fib(6);\n\
    print(\"fib(6) = $ans\\n\");", "    if ($n <= 2) {\n        return 1;\n    }\n\
    \    return fib($n - 1) + fib($n - 2);\n}\n", "    if($n < 2) return $n;\n   \
    \ return fib($n - 1) + fib($n - 2);\n}\n", "    if ($n < 2) {\n        return\
    \ $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n\n$n\
    \ = 10;\nprint fib($n);\nprint \"\\n\";", "  if($n == 0) {\n    return 0;\n  }\n\
    \  if($n == 1) {\n    return 1;\n  }\n  return fib($n - 1) + fib($n - 2);\n}\n",
  "    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n -\
    \ 2);\n}\n\nclass FibTest extends PHPUnit_Framework_TestCase {\n    public function\
    \ testOne() {\n        $this->assertEquals(1, fib(1));\n    }\n\n    public function\
    \ testEight() {\n        $this->assertEquals(21, fib(8));\n    }\n\n    public\
    \ function testTen() {\n        $this->assertEquals(55, fib(10));\n    }\n}",
  "\tif($n<=1)\n\t\treturn $n;\n\telse\n\t\treturn fib($n-1)+fib($n-2);\n}", "   \
    \ if($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n\
    }\n\necho \"fib(10) = \" . fib(10) . \"\\n\";\necho \"fib(1) = \" . fib(1) . \"\
    \\n\";\necho \"fib(8) = \" . fib(8) . \"\\n\";\n", "  if ($n == 0) {\n    return\
    \ 0;\n  } else if ($n == 1) {\n    return 1;\n  } else {\n    return fib($n -\
    \ 1) + fib($n - 2);\n  }\n}\n", "  return ($n < 2) ? $n : fib($n - 1) + fib($n\
    \ - 2);\n}", "    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n    return\
    \ fib($n - 1) + fib($n - 2);\n}\n\necho fib(10);\necho \"\\n\";\necho fib(1);\n\
    echo \"\\n\";\necho fib(8);\necho \"\\n\";\n", "    if ($n == 0) return 0;\n \
    \   if ($n == 1) return 1;\n    return fib($n - 1) + fib($n - 2);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
