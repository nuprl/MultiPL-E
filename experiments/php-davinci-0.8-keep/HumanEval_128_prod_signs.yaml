name: HumanEval_128_prod_signs
language: php
prompt: "<?php\n// You are given an array arr of integers and you need to return\n\
  // sum of magnitudes of integers multiplied by product of all signs\n// of each\
  \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
  \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
  \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n"
tests: "function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 2, -1, -1,\
  \ 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$result = 1;\n\tif (empty($arr)) {\n\t\treturn null;\n\t}\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value != 0) {\n\t\t\t$result *= $value / abs($value);\n\
    \t\t}\n\t}\n\treturn array_sum(array_map('abs', $arr)) * $result;\n}", "  $signs\
    \ = array_map(function($el) {\n    if ($el < 0) return -1;\n    if ($el > 0) return\
    \ 1;\n    return 0;\n  }, $arr);\n  $product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($el) {\n    return abs($el);\n  }, $arr);\n  $sum = array_sum($magnitudes);\n\
    \  if (count($arr) == 0) return;\n  return $sum * $product;\n}\n", "  // your\
    \ code here\n}", "  $signs = [];\n  $magnitudes = [];\n  if (count($arr) === 0)\
    \ {\n    return null;\n  }\n  foreach ($arr as $value) {\n    if ($value < 0)\
    \ {\n      $signs[] = -1;\n      $magnitudes[] = abs($value);\n    } else if ($value\
    \ > 0) {\n      $signs[] = 1;\n      $magnitudes[] = abs($value);\n    } else\
    \ {\n      $signs[] = 0;\n      $magnitudes[] = abs($value);\n    }\n  }\n  return\
    \ array_product($signs) * array_sum($magnitudes);\n}\n", "    if (empty($arr))\
    \ {\n        return NULL;\n    }\n    $num = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $value) {\n        if ($value > 0) {\n            $num *= 1;\n        } elseif\
    \ ($value < 0) {\n            $num *= -1;\n        } else {\n            $num\
    \ *= 0;\n        }\n        $sum += abs($value);\n    }\n    return $sum * $num;\n\
    }", "  // filter with valid integer\n  $arr = array_filter($arr, function($x)\
    \ {\n    return is_int($x);\n  });\n  if (count($arr) == 0) return null;\n  $arr\
    \ = array_map(function($x) {\n    // change the sign\n    if ($x < 0) return -1;\n\
    \    else if ($x > 0) return 1;\n    else return 0;\n  }, $arr);\n  $sum = 0;\n\
    \  foreach ($arr as $x) {\n    if ($x < 0) {\n      $sum -= $x;\n    } else {\n\
    \      $sum += $x;\n    }\n  }\n  return $sum;\n}\n", "    if(count($arr) <= 0)\
    \ {\n        return null;\n    }\n    return array_reduce($arr, function($carry,\
    \ $item) {\n        return $carry + $item * ($item >= 0 ? 1 : -1);\n    }, 0);\n\
    }", "    $res = array_product(array_map(function($x) {\n        if ($x > 0) return\
    \ 1;\n        if ($x < 0) return -1;\n        return 0;\n    }, $arr));\n    return\
    \ array_reduce($arr, function($carry, $x) use ($res) {\n        return $carry\
    \ + abs($x) * $res;\n    }, 0);\n}", "    // Write your code here\n    $count\
    \ = 0;\n    $mult = 1;\n    if (count($arr) == 0)\n        return null;\n    foreach\
    \ ($arr as $value) {\n        if ($value != 0) {\n            $count += abs($value);\n\
    \            $mult *= ($value > 0) ? 1 : -1;\n        }\n    }\n    return $count\
    \ * $mult;\n}", "  $total = 0;\n  if (!empty($arr)) {\n    $total = array_reduce($arr,\
    \ function($carry, $item) {\n      $sign = 1;\n      if ($item < 0) {\n      \
    \  $sign = -1;\n      } elseif ($item === 0) {\n        $sign = 0;\n      }\n\
    \      return $carry + $sign * abs($item);\n    }, 1);\n  }\n  return $total;\n\
    }\n\n$a = [1, 2, 2, -4];\n$a = [0, 1];\n$a = [];\n\necho prod_signs($a) . PHP_EOL;",
  "  $prod = 1;\n  foreach ($arr as $el) {\n    if ($el > 0) {\n      $prod *= 1;\n\
    \    } elseif ($el < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  if ($prod === 0) {\n    return 0;\n  }\n  $magn = 0;\n  foreach\
    \ ($arr as $el) {\n    $magn += abs($el);\n  }\n  return $magn * $prod;\n}\n",
  "    if (!count($arr)) return null;\n    $p = 1;\n    $s = 0;\n    foreach ($arr\
    \ as $i) {\n        $s += abs($i);\n        $p *= $i ? ($i > 0 ? 1 : -1) : 0;\n\
    \    }\n    return $s * $p;\n}\n", "  $result = 0;\n  if (count($arr) == 0) {\n\
    \    return NULL;\n  }\n  $prod_signs = 1;\n  foreach ($arr as $num) {\n    if\
    \ ($num == 0) {\n      continue;\n    }\n    $sign = $num > 0 ? 1 : -1;\n    $prod_signs\
    \ *= $sign;\n    $result += abs($num);\n  }\n  return $result * $prod_signs;\n\
    }\n\n$arr = [1, 2, 2, -4];\n$arr = [0, 1];\n$arr = [];\necho prod_signs($arr);",
  "\tif (count($arr) == 0) {\n\t\treturn null;\n\t}\n\t$res = 1;\n\t$sum = 0;\n\t\
    foreach ($arr as $elem) {\n\t\tif ($elem != 0) {\n\t\t\t$res *= $elem / abs($elem);\n\
    \t\t}\n\t\t$sum += abs($elem);\n\t}\n\treturn $res * $sum;\n}\necho prod_signs([1,\
    \ 2, 2, -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([])\
    \ . \"\\n\";", "  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num !== 0) $prod *= $num / abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n", "  // check whether array is empty or not\n  if (count($arr)\
    \ == 0) {\n    return null;\n  }\n  // calculate each product of signs of each\
    \ number in array\n  // and calculate each magnitude of each integer in array\n\
    \  $product_of_signs = 1;\n  $sum_of_magnitudes = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] == 0) {\n      $product_of_signs = 0;\n      $sum_of_magnitudes\
    \ = 0;\n      break;\n    }\n    elseif ($arr[$i] > 0) {\n      $product_of_signs\
    \ *= 1;\n      $sum_of_magnitudes += $arr[$i];\n    }\n    else {\n      $product_of_signs\
    \ *= -1;\n      $sum_of_magnitudes += abs($arr[$i]);\n    }\n  }\n  return $product_of_signs\
    \ * $sum_of_magnitudes;\n}", "    if (empty($arr)) {\n        return null;\n \
    \   }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as $val) {\n        $sign\
    \ = $val > 0 ? 1 : ($val < 0 ? -1 : 0);\n        $sum += abs($val);\n        $prod\
    \ *= $sign;\n    }\n    return $sum * $prod;\n}\n", "    $sum = 0;\n    $prod\
    \ = 1;\n    $empty = 0;\n    foreach ($arr as $value) {\n        if ($value >\
    \ 0) {\n            $prod *= 1;\n            $sum += $value;\n        } elseif\
    \ ($value < 0) {\n            $prod *= -1;\n            $sum += $value * -1;\n\
    \        } else {\n            $prod *= 0;\n            $empty++;\n        }\n\
    \    }\n    if ($empty === count($arr)) {\n        return NULL;\n    }\n    return\
    \ $sum * $prod;\n}", "  $magnitudes = array_map(function($val) {\n    return abs($val);\n\
    \  }, $arr);\n  if (sizeof($magnitudes) == 0) {\n    return null;\n  }\n  $signs\
    \ = array_map(function($val) {\n    if ($val == 0) {\n      return 1;\n    }\n\
    \    if ($val > 0) {\n      return 1;\n    }\n    return -1;\n  }, $arr);\n  $result\
    \ = array_product($signs);\n  $magnitudes = array_sum($magnitudes);\n  return\
    \ $result * $magnitudes;\n}\n", "\tif (empty($arr)) return null;\n\t$signs = 1;\n\
    \t$numbers = 0;\n\tforeach ($arr as $number) {\n\t\t$signs *= (int) ($number >\
    \ 0) - (int) ($number < 0);\n\t\t$numbers += abs($number);\n\t}\n\treturn $signs\
    \ * $numbers;\n}\n$arr = [1, 2, 2, -4];\nprint_r($arr);\necho prod_signs($arr)\
    \ . \"\\n\";\n\n$arr = [0, 1];\nprint_r($arr);\necho prod_signs($arr) . \"\\n\"\
    ;\n\n$arr = [];\nprint_r($arr);\necho prod_signs($arr) . \"\\n\";\n\n$arr = [1,\
    \ -1, 2, -2, 3, -3];\nprint_r($arr);\necho prod_signs($arr) . \"\\n\";\n\n$arr\
    \ = [1, -2, 3, -4, 5, -6];\nprint_r($arr);\necho prod_signs($arr) . \"\\n\";\n",
  "    if (count($arr) == 0) {\n        return;\n    }\n    $sum = 0;\n    $mult =\
    \ 1;\n    for ($i = 0; $i < count($arr); $i++) {\n        $sign = sign($arr[$i]);\n\
    \        $mult *= $sign;\n        $sum += abs($arr[$i]);\n    }\n    return $sum\
    \ * $mult;\n}\n", "    if(empty($arr)) {\n        return null;\n    }\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach($arr as $val) {\n        $sum += abs($val);\n\
    \        $product *= $val != 0 ? sign($val) : 1;\n    }\n    return $sum * $product;\n\
    }\n", "    if (empty($arr)) {\n        return;\n    }\n    $prod_signs = 1;\n\
    \    $sum_magn = 0;\n    foreach ($arr as $value) {\n        $sign = ($value >\
    \ 0) - ($value < 0);\n        $prod_signs *= $sign;\n        $sum_magn += abs($value);\n\
    \    }\n    return $sum_magn * $prod_signs;\n}\necho prod_signs([1, 2, 2, -4]);\
    \ //== -9\necho \"<br>\";\necho prod_signs([0, 1]); //== 0\necho \"<br>\";\necho\
    \ prod_signs([]); //== None", "    if (empty($arr)) {\n        return null;\n\
    \    }\n    $signs = $magnitudes = 1;\n    foreach ($arr as $num) {\n        $signs\
    \ *= sign($num);\n        $magnitudes += abs($num);\n    }\n    return $signs\
    \ * $magnitudes;\n}\n", "    if(count($arr) < 1) return null;\n    $product =\
    \ 1;\n    $sum = 0;\n    foreach($arr as $number) {\n        $product *= $number\
    \ == 0 ? 1 : ($number < 0 ? -1 : 1);\n        $sum += abs($number);\n    }\n \
    \   return $product * $sum;\n}\n", "  if (count($arr) === 0) {\n    return NULL;\n\
    \  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $v) {\n    $sum += abs($v);\n\
    \    if ($v !== 0) {\n      $prod *= $v > 0 ? 1 : -1;\n    }\n  }\n  return $sum\
    \ * $prod;\n}\necho prod_signs([1, 2, 2, -4]) . '<br>';\necho prod_signs([0, 1])\
    \ . '<br>';\necho prod_signs([]) . '<br>';", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($arr as $value) {\n        if ($value == 0) {\n            continue;\n\
    \        }\n        $product *= sign($value);\n        $sum += abs($value);\n\
    \    }\n    return $sum * $product;\n}\n", "  if (count($arr) === 0) {\n    return\
    \ null;\n  }\n  $s = 1;\n  $m = 0;\n  foreach ($arr as $n) {\n    $m += abs($n);\n\
    \    if ($n < 0) {\n      $s *= -1;\n    } elseif ($n > 0) {\n      $s *= 1;\n\
    \    }\n  }\n  return $m * $s;\n}", "\t$sum_of_magnitudes = 0;\n\t$product_of_signs\
    \ = 1;\n\tif(count($arr) == 0) {\n\t\treturn NULL;\n\t} else {\n\t\tforeach($arr\
    \ as $value) {\n\t\t\t$sign = $value / abs($value);\n\t\t\t$sum_of_magnitudes\
    \ += abs($value);\n\t\t\t$product_of_signs *= $sign;\n\t\t}\n\t\treturn $sum_of_magnitudes\
    \ * $product_of_signs;\n\t}\n}", "    if (count($arr) == 0) return null;\n   \
    \ return array_reduce($arr, function($sum, $number) {\n        return $sum + $number\
    \ * (int) sign($number);\n    }, 0);\n}", "  if (count($arr) === 0) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $key => $value) {\n\
    \    $sum += abs($value);\n    if ($value === 0) {\n      $prod = 0;\n    } else\
    \ {\n      $prod *= $value < 0 ? -1 : 1;\n    }\n  }\n  return $sum * $prod;\n\
    }\n\n$arr = [1, 2, 2, -4];\n$arr2 = [0, 1];\n$arr3 = [];\n\necho prod_signs($arr)\
    \ . PHP_EOL;\necho prod_signs($arr2) . PHP_EOL;\necho prod_signs($arr3) . PHP_EOL;",
  "  if (!sizeof($arr)) {\n    return null;\n  }\n  $sign_prod = array_product(array_map(function($n)\
    \ {\n    return ($n > 0) - ($n < 0);\n  }, $arr));\n  $abs_sum = array_sum(array_map('abs',\
    \ $arr));\n  return $sign_prod * $abs_sum;\n}\necho prod_signs([1, 2, 2, -4]).\"\
    \\n\";\necho prod_signs([0, 1]).\"\\n\";\necho prod_signs([]);", "  $magnitude_sum\
    \ = 0;\n  $sign_product = 1;\n  foreach ($arr as $num) {\n    if ($num < 0) {\n\
    \      $sign_product *= -1;\n    } elseif ($num > 0) {\n      $sign_product *=\
    \ 1;\n    } else {\n      $sign_product *= 0;\n    }\n    $magnitude_sum += abs($num);\n\
    \  }\n  return $magnitude_sum * $sign_product;\n}\n\necho prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\
    \\n\";", "    $result = array_map(function($x) {\n        return $x < 0 ? -1 :\
    \ ($x > 0 ? 1 : 0);\n    }, $arr);\n    $prod = array_product($result);\n    $mag\
    \ = array_map(function($x) {\n        return abs($x);\n    }, $arr);\n    $sum\
    \ = array_sum($mag);\n    return $prod * $sum;\n}\n", "\tif (empty($arr)) {\n\t\
    \treturn;\n\t}\n\t$prod = array_product(array_map(function($v) {\n\t\tif ($v <\
    \ 0) {\n\t\t\treturn -1;\n\t\t} elseif ($v > 0) {\n\t\t\treturn 1;\n\t\t} else\
    \ {\n\t\t\treturn 0;\n\t\t}\n\t}, $arr));\n\t$sum = array_sum(array_map(function($v)\
    \ {\n\t\treturn abs($v);\n\t}, $arr));\n\treturn $prod * $sum;\n}\n", "  // your\
    \ code goes here\n  $sum = 0;\n  $total = 0;\n  if (count($arr) == 0) {\n    return\
    \ null;\n  }\n  foreach ($arr as $value) {\n    if ($value != 0) {\n      $sum\
    \ += abs($value);\n      $total *= ($value / abs($value));\n    }\n  }\n  return\
    \ $sum * $total;\n}\n", "  if (empty($arr)) return null;\n  $sums = 0;\n  foreach\
    \ ($arr as $num) {\n    $sign = ($num > 0) ? 1 : (($num < 0) ? -1 : 0);\n    $sums\
    \ += $sign * abs($num);\n  }\n  return $sums;\n}\necho prod_signs([1, 2, 2, -4])\
    \ . PHP_EOL;\necho prod_signs([0, 1]) . PHP_EOL;\necho prod_signs([]) . PHP_EOL;",
  "  if (empty($arr)) return NULL;\n  $signs = [1, -1, 0];\n  $signs_sum = $signs_prod\
    \ = 0;\n  foreach ($arr as $key => $value) {\n    $signs_sum += $value;\n    if\
    \ ($value) $signs_prod *= $value / abs($value);\n  }\n  return $signs_sum * $signs_prod;\n\
    }", "  if(empty($arr)){\n    return NULL;\n  }\n  $num_signs = array_map(function($n){\n\
    \    if($n>0){\n      return 1;\n    }\n    elseif($n<0){\n      return -1;\n\
    \    }\n    else{\n      return 0;\n    }\n  }, $arr);\n  $magnitudes = array_map(function($n){\n\
    \    return abs($n);\n  }, $arr);\n  $sign_total = array_product($num_signs);\n\
    \  $magnitude_total = array_sum($magnitudes);\n  return $sign_total * $magnitude_total;\n\
    }", "    //your code here\n}", "  if (count($arr) == 0) {\n    return NULL;\n\
    \  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    $prod *= $value\
    \ == 0 ? 1 : (int)sign($value);\n    $sum += abs($value);\n  }\n  return $prod\
    \ * $sum;\n}\n", "  if (count($arr) == 0) return null;\n  $sum = $prod = 0;\n\
    \  foreach ($arr as $x) {\n    $sum += abs($x);\n    $prod *= $x != 0 ? ($x >\
    \ 0 ? 1 : -1) : 0;\n  }\n  return $sum * $prod;\n}", "    if (sizeof($arr) ==\
    \ 0) {\n        return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach\
    \ ($arr as $val) {\n        $sum += abs($val);\n        if ($val == 0) {\n   \
    \         $prod = 0;\n        } else {\n            $prod *= ($val > 0) ? 1 :\
    \ -1;\n        }\n    }\n    return $sum * $prod;\n}", "  if (sizeof($arr) ==\
    \ 0) {\n    return NULL;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value > 0) {\n      $product *= 1;\n    } elseif\
    \ ($value < 0) {\n      $product *= -1;\n    } else {\n      $product *= 0;\n\
    \    }\n    $sum += abs($value);\n  }\n  return $sum * $product;\n}\n", "  if\
    \ (count($arr) == 0) return;\n  $sum_magnitude = 0;\n  $prod_signs = 1;\n  foreach\
    \ ($arr as $number) {\n    $sum_magnitude += abs($number);\n    $prod_signs *=\
    \ $number <=> 0;\n  }\n  return $sum_magnitude * $prod_signs;\n}", "  if (empty($arr))\
    \ return NULL;\n  $sum_of_magnitudes = 0;\n  $prod_of_signs = 1;\n  foreach ($arr\
    \ as $num) {\n    $sum_of_magnitudes += abs($num);\n    $prod_of_signs *= $num\
    \ <=> 0;\n  }\n  return $sum_of_magnitudes * $prod_of_signs;\n}\necho prod_signs([1,\
    \ 2, 2, -4]);\necho \"\\n\";\necho prod_signs([0, 1]);\necho \"\\n\";\necho prod_signs([]);\n\
    echo \"\\n\";\n", "    $res = 0;\n    foreach ($arr as $elem) {\n        if ($elem\
    \ < 0) {\n            $res -= $elem;\n        } elseif ($elem > 0) {\n       \
    \     $res += $elem;\n        }\n    }\n    if ($res) {\n        $prod = 1;\n\
    \        foreach ($arr as $elem) {\n            if ($elem < 0) {\n           \
    \     $prod *= -1;\n            } elseif ($elem > 0) {\n                $prod\
    \ *= 1;\n            }\n        }\n        return $res * $prod;\n    }\n    return\
    \ null;\n}\n", "    if (count($arr) === 0) {\n        return NULL;\n    }\n\n\
    \    $product = 1;\n    $sum = 0;\n    foreach ($arr as $n) {\n        $sign =\
    \ ($n >= 0) ? 1 : -1;\n        $product *= $sign;\n        $sum += abs($n);\n\
    \    }\n\n    return $product * $sum;\n}\n\necho prod_signs([0, 1]) . \"\\n\"\
    ;\necho prod_signs([1, 2, 2, -4]) . \"\\n\";\necho prod_signs([]) . \"\\n\";",
  "\tif (count($arr) == 0) {\n\t\treturn null;\n\t}\n\t$answer = 1;\n\tforeach ($arr\
    \ as $number) {\n\t\tif ($number != 0) {\n\t\t\t$answer *= abs($number);\n\t\t\
    }\n\t}\n\treturn $answer;\n}", "  if (sizeof($arr) == 0) return null;\n  $prod_signs\
    \ = 1;\n  $sum_magnitudes = 0;\n  foreach ($arr as $n) {\n    if ($n > 0) {\n\
    \      $prod_signs *= 1;\n      $sum_magnitudes += $n;\n    } elseif ($n < 0)\
    \ {\n      $prod_signs *= -1;\n      $sum_magnitudes += abs($n);\n    } else {\n\
    \      $prod_signs *= 0;\n    }\n  }\n  return $prod_signs * $sum_magnitudes;\n\
    }\n", "    $prod = 1;\n    $sum = 0;\n    if (empty($arr)) return null;\n    foreach\
    \ ($arr as $value) {\n        if ($value == 0) {\n            $prod = 0;\n   \
    \         break;\n        }\n        $sign = $value < 0 ? -1 : 1;\n        $prod\
    \ *= $sign;\n        $sum += abs($value);\n    }\n    return $prod * $sum;\n}\n",
  "  $signs = array_map(function($n) {\n    return $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n\
    \  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $product = array_product($signs);\n  $sum = array_sum($magnitudes);\n\
    \  return $product * $sum;\n}\n", "    if (empty($arr)) {\n        return null;\n\
    \    }\n    $prod = 1;\n    $magnitudes = array_map(function($x) { return abs($x);\
    \ }, $arr);\n    $sum = array_sum($magnitudes);\n    foreach ($arr as $x) {\n\
    \        if ($x > 0) {\n            $prod *= 1;\n        } elseif ($x < 0) {\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}", "    $p = array_product($arr);\n   \
    \ $a = array_filter($arr, function($e) {\n        return $e !== 0;\n    });\n\
    \    $s = array_sum($a);\n    return $p*$s;\n}\n", "  if (empty($arr)) return\
    \ null;\n  $num_plus = 0;\n  $num_minus = 0;\n  $prod = 1;\n  foreach ($arr as\
    \ $n) {\n    if ($n == 0) continue;\n    $prod *= $n > 0 ? 1 : -1;\n    if ($n\
    \ > 0) $num_plus++;\n    else $num_minus++;\n  }\n  return $num_plus * $num_minus\
    \ * $prod;\n}", "    $signArr = array_map(function($n) {\n        if ($n > 0)\
    \ {\n            return 1;\n        } else if ($n < 0) {\n            return -1;\n\
    \        } else {\n            return 0;\n        }\n    }, $arr);\n    $magnitudeArr\
    \ = array_map(function($n) {\n        return abs($n);\n    }, $arr);\n    $sign\
    \ = array_product($signArr);\n    $mag = array_sum($magnitudeArr);\n    return\
    \ $sign * $mag;\n}", "  // your code here\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));",
  "  $sum = 0;\n  $product = 1;\n  foreach ($arr as $i) {\n    $sum += abs($i);\n\
    \    $product *= ($i < 0 ? -1 : ($i > 0 ? 1 : 0));\n  }\n  return $sum * $product;\n\
    }\n", "  $zero = $signs = [];\n  foreach ($arr as $key => $value) {\n    $signs[$key]\
    \ = $value < 0 ? -1 : ($value == 0 ? 0 : 1);\n    if ($value == 0) {\n      $zero[]\
    \ = $key;\n    }\n  }\n  if (empty($signs)) {\n    return null;\n  }\n  foreach\
    \ ($zero as $value) {\n    unset($signs[$value]);\n  }\n  $sum = array_sum(array_map('abs',\
    \ $arr));\n  $prod = array_product($signs);\n  return $sum * $prod;\n}", "  $arr_non_zero\
    \ = array_filter($arr, function($element) {\n    return $element != 0;\n  });\n\
    \  if (empty($arr_non_zero)) {\n    return null;\n  }\n  $arr_non_zero_signs =\
    \ array_map(function($element) {\n    return $element > 0 ? 1 : -1;\n  }, $arr_non_zero);\n\
    \  $product_of_signs = array_product($arr_non_zero_signs);\n  $sum_of_magnitudes\
    \ = array_sum(array_map('abs', $arr));\n  return $sum_of_magnitudes * $product_of_signs;\n\
    }\n\nprint_r(prod_signs([1, 2, 2, -4])); // -9\nprint_r(prod_signs([0, 1])); //\
    \ 0\nprint_r(prod_signs([])); // null\n", "    if(empty($arr)) {\n        return\
    \ null;\n    }\n    $narr = array_map(function($num) {\n        if($num < 0) {\n\
    \            return -1;\n        } elseif($num > 0) {\n            return 1;\n\
    \        } else {\n            return 0;\n        }\n    }, $arr);\n    $sum =\
    \ array_sum(array_map('abs', $arr));\n    $mult = array_product($narr);\n    return\
    \ $sum * $mult;\n}", "  if (empty($arr)) return NULL;\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($arr as $number) {\n    $number = abs($number);\n    $sign\
    \ = 1;\n    if ($number != 0) {\n      $sign = $number / $number;\n    }\n   \
    \ $sum += $number;\n    $product *= $sign;\n  }\n  return $sum * $product;\n}",
  "  if (count($arr) === 0) return;\n  $prd = 1;\n  $sum = 0;\n  foreach ($arr as\
    \ $num) {\n    if ($num > 0) {\n      $prd *= 1;\n      $sum += $num;\n    } elseif\
    \ ($num < 0) {\n      $prd *= -1;\n      $sum += abs($num);\n    } else {\n  \
    \    $prd *= 0;\n    }\n  }\n  return $prd * $sum;\n}", "    $result = 1;\n  \
    \  $sum = 0;\n    $negatives = 0;\n    foreach ($arr as $n) {\n        $abs =\
    \ abs($n);\n        $sum += $abs;\n        if ($n < 0) {\n            $negatives++;\n\
    \        }\n    }\n    if ($negatives % 2 == 1) {\n        $result = -1;\n   \
    \ }\n    return $result * $sum;\n}", "    if (empty($arr)) {\n        return null;\n\
    \    }\n    $signs = array_map(function($item) {\n        if ($item < 0) {\n \
    \           return -1;\n        } elseif ($item > 0) {\n            return 1;\n\
    \        } else {\n            return 0;\n        }\n    }, $arr);\n    $prod\
    \ = array_product($signs);\n    $sum = array_sum(array_map(function($item) {\n\
    \        return abs($item);\n    }, $arr));\n    return $sum * $prod;\n}\n", " \
    \   if(empty($arr)) {\n        return;\n    }\n    $sign = 1;\n    $prod = 1;\n\
    \    foreach($arr as $num) {\n        if($num == 0) {\n            $sign = 0;\n\
    \            $prod = 0;\n            break;\n        }\n        if($num < 0) {\n\
    \            $sign *= -1;\n        }\n        $prod *= abs($num);\n    }\n   \
    \ return $sign * $prod;\n}\n", "  $result = array_reduce($arr, function($carry,\
    \ $item) {\n    if ($item > 0) {\n      $carry[0] += $item;\n      $carry[1] *=\
    \ 1;\n    } elseif ($item < 0) {\n      $carry[0] += $item * -1;\n      $carry[1]\
    \ *= -1;\n    } else {\n      $carry[1] *= 0;\n    }\n    return $carry;\n  },\
    \ [0, 1]);\n  return ($result[1] == 0) ? null : $result[0] * $result[1];\n}\n\n\
    echo prod_signs([1, 2, 2, -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\n\
    echo prod_signs([]) . \"\\n\";", "    $prod_signs = 1;\n    $sum_magnitudes =\
    \ 0;\n    if (empty($arr)) {\n        return null;\n    }\n    foreach ($arr as\
    \ $v) {\n        if ($v != 0) {\n            $prod_signs *= ($v / abs($v));\n\
    \        }\n        $sum_magnitudes += abs($v);\n    }\n    return $prod_signs\
    \ * $sum_magnitudes;\n}\n", "    $signs = array_map(function($x) {\n        return\
    \ $x > 0 ? 1 : ($x < 0 ? -1 : 0);\n    }, $arr);\n    if (array_sum($signs) ==\
    \ 0) {\n        return null;\n    }\n    return array_sum(array_map(function($x)\
    \ {\n        return abs($x);\n    }, $arr)) * array_product($signs);\n}", "\t\
    if (empty($arr))\n\t\treturn;\n\t$magnitudes = array_map('abs', $arr);\n\t$signs\
    \ = array_map(function($n) {\n\t\tif ($n < 0)\n\t\t\treturn -1;\n\t\telse if ($n\
    \ > 0)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t}, $arr);\n\t$sum_magnitudes\
    \ = array_sum($magnitudes);\n\t$prod_signs = array_product($signs);\n\treturn\
    \ $sum_magnitudes * $prod_signs;\n}\n", "  $magnitude = 0;\n  $sign = 1;\n  $count\
    \ = 0;\n  foreach ($arr as $num) {\n    if ($num != 0) {\n      $magnitude +=\
    \ abs($num);\n      $sign *= $num;\n      $count++;\n    }\n  }\n  return ($count\
    \ == 0) ? NULL : $magnitude * $sign;\n}", "  if(!$arr) return NULL;\n  $magnitudes\
    \ = array_map(function($val) {\n    return abs($val);\n  }, $arr);\n  $signs =\
    \ array_map(function($val) {\n    return $val == 0 ? 0 : ($val < 0 ? -1 : 1);\n\
    \  }, $arr);\n  $magnitude_sum = array_sum($magnitudes);\n  $sign_product = array_product($signs);\n\
    \  return $magnitude_sum * $sign_product;\n}", "  $count = 0;\n  foreach ($arr\
    \ as $value) {\n    if (abs($value) % 2 == 0) {\n      $count += 1;\n    }\n \
    \ }\n  return $count;\n}\nprint_r(prod_signs([1, 2, 2, -4]));\necho PHP_EOL;\n\
    print_r(prod_signs([0, 1]));\necho PHP_EOL;\nprint_r(prod_signs([]));\necho PHP_EOL;",
  "    if (count($arr) == 0) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value != 0) {\n            $prod *= ($value/abs($value));\n\
    \            $sum += abs($value);\n        }\n    }\n    return $prod * $sum;\n\
    }", "    $magnitudes = array_map(\n        function($n) {\n            return\
    \ abs($n);\n        },\n        $arr\n    );\n    $signs = array_map(\n      \
    \  function($n) {\n            return ($n > 0) - ($n < 0);\n        },\n     \
    \   $arr\n    );\n    return array_sum($magnitudes) * array_product($signs);\n\
    }", "  if (empty($arr)) return null;\n  $product = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $int) {\n    $sum += abs($int);\n    $product *= $int == 0 ? 1 : $int\
    \ / abs($int);\n  }\n  return $sum * $product;\n}", "    // TODO: Your code here\n\
    }", "    if (empty($arr)) return NULL;\n    return (abs(array_product($arr)) *\
    \ array_product(array_map(function($a) {\n        return $a == 0 ? 0 : ($a > 0\
    \ ? 1 : -1);\n    }, $arr)));\n}\n", "  $sum = 0;\n  $sign = 1;\n  foreach ($arr\
    \ as $item) {\n    if ($item === 0) {\n      $sign = 0;\n      break;\n    }\n\
    \    $sum += abs($item);\n    $sign *= ($item < 0) ? -1 : 1;\n  }\n  return $sign\
    \ === 0 ? null : $sum * $sign;\n}\n", "    if(count($arr) == 0) {\n        return\
    \ null;\n    }\n    $result = 0;\n    $sum = 0;\n    $product = 1;\n    foreach($arr\
    \ as $value) {\n        $sum += abs($value);\n        $product *= $value == 0\
    \ ? 1 : $value / abs($value);\n    }\n    $result = $sum * $product;\n    return\
    \ $result;\n}\n", "  if (count($arr) === 0) {\n    return null;\n  }\n  // Your\
    \ code here.\n}", "  if(empty($arr)) {\n    return 'None';\n  }\n\n  $sums = array_sum(array_map(function($i)\
    \ {\n    return abs($i);\n  }, $arr));\n\n  $prod = array_product(array_map(function($i)\
    \ {\n    return $i < 0 ? -1 : ($i > 0 ? 1 : 0);\n  }, $arr));\n\n  return $sums\
    \ * $prod;\n}\n", "  if (empty($arr)) return null;\n  $negative = 0;\n  $positive\
    \ = 0;\n  $zeros = 0;\n  foreach ($arr as $a) {\n    if ($a > 0) $positive++;\n\
    \    elseif ($a < 0) $negative++;\n    else $zeros++;\n  }\n  $sum = array_sum(array_map('abs',\
    \ $arr));\n  if ($zeros > 0) return 0;\n  elseif ($positive > 0 && $negative >\
    \ 0) return $sum;\n  elseif ($positive > 0) return $sum;\n  else return -$sum;\n\
    }\n", "    if(!empty($arr)){\n        $product = 1;\n        $sum = 0;\n     \
    \   foreach($arr as $num){\n            if($num > 0){\n                $product\
    \ *= 1;\n                $sum += $num;\n            }\n            elseif($num\
    \ < 0){\n                $product *= -1;\n                $sum += abs($num);\n\
    \            }\n            elseif($num == 0){\n                $product *= 0;\n\
    \            }\n        }\n        if($product == 0){\n            return 0;\n\
    \        }\n        else{\n            return $sum * $product;\n        }\n  \
    \  }\n    else{\n        return null;\n    }\n}\nprint_r(prod_signs([1, 2, 2,\
    \ -4]));\nprint_r(prod_signs([0, 1]));\nprint_r(prod_signs([]));", "  $arr_count\
    \ = count($arr);\n  if ($arr_count == 0) {\n    return NULL;\n  }\n  $prod = 1;\n\
    \  $sum = 0;\n  for ($i = 0; $i < $arr_count; $i++) {\n    $prod *= sign($arr[$i]);\n\
    \    $sum += abs($arr[$i]);\n  }\n  return $prod * $sum;\n}", "    if (!count($arr))\
    \ return null;\n    $prod = 1;\n    $sum = 0;\n    foreach ($arr as $int) {\n\
    \        $sum += abs($int);\n        $prod *= $int < 0 ? -1 : $int > 0 ? 1 : 0;\n\
    \    }\n    return $sum * $prod;\n}\n", "    if (count($arr) < 1) {\n        return\
    \ null;\n    }\n    $sum = 0;\n    $count_neg = 0;\n    $prod = 1;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value > 0) {\n            $sum += $value;\n\
    \        } elseif ($value < 0) {\n            $count_neg++;\n            $sum\
    \ += abs($value);\n        }\n    }\n    $count_z = array_count_values($arr)[0];\n\
    \    $count_pos = count($arr) - $count_neg - $count_z;\n    if ($count_neg % 2\
    \ == 0) {\n        $prod = 1;\n    } else {\n        $prod = -1;\n    }\n    if\
    \ ($count_pos == 0 && $count_neg == 0) {\n        $prod = 0;\n    }\n    return\
    \ $sum * $prod;\n}\n", "    $s = 0;\n    foreach ($arr as $n) {\n        if ($n\
    \ < 0) {\n            $s -= $n;\n        } else if ($n > 0) {\n            $s\
    \ += $n;\n        }\n    }\n    return ($s == 0 ? null : $s);\n}\n$tests = [\n\
    \    [[1, 2, 2, -4], -9],\n    [[0, 1], 0],\n    [[], null],\n];\nforeach ($tests\
    \ as [$arr, $expected]) {\n    $result = prod_signs($arr);\n    assert($result\
    \ == $expected);\n}\necho \"test passed!\\n\";", "\t$result = 1;\n\tforeach ($arr\
    \ as $val) {\n\t\tif ($val == 0) {\n\t\t\t$result = 0;\n\t\t\tbreak;\n\t\t}\n\t\
    \t$result *= $val/abs($val);\n\t}\n\treturn array_sum(array_map('abs', $arr))\
    \ * $result;\n}\necho prod_signs([1, 2, 2, -4]);", "  $sum = 0;\n  $prod = 1;\n\
    \  foreach ($arr as $value) {\n    if (is_int($value)) {\n      $sum += abs($value);\n\
    \      $prod *= (int) sign($value);\n    }\n  }\n  return $sum * $prod;\n}\necho\
    \ prod_signs([1, 2, 2, -4]) . \"\\n\"; // -9\necho prod_signs([0, 1]) . \"\\n\"\
    ; // 0\necho prod_signs([]) . \"\\n\"; // \"None\"", "    $prod = $magn = 1;\n\
    \    foreach ($arr as $value) {\n        $magn += abs($value);\n        if ($value)\
    \ $prod *= ($value/abs($value));\n    }\n    return !empty($arr) ? $magn * $prod\
    \ : NULL;\n}\n\necho prod_signs([1, 2, 2, -4]);\necho prod_signs([0, 1]);\necho\
    \ prod_signs([]);\n", "    if (!count($arr)) return null;\n    $magnitudes = array_map('abs',\
    \ $arr);\n    $signs = array_map(function($n) {\n        if ($n > 0) return 1;\n\
    \        if ($n < 0) return -1;\n        return 0;\n    }, $arr);\n    $magnitudesSum\
    \ = array_sum($magnitudes);\n    $signsProd = array_product($signs);\n    return\
    \ $magnitudesSum * $signsProd;\n}\n", "  $arr = array_filter($arr, function($i)\
    \ {\n    return $i !== 0;\n  });\n  $total = 1;\n  foreach ($arr as $item) {\n\
    \    $total *= abs($item);\n  }\n  return ($total === 1) ? null : $total;\n}\n",
  "    $magnitude = function($x) {\n        return abs($x);\n    };\n    $sign = function($x)\
    \ {\n        return $x == 0 ? 0 : ($x < 0 ? -1 : 1);\n    };\n    $product = function($a,\
    \ $b) {\n        return $a * $b;\n    };\n    $arr = array_map($magnitude, $arr);\n\
    \    $signs = array_map($sign, $arr);\n    $signs = array_values(array_filter($signs,\
    \ function($v) {\n        return $v != 0;\n    }));\n    if (!$signs) {\n    \
    \    return null;\n    }\n    $product = array_reduce($signs, $product);\n   \
    \ $sum = array_sum($arr);\n    return $sum * $product;\n}", "    $nums = [];\n\
    \    $signs = [];\n    foreach ($arr as $value) {\n        $signs[] = intval($value\
    \ >= 0) * 2 - 1;\n        $nums[] = abs($value);\n    }\n    return array_product($signs)\
    \ * array_sum($nums);\n}\n", "    if (empty($arr)) return NULL;\n    $sum = 0;\n\
    \    $prod = 1;\n    foreach ($arr as $v) {\n        $sum += abs($v);\n      \
    \  if ($v == 0) {\n            $prod = 0;\n            break;\n        }\n   \
    \     if ($v > 0) $prod *= 1;\n        else $prod *= -1;\n    }\n    return $sum\
    \ * $prod;\n}", "  $sum = array_sum(array_map(function($elem) { return abs($elem);\
    \ }, $arr));\n  $all_prod = array_product(array_map(function($elem) {\n    return\
    \ ($elem >= 0) ? 1 : -1;\n  }, $arr));\n  return $sum * $all_prod;\n}\n\necho\
    \ \"Running tests...\\n\";\nassert(prod_signs([1, 2, 2, -4]) == -9);\nassert(prod_signs([0,\
    \ 1]) == 0);\nassert(prod_signs([]) == null);\necho \"Done\\n\";", "  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  $magnitude = 1;\n  $signs = 0;\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value == 0) {\n      continue;\n    }\n    $magnitude\
    \ *= abs($value);\n    if ($value > 0) {\n      $signs += 1;\n    } else {\n \
    \     $signs -= 1;\n    }\n  }\n  return $magnitude * $signs;\n}\n", "    if (empty($arr))\
    \ return;\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as $v) {\n       \
    \ if ($v > 0) {\n            $prod *= 1;\n            $sum += $v;\n        } elseif\
    \ ($v < 0) {\n            $prod *= -1;\n            $sum += abs($v);\n       \
    \ } elseif ($v == 0) {\n            $prod *= 0;\n        }\n    }\n    return\
    \ $sum * $prod;\n}\n\necho prod_signs([1, 2, 2, -4]) . \"<br>\";\necho prod_signs([0,\
    \ 1]) . \"<br>\";\necho prod_signs([]) . \"<br>\";", "\tif (empty($arr)) {\n\t\
    \treturn null;\n\t}\n\n\t$magnitude = array_map(\n\t\tfunction($x) {\n\t\t\treturn\
    \ abs($x);\n\t\t},\n\t\t$arr\n\t);\n\n\t$multSigns = array_reduce(\n\t\t$arr,\n\
    \t\tfunction($acc, $x) {\n\t\t\t$sign = 0;\n\t\t\tif ($x > 0) {\n\t\t\t\t$sign\
    \ = 1;\n\t\t\t} elseif ($x < 0) {\n\t\t\t\t$sign = -1;\n\t\t\t}\n\t\t\treturn\
    \ $acc * $sign;\n\t\t},\n\t\t1\n\t);\n\n\treturn array_sum($magnitude) * $multSigns;\n\
    }\n", "  if(empty($arr)) return NULL;\n  $signs = 1;\n  $result = 0;\n  foreach($arr\
    \ as $value) {\n    if($value > 0) {\n      $signs *= 1;\n      $result += $value;\n\
    \    } elseif($value < 0) {\n      $signs *= -1;\n      $result += $value;\n \
    \   } else {\n      $signs *= 0;\n    }\n  }\n  return $result * $signs;\n}\n",
  "  $sums = 0;\n  $prod = 1;\n  foreach ($arr as $item) {\n    if ($item === 0) {\n\
    \      $sums += 0;\n      $prod *= 1;\n    } elseif ($item > 0) {\n      $sums\
    \ += $item;\n      $prod *= 1;\n    } else {\n      $sums += abs($item);\n   \
    \   $prod *= -1;\n    }\n  }\n  if (empty($arr)) {\n    return NULL;\n  } else\
    \ {\n    return $sums * $prod;\n  }\n}", "    if (!$arr) return NULL;\n    $sum\
    \ = 0;\n    $signs = [];\n    foreach ($arr as $v) {\n        if ($v == 0) return\
    \ 0;\n        $sum += abs($v);\n        $signs[] = $v > 0 ? 1 : -1;\n    }\n \
    \   return $sum * array_product($signs);\n}\necho prod_signs([1, 2, 2, -4]) .\
    \ \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\";",
  "  if (count($arr) == 0) return null;\n  $sign = 1;\n  $prod = 1;\n  foreach ($arr\
    \ as $num) {\n    $mag = abs($num);\n    $prod *= $mag;\n    if ($num < 0) $sign\
    \ *= -1;\n  }\n  return $prod * $sign;\n}", "    $sum = 0;\n    $prod = 1;\n \
    \   $empty = true;\n    foreach ($arr as $num) {\n        if ($num) {\n      \
    \      $sum += abs($num);\n            $prod *= (int) ($num > 0);\n          \
    \  $empty = false;\n        }\n    }\n    return ($empty ? null : $sum * $prod);\n\
    }", "  $result = null;\n  if (!empty($arr)) {\n    $result = 0;\n    $sign_product\
    \ = 1;\n    foreach ($arr as $n) {\n      if ($n < 0) {\n        $sign_product\
    \ *= -1;\n      } elseif ($n > 0) {\n        $sign_product *= 1;\n      } else\
    \ {\n        $sign_product *= 0;\n      }\n      $result += abs($n);\n    }\n\
    \    $result *= $sign_product;\n  }\n  return $result;\n}", "  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  $signs = array_map(function($n) {\n    if ($n == 0) {\n      return 0;\n  \
    \  } else if ($n > 0) {\n      return 1;\n    } else {\n      return -1;\n   \
    \ }\n  }, $arr);\n  $sign_prod = array_product($signs);\n  if ($sign_prod == 0)\
    \ {\n    return NULL;\n  } else {\n    return $magnitude_sum * $sign_prod;\n \
    \ }\n}", "  if (empty($arr)) {\n    return null;\n  }\n  $result = 0;\n  $signs\
    \ = [1, -1, 0];\n  foreach ($arr as $i) {\n    foreach ($signs as $sign) {\n \
    \     if ($i === $sign) {\n        $result += $sign * abs($i);\n      }\n    }\n\
    \  }\n  return $result;\n}\n", "    if(empty($arr)) {\n        return null;\n\
    \    }\n    $signs = array_filter($arr, function($x) {\n        return $x != 0;\n\
    \    });\n    $magnitudes = array_map(function($x) {\n        return abs($x);\n\
    \    }, $arr);\n    $sign_product = array_product($signs);\n    $magnitude_sum\
    \ = array_sum($magnitudes);\n    return $sign_product * $magnitude_sum;\n}", " \
    \ $count = 0;\n  $s = 0;\n  $count = count($arr);\n  if ($count == 0) {\n    return\
    \ NULL;\n  }\n  $prod = 1;\n  for ($i = 0; $i < $count; $i++) {\n    $s += abs($arr[$i]);\n\
    \    if ($arr[$i] != 0) {\n      $prod *= $arr[$i] > 0 ? 1 : -1;\n    }\n  }\n\
    \  return $s * $prod;\n}\nprint prod_signs([1, 2, 2, -4]);", "    if (count($arr)\
    \ == 0) {\n        return null;\n    }\n    $signs = 1;\n    $magnitudes = 0;\n\
    \    foreach ($arr as $key => $value) {\n        $magnitudes += abs($value);\n\
    \        $signs *= ($value != 0) ? ($value / abs($value)) : 0;\n    }\n    return\
    \ $magnitudes * $signs;\n}", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($arr as\
    \ $i) {\n\t\t$sum += abs($i);\n\t\t$product *= ($i == 0) ? 1 : $i / abs($i);\n\
    \t}\n\treturn $sum * $product;\n}\n", "    $count = 0;\n    foreach ($arr as $k\
    \ => $v) {\n        if ($v == 0) {\n            $count++;\n        }\n    }\n\
    \    if ($count == count($arr)) {\n        return 0;\n    }\n    $sum = 0;\n \
    \   $product = 1;\n    foreach ($arr as $k => $v) {\n        $sign = $v <=> 0;\n\
    \        $sum += abs($v);\n        $product *= $sign;\n    }\n    return $sum\
    \ * $product;\n}\n", "  if (empty($arr)) return null;\n  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($arr as $number) {\n    $number = abs($number);\n    $sum +=\
    \ $number;\n    $product *= ($number ? ($number < 0 ? -1 : 1) : 0);\n  }\n  return\
    \ $sum * $product;\n}\nprint prod_signs([1, 2, 2, -4]) . \"\\n\";\nprint prod_signs([0,\
    \ 1]) . \"\\n\";\nprint prod_signs([]) . \"\\n\";", "    if(count($arr) == 0)\
    \ {\n        return;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach($arr as\
    \ $num) {\n        $prod *= sign($num);\n        $sum += abs($num);\n    }\n \
    \   return $sum * $prod;\n}\n", "    $product = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value < 0) {\n            $product *= -1;\n\
    \        } elseif ($value > 0) {\n            $product *= 1;\n        } else {\n\
    \            $product *= 0;\n        }\n        $sum += abs($value);\n    }\n\
    \    return $product * $sum;\n}\n", "    if (empty($arr)) return null;\n    $prod\
    \ = 1;\n    $sum = 0;\n    foreach ($arr as $item) {\n        if ($item > 0) {\n\
    \            $prod *= 1;\n        } elseif ($item < 0) {\n            $prod *=\
    \ -1;\n        } else {\n            $prod *= 0;\n        }\n        $sum += abs($item);\n\
    \    }\n    return $sum * $prod;\n}\n", "  if (empty($arr)) {\n    return;\n \
    \ }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $item) {\n    if ($item > 0)\
    \ {\n      $sum += $item;\n    } elseif ($item < 0) {\n      $sum += -$item;\n\
    \      $prod *= -1;\n    }\n  }\n  return $sum * $prod;\n}", "    if (empty($arr))\
    \ {\n        return null;\n    }\n    $prod = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $num) {\n        $sign = $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n        $prod\
    \ *= $sign;\n        $sum += abs($num);\n    }\n    return $sum * $prod;\n}\n",
  "    if(empty($arr)){\n        return null;\n    }\n\n    $s = 1;\n    $r = 0;\n\
    \    foreach($arr as $k => $v){\n        if($v != 0){\n            $r += abs($v);\n\
    \            $s *= $v / abs($v);\n        }\n    }\n    return $r * $s;\n}\n",
  "    //\n}", "    $sum = 0;\n    $product = 1;\n    if (!empty($arr)) {\n      \
    \  foreach ($arr as $value) {\n            if ($value > 0) {\n               \
    \ $product *= 1;\n            } elseif ($value < 0) {\n                $product\
    \ *= -1;\n            } else {\n                $product *= 0;\n            }\n\
    \            $sum += abs($value);\n        }\n        return $sum * $product;\n\
    \    } else {\n        return null;\n    }\n}", "  if (count($arr) === 0) return\
    \ null;\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $n) {\n    $prod *= $n\
    \ < 0 ? -1 : $n === 0 ? 0 : 1;\n    $sum += abs($n);\n  }\n  return $prod * $sum;\n\
    }", "    if (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($arr as $el) {\n        if ($el > 0) {\n            $sum\
    \ += $el;\n            $product *= 1;\n        } elseif ($el < 0) {\n        \
    \    $sum += abs($el);\n            $product *= -1;\n        } else {\n      \
    \      $product *= 0;\n        }\n    }\n    return $sum * $product;\n}", "  if\
    \ (count($arr) === 0) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $value) {\n    $sign = $value === 0 ? 0 : $value / abs($value);\n \
    \   $prod *= $sign;\n    $sum += abs($value);\n  }\n  return $prod * $sum;\n}\n",
  "    if(empty($arr)) {\n        return null;\n    }\n    $arr = array_map(function($number)\
    \ {\n        if($number > 0) {\n            return 1;\n        } elseif($number\
    \ < 0) {\n            return -1;\n        } else {\n            return 0;\n  \
    \      }\n    }, $arr);\n    $arr = array_filter($arr, function($number) {\n \
    \       return $number != 0;\n    });\n    $sum_magnitudes = array_sum(array_map(function($number)\
    \ {\n        return abs($number);\n    }, $arr));\n    $product_signs = array_product($arr);\n\
    \    return $sum_magnitudes * $product_signs;\n}", "    // start coding here\n\
    \    $sum = 0;\n    $product = 1;\n    if (count($arr) == 0) {\n        return\
    \ null;\n    }\n    foreach ($arr as $key => $value) {\n        $sum += abs($value);\n\
    \        if ($value != 0) {\n            $product *= $value/abs($value);\n   \
    \     }\n    }\n    return $sum * $product;\n}", "\t$n = count($arr);\n\tif ($n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\t$signs = 1;\n\t$magnitudes = 0;\n\tfor ($i =\
    \ 0; $i < $n; $i++) {\n\t\t$number = $arr[$i];\n\t\tif ($number < 0) {\n\t\t\t\
    $signs *= -1;\n\t\t} else if ($number > 0) {\n\t\t\t$signs *= 1;\n\t\t} else {\n\
    \t\t\t$signs *= 0;\n\t\t}\n\t\t$magnitudes += abs($number);\n\t}\n\treturn $signs\
    \ * $magnitudes;\n}", "  if(empty($arr)) {\n    return NULL;\n  }\n\n  $signs\
    \ = array_map(function($num) {\n    if($num == 0) {\n      return 0;\n    }\n\
    \    return $num / abs($num);\n  }, $arr);\n\n  $magnitudes = array_map(function($num)\
    \ {\n    return abs($num);\n  }, $arr);\n\n  $product_of_signs = array_product($signs);\n\
    \  $sum_of_magnitudes = array_sum($magnitudes);\n\n  return $product_of_signs\
    \ * $sum_of_magnitudes;\n}", "    $magnitude_sum = 0;\n    $product_signs = 1;\n\
    \    $numbers_count = count($arr);\n    if ($numbers_count == 0) {\n        return\
    \ NULL;\n    }\n    foreach ($arr as $number) {\n        $product_signs *= $number\
    \ > 0 ? 1 : ($number < 0 ? -1 : 0);\n        $magnitude_sum += abs($number);\n\
    \    }\n    return $magnitude_sum * $product_signs;\n}\n", "    $result = null;\n\
    \    if (!empty($arr)) {\n        $product = 1;\n        $sum = 0;\n        foreach\
    \ ($arr as $value) {\n            $sum += abs($value);\n            $product *=\
    \ ($value < 0) ? -1 : $value;\n        }\n        $result = $sum * $product;\n\
    \    }\n    return $result;\n}", "    if (empty($arr)) {\n        return null;\n\
    \    }\n    $sign = 1;\n    $sum = 0;\n    foreach ($arr as $n) {\n        $sign\
    \ *= $n == 0 ? 1 : $n / abs($n);\n        $sum += abs($n);\n    }\n    return\
    \ $sign * $sum;\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));", "  if (empty($arr))\
    \ return null;\n  $sum = 0;\n  $mult = 1;\n  foreach ($arr as $number) {\n   \
    \ $sum += abs($number);\n    $mult *= (int)$number > 0 ? 1 : ($number < 0 ? -1\
    \ : 0);\n  }\n  return $sum * $mult;\n}", "  if (empty($arr)) {\n    return NULL;\n\
    \  }\n\n  $res = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num !=\
    \ 0) {\n      $res *= $num / abs($num);\n    }\n    $sum += abs($num);\n  }\n\
    \  return $res * $sum;\n}\n\nprint_r(prod_signs([1, 2, 2, -4]) . \"\\n\");\nprint_r(prod_signs([0,\
    \ 1]) . \"\\n\");\nprint_r(prod_signs([]) . \"\\n\");", "  $arr = array_filter($arr,\
    \ function($v) { return $v <> 0; });\n  $s = 1;\n  $m = 0;\n  foreach ($arr as\
    \ $x) {\n    $s *= ($x > 0 ? 1 : -1);\n    $m += abs($x);\n  }\n  return $m *\
    \ $s;\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));\nprint_r(prod_signs([0, 1]));\n\
    print_r(prod_signs([]));", "  $product = 1;\n  $sum = 0;\n  foreach ($arr as $number)\
    \ {\n    if ($number > 0) {\n      $product *= 1;\n      $sum += $number;\n  \
    \  } elseif ($number < 0) {\n      $product *= -1;\n      $sum += abs($number);\n\
    \    } else {\n      $product *= 0;\n    }\n  }\n  if ($product !== 0) {\n   \
    \ return $sum * $product;\n  } else {\n    return $product;\n  }\n}\n\nprint_r(prod_signs([1,\
    \ 2, 2, -4]));\nprint_r(prod_signs([0, 1]));\nprint_r(prod_signs([]));\n", " \
    \   if (empty($arr)) {\n        return null;\n    }\n\n    $sum_signs = 0;\n \
    \   $mult_magnitude = 1;\n    foreach ($arr as $num) {\n        $sum_signs +=\
    \ $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n        $mult_magnitude *= abs($num);\n\
    \    }\n\n    return $sum_signs * $mult_magnitude;\n}", "    if (empty($arr))\
    \ {\n        return null;\n    }\n    $prod = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $num) {\n        $prod *= $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n        $sum\
    \ += abs($num);\n    }\n    return $prod * $sum;\n}\n", "\t$signs = array_map(function($x)\
    \ {\n\t\tif ($x < 0) return -1;\n\t\tif ($x > 0) return 1;\n\t\treturn 0;\n\t\
    }, $arr);\n\t$count_zeros = count(array_filter($signs, function($x) {\n\t\treturn\
    \ $x == 0;\n\t}));\n\tif ($count_zeros > 0) return NULL;\n\t$product = array_product($signs);\n\
    \t$magnitudes = array_map(function($x) {\n\t\treturn abs($x);\n\t}, $arr);\n\t\
    $sum = array_sum($magnitudes);\n\treturn $sum * $product;\n}\necho prod_signs([1,\
    \ 2, 2, -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([])\
    \ . \"\\n\";", "    // Write your code here\n    $prod = 1;\n    $sum = 0;\n \
    \   $counter = 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n\
    \            $prod *= 1;\n            $sum += $value;\n            $counter +=\
    \ 1;\n        } elseif ($value < 0) {\n            $prod *= -1;\n            $sum\
    \ += $value;\n            $counter += 1;\n        } else {\n            $prod\
    \ *= 1;\n            $counter += 1;\n        }\n    }\n    return $counter ==\
    \ 0 ? null : $sum * $prod;\n}\n", "    if (empty($arr)) return null;\n    $prod\
    \ = array_product(array_map(function($x) {\n        return $x >= 0 ? 1 : -1;\n\
    \    }, $arr));\n    $sum = array_sum(array_map(function($x) {\n        return\
    \ abs($x);\n    }, $arr));\n    return $prod * $sum;\n}", "\tif (empty($arr))\
    \ {\n\t\treturn \"None\";\n\t}\n\t$sign = 1;\n\t$sum = 0;\n\tforeach ($arr as\
    \ $val) {\n\t\tif ($val > 0) {\n\t\t\t$sign *= 1;\n\t\t} elseif ($val < 0) {\n\
    \t\t\t$sign *= -1;\n\t\t} else {\n\t\t\t$sign *= 0;\n\t\t}\n\t\t$sum += abs($val);\n\
    \t}\n\treturn $sum * $sign;\n}\n\n$array = [1, 2, 2, -4];\necho \"<pre>\";\nprint_r($array);\n\
    echo \"</pre>\";\necho prod_signs($array) . \"<br>\";\n\n$array = [0, 1];\necho\
    \ \"<pre>\";\nprint_r($array);\necho \"</pre>\";\necho prod_signs($array) . \"\
    <br>\";\n\n$array = [];\necho \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n\
    echo prod_signs($array) . \"<br>\";", "    $sum = 0;\n    $product = 1;\n    if\
    \ (sizeof($arr) == 0) {\n        return null;\n    }\n    foreach ($arr as $element)\
    \ {\n        if ($element > 0) {\n            $product *= 1;\n        } elseif\
    \ ($element < 0) {\n            $product *= -1;\n        } else {\n          \
    \  $product *= 0;\n        }\n        $sum += abs($element);\n    }\n    return\
    \ $sum * $product;\n}", "  if (!$arr) {\n    return;\n  }\n  $signs = array_filter($arr,\
    \ function($x) {\n    return $x == 0 ? false : true;\n  });\n  $magnitudes = array_map(function($x)\
    \ {\n    return abs($x);\n  }, $arr);\n  $sign = array_product($signs);\n  $magnitude\
    \ = array_sum($magnitudes);\n  return $sign * $magnitude;\n}", "  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  else {\n    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($arr as $num) {\n      $abs_num = abs($num);\n      $sign = $num > 0 ? 1 :\
    \ ($num < 0 ? -1 : 0);\n      $sum += $abs_num;\n      $product *= $sign;\n  \
    \  }\n    return $sum * $product;\n  }\n}", "  // your code here\n}", "    $res\
    \ = 1;\n    foreach ($arr as $a) {\n        $r = $a / abs($a);\n        if ($r\
    \ != 0) $res *= $r;\n    }\n    $arr = array_map(function($n) {\n        return\
    \ abs($n);\n    }, $arr);\n    return array_sum($arr) * $res;\n}\necho prod_signs([1,\
    \ 2, 2, -4]) . PHP_EOL;\necho prod_signs([0, 1]) . PHP_EOL;\necho prod_signs([])\
    \ . PHP_EOL;", "    $sum_of_magnitudes = 0;\n    $prod_of_signs = 1;\n    if (count($arr)\
    \ == 0) return;\n    foreach ($arr as $num) {\n        $sum_of_magnitudes += abs($num);\n\
    \        $prod_of_signs *= $num <=> 0;\n    }\n    return $sum_of_magnitudes *\
    \ $prod_of_signs;\n}", "  $result = 1;\n  if (empty($arr)) {\n    return NULL;\n\
    \  }\n  foreach ($arr as $item) {\n    $result *= sign($item);\n  }\n  return\
    \ $result;\n}\n", "  $magnitudeSum = 0;\n  $signProduct = 1;\n  if (empty($arr))\
    \ {\n    return null;\n  }\n  foreach ($arr as $value) {\n    $signProduct *=\
    \ $value == 0 ? 0 : ($value > 0 ? 1 : -1);\n    $magnitudeSum += abs($value);\n\
    \  }\n  return $magnitudeSum * $signProduct;\n}\necho prod_signs([1, 2, 2, -4]);",
  "    if (count($arr) == 0) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $a) {\n        $sum += abs($a);\n        $prod *=\
    \ $a == 0 ? 1 : $a / abs($a);\n    }\n    return $sum * $prod;\n}", "  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  $signs = array_map(function($e) {\n    if ($e >\
    \ 0) {\n      return 1;\n    } elseif ($e < 0) {\n      return -1;\n    } else\
    \ {\n      return 0;\n    }\n  }, $arr);\n  $sum = array_sum(array_map('abs',\
    \ $arr));\n  $signs_product = array_product($signs);\n  return $sum * $signs_product;\n\
    }", "    // here goes your code...\n}\n", "  $x = array_product($arr);\n  if ($x\
    \ === 0) {\n    return 0;\n  } else {\n    return array_sum(array_map(function($y)\
    \ { return abs($y); }, $arr)) * $x / abs($x);\n  }\n}", "  if (!$arr) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\necho prod_signs([1, 2, 2, -4]), \"\\n\";\n\
    echo prod_signs([0, 1]), \"\\n\";\necho prod_signs([]), \"\\n\";", "  $count_positive\
    \ = array_count_values($arr)[1];\n  $count_negative = array_count_values($arr)[-1];\n\
    \  $count_zero = array_count_values($arr)[0];\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  if($count_positive + $count_negative === 0) {\n    return 0;\n\
    \  }\n  return $count_positive * $count_negative - $count_zero;\n}\n", "    if\
    \ (empty($arr)) {\n        return NULL;\n    }\n    $prod = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $x) {\n        if ($x > 0) {\n            $sum += $x;\n\
    \        } elseif ($x < 0) {\n            $sum -= $x;\n            $prod *= -1;\n\
    \        }\n    }\n    return $sum * $prod;\n}\n\nprint_r(prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\");\nprint_r(prod_signs([0, 1]) . \"\\n\");\nprint_r(prod_signs([])\
    \ . \"\\n\");", "  if (!$arr) return;\n  $product = 1;\n  $sum = 0;\n  foreach\
    \ ($arr as $element) {\n    if ($element < 0) {\n      $product *= -1;\n    }\
    \ elseif ($element > 0) {\n      $product *= 1;\n    } else {\n      $product\
    \ *= 0;\n    }\n    $sum += abs($element);\n  }\n  return $sum * $product;\n}\n",
  "  // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example:\n  // print \"Hello world!\";\n  $sum = 0;\n  $prod\
    \ = 1;\n  if(count($arr) == 0) {\n    return;\n  }\n  foreach($arr as $val) {\n\
    \    $sum += abs($val);\n    if($val != 0) {\n      $prod *= ($val > 0) ? 1 :\
    \ -1;\n    }\n  }\n  return $sum * $prod;\n}\n\necho prod_signs([1, 2, 2, -4])\
    \ . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\"\
    ;", "    if (empty($arr)) {\n        return NULL;\n    }\n    $product = 1;\n\
    \    $sum = 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n  \
    \          $product *= 1;\n        } elseif ($value < 0) {\n            $product\
    \ *= -1;\n        } else {\n            $product *= 0;\n        }\n        $sum\
    \ += abs($value);\n    }\n    return $sum * $product;\n}", "    // write your\
    \ code here\n}", "    $total = 0;\n    if (count($arr) > 0) {\n        $signs\
    \ = array_map(function($num) {\n            return $num < 0 ? -1 : ($num > 0 ?\
    \ 1 : 0);\n        }, $arr);\n        $sign_product = array_product($signs);\n\
    \        $magnitudes = array_map(function($num) {\n            return abs($num);\n\
    \        }, $arr);\n        $total = array_sum($magnitudes) * $sign_product;\n\
    \    }\n    return $total;\n}\n\necho prod_signs([1, 2, 2, -4]) . PHP_EOL;\necho\
    \ prod_signs([0, 1]) . PHP_EOL;\necho prod_signs([]) . PHP_EOL;", "  if(empty($arr))\
    \ {\n    return NULL;\n  }\n  $sign = 1;\n  $magn = 0;\n  foreach($arr as $value)\
    \ {\n    if($value < 0) {\n      $sign *= -1;\n    }\n    if($value < 0) {\n \
    \     $value *= -1;\n    }\n    $magn += $value;\n  }\n  return $magn * $sign;\n\
    }\n", "  $arrOfPositives = array_filter($arr, function($a) {\n    return $a >\
    \ 0;\n  });\n  $arrOfNegatives = array_filter($arr, function($a) {\n    return\
    \ $a < 0;\n  });\n  $arrOfMagnitudes = array_map(function($a) {\n    return abs($a);\n\
    \  }, $arr);\n  $arrLength = count($arr);\n  if ($arrLength === 0) {\n    return\
    \ NULL;\n  }\n  $signsProduct = count($arrOfPositives) % 2 === 0 ? 1 : -1;\n \
    \ return array_sum($arrOfMagnitudes) * $signsProduct;\n}\n", "  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  return array_reduce($arr, function($acc, $x) {\n\
    \    return $acc + $x * abs($x);\n  }, 0);\n}\n\n$arr1 = [1, 2, 2, -4];\n$arr2\
    \ = [0, 1];\n$arr3 = [];\n\nprint_r(prod_signs($arr1)) . \"\\n\";\nprint_r(prod_signs($arr2))\
    \ . \"\\n\";\nprint_r(prod_signs($arr3)) . \"\\n\";", "    if (!$arr) {\n    \
    \    return null;\n    }\n    $sum = 0;\n    $sign = 1;\n    foreach ($arr as\
    \ $value) {\n        $sum += abs($value);\n        $sign *= $value > 0 ? 1 : ($value\
    \ < 0 ? -1 : 0);\n    }\n    return $sum * $sign;\n}", "  if (!$arr) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($number) {\n    if ($number > 0) {\n\
    \      return 1;\n    } elseif ($number < 0) {\n      return -1;\n    } else {\n\
    \      return 0;\n    }\n  }, $arr);\n  $sign_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($number) {\n    return abs($number);\n  },\
    \ $arr);\n  $magnitude_sum = array_sum($magnitudes);\n  return $sign_prod * $magnitude_sum;\n\
    }\n\necho prod_signs([1, 2, 2, -4]).\"\\n\";\necho prod_signs([0, 1]).\"\\n\"\
    ;\necho prod_signs([]).\"\\n\";\necho prod_signs([-1, -2, 2, -4]).\"\\n\";\necho\
    \ prod_signs([-1, -2, 2, -4, 0]).\"\\n\";\necho prod_signs([-1, -2, 2, -4, 1]).\"\
    \\n\";\necho prod_signs([-1, -2, 2, -4, 0, 0]).\"\\n\";", "\n}", "    if (count($arr)\
    \ == 0) return null;\n    $sign = 1;\n    $sum = 0;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value != 0) {\n            $sign *= ($value / abs($value));\n\
    \            $sum += abs($value);\n        }\n    }\n    return $sign * $sum;\n\
    }\n", "\t$product = 1;\n\t$sum = 0;\n\tif(empty($arr)) {\n\t\treturn null;\n\t\
    }\n\tforeach($arr as $number) {\n\t\tif($number > 0) {\n\t\t\t$product *= 1;\n\
    \t\t\t$sum += $number;\n\t\t}\n\t\telseif($number < 0) {\n\t\t\t$product *= -1;\n\
    \t\t\t$sum += abs($number);\n\t\t}\n\t\telse {\n\t\t\t$product *= 0;\n\t\t}\n\t\
    }\n\treturn $sum * $product;\n}\necho prod_signs([1, 2, 2, -4]) . \"<br>\";\n\
    echo prod_signs([0, 1]) . \"<br>\";\necho prod_signs([]);", "    $count = count($arr);\n\
    \    if ($count == 0) return null;\n    $res = 0;\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $res += $arr[$i] * ($arr[$i] > 0 ? 1 : -1);\n    }\n    return\
    \ $res;\n}\n\necho prod_signs([1, 2, 2, -4]) == -9;\necho prod_signs([0, 1]) ==\
    \ 0;\necho prod_signs([]) == null;", "    // Write your code here\n    // To print\
    \ results to the standard output you can use print\n    // Example:\n    // print\
    \ \"Hello world!\";\n}", "\t$result = [];\n\t$signs = [];\n\t$magnitudes = [];\n\
    \t$empty = [];\n\tforeach ($arr as $number) {\n\t\tif ($number == 0) {\n\t\t\t\
    $signs[] = 0;\n\t\t\t$magnitudes[] = 0;\n\t\t} elseif ($number > 0) {\n\t\t\t\
    $signs[] = 1;\n\t\t\t$magnitudes[] = $number;\n\t\t} else {\n\t\t\t$signs[] =\
    \ -1;\n\t\t\t$magnitudes[] = abs($number);\n\t\t}\n\t}\n\tif ($arr == $empty)\
    \ {\n\t\treturn null;\n\t} else {\n\t\treturn array_product($signs) * array_sum($magnitudes);\n\
    \t}\n}", "    if(!$arr) {\n        return null;\n    }\n    // your code here\n\
    }\n", "    $prod = 1;\n    $sum = 0;\n    foreach ($arr as $a) {\n        if ($a\
    \ == 0) {\n            $prod = 0;\n            break;\n        }\n        if ($a\
    \ > 0) {\n            $prod *= 1;\n        } else {\n            $prod *= -1;\n\
    \        }\n        $sum += abs($a);\n    }\n    if ($prod == 0) {\n        return\
    \ $prod;\n    }\n    return $sum * $prod;\n}\n", "  if (empty($arr)) return null;\n\
    \  $plus  = array_filter($arr, function($x) { return $x > 0;});\n  $minus = array_filter($arr,\
    \ function($x) { return $x < 0;});\n  $zero  = array_filter($arr, function($x)\
    \ { return $x == 0;});\n  return array_sum($plus) - array_sum($minus) + count($zero);\n\
    }\necho prod_signs([1, 2, 2, -4]) === -9 ? 'true' : 'false';\necho prod_signs([0,\
    \ 1]) === 0 ? 'true' : 'false';\necho prod_signs([]) === null ? 'true' : 'false';",
  "    if (empty($arr)) {\n        return null;\n    }\n\n    $product = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n          \
    \  $product *= 1;\n        } elseif ($value < 0) {\n            $product *= -1;\n\
    \        } else {\n            $product *= 0;\n        }\n        $sum += abs($value);\n\
    \    }\n    return $sum * $product;\n}\n", "\tif (empty($arr)) {\n\t\treturn NULL;\n\
    \t}\n\t$prod = 1;\n\t$mag = 0;\n\tforeach ($arr as $val) {\n\t\tif ($val < 0)\
    \ {\n\t\t\t$prod *= -1;\n\t\t} elseif ($val == 0) {\n\t\t\t$prod = 0;\n\t\t\t\
    break;\n\t\t}\n\t\t$mag += abs($val);\n\t}\n\treturn $prod * $mag;\n}\n", "  $res\
    \ = 1;\n  $sum = 0;\n  foreach ($arr as $el) {\n    if ($el > 0) {\n      $sum\
    \ += $el;\n      $res *= 1;\n    } elseif ($el < 0) {\n      $sum += abs($el);\n\
    \      $res *= -1;\n    } else {\n      $res = 0;\n    }\n  }\n  return $res ?\
    \ $sum * $res : null;\n}\n", "    $mag = array_map(function($x) { return abs($x);\
    \ }, $arr);\n    $sign = array_map(function($x) { return $x > 0 ? 1 : $x < 0 ?\
    \ -1 : 0; }, $arr);\n    return array_product($sign) * array_sum($mag);\n}", " \
    \   if (empty($arr)) {\n        return null;\n    }\n    $product = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $el) {\n        $sum += abs($el);\n        $product\
    \ *= ($el >= 0) ? 1 : -1;\n    }\n    return $sum * $product;\n}", "    if(empty($arr))\
    \ {\n        return null;\n    }\n    $sum = 0;\n    $sign = 1;\n    foreach($arr\
    \ as $a) {\n        $sum += abs($a);\n        $sign *= ($a == 0 ? 1 : ($a > 0\
    \ ? 1 : -1));\n    }\n    return $sum * $sign;\n}", "  $empty = \"None\";\n  $result\
    \ = 0;\n  foreach ($arr as $int) {\n    if ($int === 0) {\n      $result = 0;\n\
    \    } elseif ($int < 0) {\n      $result -= $int;\n    } else {\n      $result\
    \ += $int;\n    }\n  }\n  return $result;\n}\necho prod_signs([1, 2, 2, -4]).\"\
    \\n\";\necho prod_signs([0, 1]).\"\\n\";\necho prod_signs([]).\"\\n\";", "   \
    \ if (!count($arr)) {\n        return NULL;\n    }\n    $signs = array_map(function($n)\
    \ {\n        if ($n < 0) {\n            return -1;\n        } elseif ($n > 0)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    }, $arr);\n    $product = array_product($signs);\n    $magnitudes = array_map(function($n)\
    \ {\n        return abs($n);\n    }, $arr);\n    $sum = array_sum($magnitudes);\n\
    \    return $product * $sum;\n}\n", "  //your code here\n}\n", "  // BEGIN (write\
    \ your solution here)\n  if (empty($arr)) {\n      return \"None\";\n  }\n  $count\
    \ = 0;\n  $sum = 0;\n  foreach ($arr as $item) {\n      if ($item > 0) {\n   \
    \       $count++;\n      } elseif ($item < 0) {\n          $count--;\n      }\n\
    \      $sum += abs($item);\n  }\n  if ($count === 0) {\n      return $sum;\n \
    \ }\n  return $sum * $count;\n  // END\n}\n", "    $arr_sum = 0;\n    $sign_sum\
    \ = 1;\n    foreach ($arr as $v) {\n        $arr_sum += abs($v);\n        $sign_sum\
    \ *= sign($v);\n    }\n    if ($arr_sum == 0) {\n        return null;\n    }\n\
    \    return $arr_sum * $sign_sum;\n}", "    $res = 1;\n    $mag = 0;\n    foreach\
    \ ($arr as $n) {\n        if ($n > 0) {\n            $res *= 1;\n            $mag\
    \ += $n;\n        } elseif ($n < 0) {\n            $res *= -1;\n            $mag\
    \ += abs($n);\n        } else {\n            $res *= 0;\n        }\n    }\n  \
    \  if ($res == 1 || $res == -1) {\n        return $res * $mag;\n    } else {\n\
    \        return 0;\n    }\n}\n", "  if(count($arr) == 0) return;\n  $magnitudes\
    \ = [];\n  $signs = [];\n  foreach($arr as $n) {\n    $magnitudes[] = abs($n);\n\
    \    $signs[] = ($n > 0) ? 1 : (($n < 0) ? -1 : 0);\n  }\n  return array_product($magnitudes)\
    \ * array_product($signs);\n}\n", "  if (empty($arr)) {\n    return null;\n  }\n\
    \  $count_zeros = 0;\n  $count_positives = 0;\n  $count_negatives = 0;\n  foreach\
    \ ($arr as $i) {\n    if ($i == 0) {\n      $count_zeros++;\n    } elseif ($i\
    \ > 0) {\n      $count_positives++;\n    } else {\n      $count_negatives++;\n\
    \    }\n  }\n  if ($count_zeros > 0) {\n    return 0;\n  }\n  $sign = $count_positives\
    \ % 2 == 0 ? 1 : -1;\n  $magnitudes = array_map(function($x) { return abs($x);\
    \ }, $arr);\n  return array_sum($magnitudes) * $sign;\n}\n", "    if (empty($arr))\
    \ {\n        return null;\n    }\n\n    $result = 0;\n    $prod = 1;\n    foreach\
    \ ($arr as $item) {\n        $result += abs($item);\n        $prod *= $item /\
    \ abs($item);\n    }\n\n    return $result * $prod;\n}\n\nassert(prod_signs([1,\
    \ 2, 2, -4]) == -9);\nassert(prod_signs([0, 1]) == 0);\nassert(prod_signs([])\
    \ == null);", "  if (count($arr) === 0) {\n    return null;\n  }\n  $r = [1, 0];\n\
    \  foreach ($arr as $v) {\n    if ($v > 0) {\n      $r[0] += $v;\n    } elseif\
    \ ($v < 0) {\n      $r[0] -= $v;\n      $r[1]++;\n    }\n  }\n  return $r[0] *\
    \ pow(-1, $r[1]);\n}", "    if (empty($arr)) {\n        return null;\n    }\n\
    \    $prod = 1;\n    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            continue;\n        }\n        $prod\
    \ *= $num > 0 ? 1 : -1;\n        $sum += abs($num);\n    }\n    return $prod *\
    \ $sum;\n}\n", "\tif(!$arr) return NULL;\n\t$magnitudes = array_map('abs', $arr);\n\
    \t$signs = array_map(function($n) { return $n ? $n / abs($n) : 0; }, $arr);\n\t\
    return array_product($signs) * array_sum($magnitudes);\n}", "    if (empty($arr))\
    \ return null;\n    $mul = 1;\n    $sum = 0;\n    foreach ($arr as $n) {\n   \
    \     if ($n === 0) continue;\n        $sum += abs($n);\n        $mul *= ($n >=\
    \ 0) ? 1 : -1;\n    }\n    return $sum * $mul;\n}\n\nif (prod_signs([1, 2, 2,\
    \ -4]) == -9) echo 'pass';\nif (prod_signs([0, 1]) == 0) echo 'pass';\nif (prod_signs([])\
    \ == null) echo 'pass';", "  //magnitude of integers\n  $magnitude = 0;\n  //product\
    \ of signs\n  $product = 1;\n  //iterate through the array\n  foreach ($arr as\
    \ $value) {\n    //if the number is not equal to zero, multiply the magnitude\
    \ by the value\n    if ($value != 0) {\n      $magnitude += abs($value);\n   \
    \ }\n    //if the number is equal to zero, return null\n    if ($value == 0) {\n\
    \      return null;\n    }\n    //if the number is positive, multiply product\
    \ by 1\n    if ($value > 0) {\n      $product *= 1;\n    }\n    //if the number\
    \ is negative, multiply product by -1\n    if ($value < 0) {\n      $product *=\
    \ -1;\n    }\n  }\n  //multiply the magnitude and product\n  return $magnitude\
    \ * $product;\n}", "    if (empty($arr)) {\n        return null;\n    }\n    $result\
    \ = 1;\n    $magnitude = 0;\n    foreach ($arr as $item) {\n        if ($item\
    \ === 0) {\n            $result = 0;\n            break;\n        }\n        if\
    \ ($item < 0) {\n            $result *= -1;\n        }\n        $magnitude +=\
    \ abs($item);\n    }\n    return $result * $magnitude;\n}", "  if (!count($arr))\
    \ return NULL;\n  $prd = 1;\n  $sum = 0;\n  foreach ($arr as $val) {\n    $prd\
    \ *= ($val == 0) ? 1 : ($val / abs($val));\n    $sum += abs($val);\n  }\n  return\
    \ $prd * $sum;\n}\n", "    // Your code here\n}", "    $product = 1;\n    $sum\
    \ = 0;\n    if(empty($arr)) {\n        return null;\n    }\n    foreach($arr as\
    \ $value) {\n        $product *= $value < 0 ? -1 : ($value > 0 ? 1 : 0);\n   \
    \     $sum += abs($value);\n    }\n    return $product * $sum;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
