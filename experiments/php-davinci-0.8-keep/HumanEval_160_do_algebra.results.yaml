name: HumanEval_160_do_algebra
language: php
results:
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = '';\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    $result .= $operand[$i];\n    $result .= $operator[$i];\n  }\n  $result .=\
    \ $operand[count($operand) - 1];\n  return eval(\"return $result;\");\n}\necho\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmpvk7ksoxz.php(27) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $index\
    \ => $o) {\n    switch ($o) {\n      case '+':\n        $result += $operand[$index];\n\
    \        break;\n      case '-':\n        $result -= $operand[$index];\n     \
    \   break;\n      case '*':\n        $result *= $operand[$index];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$index]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$index]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [3, 7,\
    \ 8, 1])); // 72\nprint_r(do_algebra(['+', '*', '-'], [10, 20, 30, 40])); // 700\n\
    print_r(do_algebra(['+', '*', '-'], [3, 7, 8, 1])); // 72\nprint_r(do_algebra(['+',\
    \ '*', '-'], [5, 5, 2, 10])); // 65\nprint_r(do_algebra(['+', '//', '-'], [2,\
    \ 3, 4, 5])); // -1\nprint_r(do_algebra(['+', '**', '-'], [2, 3, 4, 5])); // -6\n\
    print_r(do_algebra(['+', '**', '-'], [10, 10, 2, 3])); // -990\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15798607910-4620397\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05_20auk.php:58\n\
    Stack trace:\n#0 /tmp/tmp05_20auk.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp05_20auk.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operandCount = count($operand);\n    $operatorCount = count($operator);\n\
    \    $i = 0;\n    $result = 0;\n    if($operandCount <= 1) {\n        return 0;\n\
    \    }\n    if($operatorCount >= $operandCount) {\n        return 0;\n    }\n\
    \    if($operatorCount == 1) {\n        $result = $operand[0];\n        $result\
    \ += $operand[1];\n        for($i = 1; $i < $operandCount - 1; $i++) {\n     \
    \       $result += $operand[$i + 1];\n        }\n        return $result;\n   \
    \ }\n    if($operatorCount == 2) {\n        $result = $operand[0];\n        $result\
    \ += $operand[1];\n        $result *= $operand[2];\n        for($i = 2; $i < $operandCount\
    \ - 1; $i++) {\n            $result *= $operand[$i + 1];\n        }\n        return\
    \ $result;\n    }\n    if($operatorCount == 3) {\n        $result = $operand[0];\n\
    \        $result += $operand[1];\n        $result *= $operand[2];\n        $result\
    \ -= $operand[3];\n        for($i = 3; $i < $operandCount - 1; $i++) {\n     \
    \       $result -= $operand[$i + 1];\n        }\n        return $result;\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizrnyyfo.php:64\n\
    Stack trace:\n#0 /tmp/tmpizrnyyfo.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpizrnyyfo.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$previous = array_shift($operand);\n\tforeach ($operator as $key\
    \ => $o) {\n\t\t$current = array_shift($operand);\n\t\tswitch ($o) {\n\t\t\tcase\
    \ '+':\n\t\t\t\t$previous += $current;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\
    \t$previous -= $current;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$previous *=\
    \ $current;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$previous = (int) ($previous\
    \ / $current);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$previous = pow($previous,\
    \ $current);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $previous;\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5, 6])); // 12\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]));\
    \ // 17\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8])); // 25\n\
    print_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9])); // 34\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10])); // 44\nprint_r(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 55\nprint_r(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\nfunction candidate(...$args) {\n   \
    \ return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl16abkkj.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '+') {\n            $result += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '-') {\n            $result -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '*') {\n            $result *= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '//') {\n            $result /= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '**') {\n            $result **=\
    \ $operand[$i + 1];\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '+', '-', '//'],\
    \ [10, 20, 30, 40]) . \"\\n\";\necho do_algebra(['+', '+', '-'], [10, 20, 30])\
    \ . \"\\n\";\necho do_algebra(['+', '+', '-'], [5, 7, 9]) . \"\\n\";\necho do_algebra(['*',\
    \ '//', '+'], [5, 3, 2]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\n\nWarning: Division by zero in /tmp/tmpl28412w4.php on line 30\nINF\n\
    60\n21\n7.5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl28412w4.php:49\n\
    Stack trace:\n#0 /tmp/tmpl28412w4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpl28412w4.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $ops = [\"+\", \"-\", \"*\", \"//\", \"**\"];\n\
    \  $operators = array_map(function($el) use ($ops) {\n    $operator = str_replace($ops,\
    \ $ops, $el);\n    return $operator;\n  }, $operator);\n  for ($i = 0; $i < count($operators);\
    \ $i++) {\n    if ($i === 0) {\n      $result = eval(\"return {$operand[$i]} {$operators[$i]}\
    \ {$operand[$i + 1]};\");\n    } else {\n      $result = eval(\"return {$result}\
    \ {$operators[$i]} {$operand[$i + 1]};\");\n    }\n  }\n  return $result;\n}\n\
    $operator = [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator,\
    \ $operand);\necho(\"$result\\n\");\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmvqbjbt.php:46\n\
    Stack trace:\n#0 /tmp/tmpbmvqbjbt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbmvqbjbt.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $i\
    \ => $op) {\n    $result = ($op == '+') ? $result + $operand[$i] :\n      ($op\
    \ == '-') ? $result - $operand[$i] :\n      ($op == '*') ? $result * $operand[$i]\
    \ :\n      ($op == '//') ? $result / $operand[$i] :\n      $result ** $operand[$i];\n\
    \  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3,\
    \ 4, 5];\n\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0.033333333333333\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_lzedfk.php:41\n\
    Stack trace:\n#0 /tmp/tmp2_lzedfk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2_lzedfk.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqibm7ubc.php:29\n\
    Stack trace:\n#0 /tmp/tmpqibm7ubc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqibm7ubc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '+') {\n            $result += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '-') {\n            $result -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '*') {\n            $result *= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '//') {\n            $result = floor($result\
    \ / $operand[$i + 1]);\n        } else if ($operator[$i] == '**') {\n        \
    \    $result = pow($result, $operand[$i + 1]);\n        }\n    }\n    return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_3ta76e.php:46\n\
    Stack trace:\n#0 /tmp/tmp3_3ta76e.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3_3ta76e.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  \n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0h8q7syc.php:29\n\
    Stack trace:\n#0 /tmp/tmp0h8q7syc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0h8q7syc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmgs3ugf.php:50\n\
    Stack trace:\n#0 /tmp/tmpwmgs3ugf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwmgs3ugf.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here ...\n  $result = $operand[0];\n  for($i\
    \ = 0; $i < count($operator); $i++){\n    if($operator[$i] == '+'){\n      $result\
    \ += $operand[$i+1];\n    }else if($operator[$i] == '-'){\n      $result -= $operand[$i+1];\n\
    \    }else if($operator[$i] == '*'){\n      $result *= $operand[$i+1];\n    }else\
    \ if($operator[$i] == '//'){\n      $result = intdiv($result, $operand[$i+1]);\n\
    \    }else if($operator[$i] == '**'){\n      $result = pow($result, $operand[$i+1]);\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_ecxt62.php:44\n\
    Stack trace:\n#0 /tmp/tmpe_ecxt62.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe_ecxt62.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $numOperands = count($operand);\n  $operatorIndex\
    \ = 0;\n  $isLeftOperand = True;\n  for ($operandIndex = 0; $operandIndex < $numOperands;\
    \ $operandIndex++) {\n    if ($isLeftOperand) {\n      $result = $operand[$operandIndex];\n\
    \      $isLeftOperand = False;\n    } else {\n      $nextOperand = $operand[$operandIndex];\n\
    \      $result = apply_operator($result, $operator[$operatorIndex], $nextOperand);\n\
    \      $operatorIndex++;\n      $isLeftOperand = True;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function apply_operator()\
    \ in /tmp/tmppj7bur4m.php:31\nStack trace:\n#0 /tmp/tmppj7bur4m.php(40): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmppj7bur4m.php(44): candidate(Array, Array)\n#2 /tmp/tmppj7bur4m.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppj7bur4m.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '**', '-'],\
    \ [2, 3, 4, 5]) . \"\\n\"; // 3\necho do_algebra(['+', '**', '//'], [2, 3, 4,\
    \ 5]) . \"\\n\"; // 2\necho do_algebra(['//', '**', '+'], [2, 3, 4, 5]) . \"\\\
    n\"; // 3\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n620\n125\n5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp909n_ebb.php:47\n\
    Stack trace:\n#0 /tmp/tmp909n_ebb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp909n_ebb.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n  // To print results to the standard\
    \ output you can use print\n  // Example: print \"Hello world!\";\n  $output =\
    \ \"\";\n  for($i = 0; $i < count($operator); $i++){\n    $output = $output .\
    \ \"(\" . $operand[$i] . $operator[$i] . $operand[$i+1] . \")\";\n  }\n  return\
    \ eval(\"return $output;\");\n}\n\nprint_r(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmp_2serle_.php(28)\
    \ : eval()'d code:1\nStack trace:\n#0 /tmp/tmp_2serle_.php(28): eval()\n#1 /tmp/tmp_2serle_.php(31):\
    \ do_algebra(Array, Array)\n#2 {main}\n  thrown in /tmp/tmp_2serle_.php(28) :\
    \ eval()'d code on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator_map = [\n        '+' => function($a, $b) { return\
    \ $a + $b; },\n        '-' => function($a, $b) { return $a - $b; },\n        '*'\
    \ => function($a, $b) { return $a * $b; },\n        '//' => function($a, $b) {\
    \ return floor($a / $b); },\n        '**' => function($a, $b) { return pow($a,\
    \ $b); },\n    ];\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        $result = $operator_map[$operator[$i]]($result, $operand[$i\
    \ + 1]);\n    }\n    return $result;\n}\n\n$res = do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+', '-', '*'], [2, 3,\
    \ 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+', '*', '**'], [2, 3, 4, 5]);\n\
    var_dump($res);\n\n$res = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\
    \n$res = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\n$res\
    \ = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '-', '*', '//'], [2, 3, 4, 5, 6]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6, 7]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '*', '**',\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp44pq5rf_.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operand = array_reverse($operand);\n  foreach($operator as $key)\
    \ {\n    if($key == '+') {\n      $tmp = array_pop($operand) + array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n    if($key == '-') {\n      $tmp =\
    \ array_pop($operand) - array_pop($operand);\n      array_push($operand, $tmp);\n\
    \    }\n    if($key == '*') {\n      $tmp = array_pop($operand) * array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n    if($key == '//') {\n      $tmp\
    \ = array_pop($operand) // array_pop($operand);\n      array_push($operand, $tmp);\n\
    \    }\n    if($key == '**') {\n      $tmp = array_pop($operand) ** array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n  }\n  return $operand[0];\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn3ruhcbg.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n  // To print results to the standard\
    \ output you can use print\n  // Example: print \"Hello world!\";\n  \n  $string\
    \ = \"\";\n  for($i = 0; $i < count($operator); $i++){\n      $string = $string\
    \ . $operand[$i] . $operator[$i];\n  }\n  $string = $string . $operand[count($operand)-1];\n\
    \  return eval(\"return $string;\");\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2j329kv4.php(30) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  $i = 0;\n  foreach($operator as $op)\
    \ {\n    switch($op) {\n      case '+':\n        $result += $operand[$i + 1];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i + 1];\n     \
    \   break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n    $i++;\n  }\n  return $result;\n}\n\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6]) . \"\\n\"; // 2 + 3 - 4 * 5 // 6 **\
    \ 1 => 2\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 2 + 3 *\
    \ 4 - 5 => 9\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5]) . \"\\n\"; // 2 *\
    \ 3 * 4 * 5 => 120\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6]) . \"\\n\"\
    ; // 2 * 3 * 4 * 5 * 6 => 720\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6,\
    \ 7]) . \"\\n\"; // 2 * 3 * 4 * 5 * 6 * 7 => 5040\necho do_algebra(['//', '*',\
    \ '*'], [2, 3, 4, 5, 6, 7]) . \"\\n\"; // 2 // 3 * 4 * 5 * 6 * 7 => 0\necho do_algebra(['//',\
    \ '*', '*'], [2, 3, 4, 5, 6, 7, 8]) . \"\\n\"; // 2 // 3 * 4 * 5 * 6 * 7 * 8 =>\
    \ 0\necho do\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpil1hij0c.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n    $sum = 0;\n    if(count($operator)\
    \ > 0 && count($operand) > 0) {\n        $sum = $operand[0];\n        for($i =\
    \ 0; $i < count($operator); $i++) {\n            switch($operator[$i]) {\n   \
    \             case '+':\n                    $sum += $operand[$i + 1];\n     \
    \               break;\n                case '-':\n                    $sum -=\
    \ $operand[$i + 1];\n                    break;\n                case '*':\n \
    \                   $sum *= $operand[$i + 1];\n                    break;\n  \
    \              case '//':\n                    $sum = floor($sum / $operand[$i\
    \ + 1]);\n                    break;\n                case '**':\n           \
    \         $sum = pow($sum, $operand[$i + 1]);\n                    break;\n  \
    \          }\n        }\n    }\n    return $sum;\n}\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1je5ds34.php:56\n\
    Stack trace:\n#0 /tmp/tmp1je5ds34.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp1je5ds34.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_thsqwja.php:49\n\
    Stack trace:\n#0 /tmp/tmp_thsqwja.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_thsqwja.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6sx1j7i.php:50\n\
    Stack trace:\n#0 /tmp/tmpb6sx1j7i.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpb6sx1j7i.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    foreach ($operator as\
    \ $key => $value) {\n        switch ($value) {\n            case '+':\n      \
    \          $result += $operand[$key];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$key];\n                break;\n \
    \           case '*':\n                $result *= $operand[$key];\n          \
    \      break;\n            case '//':\n                $result /= $operand[$key];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$key]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cckza61.php:50\n\
    Stack trace:\n#0 /tmp/tmp5cckza61.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5cckza61.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblfqdqcw.php:50\n\
    Stack trace:\n#0 /tmp/tmpblfqdqcw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpblfqdqcw.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $expression = \"\";\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($i === 0) {\n      $expression .= $operand[$i] . $operator[$i];\n\
    \    } else {\n      $expression .= $operand[$i] . $operator[$i];\n    }\n  }\n\
    \  $expression .= $operand[count($operand) - 1];\n  eval(\"\\$result = $expression;\"\
    );\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgs0xpnoa.php(31) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i];\n                break;\n          \
    \  case '*':\n                $result *= $operand[$i];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i]);\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4, 5, 5]));\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bim6dpg.php:51\n\
    Stack trace:\n#0 /tmp/tmp9bim6dpg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9bim6dpg.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // your code here\n    $total = $operand[0];\n    foreach($operator\
    \ as $index => $op) {\n        switch($op) {\n            case '+':\n        \
    \        $total += $operand[$index + 1];\n                break;\n           \
    \ case '-':\n                $total -= $operand[$index + 1];\n               \
    \ break;\n            case '*':\n                $total *= $operand[$index + 1];\n\
    \                break;\n            case '//':\n                $total = floor($total\
    \ / $operand[$index + 1]);\n                break;\n            case '**':\n \
    \               $total = pow($total, $operand[$index + 1]);\n                break;\n\
    \        }\n    }\n    return $total;\n}\n\nprint_r(do_algebra([\"+\", \"-\"],\
    \ [4, 5, 6]));\nprint_r(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "315\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2lkfr58.php:53\n\
    Stack trace:\n#0 /tmp/tmpz2lkfr58.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpz2lkfr58.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    foreach ($operator as\
    \ $key => $op) {\n        switch ($op) {\n            case '+':\n            \
    \    $result += $operand[$key];\n                break;\n            case '-':\n\
    \                $result -= $operand[$key];\n                break;\n        \
    \    case '*':\n                $result *= $operand[$key];\n                break;\n\
    \            case '//':\n                $result /= $operand[$key];\n        \
    \        break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$key]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand) . \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bd9tdlp.php:53\n\
    Stack trace:\n#0 /tmp/tmp0bd9tdlp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp0bd9tdlp.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res /= $operand[$i + 1];\n         \
    \       break;\n            case '**':\n                $res **= $operand[$i +\
    \ 1];\n                break;\n        }\n    }\n    return $res;\n}\n\nprint_r(do_algebra(['+',\
    \ '-', '*'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['+', '*', '-', '//'], [2, 3, 4, 5, 6]));\nprint_r(do_algebra(['+',\
    \ '*', '-', '//', '**'], [2, 3, 4, 5, 6, 7]));\nprint_r(do_algebra(['+', '*',\
    \ '-', '//', '**'], [2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['//', '+', '-',\
    \ '*', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['**', '+', '-',\
    \ '*', '//'],\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9crsdi7h.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operations = [\n    '+' => function($a, $b) { return $a + $b;\
    \ },\n    '-' => function($a, $b) { return $a - $b; },\n    '*' => function($a,\
    \ $b) { return $a * $b; },\n    '//' => function($a, $b) { return floor($a / $b);\
    \ },\n    '**' => function($a, $b) { return pow($a, $b); }\n  ];\n  $countOperator\
    \ = count($operator);\n  $countOperand = count($operand);\n  $total = $operand[0];\n\
    \  for ($i = 0; $i < $countOperator; $i++) {\n    $total = $operations[$operator[$i]]($total,\
    \ $operand[$i + 1]);\n  }\n  return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjd788p36.php:43\n\
    Stack trace:\n#0 /tmp/tmpjd788p36.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjd788p36.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcs77kne.php:28\n\
    Stack trace:\n#0 /tmp/tmpvcs77kne.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvcs77kne.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $num=count($operand);\n  $numOp=count($operator);\n  $i=0;\n\
    \  $res=0;\n  while ($i<$num) {\n    $n1=$operand[$i];\n    $n2=$operand[$i+1];\n\
    \    $op=$operator[$i];\n    if($op==\"+\")\n      $res=$n1+$n2;\n    else if($op==\"\
    -\")\n      $res=$n1-$n2;\n    else if($op==\"*\")\n      $res=$n1*$n2;\n    else\
    \ if($op==\"/\")\n      $res=floor($n1/$n2);\n    else\n      $res=pow($n1,$n2);\n\
    \    $operand[$i+1]=$res;\n    $i++;\n  }\n  return $res;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]).\"\\n\"; // => 9\necho do_algebra(['+', '-', '*'],\
    \ [1, 2, 3, 4, 5]).\"\\n\"; // => -8\necho do_algebra(['+', '-', '*', '/'], [5,\
    \ 10, 2, 4, 2]).\"\\n\"; // => 6.25\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6]).\"\\n\"; // => 15\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]).\"\
    \\n\"; // => 21\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]).\"\\\
    n\"; // => 28\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]).\"\\\
    n\"; // => 36\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\
    \\n\"; // => 45\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkbccb5nd.php:58\nStack trace:\n#0 /tmp/tmpkbccb5nd.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkbccb5nd.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $answer = null;\n    if(sizeof($operator) === sizeof($operand)\
    \ - 1){\n        foreach($operator as $key => $value){\n            if($key ===\
    \ 0){\n                $answer = $operand[$key] . $value . $operand[$key + 1];\n\
    \            } else {\n                $answer = $answer . $value . $operand[$key\
    \ + 1];\n            }\n        }\n    }\n    return eval(\"return {$answer};\"\
    );\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmpix_uu5k2.php(31) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $operand[$i + 1] =\
    \ $operand[$i] + $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $operand[$i + 1] = $operand[$i] - $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $operand[$i + 1] = $operand[$i]\
    \ * $operand[$i + 1];\n                break;\n            case '//':\n      \
    \          $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $operand[$i + 1] =\
    \ pow($operand[$i], $operand[$i + 1]);\n                break;\n        }\n  \
    \  }\n    return $operand[count($operand) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju7ybtca.php:49\n\
    Stack trace:\n#0 /tmp/tmpju7ybtca.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpju7ybtca.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = (int)($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_ehw61e.php:50\n\
    Stack trace:\n#0 /tmp/tmph_ehw61e.php(54): test()\n#1 {main}\n  thrown in /tmp/tmph_ehw61e.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . PHP_EOL; // => 9\necho do_algebra(['+', '//', '**'], [2, 3, 2, 5])\
    \ . PHP_EOL; // => 2\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 10]) . PHP_EOL;\
    \ // => -5\necho do_algebra(['+', '//', '-'], [2, 3, 4, 5, 10]) . PHP_EOL; //\
    \ => -2\necho do_algebra(['+', '//', '**'], [2, 3, 2, 5, 10]) . PHP_EOL; // =>\
    \ 1024\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n32\n15\n-4\n32\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp_cnjazvu.php:54\nStack trace:\n#0 /tmp/tmp_cnjazvu.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_cnjazvu.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $key\
    \ => $value) {\n    $result = calc($result, array_shift($operand), $value);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calc() in /tmp/tmpzi2526wm.php:23\n\
    Stack trace:\n#0 /tmp/tmpzi2526wm.php(29): do_algebra(Array, Array)\n#1 /tmp/tmpzi2526wm.php(33):\
    \ candidate(Array, Array)\n#2 /tmp/tmpzi2526wm.php(38): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpzi2526wm.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ **= $operand[$i + 1];\n                break;\n        }\n    }\n    return\
    \ $result;\n}\necho do_algebra(['+', '-', '*'], [2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdte574wl.php:50\n\
    Stack trace:\n#0 /tmp/tmpdte574wl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdte574wl.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n    $result = 0;\n    for($i =\
    \ 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n         \
    \   case '+':\n                $result += $operand[$i];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i];\n           \
    \     break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result /= $operand[$i];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\n$operators = ['+', '*', '-'];\n$numbers = [2, 3, 4, 5];\necho do_algebra($operators,\
    \ $numbers);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczlinld9.php:53\n\
    Stack trace:\n#0 /tmp/tmpczlinld9.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpczlinld9.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n$operator = [\"+\", \"\
    *\", \"//\", \"-\", \"**\"];\n$operand = [3, 2, 5, 4, 3];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqsh01pp.php:46\n\
    Stack trace:\n#0 /tmp/tmpmqsh01pp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmqsh01pp.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u8yz9g_.php:50\n\
    Stack trace:\n#0 /tmp/tmp0u8yz9g_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0u8yz9g_.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here...\n  $result = $operand[0];\n  for($i\
    \ = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n      case '+':\n\
    \        $result += $operand[$i+1];\n        break;\n      case '-':\n       \
    \ $result -= $operand[$i+1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i+1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i+1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i+1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1azwnzl.php:52\n\
    Stack trace:\n#0 /tmp/tmpd1azwnzl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd1azwnzl.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $key\
    \ => $value) {\n    switch ($value) {\n      case '+':\n        $result += $operand[$key];\n\
    \        break;\n      case '-':\n        $result -= $operand[$key];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$key];\n        break;\n\
    \      case '//':\n        $result = intval($result / $operand[$key]);\n     \
    \   break;\n      case '**':\n        $result = $result ** $operand[$key];\n \
    \       break;\n    }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '-',\
    \ '**'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['+', '-', '**'], [1,\
    \ 1, 1, 2]);\necho PHP_EOL;\necho do_algebra(['+', '-', '**'], [1, 2, 3, 4]);\n\
    echo PHP_EOL;\necho do_algebra(['+', '-', '**'], [10, 2, 2, 2]);\necho PHP_EOL;\n\
    echo do_algebra(['+', '-', '**'], [10, 2, 2, 2]);\necho PHP_EOL;\necho do_algebra(['*',\
    \ '//', '**'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['*', '-', '+'], [2, 3, 4, 5]);\n\
    echo PHP_EOL;\necho do_algebra(['*', '+', '-'], [2, 3, 4, 5]);\necho PHP_EOL;\n\
    echo do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['-',\
    \ '*', '+'],\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7cbif84r.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here...\n}\n\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]); //=> 9\necho do_algebra(['+', '-', '*'], [2, 3, 4, 5]); //=>\
    \ -11\necho do_algebra(['+', '*', '*'], [2, 3, 4, 5]); //=> 150\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, -5]); //=> 17\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, -5, -6]); //=> -28\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7]);\
    \ //=> -45\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8]); //=>\
    \ -69\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9]); //=> -98\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10]); //=> -132\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10, -11]); //=>\
    \ -171\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12]); //=> -216\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13]); //=> -267\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, -5, -6, -7, -8, -9\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphuza8n75.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13vm11pe.php:50\n\
    Stack trace:\n#0 /tmp/tmp13vm11pe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp13vm11pe.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_faol6wo.php:43\n\
    Stack trace:\n#0 /tmp/tmp_faol6wo.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_faol6wo.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $operator_num = count($operator);\n  for ($i\
    \ = 0; $i < $operator_num; $i++) {\n    if ($i == 0) {\n      $result = $operand[$i];\n\
    \    }\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx8xgbnf.php:54\n\
    Stack trace:\n#0 /tmp/tmpvx8xgbnf.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpvx8xgbnf.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $expr = '';\n  for ($i = 0; $i < count($operand) - 1; $i++) {\n\
    \    $expr .= $operand[$i] . $operator[$i];\n  }\n  $expr .= $operand[count($operand)\
    \ - 1];\n  return eval(\"return $expr;\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptdnyttnc.php(26) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n    $result = 0;\n    $operator_count\
    \ = count($operator);\n    for($i = 0; $i < $operator_count; $i++){\n        if($i\
    \ === 0){\n            $result = $operand[$i] . $operator[$i] . $operand[$i+1];\n\
    \        } else {\n            $result = $result . $operator[$i] . $operand[$i+1];\n\
    \        }\n    }\n    $result = eval(\"return $result;\");\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl81ar1rj.php(31) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operators = [\"+\", \"-\", \"*\", \"//\", \"**\"];\n  $operands\
    \ = [];\n  foreach ($operand as $key => $value) {\n    if (in_array($operator[$key],\
    \ $operators)) {\n      $operands[] = $value;\n    }\n  }\n  $result = $operands[0];\n\
    \  foreach ($operator as $key => $value) {\n    if (in_array($value, $operators))\
    \ {\n      switch ($value) {\n        case \"+\":\n          $result += $operands[$key\
    \ + 1];\n          break;\n        case \"-\":\n          $result -= $operands[$key\
    \ + 1];\n          break;\n        case \"*\":\n          $result *= $operands[$key\
    \ + 1];\n          break;\n        case \"//\":\n          $result = floor($result\
    \ / $operands[$key + 1]);\n          break;\n        case \"**\":\n          $result\
    \ = pow($result, $operands[$key + 1]);\n          break;\n      }\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96s90owy.php:58\n\
    Stack trace:\n#0 /tmp/tmp96s90owy.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp96s90owy.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $res += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $res -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $res *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $res = floor($res / $operand[$i + 1]);\n        break;\n\
    \      case '**':\n        $res = pow($res, $operand[$i + 1]);\n        break;\n\
    \    }\n  }\n  return $res;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxj2q9s3.php:53\n\
    Stack trace:\n#0 /tmp/tmpcxj2q9s3.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcxj2q9s3.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n  // To print results to the standard\
    \ output you can use print\n  // Example: print \"Hello world!\";\n  \n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlx7dppm.php:31\n\
    Stack trace:\n#0 /tmp/tmpdlx7dppm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdlx7dppm.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $op = count($operator);\n    $opd = count($operand);\n    $result\
    \ = '';\n    for ($i = 0; $i < $opd; $i++) {\n        if ($i == $opd - 1) {\n\
    \            $result .= $operand[$i];\n        } else {\n            $result .=\
    \ $operand[$i] . $operator[$i];\n        }\n    }\n    return $result;\n}\n\n\
    $operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2+3*4-5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopv32b9v.php:43\n\
    Stack trace:\n#0 /tmp/tmpopv32b9v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpopv32b9v.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    if ($i == 0) {\n      $result = $operand[$i] . $operator[$i] . $operand[$i\
    \ + 1];\n    } else {\n      $result = $result . $operator[$i] . $operand[$i +\
    \ 1];\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfqzft6i.php:36\n\
    Stack trace:\n#0 /tmp/tmpbfqzft6i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbfqzft6i.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\nprint do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3miisnn.php:53\n\
    Stack trace:\n#0 /tmp/tmpa3miisnn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpa3miisnn.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    if ($operator[0] == '+') {\n        $result\
    \ = $operand[0] + $operand[1];\n    } else if ($operator[0] == '-') {\n      \
    \  $result = $operand[0] - $operand[1];\n    } else if ($operator[0] == '*') {\n\
    \        $result = $operand[0] * $operand[1];\n    } else if ($operator[0] ==\
    \ '//') {\n        $result = floor($operand[0] / $operand[1]);\n    } else if\
    \ ($operator[0] == '**') {\n        $result = pow($operand[0], $operand[1]);\n\
    \    }\n    if (count($operator) > 1) {\n        $operand[1] = $result;\n    \
    \    array_shift($operator);\n        array_shift($operand);\n        return do_algebra($operator,\
    \ $operand);\n    }\n    return $result;\n}\n$operator = ['+', '*', '**', '-'];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "3200000\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndzya7q1.php:50\n\
    Stack trace:\n#0 /tmp/tmpndzya7q1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpndzya7q1.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n    $output = $operand[0];\n    for($i\
    \ = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n       \
    \     case '+': $output += $operand[$i+1];\n            break;\n            case\
    \ '-': $output -= $operand[$i+1];\n            break;\n            case '*': $output\
    \ *= $operand[$i+1];\n            break;\n            case '//': $output /= $operand[$i+1];\n\
    \            break;\n            case '**': $output = pow($output, $operand[$i+1]);\n\
    \            break;\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplax98nmn.php:45\n\
    Stack trace:\n#0 /tmp/tmplax98nmn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplax98nmn.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    $i = 0;\n    foreach ($operator\
    \ as $op) {\n        switch ($op) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n     \
    \   $i++;\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pxi0c87.php:52\n\
    Stack trace:\n#0 /tmp/tmp0pxi0c87.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0pxi0c87.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $arr = [];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        array_push($arr, $operand[$i]);\n        array_push($arr, $operator[$i]);\n\
    \    }\n    array_push($arr, $operand[count($operand) - 1]);\n    $str = join(\"\
    \ \", $arr);\n    $str = str_replace('+', ' + ', $str);\n    $str = str_replace('-',\
    \ ' - ', $str);\n    $str = str_replace('*', ' * ', $str);\n    $str = str_replace('//',\
    \ ' // ', $str);\n    $str = str_replace('**', ' ** ', $str);\n    $str = str_replace('(\
    \ ', '(', $str);\n    $str = str_replace(' )', ')', $str);\n    $str = str_replace('\
    \  ', ' ', $str);\n    $str = str_replace(' ', '', $str);\n    $str = str_replace('*-',\
    \ '* -', $str);\n    $str = str_replace('*+', '* +', $str);\n    $str = str_replace('/-',\
    \ '/ -', $str);\n    $str = str_replace('/+', '/ +', $str);\n    $str = str_replace('**-',\
    \ '** -', $str);\n    $str = str_replace('**+', '** +', $str);\n    $str = str_replace('+-',\
    \ '+ -', $str);\n    $str = str_replace('++', '+ +', $str);\n    $str = str_replace('--',\
    \ '- -', $str);\n    $str = str_replace('+*', '+ *', $str);\n    $str = str_replace('+/',\
    \ '+ /', $str);\n    $str = str_replace('+**', '+ **', $str);\n    $str = str_replace('-*',\
    \ '- *', $str);\n    $str = str_replace('-/', '- /', $str);\n    $str = str_replace('-**',\
    \ '- **\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj3vtrqz1.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $sum = 0;\n  $result = $operand[0];\n  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    }\n    if($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n \
    \   }\n    if($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n  \
    \  }\n    if($operator[$i] == '//') {\n      $result /= $operand[$i + 1];\n  \
    \  }\n    if($operator[$i] == '**') {\n      $result = pow($result, $operand[$i\
    \ + 1]);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5ekbobp.php:49\n\
    Stack trace:\n#0 /tmp/tmpf5ekbobp.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf5ekbobp.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$res = $operand[0];\n\tfor ($i = 0; $i < count($operator); $i++)\
    \ {\n\t\tif ($operator[$i] == '+') {\n\t\t\t$res += $operand[$i + 1];\n\t\t} else\
    \ if ($operator[$i] == '-') {\n\t\t\t$res -= $operand[$i + 1];\n\t\t} else if\
    \ ($operator[$i] == '*') {\n\t\t\t$res *= $operand[$i + 1];\n\t\t} else if ($operator[$i]\
    \ == '//') {\n\t\t\t$res = floor($res / $operand[$i + 1]);\n\t\t} else if ($operator[$i]\
    \ == '**') {\n\t\t\t$res = pow($res, $operand[$i + 1]);\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bo8_tia.php:47\n\
    Stack trace:\n#0 /tmp/tmp3bo8_tia.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3bo8_tia.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = array_shift($operand);\n    foreach ($operator as $key\
    \ => $value) {\n        $res = calculation($res, $value, $operand[$key]);\n  \
    \  }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calculation()\
    \ in /tmp/tmpl_25426z.php:23\nStack trace:\n#0 /tmp/tmpl_25426z.php(29): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmpl_25426z.php(33): candidate(Array, Array)\n#2 /tmp/tmpl_25426z.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl_25426z.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    if ($operator[$i] == \"+\") {\n      $res += $operand[$i + 1];\n    }\
    \ else if ($operator[$i] == \"-\") {\n      $res -= $operand[$i + 1];\n    } else\
    \ if ($operator[$i] == \"*\") {\n      $res *= $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == \"//\") {\n      $res = floor($res / $operand[$i + 1]);\n\
    \    } else if ($operator[$i] == \"**\") {\n      $res = pow($res, $operand[$i\
    \ + 1]);\n    }\n  }\n  return $res;\n}\n\necho do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekbzupuj.php:45\n\
    Stack trace:\n#0 /tmp/tmpekbzupuj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpekbzupuj.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo_7bu03.php:29\n\
    Stack trace:\n#0 /tmp/tmpqo_7bu03.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqo_7bu03.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $ret = array_shift($operand);\n    foreach ($operator as $o)\
    \ {\n        $m = array_shift($operand);\n        if ($o == \"+\") {\n       \
    \     $ret += $m;\n        } else if ($o == \"-\") {\n            $ret -= $m;\n\
    \        } else if ($o == \"*\") {\n            $ret *= $m;\n        } else if\
    \ ($o == \"//\") {\n            $ret = intval($ret / $m);\n        } else if ($o\
    \ == \"**\") {\n            $ret = intval(pow($ret, $m));\n        }\n    }\n\
    \    return $ret;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ftt_d4e.php:45\n\
    Stack trace:\n#0 /tmp/tmp4ftt_d4e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4ftt_d4e.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here.\n  $result = array_shift($operand);\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i];\n        break;\n      case '-':\n\
    \        $result -= $operand[$i];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i]);\n        break;\n    }\n  }\n  return $result;\n}\n$operator\
    \ = array('+', '*', '-');\n$operand = array(2, 3, 4, 5);\necho do_algebra($operator,\
    \ $operand);\necho \"\\n\";\n$operator = array('+', '+', '+', '+');\n$operand\
    \ = array(10, 10, 10, 10, 10);\necho do_algebra($operator, $operand);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n50\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qcg24wn.php:58\n\
    Stack trace:\n#0 /tmp/tmp0qcg24wn.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp0qcg24wn.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i];\n                break;\n          \
    \  case '*':\n                $result *= $operand[$i];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i]);\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqojtgzz.php:49\n\
    Stack trace:\n#0 /tmp/tmpdqojtgzz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdqojtgzz.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    $i = 0;\n    while ($i < count($operator))\
    \ {\n        switch ($operator[$i]) {\n            case '+':\n               \
    \ $result += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i + 1];\n                break;\n      \
    \      case '*':\n                $result *= $operand[$i + 1];\n             \
    \   break;\n            case '//':\n                $result /= $operand[$i + 1];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n        $i++;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0lyj81h.php:52\n\
    Stack trace:\n#0 /tmp/tmpt0lyj81h.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpt0lyj81h.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $index\
    \ => $value) {\n    switch ($value) {\n      case '+':\n        $result += $operand[$index];\n\
    \        break;\n      case '-':\n        $result -= $operand[$index];\n     \
    \   break;\n      case '*':\n        $result *= $operand[$index];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$index]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$index]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\n$result = do_algebra(\n \
    \ ['+', '*', '-'],\n  [2, 3, 4, 5]\n);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "int(15)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o567ejt.php:55\n\
    Stack trace:\n#0 /tmp/tmp2o567ejt.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2o567ejt.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = $operand[0];\n\tfor ($i = 0; $i < count($operator);\
    \ $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\tcase '+':\n\t\t\t\t$result += $operand[$i\
    \ + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\t\
    break;\n\t\t\tcase '//':\n\t\t\t\t$result //= $operand[$i + 1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '**':\n\t\t\t\t$result **= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyxbbqz1_.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // your code goes here\n  $result = $operand[0];\n  for($i =\
    \ 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n      case '+':\n\
    \        $result += $operand[$i+1];\n        break;\n      case '-':\n       \
    \ $result -= $operand[$i+1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i+1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i+1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i+1]);\n        break;\n    }\n  }\n  return $result;\n}\n$operator\
    \ = [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator,\
    \ $operand));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplusj9_2b.php:53\n\
    Stack trace:\n#0 /tmp/tmplusj9_2b.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplusj9_2b.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    if ($i === 0) {\n      $result = $operand[$i];\n    } else {\n      switch\
    \ ($operator[$i - 1]) {\n        case '+':\n          $result += $operand[$i];\n\
    \          break;\n        case '-':\n          $result -= $operand[$i];\n   \
    \       break;\n        case '*':\n          $result *= $operand[$i];\n      \
    \    break;\n        case '//':\n          $result = floor($result / $operand[$i]);\n\
    \          break;\n        case '**':\n          $result = pow($result, $operand[$i]);\n\
    \          break;\n      }\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkuhsd77.php:52\n\
    Stack trace:\n#0 /tmp/tmpnkuhsd77.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnkuhsd77.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // TODO: Write your code here\n  if (count($operator) == 0 ||\
    \ count($operand) < 2) {\n    return 0;\n  }\n  $result = $operand[0];\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $result = (int)($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) . \"\\n\";\necho do_algebra(['+', '//', '*'], [1, 2, 3, 4]) . \"\\n\";\n\
    echo do_algebra(['*', '+', '//'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['**',\
    \ '//', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['**', '+', '//'], [1,\
    \ 2, 3, 4]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\\
    n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp97nnkhhr.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = (int)($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = (int)pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1vllv4_.php:44\n\
    Stack trace:\n#0 /tmp/tmpd1vllv4_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd1vllv4_.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7pelj5p.php:28\n\
    Stack trace:\n#0 /tmp/tmpf7pelj5p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf7pelj5p.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == \"+\") {\n            $result += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == \"-\") {\n            $result -=\
    \ $operand[$i + 1];\n        } else if ($operator[$i] == \"*\") {\n          \
    \  $result *= $operand[$i + 1];\n        } else if ($operator[$i] == \"//\") {\n\
    \            $result = floor($result / $operand[$i + 1]);\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = $result ** $operand[$i + 1];\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6p1dhe7n.php:43\n\
    Stack trace:\n#0 /tmp/tmp6p1dhe7n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6p1dhe7n.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // //Your code here\n  // $length = count($operator);\n  // for($i\
    \ = 0; $i < $length; $i++){\n  //   switch($operator[$i]){\n  //     case \"+\"\
    :\n  //       $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n  //      \
    \ break;\n  //     case \"-\":\n  //       $operand[$i + 1] = $operand[$i] - $operand[$i\
    \ + 1];\n  //       break;\n  //     case \"*\":\n  //       $operand[$i + 1]\
    \ = $operand[$i] * $operand[$i + 1];\n  //       break;\n  //     case \"//\"\
    :\n  //       $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n  //\
    \       break;\n  //     case \"**\":\n  //       $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n  //       break;\n  //   }\n  // }\n  // return $operand[$length];\n\
    \  $result = $operand[0];\n  for($i = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n\
    \      case \"+\":\n        $result += $operand[$i + 1];\n        break;\n   \
    \   case \"-\":\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ \"*\":\n        $result *= $operand[$i + 1];\n        break;\n      case \"\
    //\":\n        $result = floor($result / $operand[$i + 1]);\n        break;\n\
    \      case \"**\":\n        $result = pow($result, $operand[$i + 1]);\n     \
    \   break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hrah26m.php:72\n\
    Stack trace:\n#0 /tmp/tmp4hrah26m.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp4hrah26m.php\
    \ on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '**') {\n      $intermediateResult = pow($operand[$i], $operand[$i + 1]);\n\
    \      array_splice($operand, $i, 2, $intermediateResult);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == '//') {\n      $intermediateResult = floor($operand[$i]\
    \ / $operand[$i + 1]);\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0;\
    \ $i < count($operator); $i++) {\n    if($operator[$i] == '*') {\n      $intermediateResult\
    \ = $operand[$i] * $operand[$i + 1];\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0;\
    \ $i < count($operator); $i++) {\n    if($operator[$i] == '-') {\n      $intermediateResult\
    \ = $operand[$i] - $operand[$i + 1];\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0;\
    \ $i < count($operator); $i++) {\n    if($operator[$i] == '+') {\n      $intermediateResult\
    \ = $operand[$i] + $operand[$i + 1];\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n   \nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp657em6yy.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $op_arr = array();\n  $res = array();\n  foreach($operator as\
    \ $op){\n    $op_arr[] = $op;\n  }\n  for($i = 0; $i < count($operand); $i++){\n\
    \    $res[] = $operand[$i];\n    if(isset($op_arr[$i])){\n      $res[] = $op_arr[$i];\n\
    \    }\n  }\n  return eval(implode(\"\", $res));\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk1jl7pd9.php(32) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = $result ** $operand[$i\
    \ + 1];\n        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphiohhqac.php:50\n\
    Stack trace:\n#0 /tmp/tmphiohhqac.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphiohhqac.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = $operand[0];\n\tfor ($i = 0; $i < count($operator);\
    \ $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\tcase '+':\n\t\t\t\t$result += $operand[$i\
    \ + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\t\
    break;\n\t\t\tcase '//':\n\t\t\t\t$result = floor($result / $operand[$i + 1]);\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$i +\
    \ 1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\t// 9\necho do_algebra(['+', '-', '**'],\
    \ [2, 3, 4, 5]) . \"\\n\";\t// -8\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqzl7mxk.php:52\n\
    Stack trace:\n#0 /tmp/tmpdqzl7mxk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdqzl7mxk.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $i = 0;\n  $result = $operand[$i];\n  $i++;\n  while ($i < count($operand))\
    \ {\n    if ($operator[$i - 1] == '+') {\n      $result += $operand[$i];\n   \
    \ } else if ($operator[$i - 1] == '-') {\n      $result -= $operand[$i];\n   \
    \ } else if ($operator[$i - 1] == '*') {\n      $result *= $operand[$i];\n   \
    \ } else if ($operator[$i - 1] == '//') {\n      $result = floor($result / $operand[$i]);\n\
    \    } else if ($operator[$i - 1] == '**') {\n      $result = pow($result, $operand[$i]);\n\
    \    }\n    $i++;\n  }\n  return $result;\n}\n$operator = ['+', '-', '*', '//',\
    \ '**'];\n$operand = [2, 3, 4, 5, 6];\nprint do_algebra($operator, $operand);\n\
    print \"\\n\";\n$operator = ['+', '*', '//', '-', '**'];\n$operand = [2, 3, 4,\
    \ 5, 6];\nprint do_algebra($operator, $operand);\nprint \"\\n\";\n$operator =\
    \ ['+', '*', '-', '**'];\n$operand = [2, 3, 4, 5];\nprint do_algebra($operator,\
    \ $operand);\nprint \"\\n\";\n$operator = ['+', '*', '//', '-', '**'];\n$operand\
    \ = [2, 3, 4, 5, 6];\nprint do_algebra($operator, $operand);\nprint \"\\n\";\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n-2\n15\n-2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvj2qhr8f.php:62\n\
    Stack trace:\n#0 /tmp/tmpvj2qhr8f.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpvj2qhr8f.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $stack = array();\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+': \n        \
    \        array_push($stack, $operand[$i] + $operand[$i + 1]);\n              \
    \  break;\n            case '-':\n                array_push($stack, $operand[$i]\
    \ - $operand[$i + 1]);\n                break;\n            case '*':\n      \
    \          array_push($stack, $operand[$i] * $operand[$i + 1]);\n            \
    \    break;\n            case '//':\n                array_push($stack, $operand[$i]\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           array_push($stack, $operand[$i] ** $operand[$i + 1]);\n          \
    \      break;\n        }\n    }\n    return $stack[0];\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);\n\
    \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptud3hf8k.php:54\n\
    Stack trace:\n#0 /tmp/tmptud3hf8k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptud3hf8k.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    while($operator) {\n\
    \        $op = array_shift($operator);\n        switch($op) {\n            case\
    \ '+':\n                $result += array_shift($operand);\n                break;\n\
    \            case '-':\n                $result -= array_shift($operand);\n  \
    \              break;\n            case '*':\n                $result *= array_shift($operand);\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / array_shift($operand));\n                break;\n            case '**':\n\
    \                $result = pow($result, array_shift($operand));\n            \
    \    break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppis2vnur.php:51\n\
    Stack trace:\n#0 /tmp/tmppis2vnur.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppis2vnur.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $eval = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $eval += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $eval -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $eval *= $operand[$i + 1];\n       \
    \ break;\n      case '//':\n        $eval = floor($eval / $operand[$i + 1]);\n\
    \        break;\n      case '**':\n        $eval = pow($eval, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $eval;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8zkfz7y.php:50\n\
    Stack trace:\n#0 /tmp/tmpz8zkfz7y.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpz8zkfz7y.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $operand[$i + 1] =\
    \ $operand[$i] + $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $operand[$i + 1] = $operand[$i] - $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $operand[$i + 1] = $operand[$i]\
    \ * $operand[$i + 1];\n                break;\n            case '//':\n      \
    \          $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $operand[$i + 1] =\
    \ pow($operand[$i], $operand[$i + 1]);\n                break;\n        }\n  \
    \  }\n    return $operand[count($operand) - 1];\n}\n\n$operator = [\"+\", \"*\"\
    , \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ohyojgm.php:52\n\
    Stack trace:\n#0 /tmp/tmp7ohyojgm.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7ohyojgm.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $return = array_pop($operand);\n    $l = count($operator);\n\
    \    for ($i = 0; $i < $l; $i++) {\n        switch ($operator[$i]) {\n       \
    \     case '+':\n                $return += $operand[$i];\n                break;\n\
    \            case '-':\n                $return -= $operand[$i];\n           \
    \     break;\n            case '*':\n                $return *= $operand[$i];\n\
    \                break;\n            case '//':\n                $return = floor($return\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $return = pow($return, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $return;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah09c538.php:50\n\
    Stack trace:\n#0 /tmp/tmpah09c538.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpah09c538.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5baw0rs.php:50\n\
    Stack trace:\n#0 /tmp/tmpl5baw0rs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5baw0rs.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $total = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $total += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $total -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $total *= $operand[$i + 1];\n      \
    \  break;\n      case '//':\n        $total = floor($total / $operand[$i + 1]);\n\
    \        break;\n      case '**':\n        $total = pow($total, $operand[$i +\
    \ 1]);\n        break;\n    }\n  }\n  return $total;\n}\n\ndo_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]); // 9\ndo_algebra(['+', '-'], [4, 2, 3]); // 5\ndo_algebra(['//',\
    \ '*', '+', '**'], [13, 2, 3, 2, 3]); // 256\ndo_algebra(['+', '//', '*', '**'],\
    \ [1, 2, 3, 2, 3]); // 10\ndo_algebra(['*', '*', '+', '**'], [2, 2, 3, 2, 3]);\
    \ // 59\ndo_algebra(['//', '*', '+', '**'], [24, 2, 3, 2, 3]); // 576\ndo_algebra(['*',\
    \ '*', '*', '**'], [2, 2, 3, 2, 3]); // 216\ndo_algebra(['**', '//', '*', '**'],\
    \ [2, 2, 3, 2, 3]); // 81\ndo_algebra(['**', '*', '+', '**'], [2, 2, 3, 2, 3]);\
    \ // 59\ndo_algebra(['**', '*', '+', '**'], [2, 2, 3, 2, 3]); // 59\ndo_algebra(['**',\
    \ '**', '//', '**'], [2, 2,\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvs2f1sbi.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq8kpycz.php:50\n\
    Stack trace:\n#0 /tmp/tmptq8kpycz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptq8kpycz.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operand_a = array_shift($operand);\n  $operand_b = array_shift($operand);\n\
    \  $operator = array_shift($operator);\n  switch ($operator) {\n    case '+':\n\
    \      $operand_a += $operand_b;\n      break;\n    case '-':\n      $operand_a\
    \ -= $operand_b;\n      break;\n    case '*':\n      $operand_a *= $operand_b;\n\
    \      break;\n    case '//':\n      $operand_a = floor($operand_a / $operand_b);\n\
    \      break;\n    case '**':\n      $operand_a = pow($operand_a, $operand_b);\n\
    \      break;\n  }\n  array_unshift($operand, $operand_a);\n  if (count($operator)\
    \ > 0) {\n    do_algebra($operator, $operand);\n  }\n  return $operand[0];\n}\n\
    \n$operand = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjwunuqms.php on line 42\n\nWarning: array_shift() expects\
    \ parameter 1 to be array, string given in /tmp/tmpjwunuqms.php on line 23\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmpjwunuqms.php on line 42\n5\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpjwunuqms.php on line\
    \ 42\n\nWarning: array_shift() expects parameter 1 to be array, string given in\
    \ /tmp/tmpjwunuqms.php on line 23\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpjwunuqms.php on line 42\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjwunuqms.php:56\nStack\
    \ trace:\n#0 /tmp/tmpjwunuqms.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjwunuqms.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $array = $operand;\n    $result = 0;\n    $op_num = 1;\n  \
    \  foreach ($operator as $op) {\n        if ($op == '+') {\n            $result\
    \ += $array[$op_num];\n        } elseif ($op == '-') {\n            $result -=\
    \ $array[$op_num];\n        } elseif ($op == '*') {\n            $result *= $array[$op_num];\n\
    \        } elseif ($op == '//') {\n            $result = floor($result / $array[$op_num]);\n\
    \        } elseif ($op == '**') {\n            $result = pow($result, $array[$op_num]);\n\
    \        }\n        $op_num++;\n    }\n    return $result;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1y8ixko.php:48\n\
    Stack trace:\n#0 /tmp/tmpr1y8ixko.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpr1y8ixko.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == \"+\") {\n            $result += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == \"-\") {\n            $result -=\
    \ $operand[$i + 1];\n        } else if ($operator[$i] == \"*\") {\n          \
    \  $result *= $operand[$i + 1];\n        } else if ($operator[$i] == \"//\") {\n\
    \            $result = floor($result / $operand[$i + 1]);\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = pow($result, $operand[$i + 1]);\n      \
    \  }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbopxv1qj.php:45\n\
    Stack trace:\n#0 /tmp/tmpbopxv1qj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbopxv1qj.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $output = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $output += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $output -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $output *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $output = floor($output / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $output = pow($output, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $output;\n}\n\n$operand = [2, 3,\
    \ 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkdmalfm.php:53\n\
    Stack trace:\n#0 /tmp/tmpnkdmalfm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnkdmalfm.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $calc = 0;\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        if ($i == 0) {\n            $calc = $operand[$i];\n        }\n      \
    \  if ($operator[$i] == \"+\") {\n            $calc += $operand[$i + 1];\n   \
    \     } elseif ($operator[$i] == \"-\") {\n            $calc -= $operand[$i +\
    \ 1];\n        } elseif ($operator[$i] == \"*\") {\n            $calc *= $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == \"//\") {\n            $calc = (int)\
    \ ($calc / $operand[$i + 1]);\n        } elseif ($operator[$i] == \"**\") {\n\
    \            $calc = pow($calc, $operand[$i + 1]);\n        }\n    }\n    return\
    \ $calc;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmess4_j3.php:48\n\
    Stack trace:\n#0 /tmp/tmpmess4_j3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmess4_j3.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkluiw6n.php:51\n\
    Stack trace:\n#0 /tmp/tmpzkluiw6n.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzkluiw6n.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(empty($operator) || empty($operand)) return;\n    if(count($operator)\
    \ >= count($operand)) return;\n    $result = $operand[0];\n    for($i = 0; $i\
    \ < count($operator); $i++){\n        switch($operator[$i]){\n            case\
    \ '+':\n                $result += $operand[$i+1];\n                break;\n \
    \           case '-':\n                $result -= $operand[$i+1];\n          \
    \      break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = $result ** $operand[$i+1];\n                break;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5qgct87.php:52\n\
    Stack trace:\n#0 /tmp/tmpv5qgct87.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpv5qgct87.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here\n\t$a = $operand[0];\n\t$b = $operand[1];\n\
    \tswitch ($operator[0]) {\n\t\tcase '+':\n\t\t\treturn $a + $b;\n\t\t\tbreak;\n\
    \t\tcase '-':\n\t\t\treturn $a - $b;\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\treturn\
    \ $a * $b;\n\t\t\tbreak;\n\t\tcase '//':\n\t\t\treturn $a / $b;\n\t\t\tbreak;\n\
    \t\tcase '**':\n\t\t\treturn $a ^ $b;\n\t\t\tbreak;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj8k2v5s.php:48\n\
    Stack trace:\n#0 /tmp/tmphj8k2v5s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphj8k2v5s.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i];\n        break;\n\
    \      case '*':\n        $result *= $operand[$i];\n        break;\n      case\
    \ '//':\n        $result = floor($result / $operand[$i]);\n        break;\n  \
    \    case '**':\n        $result = pow($result, $operand[$i]);\n        break;\n\
    \    }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe69nc2a.php:51\n\
    Stack trace:\n#0 /tmp/tmppe69nc2a.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppe69nc2a.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Your code here\n\t$operand = array_values($operand);\n\t$operator\
    \ = array_values($operator);\n\tfor($i = 0; $i < count($operator); $i++){\n\t\t\
    if($operator[$i] == '**'){\n\t\t\t$operand[$i] = pow($operand[$i], $operand[$i+1]);\n\
    \t\t\tunset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n\
    \t\t\t$operator = array_values($operator);\n\t\t\t$i--;\n\t\t}elseif($operator[$i]\
    \ == '//'){\n\t\t\t$operand[$i] = floor($operand[$i] / $operand[$i+1]);\n\t\t\t\
    unset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n\
    \t\t\t$operator = array_values($operator);\n\t\t\t$i--;\n\t\t}\n\t}\n\tfor($i\
    \ = 0; $i < count($operator); $i++){\n\t\tif($operator[$i] == '*'){\n\t\t\t$operand[$i]\
    \ = $operand[$i] * $operand[$i+1];\n\t\t\tunset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\
    \t\t\t$operand = array_values($operand);\n\t\t\t$operator = array_values($operator);\n\
    \t\t\t$i--;\n\t\t}\n\t}\n\tfor($i = 0; $i < count($operator); $i++){\n\t\tif($operator[$i]\
    \ == '+'){\n\t\t\t$operand[$i] = $operand[$i] + $operand[$i+1];\n\t\t\tunset($operand[$i+1]);\n\
    \t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukal3bfn.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = (int)($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = (int)pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrvv5lpo.php:49\n\
    Stack trace:\n#0 /tmp/tmpfrvv5lpo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfrvv5lpo.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  $previousOperator = '';\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    $operandOne = $result;\n    $operandTwo\
    \ = $operand[$i + 1];\n    $operator = $operator[$i];\n    if ($operator == '//'\
    \ && $previousOperator == '//') {\n      $result = $operandOne // $operandTwo;\n\
    \    } else if ($operator == '//') {\n      $result = $operandOne // $operandTwo;\n\
    \    } else if ($operator == '**' && $previousOperator == '**') {\n      $result\
    \ = $operandOne ** $operandTwo;\n    } else if ($operator == '**') {\n      $result\
    \ = $operandOne ** $operandTwo;\n    } else if ($operator == '+') {\n      $result\
    \ = $operandOne + $operandTwo;\n    } else if ($operator == '-') {\n      $result\
    \ = $operandOne - $operandTwo;\n    } else if ($operator == '*') {\n      $result\
    \ = $operandOne * $operandTwo;\n    }\n    $previousOperator = $operator;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp46o8r36q.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $op_count = count($operator);\n    $on_count = count($operand);\n\
    \    $eq = \"\";\n    for ($i = 0; $i < $op_count; $i++) {\n        if ($i > 0)\
    \ {\n            $eq .= \" \" . $operator[$i] . \" \";\n        }\n        $eq\
    \ .= $operand[$i];\n    }\n    $eq .= \" \" . $operator[$op_count] . \" \" . $operand[$on_count\
    \ - 1];\n    $result = eval(\"return $eq;\");\n    return $result;\n}\n$operand\
    \ = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);\n\
    echo \"\\n\";\n$operand = [25, 100, 33, 6, 7, 0, 50, 33];\n$operator = ['+', '-',\
    \ '*', '*', '/', '//', '**'];\necho do_algebra($operator, $operand);\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpig2tl37f.php(31) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    $end = count($operand);\n    for ($i = 0;\
    \ $i < $end; $i++) {\n        if ($i === 0) {\n            $result = $operand[$i];\n\
    \        } else {\n            switch ($operator[$i - 1]) {\n                case\
    \ '+':\n                    $result += $operand[$i];\n                    break;\n\
    \                case '-':\n                    $result -= $operand[$i];\n   \
    \                 break;\n                case '*':\n                    $result\
    \ *= $operand[$i];\n                    break;\n                case '//':\n \
    \                   $result = floor($result / $operand[$i]);\n               \
    \     break;\n                case '**':\n                    $result = pow($result,\
    \ $operand[$i]);\n                    break;\n            }\n        }\n    }\n\
    \    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywtuv9ah.php:56\n\
    Stack trace:\n#0 /tmp/tmpywtuv9ah.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpywtuv9ah.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = [];\n  $curr = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $curr += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $curr -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $curr *= $operand[$i + 1];\n       \
    \ break;\n      case '//':\n        $curr = (int)($curr / $operand[$i + 1]);\n\
    \        break;\n      case '**':\n        $curr = pow($curr, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $curr;\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]);\necho \"\\n\";\necho do_algebra(['+', '**', '-'], [2, 3,\
    \ 2, 1]);\necho \"\\n\";\necho do_algebra(['+', '*', '**', '//'], [5, 2, 3, 10]);\n\
    echo \"\\n\";\necho do_algebra(['*', '//', '**'], [4, 7, 2, 3]);\necho \"\\n\"\
    ;\necho do_algebra(['*', '**', '//'], [5, 2, 3, 10]);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n24\n\nWarning: Division by zero in /tmp/tmpk1h06eji.php on line 35\n\
    0\n2744\n100\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1h06eji.php:61\n\
    Stack trace:\n#0 /tmp/tmpk1h06eji.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpk1h06eji.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $answer = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $answer += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $answer -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $answer *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $answer = floor($answer / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $answer = pow($answer, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $answer;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ovz258g.php:52\n\
    Stack trace:\n#0 /tmp/tmp_ovz258g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_ovz258g.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here\n}\nprint_r(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5])); // 9\nprint_r(do_algebra(['//', '+', '**'], [2, 3, 4, 5])); // 25\n\
    print_r(do_algebra(['*', '-', '+'], [9, 9, 8, 4, 2, 1])); // 52\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkc64ifu9.php:31\n\
    Stack trace:\n#0 /tmp/tmpkc64ifu9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkc64ifu9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // 1.\n  // $operand[] = 0;\n  // 2.\n  // array_unshift($operand,\
    \ 0);\n  // 3.\n  // $operand = [0] + $operand;\n  array_unshift($operand, 0);\n\
    \  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n   \
    \ switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i +\
    \ 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q69svlz.php:56\n\
    Stack trace:\n#0 /tmp/tmp5q69svlz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp5q69svlz.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if (count($operator) != count($operand) - 1) return \"\";\n \
    \ $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $res += $operand[$i + 1];\n    \
    \    break;\n      case '-':\n        $res -= $operand[$i + 1];\n        break;\n\
    \      case '*':\n        $res *= $operand[$i + 1];\n        break;\n      case\
    \ '//':\n        $res /= $operand[$i + 1];\n        break;\n      case '**':\n\
    \        $res = pow($res, $operand[$i + 1]);\n        break;\n    }\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ggaw36_.php:51\n\
    Stack trace:\n#0 /tmp/tmp0ggaw36_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp0ggaw36_.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n   // your code here\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8fghoat.php:28\n\
    Stack trace:\n#0 /tmp/tmpy8fghoat.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy8fghoat.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $sum = $operand[0];\n    for($i = 0; $i < count($operator);\
    \ $i++) {\n        switch($operator[$i]) {\n            case '+': $sum += $operand[$i\
    \ + 1]; break;\n            case '-': $sum -= $operand[$i + 1]; break;\n     \
    \       case '*': $sum *= $operand[$i + 1]; break;\n            case '//': $sum\
    \ = floor($sum / $operand[$i + 1]); break;\n            case '**': $sum = pow($sum,\
    \ $operand[$i + 1]); break;\n        }\n    }\n    return $sum;\n}\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeisqqzdn.php:43\n\
    Stack trace:\n#0 /tmp/tmpeisqqzdn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeisqqzdn.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n    $result = 0;\n    $operation\
    \ = '+';\n    for ($i = 0; $i < count($operand); $i++) {\n        if ($i != 0)\
    \ {\n            $operation = $operator[$i - 1];\n        }\n        switch ($operation)\
    \ {\n            case '+':\n                $result += $operand[$i];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqrybxd0.php:54\n\
    Stack trace:\n#0 /tmp/tmpuqrybxd0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpuqrybxd0.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $num1 = array_shift($operand);\n    $num2 = array_shift($operand);\n\
    \    $op = array_shift($operator);\n    switch ($op) {\n        case '+':\n  \
    \          $result = $num1 + $num2;\n            break;\n        case '-':\n \
    \           $result = $num1 - $num2;\n            break;\n        case '*':\n\
    \            $result = $num1 * $num2;\n            break;\n        case '//':\n\
    \            $result = floor($num1 / $num2);\n            break;\n        case\
    \ '**':\n            $result = pow($num1, $num2);\n            break;\n    }\n\
    \    array_unshift($operand, $result);\n    if (count($operator) > 0) {\n    \
    \    return do_algebra($operator, $operand);\n    } else {\n        return $result;\n\
    \    }\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand) . \"\\n\";\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5,\
    \ 6];\necho do_algebra($operator, $operand) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp48vosqb.php:61\n\
    Stack trace:\n#0 /tmp/tmpp48vosqb.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpp48vosqb.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res = floor($res / $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzh68mlql.php:50\n\
    Stack trace:\n#0 /tmp/tmpzh68mlql.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzh68mlql.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // TODO\n  $size = count($operator);\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"//\"){\n      $temp = $operand[$i] / $operand[$i+1];\n\
    \      $temp = floor($temp);\n      $operand[$i] = $temp;\n      array_splice($operand,\
    \ $i+1, 1);\n      array_splice($operator, $i, 1);\n      $size--;\n      $i--;\n\
    \    }else if($operator[$i] === \"**\"){\n      $temp = pow($operand[$i], $operand[$i+1]);\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"*\"){\n      $temp = $operand[$i] * $operand[$i+1];\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"+\"){\n      $temp = $operand[$i] + $operand[$i+1];\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"-\"){\n      $temp = $operand[$i] - $operand[\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps6teww6f.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $arr=array_merge($operator,$operand);\n    $result=array_shift($arr);\n\
    \    foreach($arr as $item){\n        if(is_numeric($item)){\n            $result=$result+$item;\n\
    \        }else{\n            if($item=='*'){\n                $result=$result*$item;\n\
    \            }else if($item=='-'){\n                $result=$result-$item;\n \
    \           }else if($item=='//'){\n                $result=$result/$item;\n \
    \           }else if($item=='**'){\n                $result=$result**$item;\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpx_kovvyh.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpx_kovvyh.php on line\
    \ 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_kovvyh.php:45\n\
    Stack trace:\n#0 /tmp/tmpx_kovvyh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpx_kovvyh.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = $result ** $operand[$i + 1];\n                break;\n \
    \       }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n   \
    \ return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3zp1pzk.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3zp1pzk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpn3zp1pzk.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $op = $operator[0];\n    $result = $operand[0];\n    for ($i\
    \ = 1; $i < count($operand); $i++) {\n        switch ($op) {\n            case\
    \ '+':\n                $result += $operand[$i];\n                break;\n   \
    \         case '-':\n                $result -= $operand[$i];\n              \
    \  break;\n            case '*':\n                $result *= $operand[$i];\n \
    \               break;\n            case '//':\n                $result /= $operand[$i];\n\
    \                break;\n            case '**':\n                $result **= $operand[$i];\n\
    \                break;\n        }\n        $op = $operator[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig_lg7jy.php:52\n\
    Stack trace:\n#0 /tmp/tmpig_lg7jy.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpig_lg7jy.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here.\n    $result = $operand[0];\n    for($i\
    \ = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n       \
    \     case '+':\n                $result += $operand[$i+1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i+1];\n         \
    \       break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuopnz0id.php:51\n\
    Stack trace:\n#0 /tmp/tmpuopnz0id.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuopnz0id.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = '';\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        $result .= $operand[$i];\n        $result .= $operator[$i];\n   \
    \ }\n    $result .= $operand[count($operand) - 1];\n    return eval(\"return $result;\"\
    );\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz5epb7t0.php(27) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $f = array_shift($operator);\n    $a = array_shift($operand);\n\
    \    $r = $a;\n    foreach($operator as $i => $o) {\n        switch($o) {\n  \
    \          case '+': $r += $operand[$i]; break;\n            case '-': $r -= $operand[$i];\
    \ break;\n            case '*': $r *= $operand[$i]; break;\n            case '//':\
    \ $r = floor($r / $operand[$i]); break;\n            case '**': $r = pow($r, $operand[$i]);\
    \ break;\n        }\n    }\n    return $r;\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3sg83ot.php:40\n\
    Stack trace:\n#0 /tmp/tmpv3sg83ot.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv3sg83ot.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  foreach ($operator as $key\
    \ => $val) {\n    switch ($val) {\n      case '+':\n        $result += $operand[$key];\n\
    \        break;\n      case '-':\n        $result -= $operand[$key];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$key];\n        break;\n\
    \      case '//':\n        $result /= $operand[$key];\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$key]);\n        break;\n   \
    \ }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg695gcj.php:49\n\
    Stack trace:\n#0 /tmp/tmpmg695gcj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmg695gcj.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $output = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $output += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $output -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $output *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $output = floor($output / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $output = pow($output, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $output;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0n6nes_.php:52\n\
    Stack trace:\n#0 /tmp/tmpu0n6nes_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu0n6nes_.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(!$operator) return $operand[0];\n    $res = array_shift($operand);\n\
    \    while($op = array_shift($operator)){\n        $n = array_shift($operand);\n\
    \        switch($op){\n            case '+':\n                $res += $n;\n  \
    \              break;\n            case '-':\n                $res -= $n;\n  \
    \              break;\n            case '*':\n                $res *= $n;\n  \
    \              break;\n            case '//':\n                $res = (int)($res\
    \ / $n);\n                break;\n            case '**':\n                $res\
    \ = pow($res, $n);\n                break;\n        }\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj03m7_8j.php:52\n\
    Stack trace:\n#0 /tmp/tmpj03m7_8j.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj03m7_8j.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n    $op =\
    \ $operator[0];\n    $result = $operand[0];\n    for($i = 1; $i < count($operand);\
    \ $i++) {\n        switch($op) {\n            case '+': $result += $operand[$i];\
    \ break;\n            case '-': $result -= $operand[$i]; break;\n            case\
    \ '*': $result *= $operand[$i]; break;\n            case '//': $result = floor($result\
    \ / $operand[$i]); break;\n            case '**': $result = pow($result, $operand[$i]);\
    \ break;\n        }\n        $op = $operator[$i];\n    }\n    print($result);\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "37\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61_1072s.php:43\n\
    Stack trace:\n#0 /tmp/tmp61_1072s.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp61_1072s.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    if ($operator[$i] == '+') {\n      $res += $operand[$i + 1];\n    } else\
    \ if ($operator[$i] == '-') {\n      $res -= $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == '*') {\n      $res *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '//') {\n      $res = floor($res / $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '**') {\n      $res = pow($res, $operand[$i + 1]);\n    }\n  }\n  return\
    \ $res;\n}\n\necho do_algebra(['+', '-', '*'], [1, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ew7yu5a.php:45\n\
    Stack trace:\n#0 /tmp/tmp0ew7yu5a.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0ew7yu5a.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  if(!empty($operator) && !empty($operand)){\n\
    \    $result = $operand[0];\n    for($i = 0; $i < count($operator); $i++){\n \
    \     switch($operator[$i]){\n        case '+':\n          $result += $operand[$i+1];\n\
    \          break;\n        case '-':\n          $result -= $operand[$i+1];\n \
    \         break;\n        case '*':\n          $result *= $operand[$i+1];\n  \
    \        break;\n        case '//':\n          $result = floor($result / $operand[$i+1]);\n\
    \          break;\n        case '**':\n          $result = pow($result, $operand[$i+1]);\n\
    \          break;\n      }\n    }\n  }\n  return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\n\
    echo $result;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw70199sz.php:57\n\
    Stack trace:\n#0 /tmp/tmpw70199sz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpw70199sz.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgqd741u.php:49\n\
    Stack trace:\n#0 /tmp/tmpjgqd741u.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjgqd741u.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operand = array_reverse($operand);\n  $res = $operand[0];\n\
    \  $i = 0;\n  while (isset($operand[$i+1])) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $res += $operand[$i+1];\n        break;\n      case\
    \ '-':\n        $res -= $operand[$i+1];\n        break;\n      case '*':\n   \
    \     $res *= $operand[$i+1];\n        break;\n      case '//':\n        $res\
    \ = floor($res / $operand[$i+1]);\n        break;\n      case '**':\n        $res\
    \ = pow($res, $operand[$i+1]);\n        break;\n    }\n    $i++;\n  }\n  return\
    \ $res;\n}\n$operator = ['*', '**', '-'];\n$operand = [1, 2, 3, 4, 5];\n$r = do_algebra($operator,\
    \ $operand);\nprint $r;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7998\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q9pn4xv.php:55\n\
    Stack trace:\n#0 /tmp/tmp7q9pn4xv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7q9pn4xv.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    return 0;\n}\n\n$tests = [\n    [\n        'operator' => ['+',\
    \ '*', '-'],\n        'operand' => [2, 3, 4, 5],\n        'expected' => 9\n  \
    \  ],\n    [\n        'operator' => ['//', '*', '-'],\n        'operand' => [4,\
    \ 3, 10, 9],\n        'expected' => -6\n    ],\n    [\n        'operator' => ['*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0bpjrk8u.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n   // Write your code here ...\n   \n   // Set first number as\
    \ first value in array\n   $result = $operand[0];\n   \n   // Add next number\
    \ according to operator\n   for ($i = 0; $i < count($operator); $i++) {\n    \
    \   \n       switch ($operator[$i]) {\n           \n           case '+':\n   \
    \            $result += $operand[$i + 1];\n               break;\n           case\
    \ '-':\n               $result -= $operand[$i + 1];\n               break;\n \
    \          case '*':\n               $result *= $operand[$i + 1];\n          \
    \     break;\n           case '//':\n               $result = floor($result /\
    \ $operand[$i + 1]);\n               break;\n           case '**':\n         \
    \      $result = pow($result, $operand[$i + 1]);\n               break;\n    \
    \   }\n   }\n   \n   return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8a_ub5q.php:57\n\
    Stack trace:\n#0 /tmp/tmpq8a_ub5q.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpq8a_ub5q.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operandCount = count($operand);\n  $operatorCount = count($operator);\n\
    \  $result = [];\n  $i = 0;\n  $j = 0;\n  while ($i < $operandCount) {\n    if\
    \ ($operator[$j] == '//') {\n      $result[] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n      $i += 2;\n      $j++;\n    } elseif ($operator[$j] == '**') {\n\
    \      $result[] = pow($operand[$i], $operand[$i + 1]);\n      $i += 2;\n    \
    \  $j++;\n    } else {\n      $result[] = $operand[$i];\n      $i++;\n    }\n\
    \  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while ($i < $resultLength)\
    \ {\n    if ($operator[$j] == '*') {\n      $result[$i] *= $result[$i + 1];\n\
    \      unset($result[$i + 1]);\n      $result = array_values($result);\n     \
    \ $resultLength = count($result);\n      $j++;\n    } else {\n      $i++;\n  \
    \  }\n  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while ($i\
    \ < $resultLength) {\n    if ($operator[$j] == '+') {\n      $result[$i] += $result[$i\
    \ + 1];\n      unset($result[$i + 1]);\n      $result = array_values($result);\n\
    \      $resultLength = count($result);\n      $j++;\n    } else {\n      $i++;\n\
    \    }\n  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < $resultLength) {\n    if ($operator[$j] == '-') {\n      $result[$i] -=\
    \ $result[$i + 1];\n      unset($result[$i + 1]);\n      $result = array_values($\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbol7pnhs.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $length = count($operator);\n  for ($i = 0; $i\
    \ < $length; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result\
    \ += $operand[$i];\n        break;\n      case '-':\n        $result -= $operand[$i];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i]);\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i]);\n        break;\n\
    \    }\n  }\n  return $result;\n}\n$operator = ['+', '*', '-', '//', '**'];\n\
    $operand = [2, 3, 4, 5, 6];\n\necho do_algebra($operator, $operand);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxl5sw8h.php:53\n\
    Stack trace:\n#0 /tmp/tmpmxl5sw8h.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmxl5sw8h.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(!$operator || !$operand) return false;\n    if(count($operator)\
    \ !== count($operand) - 1) return false;\n    foreach($operator as $opt) {\n \
    \       if(!in_array($opt, ['+', '-', '*', '//', '**'])) return false;\n    }\n\
    \    foreach($operand as $opd) {\n        if(!is_int($opd) || $opd < 0) return\
    \ false;\n    }\n    $result = $operand[0];\n    for($i = 0; $i < count($operator);\
    \ $i++) {\n        switch($operator[$i]) {\n            case '+':\n          \
    \      $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = intval($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = intval(pow($result, $operand[$i + 1]));\n              \
    \  break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmn9ommn.php:57\n\
    Stack trace:\n#0 /tmp/tmpbmn9ommn.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpbmn9ommn.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $count = count($operator);\n    $result = $operand[0];\n  \
    \  for ($i = 0; $i < $count; $i++) {\n        switch ($operator[$i]) {\n     \
    \       case '+':\n                $result += $operand[$i + 1];\n            \
    \    break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result **= $operand[$i + 1];\n                break;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppp3ldrfw.php:50\n\
    Stack trace:\n#0 /tmp/tmppp3ldrfw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppp3ldrfw.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here.\n    $output = 0;\n    for($i = 0;\
    \ $i < count($operator); $i++){\n        if($i == 0){\n            $output = $operand[$i];\n\
    \        }\n        switch($operator[$i]){\n            case '+':\n          \
    \      $output += $operand[$i+1];\n                break;\n            case '-':\n\
    \                $output -= $operand[$i+1];\n                break;\n        \
    \    case '*':\n                $output *= $operand[$i+1];\n                break;\n\
    \            case '//':\n                $output = floor($output / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $output = pow($output,\
    \ $operand[$i+1]);\n                break;\n        }\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkqpnw6c.php:54\n\
    Stack trace:\n#0 /tmp/tmpqkqpnw6c.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqkqpnw6c.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $output = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $output += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $output -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $output *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $output /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $output = pow($output, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns0khco8.php:49\n\
    Stack trace:\n#0 /tmp/tmpns0khco8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpns0khco8.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    if(empty($operator) || empty($operand)){\n        return false;\n\
    \    }\n    $result = $operand[0];\n    $arr_length = count($operand);\n    for($i\
    \ = 1; $i < $arr_length; $i++){\n        switch($operator[$i-1]){\n          \
    \  case '+':\n                $result += $operand[$i];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i];\n           \
    \     break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgupww9c7.php:54\n\
    Stack trace:\n#0 /tmp/tmpgupww9c7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpgupww9c7.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Your code here\n    $result = $operand[0];\n    if ($operator\
    \ === \"+\") {\n        for ($i = 1; $i < count($operand); $i++) {\n         \
    \   $result += $operand[$i];\n        }\n    } else if ($operator === \"-\") {\n\
    \        for ($i = 1; $i < count($operand); $i++) {\n            $result -= $operand[$i];\n\
    \        }\n    } else if ($operator === \"*\") {\n        for ($i = 1; $i < count($operand);\
    \ $i++) {\n            $result *= $operand[$i];\n        }\n    } else if ($operator\
    \ === \"//\") {\n        for ($i = 1; $i < count($operand); $i++) {\n        \
    \    $result /= $operand[$i];\n        }\n    } else if ($operator === \"**\"\
    ) {\n        for ($i = 1; $i < count($operand); $i++) {\n            $result =\
    \ pow($result, $operand[$i]);\n        }\n    }\n\n    return (int) $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9ynj8hp.php:53\n\
    Stack trace:\n#0 /tmp/tmpn9ynj8hp.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn9ynj8hp.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  $len = count($operator);\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n   \
    \     $result += $operand[$i + 1];\n        break;\n      case '-':\n        $result\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $result *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $result = intval($result /\
    \ $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+', '*', '//', '**'],\
    \ [2, 3, 2, 4]) . PHP_EOL; // 12\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 2, 4, 4]) . PHP_EOL; // 5\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 2, 4]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 2, 4, 5]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*', '//',\
    \ '**'], [1, 2, 3, 2, 4, 5, 6]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 2, 4, 5, 6, 7]) . PHP_EOL; // -3\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcjsshu85.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operation = array_map(function($i, $j) {\n    if ($i === '+')\
    \ {\n      return $j[0] + $j[1];\n    } else if ($i === '-') {\n      return $j[0]\
    \ - $j[1];\n    } else if ($i === '*') {\n      return $j[0] * $j[1];\n    } else\
    \ if ($i === '//') {\n      return intval($j[0] / $j[1]);\n    } else if ($i ===\
    \ '**') {\n      return pow($j[0], $j[1]);\n    }\n  }, $operator, array_chunk($operand,\
    \ 2));\n  return array_reduce($operation, function($carry, $item) {\n    return\
    \ $carry + $item;\n  });\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4,\
    \ 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "25\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj96ppbtd.php:46\n\
    Stack trace:\n#0 /tmp/tmpj96ppbtd.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpj96ppbtd.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here...\n    $result = $operand[0];\n  \
    \  for($i = 0; $i < count($operator); $i++){\n        if($operator[$i] == \"+\"\
    ){\n            $result += $operand[$i+1];\n        }\n        if($operator[$i]\
    \ == \"-\"){\n            $result -= $operand[$i+1];\n        }\n        if($operator[$i]\
    \ == \"*\"){\n            $result *= $operand[$i+1];\n        }\n        if($operator[$i]\
    \ == \"//\"){\n            $result = floor($result / $operand[$i+1]);\n      \
    \  }\n        if($operator[$i] == \"**\"){\n            $result = pow($result,\
    \ $operand[$i+1]);\n        }\n    }\n    return $result;\n}\n\n$operator = [\"\
    +\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4y8fkya.php:52\n\
    Stack trace:\n#0 /tmp/tmpk4y8fkya.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpk4y8fkya.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operator = array_reverse($operator);\n  $operand = array_reverse($operand);\n\
    \  $result = [];\n  $i = 0;\n  $j = 0;\n  $pre_result = $operand[$i++];\n  while\
    \ ($i < count($operand)) {\n    $result[$j++] = $operand[$i++];\n    $result[$j++]\
    \ = $operator[$j];\n    $pre_result = calc($result[$j - 2], $result[$j - 1], $pre_result);\n\
    \  }\n  return $pre_result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calc() in /tmp/tmp3ngorsfs.php:30\n\
    Stack trace:\n#0 /tmp/tmp3ngorsfs.php(36): do_algebra(Array, Array)\n#1 /tmp/tmp3ngorsfs.php(40):\
    \ candidate(Array, Array)\n#2 /tmp/tmp3ngorsfs.php(45): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp3ngorsfs.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpsl3el9.php:49\n\
    Stack trace:\n#0 /tmp/tmpgpsl3el9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgpsl3el9.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operandLen = count($operand);\n    $operatorLen = count($operator);\n\
    \    if ($operandLen <= 0 || $operatorLen <= 0 || $operandLen - 1 != $operatorLen)\
    \ {\n        return -1;\n    }\n    $result = $operand[0];\n    for ($i = 0; $i\
    \ < $operatorLen; $i++) {\n        $op = $operator[$i];\n        $v = $operand[$i\
    \ + 1];\n        switch ($op) {\n            case '+':\n                $result\
    \ += $v;\n                break;\n            case '-':\n                $result\
    \ -= $v;\n                break;\n            case '*':\n                $result\
    \ *= $v;\n                break;\n            case '//':\n                $result\
    \ = floor($result / $v);\n                break;\n            case '**':\n   \
    \             $result = pow($result, $v);\n                break;\n          \
    \  default:\n                return -1;\n        }\n    }\n    return $result;\n\
    }\n$operator = array('+', '*', '-');\n$operand = array(2, 3, 4, 5);\nprint_r(do_algebra($operator,\
    \ $operand));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4twkweq.php:61\n\
    Stack trace:\n#0 /tmp/tmpb4twkweq.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpb4twkweq.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $temp = $operand[0];\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == \"+\") {\n      $temp += $operand[$i + 1];\n    }\n\
    \    if($operator[$i] == \"-\") {\n      $temp -= $operand[$i + 1];\n    }\n \
    \   if($operator[$i] == \"*\") {\n      $temp *= $operand[$i + 1];\n    }\n  \
    \  if($operator[$i] == \"//\") {\n      $temp /= $operand[$i + 1];\n    }\n  \
    \  if($operator[$i] == \"**\") {\n      $temp = pow($temp, $operand[$i + 1]);\n\
    \    }\n  }\n  return $temp;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9ja4rs_.php:51\n\
    Stack trace:\n#0 /tmp/tmps9ja4rs_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmps9ja4rs_.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $op = array_shift($operator);\n    $left = array_shift($operand);\n\
    \    $right = array_shift($operand);\n    if($op == '+') return $left + $right;\n\
    \    if($op == '-') return $left - $right;\n    if($op == '*') return $left *\
    \ $right;\n    if($op == '//') return floor($left / $right);\n    if($op == '**')\
    \ return pow($left, $right);\n    return 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoy7__q0s.php:37\n\
    Stack trace:\n#0 /tmp/tmpoy7__q0s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoy7__q0s.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$operator_value = [];\n\t$operand_value = [];\n\tforeach ($operator\
    \ as $key => $value) {\n\t\tif($value === '**') {\n\t\t\tif(count($operator_value)\
    \ === 0) {\n\t\t\t\tarray_push($operator_value, $value);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tif($operator_value[count($operator_value) - 1] === '**') {\n\t\t\t\
    \t\tarray_push($operator_value, $value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\
    while(count($operator_value) !== 0) {\n\t\t\t\t\t\t$op_value = array_pop($operator_value);\n\
    \t\t\t\t\t\tif($op_value === '//') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\
    \t\t\t\t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ (int)($first_value / $second_value));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '*') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\t\t\t\
    \t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ $first_value * $second_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '-') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\t\t\t\
    \t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ $first_value - $second_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '+') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq1t_4lpa.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result /= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '**') {\n      $result **= $operand[$i + 1];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m7qpmyb.php:44\n\
    Stack trace:\n#0 /tmp/tmp_m7qpmyb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_m7qpmyb.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $total = array_shift($operand);\n  foreach ($operator as $key\
    \ => $value) {\n    if($value == \"+\"){\n      $total += $operand[$key];\n  \
    \  } elseif($value == \"-\"){\n      $total -= $operand[$key];\n    } elseif($value\
    \ == \"*\"){\n      $total *= $operand[$key];\n    } elseif($value == \"//\"){\n\
    \      $total = floor($total / $operand[$key]);\n    } elseif($value == \"**\"\
    ){\n      $total = $total ** $operand[$key];\n    } else {\n      return \"error\"\
    ;\n    }\n  }\n  return $total;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]); // => 9\necho do_algebra(['+', '-'], [2, 3, 4]); // => 5\necho do_algebra(['+',\
    \ '-', '//'], [5, 2, 3, 2]); // => 2\necho do_algebra(['+', '-', '//', '*'], [2,\
    \ 3, 2, 3, 2]); // => 2\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, 2,\
    \ 2]); // => 27\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, 2, 2, 3]);\
    \ // => error\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, '2', 2]); //\
    \ => error\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15122444\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpleq_v01f.php:53\n\
    Stack trace:\n#0 /tmp/tmpleq_v01f.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpleq_v01f.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $str = '';\n  $operator_len = count($operator);\n  $operand_len\
    \ = count($operand);\n  for ($i = 0; $i < $operator_len; $i++) {\n    $str .=\
    \ $operand[$i] . $operator[$i];\n  }\n  $str .= $operand[$operand_len - 1];\n\
    \  return eval(\"return $str;\");\n}\n$operator = ['+', '*', '-'];\n$operand =\
    \ [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\necho $result;\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmp59zhv7jp.php(28) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rzgp1yp.php:50\n\
    Stack trace:\n#0 /tmp/tmp0rzgp1yp.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0rzgp1yp.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $length = count($operator);\n    $result = $operand[0];\n \
    \   for ($i = 0; $i < $length; $i++) {\n        if ($operator[$i] == \"+\") {\n\
    \            $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = pow($result, $operand[$i + 1]);\n      \
    \  }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcu4r6b4.php:49\n\
    Stack trace:\n#0 /tmp/tmplcu4r6b4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplcu4r6b4.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operator_list = ['+', '-', '*', '//', '**'];\n  $eval_str =\
    \ '';\n  $count = 0;\n  foreach ($operand as $number) {\n    if (in_array($operator[$count],\
    \ $operator_list)) {\n      $eval_str .= $number.$operator[$count];\n      $count++;\n\
    \    }\n  }\n  $eval_str .= $operand[count($operand) - 1];\n  return eval(\"return\
    \ $eval_str;\");\n}\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); //\
    \ 9\nprint_r(do_algebra(['//', '-', '+'], [1, 2, 4, 6])); // -1\nprint_r(do_algebra(['//',\
    \ '-', '+'], [1, 2, 4, 6, 5])); // -3\nprint_r(do_algebra(['//', '-', '+'], [1,\
    \ 2, 4, 6, 5, 2])); // 1\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmprrikhi_p.php(31) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    if ($operator[0] == \"+\") {\n        $result\
    \ = $operand[0] + $operand[1];\n    } else if ($operator[0] == \"-\") {\n    \
    \    $result = $operand[0] - $operand[1];\n    } else if ($operator[0] == \"*\"\
    ) {\n        $result = $operand[0] * $operand[1];\n    } else if ($operator[0]\
    \ == \"//\") {\n        $result = floor($operand[0] / $operand[1]);\n    } else\
    \ if ($operator[0] == \"**\") {\n        $result = pow($operand[0], $operand[1]);\n\
    \    }\n    for ($i = 1; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == \"+\") {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result = floor($result / $operand[$i + 1]);\n   \
    \     } else if ($operator[$i] == \"**\") {\n            $result = pow($result,\
    \ $operand[$i + 1]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstmo1hbn.php:55\n\
    Stack trace:\n#0 /tmp/tmpstmo1hbn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpstmo1hbn.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operator;\n  $operand;\n  $operation = array_shift($operand);\n\
    \  while( $operator ) {\n    $operation = eval(\"return {$operation} {$operator[0]}\
    \ {$operand[0]};\");\n    array_shift($operator);\n    array_shift($operand);\n\
    \  }\n  return $operation;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkx4bowhw.php:38\n\
    Stack trace:\n#0 /tmp/tmpkx4bowhw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkx4bowhw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $arr = [];\n  for ($i = 0; $i < count($operator); $i++) {\n \
    \   $arr[] = $operand[$i];\n    $arr[] = $operator[$i];\n  }\n  $arr[] = $operand[count($operand)\
    \ - 1];\n  return eval(implode('', $arr));\n}\n\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa1d8135o.php(27) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n\nvar_dump(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\
    \ // 9\nvar_dump(do_algebra(['+', '-', '//'], [10, 5, 2])); // 8\nvar_dump(do_algebra(['+',\
    \ '-', '*'], [0, 0, 0, 6])); // 0\nvar_dump(do_algebra(['+', '-', '*'], [0, 0,\
    \ 0, 0])); // 0\nvar_dump(do_algebra(['+', '-', '*'], [8, 0, 0, 6])); // 8\nvar_dump(do_algebra(['+',\
    \ '-', '*'], [8, 0, 0, 6, 12])); // 20\nvar_dump(do_algebra(['+', '-', '*'], [8,\
    \ 0, 0, -6, 12])); // 2\nvar_dump(do_algebra(['+', '-', '*'], [8, 0, 0, -6, -12]));\
    \ // -2\nvar_dump(do_algebra(['**', '//', '+', '-'], [2, 2, 5, 2])); // 2\nvar_dump(do_algebra(['**',\
    \ '//', '+', '-'], [2, 2, 5, 3])); // 3\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "int(15)\n\nWarning: Division by zero in /tmp/tmpte3j70q6.php on line 34\n\
    float(INF)\nint(0)\nint(0)\nint(48)\nint(48)\nint(-48)\nint(-48)\nfloat(2.8)\n\
    float(3.8)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpte3j70q6.php:60\n\
    Stack trace:\n#0 /tmp/tmpte3j70q6.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpte3j70q6.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $answer = 0;\n    for($i = 0; $i < count($operator); $i++){\n\
    \        if($i == 0){\n            if($operator[$i] == '+'){\n               \
    \ $answer = $operand[$i] + $operand[$i+1];\n            }\n            else if($operator[$i]\
    \ == '-'){\n                $answer = $operand[$i] - $operand[$i+1];\n       \
    \     }\n            else if($operator[$i] == '*'){\n                $answer =\
    \ $operand[$i] * $operand[$i+1];\n            }\n            else if($operator[$i]\
    \ == '//'){\n                $answer = floor($operand[$i] / $operand[$i+1]);\n\
    \            }\n            else if($operator[$i] == '**'){\n                $answer\
    \ = pow($operand[$i], $operand[$i+1]);\n            }\n        }\n        else{\n\
    \            if($operator[$i] == '+'){\n                $answer += $operand[$i+1];\n\
    \            }\n            else if($operator[$i] == '-'){\n                $answer\
    \ -= $operand[$i+1];\n            }\n            else if($operator[$i] == '*'){\n\
    \                $answer *= $operand[$i+1];\n            }\n            else if($operator[$i]\
    \ == '//'){\n                $answer = floor($answer / $operand[$i+1]);\n    \
    \        }\n            else if($operator[$i] == '**'){\n                $answer\
    \ = pow($answer, $operand[$i+1]);\n            }\n        }\n    }\n    return\
    \ $answer;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvai_20kx.php:66\n\
    Stack trace:\n#0 /tmp/tmpvai_20kx.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvai_20kx.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if (empty($operator) || empty($operand)) {\n    return null;\n\
    \  }\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjohhl4sq.php:53\n\
    Stack trace:\n#0 /tmp/tmpjohhl4sq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpjohhl4sq.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = array_shift($operand);\n\tforeach ($operator as $key\
    \ => $value) {\n\t\t$operand[$key] = $value($result, $operand[$key]);\n\t}\n\t\
    return $operand[count($operand) - 1];\n}\n\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmpozlz0io3.php:23\n\
    Stack trace:\n#0 /tmp/tmpozlz0io3.php(29): do_algebra(Array, Array)\n#1 /tmp/tmpozlz0io3.php(33):\
    \ candidate(Array, Array)\n#2 /tmp/tmpozlz0io3.php(38): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpozlz0io3.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = 0;\n    $count = count($operand);\n    $isFirst =\
    \ true;\n    for ($i = 0; $i < $count; $i++) {\n        if ($isFirst) {\n    \
    \        $result = $operand[$i];\n            $isFirst = false;\n        } else\
    \ {\n            switch ($operator[$i - 1]) {\n                case '+':\n   \
    \                 $result += $operand[$i];\n                    break;\n     \
    \           case '-':\n                    $result -= $operand[$i];\n        \
    \            break;\n                case '*':\n                    $result *=\
    \ $operand[$i];\n                    break;\n                case '//':\n    \
    \                $result = floor($result / $operand[$i]);\n                  \
    \  break;\n                case '**':\n                    $result = pow($result,\
    \ $operand[$i]);\n                    break;\n            }\n        }\n    }\n\
    \    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    $result = do_algebra($operator, $operand);\necho $result;\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1u171ro.php:60\n\
    Stack trace:\n#0 /tmp/tmpp1u171ro.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpp1u171ro.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operand[] = end($operand);\n    $output = [\n        '+' =>\
    \ function ($a, $b) {\n            return $a + $b;\n        },\n        '-' =>\
    \ function ($a, $b) {\n            return $a - $b;\n        },\n        '*' =>\
    \ function ($a, $b) {\n            return $a * $b;\n        },\n        '//' =>\
    \ function ($a, $b) {\n            return (int) ($a / $b);\n        },\n     \
    \   '**' => function ($a, $b) {\n            return pow($a, $b);\n        }\n\
    \    ];\n    $result = array_shift($operand);\n    foreach ($operator as $key\
    \ => $value) {\n        $result = $output[$value]($result, $operand[$key]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hkub0x_.php:52\n\
    Stack trace:\n#0 /tmp/tmp_hkub0x_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_hkub0x_.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = (int)($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n$operator = ['+', '*',\
    \ '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp005663w6.php:46\n\
    Stack trace:\n#0 /tmp/tmp005663w6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp005663w6.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $expression = \"\";\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    $expression .= $operand[$i] . $operator[$i];\n  }\n  $expression .= $operand[count($operand)\
    \ - 1];\n  return eval(\"return $expression;\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx86666ol.php(26) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $operator = array_reverse($operator);\n    $operand = array_reverse($operand);\n\
    \    $result = [];\n    for ($i = 0; $i < count($operator); $i++) {\n        if\
    \ ($operator[$i] == \"+\") {\n            $result[] = $operand[$i + 1] + $operand[$i];\n\
    \        } elseif ($operator[$i] == \"-\") {\n            $result[] = $operand[$i\
    \ + 1] - $operand[$i];\n        } elseif ($operator[$i] == \"*\") {\n        \
    \    $result[] = $operand[$i + 1] * $operand[$i];\n        } elseif ($operator[$i]\
    \ == \"//\") {\n            $result[] = floor($operand[$i + 1] / $operand[$i]);\n\
    \        } elseif ($operator[$i] == \"**\") {\n            $result[] = pow($operand[$i\
    \ + 1], $operand[$i]);\n        }\n    }\n    return $result[0];\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7cnuazq.php:45\n\
    Stack trace:\n#0 /tmp/tmpu7cnuazq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu7cnuazq.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == \"*\") {\n      $operand[$i] = $operand[$i] * $operand[$i + 1];\n      array_splice($operand,\
    \ $i + 1, 1);\n      array_splice($operator, $i, 1);\n      $i--;\n    } else\
    \ if($operator[$i] == \"/\") {\n      $operand[$i] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n      array_splice($operand, $i + 1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    } else if($operator[$i] == \"^\") {\n      $operand[$i]\
    \ = pow($operand[$i], $operand[$i + 1]);\n      array_splice($operand, $i + 1,\
    \ 1);\n      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i\
    \ = 0; $i < count($operator); $i++) {\n    if($operator[$i] == \"+\") {\n    \
    \  $operand[$i] = $operand[$i] + $operand[$i + 1];\n      array_splice($operand,\
    \ $i + 1, 1);\n      array_splice($operator, $i, 1);\n      $i--;\n    } else\
    \ if($operator[$i] == \"-\") {\n      $operand[$i] = $operand[$i] - $operand[$i\
    \ + 1];\n      array_splice($operand, $i + 1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  return $operand[0];\n}\necho do_algebra(['+',\
    \ '-', '*', '/', '^'], [2, 3, 4, 5, 2]) . \"\\n\"; //11\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg55ovho8.php:60\n\
    Stack trace:\n#0 /tmp/tmpg55ovho8.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg55ovho8.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = 0;\n  $num_operand = count($operand);\n  $num_operator\
    \ = count($operator);\n  $mul_div = 0;\n  $exp = 0;\n  $expression = \"\";\n \
    \ $counter = 0;\n  $result = $operand[0];\n  while($counter < $num_operator) {\n\
    \    switch($operator[$counter]) {\n      case \"+\":\n        $result += $operand[$counter\
    \ + 1];\n        $expression .= \"+\".$operand[$counter + 1];\n        break;\n\
    \      case \"-\":\n        $result -= $operand[$counter + 1];\n        $expression\
    \ .= \"-\".$operand[$counter + 1];\n        break;\n      case \"*\":\n      \
    \  $mul_div += $operand[$counter + 1];\n        $expression .= \"*\".$operand[$counter\
    \ + 1];\n        break;\n      case \"//\":\n        $mul_div -= $operand[$counter\
    \ + 1];\n        $expression .= \"//\".$operand[$counter + 1];\n        break;\n\
    \      case \"**\":\n        $exp += $operand[$counter + 1];\n        $expression\
    \ .= \"**\".$operand[$counter + 1];\n        break;\n    }\n    $counter++;\n\
    \  }\n  $result += $mul_div;\n  if($exp > 0) {\n    $result = pow($result, $exp);\n\
    \  }\n  return \"result = $expression\\n=> result = $result\";\n}\n\n$operator\
    \ = ['+', '-', '*', '//', '**'];\n$operand = [2, 3, 4, 5, 6];\necho do_algebra($operator,\
    \ $operand);\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "result = +3-4*5//6**\n=> result = 0\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp2ykw1zo4.php:70\nStack trace:\n#0 /tmp/tmp2ykw1zo4.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2ykw1zo4.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i];\n                break;\n          \
    \  case '*':\n                $result *= $operand[$i];\n                break;\n\
    \            case '//':\n                $result /= $operand[$i];\n          \
    \      break;\n            case '**':\n                $result **= $operand[$i];\n\
    \                break;\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjer8kql5.php:50\n\
    Stack trace:\n#0 /tmp/tmpjer8kql5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjer8kql5.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res = floor($res / $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1o2fxfgz.php:50\n\
    Stack trace:\n#0 /tmp/tmp1o2fxfgz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1o2fxfgz.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '**') {\n      $operand[$i + 1] = pow($operand[$i], $operand[$i + 1]);\n\
    \      array_splice($operand, $i, 1);\n      array_splice($operator, $i, 1);\n\
    \      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '//') {\n      $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n\
    \      array_splice($operand, $i, 1);\n      array_splice($operator, $i, 1);\n\
    \      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '*') {\n      $operand[$i + 1] = $operand[$i] * $operand[$i + 1];\n     \
    \ array_splice($operand, $i, 1);\n      array_splice($operator, $i, 1);\n    \
    \  $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '+') {\n      $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n     \
    \ array_splice($operand, $i, 1);\n      array_splice($operator, $i, 1);\n    \
    \  $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '-') {\n      $operand[$i + 1] = $operand[$i] - $operand[$i + 1];\n     \
    \ array_splice($operand, $i, 1);\n      array_splice($operator, $i, 1);\n    \
    \  $i--;\n   \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6y6jiods.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb33gty2g.php:30\n\
    Stack trace:\n#0 /tmp/tmpb33gty2g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb33gty2g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $result;\n}\n\n$operator = array('+', '*', '-');\n\
    $operand = array(2, 3, 4, 5);\necho do_algebra($operator, $operand);\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85_35ytz.php:54\n\
    Stack trace:\n#0 /tmp/tmp85_35ytz.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp85_35ytz.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = array_shift($operand);\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    $op = $operator[$i];\n    switch ($op) {\n      case '+':\n   \
    \     $result += $operand[$i];\n        break;\n      case '-':\n        $result\
    \ -= $operand[$i];\n        break;\n      case '*':\n        $result *= $operand[$i];\n\
    \        break;\n      case '//':\n        $result = intval($result / $operand[$i]);\n\
    \        break;\n      case '**':\n        $result = pow($result, $operand[$i]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\n$tests = [\n  [\n    'input'\
    \ => [\n      'operator' => ['+', '*', '-'],\n      'operand' => [2, 3, 4, 5]\n\
    \    ],\n    'expected' => 9\n  ],\n  [\n    'input' => [\n      'operator' =>\
    \ ['//', '**'],\n      'operand' => [12, 3, 3]\n    ],\n    'expected' => 2\n\
    \  ],\n  [\n    'input' => [\n      'operator' => ['**', '*', '//'],\n      'operand'\
    \ => [2, 3, 2, 8]\n    ],\n    'expected' => 12\n  ],\n  [\n    'input' => [\n\
    \      'operator' => ['+', '*', '-'],\n      'operand' => [1, 2, 3, 4, 5]\n  \
    \  ],\n    'expected' => -4\n  ],\n  [\n    'input' => [\n      'operator' =>\
    \ ['//', '+', '//', '-', '**'],\n      'operand' => [10, 2, 4, 2, 3, 2]\n    ],\n\
    \    'expected' => -2\n  ],\n  [\n    'input' => [\n      'operator' => ['+',\
    \ '+', '*', '-', '//', '**'],\n      'operand'\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3_lncsz0.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $len = count($operator);\n  $num = count($operand);\n  $result\
    \ = $operand[0];\n  for ($i = 0; $i < $len; $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja_o43dr.php:51\n\
    Stack trace:\n#0 /tmp/tmpja_o43dr.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpja_o43dr.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Your code here\n  $a = $operand[0];\n  for($i = 0; $i < count($operator);\
    \ $i++){\n    switch($operator[$i]){\n      case '+':\n        $a += $operand[$i+1];\n\
    \        break;\n      case '-':\n        $a -= $operand[$i+1];\n        break;\n\
    \      case '*':\n        $a *= $operand[$i+1];\n        break;\n      case '//':\n\
    \        $a = floor($a / $operand[$i+1]);\n        break;\n      case '**':\n\
    \        $a = pow($a, $operand[$i+1]);\n        break;\n    }\n  }\n  return $a;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtfog34z.php:50\n\
    Stack trace:\n#0 /tmp/tmpxtfog34z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxtfog34z.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result **= $operand[$i + 1];\n        break;\n   \
    \ }\n  }\n  return $result;\n}\n\nprint(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ru2b3k7.php:51\n\
    Stack trace:\n#0 /tmp/tmp2ru2b3k7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2ru2b3k7.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $length = count($operator);\n    $output = $operand[0];\n \
    \   for ($i = 0; $i < $length; $i++) {\n        if ($operator[$i] == '+') {\n\
    \            $output += $operand[$i + 1];\n        } elseif ($operator[$i] ==\
    \ '-') {\n            $output -= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '*') {\n            $output *= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '//') {\n            $output /= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '**') {\n            $output **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $output;\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1lst66fk.php:45\n\
    Stack trace:\n#0 /tmp/tmp1lst66fk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1lst66fk.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if(!count($operator) || !count($operand)) return null;\n  $res\
    \ = $operand[0];\n  for($i = 0; $i < count($operator); $i++) {\n    switch($operator[$i])\
    \ {\n      case '+':\n        $res += $operand[$i + 1];\n        break;\n    \
    \  case '-':\n        $res -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $res *= $operand[$i + 1];\n        break;\n      case '//':\n       \
    \ $res = floor($res / $operand[$i + 1]);\n        break;\n      case '**':\n \
    \       $res = pow($res, $operand[$i + 1]);\n        break;\n    }\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd08vws28.php:51\n\
    Stack trace:\n#0 /tmp/tmpd08vws28.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpd08vws28.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4cob77q.php:49\n\
    Stack trace:\n#0 /tmp/tmpt4cob77q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpt4cob77q.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $exp = '';\n    for ($i = 0; $i < count($operand); $i++) {\n\
    \        $exp .= $operand[$i];\n        if ($i < count($operator)) {\n       \
    \     $exp .= $operator[$i];\n        }\n    }\n    return eval(\"return $exp;\"\
    );\n}\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6])); // 9\nprint_r(do_algebra(['*', '-', '+'], [2,\
    \ 3, 4, 5])); // 8\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]));\
    \ // 16\nprint_r(do_algebra(['+', '*', '+'], [2, 3, 4, 5, 6, 7])); // 28\nprint_r(do_algebra(['*',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7])); // -40\nprint_r(do_algebra(['*', '*', '*'],\
    \ [2, 3, 4, 5, 6, 7])); // 5040\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4,\
    \ 5, 6, 7, 8])); // 40320\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6,\
    \ 7, 8, 9])); // 362880\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])); // 3628800\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11])); // 39916800\nprint_r(do_algebra(['*', '*', '*'\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpazw4qpcl.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // // return 5;\n  // // This one failed the test\n  // $res\
    \ = [];\n  // $nums = [];\n  // foreach ($operand as $k => $v) {\n  //   array_push($nums,\
    \ $v);\n  //   if (isset($operator[$k])) {\n  //     array_push($res, $operator[$k]);\n\
    \  //   }\n  // }\n  // $operand = $nums;\n  // $total = $operand[0];\n  // for\
    \ ($i = 0; $i < count($res); $i++) {\n  //   if ($res[$i] == '*') {\n  //    \
    \ $total *= $operand[$i + 1];\n  //   } else if ($res[$i] == '+') {\n  //    \
    \ $total += $operand[$i + 1];\n  //   } else if ($res[$i] == '-') {\n  //    \
    \ $total -= $operand[$i + 1];\n  //   } else if ($res[$i] == '//') {\n  //   \
    \  $total = floor($total / $operand[$i + 1]);\n  //   } else if ($res[$i] == '**')\
    \ {\n  //     $total = pow($total, $operand[$i + 1]);\n  //   }\n  // }\n  //\
    \ return $total;\n  // This one finally passed the test\n  return eval(implode('',\
    \ array_map(function($op, $n) {\n    if ($op == '//') return \"floor($n \";\n\
    \    if ($op == '**') return \"$n ** \";\n    return \"$n $op \";\n  }, $operator,\
    \ $operand)) . array_pop($operand));\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7dhf9_qm.php(52) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t// Write your code here\n\t// To print results to the standard\
    \ output you can use print\n\t// Example: print \"Hello world!\";\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk65il6_j.php:30\n\
    Stack trace:\n#0 /tmp/tmpk65il6_j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk65il6_j.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $eval = array_shift($operand);\n  foreach ($operator as $op)\
    \ {\n    switch ($op) {\n      case '+':\n        $eval += array_shift($operand);\n\
    \        break;\n      case '-':\n        $eval -= array_shift($operand);\n  \
    \      break;\n      case '*':\n        $eval *= array_shift($operand);\n    \
    \    break;\n      case '//':\n        $eval = intdiv($eval, array_shift($operand));\n\
    \        break;\n      case '**':\n        $eval = pow($eval, array_shift($operand));\n\
    \        break;\n    }\n  }\n  return $eval;\n}\n\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh0ybp29.php:53\n\
    Stack trace:\n#0 /tmp/tmpwh0ybp29.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwh0ybp29.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if (empty($operator) || empty($operand)) {\n    return false;\n\
    \  }\n  $result = reset($operand);\n  foreach ($operator as $index => $op) {\n\
    \    switch ($op) {\n      case '+':\n        $result += $operand[$index + 1];\n\
    \        break;\n      case '-':\n        $result -= $operand[$index + 1];\n \
    \       break;\n      case '*':\n        $result *= $operand[$index + 1];\n  \
    \      break;\n      case '//':\n        $result = floor($result / $operand[$index\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$index\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qhff2ar.php:55\n\
    Stack trace:\n#0 /tmp/tmp7qhff2ar.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7qhff2ar.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nprint do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\\
    n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\\
    n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5])\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0v2b7m2s.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  if(!$operator || !$operand) return;\n  $opArr = [];\n  for($i\
    \ = 0; $i < count($operator); $i++) {\n    $opArr[] = $operand[$i];\n    $opArr[]\
    \ = $operator[$i];\n  }\n  $opArr[] = $operand[count($operand) - 1];\n  //print_r($opArr);\n\
    \  //print_r(count($opArr));\n  $formula = implode(\" \", $opArr);\n  //echo $formula;\n\
    \  return eval(\"return $formula;\");\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmpq89_pu53.php(32) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == \"+\") {\n      $result = $operand[$i] + $operand[$i + 1];\n      unset($operand[$i\
    \ + 1]);\n      $operand[$i] = $result;\n    } else if($operator[$i] == \"-\"\
    ) {\n      $result = $operand[$i] - $operand[$i + 1];\n      unset($operand[$i\
    \ + 1]);\n      $operand[$i] = $result;\n    } else if($operator[$i] == \"*\"\
    ) {\n      $result = $operand[$i] * $operand[$i + 1];\n      unset($operand[$i\
    \ + 1]);\n      $operand[$i] = $result;\n    } else if($operator[$i] == \"//\"\
    ) {\n      $result = $operand[$i] / $operand[$i + 1];\n      unset($operand[$i\
    \ + 1]);\n      $operand[$i] = $result;\n    } else if($operator[$i] == \"**\"\
    ) {\n      $result = $operand[$i] ** $operand[$i + 1];\n      unset($operand[$i\
    \ + 1]);\n      $operand[$i] = $result;\n    }\n  }\n  return $result;\n}\n\n\
    $operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62bbwr56.php:56\n\
    Stack trace:\n#0 /tmp/tmp62bbwr56.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp62bbwr56.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n    $operator_count\
    \ = count($operator);\n    $i = 0;\n    $eval_result = $operand[0];\n    $operand_count\
    \ = count($operand);\n    $operand_count--;\n    for($i=0; $i<$operator_count;\
    \ $i++){\n        switch($operator[$i]){\n            case '+':\n            \
    \    $eval_result = $eval_result + $operand[$i+1];\n                break;\n \
    \           case '-':\n                $eval_result = $eval_result - $operand[$i+1];\n\
    \                break;\n            case '*':\n                $eval_result =\
    \ $eval_result * $operand[$i+1];\n                break;\n            case '//':\n\
    \                $eval_result = $eval_result / $operand[$i+1];\n             \
    \   break;\n            case '**':\n                $eval_result = $eval_result\
    \ ** $operand[$i+1];\n                break;\n        }\n    }\n    return $eval_result;\n\
    }\n\nprint do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnvms1dw.php:58\n\
    Stack trace:\n#0 /tmp/tmpgnvms1dw.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpgnvms1dw.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $answer = array_shift($operand);\n  while($operator && $operand)\
    \ {\n    $operator = array_shift($operator);\n    $num = array_shift($operand);\n\
    \    switch($operator) {\n      case '+':\n        $answer += $num;\n        break;\n\
    \      case '-':\n        $answer -= $num;\n        break;\n      case '*':\n\
    \        $answer *= $num;\n        break;\n      case '//':\n        $answer =\
    \ floor($answer / $num);\n        break;\n      case '**':\n        $answer =\
    \ pow($answer, $num);\n        break;\n    }\n  }\n  return $answer;\n}\n\n$a\
    \ = array('+', '*', '-');\n$b = array(2, 3, 4, 5);\necho do_algebra($a, $b);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, string given\
    \ in /tmp/tmprltrfhy5.php on line 23\n5\n\nWarning: array_shift() expects parameter\
    \ 1 to be array, string given in /tmp/tmprltrfhy5.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprltrfhy5.php:55\nStack trace:\n\
    #0 /tmp/tmprltrfhy5.php(60): test()\n#1 {main}\n  thrown in /tmp/tmprltrfhy5.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $operand[0] = $operand[0] * 1;\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == '+') {\n      $operand[$i + 1] = $operand[$i] +\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $operand[$i\
    \ + 1] = $operand[$i] - $operand[$i + 1];\n    } else if ($operator[$i] == '*')\
    \ {\n      $operand[$i + 1] = $operand[$i] * $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == '//') {\n      $operand[$i + 1] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n    }\n    $i++;\n  }\n  return $operand[count($operand)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv36dhygz.php:46\n\
    Stack trace:\n#0 /tmp/tmpv36dhygz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv36dhygz.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = array_shift($operand);\n\tforeach ($operator as $index\
    \ => $operation) {\n\t\tswitch ($operation) {\n\t\t\tcase '+':\n\t\t\t\t$result\
    \ += $operand[$index];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$index];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$index];\n\t\t\t\t\
    break;\n\t\t\tcase '//':\n\t\t\t\t$result /= $operand[$index];\n\t\t\t\tbreak;\n\
    \t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$index]);\n\t\t\t\t\
    break;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwslmu71l.php:50\n\
    Stack trace:\n#0 /tmp/tmpwslmu71l.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwslmu71l.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = null;\n    $operand_count = count($operand);\n  \
    \  $operator_count = count($operator);\n    $last_operator = $operator[$operator_count\
    \ - 1];\n    $last_operand = $operand[$operand_count - 1];\n    $expression =\
    \ \"return \";\n    if($operator_count < 1 || $operand_count < 2){\n        return\
    \ null;\n    }\n    for($i = 0; $i < $operand_count - 1; $i++){\n        $expression\
    \ .= $operand[$i] . $operator[$i];\n    }\n    $expression .= $last_operand .\
    \ \";\";\n    return eval($expression);\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9\nParse error: syntax error in /tmp/tmpmg0r2r0q.php(34) : eval()'d code\
    \ on line 1\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  $result = $operand[0];\n  $count = count($operator);\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    if ($operator[$i] == '+') {\n      $result +=\
    \ $operand[$i + 1];\n    } elseif ($operator[$i] == '-') {\n      $result -= $operand[$i\
    \ + 1];\n    } elseif ($operator[$i] == '*') {\n      $result *= $operand[$i +\
    \ 1];\n    } elseif ($operator[$i] == '//') {\n      $result = (int) ($result\
    \ / $operand[$i + 1]);\n    } elseif ($operator[$i] == '**') {\n      $result\
    \ = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n\n$operand\
    \ = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdwmfrck.php:50\n\
    Stack trace:\n#0 /tmp/tmpcdwmfrck.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcdwmfrck.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n  // Write your code here...\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp102n_w6h.php:29\n\
    Stack trace:\n#0 /tmp/tmp102n_w6h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp102n_w6h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n    $result = array_shift($operand);\n    foreach ($operator as\
    \ $key => $value) {\n        switch ($value) {\n            case '+':\n      \
    \          $result += $operand[$key];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$key];\n                break;\n \
    \           case '*':\n                $result *= $operand[$key];\n          \
    \      break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$key]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$key]);\n                break;\n  \
    \      }\n    }\n    return $result;\n}\nprint do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['**', '//', '+'], [2, 3, 4, 5]) . \"\
    \\n\";\nprint do_algebra(['+', '-'], [3, 5, 1]) . \"\\n\";\nprint do_algebra(['*',\
    \ '//'], [3, 7, 2]) . \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n7\n7\n10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr885wbdv.php:53\n\
    Stack trace:\n#0 /tmp/tmpr885wbdv.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpr885wbdv.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = 0;\n\tfor ($i = 0; $i < count($operator); $i++) {\n\
    \t\tif ($i == 0) {\n\t\t\t$result = ($operator[$i] == '//') ? (int)($operand[$i]\
    \ / $operand[$i + 1]) :\n\t\t\t\t\t\t\t\t\t\t\t\t$operand[$i] . $operator[$i]\
    \ . $operand[$i + 1];\n\t\t} else {\n\t\t\t$result = ($operator[$i] == '//') ?\
    \ (int)($result / $operand[$i + 1]) :\n\t\t\t\t\t\t\t\t\t\t\t\t$result . $operator[$i]\
    \ . $operand[$i + 1];\n\t\t}\n\t}\n\treturn eval(\"return $result;\");\n}\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '9'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$result = $operand[0];\n\t$i = 0;\n\tforeach ($operator as $o)\
    \ {\n\t\tswitch ($o) {\n\t\t\tcase '+':\n\t\t\t\t$result += $operand[$i + 1];\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\t\t\t\t\
    break;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\t$result = floor($result / $operand[$i + 1]);\n\t\t\t\
    \tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$i + 1]);\n\
    \t\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oxgckf5.php:55\n\
    Stack trace:\n#0 /tmp/tmp8oxgckf5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8oxgckf5.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\tif (count($operator) == 0 || count($operand) == 0) {\n\t\treturn\
    \ 0;\n\t}\n\t$result = $operand[0];\n\t$index = 0;\n\tfor ($i = 1; $i < count($operand);\
    \ $i++) {\n\t\tif ($operator[$index] == '+') {\n\t\t\t$result += $operand[$i];\n\
    \t\t} else if ($operator[$index] == '-') {\n\t\t\t$result -= $operand[$i];\n\t\
    \t} else if ($operator[$index] == '*') {\n\t\t\t$result *= $operand[$i];\n\t\t\
    } else if ($operator[$index] == '//') {\n\t\t\t$result = floor($result / $operand[$i]);\n\
    \t\t} else if ($operator[$index] == '**') {\n\t\t\t$result = pow($result, $operand[$i]);\n\
    \t\t}\n\t\t$index++;\n\t}\n\treturn $result;\n}\n\n$operator = [\"+\", \"*\",\
    \ \"-\"];\n$operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0941mrla.php:52\n\
    Stack trace:\n#0 /tmp/tmp0941mrla.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0941mrla.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n// expression and return the evaluation\
    \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n\
    // Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n//\
    \ Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array =\
    \ [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The\
    \ length of operator list is equal to the length of operand list minus one.\n\
    // Operand is a list of of non-negative integers.\n// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunction do_algebra($operator,\
    \ $operand) {\n\t$output = $operand[0];\n\t$i = 0;\n\t$j = 1;\n\twhile($i < count($operator)){\n\
    \t\tswitch($operator[$i]){\n\t\t\tcase '+':\n\t\t\t\t$output += $operand[$j];\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$output -= $operand[$j];\n\t\t\t\tbreak;\n\
    \t\t\tcase '*':\n\t\t\t\t$output *= $operand[$j];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '//':\n\t\t\t\t$output = floor($output / $operand[$j]);\n\t\t\t\tbreak;\n\t\t\
    \tcase '**':\n\t\t\t\t$output = pow($output, $operand[$j]);\n\t\t\t\tbreak;\n\t\
    \t}\n\t\t$i++;\n\t\t$j++;\n\t}\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6s4637_.php:53\n\
    Stack trace:\n#0 /tmp/tmpg6s4637_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpg6s4637_.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
