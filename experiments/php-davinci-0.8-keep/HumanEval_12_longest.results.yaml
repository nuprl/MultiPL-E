name: HumanEval_12_longest
language: php
results:
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // your code here\n    $result = null;\n    if (empty($strings)) {\n\
    \        return null;\n    }\n    foreach ($strings as $str) {\n        if ($result\
    \ == null) {\n            $result = $str;\n        } else {\n            if (strlen($str)\
    \ > strlen($result)) {\n                $result = $str;\n            }\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return NULL;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = '';\n  foreach ($strings as $s) {\n    if (strlen($s) > strlen($longest))\
    \ {\n      $longest = $s;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45fu8cx9.php:24\n\
    Stack trace:\n#0 /tmp/tmp45fu8cx9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp45fu8cx9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return \"None\";\n    }\n    $maxLength\
    \ = 0;\n    $longestStr = '';\n    foreach ($strings as $s) {\n        if (strlen($s)\
    \ > $maxLength) {\n            $maxLength = strlen($s);\n            $longestStr\
    \ = $s;\n        }\n    }\n    return $longestStr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsemt65sp.php:29\n\
    Stack trace:\n#0 /tmp/tmpsemt65sp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsemt65sp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = \"\";\n\tforeach ($strings as $value) {\n\t\tif (strlen($value)\
    \ > strlen($longest)) {\n\t\t\t$longest = $value;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1j693gb.php:23\n\
    Stack trace:\n#0 /tmp/tmpc1j693gb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc1j693gb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return;\n  }\n  $longest_str = $strings[0];\n\
    \  $longest_length = strlen($longest_str);\n  foreach ($strings as $str) {\n \
    \   if (strlen($str) > $longest_length) {\n      $longest_str = $str;\n      $longest_length\
    \ = strlen($str);\n    }\n  }\n  return $longest_str;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) return NULL;\n  $longest_length = 0;\n  $longest_index\
    \ = 0;\n  foreach ($strings as $index => $string) {\n    if (strlen($string) >\
    \ $longest_length) {\n      $longest_length = strlen($string);\n      $longest_index\
    \ = $index;\n    }\n  }\n  return $strings[$longest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return \"\";\n    }\n    $longest\
    \ = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i])\
    \ > strlen($longest)) {\n            $longest = $strings[$i];\n        }\n   \
    \ }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzevel0rr.php:27\n\
    Stack trace:\n#0 /tmp/tmpzevel0rr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzevel0rr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // your code here\n    if (count($strings) > 0) {\n        $max = $strings[0];\n\
    \        for ($i = 1; $i < count($strings); $i++) {\n            if (strlen($strings[$i])\
    \ > strlen($max)) {\n                $max = $strings[$i];\n            }\n   \
    \     }\n        return $max;\n    }\n    return null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!$strings) {\n    return;\n  }\n  $longest = $strings[0];\n  foreach\
    \ ($strings as $string) {\n    if (strlen($string) > strlen($longest)) {\n   \
    \   $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return \"None\";\n    }\n    $longest\
    \ = array_reduce($strings, function($string1, $string2) {\n        return strlen($string1)\
    \ > strlen($string2) ? $string1 : $string2;\n    });\n    return $longest;\n}\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4fzl8g4.php:23\n\
    Stack trace:\n#0 /tmp/tmpv4fzl8g4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpv4fzl8g4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // check to see if list is empty\n    if (count($strings) == 0) {\n \
    \       echo \"Empty list.\\n\";\n        return;\n    }\n    // build list of\
    \ strings and lengths\n    $arr = array();\n    foreach ($strings as $i => $string)\
    \ {\n        $arr[$i] = array('string' => $string, 'length' => strlen($string));\n\
    \    }\n    // sort list by string length\n    usort($arr, function($a, $b) {\n\
    \        return $a['length'] < $b['length'];\n    });\n    // return the first\
    \ one, which is the longest\n    echo $arr[0]['string'] . \"\\n\";\n}\n\n$strings\
    \ = array('a', 'bb', 'ccc');\nlongest($strings);\n$strings = array();\nlongest($strings);\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "ccc\nEmpty list.\nEmpty list.\nx\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4hl4_xop.php:38\nStack trace:\n#0 /tmp/tmp4hl4_xop.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4hl4_xop.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = 0;\n    $result = null;\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > $max) {\n            $max = strlen($string);\n\
    \            $result = $string;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = \"\";\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpid4a62oh.php:24\n\
    Stack trace:\n#0 /tmp/tmpid4a62oh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpid4a62oh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $index = 0;\n    foreach ($strings as $string)\
    \ {\n        if ($index === 0) {\n            $longest = $string;\n        } elseif\
    \ (strlen($string) > strlen($longest)) {\n            $longest = $string;\n  \
    \      }\n        $index += 1;\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return false;\n    }\n    $longest_string\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest_string)) {\n            $longest_string = $string;\n     \
    \   }\n    }\n    return $longest_string;\n}\n\necho \"The longest string is:\
    \ \".longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The longest string is: ccc\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp04ldyv9e.php:28\nStack trace:\n#0 /tmp/tmp04ldyv9e.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmp04ldyv9e.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $str) {\n        if (strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = \"\";\n  foreach ($strings as $string) {\n    if ($longest ===\
    \ \"\") {\n      $longest = $string;\n    } elseif (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwl6hfsl_.php:26\n\
    Stack trace:\n#0 /tmp/tmpwl6hfsl_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwl6hfsl_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // Check if array is empty\n    if(count($strings) == 0) {\n        return\
    \ null;\n    }\n\n    // Set the first array index as the longest string\n   \
    \ $longestString = $strings[0];\n\n    // Loop through the array to check if any\
    \ other strings are longer\n    foreach($strings as $string) {\n        if(strlen($string)\
    \ > strlen($longestString)) {\n            $longestString = $string;\n       \
    \ }\n    }\n\n    return $longestString;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return NULL;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) return null;\n    return array_reduce($strings,\
    \ function($longest, $string) {\n        return strlen($string) > strlen($longest)\
    \ ? $string : $longest;\n    });\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = '';\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjsotdrr.php:25\n\
    Stack trace:\n#0 /tmp/tmphjsotdrr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphjsotdrr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!is_array($strings)) {\n        trigger_error('Input must be array',\
    \ E_USER_ERROR);\n    }\n\n    $longest = null;\n    $longestLength = 0;\n   \
    \ foreach ($strings as $str) {\n        if (strlen($str) > $longestLength) {\n\
    \            $longest = $str;\n            $longestLength = strlen($str);\n  \
    \      }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest_length = 0;\n\t$longest_string = NULL;\n\tforeach ($strings as\
    \ $string) {\n\t\tif (strlen($string) > $longest_length) {\n\t\t\t$longest_length\
    \ = strlen($string);\n\t\t\t$longest_string = $string;\n\t\t}\n\t}\n\treturn $longest_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) == 0) return;\n\t$max = 0;\n\t$max_str = '';\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > $max) {\n\t\t\t$max = strlen($string);\n\
    \t\t\t$max_str = $string;\n\t\t}\n\t}\n\treturn $max_str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // Your solution here.\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej3i96hj.php:19\n\
    Stack trace:\n#0 /tmp/tmpej3i96hj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpej3i96hj.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest_string = '';\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest_string)) {\n      $longest_string = $string;\n    }\n  }\n\
    \  return $longest_string;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y918sgt.php:23\n\
    Stack trace:\n#0 /tmp/tmp4y918sgt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4y918sgt.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return;\n    }\n    usort($strings, function($str1,\
    \ $str2) {\n        if (strlen($str1) < strlen($str2)) {\n            return 1;\n\
    \        } else if (strlen($str1) > strlen($str2)) {\n            return -1;\n\
    \        } else {\n            return 0;\n        }\n    });\n    return $strings[0];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $longest_length = 0;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $longest_length) {\n            $longest\
    \ = $string;\n            $longest_length = strlen($string);\n        }\n    }\n\
    \    return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // Your code here.\n  return $strings;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupye243u.php:18\n\
    Stack trace:\n#0 /tmp/tmpupye243u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpupye243u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $str) {\n        if (strlen($str)\
    \ > strlen($longest)) {\n            $longest = $str;\n        }\n    }\n    return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiimz6f4y.php:24\n\
    Stack trace:\n#0 /tmp/tmpiimz6f4y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiimz6f4y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === NULL || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $lengths = array_map('strlen', $strings);\n    $longest = max($lengths);\n\
    \    $index = array_search($longest, $lengths);\n    return $strings[$index];\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpglqv65la.php\
    \ on line 11\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!empty($strings)) {\n        $longest = $strings[0];\n        foreach\
    \ ($strings as $str) {\n            if (strlen($str) > strlen($longest)) {\n \
    \               $longest = $str;\n            }\n        }\n        return $longest;\n\
    \    }\n    return;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = array_pop($strings);\n    while($str = array_pop($strings))\
    \ {\n        if (strlen($str) > strlen($longest)) {\n            $longest = $str;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3e6mipu.php:25\n\
    Stack trace:\n#0 /tmp/tmpf3e6mipu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf3e6mipu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) return;\n    $str_len = array_map('strlen', $strings);\n\
    \    $max_len = max($str_len);\n    $pos = array_search($max_len, $str_len);\n\
    \    return $strings[$pos];\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return 'None';\n    }\n\n    $longestString\
    \ = $strings[0];\n    $longestLength = strlen($longestString);\n\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $longestLength) {\n \
    \           $longestString = $string;\n            $longestLength = strlen($string);\n\
    \        }\n    }\n\n    return $longestString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsqium01.php:32\n\
    Stack trace:\n#0 /tmp/tmptsqium01.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptsqium01.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return NULL;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest ===\
    \ null || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\
    \t}\n\t}\n\treturn $longest;\n}\n\nvar_dump(longest([]));\nvar_dump(longest(['a',\
    \ 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\nstring(1) \"a\"\nstring(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return \"None\";\n  }\n\n  $max = $strings[0];\n\
    \  $maxLength = strlen($max);\n\n  for ($i = 1; $i < count($strings); $i++) {\n\
    \    $str = $strings[$i];\n    $strLength = strlen($str);\n\n    if ($strLength\
    \ > $maxLength) {\n      $max = $str;\n      $maxLength = $strLength;\n    }\n\
    \  }\n\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_r88arff.php:35\n\
    Stack trace:\n#0 /tmp/tmp_r88arff.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_r88arff.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) === 0) {\n\t\treturn null;\n\t}\n\n\t$longest = $strings[0];\n\
    \tfor ($i = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest))\
    \ {\n\t\t\t$longest = $strings[$i];\n\t\t}\n\t}\n\n\treturn $longest;\n}\n\nvar_dump(longest([]));\n\
    var_dump(longest(['a', 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NULL\nstring(1) \"a\"\nstring(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9apiti_.php:19\n\
    Stack trace:\n#0 /tmp/tmpm9apiti_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpm9apiti_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t//check for empty array\n\tif (count($strings) == 0) {\n\t\treturn NULL;\n\
    \t}\n\t//sort strings by length (longest first)\n\tusort($strings, function($a,\
    \ $b) {\n\t\treturn strlen($b) - strlen($a);\n\t});\n\t//return first string\n\
    \treturn $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $result = null;\n    $len = 0;\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > $len) {\n            $result = $string;\n     \
    \       $len = strlen($string);\n        }\n    }\n    return $result;\n}\n\n\
    $listOfStrings = ['a', 'bb', 'ccc'];\necho longest($listOfStrings);\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $max_length = 0;\n  $longest_string = NULL;\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > $max_length) {\n      $max_length = strlen($string);\n\
    \      $longest_string = $string;\n    }\n  }\n  return $longest_string;\n}\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(count($strings) == 0) {\n        return null;\n    }\n    $longestStr\
    \ = '';\n    foreach($strings as $s) {\n        if(strlen($s) > strlen($longestStr))\
    \ {\n            $longestStr = $s;\n        }\n    }\n    return $longestStr;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) === 0) {\n    return NULL;\n  }\n\n  $longest = \"\"\
    ;\n  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\necho longest(['a',\
    \ 'bb', 'ccc']) . \"\\n\";\necho longest(['a', 'bb', 'ccc', 'dddd', 'eeeee'])\
    \ . \"\\n\";\necho longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee']) . \"\\n\";\n\
    echo longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff']) . \"\\n\";\n\
    echo longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff', 'gggggggggggg'])\
    \ . \"\\n\";\necho longest(['a', 'bb', 'ccc', 'dddd', 'eeeeeeee', 'ffffffffff',\
    \ 'gggggggggggg', 'hhhhhhhhhhhhhh']) . \"\\n\";\necho longest(['a', 'bb', 'ccc',\
    \ 'dddd', 'eeeeeeee', 'ffffffffff', 'gggggggggggg', 'hhhhhhhhhhhhhh', 'iiiiiiiiiiiiiiii'])\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\neeeee\neeeeeeee\nffffffffff\ngggggggggggg\nhhhhhhhhhhhhhh\niiiiiiiiiiiiiiii\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$lstring = \"\";\n\t$llen = 0;\n\tforeach ($strings as $val) {\n\t\tif\
    \ (strlen($val) > $llen) {\n\t\t\t$lstring = $val;\n\t\t\t$llen = strlen($val);\n\
    \t\t}\n\t}\n\treturn $lstring;\n}\n\n$test = [\"\", \"a\", \"b\", \"c\", \"d\"\
    , \"ef\", \"g\", \"hi\", \"jkl\"];\necho longest($test);\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jkl\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf826aae.php:29\n\
    Stack trace:\n#0 /tmp/tmppf826aae.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppf826aae.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $length = 0;\n  $longest = null;\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > $length) {\n      $length = strlen($string);\n     \
    \ $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = NULL;\n  foreach ($strings as $string) {\n    if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n      $longest = $string;\n    }\n\
    \  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $length = 0;\n    $longest = NULL;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $length = strlen($string);\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    echo longest([]);\necho '<br>';\necho longest(['a', 'b', 'c']);\necho '<br>';\n\
    echo longest(['a', 'bb', 'ccc']);\necho '<br>';\n\necho \"===========================\"\
    ;\necho '<br>';\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>a<br>ccc<br>===========================<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (sizeof($strings) == 0) {\n        return null;\n    }\n\n    $longest\
    \ = $strings[0];\n    for ($i = 1; $i < sizeof($strings); $i++) {\n        if\
    \ (strlen($strings[$i]) > strlen($longest)) {\n            $longest = $strings[$i];\n\
    \        }\n    }\n\n    return $longest;\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return null;\n  }\n\n  $result = null;\n  $max_length\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $max_length)\
    \ {\n      $max_length = strlen($string);\n      $result = $string;\n    }\n \
    \ }\n\n  return $result;\n}\n\n$input = ['a', 'bb', 'ccc'];\nvar_dump(longest($input));\n\
    \n$input = ['a', 'b', 'c'];\nvar_dump(longest($input));\n\n$input = [];\nvar_dump(longest($input));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(3) \"ccc\"\nstring(1) \"a\"\nNULL\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4pk5e73.php:25\n\
    Stack trace:\n#0 /tmp/tmpm4pk5e73.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpm4pk5e73.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $l = 0;\n  $lo = 0;\n  for ($i = 0; $i < count($strings); $i++) {\n   \
    \ if (strlen($strings[$i]) > $l) {\n      $l = strlen($strings[$i]);\n      $lo\
    \ = $i;\n    }\n  }\n  return $strings[$lo];\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  $longestLength = 0;\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > $longestLength) {\n      $longest = $string;\n\
    \      $longestLength = strlen($string);\n    }\n  }\n  return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // TODO\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhi6kdnf.php:19\n\
    Stack trace:\n#0 /tmp/tmpuhi6kdnf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpuhi6kdnf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = \"\";\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n$strings = array(\"\", \"a\", \"aa\", \"aaa\");\necho longest($strings);\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "aaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptanecjb_.php:25\n\
    Stack trace:\n#0 /tmp/tmptanecjb_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptanecjb_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(empty($strings)){\n        return NULL;\n    }\n    $length = count($strings);\n\
    \    $longest = $strings[0];\n    for($i = 1; $i < $length; $i++){\n        if(strlen($longest)\
    \ < strlen($strings[$i])){\n            $longest = $strings[$i];\n        }\n\
    \    }\n    return $longest;\n}\n$strings = [];\necho longest($strings);\necho\
    \ \"<br>\";\n$strings = ['a', 'b', 'c'];\necho longest($strings);\necho \"<br>\"\
    ;\n$strings = ['a', 'bb', 'ccc'];\necho longest($strings);\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: <br>a<br>ccc<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  $length = 0;\n  foreach ($strings as $string) {\n \
    \   if ($length < strlen($string)) {\n      $longest = $string;\n      $length\
    \ = strlen($string);\n    }\n  }\n  return $longest;\n}\n\nvar_dump(longest([]));\n\
    var_dump(longest(['a', 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NULL\nstring(1) \"a\"\nstring(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn NULL;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\necho longest([]);\n\
    echo \"\\n\";\necho longest(['a', 'b', 'c']);\necho \"\\n\";\necho longest(['a',\
    \ 'bb', 'ccc']);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\na\nccc\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$lengths = array_map('strlen',\
    \ $strings);\n\t$max = max($lengths);\n\t$maxIndex = array_search($max, $lengths);\n\
    \treturn $strings[$maxIndex];\n}\necho longest(['a', 'bb', 'ccc']);\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return NULL;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuezly7zu.php:18\n\
    Stack trace:\n#0 /tmp/tmpuezly7zu.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpuezly7zu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // If nothing to work with, return null (per the assignment's description)\n\
    \    if (count($strings) < 1) return null;\n\n    // Prepare the output variable\
    \ with the first string\n    $longest = $strings[0];\n\n    // Loop through the\
    \ strings to compare against the current \"longest\"\n    foreach ($strings as\
    \ $string) {\n        // If the current string is longer than the currently longest,\
    \ update\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    // Return the longest string\n    return\
    \ $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return null;\n  }\n  $result = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($result))\
    \ {\n      $result = $string;\n    }\n  }\n  return $result;\n}\necho longest([\"\
    a\", \"bb\", \"ccc\"]);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return 'None';\n    }\n    $longest\
    \ = '';\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nvar_dump(longest([]));\nvar_dump(longest(['a', 'b', 'c']));\nvar_dump(longest(['a',\
    \ 'bb', 'ccc']));\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(4) \"None\"\nstring(1) \"a\"\nstring(3) \"ccc\"\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpn3k9o76c.php:30\nStack trace:\n\
    #0 /tmp/tmpn3k9o76c.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn3k9o76c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn NULL;\n\t}\n\t$longest = NULL;\n\tforeach\
    \ ($strings as $string) {\n\t\tif (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\necho longest(['a',\
    \ 'bb', 'ccc']);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = NULL;\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) < 1) {\n    return null;\n  }\n\n  $max = strlen($strings[0]);\n\
    \  $i = 0;\n  $res = $strings[0];\n  while ($i < count($strings)) {\n    if (strlen($strings[$i])\
    \ > $max) {\n      $max = strlen($strings[$i]);\n      $res = $strings[$i];\n\
    \    }\n    $i++;\n  }\n  return $res;\n}\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \t$longest_length = strlen($longest);\n\tforeach ($strings as $string) {\n\t\t\
    if (strlen($string) > $longest_length) {\n\t\t\t$longest = $string;\n\t\t\t$longest_length\
    \ = strlen($longest);\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return null;\n  }\n\n  $longest = null;\n \
    \ foreach ($strings as $string) {\n    if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n\n  return $longest;\n\
    }\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return null;\n    }\n\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n\necho longest([]);\necho '<br>';\necho longest(['a',\
    \ 'b', 'c']);\necho '<br>';\necho longest(['a', 'bb', 'ccc']);\necho '<br>';\n\
    echo longest(['a', 'bb', 'ccc', 'ddddd']);\necho '<br>';\necho longest(['a', 'bb',\
    \ 'ccc', 'ddddd', 'eeeeeee']);\necho '<br>';\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>a<br>ccc<br>ddddd<br>eeeeeee<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // YOUR CODE HERE\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cr_rqia.php:19\n\
    Stack trace:\n#0 /tmp/tmp6cr_rqia.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6cr_rqia.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestString = '';\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > strlen($longestString)) {\n            $longestString = $string;\n\
    \        }\n    }\n    return $longestString;\n}\n\n$emptyArray = [];\n$filledArray\
    \ = [\"a\", \"bb\", \"ccc\"];\n\nvar_dump(longest($emptyArray));\nvar_dump(longest($filledArray));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(0) \"\"\nstring(3) \"ccc\"\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpd21red2t.php:29\nStack trace:\n#0 /tmp/tmpd21red2t.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd21red2t.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longestString = NULL;\n  $longestStringLength = 0;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > $longestStringLength) {\n      $longestString\
    \ = $string;\n      $longestStringLength = strlen($string);\n    }\n  }\n  return\
    \ $longestString;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestStr = NULL;\n    $longestLen = 0;\n    foreach ($strings as $str)\
    \ {\n        if (strlen($str) > $longestLen) {\n            $longestStr = $str;\n\
    \            $longestLen = strlen($str);\n        }\n    }\n    return $longestStr;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($result)) {\n\t\t\t$result = $string;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0z4r42pu.php:24\n\
    Stack trace:\n#0 /tmp/tmp0z4r42pu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0z4r42pu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\
    \t}\n\treturn $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return null;\n    }\n    $longest_length\
    \ = 0;\n    $longest_string = '';\n    foreach ($strings as $str) {\n        if\
    \ (strlen($str) > $longest_length) {\n            $longest_length = strlen($str);\n\
    \            $longest_string = $str;\n        }\n    }\n    return $longest_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return NULL;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $str) {\n        if (strlen($str) >\
    \ strlen($longest)) {\n            $longest = $str;\n        }\n    }\n    return\
    \ $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longest =\
    \ $strings[0];\n    $max_length = strlen($longest);\n\n    for ($i = 1; $i < count($strings);\
    \ $i++) {\n        $length = strlen($strings[$i]);\n        if ($length > $max_length)\
    \ {\n            $longest = $strings[$i];\n            $max_length = $length;\n\
    \        }\n    }\n\n    return $longest;\n}\n\necho longest([]);\necho longest(['a',\
    \ 'b', 'c']);\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: accc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(count($strings) <= 0) {\n\t\treturn \"\";\n\t}\n\t$maxLength = 0;\n\t\
    $indexOfMaxLength = 0;\n\tforeach($strings as $index => $string) {\n\t\tif(strlen($string)\
    \ > $maxLength) {\n\t\t\t$maxLength = strlen($string);\n\t\t\t$indexOfMaxLength\
    \ = $index;\n\t\t}\n\t}\n\treturn $strings[$indexOfMaxLength];\n}\n\nvar_dump(longest(['a',\
    \ 'bb', 'ccc']));\nvar_dump(longest(['a', 'b', 'c']));\nvar_dump(longest([]));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(3) \"ccc\"\nstring(1) \"a\"\nstring(0) \"\"\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu63kta3s.php:32\nStack trace:\n#0 /tmp/tmpu63kta3s.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu63kta3s.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\tif (count($strings)\
    \ == 1) {\n\t\treturn $strings[0];\n\t}\n\t$longest = $strings[0];\n\tfor ($i\
    \ = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest))\
    \ {\n\t\t\t$longest = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\n\t$longestString = $strings[0];\n\
    \t$longestLength = strlen($longestString);\n\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > $longestLength) {\n\t\t\t$longestString = $string;\n\
    \t\t\t$longestLength = strlen($longestString);\n\t\t}\n\t}\n\n\treturn $longestString;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_string = null;\n    $len = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $len) {\n            $longest_string = $string;\n\
    \            $len = strlen($string);\n        }\n    }\n    return $longest_string;\n\
    }\n\necho \"\\n\" . longest(['a', 'bb', 'ccc']) . \"\\n\";\necho \"\\n\" . longest(['aa',\
    \ 'bb', 'ccc']) . \"\\n\";\necho \"\\n\" . longest(['aaaaa', 'bb', 'ccc']) . \"\
    \\n\";\necho \"\\n\" . longest(['aaaaa', 'bbbbbbbb', 'ccc']) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nccc\n\nccc\n\naaaaa\n\nbbbbbbbb\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $str) {\n        if (strlen($str) >\
    \ strlen($longest)) {\n            $longest = $str;\n        }\n    }\n    return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $lengths = array_map('strlen', $strings);\n    return empty($lengths)\
    \ ? null : $strings[array_search(max($lengths), $lengths)];\n}\n$tests = [\n \
    \   ['input' => [], 'expected' => null],\n    ['input' => ['a', 'b', 'c'], 'expected'\
    \ => 'a'],\n    ['input' => ['a', 'bb', 'ccc'], 'expected' => 'ccc'],\n];\nforeach\
    \ ($tests as $test) {\n    $output = longest($test['input']);\n    if ($output\
    \ === $test['expected']) {\n        echo \"<span style='color: green;'>Correct</span><br>\"\
    ;\n    } else {\n        echo \"<span style='color: red;'>Incorrect</span><br>\"\
    ;\n    }\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<span style='color: green;'>Correct</span><br><span style='color: green;'>Correct</span><br><span\
    \ style='color: green;'>Correct</span><br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$lengths = array_map('strlen',\
    \ $strings);\n\t$longest = $strings[array_search(max($lengths), $lengths)];\n\t\
    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0bq0c6y.php:24\n\
    Stack trace:\n#0 /tmp/tmpw0bq0c6y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw0bq0c6y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest_string = \"\";\n    foreach ($strings as $string) {\n      \
    \  if (strlen($string) > strlen($longest_string)) {\n            $longest_string\
    \ = $string;\n        }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dyh6qtn.php:24\n\
    Stack trace:\n#0 /tmp/tmp4dyh6qtn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4dyh6qtn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\necho longest(['a', 'bb', 'ccc']);\n\necho \"<br />\"\
    ;\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc<br />\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaay7fq7m.php:27\n\
    Stack trace:\n#0 /tmp/tmpaay7fq7m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpaay7fq7m.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return NULL;\n  }\n  $longest = $strings[0];\n\
    \  for ($i = 1; $i < count($strings); $i++) {\n    if (strlen($strings[$i]) >\
    \ strlen($longest)) {\n      $longest = $strings[$i];\n    }\n  }\n  return $longest;\n\
    }\necho longest([]);\necho longest(['a', 'b', 'c']);\necho longest(['a', 'bb',\
    \ 'ccc']);\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: accc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  // ...\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvihkje6.php:19\n\
    Stack trace:\n#0 /tmp/tmpgvihkje6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpgvihkje6.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(count($strings) < 1) {\n\t\techo \"none\";\n\t}\n\telse {\n\t\t$len\
    \ = strlen($strings[0]);\n\t\t$longest = $strings[0];\n\t\tfor($i = 1; $i < count($strings);\
    \ $i++) {\n\t\t\tif(strlen($strings[$i]) > $len) {\n\t\t\t\t$len = strlen($strings[$i]);\n\
    \t\t\t\t$longest = $strings[$i];\n\t\t\t}\n\t\t}\n\t\techo $longest;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "nonex\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86hz2w_n.php:32\n\
    Stack trace:\n#0 /tmp/tmp86hz2w_n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp86hz2w_n.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$max = $strings[0];\n\
    \tforeach ($strings as $str) {\n\t\tif (strlen($str) > strlen($max)) {\n\t\t\t\
    $max = $str;\n\t\t}\n\t}\n\treturn $max;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$max = null;\n\tforeach ($strings as $string) {\n\t\tif ($max == null ||\
    \ strlen($string) > strlen($max)) {\n\t\t\t$max = $string;\n\t\t}\n\t}\n\treturn\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return;\n    }\n    $longest_string =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest_string)) {\n            $longest_string = $string;\n     \
    \   }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $len = count($strings);\n    if ($len == 0) {\n        return NULL;\n\
    \    }\n    else {\n        $longest = $strings[0];\n        for ($i = 1; $i <\
    \ $len; $i++) {\n            if (strlen($strings[$i]) > strlen($longest)) {\n\
    \                $longest = $strings[$i];\n            }\n        }\n        return\
    \ $longest;\n    }\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // YOUR CODE HERE\n    if(!$strings){\n        return null;\n    }\n\n\
    \    $longest_string_len = strlen($strings[0]);\n    $longest_string = $strings[0];\n\
    \n    foreach($strings as $str){\n        if(strlen($str) > $longest_string_len){\n\
    \            $longest_string_len = strlen($str);\n            $longest_string\
    \ = $str;\n        }\n    }\n\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(count($strings) === 0) {\n\t\treturn NULL;\n\t}\n\t$l = $strings[0];\n\
    \tforeach($strings as $s) {\n\t\tif(strlen($s) > strlen($l)) {\n\t\t\t$l = $s;\n\
    \t\t}\n\t}\n\treturn $l;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $result = $strings[0];\n\
    \    $length = strlen($result);\n    foreach ($strings as $str) {\n        if\
    \ (strlen($str) > $length) {\n            $result = $str;\n            $length\
    \ = strlen($str);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $longestLength = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $longestLength) {\n            $longest = $string;\n\
    \            $longestLength = strlen($string);\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return NULL;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$length = 0;\n\t$longest = NULL;\n\tforeach ($strings as $string) {\n\t\
    \tif (strlen($string) > $length) {\n\t\t\t$length = strlen($string);\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\necho longest(array(\"b\", \"\
    bb\", \"bbb\"));\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: bbb
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if(empty($strings)) return null;\n  $longest = '';\n  foreach($strings\
    \ as $string) {\n    if(strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max = NULL;\n    foreach ($strings as $str) {\n        if ($max ===\
    \ NULL || strlen($str) > strlen($max)) {\n            $max = $str;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_pop($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu5vlbyb.php:27\n\
    Stack trace:\n#0 /tmp/tmppu5vlbyb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppu5vlbyb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $len = 0;\n    $longest = '';\n    foreach ($strings as $str) {\n   \
    \     if (strlen($str) > $len) {\n            $len = strlen($str);\n         \
    \   $longest = $str;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4loil03.php:26\n\
    Stack trace:\n#0 /tmp/tmpg4loil03.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg4loil03.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return null;\n    }\n\n    $longest_string\
    \ = $strings[0];\n    $longest_string_length = strlen($longest_string);\n\n  \
    \  for ($i = 1; $i < count($strings); $i++) {\n        $current_string = $strings[$i];\n\
    \        $current_string_length = strlen($current_string);\n\n        if ($current_string_length\
    \ > $longest_string_length) {\n            $longest_string = $current_string;\n\
    \            $longest_string_length = $current_string_length;\n        }\n   \
    \ }\n\n    return $longest_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return NULL;\n    }\n    $longest = '';\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(!$strings) return false;\n    return array_reduce($strings, function($a,\
    \ $b) {\n        return strlen($a) > strlen($b) ? $a : $b;\n    });\n}\necho longest(['b',\
    \ 'a', 'bb', 'ccc']);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqiuk1iz.php:21\n\
    Stack trace:\n#0 /tmp/tmpbqiuk1iz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbqiuk1iz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestString = '';\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > strlen($longestString)) {\n            $longestString = $string;\n\
    \        }\n    }\n    return $longestString;\n}\necho longest(['a', 'bb', 'ccc'])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz2jlcc.php:24\n\
    Stack trace:\n#0 /tmp/tmp8nz2jlcc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz2jlcc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    $longest_len = 0;\n    foreach ($strings as $str)\
    \ {\n        $len = strlen($str);\n        if ($len > $longest_len) {\n      \
    \      $longest = $str;\n            $longest_len = $len;\n        }\n    }\n\
    \    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = '';\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo838lfog.php:24\n\
    Stack trace:\n#0 /tmp/tmpo838lfog.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo838lfog.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $max_length = -1;\n    $longest_string = NULL;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $max_length) {\n            $max_length\
    \ = strlen($string);\n            $longest_string = $string;\n        }\n    }\n\
    \    return $longest_string;\n}\n\n$strings = array('a', 'bb', 'ccc');\necho longest($strings);\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(empty($strings)) {\n\t\treturn NULL;\n\t}\n\t$longest_string = $strings[0];\n\
    \tforeach($strings as $string) {\n\t\tif(strlen($string) > strlen($longest_string))\
    \ {\n\t\t\t$longest_string = $string;\n\t\t}\n\t}\n\treturn $longest_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestString = NULL;\n    $longestStringLength = 0;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $longestStringLength) {\n     \
    \       $longestString = $string;\n            $longestStringLength = strlen($string);\n\
    \        }\n    }\n    return $longestString;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = null;\n\t$longest_length = 0;\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > $longest_length) {\n\t\t\t$longest = $string;\n\
    \t\t\t$longest_length = strlen($string);\n\t\t}\n\t}\n\treturn $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) return NULL;\n    $max_length = -1;\n    $longest_string\
    \ = NULL;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ $max_length) {\n            $max_length = strlen($string);\n            $longest_string\
    \ = $string;\n        }\n    }\n    return $longest_string;\n}\n\necho longest(array());\n\
    echo longest(array('a', 'b', 'c'));\necho longest(array('a', 'bb', 'ccc'));\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: accc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) return null;\n  $longest = $strings[0];\n  foreach\
    \ ($strings as $str) {\n    if (strlen($str) > strlen($longest)) {\n      $longest\
    \ = $str;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) === 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tfor ($i = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest))\
    \ {\n\t\t\t$longest = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return null;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $str) {\n    if (strlen($str) > strlen($longest)) {\n\
    \      $longest = $str;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = '';\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longestString =\
    \ $strings[0];\n\tfor ($i = 1; $i < count($strings); $i++) {\n\t\tif (strlen($strings[$i])\
    \ > strlen($longestString)) {\n\t\t\t$longestString = $strings[$i];\n\t\t}\n\t\
    }\n\treturn $longestString;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return \"None\";\n  }\n\n  $res = $strings[0];\n\
    \  for ($i = 1; $i < count($strings); $i++) {\n    if (strlen($strings[$i]) >\
    \ strlen($res)) {\n      $res = $strings[$i];\n    }\n  }\n  return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwqp60jo.php:28\n\
    Stack trace:\n#0 /tmp/tmpvwqp60jo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvwqp60jo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longestString = '';\n    foreach ($strings as $string) {\n        if\
    \ ($string > $longestString) {\n            $longestString = $string;\n      \
    \  }\n    }\n    return $longestString;\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbvicvw2.php:23\n\
    Stack trace:\n#0 /tmp/tmpjbvicvw2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjbvicvw2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = '';\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) {\n      $longest = $string;\n    }\n  }\n  return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi74j7kwf.php:24\n\
    Stack trace:\n#0 /tmp/tmpi74j7kwf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpi74j7kwf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = 0;\n    $longest_string = NULL;\n    foreach ($strings as\
    \ $str) {\n        if (strlen($str) > $longest) {\n            $longest = strlen($str);\n\
    \            $longest_string = $str;\n        }\n    }\n    return $longest_string;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\necho longest([]);\necho longest(['a',\
    \ 'b', 'c']);\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: accc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = null;\n  foreach ($strings as $i => $string) {\n    if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n\nprint longest(array());\nprint longest(array('a',\
    \ 'b', 'c'));\nprint longest(array('a', 'bb', 'ccc'));\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: accc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(empty($strings)) {\n        return \"No longest string, empty array\"\
    ;\n    }\n    $longest = $strings[0];\n    foreach($strings as $str) {\n     \
    \   if(strlen($str) > strlen($longest)) {\n            $longest = $str;\n    \
    \    }\n    }\n    return $longest;\n}\n\n$arr = [\"a\", \"bb\", \"ccc\"];\necho\
    \ longest($arr);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqy2atiae.php:29\n\
    Stack trace:\n#0 /tmp/tmpqy2atiae.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqy2atiae.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (!is_array($strings)) {\n    return \"Invalid input.  Must be an array\"\
    ;\n  }\n  $longestString = $strings[0];\n  for ($i = 1; $i < count($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($longestString)) {\n      $longestString\
    \ = $strings[$i];\n    }\n  }\n  return $longestString;\n}\n$test = array('a',\
    \ 'bb', 'ccc');\necho longest($test);\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$longest = NULL;\n\t$longest_len = 0;\n\tforeach ($strings as $string)\
    \ {\n\t\t$len = strlen($string);\n\t\tif ($len > $longest_len) {\n\t\t\t$longest\
    \ = $string;\n\t\t\t$longest_len = $len;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if (empty($longest) || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\necho longest(['a', 'bb', 'ccc']);\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = \"\";\n  foreach ($strings as $string) {\n    if ($longest ==\
    \ \"\" || strlen($string) > strlen($longest)) {\n      $longest = $string;\n \
    \   }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvkw3rku.php:24\n\
    Stack trace:\n#0 /tmp/tmpbvkw3rku.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbvkw3rku.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(empty($strings)){\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach($strings as $value){\n\t\tif(strlen($value) > strlen($longest)){\n\t\
    \t\t$longest = $value;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n$strings = ['a',\
    \ 'bb', 'ccc'];\necho longest($strings);\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ccc
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $res = \"\";\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($res)) {\n      $res = $string;\n    }\n  }\n  return $res;\n}\n\n\
    print(longest([\"a\", \"bb\", \"ccc\"]));\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ccc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjy3ronr.php:26\n\
    Stack trace:\n#0 /tmp/tmpnjy3ronr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnjy3ronr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$max = 0;\n\t$max_index = 0;\n\tforeach ($strings as $index => $string)\
    \ {\n\t\tif (strlen($string) > $max) {\n\t\t\t$max = strlen($string);\n\t\t\t\
    $max_index = $index;\n\t\t}\n\t}\n\treturn $strings[$max_index];\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunegckm9.php:18\n\
    Stack trace:\n#0 /tmp/tmpunegckm9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpunegckm9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = null;\n    $longest_length = -1;\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if ($length > $longest_length)\
    \ {\n            $longest = $string;\n            $longest_length = $length;\n\
    \        }\n    }\n    return $longest;\n}\n\necho longest(['aaaaaaaaaaaa', 'ab',\
    \ 'a', 'bb']);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: aaaaaaaaaaaa
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if(!count($strings)){\n    return null;\n  }\n  $longest = $strings[0];\n\
    \  foreach($strings as $string){\n    if(strlen($string) > strlen($longest)){\n\
    \      $longest = $string;\n    }\n  }\n  return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (!$strings) {\n        return null;\n    }\n\n    $longest = $strings[0];\n\
    \    $length = strlen($longest);\n\n    for ($i = 1; $i < count($strings); $i++)\
    \ {\n        $curLength = strlen($strings[$i]);\n        if ($curLength > $length)\
    \ {\n            $longest = $strings[$i];\n            $length = $curLength;\n\
    \        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $length = 0;\n    $index = 0;\n    for ($i = 0; $i < count($strings);\
    \ $i++) {\n        if (strlen($strings[$i]) > $length) {\n            $length\
    \ = strlen($strings[$i]);\n            $index = $i;\n        }\n    }\n    return\
    \ $length != 0 ? $strings[$index] : null;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn NULL;\n\t}\n\t$lens = array_map('strlen',\
    \ $strings);\n\t$maxlen = max($lens);\n\t$pos = array_search($maxlen, $lens);\n\
    \treturn $strings[$pos];\n}\n\n$test = longest(['a', 'bb', 'ccc']);\nvar_dump($test);\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = \"\";\n    foreach ($strings as $str) {\n        if (strlen($str)\
    \ > strlen($longest)) {\n            $longest = $str;\n        }\n    }\n    return\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw4nud_p.php:24\n\
    Stack trace:\n#0 /tmp/tmpuw4nud_p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuw4nud_p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\treturn array_reduce($strings, function($carry, $item) {\n\t\treturn (strlen($carry)\
    \ > strlen($item)) ? $carry : $item;\n\t});\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_06y5wx6.php:21\n\
    Stack trace:\n#0 /tmp/tmp_06y5wx6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_06y5wx6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif(count($strings) == 0) {\n\t\treturn NULL;\n\t}\n\n\t$longest = '';\n\
    \tforeach($strings as $string) {\n\t\tif(strlen($string) > strlen($longest)) {\n\
    \t\t\t$longest = $string;\n\t\t}\n\t}\n\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $result = null;\n    foreach ($strings as $string) {\n        if ($result\
    \ === null || strlen($string) > strlen($result)) {\n            $result = $string;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn '';\n\t}\n\t$longest = '';\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\
    \t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n$strings = [];\n$strings2\
    \ = ['a', 'b', 'c'];\n$strings3 = ['a', 'bb', 'ccc'];\nvar_dump(longest($strings));\n\
    var_dump(longest($strings2));\nvar_dump(longest($strings3));\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "string(0) \"\"\nstring(1) \"a\"\nstring(3) \"ccc\"\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqv2x2r9l.php:33\nStack trace:\n#0 /tmp/tmpqv2x2r9l.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqv2x2r9l.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return \"None\";\n    }\n    $max_str\
    \ = \"\";\n    $max_len = 0;\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > $max_len) {\n            $max_str = $string;\n          \
    \  $max_len = strlen($string);\n        }\n    }\n    return $max_str;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo9ez4pkl.php:29\n\
    Stack trace:\n#0 /tmp/tmpo9ez4pkl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo9ez4pkl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(empty($strings)) {\n        return null;\n    }\n    $longest = '';\n\
    \    foreach($strings as $string) {\n        if(strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) === 0) {\n        return null;\n    }\n    $current\
    \ = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i])\
    \ > strlen($current)) {\n            $current = $strings[$i];\n        }\n   \
    \ }\n    return $current;\n}\n\nvar_dump(longest([]));\nvar_dump(longest(['a',\
    \ 'b', 'c']));\nvar_dump(longest(['a', 'bb', 'ccc']));\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\nstring(1) \"a\"\nstring(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $currentLongest\
    \ = $strings[0];\n    $longestLength = strlen($currentLongest);\n\n    for ($i\
    \ = 1; $i < count($strings); $i++) {\n        $currentLength = strlen($strings[$i]);\n\
    \        if ($currentLength > $longestLength) {\n            $currentLongest =\
    \ $strings[$i];\n            $longestLength = $currentLength;\n        }\n   \
    \ }\n\n    return $currentLongest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if (is_null($longest)\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$max_len = 0;\n\t$max_str = null;\n\tforeach ($strings as $str) {\n\t\t\
    if (strlen($str) > $max_len) {\n\t\t\t$max_len = strlen($str);\n\t\t\t$max_str\
    \ = $str;\n\t\t}\n\t}\n\treturn $max_str;\n}\n\necho longest([]);\necho \"\\n\"\
    ;\necho longest(['a', 'b', 'c']);\necho \"\\n\";\necho longest(['a', 'bb', 'ccc']);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\na\nccc\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\n\treturn $longest;\n}\n\n$strings\
    \ = [];\nvar_dump(longest($strings));\n$strings = ['a', 'b', 'c'];\nvar_dump(longest($strings));\n\
    $strings = ['a', 'bb', 'ccc'];\nvar_dump(longest($strings));\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NULL\nstring(1) \"a\"\nstring(3) \"ccc\"\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (empty($strings)) {\n    return 'None';\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo1zgsuu.php:26\n\
    Stack trace:\n#0 /tmp/tmpjo1zgsuu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjo1zgsuu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n\t$lengths = array_map('strlen', $strings);\n\tif (count($lengths) == 0)\
    \ {\n\t\treturn \"\";\n\t} else {\n\t\treturn $strings[array_search(max($lengths),\
    \ $lengths)];\n\t}\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_umlvmvh.php:23\n\
    Stack trace:\n#0 /tmp/tmp_umlvmvh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_umlvmvh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  if (count($strings) == 0) {\n    return NULL;\n  }\n  $indexOfLongest =\
    \ 0;\n  $len = strlen($strings[0]);\n  foreach ($strings as $i => $str) {\n  \
    \  if (strlen($str) > $len) {\n      $indexOfLongest = $i;\n      $len = strlen($str);\n\
    \    }\n  }\n  return $strings[$indexOfLongest];\n}\necho longest([]); // null\n\
    echo longest(['a', 'b', 'c']); // 'a'\necho longest(['a', 'bb', 'ccc']); // 'ccc'\n\
    \necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: accc<br><br><br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(sizeof($strings) == 0) {\n        return \"\";\n    }\n    $len =\
    \ -1;\n    $longest = NULL;\n    foreach($strings as $str) {\n        if(strlen($str)\
    \ > $len) {\n            $len = strlen($str);\n            $longest = $str;\n\
    \        }\n    }\n    return $longest;\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdby9pzl_.php:28\n\
    Stack trace:\n#0 /tmp/tmpdby9pzl_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdby9pzl_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = \"\";\n  foreach ($strings as $s) {\n    if (strlen($s) > strlen($longest))\
    \ {\n      $longest = $s;\n    }\n  }\n  return $longest;\n}\n\n$strings = ['a',\
    \ 'bb', 'ccc'];\nvar_dump(longest($strings));\n$strings = [];\nvar_dump(longest($strings));\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "string(3) \"ccc\"\nstring(0) \"\"\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpn4716zdk.php:28\nStack trace:\n#0 /tmp/tmpn4716zdk.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn4716zdk.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if(count($strings) === 0) {\n        return null;\n    }\n    $longest\
    \ = \"\";\n    foreach($strings as $string) {\n        if(strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\nprint(\"Longest: \" . longest([\"a\", \"bb\", \"ccc\"]) . \"\\n\");\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Longest: ccc\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    if (count($strings) == 0) {\n        return null;\n    }\n    $max =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($max)) {\n            $max = $string;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $longest = NULL;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === NULL || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n    $count = count($strings);\n    if ($count == 0) {\n        return \"\
    None\";\n    }\n    $result = $strings[0];\n    $result_length = strlen($result);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        $string = $strings[$i];\n    \
    \    $string_length = strlen($string);\n        if ($string_length > $result_length)\
    \ {\n            $result = $string;\n            $result_length = $string_length;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcv5fvndn.php:32\n\
    Stack trace:\n#0 /tmp/tmpcv5fvndn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcv5fvndn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n// strings of the same length. Return None in case\
    \ the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n\
    // 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest($strings)\
    \ {\n  $longest = NULL;\n  foreach ($strings as $string) {\n    if ($longest ===\
    \ NULL || strlen($string) > strlen($longest)) {\n      $longest = $string;\n \
    \   }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
