name: HumanEval_58_common
language: php
results:
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $merged = array_merge($l1, $l2);\n    $sorted = array_unique($merged);\n\
    \    sort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpor1ukbv_.php:19\n\
    Stack trace:\n#0 /tmp/tmpor1ukbv_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpor1ukbv_.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    $res = [];\n  \
    \  while (isset($l1[$i]) && isset($l2[$j])) {\n        if ($l1[$i] === $l2[$j])\
    \ {\n            $res[] = $l1[$i];\n            $i++;\n            $j++;\n   \
    \     } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n \
    \           $j++;\n        }\n    }\n    return $res;\n}\n\n$list1 = [1, 4, 3,\
    \ 34, 653, 2, 5];\n$list2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($list1,\
    \ $list2));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = merge_sort($l1);\n    $l2 = merge_sort($l2);\n    $l3 = [];\n    $i\
    \ = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n      \
    \  if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } elseif ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            $l3[] = $l1[$i];\n     \
    \       $i++;\n            $j++;\n        }\n    }\n    return $l3;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpr2ulea2t.php:8\nStack trace:\n#0 /tmp/tmpr2ulea2t.php(28): common(Array,\
    \ Array)\n#1 /tmp/tmpr2ulea2t.php(32): candidate(Array, Array)\n#2 /tmp/tmpr2ulea2t.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpr2ulea2t.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2))\
    \ {\n            $res[] = $item;\n        }\n    }\n    $res = array_unique($res);\n\
    \    sort($res);\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $count = 0;\n    $i = 0;\n    $j = 0;\n \
    \   $size = sizeof($l1);\n    $size2 = sizeof($l2);\n    while ($i < $size &&\
    \ $j < $size2) {\n        if ($l1[$i] == $l2[$j]) {\n            $temp[$count]\
    \ = $l1[$i];\n            $count += 1;\n            $i += 1;\n            $j +=\
    \ 1;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i += 1;\n        }\
    \ else {\n            $j += 1;\n        }\n    }\n    return $temp;\n}\necho \"\
    Question 1:<br>\";\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\necho \"<br>\";\nprint_r(common([5, 3, 2, 8], [3, 2]));\necho \"<br><br>\"\
    ;\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Question 1:<br>Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\
    <br>Array\n(\n    [0] => 2\n    [1] => 3\n)\n<br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpabhlr3cz.php:43\nStack trace:\n#0 /tmp/tmpabhlr3cz.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpabhlr3cz.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $l3 = array_intersect($l1, $l2);\n  sort($l3);\n  return $l3;\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$l3 = array_intersect($l1, $l2);\n\t$l3 = array_unique($l3);\n\
    \treturn $l3;\n}\necho 'common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]) = ';\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    echo '<br />';\necho 'common([5, 3, 2, 8], [3, 2]) = ';\nprint_r(common([5, 3,\
    \ 2, 8], [3, 2]));\necho '<br />';\necho '<br />';\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = Array\n(\n\
    \    [0] => 1\n    [4] => 5\n    [6] => 653\n)\n<br />common([5, 3, 2, 8], [3,\
    \ 2]) = Array\n(\n    [0] => 2\n    [1] => 3\n)\n<br /><br />\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8ty879xx.php:26\nStack trace:\n#0 /tmp/tmp8ty879xx.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8ty879xx.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            array_push($result, $l1[$i]);\n            $i++;\n          \
    \  $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n       \
    \ } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n$l1\
    \ = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\necho implode(',\
    \ ', common($l1, $l2)) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 5, 653\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $merged = array_unique(array_merge($l1, $l2));\n\tsort($merged);\n\t$intersect\
    \ = array_intersect($l1, $l2);\n\tsort($intersect);\n\treturn $intersect;\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    return array_unique(array_intersect($l1,\
    \ $l2));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdeq5hu1.php:18\n\
    Stack trace:\n#0 /tmp/tmphdeq5hu1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphdeq5hu1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // IMPLEMENT ME\n    $r1 = array_unique($l1);\n    $r2 = array_unique($l2);\n\
    \    return array_intersect($r1, $r2);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a2_cl9u.php:19\n\
    Stack trace:\n#0 /tmp/tmp8a2_cl9u.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8a2_cl9u.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $s1 = $s2 = array();\n    sort($l1);\n    sort($l2);\n    $l = max(array(count($l1),\
    \ count($l2)));\n    for ($i = 0; $i < $l; $i++) {\n        if ($i < count($l1))\
    \ {\n            $s1[$l1[$i]] = $l1[$i];\n        }\n        if ($i < count($l2))\
    \ {\n            $s2[$l2[$i]] = $l2[$i];\n        }\n    }\n    return array_intersect($s1,\
    \ $s2);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1y0y93x.php:28\n\
    Stack trace:\n#0 /tmp/tmpj1y0y93x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj1y0y93x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $common_array = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for\
    \ ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n \
    \               $common_array[] = $l1[$i];\n            }\n        }\n    }\n\
    \    return array_unique($common_array);\n}\nprint_r(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]));\necho \"\\n\";\nprint_r(common([5, 3, 2,\
    \ 8], [3, 2]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 3\n    [1] => 2\n)\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphaq4w23x.php:27\nStack trace:\n#0 /tmp/tmphaq4w23x.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmphaq4w23x.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // TODO\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpei9zr3s6.php:16\n\
    Stack trace:\n#0 /tmp/tmpei9zr3s6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpei9zr3s6.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    $result\
    \ = array_unique($result);\n    sort($result);\n    return $result;\n}\n\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2,\
    \ 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $l1_len = count($l1);\n    $l2_len = count($l2);\n\
    \    $common = [];\n    $i = 0;\n    $j = 0;\n    while ($i < $l1_len && $j <\
    \ $l2_len) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else\
    \ if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n            $common[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ $common;\n}\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\n\
    $common = common($l1, $l2);\necho implode(', ', $common) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1, 5, 653\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $result = [];\n    foreach ($l1 as $v) {\n        if (in_array($v,\
    \ $l2)) {\n            $result[] = $v;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    $res = [];\n  \
    \  while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            array_push($res, $l1[$i]);\n            $i++;\n\
    \            $j++;\n        }\n    }\n    return $res;\n}\n\n$a = [1, 4, 3, 34,\
    \ 653, 2, 5];\n$b = [5, 7, 1, 5, 9, 653, 121];\n\nvar_dump(common($a, $b));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // Your code here...\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_a_eo6r5.php:16\n\
    Stack trace:\n#0 /tmp/tmp_a_eo6r5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp_a_eo6r5.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    foreach ($l1 as $value)\
    \ {\n        if (in_array($value, $l2)) {\n            $result[] = $value;\n \
    \       }\n    }\n    return array_unique($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $result = [];\n  while ($i\
    \ < count($l1) && $j < count($l2)) {\n    if ($l1[$i] == $l2[$j]) {\n      $result[]\
    \ = $l1[$i];\n      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n\
    \      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $result;\n}\n\n\
    var_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nvar_dump(common([5,\
    \ 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    foreach($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    return array_unique($result);\n\
    }\necho \"common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\\n\";\n\
    echo implode(', ', common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    echo \"\\n\";\necho \"common([5, 3, 2, 8], [3, 2])\\n\";\necho implode(', ', common([5,\
    \ 3, 2, 8], [3, 2]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n1, 653, 5\n\
    common([5, 3, 2, 8], [3, 2])\n3, 2\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpqw380ol9.php:27\nStack trace:\n#0 /tmp/tmpqw380ol9.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpqw380ol9.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $s1 = array_unique($l1);\n\t$s2 = array_unique($l2);\n\t$common = array();\n\t\
    for ($i = 0; $i < count($s1); $i++) {\n\t\tfor ($j = 0; $j < count($s2); $j++)\
    \ {\n\t\t\tif ($s1[$i] == $s2[$j])\n\t\t\t\t$common[] = $s1[$i];\n\t\t}\n\t}\n\
    \tsort($common);\n\treturn $common;\n}\n\nfunction candidate(...$args) {\n   \
    \ return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztb4_xn4.php:16\n\
    Stack trace:\n#0 /tmp/tmpztb4_xn4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpztb4_xn4.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    return array_unique(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lct5o_i.php:16\n\
    Stack trace:\n#0 /tmp/tmp7lct5o_i.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp7lct5o_i.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    if (empty($l1) || empty($l2)) {\n\t\treturn [];\n\t}\n\t$a = count($l1) > count($l2)\
    \ ? $l1 : $l2;\n\t$b = count($l1) > count($l2) ? $l2 : $l1;\n\tsort($a);\n\tsort($b);\n\
    \t$i = 0;\n\t$j = 0;\n\t$c = [];\n\twhile ($i < count($a) && $j < count($b)) {\n\
    \t\tif ($a[$i] == $b[$j]) {\n\t\t\t$c[] = $a[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\
    \t} elseif ($a[$i] < $b[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\
    \t}\n\treturn $c;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $size1 = count($l1);\n    $size2 = count($l2);\n    for\
    \ ($i = 0; $i < $size1; $i++) {\n        for ($j = 0; $j < $size2; $j++) {\n \
    \           if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n\n$a = [1, 4, 3, 34, 653, 2, 5];\n$b = [5, 7, 1, 5, 9, 653, 121];\n$c = [5,\
    \ 3, 2, 8];\n$d = [3, 2];\nprint_r(common($a, $b));\nprint_r(common($c, $d));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [3] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp9fri5aj6.php:33\nStack trace:\n#0 /tmp/tmp9fri5aj6.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9fri5aj6.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $array = [];\n  foreach ($l1 as $value) {\n    foreach ($l2 as $v) {\n    \
    \  if ($value == $v) {\n        array_push($array, $value);\n      }\n    }\n\
    \  }\n  $array = array_unique($array);\n  sort($array);\n  return $array;\n}\n\
    $l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nvar_dump(common($l1,\
    \ $l2));\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nvar_dump(common($l1, $l2));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    return array_unique(array_intersect($l1, $l2));\n}\n\n$l1\
    \ = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\n\nassert(common($l1,\
    \ $l2) == [1, 5, 653]);\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\n\nassert(common($l1,\
    \ $l2) == [2, 3]);\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(common($l1, $l2) == [1, 5, 653]) failed in\
    \ /tmp/tmp3mkv2t07.php on line 18\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3mkv2t07.php:29\nStack trace:\n#0 /tmp/tmp3mkv2t07.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3mkv2t07.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $result = [];\n\tsort($l1);\n\tsort($l2);\n\t$len1 = count($l1);\n\t$len2 = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\twhile ($i < $len1 && $j < $len2) {\n\t\tif ($l1[$i] ==\
    \ $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\twhile ($i < $len1 && $l1[$i] ==\
    \ $l1[$i + 1]) {\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\twhile ($j < $len2 && $l2[$j] ==\
    \ $l2[$j + 1]) {\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif\
    \ ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $result = [];\n  while ($i\
    \ < count($l1) && $j < count($l2)) {\n    if ($l1[$i] == $l2[$j]) {\n      array_push($result,\
    \ $l1[$i]);\n      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n \
    \     $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$intersection = array_intersect($l1, $l2);\n\treturn $intersection;\n}\n\n$l1\
    \ = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1,\
    \ $l2));\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nprint_r(common($l1, $l2));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [4] => 5\n    [6] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpaqkcru0h.php:27\nStack trace:\n#0 /tmp/tmpaqkcru0h.php(33): test()\n\
    #1 {main}\n  thrown in /tmp/tmpaqkcru0h.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $r1 = array_unique($l1);\n    $r2 = array_unique($l2);\n    $common = [];\n\
    \    foreach ($r1 as $v) {\n        if (in_array($v, $r2)) {\n            $common[]\
    \ = $v;\n        }\n    }\n    sort($common);\n    return $common;\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $set1 = array_unique($l1);\n  $set2 = array_unique($l2);\n  sort($set1);\n\
    \  sort($set2);\n  return array_intersect($set1, $set2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw32bpsi.php:20\n\
    Stack trace:\n#0 /tmp/tmpiw32bpsi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpiw32bpsi.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $result = [];\n  foreach ($l1 as $element) {\n    if (in_array($element, $l2)\
    \ && !in_array($element, $result)) {\n      $result[] = $element;\n    }\n  }\n\
    \  sort($result);\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $tot = array_unique(array_merge($l1, $l2));\n\t$out = [];\n\tforeach ($tot as\
    \ $v) {\n\t\tif (in_array($v, $l1) && in_array($v, $l2)) {\n\t\t\t$out[] = $v;\n\
    \t\t}\n\t}\n\treturn $out;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wc9bf2d.php:22\n\
    Stack trace:\n#0 /tmp/tmp6wc9bf2d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6wc9bf2d.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$res = [];\n\tforeach ($l1 as $val) {\n\t\tif (in_array($val,\
    \ $l2)) {\n\t\t\t$res[] = $val;\n\t\t}\n\t}\n\treturn array_unique($res);\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $c = array_intersect($l1, $l2);\n\tsort($c);\n\treturn $c;\n}\n\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $unique_l1 = array_unique($l1);\n  $unique_l2 = array_unique($l2);\n  $l3 =\
    \ array_merge($unique_l1, $unique_l2);\n  $l4 = array_unique($l3);\n  $l5 = array_intersect($unique_l1,\
    \ $unique_l2);\n  sort($l5);\n  return $l5;\n}\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $unique = array_unique(array_merge($l1, $l2));\n    return array_values(array_filter($unique,\
    \ function($i) use ($l1, $l2) {\n        return in_array($i, $l1) && in_array($i,\
    \ $l2);\n    }));\n}\n\nvar_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]));\nvar_dump(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(653)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxpck62nx.php:21\nStack trace:\n#0 /tmp/tmpxpck62nx.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxpck62nx.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_values($l1);\n\
    \  $l2 = array_values($l2);\n  $size1 = count($l1);\n  $size2 = count($l2);\n\
    \  $output = [];\n  for ($i = 0; $i < $size1; $i++) {\n    for ($j = 0; $j < $size2;\
    \ $j++) {\n      if ($l1[$i] == $l2[$j]) {\n        $output[] = $l1[$i];\n   \
    \   }\n    }\n  }\n  return $output;\n}\n\necho \"<pre>\";\nvar_dump(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nvar_dump(common([5, 3, 2,\
    \ 8], [3, 2]));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(653)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpn40eraer.php:35\nStack trace:\n#0 /tmp/tmpn40eraer.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn40eraer.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_unique(array_intersect($l1, $l2));\n}\n\necho common([1, 4,\
    \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]);\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27mbn_qq.php:17\n\
    Stack trace:\n#0 /tmp/tmp27mbn_qq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp27mbn_qq.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_intersect($l1, $l2));\n}\n\nprint_r(common([1, 4,\
    \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8],\
    \ [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpgarlw1t_.php:18\nStack trace:\n#0 /tmp/tmpgarlw1t_.php(24): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgarlw1t_.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $intersection = array_unique(array_intersect($l1, $l2));\n    sort($intersection);\n\
    \    return $intersection;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $ret = [];\n  $len1 = count($l1);\n  $len2 = count($l2);\n  if ($len1 == 0\
    \ || $len2 == 0) {\n    return $ret;\n  }\n  $i = 0;\n  $j = 0;\n  while($i <\
    \ $len1 && $j < $len2) {\n    if ($l1[$i] == $l2[$j]) {\n      $ret[] = $l1[$i];\n\
    \      $i++;\n      $j++;\n    } elseif ($l1[$i] < $l2[$j]) {\n      $i++;\n \
    \   } else {\n      $j++;\n    }\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2h7cyf8.php:34\n\
    Stack trace:\n#0 /tmp/tmpb2h7cyf8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb2h7cyf8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $unique1 = array_unique($l1);\n    $unique2 = array_unique($l2);\n    $common\
    \ = [];\n    $firstList = ($unique1 < $unique2) ? $unique1 : $unique2;\n    $secondList\
    \ = ($unique1 > $unique2) ? $unique1 : $unique2;\n    foreach ($firstList as $number)\
    \ {\n        if (in_array($number, $secondList)) {\n            $common[] = $number;\n\
    \        }\n    }\n    sort($common);\n    return $common;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = [];\n\
    \    foreach ($l1 as $element) {\n        if (in_array($element, $l2)) {\n   \
    \         $common[] = $element;\n        }\n    }\n    sort($common);\n    return\
    \ $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  // Write your code here.\n  return array_unique(array_intersect($l1, $l2));\n\
    }\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5,\
    \ 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [4] => 653\n    [6] => 5\n)\nArray\n(\n   \
    \ [1] => 3\n    [2] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp16m63gwu.php:19\nStack trace:\n#0 /tmp/tmp16m63gwu.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmp16m63gwu.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $common = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if (in_array($l1[$i],\
    \ $l2)) {\n            $common[] = $l1[$i];\n        }\n    }\n    return array_unique($common);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzwf7wh_.php:22\n\
    Stack trace:\n#0 /tmp/tmptzwf7wh_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptzwf7wh_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    for ($i = 0, $j = 0; $i\
    \ < count($l1) && $j < count($l2);) {\n        if ($l1[$i] == $l2[$j]) {\n   \
    \         array_push($result, $l1[$i]);\n            $i++;\n            $j++;\n\
    \        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $result;\n}\n\necho \"function\
    \ common for [1, 4, 3, 34, 653, 2, 5] and [5, 7, 1, 5, 9, 653, 121]:\\n\";\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\necho \"\\n\";\necho \"function\
    \ common for [5, 3, 2, 8] and [3, 2]:\\n\";\nprint_r(common([5, 3, 2, 8], [3,\
    \ 2]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "function common for [1, 4, 3, 34, 653, 2, 5] and [5, 7, 1, 5, 9, 653, 121]:\n\
    Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\nfunction common for\
    \ [5, 3, 2, 8] and [3, 2]:\nArray\n(\n    [0] => 2\n    [1] => 3\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_unique(array_intersect($l1, $l2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrian59y.php:16\n\
    Stack trace:\n#0 /tmp/tmpvrian59y.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvrian59y.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $ret = [];\n  foreach($l1 as $val) {\n    if (in_array($val, $l2)) {\n    \
    \  $ret[] = $val;\n    }\n  }\n  return array_unique($ret);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jmlmve0.php:22\n\
    Stack trace:\n#0 /tmp/tmp9jmlmve0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9jmlmve0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n  \
    \  while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            $res[] = $l1[$i];\n            $i++;\n            $j++;\n   \
    \     } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n \
    \           $j++;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    foreach ($l1 as $v) {\n        if (in_array($v, $l2))\
    \ {\n            $result[] = $v;\n        }\n    }\n    return array_unique($result);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcodm7kcl.php:22\n\
    Stack trace:\n#0 /tmp/tmpcodm7kcl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcodm7kcl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$c = array();\n\t$i = 0;\n\t$j = 0;\n\twhile($i <\
    \ count($l1) && $j < count($l2)) {\n\t\tif($l1[$i] == $l2[$j]) {\n\t\t\t$c[] =\
    \ $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif($l1[$i] < $l2[$j]) {\n\t\t\t\
    $i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $c;\n}\n\n$a = array(2,\
    \ 3, 5, 2, 4, 1, 6, 2, 7, 10, 8, 11, 9, 13, 12, 14, 16, 15, 18, 17, 20, 19, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\
    \ 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\
    \ 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\
    \ 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,\
    \ 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\
    \ 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,\
    \ 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161,\
    \ 162, 163, 164, 165, 166, 167, 168, 169, 170\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprx3aw59z.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $common = [];\n    for ($i = 0, $j = 0; $i\
    \ < count($l1) && $j < count($l2); $i++, $j++) {\n        if ($l1[$i] === $l2[$j])\
    \ {\n            array_push($common, $l1[$i]);\n        } else if ($l1[$i] < $l2[$j])\
    \ {\n            $i--;\n        } else {\n            $j--;\n        }\n    }\n\
    \    return $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphc1v_28z.php:28\n\
    Stack trace:\n#0 /tmp/tmphc1v_28z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphc1v_28z.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $l3 = array_unique(array_merge($l1, $l2));\n  sort($l3);\n  $res = [];\n  foreach\
    \ ($l3 as $v) {\n    if (in_array($v, $l1) && in_array($v, $l2)) {\n      $res[]\
    \ = $v;\n    }\n  }\n  return $res;\n}\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2\
    \ = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1, $l2));\n\n$l1 = [5, 3, 2,\
    \ 8];\n$l2 = [3, 2];\nprint_r(common($l1, $l2));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $list = array_merge($l1, $l2);\n    $list = array_unique($list);\n    sort($list);\n\
    \    return $list;\n}\necho '<pre>';\nprint_r(common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\necho '</pre>';\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    \    [4] => 5\n    [5] => 7\n    [6] => 9\n    [7] => 34\n    [8] => 121\n   \
    \ [9] => 653\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] =>\
    \ 8\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9de7z3to.php:23\n\
    Stack trace:\n#0 /tmp/tmp9de7z3to.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9de7z3to.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $diff = array_diff($l1, $l2);\n    if (empty($diff)) {\n        return $l1;\n\
    \    }\n    else {\n        $diff = array_diff($l2, $l1);\n        if (empty($diff))\
    \ {\n            return $l2;\n        }\n        else {\n            return array_intersect($l1,\
    \ $l2);\n        }\n    }\n}\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [4] => 653\n    [6] => 5\n)\nArray\n(\n   \
    \ [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmputdr0dfy.php:30\nStack trace:\n#0 /tmp/tmputdr0dfy.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmputdr0dfy.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $common = [];\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j = 0; $j <\
    \ count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$common[] = $l1[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn array_unique($common);\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyk3lj45.php:23\n\
    Stack trace:\n#0 /tmp/tmpgyk3lj45.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgyk3lj45.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $min = min(count($l1), count($l2));\n\t$result = [];\n\tfor ($i = 0; $i < $min;\
    \ $i++) {\n\t\tif ($l1[$i] === $l2[$i]) {\n\t\t\t$result[] = $l1[$i];\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey1l_8ah.php:23\n\
    Stack trace:\n#0 /tmp/tmpey1l_8ah.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpey1l_8ah.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $merged = array_merge($l1, $l2);\n    $merged = array_count_values($merged);\n\
    \    foreach ($merged as $key => $value) {\n        if ($value == 1) {\n     \
    \       unset($merged[$key]);\n        }\n    }\n    $merged = array_keys($merged);\n\
    \    sort($merged);\n    return $merged;\n}\n\nprint_r(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return sort_unique(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_unique()\
    \ in /tmp/tmp0v9ksrvh.php:8\nStack trace:\n#0 /tmp/tmp0v9ksrvh.php(12): common(Array,\
    \ Array)\n#1 /tmp/tmp0v9ksrvh.php(16): candidate(Array, Array)\n#2 /tmp/tmp0v9ksrvh.php(22):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0v9ksrvh.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $a = array_values(array_unique($l1));\n    $b = array_values(array_unique($l2));\n\
    \    sort($a);\n    sort($b);\n    $len = max(count($a), count($b));\n    $res\
    \ = [];\n    for ($i = 0; $i < $len; $i++) {\n        if ($a[$i] === $b[$i]) {\n\
    \            $res[] = $a[$i];\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpln3agi3n.php:27\n\
    Stack trace:\n#0 /tmp/tmpln3agi3n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpln3agi3n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $len1 = count($l1);\n\
    \    $len2 = count($l2);\n    $result = [];\n    $j = 0;\n    for ($i = 0; $i\
    \ < $len1; $i++) {\n        while ($j < $len2 && $l2[$j] < $l1[$i]) {\n      \
    \      $j++;\n        }\n        if ($j < $len2 && $l2[$j] == $l1[$i]) {\n   \
    \         $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3b9qe51.php:29\n\
    Stack trace:\n#0 /tmp/tmpt3b9qe51.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt3b9qe51.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $sorted1 = bubbleSort($l1);\n    $sorted2 = bubbleSort($l2);\n    return\
    \ compareTwoLists($sorted1, $sorted2);\n}\nfunction candidate(...$args) {\n  \
    \  return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubbleSort()\
    \ in /tmp/tmp3mh3r7zr.php:8\nStack trace:\n#0 /tmp/tmp3mh3r7zr.php(13): common(Array,\
    \ Array)\n#1 /tmp/tmp3mh3r7zr.php(17): candidate(Array, Array)\n#2 /tmp/tmp3mh3r7zr.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3mh3r7zr.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // TODO\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq3jby2s.php:16\n\
    Stack trace:\n#0 /tmp/tmpsq3jby2s.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpsq3jby2s.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz7qze6u.php:16\n\
    Stack trace:\n#0 /tmp/tmpaz7qze6u.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpaz7qze6u.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$len1 = count($l1);\n\t$len2 = count($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res = [];\n\
    \twhile ($i < $len1 && $j < $len2) {\n\t\tif ($l1[$i] === $l2[$j]) {\n\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\necho \"\
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\\n\";\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\necho \">>> common([5, 3,\
    \ 2, 8], [3, 2])\\n\";\nprint_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\nArray\n\
    (\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n>>> common([5, 3, 2, 8], [3,\
    \ 2])\nArray\n(\n    [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $s1 = array_unique($l1);\n  $s2 = array_unique($l2);\n  return array_uintersect($s1,\
    \ $s2, 'strcasecmp');\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrh6l9xp.php:18\n\
    Stack trace:\n#0 /tmp/tmpcrh6l9xp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcrh6l9xp.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_flip($l1);\n\
    \t$l2 = array_flip($l2);\n\treturn array_keys(array_intersect_key($l1, $l2));\n\
    }\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\necho\
    \ '<br>';\nprint_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 653\n    [2] => 5\n)\n<br>Array\n(\n\
    \    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9jnamn9b.php:23\nStack trace:\n#0 /tmp/tmp9jnamn9b.php(29): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9jnamn9b.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $r = [];\n    foreach ($l1 as $v) {\n        if (in_array($v, $l2))\n   \
    \         $r[] = $v;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10iiedct.php:21\n\
    Stack trace:\n#0 /tmp/tmp10iiedct.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp10iiedct.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    sort($l1);\n    sort($l2);\n    foreach ($l1 as $e1) {\n\
    \        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n             \
    \   $res[] = $e1;\n                break;\n            }\n        }\n    }\n \
    \   return array_unique($res);\n}\necho '<pre>';\nprint_r(common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n\
    \    [0] => 2\n    [1] => 3\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    sort($l1);\n    sort($l2);\n    for ($i = 0, $j = 0; $i <\
    \ count($l1) && $j < count($l2);) {\n        if ($l1[$i] < $l2[$j]) {\n      \
    \      $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n   \
    \     } else {\n            $res[] = $l1[$i];\n            $i++;\n           \
    \ $j++;\n        }\n    }\n    return $res;\n}\n\nprint_r(common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2))\
    \ {\n            $res[] = $item;\n        }\n    }\n    return array_unique($res);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8tgah8g.php:22\n\
    Stack trace:\n#0 /tmp/tmpu8tgah8g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpu8tgah8g.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  if (!$l1 || !$l2) {\n    return [];\n  }\n  $common = [];\n  $min = min($l1,\
    \ $l2);\n  $max = max($l1, $l2);\n  foreach ($min as $e) {\n    if (in_array($e,\
    \ $max)) {\n      $common[] = $e;\n    }\n  }\n  return array_unique($common);\n\
    }\n$input = [1, 4, 3, 34, 653, 2, 5];\n$input2 = [5, 7, 1, 5, 9, 653, 121];\n\
    var_dump(common($input, $input2));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(653)\n  [2]=>\n  int(5)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzx6g_p8.php:29\n\
    Stack trace:\n#0 /tmp/tmplzx6g_p8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplzx6g_p8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_unique(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyv88pj7h.php:16\n\
    Stack trace:\n#0 /tmp/tmpyv88pj7h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpyv88pj7h.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    sort($l1);\n    sort($l2);\n    while (count($l1) > 0\
    \ && count($l2) > 0) {\n        if ($l1[0] < $l2[0]) {\n            array_shift($l1);\n\
    \        } elseif ($l1[0] > $l2[0]) {\n            array_shift($l2);\n       \
    \ } else {\n            $result[] = array_shift($l1);\n            array_shift($l2);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $sorted_l1 = $l1;\n    sort($sorted_l1);\n    $sorted_l2 = $l2;\n    sort($sorted_l2);\n\
    \    return array_values(array_intersect($sorted_l1, $sorted_l2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $common = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        if (in_array($l1[$i],\
    \ $l2)) {\n            array_push($common, $l1[$i]);\n        }\n    }\n    rsort($common);\n\
    \    return $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78pa5f2d.php:23\n\
    Stack trace:\n#0 /tmp/tmp78pa5f2d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp78pa5f2d.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $n1 = count($l1);\n    $n2 = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $res = [];\n    while ($i < $n1 && $j < $n2) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n          \
    \  $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n        \
    \    $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $res;\n}\n\n$list1 = [1, 4, 3, 34, 653, 2, 5];\n$list2 = [5, 7, 1, 5, 9, 653,\
    \ 121];\n\n$common_items = common($list1, $list2);\nprint_r($common_items);\n\n\
    /*\n * Output:\n * Array\n * (\n *   [0] => 1\n *   [1] => 5\n *   [2] => 653\n\
    \ * )\n */\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $unique_l1 = array_unique($l1);\n\t$unique_l2 = array_unique($l2);\n\t$result\
    \ = [];\n\tforeach ($unique_l1 as $i) {\n\t\tif (in_array($i, $unique_l2)) {\n\
    \t\t\t$result[] = $i;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n\
    echo '<pre>';\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(common([5, 3, 2, 8], [3, 2]));\necho '</pre>';\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n</pre><pre>Array\n\
    (\n    [0] => 2\n    [1] => 3\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $common = [];\n    $l1 = sort_list($l1);\n    $l2 = sort_list($l2);\n   \
    \ $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n   \
    \     if ($l1[$i] == $l2[$j]) {\n            $common[] = $l1[$i];\n          \
    \  $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n       \
    \     $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpit4fll47.php:9\nStack trace:\n#0 /tmp/tmpit4fll47.php(28): common(Array,\
    \ Array)\n#1 /tmp/tmpit4fll47.php(32): candidate(Array, Array)\n#2 /tmp/tmpit4fll47.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpit4fll47.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    foreach($l1 as $value) {\n        if (in_array($value, $l2))\
    \ {\n            array_push($res, $value);\n        }\n    }\n    $res = array_unique($res);\n\
    \    sort($res);\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$common = [];\n\twhile ($i <\
    \ count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\tarray_push($common,\
    \ $l1[$i]);\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $common;\n}\n\nprint_r(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2,\
    \ 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $s1 = array_unique($l1);\n    $s2 = array_unique($l2);\n    sort($s1);\n\
    \    sort($s2);\n    $r = [];\n    $count1 = count($s1);\n    $count2 = count($s2);\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < $count1 && $j < $count2) {\n      \
    \  if ($s1[$i] == $s2[$j]) {\n            $r[] = $s1[$i];\n            $i++;\n\
    \            $j++;\n        } else if ($s1[$i] < $s2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $r;\n}\n\n\
    print_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $t1 = array_unique($l1);\n    $t2 = array_unique($l2);\n    $r = [];\n  \
    \  for ($i = 0; $i < count($t1); $i++) {\n        for ($j = 0; $j < count($t2);\
    \ $j++) {\n            if ($t1[$i] == $t2[$j]) {\n                $r[] = $t1[$i];\n\
    \            }\n        }\n    }\n    sort($r);\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $u1 = array_unique($l1);\n  $u2 = array_unique($l2);\n  return array_intersect($u1,\
    \ $u2);\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    echo \"<br>\";\nprint_r(common([5, 3, 2, 8], [3, 2]));\necho \"<br>\";\necho \"\
    <br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho\
    \ \"<br>\";\necho \"<br>\";\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1,\
    \ 5, 9, 653, 121];\n$u1 = array_unique($l1);\n$u2 = array_unique($l2);\n$intersect\
    \ = array_intersect($u1, $u2);\nprint_r($intersect);\necho \"<br>\";\necho \"\
    <br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho\
    \ \"<br>\";\necho \"<br>\";\necho \"<br>\";\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n\
    $l2 = [5, 7, 1, 5, 9, 653, 121];\n$u1 = array_unique($l1);\n$u2 = array_unique($l2);\n\
    print_r($u1);\necho \"<br>\";\nprint_r($u2);\necho \"<br>\";\n$intersect = array_intersect($u1,\
    \ $u2);\nprint_r($intersect);\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\n\
    echo \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\"\
    ;\necho \"<br>\";\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1,\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjoa3n5sk.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5,\
    \ 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $common = [];\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            if (empty($common) || $common[count($common) - 1] != $l1[$i])\
    \ {\n                $common[] = $l1[$i];\n            }\n            $i++;\n\
    \            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $common;\n\
    }\n\necho implode(', ', common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1, 5, 653
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $list1 = array_unique($l1);\n    $list2 = array_unique($l2);\n    sort($list1);\n\
    \    sort($list2);\n    $size = min(count($list1), count($list2));\n    $i = 0;\n\
    \    $j = 0;\n    $res = [];\n    while ($i < $size && $j < $size) {\n       \
    \ if ($list1[$i] == $list2[$j]) {\n            $res[] = $list1[$i];\n        \
    \    $i++;\n            $j++;\n        } elseif ($list1[$i] < $list2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $res;\n}\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg76yg26d.php:36\n\
    Stack trace:\n#0 /tmp/tmpg76yg26d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg76yg26d.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    foreach($l1 as $v) {\n        if (in_array($v, $l2)) {\n\
    \            $res[] = $v;\n        }\n    }\n    $res = array_unique($res);\n\
    \    sort($res);\n    return $res;\n}\n$list1 = [1, 4, 3, 34, 653, 2, 5];\n$list2\
    \ = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($list1, $list2));\n$list1 = [5,\
    \ 3, 2, 8];\n$list2 = [3, 2];\nprint_r(common($list1, $list2));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $res = [];\n  foreach\
    \ ($l1 as $item) {\n    if (in_array($item, $l2))\n      $res[] = $item;\n  }\n\
    \  sort($res);\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    // sort arrays\n\t$l1 = bubble_sort($l1);\n\t$l2 = bubble_sort($l2);\n\t\n\t$t\
    \ = array();\n\t$i = 0;\n\t$j = 0;\n\t$a1 = count($l1);\n\t$a2 = count($l2);\n\
    \t\n\t// loop over the smaller array\n\twhile ($i < $a1 && $j < $a2) {\n\t\t//\
    \ compare elements in the two sorted lists\n\t\tif ($l1[$i] > $l2[$j]) {\n\t\t\
    \t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    // if common then add to the temp array\n\t\t\t$t[] = $l1[$i];\n\t\t\t// increment\
    \ indexes\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $t;\n}\n\necho '<h2>Result\
    \ 1.2</h2>';\necho '<b>common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])</b>';\n\
    echo '<br>';\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    echo '<br>';\necho '<b>common([5, 3, 2, 8], [3, 2])</b>';\necho '<br>';\nprint_r(common([5,\
    \ 3, 2, 8], [3, 2]));\necho '<br>';\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h2>Result 1.2</h2><b>common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121])</b><br>\nFatal error: Uncaught Error: Call to undefined function\
    \ bubble_sort() in /tmp/tmp9bpmfdv9.php:9\nStack trace:\n#0 /tmp/tmp9bpmfdv9.php(39):\
    \ common(Array, Array)\n#1 {main}\n  thrown in /tmp/tmp9bpmfdv9.php on line 9\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $unique = array_unique(array_merge($l1, $l2));\n  sort($unique);\n  return\
    \ $unique;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nwa0kwo.php:18\n\
    Stack trace:\n#0 /tmp/tmp9nwa0kwo.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9nwa0kwo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $map = [];\n  $common = [];\n  foreach ($l1 as $i) {\n    $map[$i] = $i;\n\
    \  }\n  foreach ($l2 as $i) {\n    if (isset($map[$i])) {\n      $common[] = $i;\n\
    \    }\n  }\n  return $common;\n}\n\necho '<pre>';\nprint_r(common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => 1\n    [2] => 5\n    [3] => 653\n\
    )\nArray\n(\n    [0] => 3\n    [1] => 2\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzonazmy6.php:30\nStack trace:\n#0 /tmp/tmpzonazmy6.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzonazmy6.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_values(array_unique($l1));\n    $l2 = array_values(array_unique($l2));\n\
    \    $result = [];\n    foreach ($l1 as $l1_value) {\n        foreach ($l2 as\
    \ $l2_value) {\n            if ($l1_value == $l2_value) {\n                $result[]\
    \ = $l1_value;\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$list1 = [1, 4, 3, 34, 653, 2, 5];\n$list2 = [5, 7, 1, 5, 9, 653,\
    \ 121];\nprint_r(common($list1, $list2));\necho \"\\n\";\n$list1 = [5, 3, 2, 8];\n\
    $list2 = [3, 2];\nprint_r(common($list1, $list2));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\nArray\n(\n \
    \   [0] => 2\n    [1] => 3\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $u1 = array_unique($l1);\n    $u2 = array_unique($l2);\n    sort($u1);\n\
    \    sort($u2);\n    $r = [];\n    foreach ($u1 as $k => $v) {\n        if (in_array($v,\
    \ $u2)) $r[] = $v;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $set = array_unique(array_merge($l1, $l2));\n    sort($set);\n    return\
    \ $set;\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 7\n    [6] => 9\n    [7] => 34\n    [8] => 121\n    [9] =>\
    \ 653\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ub_n1kn.php:19\n\
    Stack trace:\n#0 /tmp/tmp1ub_n1kn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1ub_n1kn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // return a list of unique common elements\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = [];\n    foreach ($l1 as $el) {\n\
    \        if (in_array($el, $l2)) {\n            $common[] = $el;\n        }\n\
    \    }\n    return $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdcwyq8t.php:25\n\
    Stack trace:\n#0 /tmp/tmptdcwyq8t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptdcwyq8t.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // merge lists\n    $l = array_merge($l1, $l2);\n    // sort the merged list\n\
    \    sort($l);\n    // count the occurrences of each number and put them in $m\n\
    \    // counter must begin at 1, otherwise some numbers will be omitted.\n   \
    \ $m = array_count_values($l);\n    // get the keys of $m that are greater than\
    \ 1\n    $r = array_keys($m, max($m));\n    // sort the result $r\n    sort($r);\n\
    \    // return $r\n    return $r;\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5jfg5zp2.php:30\nStack\
    \ trace:\n#0 /tmp/tmp5jfg5zp2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5jfg5zp2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $arr1 = array_unique($l1);\n    $arr2 = array_unique($l2);\n    $common =\
    \ [];\n    foreach ($arr1 as $key => $value) {\n        if (in_array($value, $arr2))\
    \ {\n            $common[] = $value;\n        }\n    }\n    sort($common);\n \
    \   return $common;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    return array_values(array_unique(array_intersect($l1, $l2)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq7ncnfw.php:16\n\
    Stack trace:\n#0 /tmp/tmpnq7ncnfw.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpnq7ncnfw.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $intersect = array_intersect($l1, $l2);\n\tsort($intersect);\n\treturn $intersect;\n\
    }\necho \"common(l1, l2) = \";\nvar_dump(common($l1, $l2));\necho \"<br>\";\n\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "common(l1, l2) = \nWarning: array_intersect(): Expected parameter 1 to\
    \ be an array, null given in /tmp/tmp6bhxk11v.php on line 8\n\nWarning: sort()\
    \ expects parameter 1 to be array, null given in /tmp/tmp6bhxk11v.php on line\
    \ 9\nNULL\n<br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    // Your code goes here.\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmibx43vt.php:16\n\
    Stack trace:\n#0 /tmp/tmpmibx43vt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpmibx43vt.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$r1 = [];\n\t$r2 = [];\n\t$r3 = [];\n\tforeach ($l1\
    \ as $value) {\n\t\tif (!in_array($value, $r1)) {\n\t\t\t$r1[] = $value;\n\t\t\
    }\n\t}\n\tforeach ($l2 as $value) {\n\t\tif (!in_array($value, $r2)) {\n\t\t\t\
    $r2[] = $value;\n\t\t}\n\t}\n\tforeach ($r1 as $value) {\n\t\tif (in_array($value,\
    \ $r2)) {\n\t\t\t$r3[] = $value;\n\t\t}\n\t}\n\treturn $r3;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    return array_unique(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1rr0ugn.php:16\n\
    Stack trace:\n#0 /tmp/tmph1rr0ugn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph1rr0ugn.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $diff = array_diff($l1, $l2);\n    $res =\
    \ array_diff($l1, $diff);\n    return $res;\n}\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7_pxabf.php:19\n\
    Stack trace:\n#0 /tmp/tmpw7_pxabf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpw7_pxabf.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $result = array_intersect_key($l1, $l2);\n  sort($result);\n\
    \  return array_flip($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3f2vhpv.php:22\n\
    Stack trace:\n#0 /tmp/tmpi3f2vhpv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi3f2vhpv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    foreach($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_oxuu5p.php:16\n\
    Stack trace:\n#0 /tmp/tmp8_oxuu5p.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8_oxuu5p.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $c1 = array_unique($l1);\n    $c2 = array_unique($l2);\n    $common_arr =\
    \ [];\n    foreach ($c1 as $key1 => $num1) {\n        foreach ($c2 as $key2 =>\
    \ $num2) {\n            if ($num1 == $num2) {\n                $common_arr[] =\
    \ $num1;\n            }\n        }\n    }\n    sort($common_arr);\n    return\
    \ $common_arr;\n}\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_r3j535.php:16\n\
    Stack trace:\n#0 /tmp/tmpy_r3j535.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpy_r3j535.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $array = [];\n    $start = min($l1);\n    $end = max($l1);\n    for ($i =\
    \ $start; $i <= $end; $i++) {\n        if (in_array($i, $l1) && in_array($i, $l2))\
    \ {\n            $array[] = $i;\n        }\n    }\n    sort($array);\n    return\
    \ $array;\n}\necho \"<pre>\";\necho \"common([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121])\\n\";\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]));\necho \"common([5, 3, 2, 8], [3, 2])\\n\";\nprint_r(common([5,\
    \ 3, 2, 8], [3, 2]));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\nArray\n\
    (\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\ncommon([5, 3, 2, 8], [3, 2])\n\
    Array\n(\n    [0] => 2\n    [1] => 3\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $filtered = array_filter($l1, function($el) use ($l2) {\n    return in_array($el,\
    \ $l2);\n  });\n  return array_unique($filtered);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdhimaoa.php:19\n\
    Stack trace:\n#0 /tmp/tmpzdhimaoa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzdhimaoa.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // TODO\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmple_1s3i6.php:15\n\
    Stack trace:\n#0 /tmp/tmple_1s3i6.php(21): test()\n#1 {main}\n  thrown in /tmp/tmple_1s3i6.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1_unique = array_unique($l1);\n\t$l2_unique = array_unique($l2);\n\t$result\
    \ = [];\n\tforeach ($l1_unique as $item) {\n\t\tif (in_array($item, $l2_unique))\
    \ {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1,\
    \ $l2));\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nprint_r(common($l1, $l2));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // TODO\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokxx5e81.php:16\n\
    Stack trace:\n#0 /tmp/tmpokxx5e81.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpokxx5e81.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_unique(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgw2g_oln.php:16\n\
    Stack trace:\n#0 /tmp/tmpgw2g_oln.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgw2g_oln.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $list1 = array_unique($l1);\n    $list2 = array_unique($l2);\n    sort($list1);\n\
    \    sort($list2);\n    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i\
    \ < count($list1) && $j < count($list2)) {\n        if ($list1[$i] == $list2[$j])\
    \ {\n            $result[] = $list1[$i];\n            $i++;\n            $j++;\n\
    \        } elseif ($list1[$i] < $list2[$j]) {\n            $i++;\n        } else\
    \ {\n            $j++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = unique(sort($l1));\n    $l2 = unique(sort($l2));\n    $res = [];\n\
    \    foreach ($l1 as $a) {\n        foreach ($l2 as $b) {\n            if ($a\
    \ == $b) {\n                $res[] = $a;\n            }\n        }\n    }\n  \
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique() in /tmp/tmpc7wn16w7.php:8\n\
    Stack trace:\n#0 /tmp/tmpc7wn16w7.php(22): common(Array, Array)\n#1 /tmp/tmpc7wn16w7.php(26):\
    \ candidate(Array, Array)\n#2 /tmp/tmpc7wn16w7.php(32): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpc7wn16w7.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $unique = [];\n    sort($l1);\n    sort($l2);\n    $len1 = count($l1);\n\
    \    $len2 = count($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < $len1 && $j\
    \ < $len2) {\n        if ($l1[$i] == $l2[$j]) {\n            array_push($unique,\
    \ $l1[$i]);\n            $i++;\n            $j++;\n        } elseif ($l1[$i] <\
    \ $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n       \
    \ }\n    }\n    return $unique;\n}\n\n$result = common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]);\necho \"common([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]):\" . PHP_EOL;\nvar_dump($result);\necho PHP_EOL;\n\n$result\
    \ = common([5, 3, 2, 8], [3, 2]);\necho \"common([5, 3, 2, 8], [3, 2]):\" . PHP_EOL;\n\
    var_dump($result);\necho PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]):\narray(3)\
    \ {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n}\n\ncommon([5,\
    \ 3, 2, 8], [3, 2]):\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9xgjbu6.php:16\n\
    Stack trace:\n#0 /tmp/tmps9xgjbu6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmps9xgjbu6.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_unique(array_intersect($l1, $l2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj67lf31t.php:16\n\
    Stack trace:\n#0 /tmp/tmpj67lf31t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpj67lf31t.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $intersection = array_intersect($l1, $l2);\n    sort($intersection);\n  \
    \  return $intersection;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    $commons = [];\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $commons[] = $l1[$i];\n            $i++;\n    \
    \        $j++;\n        }\n    }\n    return $commons;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $combined = array_unique(array_merge($l1, $l2));\n  sort($combined);\n  return\
    \ $combined;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcswk2vte.php:18\n\
    Stack trace:\n#0 /tmp/tmpcswk2vte.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcswk2vte.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$s1 = count($l1);\n\t$s2 = count($l2);\n\t$s = [];\n\tfor ($i = 0, $j = 0; $i\
    \ < $s1 && $j < $s2;) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$s[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t\
    } else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $count1 = count($l1);\n  $count2 = count($l2);\n  $i = 0;\n  $j = 0;\n  $com\
    \ = [];\n  while($i < $count1 && $j < $count2) {\n    if($l1[$i] == $l2[$j]) {\n\
    \      $com[] = $l1[$i];\n      $i++;\n      $j++;\n    } elseif($l1[$i] < $l2[$j])\
    \ {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $com;\n}\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfubeklf7.php:31\n\
    Stack trace:\n#0 /tmp/tmpfubeklf7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfubeklf7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $intersect = array_intersect($l1, $l2);\n    sort($intersect);\n    return\
    \ $intersect;\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $uniq1 = array_unique($l1);\n    $uniq2 = array_unique($l2);\n    $res =\
    \ [];\n    foreach ($uniq1 as $i) {\n        if (in_array($i, $uniq2)) {\n   \
    \         $res[] = $i;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqqu_fbw.php:24\n\
    Stack trace:\n#0 /tmp/tmpyqqu_fbw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyqqu_fbw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l3 = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0;\
    \ $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n          \
    \      array_push($l3, $l1[$i]);\n            }\n        }\n    }\n    $l3 = array_unique($l3);\n\
    \    sort($l3);\n    return $l3;\n}\nprint_r(common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]));\necho \"<br>\";\nprint_r(common([5, 3, 2, 8], [3,\
    \ 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n<br>Array\n(\n\
    \    [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $res = [];\n  sort($l1);\n  sort($l2);\n  for ($i = 0, $j = 0; $i < count($l1)\
    \ && $j < count($l2);) {\n    if ($l1[$i] == $l2[$j]) {\n      $res[] = $l1[$i];\n\
    \      ++$i;\n      ++$j;\n    } elseif ($l1[$i] < $l2[$j]) {\n      ++$i;\n \
    \   } else {\n      ++$j;\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$intersect = array_intersect($l1, $l2);\n\t$result\
    \ = array_unique($intersect);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg3qk4j1.php:20\n\
    Stack trace:\n#0 /tmp/tmpvg3qk4j1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvg3qk4j1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $result = [];\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j = 0; $j <\
    \ count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$result[] = $l1[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn array_unique($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_0gpzvr.php:24\n\
    Stack trace:\n#0 /tmp/tmpn_0gpzvr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn_0gpzvr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $s1 = array_unique($l1);\n    $s2 = array_unique($l2);\n    sort($s1);\n\
    \    sort($s2);\n    $l = array();\n    $i = 0;\n    $j = 0;\n    while($i < count($s1)\
    \ && $j < count($s2)) {\n        if($s1[$i] < $s2[$j]) {\n            $i++;\n\
    \        } else if($s1[$i] > $s2[$j]) {\n            $j++;\n        } else {\n\
    \            $l[] = $s1[$i];\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $list = [];\n  sort($l1);\n  sort($l2);\n  for ($i = 0; $i < count($l1); $i++)\
    \ {\n    for ($j = 0; $j < count($l2); $j++) {\n      if ($l1[$i] == $l2[$j])\
    \ {\n        $list[] = $l1[$i];\n      }\n    }\n  }\n  return array_unique($list);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1uw9e9d.php:26\n\
    Stack trace:\n#0 /tmp/tmps1uw9e9d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps1uw9e9d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$count = count($l1);\n\t$i = 0;\n\t$j = 0;\n\t$newl\
    \ = [];\n\twhile ($i < $count) {\n\t\tif ($l1[$i] === $l2[$j]) {\n\t\t\t$newl[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $newl;\n}\n\n$l1 =\
    \ [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1,\
    \ $l2));\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: b'Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = unique($l1);\n    $l2 = unique($l2);\n    sort($l1);\n    sort($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = [];\n \
    \   $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n \
    \       if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i]\
    \ > $l2[$j]) {\n            $j++;\n        } else {\n            $l3[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $l3;\n}\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function unique() in /tmp/tmpvbj2vrdr.php:8\n\
    Stack trace:\n#0 /tmp/tmpvbj2vrdr.php(31): common(Array, Array)\n#1 /tmp/tmpvbj2vrdr.php(35):\
    \ candidate(Array, Array)\n#2 /tmp/tmpvbj2vrdr.php(41): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpvbj2vrdr.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $elem) {\n        if (in_array($elem, $l2)) {\n         \
    \   $result[] = $elem;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $a = array_unique($l1);\n    $b = array_unique($l2);\n    sort($a);\n   \
    \ sort($b);\n    return array_intersect($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanph0ew6.php:20\n\
    Stack trace:\n#0 /tmp/tmpanph0ew6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpanph0ew6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    for ($i = 0; $i < count($l1); $i++) {\n \
    \       for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j])\
    \ {\n                $res[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $s1 = sort($l1);\n    $s2 = sort($l2);\n    $result = [];\n    foreach ($s1\
    \ as $item) {\n        if (in_array($item, $s2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwwvez4jt.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwvez4jt.php:24\n\
    Stack trace:\n#0 /tmp/tmpwwvez4jt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwwvez4jt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $c1 = count($l1);\n\t$c2 = count($l2);\n\t$l3 = [];\n\tfor ($i = 0; $i < $c1;\
    \ $i++) {\n\t\t$found = false;\n\t\tfor ($j = 0; $j < $c2; $j++) {\n\t\t\tif ($l1[$i]\
    \ == $l2[$j]) {\n\t\t\t\t$found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if ($found) {\n\t\t\t$l3[] = $l1[$i];\n\t\t}\n\t}\n\tsort($l3);\n\treturn $l3;\n\
    }\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_values(array_unique(array_intersect($l1, $l2)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesfba4g8.php:16\n\
    Stack trace:\n#0 /tmp/tmpesfba4g8.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpesfba4g8.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            array_push($result, $l1[$i]);\n            $i++;\n          \
    \  $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n       \
    \ } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l3 = array_unique(array_merge($l1, $l2));\n    foreach ($l3 as $item) {\n\
    \        if (!in_array($item, $l1) || !in_array($item, $l2)) {\n            $key\
    \ = array_search($item, $l3);\n            unset($l3[$key]);\n        }\n    }\n\
    \    return $l3;\n}\n\nvar_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]));\nvar_dump(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [4]=>\n  int(653)\n  [6]=>\n  int(5)\n\
    }\narray(2) {\n  [1]=>\n  int(3)\n  [2]=>\n  int(2)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpeffmz2bm.php:25\nStack trace:\n#0 /tmp/tmpeffmz2bm.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeffmz2bm.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $r = array_intersect($l1, $l2);\n    asort($r);\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphizjdpto.php:18\n\
    Stack trace:\n#0 /tmp/tmphizjdpto.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphizjdpto.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $uniqs = [];\n\t$filter = [];\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tif\
    \ (array_search($l1[$i], $filter) === false) {\n\t\t\t$filter[] = $l1[$i];\n\t\
    \t}\n\t}\n\tfor ($i = 0; $i < count($l2); $i++) {\n\t\tif (array_search($l2[$i],\
    \ $filter) !== false) {\n\t\t\t$uniqs[] = $l2[$i];\n\t\t}\n\t}\n\treturn $uniqs;\n\
    }\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwqu5w4x.php:27\n\
    Stack trace:\n#0 /tmp/tmpqwqu5w4x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqwqu5w4x.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $ret = [];\n    foreach ($l1 as $e) {\n \
    \       if (in_array($e, $l2)) {\n            $ret[] = $e;\n        }\n    }\n\
    \    return array_unique($ret);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $result = [];\n  $i = 0;\n  $j = 0;\n  $len1 = count($l1);\n  $len2 = count($l2);\n\
    \  while ($i < $len1 && $j < $len2) {\n    if ($l1[$i] < $l2[$j]) {\n      $i++;\n\
    \    } else if ($l1[$i] > $l2[$j]) {\n      $j++;\n    } else {\n      $result[]\
    \ = $l1[$i];\n      $i++;\n      $j++;\n    }\n  }\n  return $result;\n}\n\necho\
    \ implode(', ', common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "653\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_hul1kg.php:33\n\
    Stack trace:\n#0 /tmp/tmp9_hul1kg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9_hul1kg.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $temp = array_intersect($l1, $l2);\n    sort($temp);\n    return $temp;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $result = [];\n\tforeach ($l1 as $item) {\n\t\tif (in_array($item, $l2)) {\n\t\
    \t\tarray_push($result, $item);\n\t\t}\n\t}\n\treturn array_unique($result);\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6ecdt3y.php:22\n\
    Stack trace:\n#0 /tmp/tmpk6ecdt3y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpk6ecdt3y.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $uniqueL1 = [];\n    $uniqueL2 = [];\n    foreach ($l1\
    \ as $l1Val) {\n        if (!in_array($l1Val, $l1)) {\n            $uniqueL1[]\
    \ = $l1Val;\n        }\n    }\n    foreach ($l2 as $l2Val) {\n        if (!in_array($l2Val,\
    \ $l2)) {\n            $uniqueL2[] = $l2Val;\n        }\n    }\n    $length =\
    \ count($uniqueL1);\n    for ($i = 0; $i < $length; $i++) {\n        if (in_array($uniqueL1[$i],\
    \ $uniqueL2)) {\n            $result[] = $uniqueL1[$i];\n        }\n    }\n  \
    \  sort($result);\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eikmkjm.php:35\n\
    Stack trace:\n#0 /tmp/tmp3eikmkjm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3eikmkjm.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $sorted_list1 = quick_sort($l1);\n    $sorted_list2 = quick_sort($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $common_elements = [];\n    while ($i < count($sorted_list1)\
    \ && $j < count($sorted_list2)) {\n        if ($sorted_list1[$i] == $sorted_list2[$j])\
    \ {\n            $common_elements[] = $sorted_list1[$i];\n            $i++;\n\
    \            $j++;\n        } else if ($sorted_list1[$i] < $sorted_list2[$j])\
    \ {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return $common_elements;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function quick_sort()\
    \ in /tmp/tmpmn14o7rz.php:8\nStack trace:\n#0 /tmp/tmpmn14o7rz.php(27): common(Array,\
    \ Array)\n#1 /tmp/tmpmn14o7rz.php(31): candidate(Array, Array)\n#2 /tmp/tmpmn14o7rz.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmn14o7rz.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $set1 = array_unique($l1);\n    $set2 = array_unique($l2);\n    return array_intersect($set1,\
    \ $set2);\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9v3z83cw.php:18\n\
    Stack trace:\n#0 /tmp/tmp9v3z83cw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9v3z83cw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $map = [];\n    foreach ($l1 as $value) {\n        $map[$value]\
    \ = true;\n    }\n    foreach ($l2 as $value) {\n        if ($map[$value]) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nvar_dump(common($l1, $l2));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbwsz9dsj.php:30\nStack trace:\n#0 /tmp/tmpbwsz9dsj.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbwsz9dsj.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j\
    \ < count($l2)) {\n        if ($l1[$i] === $l2[$j]) {\n            $common[] =\
    \ $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i] <\
    \ $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n       \
    \ }\n    }\n    return $common;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez88txsi.php:34\n\
    Stack trace:\n#0 /tmp/tmpez88txsi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpez88txsi.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    return array_unique(array_intersect($l1,\
    \ $l2));\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1scaf1oz.php:18\n\
    Stack trace:\n#0 /tmp/tmp1scaf1oz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1scaf1oz.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $v1 = $l1;\n  $v2 = $l2;\n  sort($v1);\n  sort($v2);\n  $i = 0;\n  $j = 0;\n\
    \  $c = [];\n  while ($i < count($v1) && $j < count($v2)) {\n    if ($v1[$i] ==\
    \ $v2[$j]) {\n      $c[] = $v1[$i];\n      $i++;\n      $j++;\n    } else if ($v1[$i]\
    \ < $v2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $c;\n\
    }\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nvar_dump(common($l1,\
    \ $l2));\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nvar_dump(common($l1, $l2));\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\narray(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(3)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $results = [];\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tfor ($j = 0; $j <\
    \ count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\t$results[] = $l1[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki5yalue.php:24\n\
    Stack trace:\n#0 /tmp/tmpki5yalue.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpki5yalue.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeh09kl9z.php:16\n\
    Stack trace:\n#0 /tmp/tmpeh09kl9z.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeh09kl9z.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $result = [];\n  $intersection = array_intersect($l1, $l2);\n  sort($intersection);\n\
    \  return $intersection;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    foreach ($l1 as $k1 =>\
    \ $v1) {\n        foreach ($l2 as $k2 => $v2) {\n            if ($v1 === $v2)\
    \ {\n                $result[] = $v1;\n                unset($l2[$k2]);\n    \
    \            break;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l = [];\n    $l1 = array_values(array_unique($l1));\n    $l2 = array_values(array_unique($l2));\n\
    \    foreach ($l1 as $v) {\n        if (in_array($v, $l2)) {\n            $l[]\
    \ = $v;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_c38mols.php:24\n\
    Stack trace:\n#0 /tmp/tmp_c38mols.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_c38mols.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $res = [];\n    $i = 0;\n    $j = 0;\n  \
    \  while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] === $l2[$j])\
    \ {\n            $res[] = $l1[$i];\n            $i++;\n            $j++;\n   \
    \     } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n \
    \           $j++;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    // Make a single array of all the values in both lists.\n    $result = array_merge($l1,\
    \ $l2);\n    // Sort the list.\n    sort($result);\n    // Walk through the list,\
    \ keeping track of if the current number\n    // is a duplicate.\n    $keep_list\
    \ = [];\n    $num_before = null;\n    foreach ($result as $number) {\n       \
    \ if ($number !== $num_before) {\n            $keep_list[] = $number;\n      \
    \  }\n        $num_before = $number;\n    }\n    return $keep_list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwdlyw2d.php:30\n\
    Stack trace:\n#0 /tmp/tmpvwdlyw2d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvwdlyw2d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $out = [];\n    $prev = null;\n    $i = 0;\n\
    \    $j = 0;\n    $c = count($l1);\n    $d = count($l2);\n    while ($i < $c &&\
    \ $j < $d) {\n        if ($l1[$i] < $l2[$j])\n            $i++;\n        else\
    \ if ($l1[$i] > $l2[$j])\n            $j++;\n        else {\n            if ($l1[$i]\
    \ != $prev) {\n                $out[] = $l1[$i];\n                $prev = $l1[$i];\n\
    \            }\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ $out;\n}\n\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    print_r(common([5, 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $sort1 = merge_sort($l1);\n  $sort2 = merge_sort($l2);\n  $result = [];\n \
    \ $size1 = count($sort1);\n  $size2 = count($sort2);\n  $i = 0;\n  $j = 0;\n \
    \ while ($i < $size1 && $j < $size2) {\n    if ($sort1[$i] == $sort2[$j]) {\n\
    \      $result[] = $sort1[$i];\n      $i++;\n      $j++;\n    } elseif ($sort1[$i]\
    \ < $sort2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpyrz8009z.php:8\nStack trace:\n#0 /tmp/tmpyrz8009z.php(30): common(Array,\
    \ Array)\n#1 /tmp/tmpyrz8009z.php(34): candidate(Array, Array)\n#2 /tmp/tmpyrz8009z.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyrz8009z.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$j = 0;\n\tfor ($i = 0; $i < count($l1); $i++) {\n\
    \t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$ans[] = $l1[$i];\n\t\t\t$j++;\n\t\t}\n\t\
    }\n\treturn $ans;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xhrwejb.php:24\n\
    Stack trace:\n#0 /tmp/tmp1xhrwejb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1xhrwejb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return array_values(array_intersect($l1, $l2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvk72a46_.php:16\n\
    Stack trace:\n#0 /tmp/tmpvk72a46_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvk72a46_.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $l3 = array_intersect($l1, $l2);\n    return\
    \ array_values(array_unique($l3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    if (count($l1) < count($l2)) {\n        $tmp\
    \ = $l1;\n        $l1 = $l2;\n        $l2 = $tmp;\n    }\n    $ans = [];\n   \
    \ for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $ans[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3luzwtpx.php:33\n\
    Stack trace:\n#0 /tmp/tmp3luzwtpx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3luzwtpx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  return [];\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusmsn2_8.php:15\n\
    Stack trace:\n#0 /tmp/tmpusmsn2_8.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpusmsn2_8.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    $ll1 = count($l1);\n\
    \    $ll2 = count($l2);\n    $k = 0;\n    $list = [];\n    while ($i < $ll1 &&\
    \ $j < $ll2) {\n        if ($l1[$i] == $l2[$j]) {\n            $list[$k] = $l1[$i];\n\
    \            $i++;\n            $j++;\n            $k++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $list;\n}\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5,\
    \ 7, 1, 5, 9, 653, 121];\n$l3 = [5, 3, 2, 8];\n$l4 = [3, 2];\necho json_encode(common($l1,\
    \ $l2)) . PHP_EOL;\necho json_encode(common($l3, $l4)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[1,5,653]\n[2,3]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    if ($l1 == null || $l2 == null) return $result;\n    sort($l1);\n\
    \    sort($l2);\n    $i = 0;\n    $j = 0;\n    while($i < count($l1) && $j < count($l2))\
    \ {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n   \
    \         $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $arr = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j =\
    \ 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n       \
    \         $arr[] = $l1[$i];\n            }\n        }\n    }\n    return $arr;\n\
    }\n\nvar_dump(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(653)\n  [2]=>\n  int(5)\n\
    \  [3]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjm_txlc.php:25\n\
    Stack trace:\n#0 /tmp/tmpxjm_txlc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxjm_txlc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_values(array_unique($l1));\n    $l2 = array_values(array_unique($l2));\n\
    \    sort($l1);\n    sort($l2);\n    $result = [];\n    for ($i = 0, $j = 0; $i\
    \ < count($l1) && $j < count($l2);) {\n        if ($l1[$i] == $l2[$j]) {\n   \
    \         $result[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $result;\n}\n\necho implode(', ', common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1, 5, 653
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$ret = [];\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($l1) && $j < count($l2))\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$ret[] = $l1[$i];\n\t\t\t$i++;\n\t\t\
    \t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\necho \"common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121])\\n\";\necho \"[1, 5, 653]\\n\";\necho \"-> \";\n\
    print_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\necho \"\
    \\n\";\n\necho \"common([5, 3, 2, 8], [3, 2])\\n\";\necho \"[2, 3]\\n\";\necho\
    \ \"-> \";\nprint_r(common([5, 3, 2, 8], [3, 2]));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n\
    -> Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\ncommon([5, 3, 2,\
    \ 8], [3, 2])\n[2, 3]\n-> Array\n(\n    [0] => 2\n    [1] => 3\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $unique = array_unique(array_merge($l1, $l2));\n    $result = [];\n    foreach\
    \ ($unique as $u) {\n        if (in_array($u, $l1) && in_array($u, $l2)) {\n \
    \           $result[] = $u;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $r1 = array_unique($l1);\n    $r2 = array_unique($l2);\n    sort($r1);\n\
    \    sort($r2);\n    $c = [];\n    $c1 = 0;\n    $c2 = 0;\n    while($c1 < count($r1)\
    \ && $c2 < count($r2)) {\n        if($r1[$c1] == $r2[$c2]) {\n            $c[]\
    \ = $r1[$c1];\n            $c1++;\n            $c2++;\n        } elseif($r1[$c1]\
    \ < $r2[$c2]) {\n            $c1++;\n        } else {\n            $c2++;\n  \
    \      }\n    }\n    return $c;\n}\n\n$list1 = [1, 4, 3, 34, 653, 2, 5];\n$list2\
    \ = [5, 7, 1, 5, 9, 653, 121];\nvar_dump(common($list1, $list2));\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(5)\n  [2]=>\n  int(653)\n\
    }\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $unique = [];\n    foreach ($l1 as $e) {\n        if (in_array($e, $l2) &&\
    \ !in_array($e, $unique)) {\n            $unique[] = $e;\n        }\n    }\n \
    \   return $unique;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpml9cbpzl.php:21\n\
    Stack trace:\n#0 /tmp/tmpml9cbpzl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpml9cbpzl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $l3 = [];\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($l1)\
    \ && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$l3[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\
    \t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $l3;\n}\n\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $count = count($l1);\n\
    \    $count2 = count($l2);\n    $result = [];\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        for ($j = 0; $j < $count2; $j++) {\n            if ($l1[$i] == $l2[$j])\
    \ {\n                $result[] = $l1[$i];\n            }\n        }\n    }\n \
    \   sort($result);\n    return $result;\n}\n\nprint_r(common([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]));\necho \"\\n\";\nprint_r(common([5, 3, 2,\
    \ 8], [3, 2]));\necho \"\\n\";\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\n\nArray\n(\n \
    \   [0] => 2\n    [1] => 3\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \  $result = [];\n  $len1 = count($l1);\n  $len2 = count($l2);\n  for ($i = 0;\
    \ $i < $len1; $i++) {\n    for ($j = 0; $j < $len2; $j++) {\n      if ($l1[$i]\
    \ == $l2[$j]) {\n        $result[] = $l1[$i];\n      }\n    }\n  }\n  sort($result);\n\
    \  return array_unique($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgvk3c75.php:27\n\
    Stack trace:\n#0 /tmp/tmpbgvk3c75.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbgvk3c75.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $min = (count($l1) > count($l2)) ? $l2 :\
    \ $l1;\n    $max = (count($l1) > count($l2)) ? $l1 : $l2;\n    foreach ($min as\
    \ $m) {\n        if (in_array($m, $max)) {\n            $result[] = $m;\n    \
    \    }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3,\
    \ 2]));\necho '</pre>';\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n\
    \    [0] => 2\n    [1] => 3\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_intersect($l1, $l2);\n}\n\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm_ftudr.php:16\n\
    Stack trace:\n#0 /tmp/tmpdm_ftudr.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdm_ftudr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    $union = [];\n    foreach ($l1 as $value) {\n        $union[]\
    \ = $value;\n    }\n    foreach ($l2 as $value) {\n        $union[] = $value;\n\
    \    }\n    foreach ($union as $value) {\n        if (count($l1) > count($l2))\
    \ {\n            if (in_array($value, $l1) && in_array($value, $l2)) {\n     \
    \           $result[] = $value;\n            }\n        } else {\n           \
    \ if (in_array($value, $l2) && in_array($value, $l1)) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8j6o0yl.php:36\n\
    Stack trace:\n#0 /tmp/tmpb8j6o0yl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb8j6o0yl.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $c = array_intersect($l1, $l2);\n\tsort($c);\n\treturn $c;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $collection = array_intersect($l1, $l2);\n    sort($collection);\n    return\
    \ $collection;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    return array_unique(array_intersect($l1, $l2));\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4i0a62cu.php:15\n\
    Stack trace:\n#0 /tmp/tmp4i0a62cu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp4i0a62cu.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $result = [];\n    sort($l1);\n    sort($l2);\n    foreach ($l1 as $val)\
    \ {\n        if (in_array($val, $l2)) {\n            $result[] = $val;\n     \
    \   }\n    }\n    return array_unique($result);\n}\n\n$l1 = [1, 4, 3, 34, 653,\
    \ 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nprint_r(common($l1, $l2));\nprint_r(common([5,\
    \ 3, 2, 8], [3, 2]));\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n    [2] => 653\n)\nArray\n(\n   \
    \ [0] => 2\n    [1] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    $arr = [];\n\tfor ($i = 0; $i < count($l1); $i++) {\n\t\tif (in_array($l1[$i],\
    \ $l2)) {\n\t\t\tarray_push($arr, $l1[$i]);\n\t\t}\n\t}\n\tsort($arr);\n\treturn\
    \ array_unique($arr);\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $common = [];\n    $length1 = count($l1);\n    $length2 = count($l2);\n \
    \   for ($i = 0; $i < $length1; $i++) {\n        for ($j = 0; $j < $length2; $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $common[] = $l1[$i];\n\
    \            }\n        }\n    }\n    $common = array_unique($common);\n    sort($common);\n\
    \    return $common;\n}\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    // TODO\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2scu6d1x.php:16\n\
    Stack trace:\n#0 /tmp/tmp2scu6d1x.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2scu6d1x.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result = [];\n\twhile ($i <\
    \ count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\
    \t\t} else if ($l1[$i] > $l2[$j]) {\n\t\t\t$j++;\n\t\t} else {\n\t\t\t$result[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $uni = array_unique(array_merge($l1, $l2));\n    sort($uni);\n    return\
    \ $uni;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbbpw65w.php:18\n\
    Stack trace:\n#0 /tmp/tmpbbbpw65w.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbbbpw65w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $intersect = array_intersect($l1, $l2);\n    sort($intersect);\n    return\
    \ $intersect;\n}\n\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\t\
    sort($l1);\n\tsort($l2);\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$i1 = $i2 = 0;\n\t$res = [];\n\twhile ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n\t\tif ($l1[$i1] == $l2[$i2]) {\n\t\t\t$res[] = $l1[$i1];\n\t\t\t$i1++;\n\
    \t\t\t$i2++;\n\t\t} else if ($l1[$i1] < $l2[$i2]) {\n\t\t\t$i1++;\n\t\t} else\
    \ {\n\t\t\t$i2++;\n\t\t}\n\t}\n\treturn $res;\n}\n\nprint_r(common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nprint_r(common([5, 3, 2, 8], [3, 2]));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zcampbr.php:35\n\
    Stack trace:\n#0 /tmp/tmp_zcampbr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_zcampbr.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique common elements for two lists.\n// >>>\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n\
    // >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common($l1, $l2) {\n\
    \    $l3 = array_unique(array_merge($l1, $l2));\n    sort($l3);\n    return $l3;\n\
    }\n\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphr89bkq3.php:18\n\
    Stack trace:\n#0 /tmp/tmphr89bkq3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphr89bkq3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
